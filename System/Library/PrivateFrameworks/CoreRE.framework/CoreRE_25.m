void re::ProfilerDetailedHUDProcessor::~ProfilerDetailedHUDProcessor(re::ProfilerDetailedHUDProcessor *this)
{
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_24ED7F870;
  v2 = (_OWORD *)((char *)this + 64);
  v4 = (_OWORD *)((char *)this + 224);
  v3 = *((_QWORD *)this + 28);
  if (v3)
  {
    if ((*((_BYTE *)this + 232) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 30));
    *v4 = 0u;
    v4[1] = 0u;
  }
  v5 = *((_QWORD *)this + 24);
  if (v5)
  {
    if ((*((_BYTE *)this + 200) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 26));
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
  }
  v6 = *((_QWORD *)this + 20);
  if (v6)
  {
    if ((*((_BYTE *)this + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 22));
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
  }
  v7 = *((_QWORD *)this + 16);
  if (v7)
  {
    if ((*((_BYTE *)this + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 18));
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
  }
  v8 = *((_QWORD *)this + 12);
  if (v8)
  {
    if ((*((_BYTE *)this + 104) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 14));
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
  }
  if (*(_QWORD *)v2)
  {
    if ((*((_BYTE *)this + 72) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v2 + 40))(*(_QWORD *)v2, *((_QWORD *)this + 10));
    *v2 = 0u;
    v2[1] = 0u;
  }
  re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 2);
}

{
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_24ED7F870;
  v2 = (_OWORD *)((char *)this + 64);
  v4 = (_OWORD *)((char *)this + 224);
  v3 = *((_QWORD *)this + 28);
  if (v3)
  {
    if ((*((_BYTE *)this + 232) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 30));
    *v4 = 0u;
    v4[1] = 0u;
  }
  v5 = *((_QWORD *)this + 24);
  if (v5)
  {
    if ((*((_BYTE *)this + 200) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 26));
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
  }
  v6 = *((_QWORD *)this + 20);
  if (v6)
  {
    if ((*((_BYTE *)this + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 22));
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
  }
  v7 = *((_QWORD *)this + 16);
  if (v7)
  {
    if ((*((_BYTE *)this + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 18));
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
  }
  v8 = *((_QWORD *)this + 12);
  if (v8)
  {
    if ((*((_BYTE *)this + 104) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 14));
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
  }
  if (*(_QWORD *)v2)
  {
    if ((*((_BYTE *)this + 72) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v2 + 40))(*(_QWORD *)v2, *((_QWORD *)this + 10));
    *v2 = 0u;
    v2[1] = 0u;
  }
  re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 2);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ProfilerDetailedHUDProcessor::willNeedEvents(re::ProfilerDetailedHUDProcessor *this)
{
  return 0;
}

uint64_t re::ProfilerDetailedHUDProcessor::willNeedStatistics(re::ProfilerDetailedHUDProcessor *this)
{
  return 1;
}

uint64_t re::ProfilerDetailedHUDProcessor::willNeedAttributions(re::ProfilerDetailedHUDProcessor *this)
{
  return 0;
}

uint64_t re::ProfilerDetailedHUDProcessor::willNeedMemoryStatistics(re::ProfilerDetailedHUDProcessor *this)
{
  return 0;
}

void re::RenderGraphCallbackNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_BYTE *)a2 + 593) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphCallbackNode::execute(re::RenderGraphCallbackNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t QueuedCommandBuffer;
  __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  void (**v23)(id, id *);
  uint64_t v24;
  id v25;
  id location[2];
  id v27[2];
  id v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v4 = *((_QWORD *)a2 + 146);
  v5 = (unint64_t)"N2re32CustomPostProcessRenderGraphDataE";
  if (((unint64_t)"N2re32CustomPostProcessRenderGraphDataE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re32CustomPostProcessRenderGraphDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  location[0] = (id)((*(_QWORD *)(*((_QWORD *)a2 + 5) + 48) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5);
  v9 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v4 + 16, (uint64_t *)location);
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      if (*(_QWORD *)(v10 + 8))
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        *(_OWORD *)location = 0u;
        *(_OWORD *)v27 = 0u;
        v28 = 0;
        re::ObjCObject::operator=(location, (id *)(*((_QWORD *)a2 + 1) + 184));
        v11 = objc_msgSend(location[0], sel_newEvent);
        objc_msgSend(v11, sel_setLabel_, CFSTR("CustomPostEvent"));
        v12 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1)
                                                                                                  + 104))
                                + 16));
        objc_msgSend(v12, "encodeSignalEvent:value:", v11, 1);
        QueuedCommandBuffer = re::DrawingManager::createQueuedCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
        objc_storeStrong(&location[1], *(id *)(QueuedCommandBuffer + 16));
        v14 = CFSTR("CustomPostCommandBufferSplit");
        objc_msgSend(location[1], "setLabel:", CFSTR("CustomPostCommandBufferSplit"));

        objc_msgSend(location[1], "encodeWaitForEvent:value:", v11, 1);
        v15 = (*(uint64_t (**)(re::RenderGraphCallbackNode *))(*(_QWORD *)this + 72))(this);
        if (v16)
        {
          re::RenderGraphContext::metalTexture((uint64_t)a2, v15, 0, 0, &v25);
          NS::SharedPtr<MTL::Texture>::operator=(&v28, &v25);
          if (v25)

          v17 = (*(uint64_t (**)(re::RenderGraphCallbackNode *))(*(_QWORD *)this + 64))(this);
          if (v18)
          {
            re::RenderGraphContext::metalTexture((uint64_t)a2, v17, 0, 0, &v25);
            NS::SharedPtr<MTL::Texture>::operator=(v27, &v25);
            if (v25)

            v19 = (*(uint64_t (**)(re::RenderGraphCallbackNode *))(*(_QWORD *)this + 64))(this);
            if (v20 > 1)
            {
              re::RenderGraphContext::metalTexture((uint64_t)a2, v19 + 32, 0, 0, &v25);
              NS::SharedPtr<MTL::Texture>::operator=(&v27[1], &v25);
              if (v25)

              v21 = *(_OWORD *)(v10 + 80);
              v30 = *(_OWORD *)(v10 + 64);
              v31 = v21;
              v22 = *(_OWORD *)(v10 + 112);
              v32 = *(_OWORD *)(v10 + 96);
              v33 = v22;
              v29 = *(_DWORD *)(*(_QWORD *)a2 + 8);
              v23 = (void (**)(id, id *))*(id *)(v10 + 8);
              v23[2](v23, location);
              if (!objc_msgSend(location[1], "status"))
              {
                objc_msgSend(location[1], "encodeSignalEvent:value:", v11, 2);
                objc_msgSend(location[1], "encodeWaitForEvent:value:", v11, 2);

                if (v11)
                if (v28)
                {

                  v28 = 0;
                }
                if (v27[1])
                {

                  v27[1] = 0;
                }
                if (v27[0])
                {

                  v27[0] = 0;
                }

                return;
              }
LABEL_30:
              re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) User enqueued/committed custom post processing command buffer.", "0", "execute", 79);
              _os_crash();
              __break(1u);
              return;
            }
LABEL_29:
            re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, v20);
            _os_crash();
            __break(1u);
            goto LABEL_30;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
        _os_crash();
        __break(1u);
        goto LABEL_29;
      }
    }
  }
}

void re::RenderGraphCallbackNode::~RenderGraphCallbackNode(re::RenderGraphCallbackNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::allocInfo_RenderGraphDummyNigiriNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_426);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_426))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411D908, 0);
    *(uint64_t *)((char *)&qword_25411D918 + 6) = 0;
    qword_25411D918 = 0;
    qword_25411D928 = 0;
    qword_25411D930 = 0xFFFFFFFFLL;
    qword_25411D908 = (uint64_t)&off_24ED7DAA8;
    qword_25411D938 = (uint64_t)"RenderGraphDummyNigiriNode";
    dword_25411D940 = 0;
    unk_25411D948 = 0u;
    unk_25411D958 = 0u;
    unk_25411D968 = 0u;
    qword_25411D978 = 0;
    __cxa_guard_release(&_MergedGlobals_426);
  }
  return &qword_25411D908;
}

void re::initInfo_RenderGraphDummyNigiriNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xD15AF44980978ACCLL;
  v10[1] = "RenderGraphDummyNigiriNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25411D900);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411D900);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411D8F8 = v8;
      __cxa_guard_release(&qword_25411D900);
    }
  }
  *((_QWORD *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25411D8F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDummyNigiriNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDummyNigiriNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDummyNigiriNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDummyNigiriNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphDummyNigiriNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED29270;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphDummyNigiriNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphDummyNigiriNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED29270;
  return result;
}

uint64_t re::introspect_RenderGraphDummyNigiriNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDummyNigiriNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDummyNigiriNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDummyNigiriNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDummyNigiriNode>, this);
}

re::RenderGraphNode *re::RenderGraphNode::RenderGraphNode(re::RenderGraphNode *this)
{
  *(_QWORD *)this = off_24ED293C0;
  re::StringID::invalid((re::RenderGraphNode *)((char *)this + 8));
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 16) = 1;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_24ED82230;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  return this;
}

void re::encodeFullscreenDrawCall(re::DrawCall *a1, uint64_t a2, re::RenderGraphContext *a3, uint64_t a4, int a5, char *a6, char a7)
{
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  _QWORD v43[3];
  int v44;
  uint64_t v45;
  _QWORD v46[3];
  int v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int16 v55;
  char v56;
  char v57;
  __int128 v58;
  char v59;
  _BYTE v60[33];
  uint64_t v61;
  char v62;
  _BYTE v63[32];
  __int128 v64;
  _BYTE v65[24];
  uint64_t *v66;
  __int128 v67;
  uint64_t *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[4];
  uint64_t v76;

  if (a5)
  {
    v14 = re::RenderGraphDataStore::tryGet<re::TintContextData>(*((_QWORD *)a3 + 146), *(_QWORD *)(*((_QWORD *)a3 + 5) + 48));
    if (v14)
    {
      v15 = (_DWORD *)v14;
      v16 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a3 + 1) + 104));
      re::RenderGraphContext::acquireManagedRenderEncoder(v63, a3, v16, 0);
      v17 = *(void **)v63;
      LODWORD(v18) = v15[4];
      LODWORD(v19) = v15[5];
      LODWORD(v20) = v15[6];
      LODWORD(v21) = v15[7];
    }
    else
    {
      v22 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((_QWORD *)a3 + 146), *(_QWORD *)(*((_QWORD *)a3 + 5) + 48));
      if (!v22)
        goto LABEL_7;
      v23 = (_DWORD *)v22;
      v24 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a3 + 1) + 104));
      re::RenderGraphContext::acquireManagedRenderEncoder(v63, a3, v24, 0);
      v17 = *(void **)v63;
      LODWORD(v18) = v23[104];
      LODWORD(v19) = v23[105];
      LODWORD(v20) = v23[106];
      LODWORD(v21) = v23[107];
    }
    objc_msgSend(v17, sel_setBlendColorRed_green_blue_alpha_, v18, v19, v20, v21);
    re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v63);
  }
LABEL_7:
  re::DrawCallRef::DrawCallRef(&v70, a1);
  v25 = re::RenderGraphDataStore::tryGet<re::CameraMatrices>(*((_QWORD *)a3 + 146), *(_QWORD *)(*((_QWORD *)a3 + 5) + 48));
  if (v25)
  {
    v26 = v25;
    *((_DWORD *)a1 + 9) = *(unsigned __int8 *)(v25 + 128);
    *(int64x2_t *)&v63[8] = vdupq_n_s64(1uLL);
    *(_QWORD *)v63 = &v70;
    *(_QWORD *)&v63[24] = &v71;
    v64 = *(_OWORD *)&v63[8];
    *(_OWORD *)&v65[8] = *(_OWORD *)&v63[8];
    *(_QWORD *)v65 = &v72;
    v66 = &v73;
    v67 = *(_OWORD *)&v63[8];
    v68 = &v74;
    v69 = *(_OWORD *)&v63[8];
    memset(v75, 0, sizeof(v75));
    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a3, (uint64_t *)v75);
    v76 = 0;
    v49 = a2;
    v50 = v63;
    v27 = *(_QWORD *)(v26 + 80);
    v51 = *(_QWORD *)(v26 + 40);
    v52 = v27;
    v53 = 0;
    v54 = *(_BYTE *)(v26 + 128);
    v55 = 0;
    v56 = 0;
    v57 = *a6;
    if (v57)
    {
      v58 = *(_OWORD *)(a6 + 1);
      v59 = a6[17];
    }
    memset(v60, 0, sizeof(v60));
    v61 = a4;
    v62 = 0;
    re::RenderGraphContext::encodeDrawCalls(a3, v75, &v49);
LABEL_11:
    if (a5)
    {
      v28 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a3 + 1) + 104));
      re::RenderGraphContext::acquireManagedRenderEncoder(v63, a3, v28, 0);
      LODWORD(v29) = 0;
      LODWORD(v30) = 0;
      LODWORD(v31) = 0;
      LODWORD(v32) = 0;
      objc_msgSend(*(id *)v63, sel_setBlendColorRed_green_blue_alpha_, v29, v30, v31, v32);
      re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v63);
    }
    return;
  }
  v33 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((_QWORD *)a3 + 146), *(_QWORD *)(*((_QWORD *)a3 + 5) + 48));
  v48 = 0;
  v45 = 0;
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  memset(v43, 0, sizeof(v43));
  v44 = 0;
  if (!v33)
  {
    *(_OWORD *)v63 = xmmword_2260E5F10;
    *(_OWORD *)&v63[16] = xmmword_2260E5F20;
    v64 = xmmword_2260E5F40;
    *(_OWORD *)v65 = xmmword_2260E5D70;
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v43, (uint64_t)v63);
    *(_OWORD *)v63 = xmmword_2260E5F10;
    *(_OWORD *)&v63[16] = xmmword_2260E5F20;
    v64 = xmmword_2260E5F40;
    *(_OWORD *)v65 = xmmword_2260E5D70;
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v46, (uint64_t)v63);
    v40 = 1;
    goto LABEL_21;
  }
  v34 = v33;
  v41 = a7;
  v42 = a4;
  if (!*(_QWORD *)(v33 + 128))
  {
LABEL_19:
    v40 = *(unsigned __int8 *)(v34 + 490);
    a4 = v42;
    a7 = v41;
LABEL_21:
    *((_DWORD *)a1 + 9) = v40;
    *(int64x2_t *)&v63[8] = vdupq_n_s64(1uLL);
    *(_QWORD *)v63 = &v70;
    *(_QWORD *)&v63[24] = &v71;
    v64 = *(_OWORD *)&v63[8];
    *(_OWORD *)&v65[8] = *(_OWORD *)&v63[8];
    *(_QWORD *)v65 = &v72;
    v66 = &v73;
    v67 = *(_OWORD *)&v63[8];
    v68 = &v74;
    v69 = *(_OWORD *)&v63[8];
    v49 = a2;
    v50 = v63;
    v51 = v48;
    v52 = v45;
    v53 = 0;
    v54 = v40;
    v55 = 0;
    v56 = 0;
    v57 = *a6;
    if (v57)
    {
      v58 = *(_OWORD *)(a6 + 1);
      v59 = a6[17];
    }
    v60[0] = a7;
    memset(&v60[1], 0, 32);
    v61 = a4;
    v62 = 0;
    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a3, (uint64_t *)v75);
    re::RenderGraphContext::encodeDrawCalls(a3, v75, &v49);
    if (v43[0] && v45)
      (*(void (**)(void))(*(_QWORD *)v43[0] + 40))();
    if (v46[0] && v48)
      (*(void (**)(void))(*(_QWORD *)v46[0] + 40))();
    goto LABEL_11;
  }
  v35 = 0;
  v36 = 0;
  while (1)
  {
    re::Projection::computeMatrix4x4F((re::Projection *)(v34 + 144 + (v35 << 6)), (uint64_t)v63);
    *(_QWORD *)&v38 = re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v43, (uint64_t)v63).n128_u64[0];
    v39 = *(_QWORD *)(v34 + 48);
    if (v39 <= v35)
      break;
    re::RenderCamera::computeInverseTransform((float32x4_t *)(v34 + 64 + 32 * v35), (uint64_t)v63);
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v46, (uint64_t)v63);
    v35 = ++v36;
    if (*(_QWORD *)(v34 + 128) <= (unint64_t)v36)
      goto LABEL_19;
  }
  re::internal::assertLog((re::internal *)6, v37, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v35, v39);
  _os_crash();
  __break(1u);
}

re::RenderGraphFullscreenNode *re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(re::RenderGraphFullscreenNode *this, const char *a2)
{
  re::RenderGraphNode *v3;
  _QWORD *v4;

  v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *((_DWORD *)v3 + 64) = 1;
  *(_QWORD *)v3 = &off_24ED7F9A0;
  v4 = (_QWORD *)((char *)v3 + 288);
  *(_OWORD *)((char *)v3 + 264) = 0u;
  *(_OWORD *)((char *)v3 + 280) = 0u;
  *(_OWORD *)((char *)v3 + 296) = 0u;
  *((_QWORD *)v3 + 39) = 0;
  re::DynamicString::setCapacity(v4, 0);
  *((_QWORD *)this + 40) = 0;
  *((_WORD *)this + 164) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_BYTE *)this + 352) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 0;
  return this;
}

void re::RenderGraphFullscreenNode::configure(re::RenderGraphFullscreenNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  if (*((_QWORD *)this + 34))
    re::AssetHandle::loadAsync((re::RenderGraphFullscreenNode *)((char *)this + 264));
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

void re::RenderGraphFullscreenNode::execute(re::RenderGraphFullscreenNode *this, re::RenderGraphContext *a2)
{
  re::RenderGraphFullscreenNode::executeInternal(this, a2, (re::RenderGraphFullscreenNode *)((char *)this + 264));
}

void re::RenderGraphFullscreenNode::executeInternal(re::RenderGraphFullscreenNode *this, re::RenderGraphContext *a2, const re::AssetHandle *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  re::MaterialParameterTableLayers *v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  char v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  re::BufferTable *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  char *v50;
  int v51;
  const re::WeakStringID *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  char v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;
  re *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  char v68;
  unsigned __int8 *v69;
  int v70;
  uint64_t v71;
  re::BufferTable *v72;
  re *v73;
  const char *v74;
  char v75;
  __int128 v76;
  char v77;
  uint64_t v78;
  id v79;
  _BYTE v80[16];
  int32x2_t v81[5];
  int v82;
  re::MaterialParameterTableLayers *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v80, 5038, 0);
  v6 = *((_QWORD *)this + 40);
  if (!v6)
  {
    v6 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::RenderGraphFullscreenNode *)((char *)this + 264));
    *((_QWORD *)this + 40) = v6;
    if (!v6)
      goto LABEL_94;
  }
  v7 = *(_QWORD *)(v6 + 1664);
  if (re::RenderGraphDataStore::tryGet<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48)))
  {
    v8 = atomic_load((unsigned __int8 *)&qword_25411D990);
    if ((v8 & 1) == 0)
    {
      v73 = (re *)__cxa_guard_acquire(&qword_25411D990);
      if ((_DWORD)v73)
      {
        qword_25411D988 = re::hashString(v73, v74);
        __cxa_guard_release(&qword_25411D990);
      }
    }
    v9 = 0x9E3779B97F4A7C17;
    v10 = qword_25411D988;
    v11 = strlen(*((const char **)this + 4));
    if (v11)
    {
      MurmurHash3_x64_128(*((_QWORD *)this + 4), v11, 0, (unint64_t *)v81);
      v9 = ((*(_QWORD *)&v81[1] - 0x61C8864680B583E9 + (*(_QWORD *)v81 << 6) + (*(_QWORD *)v81 >> 2)) ^ *(_QWORD *)v81)
         - 0x61C8864680B583E9;
    }
    v12 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(*((_QWORD *)a2 + 146), ((v10 >> 2) + (v10 << 6) + v9) ^ v10);
    if (v12)
      v13 = v12 + 8;
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_QWORD *)a3 + 1);
  if (v14)
    v15 = *(_QWORD *)(v14 + 664);
  else
    v15 = 0;
  v16 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
  v81[0] = (int32x2_t)(v15 ^ (v16 >> 31) ^ v16);
  v17 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a2 + 1568, (uint64_t *)v81);
  if (v17)
    v18 = *v17;
  else
    v18 = 0;
  re::RenderGraphContext::makeFullscreenDrawCall(a2, v7, v18, *((_QWORD *)this + 42), *((_QWORD *)this + 43), v13, v81);
  v19 = v83;
  v20 = re::Hash<re::DynamicString>::operator()((uint64_t)&v79, (uint64_t)this + 288);
  v21 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices(v19, v20);
  if (!v22)
  {
    re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_62;
  }
  v82 = *v21;
  if (v82 == -1)
    goto LABEL_94;
  v23 = *((_QWORD *)this + 49);
  if (v23)
  {
    v24 = 0;
    while (1)
    {
      v25 = *((_QWORD *)this + 51);
      v26 = v25 + 56 * v24;
      if (*(_DWORD *)(v26 + 40) != -1 && *(_DWORD *)(v25 + 56 * v24 + 44) != -1)
        break;
LABEL_37:
      if (v23 <= ++v24)
        goto LABEL_38;
    }
    re::RenderGraphContext::metalTexture((uint64_t)a2, v26 + 32, *(unsigned __int8 *)(v25 + 56 * v24 + 48), *(unsigned __int8 *)(v25 + 56 * v24 + 50), &v79);
    v27 = *(_QWORD *)(v26 + 8);
    if ((v27 & 1) != 0)
    {
      v29 = *(_BYTE **)(v26 + 16);
      if (!v29)
      {
        v33 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_34:
        v34 = (_QWORD *)(*(_QWORD *)a2 + 368);
        v78 = v33;
        re::DynamicTextureTableAdd(v34, &v78, &v79);
        if (v79)

        v23 = *((_QWORD *)this + 49);
        goto LABEL_37;
      }
      LOBYTE(v28) = *v29;
    }
    else
    {
      v28 = v27 >> 8;
      v29 = (_BYTE *)(v26 + 9);
    }
    if ((_BYTE)v28)
    {
      v28 = (char)v28;
      v30 = v29[1];
      if (v30)
      {
        v31 = v29 + 2;
        do
        {
          v28 = 31 * v28 + v30;
          v32 = *v31++;
          v30 = v32;
        }
        while (v32);
      }
      v33 = v28 & 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v33 = 0;
    }
    goto LABEL_34;
  }
LABEL_38:
  v35 = *((_QWORD *)this + 54);
  if (v35)
  {
    v36 = 0;
    while (1)
    {
      v37 = *((_QWORD *)this + 56) + 56 * v36;
      if (*(_DWORD *)(v37 + 40) == -1 || *(_DWORD *)(v37 + 44) == -1)
        goto LABEL_54;
      v38 = re::RenderGraphContext::metalBuffer((uint64_t)a2, v37 + 32);
      v39 = *(_QWORD *)(v37 + 8);
      if ((v39 & 1) == 0)
        break;
      v41 = *(_BYTE **)(v37 + 16);
      if (v41)
      {
        LOBYTE(v40) = *v41;
LABEL_46:
        if ((_BYTE)v40)
        {
          v40 = (char)v40;
          v42 = v41[1];
          if (v42)
          {
            v43 = v41 + 2;
            do
            {
              v40 = 31 * v40 + v42;
              v44 = *v43++;
              v42 = v44;
            }
            while (v44);
          }
          v45 = v40 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v45 = 0;
        }
        goto LABEL_53;
      }
      v45 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_53:
      v46 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
      v79 = (id)v45;
      re::BufferTable::setBuffer(v46, (const re::WeakStringID *)&v79, v38);
      v35 = *((_QWORD *)this + 54);
LABEL_54:
      if (v35 <= ++v36)
        goto LABEL_55;
    }
    v40 = v39 >> 8;
    v41 = (_BYTE *)(v37 + 9);
    goto LABEL_46;
  }
LABEL_55:
  v47 = *((_QWORD *)this + 37);
  if ((v47 & 1) != 0)
    v48 = (const char *)*((_QWORD *)this + 38);
  else
    v48 = (char *)this + 297;
  if (*((_BYTE *)a2 + 1332))
  {
LABEL_62:
    v49 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), *((const char **)this + 2), v48);
    if ((*((_QWORD *)this + 37) & 1) == 0)
      goto LABEL_60;
    goto LABEL_63;
  }
  v49 = 0;
  if ((v47 & 1) == 0)
  {
LABEL_60:
    v50 = (char *)this + 297;
    goto LABEL_64;
  }
LABEL_63:
  v50 = (char *)*((_QWORD *)this + 38);
LABEL_64:
  v51 = *((unsigned __int8 *)this + 329);
  v75 = *((_BYTE *)this + 352);
  if (v75)
  {
    v77 = *((_BYTE *)this + 369);
    v76 = *(_OWORD *)((char *)this + 353);
  }
  re::encodeFullscreenDrawCall((re::DrawCall *)v81, (uint64_t)v50, a2, v49, v51 != 0, &v75, *((_BYTE *)this + 328));
  if (*((_QWORD *)this + 49))
  {
    v53 = 0;
    while (1)
    {
      v54 = *((_QWORD *)this + 51) + 56 * v53;
      v55 = *(_QWORD *)(v54 + 8);
      if ((v55 & 1) == 0)
        break;
      v57 = *(_BYTE **)(v54 + 16);
      if (v57)
      {
        LOBYTE(v54) = *v57;
LABEL_72:
        if ((_BYTE)v54)
        {
          v54 = (char)v54;
          v58 = v57[1];
          if (v58)
          {
            v59 = v57 + 2;
            do
            {
              v54 = 31 * v54 + v58;
              v60 = *v59++;
              v58 = v60;
            }
            while (v60);
          }
          v61 = v54 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v61 = 0;
        }
        goto LABEL_79;
      }
      v61 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_79:
      v62 = (re *)(*(_QWORD *)a2 + 368);
      v79 = (id)v61;
      re::DynamicTextureTableRemove(v62, (re::TextureTable *)&v79, v52);
      if (*((_QWORD *)this + 49) <= (unint64_t)++v53)
        goto LABEL_80;
    }
    v56 = v55 >> 8;
    v57 = (_BYTE *)(v54 + 9);
    LOBYTE(v54) = v56;
    goto LABEL_72;
  }
LABEL_80:
  if (*((_QWORD *)this + 54))
  {
    v63 = 0;
    while (1)
    {
      v64 = *((_QWORD *)this + 56) + 56 * v63;
      v65 = *(_QWORD *)(v64 + 8);
      if ((v65 & 1) == 0)
        break;
      v67 = *(_BYTE **)(v64 + 16);
      if (v67)
      {
        LOBYTE(v64) = *v67;
LABEL_86:
        if ((_BYTE)v64)
        {
          v64 = (char)v64;
          v68 = v67[1];
          if (v68)
          {
            v69 = v67 + 2;
            do
            {
              v64 = 31 * v64 + v68;
              v70 = *v69++;
              v68 = v70;
            }
            while (v70);
          }
          v71 = v64 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v71 = 0;
        }
        goto LABEL_93;
      }
      v71 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_93:
      v72 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
      v79 = (id)v71;
      re::BufferTable::removeBuffer(v72, (const re::WeakStringID *)&v79);
      if (*((_QWORD *)this + 54) <= (unint64_t)++v63)
        goto LABEL_94;
    }
    v66 = v65 >> 8;
    v67 = (_BYTE *)(v64 + 9);
    LOBYTE(v64) = v66;
    goto LABEL_86;
  }
LABEL_94:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v80);
}

double re::RenderGraphFullscreenNode::setRenderGraphTexture(uint64_t a1, const re::DynamicString *a2, __n128 *a3)
{
  _anonymous_namespace_ *v5;
  double v6;
  double result;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;

  v5 = (_anonymous_namespace_ *)(a1 + 376);
  re::DynamicString::DynamicString((re::DynamicString *)&v8, a2);
  v11 = a3->n128_u64[0];
  v12 = a3->n128_i64[1];
  v13 = 0;
  v14 = 0;
  v6 = re::DynamicArray<re::SetRenderGraphTextureCommand>::add(v5, (uint64_t)&v8);
  if (v8.n128_u64[0] && (v8.n128_u8[8] & 1) != 0)
    (*(void (**)(double))(*(_QWORD *)v8.n128_u64[0] + 40))(v6);
  v8 = *a3;
  v9 = 0;
  v10 = 2;
  *(_QWORD *)&result = re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(a1 + 176), &v8).n128_u64[0];
  return result;
}

double re::DynamicArray<re::SetRenderGraphTextureCommand>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SetRenderGraphTextureCommand>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 56 * v4;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = -1;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v7 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7;
  result = *(double *)(a2 + 40);
  *(double *)(v5 + 40) = result;
  LOWORD(v7) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(v5 + 50) = *(_BYTE *)(a2 + 50);
  *(_WORD *)(v5 + 48) = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

double re::RenderGraphFullscreenNode::setRenderGraphTextureCommand(uint64_t a1, __n128 *a2)
{
  double result;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  re::DynamicArray<re::SetRenderGraphTextureCommand>::add((_anonymous_namespace_ *)(a1 + 376), (re::DynamicString *)a2);
  v5 = a2[2];
  v6 = 0;
  v7 = 2;
  *(_QWORD *)&result = re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(a1 + 176), &v5).n128_u64[0];
  return result;
}

double re::DynamicArray<re::SetRenderGraphTextureCommand>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4;
  re::DynamicString *v5;
  double result;
  __int16 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SetRenderGraphTextureCommand>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = re::DynamicString::DynamicString((re::DynamicString *)(*((_QWORD *)this + 4) + 56 * v4), a2);
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = -1;
  *((_QWORD *)v5 + 4) = *((_QWORD *)a2 + 4);
  result = *((double *)a2 + 5);
  *((double *)v5 + 5) = result;
  v7 = *((_WORD *)a2 + 24);
  *((_BYTE *)v5 + 50) = *((_BYTE *)a2 + 50);
  *((_WORD *)v5 + 24) = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RenderGraphFullscreenNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::MaterialParameterBlock *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (*(_QWORD *)(a1 + 272))
  {
    v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 264));
    if (v4)
    {
      v5 = *(re::MaterialParameterBlock **)(v4 + 1672);
      if (v5)
      {
        v6 = *(_QWORD *)(a1 + 272);
        if (v6)
          v7 = *(_QWORD *)(v6 + 664);
        else
          v7 = 0;
        v8 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
        v10 = v7 ^ (v8 >> 31) ^ v8;
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v5, &v9);
        re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v10, &v9);
        if (v9)

      }
    }
  }
}

uint64_t re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 24 * v8;
  return v10 + 16;
}

uint64_t *re::allocInfo_RenderGraphFullscreenNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411D9A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411D9A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DAE0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411DAF0 = 0;
    qword_25411DB00 = 0;
    qword_25411DB08 = 0xFFFFFFFFLL;
    qword_25411DAE0 = (uint64_t)&off_24ED7DAA8;
    qword_25411DB10 = (uint64_t)"RenderGraphFullscreenNode";
    dword_25411DB18 = 0;
    xmmword_25411DB20 = 0u;
    unk_25411DB30 = 0u;
    xmmword_25411DB40 = 0u;
    qword_25411DB50 = 0;
    __cxa_guard_release(&qword_25411D9A0);
  }
  return &qword_25411DAE0;
}

void re::initInfo_RenderGraphFullscreenNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20;
  const re::IntrospectionBase *v21;
  unsigned __int8 v22;
  int v23;
  re::IntrospectionRegistry *v24;
  const re::IntrospectionBase *v25;
  const char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned __int8 v32;
  uint64_t *v33;
  unsigned __int8 v34;
  const re::IntrospectionBase *v35;
  unsigned __int8 v36;
  int v37;
  re::IntrospectionRegistry *v38;
  const re::IntrospectionBase *v39;
  const char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  re *v54;
  uint64_t *v55;
  const re::IntrospectionBase *v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  const re::IntrospectionBase *v60;
  void *v61;
  uint64_t v62;
  uint64_t *v63;
  const re::IntrospectionBase *v64;
  void *v65;
  uint64_t v66;
  uint64_t *v67;
  const re::IntrospectionBase *v68;
  void *v69;
  uint64_t v70;
  uint64_t *v71;
  const re::IntrospectionBase *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  re *v76;
  uint64_t *v77;
  const re::IntrospectionBase *v78;
  void *v79;
  uint64_t v80;
  uint64_t *v81;
  const re::IntrospectionBase *v82;
  void *v83;
  uint64_t v84;
  uint64_t *v85;
  const re::IntrospectionBase *v86;
  void *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93[2];
  __int128 v94;
  const char *v95;
  __int128 v96;

  *(_QWORD *)&v94 = 0x59B9C6E0BF4EAF6ALL;
  *((_QWORD *)&v94 + 1) = "RenderGraphFullscreenNode";
  re::StringID::destroyString((re::StringID *)&v94);
  *((_OWORD *)this + 2) = v90;
  v4 = atomic_load((unsigned __int8 *)&qword_25411D998);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411D998);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411DA28 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "material";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411DA30 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "techniqueName";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x12000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411DA38 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = atomic_load((unsigned __int8 *)&qword_25411D9D8);
      if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_25411D9D8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DA60, 0);
        *(uint64_t *)((char *)&qword_25411DA70 + 6) = 0;
        qword_25411DA70 = 0;
        *(_QWORD *)&xmmword_25411DA80 = 0;
        *((_QWORD *)&xmmword_25411DA80 + 1) = 0xFFFFFFFFLL;
        qword_25411DA60 = (uint64_t)&off_24ED1FA08;
        qword_25411DA98 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25411DA90);
        qword_25411DA60 = (uint64_t)&off_24ED7FA48;
        __cxa_guard_release(&qword_25411D9D8);
      }
      if ((_MergedGlobals_427 & 1) == 0)
      {
        v19 = (uint64_t *)qword_25411D9B8;
        if (qword_25411D9B8)
          goto LABEL_10;
        v20 = atomic_load((unsigned __int8 *)&qword_25411D9A8);
        if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_25411D9A8))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DB58, 0);
          *(_QWORD *)(v53 + 22) = 0;
          qword_25411DB68 = 0;
          *(_QWORD *)&xmmword_25411DB78 = 0;
          *((_QWORD *)&xmmword_25411DB78 + 1) = 0xFFFFFFFFLL;
          qword_25411DB58 = (uint64_t)&off_24ED7DAA8;
          qword_25411DB88 = (uint64_t)"SetRenderGraphTextureCommand";
          dword_25411DB90 = 0;
          xmmword_25411DB98 = 0u;
          *(_OWORD *)&qword_25411DBA8 = 0u;
          xmmword_25411DBB8 = 0u;
          qword_25411DBC8 = 0;
          __cxa_guard_release(&qword_25411D9A8);
        }
        qword_25411D9B8 = (uint64_t)&qword_25411DB58;
        *(_QWORD *)&v96 = 0xDF7850A971DCEE0CLL;
        *((_QWORD *)&v96 + 1) = "SetRenderGraphTextureCommand";
        re::StringID::destroyString((re::StringID *)&v96);
        xmmword_25411DB78 = v94;
        v22 = atomic_load((unsigned __int8 *)&qword_25411D9B0);
        if ((v22 & 1) == 0)
        {
          v54 = (re *)__cxa_guard_acquire(&qword_25411D9B0);
          if ((_DWORD)v54)
          {
            v55 = re::introspectionAllocator(v54);
            v57 = re::IntrospectionInfo<re::DynamicString>::get(1, v56);
            v58 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 72, 8);
            *(_DWORD *)v58 = 1;
            *(_QWORD *)(v58 + 8) = "bindingName";
            *(_QWORD *)(v58 + 16) = v57;
            *(_QWORD *)(v58 + 24) = 0;
            *(_QWORD *)(v58 + 32) = 1;
            *(_DWORD *)(v58 + 40) = 0;
            *(_QWORD *)(v58 + 48) = 0;
            *(_QWORD *)(v58 + 56) = 0;
            *(_DWORD *)(v58 + 64) = 0;
            qword_25411DA00 = v58;
            v59 = re::introspectionAllocator((re *)v58);
            v61 = re::introspect_RenderGraphTargetHandle((re *)1, v60);
            v62 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v59 + 32))(v59, 72, 8);
            *(_DWORD *)v62 = 1;
            *(_QWORD *)(v62 + 8) = "targetHandle";
            *(_QWORD *)(v62 + 16) = v61;
            *(_QWORD *)(v62 + 24) = 0;
            *(_QWORD *)(v62 + 32) = 0x2000000002;
            *(_DWORD *)(v62 + 40) = 0;
            *(_QWORD *)(v62 + 48) = 0;
            *(_QWORD *)(v62 + 56) = 0;
            *(_DWORD *)(v62 + 64) = 0;
            qword_25411DA08 = v62;
            v63 = re::introspectionAllocator((re *)v62);
            v65 = re::introspect_BOOL((re *)1, v64);
            v66 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v63 + 32))(v63, 72, 8);
            *(_DWORD *)v66 = 1;
            *(_QWORD *)(v66 + 8) = "makeStencilView";
            *(_QWORD *)(v66 + 16) = v65;
            *(_QWORD *)(v66 + 24) = 0;
            *(_QWORD *)(v66 + 32) = 0x3000000003;
            *(_DWORD *)(v66 + 40) = 0;
            *(_QWORD *)(v66 + 48) = 0;
            *(_QWORD *)(v66 + 56) = 0;
            *(_DWORD *)(v66 + 64) = 0;
            qword_25411DA10 = v66;
            v67 = re::introspectionAllocator((re *)v66);
            v69 = re::introspect_BOOL((re *)1, v68);
            v70 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v67 + 32))(v67, 72, 8);
            *(_DWORD *)v70 = 1;
            *(_QWORD *)(v70 + 8) = "isOptional";
            *(_QWORD *)(v70 + 16) = v69;
            *(_QWORD *)(v70 + 24) = 0;
            *(_QWORD *)(v70 + 32) = 0x3100000004;
            *(_DWORD *)(v70 + 40) = 0;
            *(_QWORD *)(v70 + 48) = 0;
            *(_QWORD *)(v70 + 56) = 0;
            *(_DWORD *)(v70 + 64) = 0;
            qword_25411DA18 = v70;
            v71 = re::introspectionAllocator((re *)v70);
            v73 = re::introspect_BOOL((re *)1, v72);
            v74 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v71 + 32))(v71, 72, 8);
            *(_DWORD *)v74 = 1;
            *(_QWORD *)(v74 + 8) = "makeArrayView";
            *(_QWORD *)(v74 + 16) = v73;
            *(_QWORD *)(v74 + 24) = 0;
            *(_QWORD *)(v74 + 32) = 0x3200000005;
            *(_DWORD *)(v74 + 40) = 0;
            *(_QWORD *)(v74 + 48) = 0;
            *(_QWORD *)(v74 + 56) = 0;
            *(_DWORD *)(v74 + 64) = 0;
            qword_25411DA20 = v74;
            __cxa_guard_release(&qword_25411D9B0);
          }
        }
        qword_25411DB68 = 0x3800000008;
        v19 = &qword_25411DB58;
        dword_25411DB70 = 8;
        word_25411DB74 = 0;
        dword_25411DB90 = 5;
        *(_QWORD *)&xmmword_25411DB98 = &qword_25411DA00;
        *((_QWORD *)&xmmword_25411DB98 + 1) = re::internal::defaultConstruct<re::SetRenderGraphTextureCommand>;
        qword_25411DBA8 = (uint64_t)re::internal::defaultDestruct<re::SetRenderGraphTextureCommand>;
        *(_QWORD *)&xmmword_25411DBB8 = 0;
        qword_25411DBB0 = 0;
        *((_QWORD *)&xmmword_25411DBB8 + 1) = re::internal::defaultConstructV2<re::SetRenderGraphTextureCommand>;
        qword_25411DBC8 = (uint64_t)re::internal::defaultDestructV2<re::SetRenderGraphTextureCommand>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411DB58, v21);
        v96 = v94;
        if ((_MergedGlobals_427 & 1) == 0)
        {
LABEL_10:
          _MergedGlobals_427 = 1;
          v23 = *((_DWORD *)v19 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DA60, 0);
          qword_25411DA70 = 0x2800000003;
          dword_25411DA78 = v23;
          word_25411DA7C = 0;
          *(_QWORD *)&xmmword_25411DA80 = 0;
          *((_QWORD *)&xmmword_25411DA80 + 1) = 0xFFFFFFFFLL;
          qword_25411DA90 = (uint64_t)v19;
          qword_25411DA98 = 0;
          qword_25411DA60 = (uint64_t)&off_24ED7FA48;
          re::IntrospectionRegistry::add(v24, v25);
          re::getPrettyTypeName((re *)&qword_25411DA60, (const re::IntrospectionBase *)&v94);
          if ((BYTE8(v94) & 1) != 0)
            v26 = v95;
          else
            v26 = (char *)&v94 + 9;
          if ((_QWORD)v94 && (BYTE8(v94) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v94 + 40))();
          v92 = *((_OWORD *)v19 + 2);
          v27 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v93);
          if (v27)
          {
            v28 = *v27;
            *((_QWORD *)&v91 + 1) = v28;
          }
          else
          {
            v96 = v92;
            re::TypeBuilder::beginListType((uint64_t)&v94, v93, 1, 0x28uLL, 8uLL, &v96);
            re::TypeBuilder::setConstructor((uint64_t)&v94, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v94, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v94, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v94, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v94, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v94, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v94, v29);
          }
          xmmword_25411DA80 = v91;
          re::StringID::destroyString((re::StringID *)v93);
        }
      }
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "RenderGraphTextureCommands";
      *(_QWORD *)(v30 + 16) = &qword_25411DA60;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x17800000003;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_25411DA40 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v32 = atomic_load((unsigned __int8 *)&qword_25411D9E0);
      if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_25411D9E0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DAA0, 0);
        *(uint64_t *)((char *)&qword_25411DAB0 + 6) = 0;
        qword_25411DAB0 = 0;
        *(_QWORD *)&xmmword_25411DAC0 = 0;
        *((_QWORD *)&xmmword_25411DAC0 + 1) = 0xFFFFFFFFLL;
        qword_25411DAA0 = (uint64_t)&off_24ED1FA08;
        qword_25411DAD8 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25411DAD0);
        qword_25411DAA0 = (uint64_t)&off_24ED7FAE0;
        __cxa_guard_release(&qword_25411D9E0);
      }
      if ((byte_25411D981 & 1) == 0)
      {
        v33 = (uint64_t *)qword_25411D9D0;
        if (qword_25411D9D0)
          goto LABEL_26;
        v34 = atomic_load((unsigned __int8 *)&qword_25411D9C0);
        if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_25411D9C0))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DBD0, 0);
          *(_QWORD *)(v75 + 22) = 0;
          qword_25411DBE0 = 0;
          *(_QWORD *)&xmmword_25411DBF0 = 0;
          *((_QWORD *)&xmmword_25411DBF0 + 1) = 0xFFFFFFFFLL;
          qword_25411DBD0 = (uint64_t)&off_24ED7DAA8;
          qword_25411DC00 = (uint64_t)"SetRenderGraphBufferCommand";
          dword_25411DC08 = 0;
          xmmword_25411DC10 = 0u;
          *(_OWORD *)&qword_25411DC20 = 0u;
          xmmword_25411DC30 = 0u;
          qword_25411DC40 = 0;
          __cxa_guard_release(&qword_25411D9C0);
        }
        qword_25411D9D0 = (uint64_t)&qword_25411DBD0;
        *(_QWORD *)&v96 = 0x4EBFC76BCFC0BDAALL;
        *((_QWORD *)&v96 + 1) = "SetRenderGraphBufferCommand";
        re::StringID::destroyString((re::StringID *)&v96);
        xmmword_25411DBF0 = v94;
        v36 = atomic_load((unsigned __int8 *)&qword_25411D9C8);
        if ((v36 & 1) == 0)
        {
          v76 = (re *)__cxa_guard_acquire(&qword_25411D9C8);
          if ((_DWORD)v76)
          {
            v77 = re::introspectionAllocator(v76);
            v79 = re::IntrospectionInfo<re::DynamicString>::get(1, v78);
            v80 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v77 + 32))(v77, 72, 8);
            *(_DWORD *)v80 = 1;
            *(_QWORD *)(v80 + 8) = "bindingName";
            *(_QWORD *)(v80 + 16) = v79;
            *(_QWORD *)(v80 + 24) = 0;
            *(_QWORD *)(v80 + 32) = 1;
            *(_DWORD *)(v80 + 40) = 0;
            *(_QWORD *)(v80 + 48) = 0;
            *(_QWORD *)(v80 + 56) = 0;
            *(_DWORD *)(v80 + 64) = 0;
            qword_25411D9E8 = v80;
            v81 = re::introspectionAllocator((re *)v80);
            v83 = re::introspect_RenderGraphBufferHandle((re *)1, v82);
            v84 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v81 + 32))(v81, 72, 8);
            *(_DWORD *)v84 = 1;
            *(_QWORD *)(v84 + 8) = "bufferHandle";
            *(_QWORD *)(v84 + 16) = v83;
            *(_QWORD *)(v84 + 24) = 0;
            *(_QWORD *)(v84 + 32) = 0x2000000002;
            *(_DWORD *)(v84 + 40) = 0;
            *(_QWORD *)(v84 + 48) = 0;
            *(_QWORD *)(v84 + 56) = 0;
            *(_DWORD *)(v84 + 64) = 0;
            qword_25411D9F0 = v84;
            v85 = re::introspectionAllocator((re *)v84);
            v87 = re::introspect_BOOL((re *)1, v86);
            v88 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v85 + 32))(v85, 72, 8);
            *(_DWORD *)v88 = 1;
            *(_QWORD *)(v88 + 8) = "isOptional";
            *(_QWORD *)(v88 + 16) = v87;
            *(_QWORD *)(v88 + 24) = 0;
            *(_QWORD *)(v88 + 32) = 0x3000000003;
            *(_DWORD *)(v88 + 40) = 0;
            *(_QWORD *)(v88 + 48) = 0;
            *(_QWORD *)(v88 + 56) = 0;
            *(_DWORD *)(v88 + 64) = 0;
            qword_25411D9F8 = v88;
            __cxa_guard_release(&qword_25411D9C8);
          }
        }
        qword_25411DBE0 = 0x3800000008;
        v33 = &qword_25411DBD0;
        dword_25411DBE8 = 8;
        word_25411DBEC = 0;
        dword_25411DC08 = 3;
        *(_QWORD *)&xmmword_25411DC10 = &qword_25411D9E8;
        *((_QWORD *)&xmmword_25411DC10 + 1) = re::internal::defaultConstruct<re::SetRenderGraphBufferCommand>;
        qword_25411DC20 = (uint64_t)re::internal::defaultDestruct<re::SetRenderGraphBufferCommand>;
        *(_QWORD *)&xmmword_25411DC30 = 0;
        qword_25411DC28 = 0;
        *((_QWORD *)&xmmword_25411DC30 + 1) = re::internal::defaultConstructV2<re::SetRenderGraphBufferCommand>;
        qword_25411DC40 = (uint64_t)re::internal::defaultDestructV2<re::SetRenderGraphBufferCommand>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411DBD0, v35);
        v96 = v94;
        if ((byte_25411D981 & 1) == 0)
        {
LABEL_26:
          byte_25411D981 = 1;
          v37 = *((_DWORD *)v33 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DAA0, 0);
          qword_25411DAB0 = 0x2800000003;
          dword_25411DAB8 = v37;
          word_25411DABC = 0;
          *(_QWORD *)&xmmword_25411DAC0 = 0;
          *((_QWORD *)&xmmword_25411DAC0 + 1) = 0xFFFFFFFFLL;
          qword_25411DAD0 = (uint64_t)v33;
          qword_25411DAD8 = 0;
          qword_25411DAA0 = (uint64_t)&off_24ED7FAE0;
          re::IntrospectionRegistry::add(v38, v39);
          re::getPrettyTypeName((re *)&qword_25411DAA0, (const re::IntrospectionBase *)&v94);
          if ((BYTE8(v94) & 1) != 0)
            v40 = v95;
          else
            v40 = (char *)&v94 + 9;
          if ((_QWORD)v94 && (BYTE8(v94) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v94 + 40))();
          v92 = *((_OWORD *)v33 + 2);
          v41 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v93);
          if (v41)
          {
            v42 = *v41;
            *((_QWORD *)&v91 + 1) = v42;
          }
          else
          {
            v96 = v92;
            re::TypeBuilder::beginListType((uint64_t)&v94, v93, 1, 0x28uLL, 8uLL, &v96);
            re::TypeBuilder::setConstructor((uint64_t)&v94, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v94, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v94, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v94, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v94, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v94, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v94, v43);
          }
          xmmword_25411DAC0 = v91;
          re::StringID::destroyString((re::StringID *)v93);
        }
      }
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "RenderGraphBufferCommands";
      *(_QWORD *)(v44 + 16) = &qword_25411DAA0;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x1A000000004;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_25411DA48 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      v47 = re::introspect_BOOL((re *)1, v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = "tintBlendColor";
      *(_QWORD *)(v48 + 16) = v47;
      *(_QWORD *)(v48 + 24) = 0;
      *(_QWORD *)(v48 + 32) = 0x14900000005;
      *(_DWORD *)(v48 + 40) = 0;
      *(_QWORD *)(v48 + 48) = 0;
      *(_QWORD *)(v48 + 56) = 0;
      *(_DWORD *)(v48 + 64) = 0;
      qword_25411DA50 = v48;
      v49 = re::introspectionAllocator((re *)v48);
      v51 = re::introspect_BOOL((re *)1, v50);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "setViewportToCoverEntireRenderTarget";
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0x14800000006;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_25411DA58 = v52;
      __cxa_guard_release(&qword_25411D998);
    }
  }
  *((_QWORD *)this + 2) = 0x1C800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_25411DA28;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphFullscreenNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphFullscreenNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphFullscreenNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphFullscreenNode>;
  re::IntrospectionRegistry::add(this, v3);
  v89 = v90;
}

re::RenderGraphFullscreenNode *re::internal::defaultConstruct<re::RenderGraphFullscreenNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  return re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphFullscreenNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphFullscreenNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphFullscreenNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFullscreenNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphFullscreenNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphFullscreenNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphFullscreenNode>, this);
}

double re::internal::defaultConstruct<re::SetRenderGraphTextureCommand>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_QWORD *)(a3 + 32) = 0;
  result = NAN;
  *(_QWORD *)(a3 + 40) = -1;
  *(_WORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 50) = 0;
  return result;
}

double re::internal::defaultDestruct<re::SetRenderGraphTextureCommand>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::SetRenderGraphTextureCommand>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 32) = 0;
  result = NAN;
  *(_QWORD *)(a1 + 40) = -1;
  *(_WORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::SetRenderGraphTextureCommand>(uint64_t *a1)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  if (v2)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstruct<re::SetRenderGraphBufferCommand>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_QWORD *)(a3 + 32) = 0;
  result = NAN;
  *(_QWORD *)(a3 + 40) = -1;
  *(_BYTE *)(a3 + 48) = 0;
  return result;
}

double re::internal::defaultDestruct<re::SetRenderGraphBufferCommand>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::SetRenderGraphBufferCommand>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 32) = 0;
  result = NAN;
  *(_QWORD *)(a1 + 40) = -1;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::SetRenderGraphBufferCommand>(uint64_t *a1)
{
  uint64_t v2;
  double result;

  v2 = *a1;
  if (v2)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED7F9A0;
  re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit((uint64_t)this + 416);
  re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit((uint64_t)this + 376);
  v2 = *((_QWORD *)this + 36);
  if (v2)
  {
    if ((*((_BYTE *)this + 296) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 38));
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphFullscreenNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
}

uint64_t re::RenderGraphFullscreenNode::typeInfo(re::RenderGraphFullscreenNode *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFullscreenNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphFullscreenNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphFullscreenNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphFullscreenNode>, 0);
}

uint64_t re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        v6 = 0uLL;
        do
        {
          if (v3->n128_u64[0])
          {
            if ((v3->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v3->n128_u64[0] + 40))(v3->n128_u64[0], v3[1].n128_u64[0], v6);
              v6 = 0uLL;
            }
            *v3 = v6;
            v3[1] = v6;
          }
          v3 = (__n128 *)((char *)v3 + 56);
          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re28DynamicFunctionConstantsDataE";
  if (((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

_QWORD *re::DynamicArray<re::SetRenderGraphTextureCommand>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 56 * v9;
        v11 = 0uLL;
        v12 = v7;
        do
        {
          *(_OWORD *)v12 = v11;
          *((_OWORD *)v12 + 1) = v11;
          *v12 = *v8;
          *v8 = 0;
          v13 = v12[2];
          v12[2] = v8[2];
          v8[2] = v13;
          v12[4] = 0;
          v12[5] = -1;
          *(_OWORD *)(v12 + 3) = *(_OWORD *)(v8 + 3);
          v8[3] = 0;
          v14 = v12[1];
          v12[1] = v8[1];
          v8[1] = v14;
          v12[5] = v8[5];
          LOWORD(v14) = *((_WORD *)v8 + 24);
          *((_BYTE *)v12 + 50) = *((_BYTE *)v8 + 50);
          *((_WORD *)v12 + 24) = v14;
          if (*v8)
          {
            if ((v8[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 40))(*v8, v8[2]);
              v11 = 0uLL;
            }
            *(_OWORD *)v8 = v11;
            *((_OWORD *)v8 + 1) = v11;
          }
          v8 += 7;
          v12 += 7;
          v10 -= 56;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 56 * v9;
        v11 = 0uLL;
        v12 = v7;
        do
        {
          *(_OWORD *)v12 = v11;
          *((_OWORD *)v12 + 1) = v11;
          *v12 = *v8;
          *v8 = 0;
          v13 = v12[2];
          v12[2] = v8[2];
          v8[2] = v13;
          v12[4] = 0;
          v12[5] = -1;
          *(_OWORD *)(v12 + 3) = *(_OWORD *)(v8 + 3);
          v8[3] = 0;
          v14 = v12[1];
          v15 = *v8;
          v12[1] = v8[1];
          v8[1] = v14;
          v12[5] = v8[5];
          *((_BYTE *)v12 + 48) = *((_BYTE *)v8 + 48);
          if (v15)
          {
            if ((v8[1] & 1) != 0)
            {
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 40))(v15, v8[2]);
              v11 = 0uLL;
            }
            *(_OWORD *)v8 = v11;
            *((_OWORD *)v8 + 1) = v11;
          }
          v8 += 7;
          v12 += 7;
          v10 -= 56;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::SetRenderGraphTextureCommand>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  double v8;
  re::IntrospectionBase *v9;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  re::DynamicString::setCapacity(&v11, 0);
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = -1;
  WORD4(v14) = 0;
  BYTE10(v14) = 0;
  v8 = re::DynamicArray<re::SetRenderGraphTextureCommand>::add(a4, (uint64_t)&v11);
  if (v11 && (v12 & 1) != 0)
    (*(void (**)(double))(*v11 + 40))(v8);
  v9 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 56 * *((_QWORD *)a4 + 2) - 56);
  re::introspectionInitElement(a2, a3, a1[6], v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SetRenderGraphTextureCommand>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::SetRenderGraphTextureCommand>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  __n128 *v12;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 56 * a2;
    v9 = 0uLL;
    v10 = a2;
    do
    {
      v11 = *((_QWORD *)v3 + 4);
      v12 = (__n128 *)(v11 + v8);
      result = *(_anonymous_namespace_ **)(v11 + v8);
      if (result)
      {
        if ((v12->n128_u8[8] & 1) != 0)
        {
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD, __n128))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v11 + v8 + 16), v9);
          v9 = 0uLL;
        }
        *v12 = v9;
        v12[1] = v9;
        v4 = *((_QWORD *)v3 + 2);
      }
      ++v10;
      v8 += 56;
    }
    while (v10 < v4);
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 56 * v4 + 50;
      do
      {
        v7 = (_BYTE *)(*((_QWORD *)v3 + 4) + v6);
        *(_OWORD *)(v7 - 34) = 0u;
        *(_OWORD *)(v7 - 50) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7 - 50, 0);
        *(_QWORD *)(v7 - 18) = 0;
        *(_QWORD *)(v7 - 10) = -1;
        *((_WORD *)v7 - 1) = 0;
        v6 += 56;
        *v7 = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  __n128 v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  char v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(__n128 **)(a1 + 32);
      v10 = 56 * v8;
      v11 = 0uLL;
      do
      {
        if (v9->n128_u64[0])
        {
          if ((v9->n128_u8[8] & 1) != 0)
          {
            (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v9->n128_u64[0] + 40))(v9->n128_u64[0], v9[1].n128_u64[0], v11);
            v11 = 0uLL;
          }
          *v9 = v11;
          v9[1] = v11;
        }
        v9 = (__n128 *)((char *)v9 + 56);
        v10 -= 56;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SetRenderGraphTextureCommand>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = re::DynamicArray<re::SetRenderGraphTextureCommand>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 56 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 56;
        v15 -= 56;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 56 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphTextureCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::SetRenderGraphBufferCommand>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::IntrospectionBase *v19;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v21, 0);
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= v9)
  {
    v11 = v10 + 1;
    if (v9 < v10 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v12 = 2 * v9;
        v13 = v9 == 0;
        v14 = 8;
        if (!v13)
          v14 = v12;
        if (v14 <= v11)
          v15 = v11;
        else
          v15 = v14;
        re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity((_QWORD *)a4, v15);
      }
      else
      {
        re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity((_QWORD *)a4, v11);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v10 = *(_QWORD *)(a4 + 16);
  }
  v16 = *(_QWORD *)(a4 + 32) + 56 * v10;
  *(_QWORD *)v16 = v21;
  v17 = v23;
  *(_OWORD *)(v16 + 8) = v22;
  *(_QWORD *)(v16 + 24) = v17;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = -1;
  *(_BYTE *)(v16 + 48) = 0;
  v18 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v18 + 1;
  ++*(_DWORD *)(a4 + 24);
  v19 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 56 * v18);
  re::introspectionInitElement(a2, a3, a1[6], v19);
  return v19;
}

uint64_t re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SetRenderGraphBufferCommand>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 56 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::SetRenderGraphBufferCommand>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  __n128 *v12;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 56 * a2;
    v9 = 0uLL;
    v10 = a2;
    do
    {
      v11 = *((_QWORD *)v3 + 4);
      v12 = (__n128 *)(v11 + v8);
      result = *(_anonymous_namespace_ **)(v11 + v8);
      if (result)
      {
        if ((v12->n128_u8[8] & 1) != 0)
        {
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD, __n128))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v11 + v8 + 16), v9);
          v9 = 0uLL;
        }
        *v12 = v9;
        v12[1] = v9;
        v4 = *((_QWORD *)v3 + 2);
      }
      ++v10;
      v8 += 56;
    }
    while (v10 < v4);
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 56 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = -1;
        v6 += 56;
        *(_BYTE *)(v7 + 48) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  __n128 v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  char v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(__n128 **)(a1 + 32);
      v10 = 56 * v8;
      v11 = 0uLL;
      do
      {
        if (v9->n128_u64[0])
        {
          if ((v9->n128_u8[8] & 1) != 0)
          {
            (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v9->n128_u64[0] + 40))(v9->n128_u64[0], v9[1].n128_u64[0], v11);
            v11 = 0uLL;
          }
          *v9 = v11;
          v9[1] = v11;
        }
        v9 = (__n128 *)((char *)v9 + 56);
        v10 -= 56;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::SetRenderGraphBufferCommand>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SetRenderGraphBufferCommand>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = re::DynamicArray<re::SetRenderGraphBufferCommand>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 56 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 56;
        v15 -= 56;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 56 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 56 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SetRenderGraphBufferCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

re::RenderGraphFullscreenNode *re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;

  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v2 + 64) = 1;
  *(_QWORD *)v2 = &off_24ED7F9A0;
  v3 = (_QWORD *)((char *)v2 + 288);
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *(_OWORD *)((char *)v2 + 280) = 0u;
  *(_OWORD *)((char *)v2 + 296) = 0u;
  *((_QWORD *)v2 + 39) = 0;
  re::DynamicString::setCapacity(v3, 0);
  *((_QWORD *)this + 40) = 0;
  *((_WORD *)this + 164) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_BYTE *)this + 352) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 0;
  return this;
}

void re::GenerateClusterAABBNode::configure(re::GenerateClusterAABBNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  do
    v4 = __ldaxr((unsigned __int8 *)&re::GenerateClusterAABBNode::configure(char const*,char const*,re::RenderFrame &)::__FILE____LINE___logged);
  while (__stlxr(1u, (unsigned __int8 *)&re::GenerateClusterAABBNode::configure(char const*,char const*,re::RenderFrame &)::__FILE____LINE___logged));
  if ((v4 & 1) == 0)
  {
    v5 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "GenerateClusterAABBNode is deprecated and not implemented", v6, 2u);
    }
  }
}

void re::ComputeClusterProbeIntersectionNode::configure(re::ComputeClusterProbeIntersectionNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  do
    v4 = __ldaxr((unsigned __int8 *)&re::ComputeClusterProbeIntersectionNode::configure(char const*,char const*,re::RenderFrame &)::__FILE____LINE___logged);
  while (__stlxr(1u, (unsigned __int8 *)&re::ComputeClusterProbeIntersectionNode::configure(char const*,char const*,re::RenderFrame &)::__FILE____LINE___logged));
  if ((v4 & 1) == 0)
  {
    v5 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "ComputeClusterProbeIntersectionNode is deprecated and not implemented", v6, 2u);
    }
  }
}

void re::DebugClusterAABBNode::configure(re::DebugClusterAABBNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  do
    v4 = __ldaxr(re::DebugClusterAABBNode::configure(char const*,char const*,re::RenderFrame &)::__FILE____LINE___logged);
  while (__stlxr(1u, re::DebugClusterAABBNode::configure(char const*,char const*,re::RenderFrame &)::__FILE____LINE___logged));
  if ((v4 & 1) == 0)
  {
    v5 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "DebugClusterAABBNode is deprecated and not implemented", v6, 2u);
    }
  }
}

uint64_t *re::allocInfo_GenerateClusterAABBNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_428);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_428))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DCB8, 0);
    *(uint64_t *)((char *)&qword_25411DCC8 + 6) = 0;
    qword_25411DCC8 = 0;
    qword_25411DCD8 = 0;
    qword_25411DCE0 = 0xFFFFFFFFLL;
    qword_25411DCB8 = (uint64_t)&off_24ED7DAA8;
    qword_25411DCE8 = (uint64_t)"GenerateClusterAABBNode";
    dword_25411DCF0 = 0;
    xmmword_25411DCF8 = 0u;
    unk_25411DD08 = 0u;
    xmmword_25411DD18 = 0u;
    qword_25411DD28 = 0;
    __cxa_guard_release(&_MergedGlobals_428);
  }
  return &qword_25411DCB8;
}

void re::initInfo_GenerateClusterAABBNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0xE382A9FAED18684ELL;
  v18[1] = "GenerateClusterAABBNode";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_25411DC50);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411DC50);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411DC88 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "library";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411DC90 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "computeFunction";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x11800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411DC98 = v16;
      __cxa_guard_release(&qword_25411DC50);
    }
  }
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25411DC88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::GenerateClusterAABBNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::GenerateClusterAABBNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::GenerateClusterAABBNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::GenerateClusterAABBNode>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

re::GenerateClusterAABBNode *re::internal::defaultConstruct<re::GenerateClusterAABBNode>(int a1, int a2, re::GenerateClusterAABBNode *this)
{
  return re::GenerateClusterAABBNode::GenerateClusterAABBNode(this);
}

void re::internal::defaultDestruct<re::GenerateClusterAABBNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)(a3 + 312);
  if (v4)
  {

    *(_QWORD *)(a3 + 312) = 0;
  }
  v5 = *(_QWORD *)(a3 + 280);
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a3 + 296));
    *(_OWORD *)(a3 + 280) = 0u;
    *(_OWORD *)(a3 + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 256));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a3);
}

void re::internal::defaultDestructV2<re::GenerateClusterAABBNode>(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 312);
  if (v2)
  {

    *(_QWORD *)(a1 + 312) = 0;
  }
  v3 = *(_QWORD *)(a1 + 280);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 296));
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 256));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a1);
}

uint64_t re::introspect_GenerateClusterAABBNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GenerateClusterAABBNode", (uint64_t (*)(re::internal *))re::allocInfo_GenerateClusterAABBNode, (re::IntrospectionBase *(*)(void))re::initInfo_GenerateClusterAABBNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::GenerateClusterAABBNode>, this);
}

uint64_t *re::allocInfo_ComputeClusterProbeIntersectionNode(re *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411DC58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411DC58))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DD30, 0);
    *(uint64_t *)((char *)&qword_25411DD40 + 6) = 0;
    qword_25411DD40 = 0;
    qword_25411DD50 = 0;
    qword_25411DD58 = 0xFFFFFFFFLL;
    qword_25411DD30 = (uint64_t)&off_24ED7DAA8;
    qword_25411DD60 = (uint64_t)"ComputeClusterProbeIntersectionNode";
    dword_25411DD68 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_25411DDA0 = 0;
    __cxa_guard_release(&qword_25411DC58);
  }
  return &qword_25411DD30;
}

void re::initInfo_ComputeClusterProbeIntersectionNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x7B570A09A2CECBB0;
  v18[1] = "ComputeClusterProbeIntersectionNode";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_25411DC60);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411DC60);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411DCA0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "library";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411DCA8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "computeFunction";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x11800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411DCB0 = v16;
      __cxa_guard_release(&qword_25411DC60);
    }
  }
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25411DCA0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ComputeClusterProbeIntersectionNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ComputeClusterProbeIntersectionNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ComputeClusterProbeIntersectionNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ComputeClusterProbeIntersectionNode>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

re::ComputeClusterProbeIntersectionNode *re::internal::defaultConstruct<re::ComputeClusterProbeIntersectionNode>(int a1, int a2, re::ComputeClusterProbeIntersectionNode *this)
{
  return re::ComputeClusterProbeIntersectionNode::ComputeClusterProbeIntersectionNode(this);
}

void re::internal::defaultDestruct<re::ComputeClusterProbeIntersectionNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)(a3 + 312);
  if (v4)
  {

    *(_QWORD *)(a3 + 312) = 0;
  }
  v5 = *(_QWORD *)(a3 + 280);
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a3 + 296));
    *(_OWORD *)(a3 + 280) = 0u;
    *(_OWORD *)(a3 + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 256));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a3);
}

void re::internal::defaultDestructV2<re::ComputeClusterProbeIntersectionNode>(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 312);
  if (v2)
  {

    *(_QWORD *)(a1 + 312) = 0;
  }
  v3 = *(_QWORD *)(a1 + 280);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 296));
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 256));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a1);
}

uint64_t re::introspect_ComputeClusterProbeIntersectionNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ComputeClusterProbeIntersectionNode", (uint64_t (*)(re::internal *))re::allocInfo_ComputeClusterProbeIntersectionNode, (re::IntrospectionBase *(*)(void))re::initInfo_ComputeClusterProbeIntersectionNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ComputeClusterProbeIntersectionNode>, this);
}

uint64_t *re::allocInfo_DebugClusterAABBNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411DC68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411DC68))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DDA8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411DDB8 = 0;
    qword_25411DDC8 = 0;
    qword_25411DDD0 = 0xFFFFFFFFLL;
    qword_25411DDA8 = (uint64_t)&off_24ED7DAA8;
    qword_25411DDD8 = (uint64_t)"DebugClusterAABBNode";
    dword_25411DDE0 = 0;
    xmmword_25411DDE8 = 0u;
    unk_25411DDF8 = 0u;
    xmmword_25411DE08 = 0u;
    qword_25411DE18 = 0;
    __cxa_guard_release(&qword_25411DC68);
  }
  return &qword_25411DDA8;
}

void re::initInfo_DebugClusterAABBNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xB58AF7B3E254EF92;
  v14[1] = "DebugClusterAABBNode";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25411DC70);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411DC70);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411DC78 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "material";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411DC80 = v12;
      __cxa_guard_release(&qword_25411DC70);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411DC78;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DebugClusterAABBNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DebugClusterAABBNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DebugClusterAABBNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DebugClusterAABBNode>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

double re::internal::defaultConstruct<re::DebugClusterAABBNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED7FCC8;
  result = 0.0;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::DebugClusterAABBNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 264));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a3);
}

double re::internal::defaultConstructV2<re::DebugClusterAABBNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED7FCC8;
  result = 0.0;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::DebugClusterAABBNode>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 264));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a1);
}

uint64_t re::introspect_DebugClusterAABBNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DebugClusterAABBNode", (uint64_t (*)(re::internal *))re::allocInfo_DebugClusterAABBNode, (re::IntrospectionBase *(*)(void))re::initInfo_DebugClusterAABBNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DebugClusterAABBNode>, this);
}

void re::GenerateClusterAABBNode::~GenerateClusterAABBNode(re::GenerateClusterAABBNode *this)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {

    *((_QWORD *)this + 39) = 0;
  }
  v3 = *((_QWORD *)this + 35);
  if (v3)
  {
    if ((*((_BYTE *)this + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 37));
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_OWORD *)((char *)this + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::GenerateClusterAABBNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;
  uint64_t v3;

  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {

    *((_QWORD *)this + 39) = 0;
  }
  v3 = *((_QWORD *)this + 35);
  if (v3)
  {
    if ((*((_BYTE *)this + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 37));
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_OWORD *)((char *)this + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::GenerateClusterAABBNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::ComputeClusterProbeIntersectionNode::~ComputeClusterProbeIntersectionNode(re::ComputeClusterProbeIntersectionNode *this)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {

    *((_QWORD *)this + 39) = 0;
  }
  v3 = *((_QWORD *)this + 35);
  if (v3)
  {
    if ((*((_BYTE *)this + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 37));
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_OWORD *)((char *)this + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::ComputeClusterProbeIntersectionNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;
  uint64_t v3;

  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {

    *((_QWORD *)this + 39) = 0;
  }
  v3 = *((_QWORD *)this + 35);
  if (v3)
  {
    if ((*((_BYTE *)this + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 37));
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_OWORD *)((char *)this + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::ComputeClusterProbeIntersectionNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::DebugClusterAABBNode::~DebugClusterAABBNode(re::DebugClusterAABBNode *this)
{
  re::AssetHandle::~AssetHandle((re::DebugClusterAABBNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  re::AssetHandle::~AssetHandle((re::DebugClusterAABBNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

re::GenerateClusterAABBNode *re::GenerateClusterAABBNode::GenerateClusterAABBNode(re::GenerateClusterAABBNode *this)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;

  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v2 = off_24ED7FB78;
  v3 = (_QWORD *)((char *)v2 + 280);
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_QWORD *)v2 + 38) = 0;
  re::DynamicString::setCapacity(v3, 0);
  *((_QWORD *)this + 39) = 0;
  return this;
}

re::ComputeClusterProbeIntersectionNode *re::ComputeClusterProbeIntersectionNode::ComputeClusterProbeIntersectionNode(re::ComputeClusterProbeIntersectionNode *this)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;

  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v2 = off_24ED7FC20;
  v3 = (_QWORD *)((char *)v2 + 280);
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_QWORD *)v2 + 38) = 0;
  re::DynamicString::setCapacity(v3, 0);
  *((_QWORD *)this + 39) = 0;
  return this;
}

void re::RenderGraphDofSetupNode::configure(re::RenderGraphDofSetupNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  if (*((_QWORD *)this + 64))
    re::AssetHandle::loadAsync((re::RenderGraphDofSetupNode *)((char *)this + 504));
  if (*((_QWORD *)this + 67))
    re::AssetHandle::loadAsync((re::RenderGraphDofSetupNode *)((char *)this + 528));
  if (*((_QWORD *)this + 70))
    re::AssetHandle::loadAsync((re::RenderGraphDofSetupNode *)((char *)this + 552));
  re::RenderGraphFullscreenNode::configure(this, a2, a3, a4);
}

void re::RenderGraphDofSetupNode::execute(re::RenderGraphDofSetupNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  id v14;
  re::Allocator *v15;
  const char *v16;
  float v17;
  int v18;
  float v19;
  float v20;
  uint64_t *v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  unint64_t v29;
  float v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  simd_float4 *v43;
  re::BufferTable *v44;
  uint64_t v45;
  uint64_t v46;
  simd_float4 v47;
  simd_float4 v48;
  simd_float4 v49;
  simd_float4 v50;
  uint64_t v51;
  _BYTE v52[16];
  id v53;
  _BYTE v54[28];
  __int16 v55;
  uint64_t v56;
  simd_float4x4 v57;
  __int128 v58;
  uint64_t v59;
  simd_float4x4 v60;

  v59 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v52, 5048, 0);
  v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::RenderGraphDofSetupNode *)((char *)this + 504));
  *((_QWORD *)this + 57) = v4;
  if (!v4)
    goto LABEL_33;
  v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::RenderGraphDofSetupNode *)((char *)this + 528));
  *((_QWORD *)this + 58) = v5;
  if (!v5)
    goto LABEL_33;
  v6 = (uint64_t *)((char *)this + 552);
  v7 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::RenderGraphDofSetupNode *)((char *)this + 552));
  *((_QWORD *)this + 59) = v7;
  if (!v7)
    goto LABEL_33;
  if (!*((_QWORD *)this + 24))
  {
    v53 = 0;
    v58 = 0u;
    memset(&v57, 0, sizeof(v57));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v54 = 136315906;
    *(_QWORD *)&v54[4] = "operator[]";
    *(_WORD *)&v54[12] = 1024;
    *(_DWORD *)&v54[14] = 789;
    *(_WORD *)&v54[18] = 2048;
    *(_QWORD *)&v54[20] = 0;
    v55 = 2048;
    v56 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_39:
    re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
  }
  re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 26), 0, 0, &v53);
  v8 = re::RenderGraphDataStore::get<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (!*(_QWORD *)(v8 + 128))
    goto LABEL_39;
  re::Projection::computeMatrix4x4F((re::Projection *)(v8 + 144), (uint64_t)&v57);
  v60 = __invert_f4(v57);
  v49 = v60.columns[1];
  v50 = v60.columns[0];
  v47 = v60.columns[3];
  v48 = v60.columns[2];
  v60.columns[0].i32[0] = *((_DWORD *)this + 120);
  v10 = *((float *)this + 122);
  v11 = v60.columns[0].f32[0] * (float)((float)(v60.columns[0].f32[0] / *((float *)this + 121)) * 0.5);
  v12 = v60.columns[0].f32[0] + (float)(v10 * -1000.0);
  v13 = *((float *)this + 123);
  v14 = objc_msgSend(v53, sel_height);
  v15 = *(re::Allocator **)(*(_QWORD *)a2 + 24);
  if ((*((_BYTE *)this + 296) & 1) != 0)
    v16 = (const char *)*((_QWORD *)this + 38);
  else
    v16 = (char *)this + 297;
  memset(&v57, 0, 32);
  v17 = v11 / v12;
  re::DynamicString::DynamicString((re::DynamicString *)&v57.columns[2], v16, v15);
  v18 = *((_DWORD *)this + 124);
  if (v18 == 1)
  {
    v57.columns[0].i64[0] = *((_QWORD *)this + 58);
    v19 = 5.0;
    v6 = (uint64_t *)((char *)this + 528);
  }
  else if (v18 == 2)
  {
    v57.columns[0].i64[0] = *((_QWORD *)this + 59);
    v19 = 10.0;
  }
  else
  {
    v57.columns[0].i64[0] = *((_QWORD *)this + 57);
    v19 = 5.0;
    v6 = (uint64_t *)((char *)this + 504);
  }
  v20 = v17 / v13;
  v21 = re::AssetHandle::operator=(&v57.columns[0].i64[1], v6);
  v22 = v19 * 0.25;
  v23 = *((_QWORD *)a2 + 146);
  v24 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_28DepthOfFieldBlurMaterialDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_28DepthOfFieldBlurMaterialDataEEE" & 0x8000000000000000) != 0)
  {
    v25 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_28DepthOfFieldBlurMaterialDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v26 = 5381;
    do
    {
      v24 = v26;
      v27 = *v25++;
      v26 = (33 * v26) ^ v27;
    }
    while (v27);
  }
  v28 = v20 * (float)(unint64_t)v14;
  v29 = (*(_QWORD *)(*((_QWORD *)a2 + 5) + 48) + (v24 << 6) + (v24 >> 2) - 0x61C8864680B583E9) ^ v24;
  v30 = v22 / *((float *)this + 122);
  v31 = re::globalAllocators((re *)v21);
  v32 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31[2] + 32))(v31[2], 72, 8);
  *v32 = off_24ED7FF80;
  v32[1] = v57.columns[0].i64[0];
  v32[2] = 0;
  v32[3] = 0;
  v32[4] = 0;
  v33 = v57.columns[1].i64[0];
  v57.columns[1].i64[0] = 0;
  v34 = v32[2];
  v32[2] = v57.columns[0].i64[1];
  *(_OWORD *)(v32 + 3) = __PAIR128__(v57.columns[1].u64[1], v33);
  v57.columns[0].i64[1] = v34;
  v57.columns[1].i64[1] = 0;
  re::DynamicString::DynamicString((re::DynamicString *)(v32 + 5), (const re::DynamicString *)&v57.columns[2]);
  v35 = *(_QWORD *)(v23 + 16);
  if (!v35
    || (v35 = v29 % *(unsigned int *)(v23 + 40),
        v36 = *(unsigned int *)(*(_QWORD *)(v23 + 24) + 4 * v35),
        (_DWORD)v36 == 0x7FFFFFFF))
  {
LABEL_19:
    v37 = *(unsigned int *)(v23 + 52);
    if ((_DWORD)v37 == 0x7FFFFFFF)
    {
      v37 = *(unsigned int *)(v23 + 48);
      v38 = v37;
      if ((_DWORD)v37 == *(_DWORD *)(v23 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v23 + 16, 2 * *(_DWORD *)(v23 + 44));
        LODWORD(v35) = v29 % *(unsigned int *)(v23 + 40);
        v38 = *(_DWORD *)(v23 + 48);
      }
      *(_DWORD *)(v23 + 48) = v38 + 1;
      v39 = *(_QWORD *)(v23 + 32);
      v40 = *(_DWORD *)(v39 + 24 * v37);
    }
    else
    {
      v39 = *(_QWORD *)(v23 + 32);
      v40 = *(_DWORD *)(v39 + 24 * v37);
      *(_DWORD *)(v23 + 52) = v40 & 0x7FFFFFFF;
    }
    v41 = 24 * v37;
    *(_DWORD *)(v39 + v41) = v40 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v23 + 32) + v41) = *(_DWORD *)(*(_QWORD *)(v23 + 32) + 24 * v37) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v23 + 24) + 4 * v35);
    *(_QWORD *)(*(_QWORD *)(v23 + 32) + 24 * v37 + 8) = v29;
    *(_QWORD *)(*(_QWORD *)(v23 + 32) + 24 * v37 + 16) = v32;
    *(_DWORD *)(*(_QWORD *)(v23 + 24) + 4 * v35) = v37;
    ++*(_DWORD *)(v23 + 44);
    ++*(_DWORD *)(v23 + 56);
    goto LABEL_25;
  }
  v45 = *(_QWORD *)(v23 + 32);
  while (*(_QWORD *)(v45 + 24 * v36 + 8) != v29)
  {
    LODWORD(v36) = *(_DWORD *)(v45 + 24 * v36) & 0x7FFFFFFF;
    if ((_DWORD)v36 == 0x7FFFFFFF)
      goto LABEL_19;
  }
LABEL_25:
  re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x60uLL, 0x10uLL, (uint64_t)v54);
  v42 = *(void **)&v54[16];
  v46 = *(_QWORD *)&v54[8];
  v43 = (simd_float4 *)(*(_QWORD *)v54 + *(unsigned int *)&v54[8]);
  *v43 = v50;
  v43[1] = v49;
  v43[2] = v48;
  v43[3] = v47;
  v43[4].f32[0] = v10;
  v43[4].f32[1] = v28;
  v43[4].f32[2] = v19;
  v43[4].f32[3] = 1.0 / v19;
  v43[5].f32[0] = v22;
  v43[5].f32[1] = v30;
  *(_QWORD *)v54 = v42;
  *(_QWORD *)&v54[8] = v46;
  v44 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
  v51 = 0x248FEBCC4417DE54;
  re::BufferTable::setBuffer(v44, (const re::WeakStringID *)&v51, (uint64_t)v54);
  re::RenderGraphFullscreenNode::executeInternal(this, a2, (re::RenderGraphDofSetupNode *)((char *)this + 264));
  if (*(_QWORD *)v54)

  if (v57.columns[2].i64[0])
  {
    if ((v57.columns[2].i8[8] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v57.columns[2].i64[0] + 40))();
    memset(&v57.columns[2], 0, 32);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v57.columns[0].u32[2]);
  if (v53)

LABEL_33:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v52);
}

void re::RenderGraphDofSetupNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  re::MaterialParameterBlock *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_DWORD *)(a1 + 496);
  if (v4 == 1)
  {
    if (!*(_QWORD *)(a1 + 536))
      goto LABEL_20;
    v9 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 528));
    if (!v9)
      goto LABEL_20;
    v6 = *(re::MaterialParameterBlock **)(v9 + 1672);
    if (!v6)
      goto LABEL_20;
    v7 = *(_QWORD *)(a1 + 536);
    if (!v7)
      goto LABEL_7;
  }
  else if (v4 == 2)
  {
    if (!*(_QWORD *)(a1 + 560))
      goto LABEL_20;
    v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 552));
    if (!v5)
      goto LABEL_20;
    v6 = *(re::MaterialParameterBlock **)(v5 + 1672);
    if (!v6)
      goto LABEL_20;
    v7 = *(_QWORD *)(a1 + 560);
    if (!v7)
    {
LABEL_7:
      v8 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    if (!*(_QWORD *)(a1 + 512))
      goto LABEL_20;
    v10 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 504));
    if (!v10)
      goto LABEL_20;
    v6 = *(re::MaterialParameterBlock **)(v10 + 1672);
    if (!v6)
      goto LABEL_20;
    v7 = *(_QWORD *)(a1 + 512);
    if (!v7)
      goto LABEL_7;
  }
  v8 = *(_QWORD *)(v7 + 664);
LABEL_18:
  v11 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  v13 = v8 ^ (v11 >> 31) ^ v11;
  re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v6, &v12);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v13, &v12);
  if (v12)

LABEL_20:
  re::RenderGraphFullscreenNode::getMaterialParameterTables(a1, a2);
}

void re::RenderGraphDofBokehBlurNode::execute(re::RenderGraphDofBokehBlurNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  re *v9;
  _QWORD *v10;
  NSObject *v11;
  _BYTE v12[16];
  uint8_t buf[8];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v12, 5050, 0);
  v4 = *((_QWORD *)a2 + 146);
  v5 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_28DepthOfFieldBlurMaterialDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_28DepthOfFieldBlurMaterialDataEEE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_28DepthOfFieldBlurMaterialDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  *(_QWORD *)buf = (*(_QWORD *)(*((_QWORD *)a2 + 5) + 48) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  v9 = (re *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v4 + 16, (uint64_t *)buf);
  if (v9 && (v10 = *(_QWORD **)v9) != 0)
  {
    *((_QWORD *)this + 40) = v10[1];
    re::DynamicString::operator=((re::RenderGraphDofBokehBlurNode *)((char *)this + 288), (re::DynamicString *)(v10 + 5));
    re::RenderGraphFullscreenNode::executeInternal(this, a2, (const re::AssetHandle *)(v10 + 2));
  }
  else
  {
    v11 = *re::graphicsLogObjects(v9);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "RenderGraphDofBokehBlurNode expects DepthOfFieldBlurMaterialDataWrapper from the render graph                         data store but there isn't any. Will skip the execution. Did you forget to add a RenderGraphDofSetupNode?", buf, 2u);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v12);
}

void re::RenderGraphDofCompositeNode::configure(re::RenderGraphDofCompositeNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  if (*((_QWORD *)this + 61))
    re::AssetHandle::loadAsync((re::RenderGraphDofCompositeNode *)((char *)this + 480));
  if (*((_QWORD *)this + 64))
    re::AssetHandle::loadAsync((re::RenderGraphDofCompositeNode *)((char *)this + 504));
  re::RenderGraphFullscreenNode::configure(this, a2, a3, a4);
}

void re::RenderGraphDofCompositeNode::execute(re::RenderGraphDofCompositeNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v6, 5052, 0);
  v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::RenderGraphDofCompositeNode *)((char *)this + 480));
  *((_QWORD *)this + 57) = v4;
  if (v4)
  {
    v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::RenderGraphDofCompositeNode *)((char *)this + 504));
    *((_QWORD *)this + 58) = v5;
    if (v5)
    {
      if (!*((_BYTE *)this + 472))
        v5 = *((_QWORD *)this + 57);
      *((_QWORD *)this + 40) = v5;
      re::RenderGraphFullscreenNode::executeInternal(this, a2, (re::RenderGraphDofCompositeNode *)((char *)this + 264));
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v6);
}

void re::RenderGraphDofCompositeNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::MaterialParameterBlock *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 504));
  if (v4)
  {
    v5 = *(re::MaterialParameterBlock **)(v4 + 1672);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 272);
      if (v6)
        v7 = *(_QWORD *)(v6 + 664);
      else
        v7 = 0;
      v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
      v10 = v7 ^ (v8 >> 31) ^ v8;
      re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v5, &v9);
      re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v10, &v9);
      if (v9)

    }
  }
}

void re::introspect_DepthOfFieldQualityProfile(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25411DE28);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25411DE28);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Low";
      qword_25411DE70 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Medium";
      qword_25411DE78 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "High";
      qword_25411DE80 = v32;
      __cxa_guard_release(&qword_25411DE28);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25411DE30);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25411DE30))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25411DEA8, "DepthOfFieldQualityProfile", 4, 4, 1, 1);
    qword_25411DEA8 = (uint64_t)&off_24ED7D9E8;
    qword_25411DEE8 = (uint64_t)&re::introspect_DepthOfFieldQualityProfile(BOOL)::enumTable;
    dword_25411DEB8 = 9;
    __cxa_guard_release(&qword_25411DE30);
  }
  if ((_MergedGlobals_429 & 1) == 0)
  {
    _MergedGlobals_429 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411DEA8, a2);
    v34 = 0xBD83B9DA93A8E214;
    v35 = "DepthOfFieldQualityProfile";
    v38[0] = 208862;
    v38[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_25411DEE8;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_25411DEC8 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "DepthOfFieldQualityProfile", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_RenderGraphDofSetupNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411DE38);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411DE38))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DF38, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411DF48 = 0;
    qword_25411DF58 = 0;
    qword_25411DF60 = 0xFFFFFFFFLL;
    qword_25411DF38 = (uint64_t)&off_24ED7DAA8;
    qword_25411DF68 = (uint64_t)"RenderGraphDofSetupNode";
    dword_25411DF70 = 0;
    xmmword_25411DF78 = 0u;
    unk_25411DF88 = 0u;
    xmmword_25411DF98 = 0u;
    qword_25411DFA8 = 0;
    __cxa_guard_release(&qword_25411DE38);
  }
  return &qword_25411DF38;
}

void re::initInfo_RenderGraphDofSetupNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  __int128 v40;
  _QWORD v41[2];
  __int128 v42;

  v41[0] = 0xA4807A93825450F8;
  v41[1] = "RenderGraphDofSetupNode";
  re::StringID::destroyString((re::StringID *)v41);
  *((_OWORD *)this + 2) = v42;
  v4 = atomic_load((unsigned __int8 *)&qword_25411DE40);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411DE40);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphFullscreenNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphFullscreenNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411DEF0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "focalLength";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1E000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411DEF8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "aperture";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1E400000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411DF00 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_float((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "focalDistance";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1E800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411DF08 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_float((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "sensorSize";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1EC00000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25411DF10 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::introspect_DepthOfFieldQualityProfile((re *)v25, v26);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "qualityProfile";
      *(_QWORD *)(v27 + 16) = &qword_25411DEA8;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x1F000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_25411DF18 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_AssetHandle((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "blurMaterialLowQuality";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x1F800000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_25411DF20 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::introspect_AssetHandle((re *)1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "blurMaterialMediumQuality";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x21000000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_25411DF28 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::introspect_AssetHandle((re *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "blurMaterialHighQuality";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x22800000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_25411DF30 = v39;
      __cxa_guard_release(&qword_25411DE40);
    }
  }
  *((_QWORD *)this + 2) = 0x24000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_25411DEF0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDofSetupNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDofSetupNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDofSetupNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDofSetupNode>;
  re::IntrospectionRegistry::add(this, v3);
  v40 = v42;
}

double re::internal::defaultConstruct<re::RenderGraphDofSetupNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode *v3;
  double result;

  *((_QWORD *)this + 56) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v3 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
  *(_QWORD *)v3 = &off_24ED7FD70;
  *((_QWORD *)v3 + 58) = 0;
  *((_QWORD *)v3 + 59) = 0;
  *((_QWORD *)v3 + 57) = 0;
  result = 0.0;
  *(_OWORD *)((char *)v3 + 504) = 0u;
  *(_OWORD *)((char *)v3 + 520) = 0u;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *((_QWORD *)v3 + 71) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphDofSetupNode>(int a1, int a2, re::RenderGraphDofSetupNode *this)
{
  re::RenderGraphDofSetupNode::~RenderGraphDofSetupNode(this);
}

double re::internal::defaultConstructV2<re::RenderGraphDofSetupNode>(uint64_t a1)
{
  re::RenderGraphFullscreenNode *v1;
  double result;

  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v1 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)a1);
  *(_QWORD *)v1 = &off_24ED7FD70;
  *((_QWORD *)v1 + 58) = 0;
  *((_QWORD *)v1 + 59) = 0;
  *((_QWORD *)v1 + 57) = 0;
  result = 0.0;
  *(_OWORD *)((char *)v1 + 504) = 0u;
  *(_OWORD *)((char *)v1 + 520) = 0u;
  *(_OWORD *)((char *)v1 + 536) = 0u;
  *(_OWORD *)((char *)v1 + 552) = 0u;
  *((_QWORD *)v1 + 71) = 0;
  return result;
}

uint64_t re::introspect_RenderGraphDofSetupNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDofSetupNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDofSetupNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDofSetupNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDofSetupNode>, this);
}

uint64_t *re::allocInfo_RenderGraphDofBokehBlurNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411DE48);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411DE48))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411DFB0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411DFC0 = 0;
    qword_25411DFD0 = 0;
    qword_25411DFD8 = 0xFFFFFFFFLL;
    qword_25411DFB0 = (uint64_t)&off_24ED7DAA8;
    qword_25411DFE0 = (uint64_t)"RenderGraphDofBokehBlurNode";
    dword_25411DFE8 = 0;
    xmmword_25411DFF0 = 0u;
    unk_25411E000 = 0u;
    xmmword_25411E010 = 0u;
    qword_25411E020 = 0;
    __cxa_guard_release(&qword_25411DE48);
  }
  return &qword_25411DFB0;
}

void re::initInfo_RenderGraphDofBokehBlurNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xB7007C36957F51CELL;
  v10[1] = "RenderGraphDofBokehBlurNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25411DE58);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411DE58);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphFullscreenNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphFullscreenNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411DE50 = v8;
      __cxa_guard_release(&qword_25411DE58);
    }
  }
  *((_QWORD *)this + 2) = 0x1C800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25411DE50;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDofBokehBlurNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDofBokehBlurNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDofBokehBlurNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDofBokehBlurNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphFullscreenNode *re::internal::defaultConstruct<re::RenderGraphDofBokehBlurNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode *result;

  *((_QWORD *)this + 56) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  result = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
  *(_QWORD *)result = &off_24ED7FE18;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphDofBokehBlurNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

re::RenderGraphFullscreenNode *re::internal::defaultConstructV2<re::RenderGraphDofBokehBlurNode>(uint64_t a1)
{
  re::RenderGraphFullscreenNode *result;

  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)a1);
  *(_QWORD *)result = &off_24ED7FE18;
  return result;
}

uint64_t re::introspect_RenderGraphDofBokehBlurNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDofBokehBlurNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDofBokehBlurNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDofBokehBlurNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDofBokehBlurNode>, this);
}

uint64_t *re::allocInfo_RenderGraphDofCompositeNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411DE60);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411DE60))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E028, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411E038 = 0;
    qword_25411E048 = 0;
    qword_25411E050 = 0xFFFFFFFFLL;
    qword_25411E028 = (uint64_t)&off_24ED7DAA8;
    qword_25411E058 = (uint64_t)"RenderGraphDofCompositeNode";
    dword_25411E060 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411E098 = 0;
    __cxa_guard_release(&qword_25411DE60);
  }
  return &qword_25411E028;
}

void re::initInfo_RenderGraphDofCompositeNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0xCCEAEE98621BAA0CLL;
  v22[1] = "RenderGraphDofCompositeNode";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25411DE68);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411DE68);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphFullscreenNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphFullscreenNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411DE88 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "debugPassthrough";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1D800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411DE90 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "compositeMaterial";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1E000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411DE98 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_AssetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "debugPassthroughMaterial";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1F800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411DEA0 = v20;
      __cxa_guard_release(&qword_25411DE68);
    }
  }
  *((_QWORD *)this + 2) = 0x21000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411DE88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDofCompositeNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDofCompositeNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDofCompositeNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDofCompositeNode>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

double re::internal::defaultConstruct<re::RenderGraphDofCompositeNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode *v3;
  double result;

  *((_QWORD *)this + 56) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v3 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
  *(_QWORD *)v3 = &off_24ED7FEC0;
  *((_QWORD *)v3 + 57) = 0;
  *((_QWORD *)v3 + 58) = 0;
  result = 0.0;
  *((_OWORD *)v3 + 30) = 0u;
  *((_OWORD *)v3 + 31) = 0u;
  *((_OWORD *)v3 + 32) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphDofCompositeNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 504));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 480));
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)a3);
}

double re::internal::defaultConstructV2<re::RenderGraphDofCompositeNode>(uint64_t a1)
{
  re::RenderGraphFullscreenNode *v1;
  double result;

  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v1 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)a1);
  *(_QWORD *)v1 = &off_24ED7FEC0;
  *((_QWORD *)v1 + 57) = 0;
  *((_QWORD *)v1 + 58) = 0;
  result = 0.0;
  *((_OWORD *)v1 + 30) = 0u;
  *((_OWORD *)v1 + 31) = 0u;
  *((_OWORD *)v1 + 32) = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::RenderGraphDofCompositeNode>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 504));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 480));
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)a1);
}

uint64_t re::introspect_RenderGraphDofCompositeNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDofCompositeNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDofCompositeNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDofCompositeNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDofCompositeNode>, this);
}

void re::RenderGraphDofSetupNode::~RenderGraphDofSetupNode(re::RenderGraphDofSetupNode *this)
{
  re::RenderGraphDofSetupNode::~RenderGraphDofSetupNode(this);
  JUMPOUT(0x2276933B8);
}

{
  re::AssetHandle::~AssetHandle((re::RenderGraphDofSetupNode *)((char *)this + 552));
  re::AssetHandle::~AssetHandle((re::RenderGraphDofSetupNode *)((char *)this + 528));
  re::AssetHandle::~AssetHandle((re::RenderGraphDofSetupNode *)((char *)this + 504));
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

void re::RenderGraphDofBokehBlurNode::~RenderGraphDofBokehBlurNode(re::RenderGraphDofBokehBlurNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphDofCompositeNode::~RenderGraphDofCompositeNode(re::RenderGraphDofCompositeNode *this)
{
  re::AssetHandle::~AssetHandle((re::RenderGraphDofCompositeNode *)((char *)this + 504));
  re::AssetHandle::~AssetHandle((re::RenderGraphDofCompositeNode *)((char *)this + 480));
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

{
  re::AssetHandle::~AssetHandle((re::RenderGraphDofCompositeNode *)((char *)this + 504));
  re::AssetHandle::~AssetHandle((re::RenderGraphDofCompositeNode *)((char *)this + 480));
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::get<re::CameraData>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
  }
  v5 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraData>(void)::info + 6), v5, 0, v12);
    v6 = (v12[1] - 0x61C8864680B583E9 + (v12[0] << 6) + (v12[0] >> 2)) ^ v12[0];
  }
  else
  {
    v6 = 0;
  }
  v7 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v8 = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)));
    if (v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(a1 + 80);
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v10 + 24 * v9 + 8) != v8)
      {
        while (1)
        {
          v7 = *(_DWORD *)(v10 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v7 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v10 + 24 * v7 + 8) == v8)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v7 + 16);
        }
        v7 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v7 + 16);
}

uint64_t re::RenderGraphDataStoreWrapper<re::DepthOfFieldBlurMaterialData>::~RenderGraphDataStoreWrapper(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)a1 = off_24ED7FF80;
  v3 = (_OWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::DepthOfFieldBlurMaterialData>::~RenderGraphDataStoreWrapper(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)a1 = off_24ED7FF80;
  v3 = (_OWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 56));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 16));
  JUMPOUT(0x2276933B8);
}

void re::BloomUserParameters::computeRenderParameters(re::BloomUserParameters *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  float v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float *v11;
  float v12;

  v3 = *((_DWORD *)this + 1);
  v4 = *((_DWORD *)this + 3);
  v5 = *((float *)this + 2) + 1.0;
  *(_DWORD *)a2 = *(_DWORD *)this;
  *(float *)(a2 + 4) = v5;
  *(_DWORD *)(a2 + 8) = v3;
  v6 = vcvtps_s32_f32(v5);
  v7 = 3 * v6;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = 3 * v6;
  if ((v6 & 0x80000000) == 0)
  {
    v8 = -3 * v6;
    if (v7 >= 0)
      v9 = 3 * v6;
    else
      v9 = -3 * v6;
    v10 = v9 + 1;
    v11 = (float *)(a2 + 4 * (v8 + (uint64_t)v7) + 20);
    do
    {
      v12 = *(float *)(a2 + 4);
      *v11++ = (float)(1.0 / (float)(v12 * 2.5066))
             * expf((float)-(float)((float)v8 * (float)v8) / (float)(v12 * (float)(v12 + v12)));
      ++v8;
    }
    while (v10 != v8);
  }
}

void re::RenderGraphUploadBloomParams::setup(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 592) = 1;
}

void re::RenderGraphUploadBloomParams::execute(re::RenderGraphUploadBloomParams *this, re::FrameContext **a2)
{
  void *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[16];
  char *v24;
  uint64_t v25;
  void *v26;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v23, 5058, 0);
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  re::BloomUserParameters::computeRenderParameters((re::RenderGraphUploadBloomParams *)((char *)this + 256), (uint64_t)&v13);
  re::FrameContext::perFrameAlloc(*a2, 0x98uLL, 4uLL, (uint64_t)&v24);
  v4 = v26;
  v12 = v25;
  v5 = &v24[v25];
  v6 = v20;
  *((_OWORD *)v5 + 6) = v19;
  *((_OWORD *)v5 + 7) = v6;
  *((_OWORD *)v5 + 8) = v21;
  *((_QWORD *)v5 + 18) = v22;
  v7 = v16;
  *((_OWORD *)v5 + 2) = v15;
  *((_OWORD *)v5 + 3) = v7;
  v8 = v18;
  *((_OWORD *)v5 + 4) = v17;
  *((_OWORD *)v5 + 5) = v8;
  v9 = v14;
  *(_OWORD *)v5 = v13;
  *((_OWORD *)v5 + 1) = v9;
  v10 = re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::BloomExecData>>(a2[146], *((_QWORD *)a2[5] + 6));
  *(_DWORD *)(v10 + 24) = HIDWORD(v13);
  v24 = v4;
  v25 = v12;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v10 + 8), (void **)&v24);
  v11 = v24;
  *(_QWORD *)(v10 + 16) = v25;
  if (v11)

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v23);
}

void re::RenderGraphDownsampleThresholdNode::configure(re::RenderGraphDownsampleThresholdNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  if (*((_QWORD *)this + 34))
    re::AssetHandle::loadAsync((re::RenderGraphDownsampleThresholdNode *)((char *)this + 264));
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

void re::RenderGraphDownsampleThresholdNode::execute(re::RenderGraphDownsampleThresholdNode *this, re::RenderGraphContext *a2)
{
  const char **v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re::BufferTable *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  re *v30;
  const re::WeakStringID *v31;
  re::BufferTable *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  int v39;
  uint64_t v40;
  _QWORD v41[3];
  int v42;
  uint64_t v43;
  uint8_t buf[8];
  int v45;
  uint64_t v46;
  uint64_t v47[9];
  const char *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __int16 v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  char v60;
  _BYTE v61[32];
  __int128 v62;
  _BYTE v63[24];
  uint64_t *v64;
  __int128 v65;
  uint64_t *v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v6 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::RenderGraphDownsampleThresholdNode *)((char *)this + 264));
  *((_QWORD *)this + 32) = v6;
  if (!v6)
    return;
  v7 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::BloomExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)(*((_QWORD *)this + 32) + 1664);
    v10 = *((_QWORD *)this + 34);
    if (v10)
      v11 = *(_QWORD *)(v10 + 664);
    else
      v11 = 0;
    v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    *(_QWORD *)buf = v11 ^ (v13 >> 31) ^ v13;
    v14 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a2 + 1568, (uint64_t *)buf);
    if (v14)
      v15 = *v14;
    else
      v15 = 0;
    re::RenderGraphContext::makeFullscreenDrawCall(a2, v9, v15, 0, 0, 0, (int32x2_t *)buf);
    v16 = v46;
    MurmurHash3_x64_128((uint64_t)"fullscreen", 10, 0, (unint64_t *)v61);
    v17 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v16, (*(_QWORD *)&v61[8] + (*(_QWORD *)v61 << 6) + (*(_QWORD *)v61 >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)v61);
    if (v18)
    {
      v45 = *v17;
      if (v45 == -1)
        return;
      v2 = &v48;
      v3 = 0xA3521511A35B9;
      v19 = *(_QWORD *)a2;
      v41[0] = 0xA3521511A35B9;
      if (!*((_QWORD *)this + 24))
        goto LABEL_33;
      v20 = (_QWORD *)(v19 + 368);
      re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 26), 0, 0, (id *)v61);
      re::DynamicTextureTableAdd(v20, v41, (id *)v61);
      if (*(_QWORD *)v61)

      v16 = 0x127DBE076EDDD69;
      v21 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
      *(_QWORD *)v61 = 0x127DBE076EDDD69;
      re::BufferTable::setBuffer(v21, (const re::WeakStringID *)v61, v8 + 8);
      v22 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      v43 = 0;
      v40 = 0;
      memset(v41, 0, sizeof(v41));
      v42 = 0;
      memset(v38, 0, sizeof(v38));
      v39 = 0;
      if (v22)
      {
        v23 = v22;
        if (*(_QWORD *)(v22 + 128))
        {
          v24 = 0;
          v3 = 0;
          while (1)
          {
            re::Projection::computeMatrix4x4F((re::Projection *)(v23 + 144 + (v24 << 6)), (uint64_t)v61);
            *(_QWORD *)&v26 = re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v41, (uint64_t)v61).n128_u64[0];
            v27 = *(_QWORD *)(v23 + 48);
            if (v27 <= v24)
              break;
            re::RenderCamera::computeInverseTransform((float32x4_t *)(v23 + 64 + 32 * v24), (uint64_t)v61);
            re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v38, (uint64_t)v61);
            v3 = (v3 + 1);
            v24 = v3;
            if (*(_QWORD *)(v23 + 128) <= (unint64_t)v3)
              goto LABEL_21;
          }
          re::internal::assertLog((re::internal *)6, v25, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v24, v27);
          _os_crash();
          __break(1u);
          goto LABEL_32;
        }
LABEL_21:
        v28 = *(_BYTE *)(v23 + 490);
        v3 = 0xA3521511A35B9;
      }
      else
      {
        *(_OWORD *)v61 = xmmword_2260E5F10;
        *(_OWORD *)&v61[16] = xmmword_2260E5F20;
        v62 = xmmword_2260E5F40;
        *(_OWORD *)v63 = xmmword_2260E5D70;
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v41, (uint64_t)v61);
        *(_OWORD *)v61 = xmmword_2260E5F10;
        *(_OWORD *)&v61[16] = xmmword_2260E5F20;
        v62 = xmmword_2260E5F40;
        *(_OWORD *)v63 = xmmword_2260E5D70;
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v38, (uint64_t)v61);
        v28 = 1;
      }
      re::DrawCallRef::DrawCallRef(&v33, (const re::DrawCall *)buf);
      v29 = 0;
      *(_QWORD *)v61 = &v33;
      *(_QWORD *)&v61[24] = &v34;
      *(_QWORD *)v63 = &v35;
      v64 = &v36;
      *(int64x2_t *)&v61[8] = vdupq_n_s64(1uLL);
      v62 = *(_OWORD *)&v61[8];
      *(_OWORD *)&v63[8] = *(_OWORD *)&v61[8];
      v65 = *(_OWORD *)&v61[8];
      v66 = &v37;
      v67 = *(_OWORD *)&v61[8];
      v48 = "fullscreen";
      v49 = v61;
      v50 = v40;
      v51 = v43;
      v52 = 0;
      v53 = v28;
      v54 = 2;
      v55 = 0;
      v56 = 0u;
      v57 = 0u;
      v58 = 0;
      if (!*((_BYTE *)a2 + 1332))
        goto LABEL_24;
      goto LABEL_34;
    }
LABEL_32:
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_33:
    v47[0] = 0;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    a2 = (re::RenderGraphContext *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v48) = 136315906;
    *(const char **)((char *)v2 + 4) = "operator[]";
    WORD2(v49) = 1024;
    *(_DWORD *)((char *)v2 + 14) = 789;
    WORD1(v50) = 2048;
    *(const char **)((char *)v2 + 20) = 0;
    WORD2(v51) = 2048;
    *(const char **)((char *)v2 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    v29 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), *((const char **)this + 2), "fullscreen");
LABEL_24:
    v59 = v29;
    v60 = 0;
    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a2, v47);
    re::RenderGraphContext::encodeDrawCalls(a2, v47, &v48);
    v30 = (re *)(*(_QWORD *)a2 + 368);
    v47[0] = v3;
    re::DynamicTextureTableRemove(v30, (re::TextureTable *)v47, v31);
    v32 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    v47[0] = v16;
    re::BufferTable::removeBuffer(v32, (const re::WeakStringID *)v47);
    if (v38[0] && v40)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v38[0] + 40))(v38[0], v40);
    if (v41[0])
    {
      if (v43)
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v41[0] + 40))(v41[0], v43);
    }
    return;
  }
  v12 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "RenderGraphDownsampleThresholdNode expects BloomExecDataWrapper from the render graph data store but there isn't any.                          Will skip the execution. Did you forget to add a upload node?", buf, 2u);
  }
}

void re::RenderGraphDownsampleThresholdNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::MaterialParameterBlock *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (*(_QWORD *)(a1 + 272))
  {
    v4 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 264));
    if (v4)
    {
      v5 = *(re::MaterialParameterBlock **)(v4 + 1672);
      if (v5)
      {
        v6 = *(_QWORD *)(a1 + 272);
        if (v6)
          v7 = *(_QWORD *)(v6 + 664);
        else
          v7 = 0;
        v8 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
        v10 = v7 ^ (v8 >> 31) ^ v8;
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v5, &v9);
        re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v10, &v9);
        if (v9)

      }
    }
  }
}

uint64_t re::RenderGraphDownsampleBlur::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  _QWORD v13[4];
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;

  v10[0] = 0;
  v16 = 0;
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 39, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v14);
  result = v13[0];
  if (v13[0])
  {
    if ((v13[1] & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13[0] + 40))();
    memset(v13, 0, sizeof(v13));
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

uint64_t re::RenderGraphDownsampleBlur::setup(re::RenderGraphDownsampleBlur *this, re::GrowableLinearAllocator **a2, re::RenderGraphDataStore *a3)
{
  re::RenderGraphDownsampleBlur *v4;
  char *v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[2];
  __int16 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = this;
  v23 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)this + 256;
  *(_DWORD *)((char *)&v16 + 3) = 0;
  LODWORD(v16) = 0;
  *((_QWORD *)&v16 + 1) = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 256, (uint64_t)&v16);
  *(_QWORD *)&v16 = 0x500000000;
  v17 = xmmword_2260E5D70;
  LOWORD(v18) = 0;
  *(_QWORD *)((char *)&v18 + 4) = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v5, (uint64_t)&v16);
  v6 = (__int128 *)re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)v5);
  v7 = v6[5];
  v8 = v6[6];
  v9 = v6[3];
  v20 = v6[4];
  v10 = v6[1];
  v11 = v6[2];
  v16 = *v6;
  v17 = v10;
  v18 = v11;
  v19 = v9;
  v21 = v7;
  v22 = v8;
  HIDWORD(v20) = *((_DWORD *)v4 + 67);
  re::RenderGraphResourceDescriptions::addTarget(a2, (const re::RenderGraphTargetDescription *)&v16, "scratchTarget", v13);
  v4 = (re::RenderGraphDownsampleBlur *)((char *)v4 + 296);
  *(_OWORD *)v4 = v13[0];
  *(_DWORD *)((char *)v13 + 3) = 0;
  LODWORD(v13[0]) = 0;
  *((_QWORD *)&v13[0] + 1) = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v4, (uint64_t)v13);
  *(_QWORD *)&v13[0] = 0x500000000;
  v13[1] = xmmword_2260E5D70;
  v14 = 0;
  v15 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)v4, (uint64_t)v13);
}

void re::RenderGraphDownsampleBlur::execute(re::RenderGraphDownsampleBlur *this, re::RenderGraphContext *a2)
{
  id *v4;
  unsigned __int8 v5;
  id v6;
  id v7;
  id v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t v18;
  id v19;
  id v20;
  unsigned int v21;
  float32x2_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int8x8_t v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re::ns::String *v31;
  re::RenderGraphContext *v32;
  unsigned int v33;
  int8x16_t v34;
  uint64_t v35;
  id v36;
  int v37;
  int v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t buf[8];
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];

  v49[1] = *MEMORY[0x24BDAC8D0];
  v35 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::BloomExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (v35)
  {
    v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
    re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v42);
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 256, 0, 0, &v41);
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 296, 0, 0, &v40);
    v5 = atomic_load((unsigned __int8 *)&qword_25411E100);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25411E100))
    {
      v31 = re::ns::String::String((re::ns::String *)&qword_25411E0F8, (re::ns *)"Bloom Blur Downsampled Mipmap");
      __cxa_guard_release((__guard *)v31 + 1);
    }
    v6 = (id)qword_25411E0F8;
    objc_msgSend(v42, "setLabel:", v6);

    objc_msgSend(v42, "setComputePipelineState:", *((_QWORD *)this + 39));
    v7 = v41;
    v8 = objc_msgSend(v41, sel_pixelFormat);
    v9 = objc_msgSend(v7, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v8, 2, (char *)objc_msgSend(v41, sel_mipmapLevelCount) - 1, 1, 0, 1);
    objc_msgSend(v42, "setTexture:atIndex:", v9, 2);
    objc_msgSend(v42, "setBuffer:offset:atIndex:", *(_QWORD *)(v35 + 8), *(unsigned int *)(v35 + 16), 0);
    v33 = objc_msgSend(*((id *)this + 39), sel_threadExecutionWidth);
    v10 = objc_msgSend(*((id *)this + 39), sel_maxTotalThreadsPerThreadgroup);
    v11 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    if (v11)
    {
      if (!*(_QWORD *)(v11 + 16))
      {
        re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
        _os_crash();
        __break(1u);
      }
      v13 = *(_OWORD *)(v11 + 32);
    }
    else
    {
      v13 = xmmword_22610BC10;
    }
    v34 = (int8x16_t)v13;
    v32 = a2;
    v15 = *((_QWORD *)a2 + 1);
    v39 = v42;
    re::RenderManager::sampleComputeEncoderMTLCounterBegin(v15, &v39, 1u);

    if (*(_DWORD *)(v35 + 24))
    {
      v16 = 0;
      v17 = v10 / v33;
      v18 = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
      while (1)
      {
        v19 = objc_msgSend(v41, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(v41, sel_pixelFormat), 2, v16, 1, 0, 1);
        v20 = objc_msgSend(v40, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(v40, sel_pixelFormat), 2, v16, 1, 0, 1);
        v21 = objc_msgSend(v19, sel_width);
        v22 = vcvt_f32_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(objc_msgSend(v19, sel_height), v21), (int8x8_t)0xFFFF0000FFFFLL));
        v23 = (int16x4_t)vcvt_s32_f32(vrndp_f32(vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v34.i8, v22)));
        v24 = (int16x4_t)vcvt_s32_f32(vrndm_f32(vmla_f32((float32x2_t)0x3F0000003F000000, v18, v22)));
        v25 = vmvn_s8((int8x8_t)vceq_s32((int32x2_t)v24, (int32x2_t)v23));
        if ((v25.i32[0] & v25.i32[1] & 1) == 0)
          break;
        v26 = v24.i16[2] - v23.i16[2];
        v27 = v24.i16[0] - v23.i16[0];
        v49[0] = vuzp1_s16(v23, v24);
        objc_msgSend(v42, "setBytes:length:atIndex:", v49, 8, 2);
        v28 = (v33 - 1 + v27) / v33;
        v29 = ((_DWORD)v17 - 1 + v26) / v17;
        objc_msgSend(v42, "setTexture:atIndex:", v19, 0);
        objc_msgSend(v42, "setTexture:atIndex:", v20, 1);
        v38 = 0;
        objc_msgSend(v42, "setBytes:length:atIndex:", &v38, 4, 1);
        *(_QWORD *)buf = v28;
        v47 = v29;
        v48 = 1;
        v43 = v33;
        v44 = v17;
        v45 = 1;
        objc_msgSend(v42, "dispatchThreadgroups:threadsPerThreadgroup:", buf, &v43);
        objc_msgSend(v42, "setTexture:atIndex:", v20, 0);
        objc_msgSend(v42, "setTexture:atIndex:", v19, 1);
        v37 = 1;
        objc_msgSend(v42, "setBytes:length:atIndex:", &v37, 4, 1);
        *(_QWORD *)buf = v28;
        v47 = v29;
        v48 = 1;
        v43 = v33;
        v44 = v17;
        v45 = 1;
        objc_msgSend(v42, "dispatchThreadgroups:threadsPerThreadgroup:", buf, &v43);
        if (v20)

        if (v19)
        if (++v16 >= (unint64_t)*(unsigned int *)(v35 + 24))
          goto LABEL_22;
      }
      if (v20)

      if (v19)
    }
LABEL_22:
    v30 = *((_QWORD *)v32 + 1);
    v36 = v42;
    re::RenderManager::sampleComputeEncoderMTLCounterEnd(v30, &v36, 1u);

    if (v9)
    if (v40)

    if (v41)
  }
  else
  {
    v14 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "RenderGraphDownsampleBlur expects BloomExecDataWrapper from the render graph data store but there isn't any.                          Will skip the execution. Did you forget to add a upload node?", buf, 2u);
    }
  }
}

void re::RenderGraphBloomNode::execute(re::RenderGraphBloomNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  re::BufferTable *v5;
  re::BufferTable *v6;
  NSObject *v7;
  uint8_t v8[16];

  v4 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::BloomExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (v4)
  {
    v5 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    *(_QWORD *)v8 = 0x127DBE076EDDD69;
    re::BufferTable::setBuffer(v5, (const re::WeakStringID *)v8, v4 + 8);
    re::RenderGraphFullscreenNode::executeInternal(this, a2, (re::RenderGraphBloomNode *)((char *)this + 264));
    v6 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    *(_QWORD *)v8 = 0x127DBE076EDDD69;
    re::BufferTable::removeBuffer(v6, (const re::WeakStringID *)v8);
  }
  else
  {
    v7 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "RenderGraphBloomNode expects BloomExecDataWrapper from the render graph data store but there isn't any.                          Will skip the execution. Did you forget to add a upload node?", v8, 2u);
    }
  }
}

uint64_t *re::allocInfo_BloomUserParameters(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_430);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_430))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E160, 0);
    *(uint64_t *)((char *)&qword_25411E170 + 6) = 0;
    qword_25411E170 = 0;
    qword_25411E180 = 0;
    qword_25411E188 = 0xFFFFFFFFLL;
    qword_25411E160 = (uint64_t)&off_24ED7DAA8;
    qword_25411E190 = (uint64_t)"BloomUserParameters";
    dword_25411E198 = 0;
    xmmword_25411E1A0 = 0u;
    unk_25411E1B0 = 0u;
    xmmword_25411E1C0 = 0u;
    qword_25411E1D0 = 0;
    __cxa_guard_release(&_MergedGlobals_430);
  }
  return &qword_25411E160;
}

void re::initInfo_BloomUserParameters(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x789DF83014C541B0;
  v23[1] = "BloomUserParameters";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E0A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E0A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "strength";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411E140 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_float((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "threshold";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411E148 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_float((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "spread";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411E150 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_int((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "numPasses";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xC00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411E158 = v21;
      __cxa_guard_release(&qword_25411E0A8);
    }
  }
  *((_QWORD *)this + 2) = 0x1000000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411E140;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BloomUserParameters>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BloomUserParameters>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BloomUserParameters>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BloomUserParameters>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

double re::internal::defaultConstruct<re::BloomUserParameters>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  result = 0.00781250182;
  *a3 = 0x3F8000003E800000;
  a3[1] = 0x13F800000;
  return result;
}

double re::internal::defaultConstructV2<re::BloomUserParameters>(_QWORD *a1)
{
  double result;

  result = 0.00781250182;
  *a1 = 0x3F8000003E800000;
  a1[1] = 0x13F800000;
  return result;
}

uint64_t re::introspect_BloomUserParameters(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BloomUserParameters", (uint64_t (*)(re::internal *))re::allocInfo_BloomUserParameters, (re::IntrospectionBase *(*)(void))re::initInfo_BloomUserParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BloomUserParameters>, this);
}

uint64_t *re::allocInfo_RenderGraphUploadBloomParams(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411E0B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411E0B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E1D8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411E1E8 = 0;
    qword_25411E1F8 = 0;
    qword_25411E200 = 0xFFFFFFFFLL;
    qword_25411E1D8 = (uint64_t)&off_24ED7DAA8;
    qword_25411E208 = (uint64_t)"RenderGraphUploadBloomParams";
    dword_25411E210 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411E248 = 0;
    __cxa_guard_release(&qword_25411E0B0);
  }
  return &qword_25411E1D8;
}

void re::initInfo_RenderGraphUploadBloomParams(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xEDF6B9216B19DCA0;
  v15[1] = "RenderGraphUploadBloomParams";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E0B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E0B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E108 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = (uint64_t *)re::internal::introspectionInfoStorage<re::BloomUserParameters>;
      if (!re::internal::introspectionInfoStorage<re::BloomUserParameters>)
      {
        v11 = re::allocInfo_BloomUserParameters((re *)v9);
        re::internal::introspectionInfoStorage<re::BloomUserParameters> = (uint64_t)v11;
        re::initInfo_BloomUserParameters((re *)v11, v12);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "bloomUserParameters";
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x10000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411E110 = v13;
      __cxa_guard_release(&qword_25411E0B8);
    }
  }
  *((_QWORD *)this + 2) = 0x11000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411E108;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphUploadBloomParams>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphUploadBloomParams>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphUploadBloomParams>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphUploadBloomParams>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

double re::internal::defaultConstruct<re::RenderGraphUploadBloomParams>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED7FFA8;
  result = 0.00781250182;
  *((_QWORD *)v3 + 32) = 0x3F8000003E800000;
  *((_QWORD *)v3 + 33) = 0x13F800000;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphUploadBloomParams>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphUploadBloomParams>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED7FFA8;
  result = 0.00781250182;
  *((_QWORD *)v1 + 32) = 0x3F8000003E800000;
  *((_QWORD *)v1 + 33) = 0x13F800000;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphUploadBloomParams>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphUploadBloomParams(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphUploadBloomParams", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphUploadBloomParams, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphUploadBloomParams, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphUploadBloomParams>, this);
}

uint64_t *re::allocInfo_RenderGraphDownsampleThresholdNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411E0C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411E0C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E250, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411E260 = 0;
    qword_25411E270 = 0;
    qword_25411E278 = 0xFFFFFFFFLL;
    qword_25411E250 = (uint64_t)&off_24ED7DAA8;
    qword_25411E280 = (uint64_t)"RenderGraphDownsampleThresholdNode";
    dword_25411E288 = 0;
    xmmword_25411E290 = 0u;
    unk_25411E2A0 = 0u;
    xmmword_25411E2B0 = 0u;
    qword_25411E2C0 = 0;
    __cxa_guard_release(&qword_25411E0C0);
  }
  return &qword_25411E250;
}

void re::initInfo_RenderGraphDownsampleThresholdNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x49FD523B65429E92;
  v14[1] = "RenderGraphDownsampleThresholdNode";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E0C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E0C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E118 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "downsampleThresholdMaterial";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411E120 = v12;
      __cxa_guard_release(&qword_25411E0C8);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411E118;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDownsampleThresholdNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDownsampleThresholdNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDownsampleThresholdNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDownsampleThresholdNode>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

double re::internal::defaultConstruct<re::RenderGraphDownsampleThresholdNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED80050;
  result = 0.0;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphDownsampleThresholdNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphDownsampleThresholdNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED80050;
  result = 0.0;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphDownsampleThresholdNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphDownsampleThresholdNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDownsampleThresholdNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDownsampleThresholdNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDownsampleThresholdNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDownsampleThresholdNode>, this);
}

uint64_t *re::allocInfo_RenderGraphDownsampleBlur(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411E0D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411E0D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E2C8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411E2D8 = 0;
    qword_25411E2E8 = 0;
    qword_25411E2F0 = 0xFFFFFFFFLL;
    qword_25411E2C8 = (uint64_t)&off_24ED7DAA8;
    qword_25411E2F8 = (uint64_t)"RenderGraphDownsampleBlur";
    dword_25411E300 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411E338 = 0;
    __cxa_guard_release(&qword_25411E0D0);
  }
  return &qword_25411E2C8;
}

void re::initInfo_RenderGraphDownsampleBlur(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x92E90B1749510D56;
  v18[1] = "RenderGraphDownsampleBlur";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E0D8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E0D8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E128 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_RenderGraphTargetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "downsampledTarget";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411E130 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "library";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x11000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411E138 = v16;
      __cxa_guard_release(&qword_25411E0D8);
    }
  }
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25411E128;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphDownsampleBlur>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphDownsampleBlur>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphDownsampleBlur>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphDownsampleBlur>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

double re::internal::defaultConstruct<re::RenderGraphDownsampleBlur>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED800F8;
  *((_QWORD *)v3 + 32) = 0;
  result = NAN;
  *((_QWORD *)v3 + 33) = -1;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_QWORD *)v3 + 38) = -1;
  *((_QWORD *)v3 + 39) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphDownsampleBlur>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphDownsampleBlur>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED800F8;
  *((_QWORD *)v1 + 32) = 0;
  result = NAN;
  *((_QWORD *)v1 + 33) = -1;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_QWORD *)v1 + 38) = -1;
  *((_QWORD *)v1 + 39) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphDownsampleBlur>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphDownsampleBlur(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphDownsampleBlur", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphDownsampleBlur, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphDownsampleBlur, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphDownsampleBlur>, this);
}

uint64_t *re::allocInfo_RenderGraphBloomNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411E0E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411E0E0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E340, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411E350 = 0;
    qword_25411E360 = 0;
    qword_25411E368 = 0xFFFFFFFFLL;
    qword_25411E340 = (uint64_t)&off_24ED7DAA8;
    qword_25411E370 = (uint64_t)"RenderGraphBloomNode";
    dword_25411E378 = 0;
    xmmword_25411E380 = 0u;
    unk_25411E390 = 0u;
    xmmword_25411E3A0 = 0u;
    qword_25411E3B0 = 0;
    __cxa_guard_release(&qword_25411E0E0);
  }
  return &qword_25411E340;
}

void re::initInfo_RenderGraphBloomNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x228CD58E70E1D09ALL;
  v10[1] = "RenderGraphBloomNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E0F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E0F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphFullscreenNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphFullscreenNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E0E8 = v8;
      __cxa_guard_release(&qword_25411E0F0);
    }
  }
  *((_QWORD *)this + 2) = 0x1C800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25411E0E8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphBloomNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphBloomNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphBloomNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphBloomNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphFullscreenNode *re::internal::defaultConstruct<re::RenderGraphBloomNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode *result;

  *((_QWORD *)this + 56) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  result = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
  *(_QWORD *)result = &off_24ED801A0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphBloomNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

re::RenderGraphFullscreenNode *re::internal::defaultConstructV2<re::RenderGraphBloomNode>(uint64_t a1)
{
  re::RenderGraphFullscreenNode *result;

  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)a1);
  *(_QWORD *)result = &off_24ED801A0;
  return result;
}

uint64_t re::introspect_RenderGraphBloomNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphBloomNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphBloomNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphBloomNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphBloomNode>, this);
}

void re::RenderGraphUploadBloomParams::~RenderGraphUploadBloomParams(re::RenderGraphUploadBloomParams *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphDownsampleThresholdNode::~RenderGraphDownsampleThresholdNode(re::RenderGraphDownsampleThresholdNode *this)
{
  *(_QWORD *)this = &off_24ED80050;
  re::AssetHandle::~AssetHandle((re::RenderGraphDownsampleThresholdNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  *(_QWORD *)this = &off_24ED80050;
  re::AssetHandle::~AssetHandle((re::RenderGraphDownsampleThresholdNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphDownsampleBlur::~RenderGraphDownsampleBlur(re::RenderGraphDownsampleBlur *this)
{
  void *v2;

  *(_QWORD *)this = &off_24ED800F8;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {

    *((_QWORD *)this + 39) = 0;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphDownsampleBlur *)((char *)this + 272));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;

  *(_QWORD *)this = &off_24ED800F8;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {

    *((_QWORD *)this + 39) = 0;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphDownsampleBlur *)((char *)this + 272));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphBloomNode::~RenderGraphBloomNode(re::RenderGraphBloomNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::BloomExecData>>(re *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13BloomExecDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13BloomExecDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13BloomExecDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v11 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  v6 = (uint64_t)a1 + 16;
  v7 = re::globalAllocators(a1);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 32, 8);
  v8[2] = 0;
  v8[3] = 0;
  *v8 = &off_24ED80260;
  v8[1] = 0;
  v10 = v8;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v6, (unint64_t *)&v11, &v10);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::BloomExecData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED80260;
  v2 = (void *)a1[1];
  if (v2)
  {

    a1[1] = 0;
  }
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::BloomExecData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED80260;
  v2 = (void *)a1[1];
  if (v2)
  {

    a1[1] = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::BloomExecData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13BloomExecDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13BloomExecDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13BloomExecDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::RenderGraphMPSImageGaussianBlurNode::setup(re::RenderGraphMPSImageGaussianBlurNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD v7[2];
  uint64_t v8;

  *((_BYTE *)a2 + 593) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
  if (*((_BYTE *)this + 261))
  {
    if (*((_QWORD *)this + 24))
    {
      v6 = *((_QWORD *)this + 26);
      *(_DWORD *)((char *)v7 + 3) = 0;
      v7[0] = 0;
      v8 = 0xC00000002;
      re::RenderGraphBuilder::read((uint64_t)a2, v6, (uint64_t)v7);
    }
    else
    {
      re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
    }
  }
}

void re::RenderGraphMPSImageGaussianBlurNode::configure(re::RenderGraphMPSImageGaussianBlurNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  id v6;
  id *v7;
  id v8;
  id v9;
  id v10;
  _anonymous_namespace_ *v11;
  float v12;
  float v13;
  float v14;
  id v15;
  id v16;
  void **ComputePipelineState;
  id v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[3];
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  id v30;
  _QWORD v31[2];

  re::RenderGraphNode::configure(this, a2, a3, a4);
  v6 = *(id *)(*((_QWORD *)a4 + 1) + 184);
  v30 = v6;
  v7 = (id *)((char *)this + 264);
  v8 = (id)*((_QWORD *)this + 33);
  if (!v8)
  {
    re::mtl::mps::ImageGaussianBlur::ImageGaussianBlur((re::mtl::mps::ImageGaussianBlur *)&v18, (const re::mtl::Device *)&v30, *((float *)this + 64));
    if (v7 != &v18)
    {
      v9 = v18;
      v18 = 0;
      v10 = *v7;
      *v7 = v9;

    }
    v8 = *v7;
  }
  v11 = (_anonymous_namespace_ *)objc_msgSend(v8, "sigma");
  v13 = v12;
  v14 = *((float *)this + 64);
  if (v13 != v14)
  {
    re::mtl::mps::ImageGaussianBlur::ImageGaussianBlur((re::mtl::mps::ImageGaussianBlur *)&v18, (const re::mtl::Device *)&v30, v14);
    if (v7 != &v18)
    {
      v15 = v18;
      v18 = 0;
      v16 = *v7;
      *v7 = v15;

    }
  }
  if (!*((_QWORD *)this + 34))
  {
    LOBYTE(v18) = 0;
    v22 = 0uLL;
    *((_QWORD *)&v21 + 1) = 0;
    re::DynamicString::setCapacity(&v21, 0);
    v25 = 0;
    memset(v23, 0, sizeof(v23));
    v24 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v31[0] = "ClearImage";
    v31[1] = 10;
    re::DynamicString::operator=((re::DynamicString *)&v21, (uint64_t)v31);
    ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)&v18);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 34, ComputePipelineState);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v23);
    if ((_QWORD)v21)
    {
      if ((BYTE8(v21) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v21 + 40))();
      v21 = 0u;
      v22 = 0u;
    }
    if ((_BYTE)v18 && v19 && (v20 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  }

}

void re::RenderGraphMPSImageGaussianBlurNode::execute(id *this, re::RenderGraphContext *a2)
{
  id *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned int v10;
  char **v11;
  _anonymous_namespace_ *v12;
  char v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  id v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int32x2_t v33;
  int32x2_t v34;
  char **v35;
  uint64_t v36;
  float32x2_t v37;
  float32x2_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  id v45;
  id v46;
  uint64x2_t v47;
  float32x2_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t *v51;
  uint64x2_t *v52;
  float32x2_t v53;
  char v54;
  unint64_t v55;
  id *v56;
  __int128 v57;
  unint64_t v58;
  id v59;
  id *v60;
  uint64x2_t v61;
  float32x2_t v62;
  unint64_t v63;
  float v64;
  unint64_t *v65;
  uint64x2_t *v66;
  id v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  id v77;
  id v78;
  re *View2DArrayTo2D;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t **v84;
  unint64_t *v85;
  id v86;
  unint64_t v87;
  unint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  re *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  id *v103;
  id *v104;
  re::RenderGraphContext *v105;
  uint64_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  _QWORD v110[3];
  _QWORD v111[3];
  id v112;
  id v113;
  uint64_t *v114;
  unint64_t v115;
  int v116;
  unint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  id v130;
  id location;
  id v132;
  id v133;
  char v134;
  uint64_t v135;
  id v136;
  _BYTE v137[16];
  _BYTE v138[24];
  uint64_t v139;
  _BYTE *v140;
  _BYTE v141[24];
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  _QWORD v145[2];
  _BYTE v146[28];
  __int16 v147;
  id *v148;
  __int128 v149;
  int8x16_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v137, 5091, 0);
  v4 = *(id **)a2;
  v105 = a2;
  re::RenderGraphMPSNodeBase::getCommandBufferWithProtectionOptions((re::RenderGraphMPSNodeBase *)this, a2, &v136);
  v130 = *v4;
  v129 = v136;
  v135 = 0;
  v132 = 0;
  v133 = 0;
  location = 0;
  v134 = 0;
  re::ObjCObject::operator=(&v132, &v129);
  re::ObjCObject::operator=(&location, &v130);

  objc_msgSend(this[33], "setEdgeMode:", *((unsigned __int8 *)this + 260));
  if (!this[24])
  {
LABEL_130:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_131;
  }
  v6 = (uint64_t *)this[26];
  v127 = 0;
  v128 = -1;
  v127 = *v6;
  v128 = v6[1];
  if (!this[29])
  {
LABEL_131:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_132;
  }
  v7 = (uint64_t *)this[31];
  v125 = 0;
  v126 = -1;
  v125 = *v7;
  v126 = v7[1];
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)&v127, 0, 0, &v124);
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)&v125, 0, 0, &v123);
  v8 = (unsigned __int8 *)re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v9 = (unint64_t)v8;
  if (v8)
    v10 = v8[64];
  else
    v10 = 1;
  v115 = 0;
  v116 = 1;
  v11 = (char **)v10;
  v117 = 0;
  v118 = 0;
  v12 = (_anonymous_namespace_ *)re::DynamicOverflowArray<MTL::Region,2ul>::setCapacity(&v114, v10);
  v13 = v116 + 2;
  v116 += 2;
  if (v115 >= v10)
  {
    if (v115 <= v10)
      goto LABEL_22;
  }
  else
  {
    if (!v114)
    {
      re::DynamicOverflowArray<MTL::Region,2ul>::setCapacity(&v114, v10);
      v13 = v116 + 2;
      v116 += 2;
    }
    v14 = (v13 & 1) == 0;
    v15 = 2;
    if (v14)
      v15 = v117;
    if (v15 < v10)
      re::DynamicOverflowArray<MTL::Region,2ul>::setCapacity(&v114, v10);
    v16 = v10 - v115;
    if (v10 > v115)
    {
      v17 = 6 * v115;
      do
      {
        if ((v116 & 1) != 0)
          v18 = &v117;
        else
          v18 = v118;
        v19 = &v18[v17];
        *((_OWORD *)v19 + 1) = 0uLL;
        *((_OWORD *)v19 + 2) = 0uLL;
        *(_OWORD *)v19 = 0uLL;
        v17 += 6;
        --v16;
      }
      while (v16);
    }
  }
  v115 = v10;
  v116 += 2;
LABEL_22:
  v103 = this + 33;
  LODWORD(v149) = v128;
  v20 = re::SmallHashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,8ul,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false>::tryGet((uint64_t)a2 + 96, (unsigned int *)&v149);
  v22 = &selRef_newBufferWithBytes_length_options_;
  v104 = this;
  if (*((_BYTE *)this + 261))
  {
    v106 = v20;
    re::SyncMechanism::sync((re::SyncMechanism *)&location);
    re::mtl::CommandBuffer::makeComputeCommandEncoder(&v136, &v113);
    v145[1] = 0;
    v145[0] = 0;
    v144 = 0;
    re::mtl::CommandBuffer::commandQueue(&v136, &v112);
    re::mtl::CommandQueue::device(&v112, v146);
    if (*(_QWORD *)v146)
    {
      v149 = 0uLL;
      v150.i64[0] = 0;
      objc_msgSend(*(id *)v146, "maxThreadsPerThreadgroup");
      v23 = v149;
      v24 = *(void **)v146;
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    v25 = sqrt((double)v23);

    objc_msgSend(v113, "setComputePipelineState:", this[34]);
    objc_msgSend(v113, "setBytes:length:atIndex:", v145, 16, 0);
    objc_msgSend(v113, "setBytes:length:atIndex:", &v144, 8, 1);
    if (objc_msgSend(v123, sel_textureType) == (id)2)
    {
      objc_msgSend(v113, "setTexture:atIndex:", v123, 0);
      v26 = objc_msgSend(v123, sel_width);
      v27 = objc_msgSend(v123, sel_height);
      *(_QWORD *)&v149 = v26;
      *((_QWORD *)&v149 + 1) = v27;
      v150.i64[0] = 1;
      *(_QWORD *)v146 = v25;
      *(_QWORD *)&v146[8] = v25;
      *(_QWORD *)&v146[16] = 1;
      objc_msgSend(v113, "dispatchThreads:threadsPerThreadgroup:", &v149, v146);
    }
    else if (objc_msgSend(v123, sel_textureType) == (id)3 && objc_msgSend(v123, sel_arrayLength))
    {
      v28 = 0;
      do
      {
        re::makeView2DArrayTo2D(&v123, v28, &v112);
        v29 = v112;
        objc_msgSend(v113, "setTexture:atIndex:", v112, 0);
        v30 = objc_msgSend(v123, sel_width);
        v31 = objc_msgSend(v123, sel_height);
        *(_QWORD *)&v149 = v30;
        *((_QWORD *)&v149 + 1) = v31;
        v150.i64[0] = 1;
        *(_QWORD *)v146 = v25;
        *(_QWORD *)&v146[8] = v25;
        *(_QWORD *)&v146[16] = 1;
        objc_msgSend(v113, "dispatchThreads:threadsPerThreadgroup:", &v149, v146);
        if (v29)

        ++v28;
      }
      while (v28 < (unint64_t)objc_msgSend(v123, sel_arrayLength));
    }
    objc_msgSend(v113, "endEncoding");

    v22 = &selRef_newBufferWithBytes_length_options_;
    if (*((_BYTE *)this + 261))
    {
      if (v106 && *(_QWORD *)(v106 + 8))
      {
        objc_msgSend(*v103, "sigma");
        if (!v10)
        {
          v54 = 1;
          goto LABEL_64;
        }
        v35 = 0;
        *(float *)v33.i32 = (float)((float)(*(float *)v33.i32 + *(float *)v33.i32) * 2.0) + 1.0;
        v36 = v106;
        *(float *)v34.i32 = (float)(2 * (int)*(float *)v33.i32);
        *(float *)v33.i32 = (float)(int)*(float *)v33.i32;
        v37 = (float32x2_t)vdup_lane_s32(v33, 0);
        v38 = (float32x2_t)vdup_lane_s32(v34, 0);
        v39 = 16;
        v40 = 5;
        while (1)
        {
          v41 = *(_QWORD *)(v36 + 8);
          if (v41 <= (unint64_t)v35)
            goto LABEL_127;
          v42 = v106 + 32;
          if ((*(_BYTE *)(v36 + 16) & 1) == 0)
            v42 = *(_QWORD *)(v36 + 40);
          v43 = xmmword_22610BC10;
          if (v9)
          {
            v44 = *(_QWORD *)(v9 + 16);
            if (v44 <= (unint64_t)v35)
              goto LABEL_129;
            v43 = *(_OWORD *)(v9 + 32 + 16 * (_QWORD)v35);
          }
          v107 = (int8x16_t)v43;
          v45 = objc_msgSend(v124, sel_width);
          v46 = objc_msgSend(v124, sel_height);
          this = (id *)v115;
          if (v115 <= (unint64_t)v35)
            goto LABEL_128;
          v47.i64[0] = (uint64_t)v45;
          v47.i64[1] = (uint64_t)v46;
          v48 = vcvt_f32_f64(vcvtq_f64_u64(v47));
          v49 = *(_OWORD *)(v42 + v39);
          v50 = *(_OWORD *)(v42 + v39 - 16);
          if ((v116 & 1) != 0)
            v51 = &v117;
          else
            v51 = v118;
          v52 = (uint64x2_t *)&v51[v40];
          v53 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL), v48);
          *(uint64x2_t *)((char *)v52 - 40) = vcvtq_u64_f64(vcvtq_f64_f32(vsub_f32(vmla_f32(vmul_f32(*(float32x2_t *)v107.i8, v48), *(float32x2_t *)&v50, v53), v37)));
          v52[-2].i64[1] = 0;
          v52[-1] = vcvtq_u64_f64(vcvtq_f64_f32(vmla_f32(v38, vmaxnm_f32(vsub_f32(*(float32x2_t *)&v49, *(float32x2_t *)&v50), 0), v53)));
          v54 = 1;
          v52->i64[0] = 1;
          v35 = (char **)((char *)v35 + 1);
          v39 += 32;
          v40 += 6;
          v36 = v106;
          if (v11 == v35)
            goto LABEL_62;
        }
      }
    }
  }
  if (!v10)
  {
    v54 = 0;
    goto LABEL_64;
  }
  v55 = 0;
  v56 = (id *)(v9 + 32);
  v41 = 24;
  v35 = &selRef_newBufferWithBytes_length_options_;
  do
  {
    v57 = xmmword_22610BC10;
    if (v9)
    {
      v58 = *(_QWORD *)(v9 + 16);
      if (v58 <= v55)
        goto LABEL_125;
      v57 = *(_OWORD *)&v56[2 * v55];
    }
    v108 = (int8x16_t)v57;
    this = (id *)objc_msgSend(v124, sel_width);
    v59 = objc_msgSend(v124, sel_height);
    v60 = (id *)v115;
    if (v115 <= v55)
    {
      v145[0] = 0;
      v56 = (id *)v146;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v149 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v146 = 136315906;
      *(_QWORD *)&v146[4] = "operator[]";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 858;
      *(_WORD *)&v146[18] = 2048;
      *(_QWORD *)&v146[20] = v55;
      v147 = 2048;
      v148 = v60;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_125:
      re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v55, v58);
      _os_crash();
      __break(1u);
LABEL_126:
      v145[0] = 0;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v149 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v146 = 136315906;
      *(_QWORD *)&v146[4] = "operator[]";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 858;
      *(_WORD *)&v146[18] = 2048;
      *(_QWORD *)&v146[20] = v9;
      v147 = 2048;
      v148 = v56;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_127:
      v145[0] = 0;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v149 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v146 = 136315906;
      *(_QWORD *)&v146[4] = "operator[]";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 866;
      *(_WORD *)&v146[18] = 2048;
      *(_QWORD *)&v146[20] = v35;
      v147 = 2048;
      v148 = (id *)v41;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_128:
      v145[0] = 0;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v149 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v146 = 136315906;
      *(_QWORD *)&v146[4] = "operator[]";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 858;
      *(_WORD *)&v146[18] = 2048;
      *(_QWORD *)&v146[20] = v35;
      v147 = 2048;
      v148 = this;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_129:
      re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v35, v44);
      _os_crash();
      __break(1u);
      goto LABEL_130;
    }
    v61.i64[0] = (uint64_t)this;
    v61.i64[1] = (uint64_t)v59;
    v62 = vcvt_f32_f64(vcvtq_f64_u64(v61));
    v63 = (unint64_t)vmuls_lane_f32(*(float *)&v108.i32[1], v62, 1);
    v64 = vmuls_n_f32(*(float *)v108.i32, v62.f32[0]);
    if ((v116 & 1) != 0)
      v65 = &v117;
    else
      v65 = v118;
    v66 = (uint64x2_t *)((char *)v65 + v41);
    v66[-2].i64[1] = (unint64_t)v64;
    v66[-1].i64[0] = v63;
    v66[-1].i64[1] = 0;
    *v66 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL), v62)));
    v66[1].i64[0] = 1;
    ++v55;
    v41 += 48;
  }
  while (v10 != v55);
  v54 = 0;
LABEL_62:
  this = v104;
  v22 = &selRef_newBufferWithBytes_length_options_;
LABEL_64:
  re::SyncMechanism::sync((re::SyncMechanism *)&location);
  if ((v54 & 1) == 0 && *((_BYTE *)this + 261))
    goto LABEL_113;
  if (objc_msgSend(v124, v22[225]) != (id)2)
  {
    if (objc_msgSend(v124, v22[225]) != (id)3)
    {
      objc_msgSend(v124, v22[225]);
      v101 = objc_msgSend(v124, v22[225]);
      re::internal::assertLog((re::internal *)5, v102, "assertion failure: '%s' (%s:line %i) Unsupported texture type %lu.", "false", "execute", 177, v101);
      _os_crash();
      __break(1u);
      return;
    }
    if (!objc_msgSend(v124, sel_arrayLength))
      goto LABEL_112;
    v70 = 0;
    v9 = 0;
    v41 = (unint64_t)v146;
    v35 = (char **)&v136;
    this = v104;
    while (1)
    {
      v56 = (id *)v115;
      if (v115 <= v9)
        goto LABEL_126;
      if ((v116 & 1) != 0)
        v71 = &v117;
      else
        v71 = v118;
      v72 = &v71[v70];
      v74 = v72[1];
      v109 = *((int8x16_t *)v72 + 1);
      v76 = v72[4];
      v75 = v72[5];
      v77 = v104[33];
      v110[0] = *v72;
      v73 = v110[0];
      v110[1] = v74;
      v110[2] = 0;
      objc_msgSend(v77, "setOffset:", v110);
      v78 = v104[33];
      *(_QWORD *)&v149 = v73;
      *((_QWORD *)&v149 + 1) = v74;
      v150 = v109;
      *(_QWORD *)&v151 = v76;
      *((_QWORD *)&v151 + 1) = v75;
      objc_msgSend(v78, "setClipRect:", &v149);
      re::makeView2DArrayTo2D(&v124, v9, &v149);
      View2DArrayTo2D = (re *)re::makeView2DArrayTo2D(&v123, v9, v146);
      v80 = *(_QWORD *)(*((_QWORD *)v105 + 1) + 56);
      v139 = re::globalAllocators(View2DArrayTo2D)[2];
      v140 = 0;
      v81 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v139 + 32))(v139, 40, 0);
      *v81 = &off_24ED80388;
      v81[1] = v104;
      v81[2] = &v136;
      v81[3] = &v149;
      v81[4] = v146;
      v140 = v81;
      v82 = *(_QWORD *)(v80 + 856);
      if (v82)
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v82 + 16))(v82, v138);
      else
        re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer(v103, (uint64_t *)&v136, (id *)&v149, (uint64_t *)v146);
      if (v140)
      {
        (**(void (***)(_BYTE *))v140)(v140);
        if (v140 != v138)
          (*(void (**)(uint64_t))(*(_QWORD *)v139 + 40))(v139);
        v140 = 0;
      }
      if (*(_QWORD *)v146)

      if ((_QWORD)v149)
      ++v9;
      v70 += 6;
      if (v9 >= (unint64_t)objc_msgSend(v124, sel_arrayLength))
        goto LABEL_112;
    }
  }
  if (!v115)
  {
LABEL_132:
    v145[0] = 0;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v149 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v146 = 136315906;
    *(_QWORD *)&v146[4] = "operator[]";
    *(_WORD *)&v146[12] = 1024;
    *(_DWORD *)&v146[14] = 858;
    *(_WORD *)&v146[18] = 2048;
    *(_QWORD *)&v146[20] = 0;
    v147 = 2048;
    v148 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_133;
  }
  v67 = *v103;
  if ((v116 & 1) != 0)
  {
    v69 = v117;
    v68 = &v117;
  }
  else
  {
    v68 = v118;
    v69 = *v118;
  }
  v83 = v68[1];
  v111[0] = v69;
  v111[1] = v83;
  v111[2] = 0;
  objc_msgSend(v67, "setOffset:", v111);
  if (!v115)
  {
LABEL_133:
    v145[0] = 0;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v149 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v146 = 136315906;
    *(_QWORD *)&v146[4] = "operator[]";
    *(_WORD *)&v146[12] = 1024;
    *(_DWORD *)&v146[14] = 858;
    *(_WORD *)&v146[18] = 2048;
    *(_QWORD *)&v146[20] = 0;
    v147 = 2048;
    v148 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v84 = &v118;
  if ((v116 & 1) != 0)
    v85 = &v117;
  else
    v85 = v118;
  v86 = this[33];
  v87 = *v85;
  if ((v116 & 1) == 0)
    v84 = (unint64_t **)(v118 + 1);
  v88 = *v84;
  v89 = (uint64_t *)(v118 + 2);
  if ((v116 & 1) != 0)
    v89 = &v119;
  v90 = *v89;
  v91 = (uint64_t *)(v118 + 3);
  if ((v116 & 1) != 0)
    v91 = &v120;
  v92 = *v91;
  v93 = (uint64_t *)(v118 + 4);
  if ((v116 & 1) != 0)
    v93 = &v121;
  v94 = *v93;
  v95 = &v122;
  if ((v116 & 1) == 0)
    v95 = (uint64_t *)(v118 + 5);
  v96 = *v95;
  *(_QWORD *)&v149 = v87;
  *((_QWORD *)&v149 + 1) = v88;
  v150.i64[0] = v90;
  v150.i64[1] = v92;
  *(_QWORD *)&v151 = v94;
  *((_QWORD *)&v151 + 1) = v96;
  v97 = (re *)objc_msgSend(v86, "setClipRect:", &v149);
  v98 = *(_QWORD *)(*((_QWORD *)v105 + 1) + 56);
  v142 = re::globalAllocators(v97)[2];
  v99 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v142 + 32))(v142, 40, 0);
  *v99 = &off_24ED80330;
  v99[1] = this;
  v99[2] = &v136;
  v99[3] = &v124;
  v99[4] = &v123;
  v143 = v99;
  v100 = *(_QWORD *)(v98 + 856);
  if (v100)
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v100 + 16))(v100, v141);
  else
    re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer(v103, (uint64_t *)&v136, &v124, (uint64_t *)&v123);
  if (v143)
  {
    (**(void (***)(_BYTE *))v143)(v143);
    if (v143 != v141)
      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 40))(v142);
    v143 = 0;
  }
LABEL_112:
  re::SyncMechanism::sync((re::SyncMechanism *)&location);
LABEL_113:
  if (v114 && (v116 & 1) == 0)
    (*(void (**)(void))(*v114 + 40))();
  if (v123)

  if (v124)
  if (v133)
  {

    v133 = 0;
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v137);
}

uint64_t re::SmallHashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,8ul,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false>::tryGet(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 956))
    return re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::tryGet(a1 + 928, a2);
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  result = a1 + 48;
  v4 = 112 * v3;
  while (*(_DWORD *)(result - 16) != *a2)
  {
    result += 112;
    v4 -= 112;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t *re::allocInfo_RenderGraphMPSImageGaussianBlurNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_431);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_431))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E3E8, 0);
    *(uint64_t *)((char *)&qword_25411E3F8 + 6) = 0;
    qword_25411E3F8 = 0;
    qword_25411E408 = 0;
    qword_25411E410 = 0xFFFFFFFFLL;
    qword_25411E3E8 = (uint64_t)&off_24ED7DAA8;
    qword_25411E418 = (uint64_t)"RenderGraphMPSImageGaussianBlurNode";
    dword_25411E420 = 0;
    xmmword_25411E428 = 0u;
    unk_25411E438 = 0u;
    xmmword_25411E448 = 0u;
    qword_25411E458 = 0;
    __cxa_guard_release(&_MergedGlobals_431);
  }
  return &qword_25411E3E8;
}

void re::initInfo_RenderGraphMPSImageGaussianBlurNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0xDD66E2E47DA234ELL;
  v22[1] = "RenderGraphMPSImageGaussianBlurNode";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E3C0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E3C0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E3C8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "sigma";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411E3D0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_MPSImageEdgeModeType((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "edgeMode";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10400000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411E3D8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "enableRestrictedClipRegion";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x10500000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411E3E0 = v20;
      __cxa_guard_release(&qword_25411E3C0);
    }
  }
  *((_QWORD *)this + 2) = 0x11800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411E3C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMPSImageGaussianBlurNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMPSImageGaussianBlurNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMPSImageGaussianBlurNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMPSImageGaussianBlurNode>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphMPSImageGaussianBlurNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED80288;
  *((_WORD *)result + 130) = 0;
  *((_QWORD *)result + 33) = 0;
  *((_QWORD *)result + 34) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphMPSImageGaussianBlurNode>(int a1, int a2, re::RenderGraphMPSImageGaussianBlurNode *this)
{
  re::RenderGraphMPSImageGaussianBlurNode::~RenderGraphMPSImageGaussianBlurNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphMPSImageGaussianBlurNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED80288;
  *((_WORD *)result + 130) = 0;
  *((_QWORD *)result + 33) = 0;
  *((_QWORD *)result + 34) = 0;
  return result;
}

uint64_t re::introspect_RenderGraphMPSImageGaussianBlurNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMPSImageGaussianBlurNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMPSImageGaussianBlurNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMPSImageGaussianBlurNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMPSImageGaussianBlurNode>, this);
}

void re::RenderGraphMPSImageGaussianBlurNode::~RenderGraphMPSImageGaussianBlurNode(re::RenderGraphMPSImageGaussianBlurNode *this)
{
  re::RenderGraphMPSImageGaussianBlurNode::~RenderGraphMPSImageGaussianBlurNode(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {

    *((_QWORD *)this + 34) = 0;
  }

  re::RenderGraphNode::~RenderGraphNode(this);
}

void re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_0,void ()(void)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer((void **)(*(_QWORD *)(a1 + 8) + 264), *(uint64_t **)(a1 + 16), *(id **)(a1 + 24), *(uint64_t **)(a1 + 32));
}

uint64_t re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED80330;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED80330;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_0,void ()(void)>::size()
{
  return 40;
}

void re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_1,void ()(void)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_1,void ()(void)>::operator()(uint64_t a1)
{
  re::mtl::mps::UnaryImageKernel::encodeToCommandBuffer((void **)(*(_QWORD *)(a1 + 8) + 264), *(uint64_t **)(a1 + 16), *(id **)(a1 + 24), *(uint64_t **)(a1 + 32));
}

uint64_t re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_1,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED80388;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_1,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED80388;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMPSImageGaussianBlurNode::execute(re::RenderGraphContext &)::$_1,void ()(void)>::size()
{
  return 40;
}

_QWORD *re::DynamicOverflowArray<MTL::Region,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  const void *v15;
  int v16;

  v3 = result;
  v4 = *result;
  if (a2 && !v4)
  {
    result = (_QWORD *)re::DynamicOverflowArray<MTL::Region,2ul>::setCapacity(v3, a2);
    v5 = *((_DWORD *)v3 + 4) + 2;
LABEL_4:
    *((_DWORD *)v3 + 4) = v5;
    return result;
  }
  v6 = *((_DWORD *)result + 4);
  if ((v6 & 1) != 0)
    v7 = 2;
  else
    v7 = result[3];
  if (v7 != a2)
  {
    v8 = result[1];
    if (v8 <= a2 && (a2 > 2 || (v6 & 1) == 0))
    {
      if (a2 < 3)
      {
        v13 = result + 3;
        v14 = v3[4];
        if ((v6 & 1) != 0)
          v15 = v3 + 3;
        else
          v15 = (const void *)v3[4];
        memcpy(v13, v15, 48 * v8);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v14);
        v5 = *((_DWORD *)v3 + 4) | 1;
        goto LABEL_4;
      }
      v9 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v4 + 32))(*result, 48 * a2, 1);
      if (v9)
      {
        v11 = v9;
        if ((v3[2] & 1) != 0)
          v12 = v3 + 3;
        else
          v12 = (const void *)v3[4];
        result = memcpy(v9, v12, 48 * v3[1]);
        v16 = *((_DWORD *)v3 + 4);
        if ((v16 & 1) == 0)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v3[4]);
          v16 = *((_DWORD *)v3 + 4);
        }
        *((_DWORD *)v3 + 4) = v16 & 0xFFFFFFFE;
        v3[3] = a2;
        v3[4] = v11;
      }
      else
      {
        re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, 48 * a2, *(_QWORD *)(*v3 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false,false>::tryGet(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v6 + 112 * v4 + 4) != (_DWORD)v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 112 * v4) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v6 + 112 * v4 + 4) == (_DWORD)v2)
        return v6 + 112 * v4 + 16;
    }
    return 0;
  }
  return v6 + 112 * v4 + 16;
}

void re::CopyShadowTextureNode::execute(re::CopyShadowTextureNode *this, re::RenderGraphContext *a2)
{
  unint64_t v2;
  id v5;
  id *v6;
  id v7;
  void **v8;
  id v9;
  void **v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void **v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  _BYTE v22[12];
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;
  id v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 29))
  {
    v21 = 0;
    v33 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)v29 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v22 = 136315906;
    *(_QWORD *)&v22[4] = "operator[]";
    v23 = 1024;
    v24 = 789;
    v25 = 2048;
    v26 = 0;
    v27 = 2048;
    v28 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_32;
  }
  re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 31), 0, 0, &v20);
  v2 = *((_QWORD *)this + 29);
  if (v2 <= 1)
  {
LABEL_32:
    v21 = 0;
    v33 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)v29 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v22 = 136315906;
    *(_QWORD *)&v22[4] = "operator[]";
    v23 = 1024;
    v24 = 789;
    v25 = 2048;
    v26 = 1;
    v27 = 2048;
    v28 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
  re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 31) + 64, 0, 0, &v19);
  if (!*((_QWORD *)this + 19))
  {
LABEL_33:
    v21 = 0;
    v33 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)v29 = 0u;
    v30 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v22 = 136315906;
    *(_QWORD *)&v22[4] = "operator[]";
    v23 = 1024;
    v24 = 789;
    v25 = 2048;
    v26 = 0;
    v27 = 2048;
    v28 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_34;
  }
  v5 = *(id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, *((_QWORD *)this + 21));
  v29[0] = v5;
  v6 = *(id **)(*((_QWORD *)a2 + 1) + 168);
  v7 = v6[87];
  v8 = v6 + 88;
  v9 = v6[88];
  v10 = v6 + 89;
  v11 = v6[89];
  if (v20 == v6[87] && v19 == *v8 && v5 == *v10)
    goto LABEL_18;
  v12 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder((uint64_t)a2, v12, *((re::RenderGraphNodeBase **)a2 + 5), 0, v22);
  if (v7)
  {
    v13 = objc_msgSend(v20, sel_arrayLength);
    if (v13 >= objc_msgSend(v7, sel_arrayLength))
    {
      objc_msgSend(*(id *)v22, "copyFromTexture:toTexture:", v7, v20);
      goto LABEL_10;
    }
LABEL_34:
    re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Reducing the texture size is not supported as it requires compaction", "newShadowTexture->arrayLength() >= oldShadowTexture->arrayLength()", "execute", 118);
    _os_crash();
    __break(1u);
  }
LABEL_10:
  v15 = v6 + 87;
  if (v9)
    objc_msgSend(*(id *)v22, "copyFromTexture:toTexture:", v9, v19);
  if (v11)
  {
    v16 = objc_msgSend(v11, sel_length);
    v17 = objc_msgSend(v5, sel_length);
    if (v17 >= v16)
      v18 = v16;
    else
      v18 = v17;
    objc_msgSend(*(id *)v22, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v11, 0, v5, 0, v18);
  }
  NS::SharedPtr<MTL::Texture>::operator=(v8, &v19);
  NS::SharedPtr<MTL::Texture>::operator=(v15, &v20);
  NS::SharedPtr<MTL::Texture>::operator=(v10, v29);

LABEL_18:
  if (v11)

  if (v9)
  if (v7)

  if (v29[0])
  if (v19)

  if (v20)
}

void re::GenerateTiledShadowDepthPrepassMapNode::execute(const char **this, float32x4_t *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  re::GenerateTiledShadowDepthPrepassMapNode *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  re::Allocator *v16;
  uint64_t v17;
  int *v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  const char **v27;
  const char *v28;
  unint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  NSObject *v78;
  uint64_t v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  unint64_t v84;
  const char *v85;
  const char *v86;
  re::Allocator *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  const char **v92;
  re::RenderGraphContext *v93;
  const char **v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  re::DrawTable *v98;
  re::RenderGraphContext *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  char v113[18];
  _OWORD v114[2];
  uint64_t v115;
  _BYTE v116[48];
  __int128 v117;
  char v118;
  uint64_t v119;
  char v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint8_t buf[16];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  re::MaterialParameterTableLayers *v130[2];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  _DWORD v137[7];
  __int16 v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_25411E468);
  if ((v4 & 1) == 0)
    goto LABEL_79;
  while (1)
  {
    if (a2[83].i8[4])
LABEL_76:
      v5 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)&a2[83].u32[2], this[2], "DrawInstancedDepthOnlyDepthAsColor");
    else
      v5 = 0;
    v6 = atomic_load((unsigned __int8 *)&qword_25411E478);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25411E478))
    {
      qword_25411E470 = re::getCombinedScopeHash((re *)"SceneArray", v81, v82);
      __cxa_guard_release(&qword_25411E478);
    }
    v7 = (re::GenerateTiledShadowDepthPrepassMapNode *)re::RenderGraphDataStore::tryGet<re::SceneArrayData>(a2[73].i64[0], qword_25411E470);
    if (!v7)
    {
      v78 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v78, OS_LOG_TYPE_DEFAULT, "GenerateTiledShadowDepthPrepassMapNode::execute: Missing SceneArrayData. Skipping node execution.", buf, 2u);
      }
      return;
    }
    this = (const char **)v7;
    v8 = atomic_load((unsigned __int8 *)&qword_25411E488);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25411E488))
    {
      qword_25411E480 = re::hashString((re *)"ProjectiveMeshShadow", v83);
      __cxa_guard_release(&qword_25411E488);
    }
    v9 = atomic_load((unsigned __int8 *)&qword_25411E498);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25411E498))
    {
      qword_25411E490 = re::getCombinedScopeHash(qword_25411E480, v84, v85);
      __cxa_guard_release(&qword_25411E498);
    }
    v10 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowGenerationData>>(a2[73].i64[0], qword_25411E490);
    if (!v10)
      return;
    v11 = v10;
    v12 = atomic_load((unsigned __int8 *)&qword_25411E4A8);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25411E4A8))
    {
      qword_25411E4A0 = re::hashString((re *)"DepthColorClear", v86);
      __cxa_guard_release(&qword_25411E4A8);
    }
    re::RenderGraphContext::makeFullscreenDrawCall(a2, *(_QWORD *)(v11 + 128), *(_QWORD *)(v11 + 136), 0, 0, 0, (int32x2_t *)buf);
    a2[94].i8[8] = 1;
    v13 = re::MaterialParameterTableLayers::resolveTechniqueIndices(v130[0], qword_25411E4A0);
    if (!v14)
    {
      re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
      goto LABEL_78;
    }
    v15 = *(_QWORD *)(v11 + 432);
    HIDWORD(v128) = *v13;
    LODWORD(v128) = v15;
    v113[0] = 0;
    re::encodeFullscreenDrawCall((re::DrawCall *)buf, (uint64_t)"DepthColorClear", (re::RenderGraphContext *)a2, v5, 0, v113, 0);
    a2[94].i8[8] = 0;
    v16 = *(re::Allocator **)(a2->i64[0] + 24);
    v17 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, 224, 16);
    *(_OWORD *)(v17 + 96) = 0u;
    *(_OWORD *)(v17 + 112) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_OWORD *)(v17 + 80) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 128) = 0u;
    *(_OWORD *)(v17 + 144) = 0u;
    *(_OWORD *)(v17 + 160) = 0u;
    *(_OWORD *)(v17 + 176) = 0u;
    *(_OWORD *)(v17 + 192) = 0u;
    *(_OWORD *)(v17 + 208) = 0u;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v17 + 152) = _D0;
    *(_DWORD *)(v17 + 160) = 1065353216;
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(v11 + 144);
    v103 = v17;
    v23 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v17, _MergedGlobals_432);
    if (v24)
      break;
LABEL_78:
    re::internal::assertLog((re::internal *)6, v24, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_79:
    if (__cxa_guard_acquire(&qword_25411E468))
    {
      _MergedGlobals_432 = re::hashString((re *)"DrawInstancedDepthOnlyDepthAsColor", v80);
      __cxa_guard_release(&qword_25411E468);
    }
  }
  v25 = (unint64_t)v116;
  v102 = *v23;
  v98 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, 328, 8);
  re::DrawTable::DrawTable(v98, v16);
  v26 = this[3];
  if (!v26)
    goto LABEL_73;
  v27 = (const char **)this[5];
  v92 = &v27[(_QWORD)v26];
  v99 = (re::RenderGraphContext *)a2;
  v87 = v16;
  v88 = v5;
  while (2)
  {
    v94 = v27;
    v28 = *v27;
    v29 = qword_25411E480;
    v30 = strlen(*v27);
    v31 = 0x9E3779B97F4A7C17;
    if (v30)
    {
      MurmurHash3_x64_128((uint64_t)v28, v30, 0, (unint64_t *)buf);
      v31 = ((*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf)
          - 0x61C8864680B583E9;
    }
    v32 = a2[73].i64[0];
    v33 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_32MeshShadowPerSceneGenerationDataEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_32MeshShadowPerSceneGenerationDataEEE" & 0x8000000000000000) != 0)
    {
      v34 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_32MeshShadowPerSceneGenerationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
      v35 = 5381;
      do
      {
        v33 = v35;
        v36 = *v34++;
        v35 = (33 * v35) ^ v36;
      }
      while (v36);
    }
    *(_QWORD *)buf = ((((v29 >> 2) + (v29 << 6) + v31) ^ v29) - 0x61C8864680B583E9 + (v33 << 6) + (v33 >> 2)) ^ v33;
    v37 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v32 + 64, (uint64_t *)buf);
    if (!v37)
      goto LABEL_63;
    v38 = *v37;
    if (!*v37)
      goto LABEL_63;
    v39 = atomic_load((unsigned __int8 *)&qword_25411E4B8);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_25411E4B8))
    {
      qword_25411E4B0 = re::hashString((re *)"MeshScenes", v77);
      __cxa_guard_release(&qword_25411E4B8);
    }
    v40 = qword_25411E4B0;
    v41 = strlen(v28);
    v42 = 0x9E3779B97F4A7C17;
    if (v41)
    {
      MurmurHash3_x64_128((uint64_t)v28, v41, 0, (unint64_t *)buf);
      v42 = ((*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf)
          - 0x61C8864680B583E9;
    }
    v43 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>>(a2[73].i64[0], ((v40 >> 2) + (v40 << 6) + v42) ^ v40);
    if (!v43)
      goto LABEL_63;
    v44 = v43;
    v45 = *(_QWORD *)(a2->i64[1] + 88);
    if (v45)
    {
      *(_QWORD *)buf = 0x8026BAB35997FC70;
      *(_QWORD *)&buf[8] = "meshshadow:enableSUMeshCullingPerCaster";
      LOBYTE(v121) = 0;
      if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v45, buf, &v121))
      {
        re::StringID::destroyString((re::StringID *)buf);
        goto LABEL_26;
      }
      v101 = v121;
      re::StringID::destroyString((re::StringID *)buf);
    }
    else
    {
LABEL_26:
      v101 = 1;
    }
    *(_QWORD *)&v109 = 0;
    DWORD2(v109) = 0;
    *(_QWORD *)&v110 = 0;
    v108 = (unint64_t)v16;
    re::DynamicArray<re::MeshPartDrawContext>::setCapacity(&v108, 0);
    ++DWORD2(v109);
    v90 = *(_QWORD *)(v44 + 48);
    if (!v90)
    {
LABEL_59:
      if ((_QWORD)v108)
      {
        if ((_QWORD)v110)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v108 + 40))(v108, v110);
      }
      a2 = (float32x4_t *)v99;
      v16 = v87;
      v5 = v88;
      v25 = (unint64_t)v116;
LABEL_63:
      v27 = v94 + 1;
      if (v94 + 1 == v92)
        goto LABEL_73;
      continue;
    }
    break;
  }
  v46 = 0;
  v47 = v44 + 8;
  v89 = v44 + 8;
  while (1)
  {
    v91 = v46;
    v48 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v47, v46);
    v49 = *(_QWORD *)(v48 + 16);
    if (v49)
      break;
LABEL_58:
    v46 = v91 + 1;
    v47 = v89;
    if (v91 + 1 == v90)
      goto LABEL_59;
  }
  a2 = *(float32x4_t **)(v48 + 32);
  v93 = (re::RenderGraphContext *)&a2[41 * v49];
  v50 = *(_QWORD *)(*((_QWORD *)v99 + 1) + 32);
  v95 = v50 + 8;
  v96 = v50 + 72;
  while (!a2[40].i8[4]
       || !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v38 + 8, (uint64_t *)&a2[26])|| !a2->i64[1])
  {
LABEL_57:
    a2 += 41;
    if (a2 == (float32x4_t *)v93)
      goto LABEL_58;
  }
  v51 = 0;
  while (1)
  {
    v52 = re::DataArray<re::MeshInstance>::get(v96, *(_QWORD *)(a2->i64[0] + 8 * v51));
    v53 = re::DataArray<re::MeshModel>::get(v95, *(_QWORD *)(v52 + 16));
    v54 = v53;
    v55 = 0;
    v56 = a2[3];
    v57 = a2[4];
    v58 = a2[5];
    v59 = a2[6];
    v60 = *(_OWORD *)(v52 + 48);
    v61 = *(_OWORD *)(v52 + 64);
    v62 = *(_OWORD *)(v52 + 80);
    *(_OWORD *)v116 = *(_OWORD *)(v52 + 32);
    *(_OWORD *)&v116[16] = v60;
    *(_OWORD *)&v116[32] = v61;
    v117 = v62;
    do
    {
      *(__int128 *)((char *)&v121 + v55) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v56, COERCE_FLOAT(*(_OWORD *)&v116[v55])), v57, *(float32x2_t *)&v116[v55], 1), v58, *(float32x4_t *)&v116[v55], 2), v59, *(float32x4_t *)&v116[v55], 3);
      v55 += 16;
    }
    while (v55 != 64);
    v106 = v122;
    v107 = v121;
    v104 = v124;
    v105 = v123;
    v63 = a2[1].i64[0];
    v97 = v51;
    if (v63 && (v64 = *(_QWORD *)(v63 + 96)) != 0)
    {
      this = *(const char ***)(v64 + 8);
      if ((unint64_t)this <= v51)
      {
        v115 = 0;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v121 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v116 = 136315906;
        *(_QWORD *)&v116[4] = "operator[]";
        *(_WORD *)&v116[12] = 1024;
        *(_DWORD *)&v116[14] = 468;
        *(_WORD *)&v116[18] = 2048;
        *(_QWORD *)&v116[20] = v51;
        *(_WORD *)&v116[28] = 2048;
        *(_QWORD *)&v116[30] = this;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_76;
      }
      v65 = *(_QWORD *)(v64 + 16) + 24 * v51;
      v66 = *(_QWORD *)(v65 + 8);
      v100 = *(_QWORD *)(v65 + 16);
    }
    else
    {
      v66 = 0;
      v100 = 0;
    }
    if (*(_QWORD *)(v53 + 56))
      break;
LABEL_56:
    v51 = v97 + 1;
    if (v97 + 1 >= a2->i64[1])
      goto LABEL_57;
  }
  v25 = 0;
  while (2)
  {
    if (v25 >= v66)
      v67 = 0;
    else
      v67 = *(_QWORD *)(v100 + 8 * v25);
    v68 = *(_QWORD *)(v54 + 64) + 560 * v25;
    v69 = (((*(_DWORD *)(v68 + 544) ^ *(_DWORD *)(*(_QWORD *)(v103 + 40) + 216)) & ~*(_DWORD *)(*(_QWORD *)(v103 + 40)
                                                                                                + 220) | *(_DWORD *)(*(_QWORD *)(v103 + 40) + 220) & *(_DWORD *)(*(_QWORD *)(v103 + 40) + 216)) ^ a2[25].i32[2]) & ~a2[25].i32[3] | a2[25].i32[2] & a2[25].i32[3];
    *(_QWORD *)buf = a2[26].i64[0];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&v128 = 0;
    v127 = (unint64_t)v68;
    *((_QWORD *)&v128 + 1) = v67;
    *(_QWORD *)&v129 = v103;
    *((_QWORD *)&v129 + 1) = 0xFFFF010000000000;
    *(_OWORD *)v130 = v107;
    v131 = v106;
    v132 = v105;
    v133 = v104;
    v135 = 0;
    v134 = 0;
    *(_DWORD *)((char *)&v137[1] + 3) = 0;
    *(_QWORD *)v137 = 0;
    *(_QWORD *)&v137[3] = 0;
    *(_QWORD *)&v137[5] = 0;
    v138 = 0;
    v136 = -1;
    v139 = v69;
    v140 = 0x7FFFFFFF00000000;
    v141 = 0;
    v142 = 0xFFFFFFFFLL;
    v143 = 0;
    v144 = 0;
    v70 = *(_OWORD *)(v68 + 448);
    v114[0] = *(_OWORD *)(v68 + 432);
    v114[1] = v70;
    v136 = v102;
    if (!v101)
    {
LABEL_54:
      v75 = *(_QWORD *)v99;
      *(_QWORD *)&v121 = 0;
      DWORD2(v121) = 0;
      v76 = re::addDrawCall((uint64_t)v98, (uint64_t)buf, v75, 1u, (uint64_t)&v121);
      *(_DWORD *)(v76 + 40) = *(_DWORD *)(v38 + 56);
      *(_DWORD *)(v76 + 32) = *(_DWORD *)(v38 + 60);
LABEL_55:
      if (++v25 >= *(_QWORD *)(v54 + 56))
        goto LABEL_56;
      continue;
    }
    break;
  }
  v71 = *(unsigned int *)(v38 + 56);
  if (v71 >= *(_DWORD *)(v38 + 60) + (int)v71)
    goto LABEL_55;
  v5 = 112 * v71;
  while (1)
  {
    v72 = *(_QWORD *)(v11 + 464);
    if (v72 <= v71)
      break;
    v73 = (uint64_t *)(*(_QWORD *)(v11 + 472) + v5);
    v74 = *v73;
    *(_QWORD *)&v121 = v73 + 2;
    *((_QWORD *)&v121 + 1) = v74;
    if (re::isBoundingBoxInsidePlanes((uint64_t)v114, (uint64_t)&v121, (float32x4_t *)v130))
      goto LABEL_54;
    ++v71;
    v5 += 112;
    if (v71 >= (*(_DWORD *)(v38 + 60) + *(_DWORD *)(v38 + 56)))
      goto LABEL_55;
  }
  v115 = 0;
  v124 = 0u;
  v125 = 0u;
  v122 = 0u;
  v123 = 0u;
  v121 = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v116 = 136315906;
  *(_QWORD *)&v116[4] = "operator[]";
  *(_WORD *)&v116[12] = 1024;
  *(_DWORD *)&v116[14] = 476;
  *(_WORD *)&v116[18] = 2048;
  *(_QWORD *)&v116[20] = v71;
  *(_WORD *)&v116[28] = 2048;
  *(_QWORD *)&v116[30] = v72;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_73:
  v79 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(a2->i64[1] + 104));
  re::RenderGraphContext::acquireManagedRenderEncoder(v114, a2, v79, 0);
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  v108 = 0u;
  v109 = 0u;
  re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)&v108);
  *(_OWORD *)buf = xmmword_2260E5F10;
  v127 = xmmword_2260E5F20;
  v128 = xmmword_2260E5F40;
  v129 = xmmword_2260E5D70;
  *(_OWORD *)v130 = xmmword_2260E5F10;
  v131 = xmmword_2260E5F20;
  v132 = xmmword_2260E5F40;
  v133 = xmmword_2260E5D70;
  re::DrawTableSlice::DrawTableSlice(&v121, (uint64_t)v98);
  a2[94].i8[8] = 1;
  *(_QWORD *)v116 = "DrawInstancedDepthOnlyDepthAsColor";
  *(_QWORD *)&v116[8] = &v121;
  *(_QWORD *)&v116[16] = buf;
  *(_QWORD *)&v116[24] = buf;
  *(_QWORD *)&v116[32] = 0;
  *(_WORD *)&v116[40] = 513;
  v116[42] = 0;
  *(_WORD *)&v116[44] = 0;
  *(_OWORD *)(v25 + 63) = 0u;
  *(_OWORD *)(v25 + 79) = 0u;
  v118 = 0;
  v119 = v5;
  v120 = 0;
  re::RenderGraphContext::encodeDrawCalls(a2, &v108, v116);
  a2[94].i8[8] = 0;
  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v114);
}

unint64_t re::getCombinedScopeHash(unint64_t this, unint64_t a2, const char *a3)
{
  unint64_t v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, v5);
  return ((this << 6)
        + (this >> 2)
        - 0x61C8864680B583E9
        + ((v5[1] + (v5[0] << 6) + (v5[0] >> 2) - 0x61C8864680B583E9) ^ v5[0])) ^ this;
}

void re::GenerateProjectiveMeshShadowMapNode::execute(const char **this, re::RenderGraphContext *a2)
{
  unsigned int *v2;
  re::RenderGraphContext *v3;
  _BYTE *v5;
  char *v6;
  char *v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  float *v15;
  unsigned __int8 v16;
  float *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  re::Allocator *v23;
  re::DrawTable *v24;
  uint64_t v25;
  const char **v26;
  _QWORD *v27;
  float v28;
  const char *v34;
  unsigned __int8 v35;
  unint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  float *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char **v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  float *v93;
  float v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int16 *v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  char *v115;
  uint64_t i;
  int v117;
  _QWORD *v118;
  int v119;
  const char *v120;
  NSObject *v121;
  uint64_t v122;
  const char *v123;
  const char *v124;
  const char *v125;
  const char *v126;
  const char *v127;
  unint64_t v128;
  const char *v129;
  int v130;
  const char *v131;
  uint64_t v132;
  const char **v133;
  char *v134;
  const char **v135;
  uint64_t v136;
  _OWORD *v137;
  uint64_t v138;
  uint64_t v139;
  float32x4_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _BYTE *v144;
  const char **v145;
  uint64_t v146;
  float *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  unint64_t *v156;
  _QWORD *v157;
  _DWORD *v158;
  _DWORD *v159;
  unint64_t *v160;
  _DWORD *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  float32x4_t v165;
  re::Allocator *v166;
  uint64_t v167;
  char **v168;
  _QWORD *v169;
  unint64_t v170;
  _QWORD v171[5];
  __int16 v172;
  char v173;
  __int16 v174;
  __int128 v175;
  __int128 v176;
  char v177;
  uint64_t v178;
  char v179;
  _OWORD v180[4];
  uint64_t v181;
  uint64_t v182;
  int v183;
  char v184[18];
  _BYTE v185[48];
  __int128 v186;
  uint8_t buf[16];
  __int128 v188;
  __int128 v189;
  __int128 v190;
  re::MaterialParameterTableLayers *v191[2];
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  _DWORD v198[7];
  __int16 v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;

  v3 = a2;
  v206 = *MEMORY[0x24BDAC8D0];
  v5 = (_BYTE *)*((_QWORD *)a2 + 1);
  v6 = "SurfaceShaderMeshShadowCaster";
  v7 = "projectiveMeshShadowTechnique";
  if (v5[307] && *v5)
  {
    v7 = "projectiveMeshShadowTechniqueProgrammableBlending";
    v6 = "SurfaceShaderMeshShadowCasterProgrammableBlending";
  }
  v8 = atomic_load((unsigned __int8 *)&qword_25411E4C8);
  if ((v8 & 1) == 0)
    goto LABEL_120;
  while (1)
  {
    v9 = atomic_load((unsigned __int8 *)&qword_25411E4D8);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25411E4D8))
    {
      qword_25411E4D0 = re::hashString((re *)v6, v124);
      __cxa_guard_release(&qword_25411E4D8);
    }
    v10 = atomic_load((unsigned __int8 *)&qword_25411E4E8);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25411E4E8))
    {
      qword_25411E4E0 = re::getCombinedScopeHash((re *)"SceneArray", v125, v126);
      __cxa_guard_release(&qword_25411E4E8);
    }
    v11 = re::RenderGraphDataStore::tryGet<re::SceneArrayData>(*((_QWORD *)v3 + 146), qword_25411E4E0);
    if (!v11)
    {
      v121 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v121, OS_LOG_TYPE_DEFAULT, "GenerateProjectiveMeshShadowMapNode::execute: Missing SceneArrayData. Skipping node execution.", buf, 2u);
      }
      return;
    }
    v6 = (char *)v11;
    v12 = atomic_load((unsigned __int8 *)&qword_25411E4F8);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25411E4F8))
    {
      qword_25411E4F0 = re::hashString((re *)"ProjectiveMeshShadow", v127);
      __cxa_guard_release(&qword_25411E4F8);
    }
    v13 = atomic_load((unsigned __int8 *)&qword_25411E508);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25411E508))
    {
      qword_25411E500 = re::getCombinedScopeHash(qword_25411E4F0, v128, v129);
      __cxa_guard_release(&qword_25411E508);
    }
    v14 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowGenerationData>>(*((_QWORD *)v3 + 146), qword_25411E500);
    if (!v14)
      return;
    v15 = (float *)v14;
    v169 = (_QWORD *)v14;
    if (*((_BYTE *)v3 + 1332))
      goto LABEL_117;
    v138 = 0;
LABEL_13:
    v134 = v7;
    v16 = atomic_load((unsigned __int8 *)&qword_25411E518);
    if ((v16 & 1) == 0)
    {
      v130 = __cxa_guard_acquire(&qword_25411E518);
      v15 = (float *)v169;
      if (v130)
      {
        qword_25411E510 = re::hashString((re *)"ShadowClear", v131);
        __cxa_guard_release(&qword_25411E518);
        v15 = (float *)v169;
      }
    }
    v17 = v15;
    re::RenderGraphContext::makeFullscreenDrawCall(v3, *((_QWORD *)v15 + 16), *((_QWORD *)v15 + 17), 0, 0, 0, (int32x2_t *)buf);
    v18 = re::MaterialParameterTableLayers::resolveTechniqueIndices(v191[0], qword_25411E510);
    if (v19)
      break;
    re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_119:
    v171[0] = 0;
    v190 = 0u;
    *(_OWORD *)v191 = 0u;
    v188 = 0u;
    v189 = 0u;
    *(_OWORD *)buf = 0u;
    v7 = (char *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v185 = 136315906;
    *(_QWORD *)&v185[4] = "operator[]";
    *(_WORD *)&v185[12] = 1024;
    *(_DWORD *)&v185[14] = 468;
    *(_WORD *)&v185[18] = 2048;
    *(_QWORD *)&v185[20] = this;
    *(_WORD *)&v185[28] = 2048;
    *(_QWORD *)&v185[30] = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_120:
    if (__cxa_guard_acquire(&qword_25411E4C8))
    {
      qword_25411E4C0 = re::hashString((re *)v7, v123);
      __cxa_guard_release(&qword_25411E4C8);
    }
  }
  v20 = *((_QWORD *)v17 + 54);
  HIDWORD(v189) = *v18;
  LODWORD(v189) = v20;
  *((_BYTE *)v3 + 1512) = 1;
  v184[0] = 0;
  re::encodeFullscreenDrawCall((re::DrawCall *)buf, (uint64_t)"ShadowClear", v3, v138, 0, v184, 0);
  *((_BYTE *)v3 + 1512) = 0;
  v21 = v17[59];
  v22 = v17[60];
  v23 = *(re::Allocator **)(*(_QWORD *)v3 + 24);
  v24 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v23 + 32))(v23, 328, 8);
  v166 = v23;
  re::DrawTable::DrawTable(v24, v23);
  v25 = *((_QWORD *)v6 + 3);
  if (v25)
  {
    v26 = (const char **)*((_QWORD *)v6 + 5);
    v27 = &unk_25411E000;
    v133 = &v26[v25];
    v28 = v21 / v22;
    __asm { FMOV            V9.2S, #1.0 }
    while (1)
    {
      v135 = v26;
      v34 = *v26;
      v35 = atomic_load((unsigned __int8 *)&qword_25411E528);
      if ((v35 & 1) == 0)
      {
        v118 = v27;
        v119 = __cxa_guard_acquire(&qword_25411E528);
        v27 = v118;
        if (v119)
        {
          qword_25411E520 = re::hashString((re *)"MeshScenes", v120);
          __cxa_guard_release(&qword_25411E528);
          v27 = v118;
        }
      }
      v36 = v27[164];
      v37 = strlen(v34);
      v38 = 0x9E3779B97F4A7C17;
      if (v37)
      {
        MurmurHash3_x64_128((uint64_t)v34, v37, 0, (unint64_t *)buf);
        v38 = ((*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf)
            - 0x61C8864680B583E9;
      }
      v39 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>>(*((_QWORD *)v3 + 146), ((v36 >> 2) + (v36 << 6) + v38) ^ v36);
      v40 = v39 ? v39 + 8 : 0;
      v141 = *(_QWORD *)(v40 + 40);
      if (v141)
        break;
LABEL_103:
      v26 = v135 + 1;
      v27 = (_QWORD *)&unk_25411E000;
      if (v135 + 1 == v133)
        goto LABEL_109;
    }
    v41 = 0;
    while (1)
    {
      v143 = v41;
      v151 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v40, v41);
      v42 = *(_QWORD *)(v151 + 16);
      v43 = (float *)v169;
      if (v42)
        break;
LABEL_102:
      v41 = v143 + 1;
      if (v143 + 1 == v141)
        goto LABEL_103;
    }
    v44 = 0;
    v45 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32);
    v142 = v45 + 72;
    v46 = v45 + 8;
    while (1)
    {
      v47 = *(_QWORD *)(v151 + 32);
      v152 = v47 + 656 * v44;
      if (*(_BYTE *)(v152 + 643))
      {
        if (*((_QWORD *)v43 + 10))
        {
          v48 = v47 + 656 * v44;
          v49 = *(_QWORD *)(v48 + 416);
          v50 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v49 ^ (v49 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v49 ^ (v49 >> 30))) >> 27));
          v51 = *(unsigned int *)(*((_QWORD *)v43 + 11) + 4 * ((v50 ^ (v50 >> 31)) % *((unsigned int *)v43 + 26)));
          if ((_DWORD)v51 != 0x7FFFFFFF)
          {
            v52 = *((_QWORD *)v43 + 12);
            while (*(_QWORD *)(v52 + (v51 << 6) + 16) != v49)
            {
              v51 = *(_DWORD *)(v52 + (v51 << 6) + 8) & 0x7FFFFFFF;
              if ((_DWORD)v51 == 0x7FFFFFFF)
                goto LABEL_101;
            }
            v53 = v47 + 656 * v44;
            if (*(float *)(v53 + 376) != 0.0)
            {
              v54 = v47 + 656 * v44;
              if (((*(_DWORD *)(v54 + 408) ^ *(_DWORD *)(v54 + 412)) & 0x10) == 0)
              {
                if (*(_QWORD *)(v152 + 8))
                  break;
              }
            }
          }
        }
      }
LABEL_101:
      if (++v44 >= v42)
        goto LABEL_102;
    }
    v132 = v40;
    v55 = 0;
    v168 = (char **)(v48 + 416);
    v147 = (float *)(v53 + 376);
    v158 = (_DWORD *)(v54 + 412);
    v159 = (_DWORD *)(v54 + 408);
    v56 = v47 + 656 * v44;
    v144 = (_BYTE *)(v56 + 560);
    v136 = v46;
    v137 = (_OWORD *)(v56 + 576);
    v139 = v56 + 16;
    v140 = (float32x4_t *)(v56 + 48);
    v155 = (_QWORD *)(v56 + 112);
    v156 = (unint64_t *)(v56 + 120);
    v157 = (_QWORD *)(v56 + 392);
    v160 = (unint64_t *)(v56 + 400);
    v161 = (_DWORD *)(v56 + 320);
    v149 = v44;
    v57 = (_QWORD *)v56;
    while (1)
    {
      v145 = v55;
      v58 = re::DataArray<re::MeshInstance>::get(v142, *(_QWORD *)(*v57 + 8 * (_QWORD)v55));
      v59 = (_OWORD *)v58;
      if (*v144)
      {
        v60 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 32) + 8;
        v61 = v169[9];
      }
      else
      {
        v61 = *(_QWORD *)(v58 + 16);
        v60 = v136;
      }
      v150 = re::DataArray<re::MeshModel>::get(v60, v61);
      v62 = 0;
      v63 = *v140;
      v64 = v140[1];
      v65 = v140[2];
      v66 = v140[3];
      v67 = v59[3];
      v68 = v59[4];
      v69 = v59[5];
      *(_OWORD *)v185 = v59[2];
      *(_OWORD *)&v185[16] = v67;
      *(_OWORD *)&v185[32] = v68;
      v186 = v69;
      do
      {
        *(float32x4_t *)&buf[v62] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(*(_OWORD *)&v185[v62])), v64, *(float32x2_t *)&v185[v62], 1), v65, *(float32x4_t *)&v185[v62], 2), v66, *(float32x4_t *)&v185[v62], 3);
        v62 += 16;
      }
      while (v62 != 64);
      v70 = *(float32x4_t *)buf;
      v71 = (float32x4_t)v188;
      v72 = (float32x4_t)v189;
      v73 = (float32x4_t)v190;
      this = v145;
      v43 = (float *)v169;
      if (*v144)
      {
        v74 = 0;
        v75 = v137[1];
        v76 = v137[2];
        v77 = v137[3];
        *(_OWORD *)v185 = *v137;
        *(_OWORD *)&v185[16] = v75;
        *(_OWORD *)&v185[32] = v76;
        v186 = v77;
        do
        {
          *(float32x4_t *)&buf[v74] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v70, COERCE_FLOAT(*(_OWORD *)&v185[v74])), v71, *(float32x2_t *)&v185[v74], 1), v72, *(float32x4_t *)&v185[v74], 2), v73, *(float32x4_t *)&v185[v74], 3);
          v74 += 16;
        }
        while (v74 != 64);
        v70 = *(float32x4_t *)buf;
        v71 = (float32x4_t)v188;
        v72 = (float32x4_t)v189;
        v73 = (float32x4_t)v190;
      }
      if (*(_QWORD *)v139 && (v78 = *(_QWORD *)(*(_QWORD *)v139 + 96)) != 0)
      {
        v6 = *(char **)(v78 + 8);
        if (v6 <= (char *)v145)
          goto LABEL_119;
        v146 = *(_QWORD *)(*(_QWORD *)(v78 + 16) + 24 * (_QWORD)v145 + 16);
        v148 = *(_QWORD *)(*(_QWORD *)(v78 + 16) + 24 * (_QWORD)v145 + 8);
      }
      else
      {
        v148 = 0;
        v146 = 0;
      }
      v79 = v150;
      if (*(_QWORD *)(v150 + 56))
        break;
LABEL_99:
      v55 = (const char **)((char *)v145 + 1);
      v57 = (_QWORD *)v152;
      if ((unint64_t)v145 + 1 >= *(_QWORD *)(v152 + 8))
      {
        v42 = *(_QWORD *)(v151 + 16);
        v40 = v132;
        v46 = v136;
        goto LABEL_101;
      }
    }
    v80 = 0;
    v164 = (__int128)v71;
    v165 = v70;
    v162 = (__int128)v73;
    v163 = (__int128)v72;
    while (2)
    {
      v153 = *(_QWORD *)(v79 + 64);
      v154 = v80;
      this = (const char **)qword_25411E4C0;
      v170 = v153 + 560 * v80;
      v81 = *(unsigned __int16 *)(v170 + 474);
      if (*v156 > v81)
      {
        v82 = *(_QWORD *)(*v155 + 8 * v81);
        v83 = atomic_load((unsigned __int8 *)&qword_25411E538);
        if ((v83 & 1) == 0)
        {
          v117 = __cxa_guard_acquire(&qword_25411E538);
          v43 = (float *)v169;
          if (v117)
          {
            MurmurHash3_x64_128((uint64_t)"Occlusion", 9, 0, (unint64_t *)buf);
            qword_25411E530 = (*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
            __cxa_guard_release(&qword_25411E538);
            v43 = (float *)v169;
          }
        }
        if (v82)
        {
          v84 = qword_25411E530;
          if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
            dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
          if (!re::MaterialParameterTable::tryGetPassTechniqueMapping((re::MaterialParameterTable *)(v82 + 224), v84, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
          {
            v85 = qword_25411E4D0;
            if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
              dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
            if (re::MaterialParameterTable::tryGetPassTechniqueMapping((re::MaterialParameterTable *)(v82 + 224), v85, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))
            {
              this = (const char **)qword_25411E4D0;
            }
            v43 = (float *)v169;
            break;
          }
LABEL_91:
          v80 = v154 + 1;
          v44 = v149;
          v79 = v150;
          v43 = (float *)v169;
          if (v154 + 1 >= *(_QWORD *)(v150 + 56))
            goto LABEL_99;
          continue;
        }
      }
      break;
    }
    if (v80 >= v148)
      v167 = 0;
    else
      v167 = *(_QWORD *)(v146 + 8 * v80);
    v6 = *v168;
    v86 = *((_QWORD *)v43 + 10);
    v87 = (unint64_t)*v168 ^ ((unint64_t)*v168 >> 30);
    if (v86)
    {
      v88 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v87) ^ ((0xBF58476D1CE4E5B9 * v87) >> 27));
      v89 = *((_QWORD *)v43 + 12);
      v90 = *(unsigned int *)(*((_QWORD *)v43 + 11) + 4 * ((v88 ^ (v88 >> 31)) % *((unsigned int *)v43 + 26)));
      if ((_DWORD)v90 != 0x7FFFFFFF)
      {
        while (*(char **)(v89 + (v90 << 6) + 16) != v6)
        {
          v90 = *(_DWORD *)(v89 + (v90 << 6) + 8) & 0x7FFFFFFF;
          if (v90 == 0x7FFFFFFF)
            goto LABEL_74;
        }
LABEL_75:
        v91 = v89 + (v90 << 6);
        if (!*(_QWORD *)(v91 + 40))
          goto LABEL_115;
        v44 = **(unsigned int **)(v91 + 56);
        v2 = (unsigned int *)*((_QWORD *)v43 + 7);
        if ((unint64_t)v2 <= v44)
          goto LABEL_116;
        v92 = *(float *)(*((_QWORD *)v43 + 8) + 4 * v44);
        v93 = v43;
        v94 = powf(*v147, v43[61]);
        if (v86
          && (v95 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v87) ^ ((0xBF58476D1CE4E5B9 * v87) >> 27)),
              v96 = *(unsigned int *)(*((_QWORD *)v93 + 11) + 4 * ((v95 ^ (v95 >> 31)) % *((unsigned int *)v93 + 26))),
              (_DWORD)v96 != 0x7FFFFFFF))
        {
          v115 = *(char **)(v89 + (v96 << 6) + 16);
          for (i = v96; v115 != v6; v96 = i)
          {
            i = *(_DWORD *)(v89 + (i << 6) + 8) & 0x7FFFFFFF;
            v96 = 0x7FFFFFFFLL;
            if (i == 0x7FFFFFFF)
              break;
            v115 = *(char **)(v89 + (i << 6) + 16);
          }
        }
        else
        {
          v96 = 0x7FFFFFFFLL;
        }
        v97 = v89 + (v96 << 6);
        v98 = *(_QWORD *)(v97 + 40);
        if (v98)
        {
          v99 = (unsigned __int16 *)(v170 + 474);
          v100 = v28 * (float)(v92 * v94);
          v2 = *(unsigned int **)(v97 + 56);
          v6 = (char *)(v153 + 560 * v80 + 544);
          v101 = 4 * v98;
          while (1)
          {
            v102 = (uint64_t)v24;
            v103 = (uint64_t *)v3;
            v44 = *v2;
            v104 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v166 + 32))(v166, 224, 16);
            v105 = v104;
            *(_OWORD *)(v104 + 128) = 0u;
            *(_OWORD *)(v104 + 144) = 0u;
            *(_OWORD *)(v104 + 160) = 0u;
            *(_OWORD *)(v104 + 176) = 0u;
            *(_OWORD *)(v104 + 192) = 0u;
            *(_OWORD *)(v104 + 208) = 0u;
            *(_OWORD *)(v104 + 96) = 0u;
            *(_OWORD *)(v104 + 112) = 0u;
            *(_OWORD *)(v104 + 64) = 0u;
            *(_OWORD *)(v104 + 80) = 0u;
            *(_OWORD *)(v104 + 32) = 0u;
            *(_OWORD *)(v104 + 48) = 0u;
            *(_OWORD *)v104 = 0u;
            *(_OWORD *)(v104 + 16) = 0u;
            *(_QWORD *)(v104 + 156) = _D9;
            *(float *)(v104 + 152) = v100;
            v106 = v169 + 2;
            if (this == (const char **)qword_25411E4D0)
            {
              v107 = *v99;
              v106 = v169 + 2;
              if (*v156 > v107)
                v106 = (_QWORD *)(*v155 + 8 * v107);
            }
            *(_QWORD *)(v104 + 40) = *v106;
            v3 = (re::RenderGraphContext *)v169[4];
            if ((unint64_t)v3 <= v44)
              break;
            *(_QWORD *)(v104 + 72) = *(_QWORD *)(v169[5] + 8 * v44);
            *(_DWORD *)(v104 + 120) = *v161;
            v108 = (unsigned int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v104, (uint64_t)this);
            if (!v109)
              goto LABEL_113;
            v44 = *v108;
            v3 = (re::RenderGraphContext *)((*(_DWORD *)v6 ^ *(_DWORD *)(*(_QWORD *)(v105 + 40) + 216)) & ~*(_DWORD *)(*(_QWORD *)(v105 + 40) + 220) | (*(_DWORD *)(*(_QWORD *)(v105 + 40) + 220) & *(_DWORD *)(*(_QWORD *)(v105 + 40) + 216)));
            v110 = *v160;
            if (*v160)
            {
              v111 = *v99;
              if (v110 <= v111)
                goto LABEL_114;
              v112 = re::MaterialRenderFlags::flattenToOverrideFlags((re::MaterialRenderFlags *)(*v157 + 18 * *v99));
              LODWORD(v3) = (v3 ^ v112) & ~HIDWORD(v112) | HIDWORD(v112) & v112;
            }
            v113 = (*v159 ^ v3) & ~*v158 | *v159 & *v158;
            *(_QWORD *)buf = *v168;
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)&v189 = 0;
            v188 = v170;
            *((_QWORD *)&v189 + 1) = v167;
            *(_QWORD *)&v190 = v105;
            *((_QWORD *)&v190 + 1) = 0xFFFF010000000000;
            *(float32x4_t *)v191 = v165;
            v192 = v164;
            v193 = v163;
            v194 = v162;
            v196 = 0;
            v195 = 0;
            *(_QWORD *)v198 = 0;
            *(_DWORD *)((char *)&v198[1] + 3) = 0;
            *(_QWORD *)&v198[3] = 0;
            *(_QWORD *)&v198[5] = 0;
            v199 = 0;
            v197 = v44;
            v200 = v113;
            v201 = 0x7FFFFFFF00000000;
            v202 = 0;
            v203 = 0xFFFFFFFFLL;
            v204 = 0;
            v205 = 0;
            v3 = (re::RenderGraphContext *)v103;
            v114 = *v103;
            v182 = 0;
            v183 = 0;
            v24 = (re::DrawTable *)v102;
            re::addDrawCall(v102, (uint64_t)buf, v114, 1u, (uint64_t)&v182);
            ++v2;
            v101 -= 4;
            if (!v101)
              goto LABEL_91;
          }
          v171[0] = 0;
          v190 = 0uLL;
          *(_OWORD *)v191 = 0uLL;
          v188 = 0uLL;
          v189 = 0uLL;
          *(_OWORD *)buf = 0uLL;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v185 = 136315906;
          *(_QWORD *)&v185[4] = "operator[]";
          *(_WORD *)&v185[12] = 1024;
          *(_DWORD *)&v185[14] = 476;
          *(_WORD *)&v185[18] = 2048;
          *(_QWORD *)&v185[20] = v44;
          *(_WORD *)&v185[28] = 2048;
          *(_QWORD *)&v185[30] = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_113:
          re::internal::assertLog((re::internal *)6, v109, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
          _os_crash();
          __break(1u);
LABEL_114:
          re::internal::assertLog((re::internal *)6, v109, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v111, v110);
          _os_crash();
          __break(1u);
LABEL_115:
          v171[0] = 0;
          v190 = 0u;
          *(_OWORD *)v191 = 0u;
          v188 = 0u;
          v189 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v185 = 136315906;
          *(_QWORD *)&v185[4] = "operator[]";
          *(_WORD *)&v185[12] = 1024;
          *(_DWORD *)&v185[14] = 797;
          *(_WORD *)&v185[18] = 2048;
          *(_QWORD *)&v185[20] = 0;
          *(_WORD *)&v185[28] = 2048;
          *(_QWORD *)&v185[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_116:
          v171[0] = 0;
          v190 = 0u;
          *(_OWORD *)v191 = 0u;
          v188 = 0u;
          v189 = 0u;
          *(_OWORD *)buf = 0u;
          v7 = (char *)MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v185 = 136315906;
          *(_QWORD *)&v185[4] = "operator[]";
          *(_WORD *)&v185[12] = 1024;
          *(_DWORD *)&v185[14] = 476;
          *(_WORD *)&v185[18] = 2048;
          *(_QWORD *)&v185[20] = v44;
          *(_WORD *)&v185[28] = 2048;
          *(_QWORD *)&v185[30] = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_117:
          v122 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)v3 + 1336), this[2], 0);
          v15 = (float *)v169;
          v138 = v122;
          goto LABEL_13;
        }
        goto LABEL_91;
      }
    }
    else
    {
      v89 = *((_QWORD *)v43 + 12);
    }
LABEL_74:
    v90 = 0x7FFFFFFFLL;
    goto LABEL_75;
  }
LABEL_109:
  if (*((_QWORD *)v24 + 5))
  {
    *(_OWORD *)buf = xmmword_2260E5F10;
    v188 = xmmword_2260E5F20;
    v189 = xmmword_2260E5F40;
    v190 = xmmword_2260E5D70;
    *(_OWORD *)v191 = xmmword_2260E5F10;
    v192 = xmmword_2260E5F20;
    v193 = xmmword_2260E5F40;
    v194 = xmmword_2260E5D70;
    re::DrawTableSlice::DrawTableSlice(v185, (uint64_t)v24);
    *((_BYTE *)v3 + 1512) = 1;
    v181 = 0;
    memset(v180, 0, sizeof(v180));
    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(v3, (uint64_t *)v180);
    v171[0] = v134;
    v171[1] = v185;
    v171[2] = buf;
    v171[3] = buf;
    v171[4] = 0;
    v172 = 513;
    v173 = 0;
    v174 = 0;
    v175 = 0u;
    v176 = 0u;
    v177 = 0;
    v178 = v138;
    v179 = 1;
    re::RenderGraphContext::encodeDrawCalls(v3, v180, v171);
    *((_BYTE *)v3 + 1512) = 0;
  }
}

_QWORD *re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderProjectiveMeshShadowPatchesNode *this, re::RenderGraphContext *a2)
{
  re::RenderGraphContext *v2;
  _QWORD *result;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 v13;
  char **v14;
  char v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  _QWORD *v25;
  uint64_t v26;
  int *v32;
  uint64_t v33;
  int v34;
  unsigned __int8 v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  const char **v40;
  const char *v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  _QWORD *v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  _BOOL4 v52;
  unsigned __int8 v53;
  unint64_t v54;
  size_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  re::DrawTable *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unsigned __int32 v63;
  uint64_t v64;
  re::RenderProjectiveMeshShadowPatchesNode *v65;
  unsigned __int8 v66;
  unint64_t v67;
  size_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t *v73;
  float32x4_t *v74;
  uint64_t v75;
  _BOOL4 v76;
  unint64_t v77;
  uint64_t v78;
  _anonymous_namespace_ *v79;
  uint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  re::MaterialParameterTableLayers *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  __int32 v105;
  __int32 v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  uint64_t v115;
  int *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  unsigned __int8 v127;
  int *v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  int *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  int v141;
  char v142;
  char v143;
  uint64_t v144;
  const char *v145;
  int v146;
  const char *v147;
  int v148;
  const char *v149;
  int v150;
  const char *v151;
  int v152;
  const char *v153;
  const char *v154;
  const char *v155;
  const char *v156;
  const char *v157;
  unint64_t v158;
  const char *v159;
  const char *v160;
  int v161;
  const char *v162;
  const char *v163;
  const char *v164;
  __guard *v165;
  const char *v166;
  const char *v167;
  const char *v168;
  const char *v169;
  const char *v170;
  char v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  const char **v180;
  const char **v181;
  re::Allocator *v182;
  re::RenderProjectiveMeshShadowPatchesNode *v183;
  _QWORD *v184;
  char *v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  float32x4_t *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _anonymous_namespace_ *v199;
  re::MaterialParameterTableLayers *v200;
  float32x4_t *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  char v214;
  __int128 v215;
  char v216;
  int v217;
  uint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  int v222;
  uint64_t v223;
  _BYTE v224[79];
  __int128 v225;
  char v226;
  uint64_t v227;
  char v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  _BYTE v240[11];
  uint64_t v241;
  uint64_t v242;
  __int16 v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[20];
  _BYTE v249[19];
  uint64_t v250;

  v2 = a2;
  v250 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)re::RenderGraphDataStore::tryGet<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (!result)
    return result;
  v5 = atomic_load((unsigned __int8 *)&qword_25411E548);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25411E548))
  {
    qword_25411E540 = re::hashString((re *)"ProjectiveMeshShadow", v157);
    __cxa_guard_release(&qword_25411E548);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_25411E558);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_25411E558))
  {
    qword_25411E550 = re::getCombinedScopeHash(qword_25411E540, v158, v159);
    __cxa_guard_release(&qword_25411E558);
  }
  v217 = 1;
  v7 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 88);
  if (!v7)
    goto LABEL_7;
  *(_QWORD *)&v229 = 0x8E55C4195E970258;
  *((_QWORD *)&v229 + 1) = "meshshadow:visualizeShadows";
  v224[0] = 0;
  if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v7, &v229, v224))
  {
    re::StringID::destroyString((re::StringID *)&v229);
LABEL_7:
    v179 = 0;
    goto LABEL_8;
  }
  v17 = v224[0];
  re::StringID::destroyString((re::StringID *)&v229);
  if (!v17)
    goto LABEL_7;
  v179 = 1;
LABEL_8:
  v8 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 88);
  if (!v8)
  {
LABEL_11:
    v171 = 1;
    goto LABEL_12;
  }
  *(_QWORD *)&v229 = 0xB54CABA028476570;
  *((_QWORD *)&v229 + 1) = "meshshadow:visualizeDepthPrepass";
  v224[0] = 0;
  if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v8, &v229, v224))
  {
    re::StringID::destroyString((re::StringID *)&v229);
    goto LABEL_11;
  }
  v18 = v224[0];
  re::StringID::destroyString((re::StringID *)&v229);
  if (!v18)
    goto LABEL_11;
  v171 = 0;
LABEL_12:
  v9 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 88);
  if (!v9)
  {
LABEL_15:
    v178 = 0;
    goto LABEL_16;
  }
  *(_QWORD *)&v229 = 0x8E55C417E7AA3440;
  *((_QWORD *)&v229 + 1) = "meshshadow:visualizeOverlap";
  v224[0] = 0;
  if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v9, &v229, v224))
  {
    re::StringID::destroyString((re::StringID *)&v229);
    goto LABEL_15;
  }
  v19 = v224[0];
  re::StringID::destroyString((re::StringID *)&v229);
  if (!v19)
    goto LABEL_15;
  v178 = 1;
LABEL_16:
  v10 = re::internal::shadows::g_enableMaxBlend != 0;
  v11 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 88);
  if (v11)
  {
    *(_QWORD *)&v229 = 0x8B008DEF08584B7ALL;
    *((_QWORD *)&v229 + 1) = "meshshadow:enableMaxBlend";
    v224[0] = 0;
    if (!re::DebugSettingsManager::getWithErrorCode<BOOL>(v11, &v229, v224))
      v10 = v224[0] != 0;
    re::StringID::destroyString((re::StringID *)&v229);
  }
  v187 = (uint64_t *)v2;
  v183 = this;
  if (!*((_BYTE *)this + 256))
  {
    v15 = !v10;
    if (!*((_BYTE *)this + 258))
      v15 = 1;
    if ((v15 & 1) != 0)
    {
      v12 = &qword_25411E690;
      v20 = atomic_load(algn_25411E698);
      if ((v20 & 1) != 0)
      {
        v14 = &re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::defaultPassName;
        goto LABEL_36;
      }
      if (!__cxa_guard_acquire((__guard *)algn_25411E698))
      {
        v14 = &re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::defaultPassName;
        goto LABEL_36;
      }
      qword_25411E690 = re::hashString((re *)"DrawMeshShadowPatchReceiver", v170);
      v165 = (__guard *)algn_25411E698;
      v14 = &re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::defaultPassName;
    }
    else
    {
      v12 = &qword_25411E680;
      v16 = atomic_load(algn_25411E688);
      if ((v16 & 1) != 0)
      {
        v14 = re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::maxBlendPassName;
        goto LABEL_36;
      }
      if (!__cxa_guard_acquire((__guard *)algn_25411E688))
      {
        v14 = re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::maxBlendPassName;
        goto LABEL_36;
      }
      qword_25411E680 = re::hashString((re *)"DrawMeshShadowPatchReceiverMaxBlend", v169);
      v165 = (__guard *)algn_25411E688;
      v14 = re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::maxBlendPassName;
    }
LABEL_191:
    __cxa_guard_release(v165);
    goto LABEL_36;
  }
  v12 = &qword_25411E670;
  v13 = atomic_load(algn_25411E678);
  if ((v13 & 1) == 0)
  {
    if (!__cxa_guard_acquire((__guard *)algn_25411E678))
    {
      v14 = re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::depthOnlyPassName;
      goto LABEL_36;
    }
    qword_25411E670 = re::hashString((re *)"PatchShadowReceiverDepthOnly", v164);
    v165 = (__guard *)algn_25411E678;
    v14 = re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::depthOnlyPassName;
    goto LABEL_191;
  }
  v14 = re::RenderProjectiveMeshShadowPatchesNode::execute(re::RenderGraphContext &)::$_4::operator() const(void)::depthOnlyPassName;
LABEL_36:
  v21 = *v12;
  v175 = *v14;
  v22 = atomic_load((unsigned __int8 *)&qword_25411E568);
  if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_25411E568))
  {
    qword_25411E560 = re::hashString((re *)"MeshShadowPatchReceiverDepthPrepass", v160);
    __cxa_guard_release(&qword_25411E568);
  }
  v23 = atomic_load((unsigned __int8 *)&qword_25411E578);
  if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_25411E578))
  {
    v161 = objc_msgSend(*(id *)(*((_QWORD *)v2 + 1) + 184), "supportsShaderBarycentricCoordinates");
    v162 = "MeshShadowPatchReceiverVisualizeDepthPrepass";
    if (v161)
      v162 = "MeshShadowPatchReceiverVisualizeDepthPrepassWithWireframe";
    qword_25411E570 = (uint64_t)v162;
    __cxa_guard_release(&qword_25411E578);
  }
  v24 = atomic_load((unsigned __int8 *)&qword_25411E588);
  if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_25411E588))
  {
    qword_25411E580 = re::hashString((re *)qword_25411E570, v163);
    __cxa_guard_release(&qword_25411E588);
  }
  result = (_QWORD *)re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowRenderingData>>(*((_QWORD *)v2 + 146), qword_25411E550);
  v25 = result;
  if (*((_BYTE *)v2 + 1332))
  {
LABEL_161:
    result = (_QWORD *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)v2 + 1336), *((const char **)this + 2), 0);
    v177 = (uint64_t)result;
    if (!v25)
      return result;
  }
  else
  {
    v177 = 0;
    if (!result)
      return result;
  }
  if (!*((_DWORD *)v25 + 5))
    return result;
  v182 = *(re::Allocator **)(*(_QWORD *)v2 + 24);
  v26 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v182 + 32))(v182, 224, 16);
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_OWORD *)(v26 + 48) = 0u;
  *(_OWORD *)(v26 + 64) = 0u;
  *(_OWORD *)(v26 + 80) = 0u;
  *(_OWORD *)(v26 + 96) = 0u;
  *(_OWORD *)(v26 + 112) = 0u;
  *(_OWORD *)(v26 + 128) = 0u;
  *(_OWORD *)(v26 + 144) = 0u;
  *(_OWORD *)(v26 + 160) = 0u;
  *(_OWORD *)(v26 + 176) = 0u;
  *(_OWORD *)(v26 + 192) = 0u;
  *(_OWORD *)(v26 + 208) = 0u;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v26 + 152) = _D0;
  *(_DWORD *)(v26 + 160) = 1065353216;
  *(_OWORD *)(v26 + 40) = *(_OWORD *)(v25 + 7);
  v200 = (re::MaterialParameterTableLayers *)v26;
  v32 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v26, v21);
  if (!v33)
  {
    re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_164;
  }
  v34 = *v32;
  v172 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 168);
  if (*((_BYTE *)v183 + 256) || *((_BYTE *)v183 + 257))
  {
    v35 = atomic_load((unsigned __int8 *)&qword_25411E598);
    if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_25411E598))
    {
      qword_25411E590 = re::hashString((re *)"SetStencilForBackgroundPixels", v168);
      __cxa_guard_release(&qword_25411E598);
    }
    re::RenderGraphContext::makeFullscreenDrawCall(v2, v25[7], 0, 0, 0, 0, (int32x2_t *)&v229);
    v36 = re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v233, qword_25411E590);
    if (v37)
    {
      HIDWORD(v231) = *v36;
      *((_BYTE *)v2 + 1512) = 1;
      v214 = 1;
      v215 = __const__ZN2re20FeatureStencilStates17getMeshShadowInfoENS0_15MeshShadowUsageE_kWriteStInfo;
      v216 = 0x80;
      re::encodeFullscreenDrawCall((re::DrawCall *)&v229, (uint64_t)"SetStencilForBackgroundPixels", v2, v177, 0, &v214, 0);
      *((_BYTE *)v2 + 1512) = 0;
      goto LABEL_48;
    }
LABEL_164:
    re::internal::assertLog((re::internal *)6, v37, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_165:
    re::internal::assertLog((re::internal *)6, v117, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_166:
    re::internal::assertLog((re::internal *)6, v129, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_167:
    re::internal::assertLog((re::internal *)6, v135, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
  }
LABEL_48:
  v173 = v34;
  v176 = re::RenderGraphDataStore::get<re::CameraMatrices>(*((_QWORD *)v2 + 146), *(_QWORD *)(*((_QWORD *)v2 + 5) + 48));
  v38 = atomic_load((unsigned __int8 *)&qword_25411E5A8);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_25411E5A8))
  {
    qword_25411E5A0 = re::getCombinedScopeHash((re *)"SceneArray", v166, v167);
    __cxa_guard_release(&qword_25411E5A8);
  }
  result = (_QWORD *)re::RenderGraphDataStore::tryGet<re::SceneArrayData>(*((_QWORD *)v2 + 146), qword_25411E5A0);
  v39 = result[3];
  if (v39)
  {
    v40 = (const char **)result[5];
    v180 = &v40[v39];
    while (1)
    {
      v41 = *v40;
      v42 = qword_25411E540;
      v43 = strlen(*v40);
      v44 = 0x9E3779B97F4A7C17;
      if (v43)
      {
        MurmurHash3_x64_128((uint64_t)v41, v43, 0, (unint64_t *)&v229);
        v44 = ((*((_QWORD *)&v229 + 1) - 0x61C8864680B583E9 + ((_QWORD)v229 << 6) + ((unint64_t)v229 >> 2)) ^ v229)
            - 0x61C8864680B583E9;
      }
      result = (_QWORD *)re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneRenderingData>>(*((_QWORD *)v2 + 146), ((v42 >> 2) + (v42 << 6) + v44) ^ v42);
      v184 = result;
      if (!result)
        goto LABEL_141;
      v45 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v182 + 32))(v182, 64, 8);
      *(_OWORD *)v45 = 0u;
      *(_OWORD *)(v45 + 16) = 0u;
      *(_OWORD *)(v45 + 32) = 0u;
      *(_OWORD *)(v45 + 48) = 0u;
      re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((_QWORD *)v45, (uint64_t)v182, 5);
      v46 = atomic_load((unsigned __int8 *)&qword_25411E5B8);
      if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_25411E5B8))
      {
        qword_25411E5B0 = re::hashString((re *)"MeshShadowUseFlatShadows", v145);
        __cxa_guard_release(&qword_25411E5B8);
      }
      v47 = atomic_load((unsigned __int8 *)&qword_25411E5C8);
      v48 = v184;
      if ((v47 & 1) == 0)
      {
        v146 = __cxa_guard_acquire(&qword_25411E5C8);
        v48 = v184;
        if (v146)
        {
          qword_25411E5C0 = re::hashString((re *)"ImmersionOption", v147);
          __cxa_guard_release(&qword_25411E5C8);
          v48 = v184;
        }
      }
      v49 = atomic_load((unsigned __int8 *)&qword_25411E5D8);
      if ((v49 & 1) == 0)
      {
        v148 = __cxa_guard_acquire(&qword_25411E5D8);
        v48 = v184;
        if (v148)
        {
          qword_25411E5D0 = re::hashString((re *)"MeshShadowRenderAsRGB", v149);
          __cxa_guard_release(&qword_25411E5D8);
          v48 = v184;
        }
      }
      v50 = atomic_load((unsigned __int8 *)&qword_25411E5E8);
      if ((v50 & 1) == 0)
      {
        v150 = __cxa_guard_acquire(&qword_25411E5E8);
        v48 = v184;
        if (v150)
        {
          qword_25411E5E0 = re::hashString((re *)"MeshShadowEnableFlatShadowMeshFallback", v151);
          __cxa_guard_release(&qword_25411E5E8);
          v48 = v184;
        }
      }
      v51 = atomic_load((unsigned __int8 *)&qword_25411E5F8);
      if ((v51 & 1) == 0)
      {
        v152 = __cxa_guard_acquire(&qword_25411E5F8);
        v48 = v184;
        if (v152)
        {
          qword_25411E5F0 = re::hashString((re *)"MeshShadowVisualizeOverlap", v153);
          __cxa_guard_release(&qword_25411E5F8);
          v48 = v184;
        }
      }
      if (re::internal::shadows::g_enableShadowFlattening)
        v52 = *((_BYTE *)v48 + 16) == 0;
      else
        v52 = 0;
      *(_QWORD *)&v229 = qword_25411E5B0;
      *(_DWORD *)v224 = v52;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)v45, &v229, (int *)v224);
      *(_QWORD *)&v229 = qword_25411E5C0;
      if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v45, &v229) == -1)re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::internalAdd((_anonymous_namespace_ *)v45, &v229, &v217);
      v181 = v40;
      *(_QWORD *)&v229 = qword_25411E5D0;
      *(_DWORD *)v224 = v179;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)v45, &v229, (int *)v224);
      *(_QWORD *)&v229 = qword_25411E5E0;
      *(_DWORD *)v224 = re::internal::shadows::g_enableMeshDepthFallbackWhenFlattening;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)v45, &v229, (int *)v224);
      *(_QWORD *)&v229 = qword_25411E5F0;
      *(_DWORD *)v224 = v178;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addNew((_anonymous_namespace_ *)v45, &v229, (int *)v224);
      v53 = atomic_load((unsigned __int8 *)&qword_25411E608);
      if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_25411E608))
      {
        qword_25411E600 = re::hashString((re *)"DynamicFunctionConstants", v154);
        __cxa_guard_release(&qword_25411E608);
      }
      v54 = qword_25411E600;
      v55 = strlen(*((const char **)v183 + 4));
      v56 = 0x9E3779B97F4A7C17;
      if (v55)
      {
        MurmurHash3_x64_128(*((_QWORD *)v183 + 4), v55, 0, (unint64_t *)&v229);
        v56 = ((*((_QWORD *)&v229 + 1) - 0x61C8864680B583E9 + ((_QWORD)v229 << 6) + ((unint64_t)v229 >> 2)) ^ v229)
            - 0x61C8864680B583E9;
      }
      v2 = (re::RenderGraphContext *)v187;
      v57 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(v187[146], ((v54 >> 2) + (v54 << 6) + v56) ^ v54);
      v58 = v57 + 8;
      if (!v57)
        v58 = 0;
      *((_QWORD *)v200 + 11) = v45;
      *((_QWORD *)v200 + 12) = v58;
      *((_QWORD *)v200 + 13) = 0;
      *((_BYTE *)v200 + 112) = 0;
      v59 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v182 + 32))(v182, 328, 8);
      re::DrawTable::DrawTable(v59, v182);
      if (!v52)
        break;
      v60 = *(_QWORD *)(v172 + 256);
      v61 = (*(_DWORD *)(v60 + 544) ^ *(_DWORD *)(*((_QWORD *)v200 + 5) + 216)) & ~*(_DWORD *)(*((_QWORD *)v200 + 5)
                                                                                               + 220) | *(_DWORD *)(*((_QWORD *)v200 + 5) + 220) & *(_DWORD *)(*((_QWORD *)v200 + 5) + 216);
      v229 = 0uLL;
      v231 = 0uLL;
      v230 = v60;
      *(_QWORD *)&v232 = v200;
      v233 = xmmword_2260E5F10;
      v234 = xmmword_2260E5F20;
      v235 = xmmword_2260E5F40;
      v236 = xmmword_2260E5D70;
      v238 = 0;
      *((_QWORD *)&v232 + 1) = 0xFFFF010000000000;
      v237 = 0;
      memset(v240, 0, sizeof(v240));
      v241 = 0;
      v242 = 0;
      v243 = 0;
      v239 = v173;
      LODWORD(v244) = v61;
      *(_QWORD *)((char *)&v244 + 4) = 0x7FFFFFFF00000000;
      HIDWORD(v244) = 0;
      v245 = 0xFFFFFFFFLL;
      v246 = 0;
      v247 = 0;
      v62 = *v187;
      v63 = *(unsigned __int8 *)(v176 + 128);
      v212 = 0;
      v213 = 0;
      v64 = re::addDrawCall((uint64_t)v59, (uint64_t)&v229, v62, v63, (uint64_t)&v212);
      *(_DWORD *)(v64 + 40) = *((_DWORD *)v184 + 2);
      *(_DWORD *)(v64 + 32) = *((_DWORD *)v184 + 3);
      v65 = v183;
LABEL_135:
      if (*((_BYTE *)v65 + 256) || *((_BYTE *)v65 + 257))
      {
        v142 = 0;
        *(_OWORD *)v248 = __const__ZN2re20FeatureStencilStates17getMeshShadowInfoENS0_15MeshShadowUsageE_kReadStInfo;
        v248[16] = 0x80;
        v143 = 1;
      }
      else
      {
        v143 = 0;
        v142 = 1;
      }
      re::DrawTableSlice::DrawTableSlice(&v229, (uint64_t)v59);
      *((_BYTE *)v2 + 1512) = 1;
      *(_QWORD *)v224 = v175;
      *(_QWORD *)&v224[8] = &v229;
      v144 = *(_QWORD *)(v176 + 80);
      *(_QWORD *)&v224[16] = *(_QWORD *)(v176 + 40);
      *(_QWORD *)&v224[24] = v144;
      *(_QWORD *)&v224[32] = 0;
      v224[40] = *(_BYTE *)(v176 + 128);
      *(_WORD *)&v224[41] = 0;
      v224[44] = 0;
      v224[45] = v143;
      if ((v142 & 1) == 0)
      {
        *(_OWORD *)&v224[46] = *(_OWORD *)v248;
        v224[62] = v248[16];
      }
      v226 = 0;
      *(_OWORD *)&v224[63] = 0u;
      v225 = 0u;
      v227 = v177;
      v228 = 0;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(v2, (uint64_t *)&v219);
      result = (_QWORD *)re::RenderGraphContext::encodeDrawCalls(v2, &v219, v224);
      *((_BYTE *)v2 + 1512) = 0;
LABEL_141:
      if (++v40 == v180)
        return result;
    }
    v66 = atomic_load((unsigned __int8 *)&qword_25411E618);
    if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_25411E618))
    {
      qword_25411E610 = re::hashString((re *)"MeshScenes", v155);
      __cxa_guard_release(&qword_25411E618);
    }
    v174 = (uint64_t)v59;
    v67 = qword_25411E610;
    v68 = strlen(v41);
    v69 = 0x9E3779B97F4A7C17;
    if (v68)
    {
      MurmurHash3_x64_128((uint64_t)v41, v68, 0, (unint64_t *)&v229);
      v69 = ((*((_QWORD *)&v229 + 1) - 0x61C8864680B583E9 + ((_QWORD)v229 << 6) + ((unint64_t)v229 >> 2)) ^ v229)
          - 0x61C8864680B583E9;
    }
    result = (_QWORD *)re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>>(v187[146], ((v67 >> 2) + (v67 << 6) + v69) ^ v67);
    if (!result)
      goto LABEL_141;
    this = (re::RenderProjectiveMeshShadowPatchesNode *)result;
    v220 = 0;
    v221 = 0;
    v222 = 0;
    v223 = 0;
    v219 = (uint64_t *)v182;
    re::DynamicArray<re::MeshPartDrawContext>::setCapacity(&v219, 0);
    ++v222;
    v186 = *((_QWORD *)this + 6);
    if (v186)
    {
      v70 = 0;
      v185 = (char *)this + 8;
      do
      {
        v188 = v70;
        v71 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[]((uint64_t)v185, v70);
        v72 = *(_QWORD *)(v71 + 16);
        if (v72)
        {
          v73 = *(float32x4_t **)(v71 + 32);
          v74 = &v73[41 * v72];
          v75 = *(_QWORD *)(v187[1] + 32);
          v191 = v75 + 72;
          v189 = v74;
          v190 = v75 + 8;
          do
          {
            if (v73[40].i8[4])
            {
              v201 = v73;
              v76 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)(v184 + 3), (uint64_t *)&v73[26]);
              v73 = v201;
              if (v76)
              {
                if (v201->i64[1])
                {
                  v77 = 0;
                  do
                  {
                    v192 = v77;
                    v78 = re::DataArray<re::MeshInstance>::get(v191, *(_QWORD *)(v73->i64[0] + 8 * v77));
                    v79 = (_anonymous_namespace_ *)re::DataArray<re::MeshModel>::get(v190, *(_QWORD *)(v78 + 16));
                    v73 = v201;
                    v80 = 0;
                    v81 = v201[3];
                    v82 = v201[4];
                    v83 = v201[5];
                    v84 = v201[6];
                    v85 = *(_OWORD *)(v78 + 48);
                    v86 = *(_OWORD *)(v78 + 64);
                    v87 = *(_OWORD *)(v78 + 80);
                    *(_OWORD *)v224 = *(_OWORD *)(v78 + 32);
                    *(_OWORD *)&v224[16] = v85;
                    *(_OWORD *)&v224[32] = v86;
                    *(_OWORD *)&v224[48] = v87;
                    do
                    {
                      *(__int128 *)((char *)&v229 + v80) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, COERCE_FLOAT(*(_OWORD *)&v224[v80])), v82, *(float32x2_t *)&v224[v80], 1), v83, *(float32x4_t *)&v224[v80], 2), v84, *(float32x4_t *)&v224[v80], 3);
                      v80 += 16;
                    }
                    while (v80 != 64);
                    v88 = v229;
                    v89 = v230;
                    v90 = v231;
                    v91 = v232;
                    v92 = v201[1].i64[0];
                    v93 = v200;
                    if (v92 && (v94 = *(_QWORD *)(v92 + 96)) != 0)
                    {
                      v95 = *(_QWORD *)(v94 + 8);
                      v25 = (_QWORD *)v192;
                      if (v95 <= v192)
                      {
                        v218 = 0;
                        v232 = 0u;
                        v233 = 0u;
                        v230 = 0u;
                        v231 = 0u;
                        v229 = 0u;
                        v21 = MEMORY[0x24BDACB70];
                        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v224 = 136315906;
                        *(_QWORD *)&v224[4] = "operator[]";
                        *(_WORD *)&v224[12] = 1024;
                        *(_DWORD *)&v224[14] = 468;
                        *(_WORD *)&v224[18] = 2048;
                        *(_QWORD *)&v224[20] = v192;
                        *(_WORD *)&v224[28] = 2048;
                        *(_QWORD *)&v224[30] = v95;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
                        goto LABEL_161;
                      }
                      v96 = *(_QWORD *)(v94 + 16) + 24 * v192;
                      v97 = *(_QWORD *)(v96 + 8);
                      v98 = *(_QWORD *)(v96 + 16);
                    }
                    else
                    {
                      v97 = 0;
                      v98 = 0;
                    }
                    if (*((_QWORD *)v79 + 7))
                    {
                      v99 = 0;
                      v100 = 544;
                      v199 = v79;
                      v197 = v230;
                      v198 = v229;
                      v195 = v232;
                      v196 = v231;
                      v193 = v98;
                      v194 = v97;
                      do
                      {
                        if (v99 >= v97)
                          v101 = 0;
                        else
                          v101 = *(_QWORD *)(v98 + 8 * v99);
                        v2 = (re::RenderGraphContext *)*((_QWORD *)v79 + 8);
                        v102 = *((_QWORD *)v93 + 5);
                        this = (re::RenderProjectiveMeshShadowPatchesNode *)*(unsigned int *)((char *)v2 + v100);
                        v103 = *(_DWORD *)(v102 + 216);
                        v104 = *(_DWORD *)(v102 + 220);
                        v105 = v73[25].i32[3];
                        v106 = v73[25].i32[2];
                        v107 = v73[26].i64[0];
                        memset(&v249[1], 0, 18);
                        *(_QWORD *)&v248[4] = 0;
                        *(_QWORD *)&v248[12] = 0;
                        v108 = v221;
                        if (v221 >= v220)
                        {
                          v109 = v221 + 1;
                          if (v220 < v221 + 1)
                          {
                            v202 = v101;
                            if (v219)
                            {
                              v110 = 2 * v220;
                              if (!v220)
                                v110 = 8;
                              if (v110 <= v109)
                                v111 = v221 + 1;
                              else
                                v111 = v110;
                              re::DynamicArray<re::MeshPartDrawContext>::setCapacity(&v219, v111);
                            }
                            else
                            {
                              re::DynamicArray<re::MeshPartDrawContext>::setCapacity(&v219, v109);
                              ++v222;
                            }
                            v93 = v200;
                            v79 = v199;
                            v73 = v201;
                            v101 = v202;
                            v89 = v197;
                            v88 = v198;
                            v91 = v195;
                            v90 = v196;
                            v98 = v193;
                            v97 = v194;
                          }
                          v108 = v221;
                        }
                        v112 = v223 + 224 * v108;
                        *(_QWORD *)v112 = v107;
                        *(_QWORD *)(v112 + 8) = 0;
                        *(_QWORD *)(v112 + 16) = (char *)v2 + v100 - 544;
                        *(_QWORD *)(v112 + 24) = 0;
                        *(_QWORD *)(v112 + 32) = 0;
                        *(_QWORD *)(v112 + 40) = v101;
                        *(_QWORD *)(v112 + 48) = v93;
                        *(_QWORD *)(v112 + 56) = 0xFFFF010000000000;
                        *(_OWORD *)(v112 + 64) = v88;
                        *(_OWORD *)(v112 + 80) = v89;
                        *(_OWORD *)(v112 + 96) = v90;
                        *(_OWORD *)(v112 + 112) = v91;
                        *(_QWORD *)(v112 + 128) = 0;
                        *(_QWORD *)(v112 + 136) = 0;
                        *(_DWORD *)(v112 + 144) = -1;
                        *(_QWORD *)(v112 + 148) = 0;
                        *(_DWORD *)(v112 + 155) = 0;
                        v113 = *(_OWORD *)v249;
                        *(_DWORD *)(v112 + 174) = *(_DWORD *)&v249[15];
                        *(_OWORD *)(v112 + 159) = v113;
                        *(_DWORD *)(v112 + 180) = (((this ^ v103) & ~v104 | v104 & v103) ^ v106) & ~v105 | v106 & v105;
                        *(_QWORD *)(v112 + 184) = 0x7FFFFFFF00000000;
                        *(_DWORD *)(v112 + 192) = 0;
                        *(_QWORD *)(v112 + 196) = 0xFFFFFFFFLL;
                        *(_OWORD *)(v112 + 204) = *(_OWORD *)v248;
                        *(_DWORD *)(v112 + 220) = *(_DWORD *)&v248[16];
                        v221 = v108 + 1;
                        ++v222;
                        ++v99;
                        v100 += 560;
                      }
                      while (v99 < *((_QWORD *)v79 + 7));
                    }
                    v77 = v192 + 1;
                  }
                  while (v192 + 1 < v73->i64[1]);
                }
              }
            }
            v73 += 41;
          }
          while (v73 != v189);
        }
        v70 = v188 + 1;
      }
      while (v188 + 1 != v186);
    }
    if (*((_BYTE *)v183 + 256))
    {
      v114 = v221;
      v115 = v223;
      v2 = (re::RenderGraphContext *)v187;
      v40 = v181;
    }
    else
    {
      v116 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices(v200, qword_25411E560);
      v2 = (re::RenderGraphContext *)v187;
      v40 = v181;
      if (!v117)
        goto LABEL_165;
      if (!v221)
        goto LABEL_121;
      v118 = 0;
      v119 = *v116;
      v115 = v223;
      v203 = v221;
      v120 = 224 * v221;
      do
      {
        v121 = *v187;
        v210 = 0;
        v211 = 0;
        v122 = (_DWORD *)re::addDrawCall(v174, v115 + v118, v121, 1u, (uint64_t)&v210);
        v123 = *((_DWORD *)v184 + 2);
        v122[8] = 1;
        v122[10] = v123;
        v122[11] = v119;
        v118 += 224;
      }
      while (v120 != v118);
      v114 = v203;
    }
    if (v114)
    {
      v124 = 224 * v114;
      do
      {
        v125 = *(_QWORD *)v2;
        v208 = 0;
        v209 = 0;
        v126 = (_DWORD *)re::addDrawCall(v174, v115, v125, 1u, (uint64_t)&v208);
        v126[10] = *((_DWORD *)v184 + 2);
        v126[8] = *((_DWORD *)v184 + 3);
        v126[11] = v173;
        v115 += 224;
        v124 -= 224;
      }
      while (v124);
    }
LABEL_121:
    if (!*((_BYTE *)v183 + 256))
    {
      v127 = atomic_load((unsigned __int8 *)&qword_25411E628);
      if ((v127 & 1) == 0 && __cxa_guard_acquire(&qword_25411E628))
      {
        qword_25411E620 = re::hashString((re *)"MeshShadowDepthClear", v156);
        __cxa_guard_release(&qword_25411E628);
      }
      v128 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices(v200, qword_25411E620);
      if (!v129)
        goto LABEL_166;
      v130 = *v128;
      v229 = 0uLL;
      v131 = *((_QWORD *)v2 + 187);
      v231 = 0uLL;
      v230 = v131;
      *(_QWORD *)&v232 = v200;
      v233 = xmmword_2260E5F10;
      v234 = xmmword_2260E5F20;
      v235 = xmmword_2260E5F40;
      v236 = xmmword_2260E5D70;
      v238 = 0;
      *((_QWORD *)&v232 + 1) = 0xFFFF010000000000;
      v237 = 0;
      v239 = v130;
      memset(v240, 0, sizeof(v240));
      v241 = 0;
      v242 = 0;
      v243 = 0;
      *(_QWORD *)&v244 = 25172350;
      *((_QWORD *)&v244 + 1) = 0x7FFFFFFFLL;
      v245 = 0xFFFFFFFFLL;
      v246 = 0;
      v247 = 0;
      v132 = *(_QWORD *)v2;
      v206 = 0;
      v207 = 0;
      re::addDrawCall(v174, (uint64_t)&v229, v132, 1u, (uint64_t)&v206);
      v133 = v171;
      if (*((_BYTE *)v183 + 256))
        v133 = 1;
      if ((v133 & 1) == 0)
      {
        v134 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices(v200, qword_25411E580);
        if (!v135)
          goto LABEL_167;
        if (v221)
        {
          v136 = *v134;
          v137 = v223;
          v138 = 224 * v221;
          do
          {
            v139 = *(_QWORD *)v2;
            v204 = 0;
            v205 = 0;
            v140 = (_DWORD *)re::addDrawCall(v174, v137, v139, 1u, (uint64_t)&v204);
            v141 = *((_DWORD *)v184 + 2);
            v140[8] = 1;
            v140[10] = v141;
            v140[11] = v136;
            v137 += 224;
            v138 -= 224;
          }
          while (v138);
        }
      }
    }
    if (v219 && v223)
      (*(void (**)(uint64_t *, uint64_t))(*v219 + 40))(v219, v223);
    v65 = v183;
    v59 = (re::DrawTable *)v174;
    goto LABEL_135;
  }
  return result;
}

uint64_t re::MeshShadowGenerateMipmapNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  uint64_t v5;
  void **ComputePipelineState;
  _BYTE v8[8];
  uint64_t v9;
  char v10;
  _QWORD v11[4];
  _QWORD v12[3];
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19[2];

  v5 = *((_QWORD *)a4 + 1);
  v19[0] = (uint64_t)this;
  v19[1] = v5;
  v8[0] = 0;
  re::DynamicString::DynamicString((re::DynamicString *)v11, (const re::DynamicString *)(this + 60));
  v14 = 0;
  memset(v12, 0, sizeof(v12));
  v13 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(v5, (uint64_t)v8);
  NS::SharedPtr<MTL::Texture>::operator=(this + 68, ComputePipelineState);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v12);
  if (v11[0])
  {
    if ((v11[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
    memset(v11, 0, sizeof(v11));
  }
  if (v8[0] && v9 && (v10 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v9 + 40))();
  re::MeshShadowGenerateMipmapNode::configure(char const*,char const*,re::RenderFrame &)::$_0::operator()(v19, 1u);
  return re::MeshShadowGenerateMipmapNode::configure(char const*,char const*,re::RenderFrame &)::$_0::operator()(v19, 0);
}

uint64_t re::MeshShadowGenerateMipmapNode::configure(char const*,char const*,re::RenderFrame &)::$_0::operator()(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  void **ComputePipelineState;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  char v19;
  _QWORD v20[4];
  _QWORD v21[3];
  int v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  _QWORD v29[2];

  v28 = a2;
  v4 = *a1;
  v17[0] = 0;
  v5 = re::DynamicString::DynamicString((re::DynamicString *)v20, (const re::DynamicString *)(v4 + 512));
  v23 = 0;
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  re::DynamicString::setCapacity(&v9, 0);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v29[0] = "MeshShadowMipDoReduction";
  v29[1] = 24;
  v6 = re::DynamicString::operator=((re::DynamicString *)&v9, (uint64_t)v29);
  v13 = 10289205;
  re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v21, (re::DynamicString *)&v9);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(a1[1], (uint64_t)v17);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v4 + 8 * a2 + 552), ComputePipelineState);
  if (v14)
  {
    if (v15)
    {
      (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v15 = 0;
      v16 = 0;
    }
    v14 = 0;
  }
  if (v9 && (v10 & 1) != 0)
    (*(void (**)(void))(*v9 + 40))();
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v21);
  result = v20[0];
  if (v20[0])
  {
    if ((v20[1] & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v20[0] + 40))();
    memset(v20, 0, sizeof(v20));
  }
  if (v17[0])
  {
    result = v18;
    if (v18)
    {
      if ((v19 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v18 + 40))();
    }
  }
  return result;
}

void re::MeshShadowGenerateMipmapNode::execute(id *this, re::RenderGraphContext *a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  uint64_t v6;
  float *v7;
  _BYTE *v8;
  id *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  const char *v56;
  const char *v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _DWORD *v63;
  float *v64;
  id *v65;
  re::RenderGraphContext *v66;
  id v67;
  uint64_t v68;
  int v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[28];
  __int16 v87;
  unint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load((unsigned __int8 *)&qword_25411E638);
  if ((v5 & 1) == 0)
    goto LABEL_44;
  while (1)
  {
    v6 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowGenerationData>>(*((_QWORD *)a2 + 146), qword_25411E630);
    if (!v6)
      break;
    v7 = (float *)v6;
    v8 = v86;
    v9 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
    re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v9, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v76);
    if (!this[24])
      goto LABEL_41;
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this[26], 0, 0, &v75);
    v2 = (unint64_t)this[24];
    if (v2 <= 1)
      goto LABEL_42;
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this[26] + 32, 0, 0, &v74);
    if (this[19])
    {
      v66 = a2;
      v67 = *(id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this[21]);
      if (!*((_QWORD *)v7 + 54))
      {
LABEL_32:
        if (v67)

        if (v74)
        if (v75)

        return;
      }
      v10 = 0;
      v61 = 208;
      v64 = v7;
      v65 = this;
      while (1)
      {
        v2 = *((_QWORD *)v7 + 21);
        if (v2 <= v10)
          break;
        v60 = v10;
        v69 = *(unsigned __int16 *)(*((_QWORD *)v7 + 56) + 32 * v10 + 24);
        v11 = *((_QWORD *)v7 + 22);
        if ((unint64_t)objc_msgSend(v75, sel_mipmapLevelCount) >= 2)
        {
          v68 = v11 + 928 * v60;
          v63 = (_DWORD *)(v68 + 912);
          v62 = (_QWORD *)(v11 + v61);
          v12 = 1;
          do
          {
            v13 = (uint64_t *)(v68 + 224 * v12);
            v14 = v75;
            v15 = objc_msgSend(v75, sel_pixelFormat, v58, v59);
            v16 = objc_msgSend(v75, sel_textureType);
            v71 = objc_msgSend(v14, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v15, v16, v12 - 1, 1, 0, objc_msgSend(v75, sel_arrayLength));
            v17 = v75;
            v18 = objc_msgSend(v75, (SEL)0x24EDB7E48);
            v19 = objc_msgSend(v75, sel_textureType);
            v20 = objc_msgSend(v17, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v18, v19, v12, 1, 0, objc_msgSend(v75, sel_arrayLength));
            v21 = v74;
            v22 = objc_msgSend(v74, (SEL)0x24EDB7E48);
            v23 = objc_msgSend(v74, (SEL)&classRef_REAudioPlaybackHostingService);
            v24 = objc_msgSend(v21, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v22, v23, v12 - 1, 1, 0, objc_msgSend(v74, sel_arrayLength));
            v25 = v74;
            v26 = objc_msgSend(v74, sel_pixelFormat);
            v27 = objc_msgSend(v74, (SEL)&classRef_REAudioPlaybackHostingService);
            v28 = objc_msgSend(v25, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v26, v27, v12, 1, 0, objc_msgSend(v74, sel_arrayLength));
            objc_msgSend(v76, "setTexture:atIndex:", v71, 0);
            objc_msgSend(v76, "setTexture:atIndex:", v24, 1);
            v70 = v20;
            v29 = v20;
            this = v65;
            objc_msgSend(v76, "setTexture:atIndex:", v29, 2);
            objc_msgSend(v76, "setTexture:atIndex:", v28, 3);
            objc_msgSend(v76, "setTexture:atIndex:", v75, 4);
            objc_msgSend(v76, "setTexture:atIndex:", v74, 5);
            objc_msgSend(v76, "setBuffer:offset:atIndex:", v67, 0, 1);
            objc_msgSend(v76, "setComputePipelineState:", v65[68]);
            v30 = (unint64_t)sqrt((double)(unint64_t)objc_msgSend(v65[68], sel_maxTotalThreadsPerThreadgroup));
            v31 = v13[2];
            WORD5(v80) = WORD2(v31);
            WORD4(v80) = v31;
            v32 = v13[3];
            HIWORD(v80) = WORD2(v32);
            WORD6(v80) = v32;
            v33 = *v13;
            WORD1(v80) = WORD2(*v13);
            LOWORD(v80) = v33;
            v34 = v13 + 1;
            v35 = v13[1];
            WORD3(v80) = WORD2(v35);
            WORD2(v80) = v35;
            LODWORD(v35) = *((_DWORD *)v13 + 8);
            HIDWORD(v35) = *((_DWORD *)v13 + 13);
            *(_QWORD *)&v81 = v35;
            *((_QWORD *)&v81 + 1) = v13[8];
            LODWORD(v35) = *((_DWORD *)v13 + 20);
            HIDWORD(v35) = *((_DWORD *)v13 + 25);
            *(_QWORD *)&v82 = v35;
            *((_QWORD *)&v82 + 1) = v13[14];
            LODWORD(v83) = v69;
            objc_msgSend(v76, "setBytes:length:atIndex:", &v80, 56, 0);
            v36 = *((_QWORD *)v66 + 1);
            v73 = v76;
            re::RenderManager::sampleComputeEncoderMTLCounterBegin(v36, &v73, 1u);

            v37 = (v30 - 1 + (*((_DWORD *)v13 + 6) - *((_DWORD *)v13 + 4))) / v30;
            if (v37 <= 1)
              v37 = 1;
            else
              v37 = v37;
            v38 = (v30 - 1 + (*((_DWORD *)v13 + 7) - *((_DWORD *)v13 + 5))) / v30;
            if (v38 <= 1)
              v38 = 1;
            else
              v38 = v38;
            *(_QWORD *)v86 = v37;
            *(_QWORD *)&v86[8] = v38;
            *(_QWORD *)&v86[16] = 1;
            v77 = v30;
            v78 = v30;
            v79 = 1;
            objc_msgSend(v76, "dispatchThreadgroups:threadsPerThreadgroup:", v86, &v77);
            v39 = *((_QWORD *)v66 + 1);
            v72 = v76;
            re::RenderManager::sampleComputeEncoderMTLCounterEnd(v39, &v72, 1u);

            if ((char *)objc_msgSend(v75, sel_mipmapLevelCount) - 1 == (_BYTE *)v12)
            {
              LODWORD(v40) = *v63;
              objc_msgSend(v76, "setComputePipelineState:", v65[69], v40);
              v41 = (unint64_t)sqrt((double)(unint64_t)objc_msgSend(v65[69], sel_maxTotalThreadsPerThreadgroup));
              v42 = HIDWORD(*v13);
              v43 = *v13;
              v44 = (v41 - 1 + (*v34 - v43)) / v41;
              v45 = (v41 - 1 + (*(_DWORD *)(v68 + 224 * v12 + 12) - v42)) / v41;
              LODWORD(v80) = v69;
              WORD3(v80) = v42;
              WORD2(v80) = v43;
              v46 = *(_QWORD *)v34;
              WORD5(v80) = WORD2(*(_QWORD *)v34);
              WORD4(v80) = v46;
              HIWORD(v80) = v45;
              WORD6(v80) = v44;
              LOWORD(v81) = (unsigned __int16)objc_msgSend(v75, sel_mipmapLevelCount);
              v47 = *(float *)(v68 + 904) / v64[68];
              *((float *)&v81 + 1) = v47 * (float)((unint64_t)objc_msgSend(v75, sel_mipmapLevelCount) - 1);
              DWORD2(v81) = *(_DWORD *)(v68 + 908);
              LOWORD(v82) = (unsigned __int16)objc_msgSend(v75, sel_width);
              HIDWORD(v81) = *v63;
              if (objc_msgSend(v75, sel_mipmapLevelCount))
              {
                v48 = 0;
                this = (id *)&v85;
                v49 = v62;
                do
                {
                  v50 = *(v49 - 10);
                  v51 = *(v49 - 9);
                  v52 = (void *)*(v49 - 6);
                  v53 = (void *)*(v49 - 5);
                  LODWORD(v54) = *((_DWORD *)v49 - 8);
                  HIDWORD(v54) = *((_DWORD *)v49 - 3);
                  v55 = (void *)*v49;
                  v49 += 28;
                  *((_DWORD *)this - 10) = v48;
                  *((_WORD *)this - 17) = WORD2(v50);
                  *((_WORD *)this - 18) = v50;
                  *((_WORD *)this - 15) = WORD2(v51);
                  *((_WORD *)this - 16) = v51;
                  *(this - 3) = v52;
                  *(this - 2) = v53;
                  *(this - 1) = v54;
                  *this = v55;
                  ++v48;
                  this += 6;
                }
                while ((unint64_t)objc_msgSend(v75, sel_mipmapLevelCount) > v48);
              }
              objc_msgSend(v76, "setBytes:length:atIndex:", &v80, 520, 0);
              objc_msgSend(v76, "setThreadgroupMemoryLength:atIndex:", (4 * v41 * v41 * v44 * v45 + 15) & 0xFFFFFFFFFFFFFFF0, 0);
              *(int64x2_t *)v86 = vdupq_n_s64(1uLL);
              *(_QWORD *)&v86[16] = 1;
              v77 = v41;
              v78 = v41;
              v79 = 1;
              objc_msgSend(v76, "dispatchThreadgroups:threadsPerThreadgroup:", v86, &v77);
            }
            if (v28)

            if (v24)
            if (v70)

            if (v71)
            ++v12;
          }
          while ((unint64_t)objc_msgSend(v75, sel_mipmapLevelCount) > v12);
        }
        v10 = v60 + 1;
        v7 = v64;
        v61 += 928;
        if (*((_QWORD *)v64 + 54) <= v60 + 1)
          goto LABEL_32;
      }
      v77 = 0;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      v8 = (_BYTE *)v10;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v86 = 136315906;
      *(_QWORD *)&v86[4] = "operator[]";
      *(_WORD *)&v86[12] = 1024;
      *(_DWORD *)&v86[14] = 476;
      *(_WORD *)&v86[18] = 2048;
      *(_QWORD *)&v86[20] = v8;
      v87 = 2048;
      v88 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      v77 = 0;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v86 = 136315906;
      *(_QWORD *)(v8 + 4) = "operator[]";
      *(_WORD *)&v86[12] = 1024;
      *(_DWORD *)(v8 + 14) = 789;
      *(_WORD *)&v86[18] = 2048;
      *(_QWORD *)(v8 + 20) = 0;
      v87 = 2048;
      *(_QWORD *)(v8 + 30) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      v77 = 0;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v86 = 136315906;
      *(_QWORD *)(v8 + 4) = "operator[]";
      *(_WORD *)&v86[12] = 1024;
      *(_DWORD *)(v8 + 14) = 789;
      *(_WORD *)&v86[18] = 2048;
      *(_QWORD *)(v8 + 20) = 1;
      v87 = 2048;
      *(_QWORD *)(v8 + 30) = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v77 = 0;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v80 = 0u;
    a2 = (re::RenderGraphContext *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v86 = 136315906;
    *(_QWORD *)(v8 + 4) = "operator[]";
    *(_WORD *)&v86[12] = 1024;
    *(_DWORD *)(v8 + 14) = 789;
    *(_WORD *)&v86[18] = 2048;
    *(_QWORD *)(v8 + 20) = 0;
    v87 = 2048;
    *(_QWORD *)(v8 + 30) = 0;
    LODWORD(v59) = 38;
    v58 = v86;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_44:
    if (__cxa_guard_acquire(&qword_25411E638))
    {
      qword_25411E630 = re::getCombinedScopeHash((re *)"ProjectiveMeshShadow", v56, v57);
      __cxa_guard_release(&qword_25411E638);
    }
  }
}

void re::MeshShadowGenerateFinalTextureNode::execute(re::MeshShadowGenerateFinalTextureNode *this, re::RenderGraphContext *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  int v15;
  id v16;
  id v17;
  _QWORD v18[3];
  _QWORD v19[3];

  v4 = atomic_load((unsigned __int8 *)&qword_25411E648);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411E648))
  {
    qword_25411E640 = re::getCombinedScopeHash((re *)"ProjectiveMeshShadow", v13, v14);
    __cxa_guard_release(&qword_25411E648);
  }
  v5 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowGenerationData>>(*((_QWORD *)a2 + 146), qword_25411E640);
  if (v5)
  {
    v6 = v5;
    v7 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
    re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v7, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v17);
    v16 = v17;
    re::RenderGraphComputeNodeBase::setTexturesAndBuffersOnEncoders(this, (uint64_t)a2, &v16);

    objc_msgSend(v17, "setComputePipelineState:", *((_QWORD *)this + 59));
    v8 = objc_msgSend(*((id *)this + 59), sel_maxTotalThreadsPerThreadgroup);
    if (*(_QWORD *)(v6 + 432))
    {
      v9 = 0;
      v10 = (unint64_t)sqrt((double)(unint64_t)v8);
      v11 = 24;
      do
      {
        v15 = *(unsigned __int16 *)(*(_QWORD *)(v6 + 448) + v11);
        objc_msgSend(v17, "setBytes:length:atIndex:", &v15, 4, 0);
        v12 = (v10 - 1 + *(unsigned int *)(v6 + 200)) / v10;
        if (v12 <= 1)
          v12 = 1;
        else
          v12 = v12;
        v19[0] = v12;
        v19[1] = v12;
        v19[2] = 1;
        v18[0] = v10;
        v18[1] = v10;
        v18[2] = 1;
        objc_msgSend(v17, "dispatchThreadgroups:threadsPerThreadgroup:", v19, v18);
        ++v9;
        v11 += 32;
      }
      while (*(_QWORD *)(v6 + 432) > v9);
    }

  }
}

void **re::ProjectiveMeshShadowBlurNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v8[2];

  v5 = 0;
  v6 = *((_QWORD *)a4 + 1);
  v8[0] = (uint64_t)this;
  v8[1] = v6;
  do
  {
    re::ProjectiveMeshShadowBlurNode::configure(char const*,char const*,re::RenderFrame &)::$_0::operator()(v8, 1u, v5);
    re::ProjectiveMeshShadowBlurNode::configure(char const*,char const*,re::RenderFrame &)::$_0::operator()(v8, 0, v5++);
  }
  while (v5 != 11);
  return NS::SharedPtr<MTL::Texture>::operator=(this + 59, this + 82);
}

uint64_t re::ProjectiveMeshShadowBlurNode::configure(char const*,char const*,re::RenderFrame &)::$_0::operator()(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  void **ComputePipelineState;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[8];
  uint64_t v30;
  char v31;
  _QWORD v32[4];
  _QWORD v33[3];
  int v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  _QWORD v41[2];

  v40 = a2;
  v6 = *a1;
  v29[0] = 0;
  v7 = re::DynamicString::DynamicString((re::DynamicString *)v32, (const re::DynamicString *)(v6 + 280));
  v35 = 0;
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  re::DynamicString::setCapacity(&v21, 0);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v13 = (uint64_t *)"MeshShadowEnableBilateralFilter";
  v14 = 31;
  v8 = re::DynamicString::operator=((re::DynamicString *)&v21, (uint64_t)&v13);
  v25 = 10158133;
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v33, (re::DynamicString *)&v21);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  re::DynamicString::setCapacity(&v13, 0);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v41[0] = "MeshShadowBlurRadius";
  v41[1] = 20;
  v10 = re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v41);
  v17 = 10223645;
  *v20 = a3;
  re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v33, (re::DynamicString *)&v13);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(a1[1], (uint64_t)v29);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v6 + 88 * a2 + 8 * a3 + 488), ComputePipelineState);
  if (v18)
  {
    if (v19)
    {
      (*(void (**)(void))(*(_QWORD *)v18 + 40))();
      v19 = 0;
      v20 = 0;
    }
    v18 = 0;
  }
  if (v13 && (v14 & 1) != 0)
    (*(void (**)(void))(*v13 + 40))();
  if (v26)
  {
    if (v27)
    {
      (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v27 = 0;
      v28 = 0;
    }
    v26 = 0;
  }
  if (v21 && (v22 & 1) != 0)
    (*(void (**)(void))(*v21 + 40))();
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v33);
  result = v32[0];
  if (v32[0])
  {
    if ((v32[1] & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v32[0] + 40))();
    memset(v32, 0, sizeof(v32));
  }
  if (v29[0])
  {
    result = v30;
    if (v30)
    {
      if ((v31 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v30 + 40))();
    }
  }
  return result;
}

void re::ProjectiveMeshShadowBlurNode::execute(re::ProjectiveMeshShadowBlurNode *this, re::RenderGraphContext *a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  id *v8;
  _BOOL4 v9;
  id v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x2_t *v16;
  int32x2_t v17;
  int32x2_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  int v31;
  int v32;
  float v33;
  unsigned int v34;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  unsigned __int32 v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  _BYTE *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  char *v70;
  void **v71;
  re::RenderGraphContext *v72;
  id v73;
  float *v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  re::ProjectiveMeshShadowBlurNode *v80;
  int32x2_t v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  _QWORD v89[3];
  _BYTE v90[28];
  __int16 v91;
  re::ProjectiveMeshShadowBlurNode *v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load((unsigned __int8 *)&qword_25411E658);
  if ((v5 & 1) == 0)
    goto LABEL_64;
  while (1)
  {
    v6 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowGenerationData>>(*((_QWORD *)a2 + 146), qword_25411E650);
    if (!v6)
      break;
    v7 = (_QWORD *)v6;
    v8 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
    re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v8, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v88);
    v9 = re::internal::shadows::g_enableShadowFlattening == 0;
    v71 = (void **)((char *)this + 472);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 59, (void **)this + 11 * (re::internal::shadows::g_enableShadowFlattening == 0) + 71);
    objc_msgSend(v88, "setComputePipelineState:", *((_QWORD *)this + 59));
    v10 = objc_msgSend(*((id *)this + 59), sel_maxTotalThreadsPerThreadgroup);
    v87 = v88;
    re::RenderGraphComputeNodeBase::setTexturesAndBuffersOnEncoders(this, (uint64_t)a2, &v87);

    if (!*((_QWORD *)this + 24))
      goto LABEL_60;
    re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 26), 0, 0, &v86);
    v2 = *((_QWORD *)this + 24);
    if (v2 <= 1)
      goto LABEL_61;
    re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 26) + 32, 0, 0, &v85);
    if (!*((_QWORD *)this + 29))
      goto LABEL_62;
    re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 31), 0, 0, &v84);
    if (*((_QWORD *)this + 14))
    {
      v80 = this;
      v73 = *(id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, *((_QWORD *)this + 16));
      v11 = objc_msgSend(v86, sel_mipmapLevelCount);
      v12 = v7[54];
      if (!v12)
      {
LABEL_49:
        if (v73)

        if (v84)
        if (v85)

        if (v86)
        return;
      }
      v13 = 0;
      v2 = (unint64_t)sqrt((double)(unint64_t)v10);
      v78 = v11;
      v70 = (char *)this + 88 * v9;
      v79 = 10;
      v68 = v7;
      v72 = a2;
      while (1)
      {
        this = (re::ProjectiveMeshShadowBlurNode *)v7[21];
        if ((unint64_t)this <= v13)
          break;
        if (v78)
        {
          v14 = 0;
          v77 = *(unsigned __int16 *)(v7[56] + 32 * v13 + 24);
          v15 = v7[22] + 928 * v13;
          v69 = v13;
          v75 = (unsigned int *)(v15 + 900);
          v76 = v15;
          v74 = (float *)(v15 + 896);
          do
          {
            v16 = (int32x2_t *)(v76 + 224 * v14);
            v17 = v16[2];
            v18 = v16[3];
            v19 = *v75;
            if (v19 >= 0xA)
              v20 = 10;
            else
              v20 = v19;
            if (v79 != v20)
            {
              NS::SharedPtr<MTL::Texture>::operator=(v71, (void **)&v70[8 * v20 + 488]);
              objc_msgSend(v88, "setComputePipelineState:", *((_QWORD *)v80 + 59));
              v2 = (unint64_t)sqrt((double)(unint64_t)objc_msgSend(*((id *)v80 + 59), sel_maxTotalThreadsPerThreadgroup));
              v79 = v20;
            }
            v21 = 0;
            v81 = vsub_s32(v18, v17);
            *(_QWORD *)&v93 = 25152;
            *((int32x2_t *)&v93 + 1) = v17;
            *(int32x2_t *)&v94 = v18;
            *((_QWORD *)&v94 + 1) = __PAIR64__(v14, v77);
            memset(v95, 0, 24);
            v22 = *v74;
            v23 = *v74 * 0.70711;
            do
            {
              if (v22 >= 0.7)
              {
                _S0 = expf((float)-(v21 * v21) / (float)(v22 * (float)(v22 + v22)));
              }
              else
              {
                v24 = erff((float)((float)(int)v21 + -0.5) / v23);
                _S0 = (float)(erff((float)((float)(int)v21 + 0.5) / v23) - v24) * 0.5;
              }
              __asm { FCVT            H0, S0 }
              *((_WORD *)v95 + v21++) = _H0;
            }
            while ((_DWORD)v20 + 1 != v21);
            v31 = -(int)v20;
            v32 = (2 * v20) | 1;
            v33 = 0.0;
            do
            {
              if (v31 >= 0)
                v34 = v31;
              else
                v34 = -v31;
              _H1 = *((_WORD *)v95 + v34);
              __asm { FCVT            S1, H1 }
              v33 = v33 + _S1;
              ++v31;
              --v32;
            }
            while (v32);
            v37 = 0;
            v38 = 10;
            if (v19 < 0xA)
              v38 = v19;
            v39 = 2 * v38 + 2;
            do
            {
              _H1 = *(_WORD *)((char *)v95 + v37);
              __asm { FCVT            S1, H1 }
              _S1 = _S1 / v33;
              __asm { FCVT            H1, S1 }
              *(_WORD *)((char *)v95 + v37) = LOWORD(_S1);
              v37 += 2;
            }
            while (v39 != v37);
            v43 = v86;
            v44 = objc_msgSend(v86, sel_pixelFormat);
            v45 = objc_msgSend(v86, sel_textureType);
            v46 = objc_msgSend(v43, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v44, v45, v14, 1, 0, objc_msgSend(v86, sel_arrayLength));
            v47 = v85;
            v48 = objc_msgSend(v85, sel_pixelFormat);
            v49 = objc_msgSend(v85, sel_textureType);
            v50 = objc_msgSend(v47, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v48, v49, v14, 1, 0, objc_msgSend(v85, sel_arrayLength));
            v51 = v84;
            v52 = objc_msgSend(v84, sel_pixelFormat);
            v53 = objc_msgSend(v84, sel_textureType);
            v54 = objc_msgSend(v51, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, v52, v53, v14, 1, 0, objc_msgSend(v86, sel_arrayLength));
            objc_msgSend(v88, "setTexture:atIndex:", v46, 0);
            objc_msgSend(v88, "setTexture:atIndex:", v50, 1);
            objc_msgSend(v88, "setTexture:atIndex:", v54, 2);
            objc_msgSend(v88, "setTexture:atIndex:", v84, 3);
            objc_msgSend(v88, "setBuffer:offset:atIndex:", v73, 0, 1);
            objc_msgSend(v88, "setBytes:length:atIndex:", &v93, 56, 0);
            if (*((_DWORD *)v80 + 120))
            {
              v55 = v2 - 1;
              v56 = v2 - 1 + v81.u32[0];
              v57 = (unsigned __int32)v81.i32[1] >> 1;
            }
            else
            {
              v57 = v81.u32[1];
              v55 = v2 - 1;
              v56 = v2 - 1 + ((unsigned __int32)v81.i32[0] >> 1);
            }
            a2 = v72;
            v58 = v56 / v2;
            v59 = *((_QWORD *)v72 + 1);
            v60 = (v55 + v57) / v2;
            v83 = v88;
            re::RenderManager::sampleComputeEncoderMTLCounterBegin(v59, &v83, 1u);

            if (v58 <= 1)
              v61 = 1;
            else
              v61 = v58;
            if (v60 <= 1)
              v62 = 1;
            else
              v62 = v60;
            *(_QWORD *)v90 = v61;
            *(_QWORD *)&v90[8] = v62;
            *(_QWORD *)&v90[16] = 1;
            v89[0] = v2;
            v89[1] = v2;
            v89[2] = 1;
            objc_msgSend(v88, "dispatchThreadgroups:threadsPerThreadgroup:", v90, v89, v66, v67);
            v63 = *((_QWORD *)v72 + 1);
            v82 = v88;
            re::RenderManager::sampleComputeEncoderMTLCounterEnd(v63, &v82, 1u);

            if (v54)
            if (v50)

            if (v46)
            ++v14;
          }
          while (v14 != v78);
          v7 = v68;
          v13 = v69;
          v12 = v68[54];
        }
        if (v12 <= ++v13)
          goto LABEL_49;
      }
      v89[0] = 0;
      v96 = 0u;
      v94 = 0u;
      memset(v95, 0, sizeof(v95));
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 476;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = v13;
      v91 = 2048;
      v92 = this;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_60:
      v89[0] = 0;
      v96 = 0u;
      v94 = 0u;
      memset(v95, 0, sizeof(v95));
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 789;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = 0;
      v91 = 2048;
      v92 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_61:
      v89[0] = 0;
      v96 = 0u;
      v94 = 0u;
      memset(v95, 0, sizeof(v95));
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 789;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = 1;
      v91 = 2048;
      v92 = (re::ProjectiveMeshShadowBlurNode *)v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_62:
      v89[0] = 0;
      v96 = 0u;
      v94 = 0u;
      memset(v95, 0, sizeof(v95));
      v93 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136315906;
      *(_QWORD *)&v90[4] = "operator[]";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 789;
      *(_WORD *)&v90[18] = 2048;
      *(_QWORD *)&v90[20] = 0;
      v91 = 2048;
      v92 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v89[0] = 0;
    v96 = 0u;
    v94 = 0u;
    memset(v95, 0, sizeof(v95));
    v93 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v90 = 136315906;
    *(_QWORD *)&v90[4] = "operator[]";
    *(_WORD *)&v90[12] = 1024;
    *(_DWORD *)&v90[14] = 789;
    *(_WORD *)&v90[18] = 2048;
    *(_QWORD *)&v90[20] = 0;
    v91 = 2048;
    v92 = 0;
    LODWORD(v67) = 38;
    v66 = v90;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    if (__cxa_guard_acquire(&qword_25411E658))
    {
      qword_25411E650 = re::getCombinedScopeHash((re *)"ProjectiveMeshShadow", v64, v65);
      __cxa_guard_release(&qword_25411E658);
    }
  }
}

uint64_t *re::allocInfo_RenderProjectiveMeshShadowPatchesNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411E660);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411E660))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E6C0, 0);
    *(uint64_t *)((char *)&qword_25411E6D0 + 6) = 0;
    qword_25411E6D0 = 0;
    qword_25411E6E0 = 0;
    qword_25411E6E8 = 0xFFFFFFFFLL;
    qword_25411E6C0 = (uint64_t)&off_24ED7DAA8;
    qword_25411E6F0 = (uint64_t)"RenderProjectiveMeshShadowPatchesNode";
    dword_25411E6F8 = 0;
    xmmword_25411E700 = 0u;
    unk_25411E710 = 0u;
    xmmword_25411E720 = 0u;
    qword_25411E730 = 0;
    __cxa_guard_release(&qword_25411E660);
  }
  return &qword_25411E6C0;
}

void re::initInfo_RenderProjectiveMeshShadowPatchesNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0x86836557EB7BBFECLL;
  v22[1] = "RenderProjectiveMeshShadowPatchesNode";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E668);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E668);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E6A0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "depthOnly";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411E6A8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "disableRenderOverContent";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10100000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411E6B0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "useMaxBlend";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x10200000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411E6B8 = v20;
      __cxa_guard_release(&qword_25411E668);
    }
  }
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411E6A0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderProjectiveMeshShadowPatchesNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderProjectiveMeshShadowPatchesNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderProjectiveMeshShadowPatchesNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderProjectiveMeshShadowPatchesNode>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderProjectiveMeshShadowPatchesNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED805D8;
  *((_WORD *)result + 128) = 0;
  *((_BYTE *)result + 258) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderProjectiveMeshShadowPatchesNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderProjectiveMeshShadowPatchesNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED805D8;
  *((_WORD *)result + 128) = 0;
  *((_BYTE *)result + 258) = 0;
  return result;
}

uint64_t re::introspect_RenderProjectiveMeshShadowPatchesNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderProjectiveMeshShadowPatchesNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderProjectiveMeshShadowPatchesNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderProjectiveMeshShadowPatchesNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderProjectiveMeshShadowPatchesNode>, this);
}

void re::CopyShadowTextureNode::~CopyShadowTextureNode(re::CopyShadowTextureNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::GenerateTiledShadowDepthPrepassMapNode::~GenerateTiledShadowDepthPrepassMapNode(re::GenerateTiledShadowDepthPrepassMapNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::GenerateProjectiveMeshShadowMapNode::~GenerateProjectiveMeshShadowMapNode(re::GenerateProjectiveMeshShadowMapNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderProjectiveMeshShadowPatchesNode::~RenderProjectiveMeshShadowPatchesNode(re::RenderProjectiveMeshShadowPatchesNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::MeshShadowGenerateMipmapNode::~MeshShadowGenerateMipmapNode(re::MeshShadowGenerateMipmapNode *this)
{
  uint64_t i;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_24ED80680;
  for (i = 560; i != 544; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
  v4 = (void *)*((_QWORD *)this + 68);
  if (v4)
  {

    *((_QWORD *)this + 68) = 0;
  }
  v5 = *((_QWORD *)this + 64);
  if (v5)
  {
    if ((*((_BYTE *)this + 520) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 66));
    *((_OWORD *)this + 32) = 0u;
    *((_OWORD *)this + 33) = 0u;
  }
  v6 = *((_QWORD *)this + 60);
  if (v6)
  {
    if ((*((_BYTE *)this + 488) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 62));
    *((_OWORD *)this + 30) = 0u;
    *((_OWORD *)this + 31) = 0u;
  }
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
}

{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_24ED80680;
  v2 = 560;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 544)
    {
      v4 = (void *)*((_QWORD *)this + 68);
      if (v4)
      {

        *((_QWORD *)this + 68) = 0;
      }
      v5 = *((_QWORD *)this + 64);
      if (v5)
      {
        if ((*((_BYTE *)this + 520) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 66));
        *((_OWORD *)this + 32) = 0u;
        *((_OWORD *)this + 33) = 0u;
      }
      v6 = *((_QWORD *)this + 60);
      if (v6)
      {
        if ((*((_BYTE *)this + 488) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 62));
        *((_OWORD *)this + 30) = 0u;
        *((_OWORD *)this + 31) = 0u;
      }
      re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
      JUMPOUT(0x2276933B8);
    }
  }
}

uint64_t re::RenderGraphComputeNode::getGraphBuildValidationCode(re::RenderGraphComputeNode *this)
{
  return 0x1398425203831E0ELL;
}

uint64_t re::RenderGraphComputeNodeBase::skipNode(re::RenderGraphComputeNodeBase *this, re::RenderGraphContext *a2)
{
  return 0;
}

void re::MeshShadowGenerateFinalTextureNode::~MeshShadowGenerateFinalTextureNode(re::MeshShadowGenerateFinalTextureNode *this)
{
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
  JUMPOUT(0x2276933B8);
}

void re::ProjectiveMeshShadowBlurNode::~ProjectiveMeshShadowBlurNode(re::ProjectiveMeshShadowBlurNode *this)
{
  uint64_t i;
  void *v3;

  *(_QWORD *)this = &off_24ED80800;
  for (i = 656; i != 480; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24ED80800;
  v2 = 656;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 480)
    {
      re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
      JUMPOUT(0x2276933B8);
    }
  }
}

re::DrawTable *re::DrawTable::DrawTable(re::DrawTable *this, re::Allocator *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  re::BucketArray<re::DrawCall,128ul>::init((uint64_t)this, (uint64_t)a2, 0);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 1;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  re::BucketArray<re::Matrix4x4<float>,128ul>::init((uint64_t)this + 56, (uint64_t)a2, 0);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 1;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 40) = 0;
  re::BucketArray<re::ConstantTable const*,128ul>::init((uint64_t)this + 112, (uint64_t)a2, 0);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  re::BucketArray<float,128ul>::init((uint64_t)this + 168, (uint64_t)a2, 0);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = 1;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 68) = 0;
  re::BucketArray<unsigned int,128ul>::init((uint64_t)this + 224, (uint64_t)a2, 0);
  *((_BYTE *)this + 320) = 1;
  return this;
}

_QWORD *re::DrawTableSlice::DrawTableSlice(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 40);
  if ((*(_DWORD *)(a2 + 16) & 1) != 0)
    v2 = a2 + 24;
  v4 = *(_QWORD *)(a2 + 8);
  *result = v2;
  result[1] = v4;
  result[2] = v3;
  v5 = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a2 + 96);
  if ((*(_DWORD *)(a2 + 72) & 1) != 0)
    v5 = a2 + 80;
  v7 = *(_QWORD *)(a2 + 64);
  result[3] = v5;
  result[4] = v7;
  result[5] = v6;
  v8 = *(_QWORD *)(a2 + 144);
  v9 = *(_QWORD *)(a2 + 152);
  if ((*(_DWORD *)(a2 + 128) & 1) != 0)
    v8 = a2 + 136;
  v10 = *(_QWORD *)(a2 + 120);
  result[6] = v8;
  result[7] = v10;
  result[8] = v9;
  v11 = *(_QWORD *)(a2 + 200);
  v12 = *(_QWORD *)(a2 + 208);
  if ((*(_DWORD *)(a2 + 184) & 1) != 0)
    v11 = a2 + 192;
  v13 = *(_QWORD *)(a2 + 176);
  result[9] = v11;
  result[10] = v13;
  result[11] = v12;
  v14 = *(_QWORD *)(a2 + 256);
  v15 = *(_QWORD *)(a2 + 264);
  if ((*(_DWORD *)(a2 + 240) & 1) != 0)
    v14 = a2 + 248;
  v16 = *(_QWORD *)(a2 + 232);
  result[12] = v14;
  result[13] = v16;
  result[14] = v15;
  return result;
}

_BYTE *re::FixedArray<unsigned char>::init<BOOL const&>(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  _BYTE *result;
  uint64_t v6;

  *a1 = a2;
  a1[1] = 1;
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 1, 1);
  a1[2] = result;
  if (result)
  {
    *result = *a3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_BYTE *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(re::RenderGraphComputeNodeBase *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED80970;
  v2 = (void *)*((_QWORD *)this + 59);
  if (v2)
  {

    *((_QWORD *)this + 59) = 0;
  }
  v3 = *((_QWORD *)this + 54);
  if (v3)
  {
    if (*((_QWORD *)this + 58))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 58) = 0;
    *((_QWORD *)this + 55) = 0;
    *((_QWORD *)this + 56) = 0;
    *((_QWORD *)this + 54) = 0;
    ++*((_DWORD *)this + 114);
  }
  v4 = *((_QWORD *)this + 35);
  if (v4)
  {
    if ((*((_BYTE *)this + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 37));
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_OWORD *)((char *)this + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphComputeNodeBase *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
}

uint64_t re::RenderGraphDataStore::tryGet<re::SceneArrayData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re14SceneArrayDataE";
  if (((unint64_t)"N2re14SceneArrayDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re14SceneArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowGenerationData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_24MeshShadowGenerationDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_24MeshShadowGenerationDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_24MeshShadowGenerationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

_QWORD *re::DynamicArray<re::MeshPartDrawContext>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0xE0uLL))
        {
          v2 = 224 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 224 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::MeshPartDrawContext>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::BucketArray<re::MeshSceneCollection,16ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 4)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 4)) + 40 * (a2 & 0xF);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 4)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 4)) + 40 * (a2 & 0xF);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowRenderingData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::get<re::CameraMatrices>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  if ((v4 & 1) == 0
  {
    re::introspect<re::CameraMatrices>(void)::info = (_UNKNOWN *)re::introspect_CameraMatrices(0);
  }
  v5 = strlen(*((const char **)re::introspect<re::CameraMatrices>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraMatrices>(void)::info + 6), v5, 0, v12);
    v6 = (v12[1] - 0x61C8864680B583E9 + (v12[0] << 6) + (v12[0] >> 2)) ^ v12[0];
  }
  else
  {
    v6 = 0;
  }
  v7 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v8 = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)));
    if (v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(a1 + 80);
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v10 + 24 * v9 + 8) != v8)
      {
        while (1)
        {
          v7 = *(_DWORD *)(v10 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v7 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v10 + 24 * v7 + 8) == v8)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v7 + 16);
        }
        v7 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v7 + 16);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneRenderingData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_31MeshShadowPerSceneRenderingDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_31MeshShadowPerSceneRenderingDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_31MeshShadowPerSceneRenderingDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

_QWORD *re::VRRUnwarpProvider::VRRUnwarpProvider(_QWORD *a1, const re::DynamicString *a2)
{
  _anonymous_namespace_ *v3;
  _OWORD v5[2];

  re::DynamicString::DynamicString((re::DynamicString *)v5, a2);
  *a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)v5);
  v3 = *(_anonymous_namespace_ **)&v5[0];
  if (*(_QWORD *)&v5[0])
  {
    if ((BYTE8(v5[0]) & 1) != 0)
      v3 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v5[0] + 40))();
    memset(v5, 0, sizeof(v5));
  }
  *a1 = &off_24ED808D8;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  a1[12] = 65290051;
  a1[13] = "Color";
  return a1;
}

void re::VRRUnwarpProvider::~VRRUnwarpProvider(re::VRRUnwarpProvider *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v3 = (_OWORD *)((char *)this + 64);
  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    if ((*((_BYTE *)this + 72) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 10));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::AssetHandle::~AssetHandle((re::VRRUnwarpProvider *)((char *)this + 40));
  *(_QWORD *)this = off_24ED381E0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  re::VRRUnwarpProvider::~VRRUnwarpProvider(this);
  JUMPOUT(0x2276933B8);
}

unint64_t re::VRRUnwarpProvider::prepareFrame(re::VRRUnwarpProvider *this, char *__s, const char *a3, re::RenderFrame *a4)
{
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  unint64_t ScopeHash;
  re::PerFrameAllocatorGPU *v24;
  unsigned int v25;
  unsigned int v26;
  _BOOL4 v27;
  id v28;
  void *v29;
  uint64_t v30;
  char v31;
  const char *v32;
  int v33;
  uint64_t v34;
  char v35;
  const char *v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  unint64_t v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  id v59;
  unint64_t v60;
  _BYTE v61[18];
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  uint8_t buf[16];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v8 = strlen(__s);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)__s, v8, 0, (unint64_t *)buf);
    v9 = (*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
  }
  else
  {
    v9 = 0;
  }
  v10 = strlen(a3);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a3, v10, 0, (unint64_t *)buf);
    v11 = ((*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf)
        - 0x61C8864680B583E9;
  }
  else
  {
    v11 = 0x9E3779B97F4A7C17;
  }
  v12 = ((v9 >> 2) + (v9 << 6) + v11) ^ v9;
  v13 = re::RenderGraphDataStore::tryGet<re::CameraData>((uint64_t)a4 + 32, v12);
  v14 = re::RenderGraphDataStore::tryGet<re::VRRData>((uint64_t)a4 + 32, v12);
  if (!v13)
    return 0;
  v15 = !*(_BYTE *)(v13 + 461) || v14 == 0;
  if (v15 || !*(_BYTE *)(v14 + 12))
    return 0;
  v16 = *(unsigned int *)(v14 + 8);
  v17 = *((_QWORD *)a4 + 506);
  if (v17 <= v16)
  {
    v59 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v61 = 136315906;
    *(_QWORD *)&v61[4] = "operator[]";
    *(_WORD *)&v61[12] = 1024;
    *(_DWORD *)&v61[14] = 797;
    v62 = 2048;
    v63 = v16;
    v64 = 2048;
    v65 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v18 = *((_QWORD *)a4 + 508);
  if (!*(_QWORD *)(v18 + 8 * v16))
  {
    v21 = *re::graphicsLogObjects((re *)v14);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "Could not get valid ratemap in Unwarp provider", buf, 2u);
    }
    return 0;
  }
  *(_QWORD *)v61 = 0;
  *(_QWORD *)&v61[8] = 0;
  v19 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 104);
  if (v19)
    v20 = *(_QWORD *)(v19 + 336);
  else
    v20 = 0;
  v24 = (re::PerFrameAllocatorGPU *)re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(v20, *((_QWORD *)a4 + 46));
  re::PerFrameAllocatorGPU::allocInternal(v24, (unint64_t)objc_msgSend(*(id *)(v18 + 8 * v16), sel_parameterBufferSizeAndAlign), 0x10uLL, 0, buf);
  v25 = v67;
  LODWORD(v24) = *(_DWORD *)&buf[8];
  v59 = **((id **)&v67 + 1);
  v60 = __PAIR64__(v25, v24);
  NS::SharedPtr<MTL::Texture>::operator=((void **)v61, &v59);
  v26 = v60;
  *(_QWORD *)&v61[8] = v60;
  if (v59)
  {

    v26 = *(_DWORD *)&v61[8];
  }
  objc_msgSend(*(id *)(v18 + 8 * v16), sel_copyParameterDataToBuffer_offset_, *(_QWORD *)v61, v26);
  v27 = re::ConstStringID::operator==((_QWORD *)this + 12, re::RenderFrame::kColorOutputLaneID);
  v28 = *(id *)v61;
  v29 = v28;
  if (v27)
  {
    v58[0] = v28;
    v58[1] = *(_QWORD *)&v61[8];
    *(_QWORD *)buf = 0x4F06877B79D47715;
    if (a3)
    {
      v30 = *a3;
      if (*a3)
      {
        v31 = a3[1];
        if (v31)
        {
          v32 = a3 + 2;
          do
          {
            v30 = 31 * v30 + v31;
            v33 = *(unsigned __int8 *)v32++;
            v31 = v33;
          }
          while (v33);
        }
        v30 &= ~0x8000000000000000;
      }
    }
    else
    {
      v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v59 = (id)v30;
    v38 = v58;
  }
  else
  {
    v57[0] = v28;
    v57[1] = *(_QWORD *)&v61[8];
    *(_QWORD *)buf = 0x4F06877B79D47716;
    if (a3)
    {
      v34 = *a3;
      if (*a3)
      {
        v35 = a3[1];
        if (v35)
        {
          v36 = a3 + 2;
          do
          {
            v34 = 31 * v34 + v35;
            v37 = *(unsigned __int8 *)v36++;
            v35 = v37;
          }
          while (v37);
        }
        v34 &= ~0x8000000000000000;
      }
    }
    else
    {
      v34 = 0x7FFFFFFFFFFFFFFFLL;
    }
    v59 = (id)v34;
    v38 = v57;
  }
  re::RenderFrame::registerExternalBuffer((uint64_t)a4, (uint64_t)v38, buf, &v59, 0);
  if (v29)

  v39 = (unint64_t)"N2re13VRRUnwarpDataE";
  if (((unint64_t)"N2re13VRRUnwarpDataE" & 0x8000000000000000) != 0)
  {
    v40 = (unsigned __int8 *)((unint64_t)"N2re13VRRUnwarpDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v41 = 5381;
    do
    {
      v39 = v41;
      v42 = *v40++;
      v41 = (33 * v41) ^ v42;
    }
    while (v42);
  }
  v43 = (v12 - 0x61C8864680B583E9 + (v39 << 6) + (v39 >> 2)) ^ v39;
  v44 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a4 + 5) + 32))(*((_QWORD *)a4 + 5), 16, 8);
  v44[1] = 0;
  v45 = *((_QWORD *)a4 + 12);
  *v44 = &off_24ED80948;
  if (!v45
    || (v45 = v43 % *((unsigned int *)a4 + 30),
        v46 = *(unsigned int *)(*((_QWORD *)a4 + 13) + 4 * v45),
        (_DWORD)v46 == 0x7FFFFFFF))
  {
LABEL_48:
    v47 = *((unsigned int *)a4 + 33);
    if ((_DWORD)v47 == 0x7FFFFFFF)
    {
      v47 = *((unsigned int *)a4 + 32);
      v48 = v47;
      if ((_DWORD)v47 == *((_DWORD *)a4 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)a4 + 96, 2 * *((_DWORD *)a4 + 31));
        LODWORD(v45) = v43 % *((unsigned int *)a4 + 30);
        v48 = *((_DWORD *)a4 + 32);
      }
      *((_DWORD *)a4 + 32) = v48 + 1;
      v49 = *((_QWORD *)a4 + 14);
      v50 = *(_DWORD *)(v49 + 24 * v47);
    }
    else
    {
      v49 = *((_QWORD *)a4 + 14);
      v50 = *(_DWORD *)(v49 + 24 * v47);
      *((_DWORD *)a4 + 33) = v50 & 0x7FFFFFFF;
    }
    v51 = 24 * v47;
    *(_DWORD *)(v49 + v51) = v50 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)a4 + 14) + v51) = *(_DWORD *)(*((_QWORD *)a4 + 14) + 24 * v47) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * v45);
    *(_QWORD *)(*((_QWORD *)a4 + 14) + 24 * v47 + 8) = v43;
    *(_QWORD *)(*((_QWORD *)a4 + 14) + 24 * v47 + 16) = v44;
    *(_DWORD *)(*((_QWORD *)a4 + 13) + 4 * v45) = v47;
    ++*((_DWORD *)a4 + 31);
    ++*((_DWORD *)a4 + 34);
    v52 = *((_QWORD *)a4 + 14) + 24 * v47;
    goto LABEL_58;
  }
  v53 = *((_QWORD *)a4 + 14);
  while (*(_QWORD *)(v53 + 24 * v46 + 8) != v43)
  {
    LODWORD(v46) = *(_DWORD *)(v53 + 24 * v46) & 0x7FFFFFFF;
    if ((_DWORD)v46 == 0x7FFFFFFF)
      goto LABEL_48;
  }
  v52 = v53 + 24 * v46;
LABEL_58:
  v54 = *(_QWORD *)(v52 + 16);
  *(_WORD *)(v54 + 8) = 0;
  if ((unint64_t)objc_msgSend(*(id *)(v18 + 8 * v16), sel_layerCount) > 1)
    v55 = 1;
  else
    v55 = 255;
  *(_WORD *)(v54 + 10) = v55;
  v56[0] = 0x2988A88C0AE16068;
  v56[1] = (unint64_t)"VRRUnwarpProvider";
  ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v56, __s, a3);
  if (*(_QWORD *)v61)

  return ScopeHash;
}

BOOL re::ConstStringID::operator==(_QWORD *a1, _QWORD *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int v4;
  unsigned __int8 *v5;
  int v7;

  if (*a1 == *a2)
  {
    v2 = (_BYTE *)a1[1];
    v3 = (_BYTE *)a2[1];
    v4 = *v2;
    if (!*v2)
      return *v3 == 0;
    v5 = v2 + 1;
    while (*v3 && v4 == *v3)
    {
      ++v3;
      v7 = *v5++;
      v4 = v7;
      if (!v7)
        return *v3 == 0;
    }
  }
  return 0;
}

void re::VRRUnwarpProvider::provide(re::VRRUnwarpProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  const char *v8;
  re *v9;
  NSObject *v11;
  uint64_t v12;
  re *RenderGraph;
  uint64_t v19;
  char v20;
  const char *v21;
  int v22;
  uint64_t v23;
  char v24;
  const char *v25;
  int v26;
  uint64_t v27;
  re::RenderGraphNode *v28;
  __int128 v29;
  uint64_t v30[2];
  char v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint8_t buf[8];
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  char v48;
  __int128 v49;
  __int128 v50;

  if ((*((_BYTE *)this + 72) & 1) != 0)
    v8 = (const char *)*((_QWORD *)this + 10);
  else
    v8 = (char *)this + 73;
  re::RenderFrame::tryGetInputTarget(a4, v8, 0, (double *)&v49);
  if (DWORD2(v49) == -1 || HIDWORD(v49) == -1)
  {
    v11 = *re::graphicsLogObjects(v9);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Could not get input color in Unwarp provider", buf, 2u);
    }
  }
  else
  {
    v12 = 0xBC9C7D0DAB09280ELL;
    RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, a3, 0);
    v41 = -1;
    v40 = -1;
    v39 = -1;
    v42 = 0;
    v44 = xmmword_226135530;
    v45 = xmmword_226135540;
    v46 = -1;
    v47 = xmmword_2260FF4D0;
    v48 = 0;
    *(_QWORD *)buf = 0x7300000003;
    v38 = 3;
    __asm { FMOV            V0.2S, #1.0 }
    v43 = _D0;
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)buf, "UnwarpedTarget", &v36);
    v30[0] = *((_QWORD *)this + 12) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::addTargetOutput(a4, v30, (double *)&v36, 0);
    v30[1] = -1;
    v31 = 0;
    v32 = 1065353216;
    v33 = 0xFFFFFFFF00000020;
    v34 = -1;
    LODWORD(v30[0]) = 2;
    if (re::ConstStringID::operator==((_QWORD *)this + 12, re::RenderFrame::kColorOutputLaneID))
    {
      if (a3)
      {
        v19 = *a3;
        if (*a3)
        {
          v20 = a3[1];
          if (v20)
          {
            v21 = a3 + 2;
            do
            {
              v19 = 31 * v19 + v20;
              v22 = *(unsigned __int8 *)v21++;
              v20 = v22;
            }
            while (v22);
          }
          v12 = ((v19 & 0x7FFFFFFFFFFFFFFFLL) + 0x739AFA76D2DD5F1CLL) ^ 0x4F06877B79D47715;
        }
        else
        {
          v12 = 0x3C9C7D0DAB092809;
        }
      }
      *(_QWORD *)&v50 = 0x9E0D0EF6F3A8EE2ALL;
      *((_QWORD *)&v50 + 1) = "UnwarpRateMapBuffer0";
      v35 = v12;
    }
    else
    {
      if (a3)
      {
        v23 = *a3;
        if (*a3)
        {
          v24 = a3[1];
          if (v24)
          {
            v25 = a3 + 2;
            do
            {
              v23 = 31 * v23 + v24;
              v26 = *(unsigned __int8 *)v25++;
              v24 = v26;
            }
            while (v26);
          }
          v27 = ((v23 & 0x7FFFFFFFFFFFFFFFLL) + 0x739AFA76D2DD5F5CLL) ^ 0x4F06877B79D47716;
        }
        else
        {
          v27 = 0x3C9C7D0DAB09284ALL;
        }
      }
      else
      {
        v27 = 0xBC9C7D0DAB09284DLL;
      }
      *(_QWORD *)&v50 = 0x9E0D0EF6F3A8EE2CLL;
      *((_QWORD *)&v50 + 1) = "UnwarpRateMapBuffer1";
      v35 = v27;
    }
    re::StringID::destroyString((re::StringID *)&v50);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)v30, "RateMapBuffer", &v50);
    v28 = re::RenderGraph::addNode<re::RenderGraphVRRUnwarpNode>(RenderGraph, "Unwarp node");
    v29 = v36;
    *((_OWORD *)v28 + 16) = v49;
    *((_OWORD *)v28 + 17) = v29;
    *((_OWORD *)v28 + 18) = v50;
    re::AssetHandle::operator=((uint64_t *)v28 + 38, (uint64_t *)this + 5);
    re::RenderGraphVRRUnwarpNode::configure((void **)v28, a2, a3, a4);
  }
}

void re::VRRUnwarpData::~VRRUnwarpData(re::VRRUnwarpData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler::prepareTexturesForFrame(re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void **v11;
  void *v12;
  void **v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;

  v2 = *((_QWORD *)this + 5);
  v3 = *(unsigned int *)(v2 + 176);
  v4 = *(unsigned int *)(v2 + 180);
  re::mtl::makeDefaultDevice(&v19);
  v5 = (void *)MEMORY[0x24BDDD740];
  v6 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v6, sel_setStorageMode_, 2);
  objc_msgSend(v6, sel_setPixelFormat_, 115);
  objc_msgSend(v6, sel_setWidth_, v3);
  objc_msgSend(v6, sel_setHeight_, v4);
  objc_msgSend(v6, sel_setUsage_, 3);

  v7 = *((_QWORD *)this + 5);
  v8 = *(unsigned int *)(v7 + 176);
  v9 = *(unsigned int *)(v7 + 180);
  re::mtl::makeDefaultDevice(&v19);
  v10 = objc_msgSend(objc_msgSend(v5, sel_alloc), sel_init);
  objc_msgSend(v10, sel_setStorageMode_, 2);
  objc_msgSend(v10, sel_setPixelFormat_, 70);
  objc_msgSend(v10, sel_setWidth_, v8);
  objc_msgSend(v10, sel_setHeight_, v9);
  objc_msgSend(v10, sel_setUsage_, 3);

  v11 = *(void ***)(*((_QWORD *)this + 5) + 32);
  v13 = v11 + 1;
  v12 = v11[1];
  if (!v12
    || (v14 = objc_msgSend(v12, sel_width), v14 != objc_msgSend(v6, sel_width))
    || (v15 = objc_msgSend(*v13, sel_height), v15 != objc_msgSend(v6, sel_height))
    || (v16 = v11[4]) == 0
    || (v17 = objc_msgSend(v16, sel_width), v17 != objc_msgSend(v10, sel_width))
    || (v18 = objc_msgSend(v11[4], sel_height), v18 != objc_msgSend(v10, sel_height)))
  {
    *((_BYTE *)this + 56) = 1;
    re::mtl::Device::makeTexture(v6, (id *)this + 6, &v19);
    NS::SharedPtr<MTL::Texture>::operator=(v13, &v19);
    if (v19)

    re::mtl::Device::makeTexture(v6, (id *)this + 6, &v19);
    NS::SharedPtr<MTL::Texture>::operator=(v11 + 3, &v19);
    if (v19)

    re::mtl::Device::makeTexture(v6, (id *)this + 6, &v19);
    NS::SharedPtr<MTL::Texture>::operator=(v11 + 2, &v19);
    if (v19)

    re::mtl::Device::makeTexture(v10, (id *)this + 6, &v19);
    NS::SharedPtr<MTL::Texture>::operator=(v11 + 4, &v19);
    if (v19)

    re::mtl::Device::makeTexture(v10, (id *)this + 6, &v19);
    NS::SharedPtr<MTL::Texture>::operator=(v11 + 5, &v19);
    if (v19)

  }
  NS::SharedPtr<MTL::Texture>::operator=((void **)this, v13);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 1, v11 + 3);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 2, v11 + 2);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 3, v11 + 4);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 4, v11 + 5);
  if (v10)

  if (v6)
}

void re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler::saveTexturesForNextFrame(re::guided_filter_occlusion::GuidedFilterOcclusionTextureRecycler *this)
{
  uint64_t v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 5) + 32);
  v4 = *(id *)(v1 + 16);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v1 + 16), (void **)(v1 + 24));
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v1 + 24), &v4);
  v2 = *(void **)(v1 + 32);
  v1 += 32;
  v3 = v2;
  NS::SharedPtr<MTL::Texture>::operator=((void **)v1, (void **)(v1 + 8));
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v1 + 8), &v3);
  if (v3)

  if (v4)
}

void **re::guided_filter_occlusion::GuidedFilterKernelRecycler::prepareKernelsForFrame(re::guided_filter_occlusion::GuidedFilterKernelRecycler *this, const re::RenderManager *a2, re::mtl::Library *a3, int a4)
{
  void **v5;
  void **ComputePipelineState;
  _anonymous_namespace_ *v8;
  void **v9;
  _anonymous_namespace_ *v10;
  void **v11;
  _anonymous_namespace_ *v12;
  void **v13;
  _anonymous_namespace_ *v14;
  void **v15;
  _anonymous_namespace_ *v16;
  void **v17;
  _anonymous_namespace_ *v18;
  void **v19;
  _anonymous_namespace_ *v20;
  void **v21;
  void *v22;
  id *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  double v29;
  void *v30;
  id *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  id *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  id *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  id *v57;
  id v58;
  id v59;
  id *v60;
  void *v61;
  id v62;
  id v63;
  id v65;
  _anonymous_namespace_ *v66;
  char v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  char v78;

  v5 = *(void ***)(*((_QWORD *)this + 6) + 32);
  if (a4)
  {
    LOBYTE(v65) = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v65);
    NS::SharedPtr<MTL::Texture>::operator=(v5 + 6, ComputePipelineState);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v70);
    v8 = (_anonymous_namespace_ *)v68;
    if ((_QWORD)v68)
    {
      if ((BYTE8(v68) & 1) != 0)
        v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v68 + 40))();
      v68 = 0u;
      v69 = 0u;
    }
    if ((_BYTE)v65)
    {
      v8 = v66;
      if (v66)
      {
        if ((v67 & 1) != 0)
          v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 40))();
      }
    }
    LOBYTE(v65) = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v9 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v65);
    NS::SharedPtr<MTL::Texture>::operator=(v5 + 7, v9);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v70);
    v10 = (_anonymous_namespace_ *)v68;
    if ((_QWORD)v68)
    {
      if ((BYTE8(v68) & 1) != 0)
        v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v68 + 40))();
      v68 = 0u;
      v69 = 0u;
    }
    if ((_BYTE)v65)
    {
      v10 = v66;
      if (v66)
      {
        if ((v67 & 1) != 0)
          v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 40))();
      }
    }
    LOBYTE(v65) = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v11 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v65);
    NS::SharedPtr<MTL::Texture>::operator=(v5 + 8, v11);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v70);
    v12 = (_anonymous_namespace_ *)v68;
    if ((_QWORD)v68)
    {
      if ((BYTE8(v68) & 1) != 0)
        v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v68 + 40))();
      v68 = 0u;
      v69 = 0u;
    }
    if ((_BYTE)v65)
    {
      v12 = v66;
      if (v66)
      {
        if ((v67 & 1) != 0)
          v12 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 40))();
      }
    }
    LOBYTE(v65) = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v13 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v65);
    NS::SharedPtr<MTL::Texture>::operator=(v5 + 9, v13);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v70);
    v14 = (_anonymous_namespace_ *)v68;
    if ((_QWORD)v68)
    {
      if ((BYTE8(v68) & 1) != 0)
        v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v68 + 40))();
      v68 = 0u;
      v69 = 0u;
    }
    if ((_BYTE)v65)
    {
      v14 = v66;
      if (v66)
      {
        if ((v67 & 1) != 0)
          v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 40))();
      }
    }
    LOBYTE(v65) = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v15 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v65);
    NS::SharedPtr<MTL::Texture>::operator=(v5 + 10, v15);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v70);
    v16 = (_anonymous_namespace_ *)v68;
    if ((_QWORD)v68)
    {
      if ((BYTE8(v68) & 1) != 0)
        v16 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v68 + 40))();
      v68 = 0u;
      v69 = 0u;
    }
    if ((_BYTE)v65)
    {
      v16 = v66;
      if (v66)
      {
        if ((v67 & 1) != 0)
          v16 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 40))();
      }
    }
    LOBYTE(v65) = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v17 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v65);
    NS::SharedPtr<MTL::Texture>::operator=(v5 + 11, v17);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v70);
    v18 = (_anonymous_namespace_ *)v68;
    if ((_QWORD)v68)
    {
      if ((BYTE8(v68) & 1) != 0)
        v18 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v68 + 40))();
      v68 = 0u;
      v69 = 0u;
    }
    if ((_BYTE)v65)
    {
      v18 = v66;
      if (v66)
      {
        if ((v67 & 1) != 0)
          v18 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 40))();
      }
    }
    LOBYTE(v65) = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v19 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v65);
    NS::SharedPtr<MTL::Texture>::operator=(v5 + 12, v19);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v70);
    v20 = (_anonymous_namespace_ *)v68;
    if ((_QWORD)v68)
    {
      if ((BYTE8(v68) & 1) != 0)
        v20 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v68 + 40))();
      v68 = 0u;
      v69 = 0u;
    }
    if ((_BYTE)v65)
    {
      v20 = v66;
      if (v66)
      {
        if ((v67 & 1) != 0)
          v20 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 40))();
      }
    }
    LOBYTE(v65) = 0;
    v74 = 0;
    v71 = 0;
    v72 = 0;
    v70 = 0;
    v73 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v21 = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)&v65);
    NS::SharedPtr<MTL::Texture>::operator=(v5 + 13, v21);
    re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v70);
    if ((_QWORD)v68)
    {
      if ((BYTE8(v68) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v68 + 40))();
      v68 = 0u;
      v69 = 0u;
    }
    if ((_BYTE)v65 && v66 && (v67 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v66 + 40))();
  }
  v23 = v5 + 14;
  v22 = v5[14];
  if (!v22
    || (v24 = v22,
        v25 = objc_msgSend(v24, "kernelDiameter"),
        v26 = *(unsigned int *)(*((_QWORD *)this + 6) + 124),
        v24,
        v25 != v26))
  {
    re::mtl::mps::ImageGuidedFilter::ImageGuidedFilter((re::mtl::mps::ImageGuidedFilter *)&v65, (re::guided_filter_occlusion::GuidedFilterKernelRecycler *)((char *)this + 56), *(unsigned int *)(*((_QWORD *)this + 6) + 124));
    if (v23 != &v65)
    {
      v27 = v65;
      v65 = 0;
      v28 = *v23;
      *v23 = v27;

    }
    LODWORD(v29) = 981668463;
    objc_msgSend(*v23, "setEpsilon:", v29);
  }
  v31 = v5 + 15;
  v30 = v5[15];
  if (v30)
  {
    v32 = v30;
    if (objc_msgSend(v32, "kernelWidth") == *(_DWORD *)(*((_QWORD *)this + 6) + 112))
    {
      v33 = *v31;
      v34 = objc_msgSend(v33, "kernelHeight");
      v35 = *(unsigned int *)(*((_QWORD *)this + 6) + 112);

      if (v34 == v35)
        goto LABEL_79;
    }
    else
    {

    }
  }
  v36 = *(unsigned int *)(*((_QWORD *)this + 6) + 112);
  re::mtl::mps::ImageAreaMax::ImageAreaMax((re::mtl::mps::ImageAreaMax *)&v65, (re::guided_filter_occlusion::GuidedFilterKernelRecycler *)((char *)this + 56), v36, v36);
  if (v31 != &v65)
  {
    v37 = v65;
    v65 = 0;
    v38 = *v31;
    *v31 = v37;

  }
LABEL_79:
  v40 = v5 + 16;
  v39 = v5[16];
  if (v39)
  {
    v41 = v39;
    if (objc_msgSend(v41, "kernelWidth") == *(_DWORD *)(*((_QWORD *)this + 6) + 120))
    {
      v42 = *v40;
      v43 = objc_msgSend(v42, "kernelHeight");
      v44 = *(unsigned int *)(*((_QWORD *)this + 6) + 120);

      if (v43 == v44)
        goto LABEL_87;
    }
    else
    {

    }
  }
  v45 = *(unsigned int *)(*((_QWORD *)this + 6) + 120);
  re::mtl::mps::ImageAreaMax::ImageAreaMax((re::mtl::mps::ImageAreaMax *)&v65, (re::guided_filter_occlusion::GuidedFilterKernelRecycler *)((char *)this + 56), v45, v45);
  if (v40 != &v65)
  {
    v46 = v65;
    v65 = 0;
    v47 = *v40;
    *v40 = v46;

  }
LABEL_87:
  v49 = v5 + 17;
  v48 = v5[17];
  if (v48)
  {
    v50 = v48;
    if (objc_msgSend(v50, "kernelWidth") == *(_DWORD *)(*((_QWORD *)this + 6) + 132))
    {
      v51 = *v49;
      v52 = objc_msgSend(v51, "kernelHeight");
      v53 = *(unsigned int *)(*((_QWORD *)this + 6) + 132);

      if (v52 == v53)
        goto LABEL_95;
    }
    else
    {

    }
  }
  v54 = *(unsigned int *)(*((_QWORD *)this + 6) + 132);
  re::mtl::mps::ImageTent::ImageTent((re::mtl::mps::ImageTent *)&v65, (re::guided_filter_occlusion::GuidedFilterKernelRecycler *)((char *)this + 56), v54, v54);
  if (v49 != &v65)
  {
    v55 = v65;
    v65 = 0;
    v56 = *v49;
    *v49 = v55;

  }
LABEL_95:
  v57 = v5 + 18;
  if (!v5[18])
  {
    re::mtl::mps::ImageBilinearScale::ImageBilinearScale((re::mtl::mps::ImageBilinearScale *)&v65, (re::guided_filter_occlusion::GuidedFilterKernelRecycler *)((char *)this + 56));
    if (v57 != &v65)
    {
      v58 = v65;
      v65 = 0;
      v59 = *v57;
      *v57 = v58;

    }
  }
  v61 = v5[19];
  v60 = v5 + 19;
  if (!v61)
  {
    re::mtl::mps::ImageBilinearScale::ImageBilinearScale((re::mtl::mps::ImageBilinearScale *)&v65, (re::guided_filter_occlusion::GuidedFilterKernelRecycler *)((char *)this + 56));
    if (v60 != &v65)
    {
      v62 = v65;
      v65 = 0;
      v63 = *v60;
      *v60 = v62;

    }
  }
  re::ObjCObject::operator=((void **)this, *v23);
  re::ObjCObject::operator=((void **)this + 2, *v40);
  re::ObjCObject::operator=((void **)this + 3, *v49);
  re::ObjCObject::operator=((void **)this + 4, *v57);
  return re::ObjCObject::operator=((void **)this + 5, *v60);
}

re::RenderGraphComputeNodeBase *re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(re::RenderGraphComputeNodeBase *this, const char *a2)
{
  re::RenderGraphNode *v3;
  _QWORD *v4;

  v3 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *(_QWORD *)v3 = off_24ED80970;
  v4 = (_QWORD *)((char *)v3 + 280);
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_OWORD *)v3 + 18) = 0u;
  *((_QWORD *)v3 + 38) = 0;
  re::DynamicString::setCapacity(v4, 0);
  *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_BYTE *)this + 400) = 0;
  *((_QWORD *)this + 51) = -1;
  *((_QWORD *)this + 52) = -1;
  *((_QWORD *)this + 53) = -1;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  return this;
}

uint64_t re::RenderGraphComputeNodeBase::configure(re::RenderGraphComputeNodeBase *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re::ShaderLibraryAsset *v8;
  uint64_t v9;
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v12[8];
  uint64_t v13;
  char v14;
  _QWORD v15[4];
  _QWORD v16[3];
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;

  v8 = (re::RenderGraphComputeNodeBase *)((char *)this + 256);
  re::AssetHandle::loadNow(*((_QWORD *)this + 33), 0);
  v9 = *(_QWORD *)(re::AssetHandle::loadedAsset<re::ShaderLibraryAsset>(v8) + 72);
  v12[0] = 0;
  re::DynamicString::DynamicString((re::DynamicString *)v15, (re::RenderGraphComputeNodeBase *)((char *)this + 280));
  v18 = 0;
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v9;
  v22 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v12);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 59, ComputePipelineState);
  re::RenderGraphNode::configure(this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v16);
  result = v15[0];
  if (v15[0])
  {
    if ((v15[1] & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 40))();
    memset(v15, 0, sizeof(v15));
  }
  if (v12[0])
  {
    result = v13;
    if (v13)
    {
      if ((v14 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
    }
  }
  return result;
}

void re::RenderGraphComputeNodeBase::setTexturesAndBuffersOnEncoders(_QWORD *a1, uint64_t a2, id *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v6 = a1[14];
  if (v6)
  {
    v7 = a1[16];
    v8 = 32 * v6;
    do
    {
      if (!*(_BYTE *)(v7 + 20) || *(_DWORD *)(v7 + 8) != -1 && *(_DWORD *)(v7 + 12) != -1)
      {
        v9 = re::RenderGraphContext::metalBuffer(a2, v7);
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)v9, *(unsigned int *)(v9 + 8), *(unsigned int *)(v7 + 16));
      }
      v7 += 32;
      v8 -= 32;
    }
    while (v8);
  }
  v10 = a1[19];
  if (v10)
  {
    v11 = a1[21];
    v12 = v10 << 6;
    do
    {
      if (!*(_BYTE *)(v11 + 49) || *(_DWORD *)(v11 + 8) != -1 && *(_DWORD *)(v11 + 12) != -1)
      {
        v13 = re::RenderGraphContext::metalBuffer(a2, v11);
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", *(_QWORD *)v13, *(unsigned int *)(v13 + 8), *(unsigned int *)(v11 + 16));
      }
      v11 += 64;
      v12 -= 64;
    }
    while (v12);
  }
  v14 = a1[24];
  if (v14)
  {
    v15 = a1[26];
    v16 = 32 * v14;
    do
    {
      if (!*(_BYTE *)(v15 + 20) || *(_DWORD *)(v15 + 8) != -1 && *(_DWORD *)(v15 + 12) != -1)
      {
        re::RenderGraphContext::metalTexture(a2, v15, *(unsigned __int8 *)(v15 + 21), *(unsigned __int8 *)(v15 + 22), &v20);
        objc_msgSend(*a3, "setTexture:atIndex:", v20, *(unsigned int *)(v15 + 16));
        if (v20)

      }
      v15 += 32;
      v16 -= 32;
    }
    while (v16);
  }
  v17 = a1[29];
  if (v17)
  {
    v18 = a1[31];
    v19 = v17 << 6;
    do
    {
      if (!*(_BYTE *)(v18 + 49) || *(_DWORD *)(v18 + 8) != -1 && *(_DWORD *)(v18 + 12) != -1)
      {
        re::RenderGraphContext::metalTexture(a2, v18, 0, 0, &v20);
        objc_msgSend(*a3, "setTexture:atIndex:", v20, *(unsigned int *)(v18 + 16));
        if (v20)

      }
      v18 += 64;
      v19 -= 64;
    }
    while (v19);
  }
}

void re::RenderGraphComputeNodeBase::execute(re::RenderGraphComputeNodeBase *this, re::RenderGraphContext *a2)
{
  id *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE v22[16];
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v22, 5036, 0);
  if (((*(uint64_t (**)(re::RenderGraphComputeNodeBase *, re::RenderGraphContext *))(*(_QWORD *)this + 136))(this, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, re::RenderGraphComputeNodeBase *, re::RenderGraphContext *))(*(_QWORD *)this + 128))(&v17, this, a2);
    v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
    re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v4, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v16);
    objc_msgSend(v16, "setComputePipelineState:", *((_QWORD *)this + 59));
    v5 = v16;
    v15 = v5;
    re::RenderGraphComputeNodeBase::setTexturesAndBuffersOnEncoders(this, (uint64_t)a2, &v15);

    v6 = *((_QWORD *)this + 56);
    if (v6)
    {
      v7 = 8 * v6;
      v8 = (unsigned int *)(*((_QWORD *)this + 58) + 4);
      do
      {
        objc_msgSend(v16, "setThreadgroupMemoryLength:atIndex:", *v8, *(v8 - 1));
        v8 += 2;
        v7 -= 8;
      }
      while (v7);
    }
    v14 = v16;
    (*(void (**)(re::RenderGraphComputeNodeBase *, re::RenderGraphContext *, id *))(*(_QWORD *)this + 144))(this, a2, &v14);

    v9 = *((_QWORD *)a2 + 1);
    v13 = v16;
    re::RenderManager::sampleComputeEncoderMTLCounterBegin(v9, &v13, 1u);

    *(_QWORD *)&v10 = v17;
    *((_QWORD *)&v10 + 1) = HIDWORD(v17);
    v25 = v10;
    v26 = v18;
    *(_QWORD *)&v10 = v19;
    *((_QWORD *)&v10 + 1) = v20;
    v23 = v10;
    v24 = v21;
    objc_msgSend(v16, "dispatchThreadgroups:threadsPerThreadgroup:", &v25, &v23);
    v11 = *((_QWORD *)a2 + 1);
    v12 = v16;
    re::RenderManager::sampleComputeEncoderMTLCounterEnd(v11, &v12, 1u);

  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v22);
}

void re::RenderGraphComputeNode::getDispatchSizes(re::RenderGraphComputeNode *this@<X0>, const re::RenderGraphContext *a2@<X1>, unsigned int *a3@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  id v14;
  float v15;
  id v16;
  id v17;

  v5 = *((_DWORD *)this + 105);
  v6 = *((_DWORD *)this + 106);
  v7 = *((_DWORD *)this + 107);
  v8 = *((_DWORD *)this + 102);
  v9 = *((_DWORD *)this + 103);
  v10 = *((_DWORD *)this + 104);
  if (*((_BYTE *)this + 312))
  {
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 320, 0, 0, &v17);
    if (v5 == -1)
      v5 = objc_msgSend(*((id *)this + 59), sel_threadExecutionWidth);
    if (v6 == -1)
      v6 = objc_msgSend(*((id *)this + 59), sel_maxTotalThreadsPerThreadgroup) / v5;
    if (v7 == -1)
      v7 = 1;
    if (*((_BYTE *)this + 368))
    {
      v11 = *((float *)this + 96);
      v12 = *((float *)this + 97);
      v13 = *((float *)this + 98);
    }
    else
    {
      v12 = 1.0;
      v11 = 1.0;
      v13 = 1.0;
    }
    if (v8 == -1)
      v8 = (float)((float)(roundf(v11 * (float)(unint64_t)objc_msgSend(v17, sel_width)) + (float)v5)
                               + -1.0)
         / v5;
    if (v9 == -1)
      v9 = (float)((float)(roundf(v12 * (float)(unint64_t)objc_msgSend(v17, sel_height)) + (float)v6)
                               + -1.0)
         / v6;
    if (v10 == -1)
      v10 = vcvtas_u32_f32(v13 * (float)(unint64_t)objc_msgSend(v17, sel_depth));
    v16 = v17;
    if (!v17)
      goto LABEL_51;
LABEL_50:

    goto LABEL_51;
  }
  if (*((_BYTE *)this + 336))
  {
    v14 = *(id *)re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 344);
    if (v5 == -1)
      v5 = objc_msgSend(*((id *)this + 59), sel_maxTotalThreadsPerThreadgroup);
    if (v6 == -1)
      v6 = 1;
    if (v7 == -1)
      v7 = 1;
    if (*((_BYTE *)this + 400))
      v15 = *((float *)this + 101);
    else
      v15 = 1.0;
    if (v8 == -1)
      v8 = (float)((float)(roundf(v15 * (float)(unint64_t)objc_msgSend(v14, sel_length)) + (float)v5)
                               + -1.0)
         / v5;
    if (v9 == -1)
      v9 = 1;
    if (v10 == -1)
      v10 = 1;
    if (v14)
    {
      v16 = v14;
      goto LABEL_50;
    }
  }
  else if (*((_BYTE *)this + 360))
  {
    if (v5 == -1)
      v5 = objc_msgSend(*((id *)this + 59), sel_maxTotalThreadsPerThreadgroup);
    if (v6 == -1)
      v6 = 1;
    if (v7 == -1)
      v7 = 1;
    if (v8 == -1)
      v8 = (v5 + *((_DWORD *)this + 91) - 1) / v5;
    if (v9 == -1)
      v9 = 1;
    if (v10 == -1)
      v10 = 1;
  }
LABEL_51:
  *a3 = v8;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v5;
  a3[4] = v6;
  a3[5] = v7;
}

void re::RenderGraphComputeNode::validateAttachmentsDuringGraphBuild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[8];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  unsigned int v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  int v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  unsigned int v94;
  uint64_t v95;

  v94 = 0;
  v92 = 0u;
  v93 = 0u;
  v95 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v92, a3, 3);
  v5 = *(_QWORD *)(a1 + 112);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 128);
    v7 = v6 + 32 * v5;
    do
    {
      v8 = *(unsigned int *)(v6 + 16);
      v9 = v92;
      if ((_QWORD)v92)
      {
        v10 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        v11 = *(unsigned int *)(*((_QWORD *)&v92 + 1) + 4 * ((v10 ^ (v10 >> 31)) % DWORD2(v93)));
        if ((_DWORD)v11 != 0x7FFFFFFF)
        {
          while (*(_DWORD *)(v93 + 32 * v11 + 12) != v8)
          {
            v11 = *(_DWORD *)(v93 + 32 * v11 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v11 == 0x7FFFFFFF)
              goto LABEL_13;
          }
          v12 = *(_QWORD *)(a1 + 16);
          re::RenderGraphCompiled::bufferName((re::StringID *)&v84, *(_QWORD *)(a2 + 296), *(_DWORD *)(v6 + 8));
          re::DynamicString::format((re::DynamicString *)"(%s): Buffer read (%s, %u) contains compute index which is already in use on a RenderGraphComputeNode.", (re::DynamicString *)&v88, v12, *((_QWORD *)&v84 + 1), *(unsigned int *)(v6 + 16));
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v88);
          if ((_QWORD)v88)
          {
            if ((BYTE8(v88) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v88 + 40))(v88, v89);
            v88 = 0u;
            v89 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v84);
          v8 = *(unsigned int *)(v6 + 16);
        }
      }
LABEL_13:
      v13 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
      v14 = v13 ^ (v13 >> 31);
      if (v9)
      {
        v15 = v14 % DWORD2(v93);
        v16 = *(unsigned int *)(*((_QWORD *)&v92 + 1) + 4 * v15);
        if ((_DWORD)v16 != 0x7FFFFFFF)
        {
          while (*(_DWORD *)(v93 + 32 * v16 + 12) != v8)
          {
            v16 = *(_DWORD *)(v93 + 32 * v16 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v16 == 0x7FFFFFFF)
              goto LABEL_19;
          }
          goto LABEL_25;
        }
      }
      else
      {
        v15 = 0;
      }
LABEL_19:
      v17 = v95;
      if ((_DWORD)v95 == 0x7FFFFFFF)
      {
        v17 = v94;
        v18 = v94;
        if (v94 == DWORD2(v93))
        {
          re::HashTable<unsigned int,re::RenderGraphBufferHandle,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity((uint64_t)&v92, 2 * HIDWORD(v93));
          v18 = v94;
          v15 = v14 % DWORD2(v93);
        }
        v94 = v18 + 1;
        v19 = v93;
        v20 = *(_DWORD *)(v93 + 32 * v17 + 8);
      }
      else
      {
        v19 = v93;
        v20 = *(_DWORD *)(v93 + 32 * v95 + 8);
        LODWORD(v95) = v20 & 0x7FFFFFFF;
      }
      v21 = v19 + 32 * v17;
      *(_DWORD *)(v21 + 8) = v20 | 0x80000000;
      v22 = *((_QWORD *)&v92 + 1);
      *(_DWORD *)(v21 + 8) = *(_DWORD *)(*((_QWORD *)&v92 + 1) + 4 * v15) | 0x80000000;
      *(_QWORD *)v21 = v14;
      *(_DWORD *)(v21 + 12) = *(_DWORD *)(v6 + 16);
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v21 + 24) = -1;
      *(_QWORD *)(v21 + 16) = *(_QWORD *)v6;
      *(_QWORD *)(v21 + 24) = *(_QWORD *)(v6 + 8);
      *(_DWORD *)(v22 + 4 * v15) = v17;
      ++HIDWORD(v93);
      ++HIDWORD(v95);
LABEL_25:
      v6 += 32;
    }
    while (v6 != v7);
  }
  v90 = 0;
  v88 = 0u;
  v89 = 0u;
  v91 = 0x7FFFFFFFLL;
  re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)&v88, a3, 3);
  v23 = *(_QWORD *)(a1 + 152);
  if (v23)
  {
    v24 = *(unsigned int **)(a1 + 168);
    v25 = &v24[16 * v23];
    do
    {
      v26 = v24[4];
      if (re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)&v88, v24[4]))
      {
        v27 = *(_QWORD *)(a1 + 16);
        re::RenderGraphCompiled::bufferName((re::StringID *)&v78, *(_QWORD *)(a2 + 296), v24[2]);
        re::DynamicString::format((re::DynamicString *)"(%s): Buffer write (%s, %u) contains compute index which is already in use on a RenderGraphComputeNode.", (re::DynamicString *)&v84, v27, *((_QWORD *)&v78 + 1), v24[4]);
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v84);
        if ((_QWORD)v84)
        {
          if ((BYTE8(v84) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v84 + 40))();
          v84 = 0u;
          v85 = 0u;
        }
        re::StringID::destroyString((re::StringID *)&v78);
        v26 = v24[4];
      }
      if ((_QWORD)v92)
      {
        v28 = 0xBF58476D1CE4E5B9 * (v26 ^ ((unint64_t)v26 >> 30));
        v29 = *(unsigned int *)(*((_QWORD *)&v92 + 1)
                              + 4
                              * (((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                 * (v28 ^ (v28 >> 27))) >> 31))
                               % DWORD2(v93)));
        if ((_DWORD)v29 != 0x7FFFFFFF)
        {
          while (*(_DWORD *)(v93 + 32 * v29 + 12) != (_DWORD)v26)
          {
            v29 = *(_DWORD *)(v93 + 32 * v29 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v29 == 0x7FFFFFFF)
              goto LABEL_45;
          }
          v30 = *(_DWORD *)(v93 + 32 * v29 + 24);
          if (v30 != v24[2])
          {
            v31 = *(_QWORD *)(a1 + 16);
            re::RenderGraphCompiled::bufferName((re::StringID *)&v78, *(_QWORD *)(a2 + 296), v30);
            v32 = *((_QWORD *)&v78 + 1);
            re::RenderGraphCompiled::bufferName((re::StringID *)&v76, *(_QWORD *)(a2 + 296), v24[2]);
            re::DynamicString::format((re::DynamicString *)"(%s): Buffer read_write at compute index %u is not consistent. [read]: %s; [write]: %"
                                   "s. They should be the same.",
              (re::DynamicString *)&v84,
              v31,
              v26,
              v32,
              *((_QWORD *)&v76 + 1));
            re::RenderGraphCompiled::addError(a2, (uint64_t)&v84);
            if ((_QWORD)v84)
            {
              if ((BYTE8(v84) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v84 + 40))();
              v84 = 0u;
              v85 = 0u;
            }
            re::StringID::destroyString((re::StringID *)&v76);
            re::StringID::destroyString((re::StringID *)&v78);
          }
        }
      }
LABEL_45:
      if (v24[5] != 5)
      {
        v33 = *(_QWORD *)(a1 + 16);
        re::RenderGraphCompiled::bufferName((re::StringID *)&v78, *(_QWORD *)(a2 + 296), v24[2]);
        re::DynamicString::format((re::DynamicString *)"(%s): Buffer write (%s, %u) Non-compute write on compute node", (re::DynamicString *)&v84, v33, *((_QWORD *)&v78 + 1), v24[4]);
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v84);
        if ((_QWORD)v84)
        {
          if ((BYTE8(v84) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v84 + 40))();
          v84 = 0u;
          v85 = 0u;
        }
        re::StringID::destroyString((re::StringID *)&v78);
      }
      re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add((uint64_t)&v88, v24 + 4);
      v24 += 16;
    }
    while (v24 != v25);
  }
  v86 = 0;
  v84 = 0u;
  v85 = 0u;
  v87 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v84, a3, 3);
  v34 = *(_QWORD *)(a1 + 192);
  if (v34)
  {
    v35 = *(uint64_t **)(a1 + 208);
    v36 = &v35[4 * v34];
    do
    {
      v37 = *((unsigned int *)v35 + 4);
      v38 = v84;
      if ((_QWORD)v84)
      {
        v39 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
        v40 = *(unsigned int *)(*((_QWORD *)&v84 + 1) + 4 * ((v39 ^ (v39 >> 31)) % DWORD2(v85)));
        if ((_DWORD)v40 != 0x7FFFFFFF)
        {
          while (*(_DWORD *)(v85 + 32 * v40 + 12) != v37)
          {
            v40 = *(_DWORD *)(v85 + 32 * v40 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v40 == 0x7FFFFFFF)
              goto LABEL_64;
          }
          v41 = *(_QWORD *)(a1 + 16);
          v82 = 0;
          v83 = -1;
          v82 = *v35;
          v83 = v35[1];
          re::RenderGraphCompiled::targetName(a2, (uint64_t)&v82, (re::StringID *)&v76);
          re::DynamicString::format((re::DynamicString *)"(%s): Target read (%s, %u) contains compute index which is already in use on a RenderGraphComputeNode.", (re::DynamicString *)&v78, v41, *((_QWORD *)&v76 + 1), *((unsigned int *)v35 + 4));
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v78);
          if ((_QWORD)v78)
          {
            if ((BYTE8(v78) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v78 + 40))();
            v78 = 0u;
            v79 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v76);
          v37 = *((unsigned int *)v35 + 4);
        }
      }
LABEL_64:
      v42 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
      v43 = v42 ^ (v42 >> 31);
      if (v38)
      {
        v44 = v43 % DWORD2(v85);
        v45 = *(unsigned int *)(*((_QWORD *)&v84 + 1) + 4 * v44);
        if ((_DWORD)v45 != 0x7FFFFFFF)
        {
          while (*(_DWORD *)(v85 + 32 * v45 + 12) != v37)
          {
            v45 = *(_DWORD *)(v85 + 32 * v45 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v45 == 0x7FFFFFFF)
              goto LABEL_70;
          }
          goto LABEL_76;
        }
      }
      else
      {
        v44 = 0;
      }
LABEL_70:
      v46 = v87;
      if ((_DWORD)v87 == 0x7FFFFFFF)
      {
        v46 = v86;
        v47 = v86;
        if (v86 == DWORD2(v85))
        {
          re::HashTable<unsigned int,re::RenderGraphBufferHandle,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity((uint64_t)&v84, 2 * HIDWORD(v85));
          v47 = v86;
          v44 = v43 % DWORD2(v85);
        }
        v86 = v47 + 1;
        v48 = v85;
        v49 = *(_DWORD *)(v85 + 32 * v46 + 8);
      }
      else
      {
        v48 = v85;
        v49 = *(_DWORD *)(v85 + 32 * v87 + 8);
        LODWORD(v87) = v49 & 0x7FFFFFFF;
      }
      v50 = v48 + 32 * v46;
      *(_DWORD *)(v50 + 8) = v49 | 0x80000000;
      v51 = *((_QWORD *)&v84 + 1);
      *(_DWORD *)(v50 + 8) = *(_DWORD *)(*((_QWORD *)&v84 + 1) + 4 * v44) | 0x80000000;
      *(_QWORD *)v50 = v43;
      *(_DWORD *)(v50 + 12) = *((_DWORD *)v35 + 4);
      *(_QWORD *)(v50 + 16) = 0;
      *(_QWORD *)(v50 + 24) = -1;
      *(_QWORD *)(v50 + 16) = *v35;
      *(_QWORD *)(v50 + 24) = v35[1];
      *(_DWORD *)(v51 + 4 * v44) = v46;
      ++HIDWORD(v85);
      ++HIDWORD(v87);
LABEL_76:
      v35 += 4;
    }
    while (v35 != v36);
  }
  v80 = 0;
  v78 = 0u;
  v79 = 0u;
  v81 = 0x7FFFFFFFLL;
  re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)&v78, a3, 3);
  v52 = *(_QWORD *)(a1 + 232);
  if (v52)
  {
    v53 = *(uint64_t **)(a1 + 248);
    v54 = &v53[8 * v52];
    do
    {
      v55 = *((unsigned int *)v53 + 4);
      if (re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)&v78, *((_DWORD *)v53 + 4)))
      {
        v56 = *(_QWORD *)(a1 + 16);
        v72 = 0;
        v73 = -1;
        v72 = *v53;
        v73 = v53[1];
        re::RenderGraphCompiled::targetName(a2, (uint64_t)&v72, (re::StringID *)v74);
        re::DynamicString::format((re::DynamicString *)"(%s): Target write (%s, %u) contains compute index which is already in use on a RenderGraphComputeNode.", (re::DynamicString *)&v76, v56, v75, *((unsigned int *)v53 + 4));
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
        if ((_QWORD)v76)
        {
          if ((BYTE8(v76) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v76 + 40))();
          v76 = 0u;
          v77 = 0u;
        }
        re::StringID::destroyString((re::StringID *)v74);
        v55 = *((unsigned int *)v53 + 4);
      }
      if ((_QWORD)v84)
      {
        v57 = 0xBF58476D1CE4E5B9 * (v55 ^ ((unint64_t)v55 >> 30));
        v58 = *(unsigned int *)(*((_QWORD *)&v84 + 1)
                              + 4
                              * (((0x94D049BB133111EBLL * (v57 ^ (v57 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                 * (v57 ^ (v57 >> 27))) >> 31))
                               % DWORD2(v85)));
        if ((_DWORD)v58 != 0x7FFFFFFF)
        {
          while (*(_DWORD *)(v85 + 32 * v58 + 12) != (_DWORD)v55)
          {
            v58 = *(_DWORD *)(v85 + 32 * v58 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v58 == 0x7FFFFFFF)
              goto LABEL_96;
          }
          v59 = v85 + 32 * v58;
          if (*(_DWORD *)(v59 + 24) != *((_DWORD *)v53 + 2))
          {
            v60 = *(_QWORD *)(a1 + 16);
            v70 = 0;
            v71 = -1;
            v70 = *(_QWORD *)(v59 + 16);
            v71 = *(_QWORD *)(v59 + 24);
            re::RenderGraphCompiled::targetName(a2, (uint64_t)&v70, (re::StringID *)v74);
            v61 = v75;
            v66 = 0;
            v67 = -1;
            v66 = *v53;
            v67 = v53[1];
            re::RenderGraphCompiled::targetName(a2, (uint64_t)&v66, (re::StringID *)v68);
            re::DynamicString::format((re::DynamicString *)"(%s): Target read_write at compute index %u is not consistent. [read]: %s; [write]: %"
                                   "s. They should be the same.",
              (re::DynamicString *)&v76,
              v60,
              v55,
              v61,
              v69);
            re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
            if ((_QWORD)v76)
            {
              if ((BYTE8(v76) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v76 + 40))();
              v76 = 0u;
              v77 = 0u;
            }
            re::StringID::destroyString((re::StringID *)v68);
            re::StringID::destroyString((re::StringID *)v74);
          }
        }
      }
LABEL_96:
      if (*((_DWORD *)v53 + 5) != 5)
      {
        v62 = *(_QWORD *)(a1 + 16);
        v64 = 0;
        v65 = -1;
        v64 = *v53;
        v65 = v53[1];
        re::RenderGraphCompiled::targetName(a2, (uint64_t)&v64, (re::StringID *)v74);
        re::DynamicString::format((re::DynamicString *)"(%s): Target write (%s, %u) Non-compute write on compute node", (re::DynamicString *)&v76, v62, v75, *((unsigned int *)v53 + 4));
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
        if ((_QWORD)v76)
        {
          if ((BYTE8(v76) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v76 + 40))();
          v76 = 0u;
          v77 = 0u;
        }
        re::StringID::destroyString((re::StringID *)v74);
      }
      re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add((uint64_t)&v78, (_DWORD *)v53 + 4);
      v53 += 8;
    }
    while (v53 != v54);
  }
  if (!*(_BYTE *)(a1 + 312) && !*(_BYTE *)(a1 + 336) && !*(_BYTE *)(a1 + 360))
  {
    if (*(_DWORD *)(a1 + 408) == -1)
    {
      re::DynamicString::format((re::DynamicString *)"(%s): gridSizeWidth not specified and no outputDimensionsTarget or outputDimensionsBuffer or outputElementCount was supplied on a RenderGraphComputeNode.", (re::DynamicString *)&v76, *(_QWORD *)(a1 + 16));
      re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
      if ((_QWORD)v76)
      {
        if ((BYTE8(v76) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v76 + 40))();
      }
    }
    if (*(_DWORD *)(a1 + 412) == -1)
    {
      re::DynamicString::format((re::DynamicString *)"(%s): gridSizeHeight not specified and no outputDimensionsTarget or outputDimensionsBuffer or outputElementCount was supplied on a RenderGraphComputeNode.", (re::DynamicString *)&v76, *(_QWORD *)(a1 + 16));
      re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
      if ((_QWORD)v76)
      {
        if ((BYTE8(v76) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v76 + 40))();
      }
    }
    if (*(_DWORD *)(a1 + 416) == -1)
    {
      re::DynamicString::format((re::DynamicString *)"(%s): gridSizeDepth not specified and no outputDimensionsTarget or outputDimensionsBuffer or outputElementCount was supplied on a RenderGraphComputeNode.", (re::DynamicString *)&v76, *(_QWORD *)(a1 + 16));
      re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
      if ((_QWORD)v76)
      {
        if ((BYTE8(v76) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v76 + 40))();
      }
    }
    if (*(_DWORD *)(a1 + 420) == -1)
    {
      re::DynamicString::format((re::DynamicString *)"(%s): threadGroupSizeWidth not specified and no outputDimensionsTarget or outputDimensionsBuffer or outputElementCount was supplied on a RenderGraphComputeNode.", (re::DynamicString *)&v76, *(_QWORD *)(a1 + 16));
      re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
      if ((_QWORD)v76)
      {
        if ((BYTE8(v76) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v76 + 40))();
      }
    }
    if (*(_DWORD *)(a1 + 424) == -1)
    {
      re::DynamicString::format((re::DynamicString *)"(%s): threadGroupSizeHeight not specified and no outputDimensionsTarget or outputDimensionsBuffer or outputElementCount was supplied on a RenderGraphComputeNode.", (re::DynamicString *)&v76, *(_QWORD *)(a1 + 16));
      re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
      if ((_QWORD)v76)
      {
        if ((BYTE8(v76) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v76 + 40))();
      }
    }
    if (*(_DWORD *)(a1 + 428) == -1)
    {
      re::DynamicString::format((re::DynamicString *)"(%s): threadGroupSizeDepth not specified and no outputDimensionsTarget or outputDimensionsBuffer or outputElementCount was supplied on a RenderGraphComputeNode.", (re::DynamicString *)&v76, *(_QWORD *)(a1 + 16));
      re::RenderGraphCompiled::addError(a2, (uint64_t)&v76);
      if ((_QWORD)v76)
      {
        if ((BYTE8(v76) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v76 + 40))();
      }
    }
  }
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)&v78);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v84);
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)&v88);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v92);
}

re::StringID *re::RenderGraphCompiled::bufferName(re::StringID *a1, uint64_t a2, unsigned int a3)
{
  if (*(_QWORD *)(a2 + 16) <= (unint64_t)a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::StringID::StringID(a1, (const StringID *)(*(_QWORD *)(a2 + 32) + 48 * a3 + 8));
}

BOOL re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % v2));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v6 + 16 * v4 + 12) == a2)
    return 1;
  do
  {
    v4 = *(_DWORD *)(v6 + 16 * v4 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v4 != 0x7FFFFFFF;
  }
  while ((_DWORD)v4 != 0x7FFFFFFF && *(_DWORD *)(v6 + 16 * v4 + 12) != a2);
  return result;
}

uint64_t re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = *a2;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  v7 = *(unsigned int *)(result + 24);
  if ((_DWORD)v7)
  {
    v8 = v6 % v7;
    v9 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * (v6 % v7));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(result + 16);
      if (*(_DWORD *)(v10 + 16 * v9 + 12) == (_DWORD)v4)
        return result;
      while (1)
      {
        v9 = *(_DWORD *)(v10 + 16 * v9 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v9 == 0x7FFFFFFF)
          break;
        if (*(_DWORD *)(v10 + 16 * v9 + 12) == (_DWORD)v4)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  result = re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy(result, v8, v6, (uint64_t)a2, a2);
  ++*(_DWORD *)(v3 + 40);
  return result;
}

re::StringID *re::RenderGraphCompiled::targetName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1 + 296);
  v4 = *(unsigned int *)(a2 + 8);
  if (*(_QWORD *)(v3 + 16) <= v4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::StringID::StringID(a3, (const StringID *)(*(_QWORD *)(v3 + 32) + 48 * v4 + 8));
}

uint64_t *re::allocInfo_ThreadGroupMemorySetting(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411E740);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411E740))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E800, 0);
    *(uint64_t *)((char *)&qword_25411E810 + 6) = 0;
    qword_25411E810 = 0;
    qword_25411E820 = 0;
    qword_25411E828 = 0xFFFFFFFFLL;
    qword_25411E800 = (uint64_t)&off_24ED7DAA8;
    qword_25411E830 = (uint64_t)"ThreadGroupMemorySetting";
    dword_25411E838 = 0;
    xmmword_25411E840 = 0u;
    unk_25411E850 = 0u;
    xmmword_25411E860 = 0u;
    qword_25411E870 = 0;
    __cxa_guard_release(&qword_25411E740);
  }
  return &qword_25411E800;
}

void re::initInfo_ThreadGroupMemorySetting(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x22B37C92029F6B34;
  v15[1] = "ThreadGroupMemorySetting";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E748);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E748);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_uint32_t((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "index";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411E770 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint32_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "bytes";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411E778 = v13;
      __cxa_guard_release(&qword_25411E748);
    }
  }
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411E770;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ThreadGroupMemorySetting>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ThreadGroupMemorySetting>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ThreadGroupMemorySetting>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ThreadGroupMemorySetting>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

uint64_t *re::allocInfo_RenderGraphComputeNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411E750);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411E750))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E878, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411E888 = 0;
    qword_25411E898 = 0;
    qword_25411E8A0 = 0xFFFFFFFFLL;
    qword_25411E878 = (uint64_t)&off_24ED7DAA8;
    qword_25411E8A8 = (uint64_t)"RenderGraphComputeNode";
    dword_25411E8B0 = 0;
    xmmword_25411E8B8 = 0u;
    unk_25411E8C8 = 0u;
    xmmword_25411E8D8 = 0u;
    qword_25411E8E8 = 0;
    __cxa_guard_release(&qword_25411E750);
  }
  return &qword_25411E878;
}

void re::initInfo_RenderGraphComputeNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  uint64_t v46;
  uint64_t *v47;
  const re::IntrospectionBase *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  const re::IntrospectionBase *v58;
  uint64_t *v59;
  uint64_t v60;
  __int128 v61;
  _QWORD v62[2];
  __int128 v63;

  v62[0] = 0xB2B40BD8F0C94D02;
  v62[1] = "RenderGraphComputeNode";
  re::StringID::destroyString((re::StringID *)v62);
  *((_OWORD *)this + 2) = v63;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E758);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E758);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E8F0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "library";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411E8F8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "computeFunction";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x11800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411E900 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint32_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "gridSizeWidth";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x19800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411E908 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_uint32_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "gridSizeHeight";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x19C00000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25411E910 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_uint32_t((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "gridSizeDepth";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x1A000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_25411E918 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_uint32_t((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "threadGroupSizeWidth";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x1A400000007;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_25411E920 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_uint32_t((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "threadGroupSizeHeight";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x1A800000008;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_25411E928 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_uint32_t((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "threadGroupSizeDepth";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x1AC00000009;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_25411E930 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v42 = re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get((re *)1);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "threadGroupMemorySettings";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0x1B00000000ALL;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_25411E938 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      re::IntrospectionInfo<re::Optional<re::RenderGraphTargetHandle>>::get((uint64_t)v44, v45);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = "outputDimensionsTarget";
      *(_QWORD *)(v46 + 16) = &qword_25411E780;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0x1380000000CLL;
      *(_DWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = 0;
      *(_QWORD *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_25411E940 = v46;
      v47 = re::introspectionAllocator((re *)v46);
      re::IntrospectionInfo<re::Optional<re::RenderGraphBufferHandle>>::get((uint64_t)v47, v48);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "outputDimensionsBuffer";
      *(_QWORD *)(v49 + 16) = &qword_25411E7C0;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x1500000000DLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_25411E948 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      v52 = re::IntrospectionInfo<re::Optional<unsigned int>>::get(1, v51);
      v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = "outputElementCount";
      *(_QWORD *)(v53 + 16) = v52;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0x1680000000ELL;
      *(_DWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_25411E950 = v53;
      v54 = re::introspectionAllocator((re *)v53);
      v55 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
      *(_DWORD *)v56 = 1;
      *(_QWORD *)(v56 + 8) = "outputDimensionsTargetMultiplier";
      *(_QWORD *)(v56 + 16) = v55;
      *(_QWORD *)(v56 + 24) = 0;
      *(_QWORD *)(v56 + 32) = 0x1700000000FLL;
      *(_DWORD *)(v56 + 40) = 0;
      *(_QWORD *)(v56 + 48) = 0;
      *(_QWORD *)(v56 + 56) = 0;
      *(_DWORD *)(v56 + 64) = 0;
      qword_25411E958 = v56;
      v57 = re::introspectionAllocator((re *)v56);
      v59 = re::IntrospectionInfo<re::Optional<float>>::get(1, v58);
      v60 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v57 + 32))(v57, 72, 8);
      *(_DWORD *)v60 = 1;
      *(_QWORD *)(v60 + 8) = "outputDimensionsBufferMultiplier";
      *(_QWORD *)(v60 + 16) = v59;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = 0x19000000010;
      *(_DWORD *)(v60 + 40) = 0;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_25411E960 = v60;
      __cxa_guard_release(&qword_25411E758);
    }
  }
  *((_QWORD *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 15;
  *((_QWORD *)this + 8) = &qword_25411E8F0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphComputeNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphComputeNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphComputeNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphComputeNode>;
  re::IntrospectionRegistry::add(this, v3);
  v61 = v63;
}

uint64_t *re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(re *a1)
{
  int v1;
  unsigned __int8 v2;
  int v3;
  re *v4;
  std::__shared_mutex_base *v5;
  uint64_t *v6;
  re::IntrospectionBase *v7;
  std::__shared_mutex_base *v8;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  v1 = (int)a1;
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::info);
      re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::info = (uint64_t)&off_24ED80AF0;
    }
  }
  if (v1)
  {
    if (re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v3 = re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3)
      return &re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::info;
    v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  v6 = (uint64_t *)re::internal::introspectionInfoStorage<re::ThreadGroupMemorySetting>;
  if (!re::internal::introspectionInfoStorage<re::ThreadGroupMemorySetting>)
  {
    v6 = re::allocInfo_ThreadGroupMemorySetting(a1);
    re::internal::introspectionInfoStorage<re::ThreadGroupMemorySetting> = v6;
    re::initInfo_ThreadGroupMemorySetting((re *)v6, v7);
  }
  if (re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::isInitialized)
  {
    if ((v1 & 1) == 0)
    {
LABEL_11:
      v8 = re::introspectionSharedMutex(a1);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::isInitialized = 1;
    v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::info, 0);
    qword_255825720 = 0x2800000003;
    dword_255825728 = v10;
    word_25582572C = 0;
    *(_QWORD *)&xmmword_255825730 = 0;
    *((_QWORD *)&xmmword_255825730 + 1) = 0xFFFFFFFFLL;
    qword_255825740 = (uint64_t)v6;
    unk_255825748 = 0;
    re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::info = (uint64_t)&off_24ED80AF0;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if ((BYTE8(v15) & 1) != 0)
      v13 = v16;
    else
      v13 = (char *)&v15 + 9;
    if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v15 = *((_OWORD *)v6 + 2);
    xmmword_255825730 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((v1 & 1) == 0)
      goto LABEL_11;
  }
  return &re::IntrospectionInfo<re::DynamicArray<re::ThreadGroupMemorySetting>>::get(BOOL)::info;
}

void re::IntrospectionInfo<re::Optional<re::RenderGraphTargetHandle>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_25411E760);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411E760))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_25411E780);
    qword_25411E780 = (uint64_t)&off_24ED80B88;
    __cxa_guard_release(&qword_25411E760);
  }
  if ((_MergedGlobals_433 & 1) == 0)
  {
    v3 = re::introspect_RenderGraphTargetHandle((re *)1, a2);
    if ((_MergedGlobals_433 & 1) == 0)
    {
      v4 = (uint64_t)v3;
      _MergedGlobals_433 = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E780, 0);
      qword_25411E790 = 0x180000000DLL;
      dword_25411E798 = v5;
      word_25411E79C = 0;
      *(_QWORD *)&xmmword_25411E7A0 = 0;
      *((_QWORD *)&xmmword_25411E7A0 + 1) = 0xFFFFFFFFLL;
      qword_25411E7B0 = v4;
      unk_25411E7B8 = 0;
      qword_25411E780 = (uint64_t)&off_24ED80B88;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_25411E780, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginOptionalType((uint64_t)&v16, v14, 0x18uLL, 8uLL, &v15);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v16, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_25411E7A0 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::RenderGraphBufferHandle>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_25411E768);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411E768))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_25411E7C0);
    qword_25411E7C0 = (uint64_t)&off_24ED80C08;
    __cxa_guard_release(&qword_25411E768);
  }
  if ((byte_25411E739 & 1) == 0)
  {
    v3 = re::introspect_RenderGraphBufferHandle((re *)1, a2);
    if ((byte_25411E739 & 1) == 0)
    {
      v4 = v3;
      byte_25411E739 = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E7C0, 0);
      *(_QWORD *)&algn_25411E7C8[8] = 0x180000000DLL;
      *(_DWORD *)&algn_25411E7C8[16] = v5;
      *(_WORD *)&algn_25411E7C8[20] = 0;
      *(_QWORD *)&xmmword_25411E7E0 = 0;
      *((_QWORD *)&xmmword_25411E7E0 + 1) = 0xFFFFFFFFLL;
      *(_QWORD *)algn_25411E7F0 = v4;
      *(_QWORD *)&algn_25411E7F0[8] = 0;
      qword_25411E7C0 = (uint64_t)&off_24ED80C08;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_25411E7C0, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *((_OWORD *)v4 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginOptionalType((uint64_t)&v16, v14, 0x18uLL, 8uLL, &v15);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v16, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_25411E7E0 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

re::RenderGraphComputeNodeBase *re::internal::defaultConstruct<re::RenderGraphComputeNode>(int a1, int a2, re::RenderGraphComputeNodeBase *this)
{
  re::RenderGraphComputeNodeBase *result;

  result = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(this);
  *(_QWORD *)result = &off_24ED80A30;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphComputeNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::RenderGraphComputeNodeBase *re::internal::defaultConstructV2<re::RenderGraphComputeNode>(re::RenderGraphComputeNodeBase *a1)
{
  re::RenderGraphComputeNodeBase *result;

  result = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(a1);
  *(_QWORD *)result = &off_24ED80A30;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphComputeNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphComputeNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphComputeNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphComputeNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphComputeNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphComputeNode>, this);
}

void re::RenderGraphComputeNode::~RenderGraphComputeNode(re::RenderGraphComputeNode *this)
{
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
  JUMPOUT(0x2276933B8);
}

void re::HashTable<unsigned int,re::RenderGraphBufferHandle,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 12;
        do
        {
          if ((*(_DWORD *)(v13 - 4) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 12);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned int,re::RenderGraphBufferHandle,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 12) = *(_DWORD *)v13;
            v21 = *(_QWORD *)(a1 + 16) + 32 * v17;
            *(_QWORD *)(v21 + 16) = 0;
            *(_QWORD *)(v21 + 24) = -1;
            *(_QWORD *)(v21 + 16) = *(_QWORD *)(v13 + 4);
            *(_QWORD *)(v21 + 24) = *(_QWORD *)(v13 + 12);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ThreadGroupMemorySetting>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 8 * *((_QWORD *)this + 2) - 8);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ThreadGroupMemorySetting>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

void re::DynamicArray<re::ThreadGroupMemorySetting>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 8 * v4);
      v6 = 8 * a2 - 8 * v4;
      if (v6 >= 1)
        bzero(v5, 8 * (((unint64_t)v6 >> 3) - ((unint64_t)v6 > 7)) + 8);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  v9 = *(_QWORD *)a2;
  if (*(re::Allocator **)a2 == a4)
  {
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    if (v9)
    {
      if (*(_QWORD *)(a2 + 32))
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      ++*(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity((_QWORD *)a2, a5);
  }
  ++*(_DWORD *)(a2 + 24);
  re::DynamicArray<re::ThreadGroupMemorySetting>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      v12 = *(char **)(a2 + 32);
      v13 = 8 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a4, 0);
        v12 += 8;
        v13 -= 8;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 8 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ThreadGroupMemorySetting>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionOptional<re::RenderGraphTargetHandle>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::RenderGraphTargetHandle>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::RenderGraphTargetHandle>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::RenderGraphTargetHandle>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

double re::IntrospectionOptional<re::RenderGraphTargetHandle>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v4[8];
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v4[0] = 1;
    v5 = 0;
    v6 = -1;
  }
  else
  {
    v4[0] = 0;
  }
  return re::Optional<re::RenderGraphTargetHandle>::operator=(a2, v4);
}

uint64_t re::IntrospectionOptional<re::RenderGraphTargetHandle>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

double re::Optional<re::RenderGraphTargetHandle>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  __int128 v6;

  v2 = *a2;
  if (*(_BYTE *)a1)
    v3 = 0;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    if (*(_BYTE *)a1)
      v4 = v2 == 0;
    else
      v4 = 0;
    if (v4)
    {
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v5 = 1;
      else
        v5 = v2 == 0;
      if (v5)
      {
        v6 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 8) = v6;
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = -1;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        *(_QWORD *)&v6 = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 16) = v6;
      }
    }
  }
  return *(double *)&v6;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

double re::TypeBuilderHelper::registerOptional<re::RenderGraphTargetHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3[8];
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3[0] = 1;
    v4 = *a2;
    v5 = a2[1];
  }
  else
  {
    v3[0] = 0;
  }
  return re::Optional<re::RenderGraphTargetHandle>::operator=(a1, v3);
}

_QWORD *re::IntrospectionOptional<re::RenderGraphBufferHandle>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::RenderGraphBufferHandle>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::RenderGraphBufferHandle>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::RenderGraphBufferHandle>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

double re::IntrospectionOptional<re::RenderGraphBufferHandle>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v4[8];
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v4[0] = 1;
    v5 = 0;
    v6 = -1;
  }
  else
  {
    v4[0] = 0;
  }
  return re::Optional<re::RenderGraphTargetHandle>::operator=(a2, v4);
}

uint64_t re::IntrospectionOptional<re::RenderGraphBufferHandle>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

double re::TypeBuilderHelper::registerOptional<re::RenderGraphBufferHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 v3[8];
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v3[0] = 1;
    v4 = *a2;
    v5 = a2[1];
  }
  else
  {
    v3[0] = 0;
  }
  return re::Optional<re::RenderGraphTargetHandle>::operator=(a1, v3);
}

re::RenderGraphComputeNodeBase *re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(re::RenderGraphComputeNodeBase *this)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;

  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v2 = off_24ED80970;
  v3 = (_QWORD *)((char *)v2 + 280);
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_QWORD *)v2 + 38) = 0;
  re::DynamicString::setCapacity(v3, 0);
  *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_BYTE *)this + 360) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_BYTE *)this + 400) = 0;
  *((_QWORD *)this + 51) = -1;
  *((_QWORD *)this + 52) = -1;
  *((_QWORD *)this + 53) = -1;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  return this;
}

uint64_t re::DepthStencilSplitterProvider::DepthStencilSplitterProvider(uint64_t a1, const re::DynamicString *a2)
{
  uint64_t v4;
  char v5;

  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *(_QWORD *)a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 8), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v4 + 40))();
  *(_QWORD *)a1 = &off_24ED80C88;
  *(_QWORD *)(a1 + 40) = 65290051;
  *(_QWORD *)(a1 + 48) = "Color";
  *(_QWORD *)(a1 + 56) = 65919651;
  *(_QWORD *)(a1 + 64) = "Depth";
  *(_QWORD *)(a1 + 72) = 0x11F25A259CLL;
  *(_QWORD *)(a1 + 80) = "Stencil";
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void re::DepthStencilSplitterProvider::~DepthStencilSplitterProvider(re::DepthStencilSplitterProvider *this)
{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::DepthStencilSplitterProvider *)((char *)this + 112));
  re::AssetHandle::~AssetHandle((re::DepthStencilSplitterProvider *)((char *)this + 88));
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  re::DepthStencilSplitterProvider::~DepthStencilSplitterProvider(this);
  JUMPOUT(0x2276933B8);
}

unint64_t re::DepthStencilSplitterProvider::prepareFrame(re::DepthStencilSplitterProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  signed int ScopePixelFormat;
  signed int v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t ScopeHash;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21[2];
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = *((_QWORD *)this + 7) & 0x7FFFFFFFFFFFFFFFLL;
  ScopePixelFormat = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v23);
  v22 = *((_QWORD *)this + 9) & 0x7FFFFFFFFFFFFFFFLL;
  v9 = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v22);
  v10 = strlen(a2);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a2, v10, 0, &v24);
    v11 = (v25 - 0x61C8864680B583E9 + (v24 << 6) + (v24 >> 2)) ^ v24;
  }
  else
  {
    v11 = 0;
  }
  v12 = strlen(a3);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)a3, v12, 0, &v24);
    v13 = ((v25 - 0x61C8864680B583E9 + (v24 << 6) + (v24 >> 2)) ^ v24) - 0x61C8864680B583E9;
  }
  else
  {
    v13 = 0x9E3779B97F4A7C17;
  }
  v14 = *(unsigned int *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)a4 + 32, ((v11 >> 2) + (v11 << 6) + v13) ^ v11)+ 484);
  v21[0] = 0x4C6F466C1137D991;
  v21[1] = (unint64_t)"DepthStencilSplitterProvider";
  ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v21, a2, a3);
  v16 = 0xBF58476D1CE4E5B9 * (ScopePixelFormat ^ ((unint64_t)ScopePixelFormat >> 30));
  v17 = (((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) ^ ((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) >> 31))
       - 0x61C8864680B583E9
       + (ScopeHash << 6)
       + (ScopeHash >> 2)) ^ ScopeHash;
  v18 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v9 ^ ((unint64_t)v9 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (v9 ^ ((unint64_t)v9 >> 30))) >> 27));
  v19 = ((v18 ^ (v18 >> 31)) - 0x61C8864680B583E9 + (v17 << 6) + (v17 >> 2)) ^ v17;
  return (v14 - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19;
}

void re::DepthStencilSplitterProvider::provide(re::DepthStencilSplitterProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unsigned int ScopePixelFormat;
  unsigned int v9;
  _BOOL4 v11;
  BOOL v13;
  _BOOL4 v15;
  _BOOL4 v16;
  re::DepthStencilSplitterProvider *v17;
  const char *v18;
  re::RenderFrame *v19;
  _BOOL4 v20;
  const char *v21;
  char v22;
  char v23;
  BOOL v24;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;

  v28 = *((_QWORD *)this + 7) & 0x7FFFFFFFFFFFFFFFLL;
  ScopePixelFormat = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v28);
  v29 = ScopePixelFormat;
  v26 = *((_QWORD *)this + 9) & 0x7FFFFFFFFFFFFFFFLL;
  v9 = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v26);
  v27 = v9;
  v11 = ScopePixelFormat != 250 && ScopePixelFormat != 252;
  v13 = ScopePixelFormat != 255 && ScopePixelFormat != 260;
  v15 = v9 != 255 && v9 != 260;
  if (!v13 && !v15)
  {
    v16 = v9 == 0;
    re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()((uint64_t)this, a3, a4, (int *)&v29, ScopePixelFormat == 0, "DepthStencilBlit");
    v17 = this;
    v18 = a3;
    v19 = a4;
    v20 = v16;
    v21 = "DepthStencilBlit";
LABEL_22:
    re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_1::operator()((uint64_t)v17, v18, v19, (int *)&v27, v20, v21);
    return;
  }
  v22 = v9 != 253 || v13;
  if ((v22 & 1) == 0)
  {
    re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()((uint64_t)this, a3, a4, (int *)&v29, ScopePixelFormat == 0, "DepthBlit");
    goto LABEL_46;
  }
  if (v9)
    v13 = 1;
  if (!v13)
  {
    re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()((uint64_t)this, a3, a4, (int *)&v29, ScopePixelFormat == 0, "DepthBlit");
    return;
  }
  if (!v11 && !v15)
  {
    v25 = v9 == 0;
    re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_3::operator()((uint64_t)this, a2, a3, a4, (int *)&v29, ScopePixelFormat == 0);
    v21 = "StencilBlit";
    v17 = this;
    v18 = a3;
    v19 = a4;
    v20 = v25;
    goto LABEL_22;
  }
  if (ScopePixelFormat)
    LOBYTE(v15) = 1;
  if (!v15)
  {
    v20 = v9 == 0;
    v21 = "StencilBlit";
    v17 = this;
    v18 = a3;
    v19 = a4;
    goto LABEL_22;
  }
  v23 = v9 != 253 || v11;
  if ((v23 & 1) == 0)
  {
    if (*(_BYTE *)(*((_QWORD *)a4 + 1) + 308))
      return;
    re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_3::operator()((uint64_t)this, a2, a3, a4, (int *)&v29, ScopePixelFormat == 0);
LABEL_46:
    re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_4::operator()((uint64_t)this, a2, a3, a4, (int *)&v27);
    return;
  }
  if (v11 || v9 != 0)
  {
    v24 = v9 != 253 || ScopePixelFormat != 0;
    if (!v24 && !*(_BYTE *)(*((_QWORD *)a4 + 1) + 308))
      goto LABEL_46;
  }
  else if (!*(_BYTE *)(*((_QWORD *)a4 + 1) + 308))
  {
    re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_3::operator()((uint64_t)this, a2, a3, a4, (int *)&v29, ScopePixelFormat == 0);
  }
}

uint16x4_t re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()(uint64_t a1, const char *a2, re::RenderFrame *this, int *a4, int a5, const char *a6)
{
  _QWORD *v12;
  int v18;
  const char *v19;
  uint64_t v20;
  re *RenderGraph;
  int32x4_t v22;
  int32x4_t v23;
  uint16x4_t result;
  re::RenderGraphNode *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[40];
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v12 = (_QWORD *)(a1 + 56);
  re::RenderFrame::tryGetInputTarget(this, *(const char **)(a1 + 64), 0, (double *)&v29);
  v27 = 0;
  v28 = -1;
  memset(&v32[4], 255, 24);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v32[32] = _D0;
  v33 = xmmword_226135530;
  v34 = xmmword_226135540;
  v35 = -1;
  v32[28] = 0;
  v36 = xmmword_2260FF4D0;
  v37 = 0;
  v18 = *a4;
  LODWORD(v31) = 3;
  HIDWORD(v31) = v18;
  *(_DWORD *)v32 = 2;
  if (re::ConstStringID::operator==(v12, re::RenderFrame::kEnvironmentDepthOutputLaneID))
    v19 = "FinalEnvironmentDepth";
  else
    v19 = "FinalDepth";
  re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v31, v19, &v27);
  v20 = 56;
  if (a5)
    v20 = 72;
  v26 = *(_QWORD *)(a1 + v20) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::inheritLaneProperties(this, &v26, (double *)&v27, 0);
  v31 = *(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v31, (double *)&v27, 0);
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(this, a2, 0);
  v22.i64[0] = v30;
  v22.i64[1] = v28;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  result = (uint16x4_t)vmovn_s32(vceqq_s32(v22, v23));
  result.i16[0] = vmaxv_u16(result);
  if ((result.i8[0] & 1) == 0)
  {
    v25 = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(RenderGraph, a6);
    *((_BYTE *)v25 + 360) = 1;
    v31 = v29;
    *(_QWORD *)v32 = v30;
    *(_QWORD *)&v32[8] = 0;
    *(_QWORD *)&v32[16] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v25 + 176), (__n128 *)&v31);
    v31 = v27;
    *(_QWORD *)v32 = v28;
    *(_QWORD *)&v32[8] = 0x400000000;
    *(_OWORD *)&v32[24] = xmmword_2260E5D70;
    LOWORD(v33) = 0;
    *(_QWORD *)((char *)&v33 + 4) = 0;
    return (uint16x4_t)re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v25 + 216), (uint64_t)&v31).n128_u64[0];
  }
  return result;
}

re *re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_4::operator()(uint64_t a1, const char *a2, const char *a3, re::RenderFrame *this, int *a5)
{
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  int v20;
  __int32 v21;
  re *result;
  int32x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  unsigned int v26;
  re *v27;
  uint64_t *v28;
  uint64_t *v29;
  _anonymous_namespace_ *v30;
  unsigned int v31;
  unint64_t *v32;
  __n128 v33;
  re::RenderGraphNode *v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int16 v39;
  char v40;
  uint64_t v41[2];
  uint64_t v42;
  int8x8_t v43;
  uint64_t v44;
  int8x8_t v45;
  __int128 v46;
  unint64_t v47;
  _BYTE v48[20];
  _BYTE v49[20];
  __int128 v50;
  __int128 v51;
  int v52;
  __int128 v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v10 = 0x9E3779B97F4A7C17;
  re::RenderFrame::tryGetInputTarget(this, *(const char **)(a1 + 80), 0, (double *)&v46);
  v11 = strlen(a2);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)a2, v11, 0, &v47);
    v12 = (*(_QWORD *)v48 - 0x61C8864680B583E9 + (v47 << 6) + (v47 >> 2)) ^ v47;
  }
  else
  {
    v12 = 0;
  }
  v13 = strlen(a3);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)a3, v13, 0, &v47);
    v10 = ((*(_QWORD *)v48 - 0x61C8864680B583E9 + (v47 << 6) + (v47 >> 2)) ^ v47) - 0x61C8864680B583E9;
  }
  v14 = re::RenderGraphDataStore::tryGet<re::CameraData>((uint64_t)this + 32, ((v12 >> 2) + (v12 << 6) + v10) ^ v12);
  v44 = 0;
  v45 = (int8x8_t)-1;
  v42 = 0;
  v43 = (int8x8_t)-1;
  *(_QWORD *)&v48[4] = -1;
  *(_QWORD *)&v48[12] = -1;
  *(_QWORD *)v49 = -1;
  v49[8] = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v49[12] = _D0;
  v50 = xmmword_226135530;
  v51 = xmmword_226135540;
  v52 = -1;
  v53 = xmmword_2260FF4D0;
  v54 = 0;
  v20 = *a5;
  LODWORD(v47) = 3;
  HIDWORD(v47) = v20;
  *(_DWORD *)v48 = 3;
  re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v47, "FinalStencil", &v44);
  if (*(_DWORD *)(v14 + 484) >= 2u)
  {
    *(_DWORD *)&v48[12] = *(_DWORD *)(v14 + 484);
    *(_DWORD *)v48 = 8;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v47, "FinalStencil[MSAA]", &v42);
    v35.n128_u64[0] = *(_QWORD *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::addTargetOutput(this, (uint64_t *)&v35, (double *)&v42, 0);
    v41[0] = v44;
    v41[1] = (uint64_t)v45;
    v21 = v43.i32[0];
    *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), v41)
              + 80) = v21;
    v35.n128_u64[0] = *(_QWORD *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::inheritLaneProperties(this, (uint64_t *)&v35, (double *)&v42, 0);
  }
  v35.n128_u64[0] = *(_QWORD *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::inheritLaneProperties(this, (uint64_t *)&v35, (double *)&v44, 0);
  v47 = *(_QWORD *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, (uint64_t *)&v47, (double *)&v44, 0);
  result = (re *)re::RenderFrame::makeRenderGraph(this, a3, 0);
  v23.i64[0] = *((_QWORD *)&v46 + 1);
  v23.u64[1] = (unint64_t)v45;
  v24.i64[0] = -1;
  v24.i64[1] = -1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v23, v24))) & 1) == 0)
  {
    v25 = *(_QWORD *)(a1 + 120);
    if (v25)
    {
      v26 = atomic_load((unsigned int *)(v25 + 704));
      if (v26 == 2)
      {
        v27 = result;
        v28 = (uint64_t *)(a1 + 112);
        v29 = (uint64_t *)re::RenderGraph::addNode<re::RenderGraphFullscreenNode>(result, "StencilCopy");
        re::AssetHandle::operator=(v29 + 33, v28);
        v47 = (unint64_t)"fullscreenarray";
        *(_QWORD *)v48 = 15;
        v30 = re::DynamicString::operator=((re::DynamicString *)(v29 + 36), (uint64_t)&v47);
        v35.n128_u64[1] = 0;
        v36 = 0;
        v37 = 0;
        re::DynamicString::setCapacity(&v35, 0);
        *(_QWORD *)&v38 = 0;
        *((_QWORD *)&v38 + 1) = -1;
        v39 = 0;
        v40 = 0;
        v47 = (unint64_t)"inputImage";
        *(_QWORD *)v48 = 10;
        re::DynamicString::operator=((re::DynamicString *)&v35, (uint64_t)&v47);
        v38 = v46;
        v40 = 1;
        LOBYTE(v39) = 1;
        re::RenderGraphFullscreenNode::setRenderGraphTextureCommand((uint64_t)v29, &v35);
        v31 = *(_DWORD *)(v14 + 484) > 1u;
        v32 = (unint64_t *)&v44;
        if (*(_DWORD *)(v14 + 484) > 1u)
          v32 = (unint64_t *)&v42;
        v47 = *v32;
        *(int8x8_t *)v48 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v31), 0x1FuLL)), v43, v45);
        *(_QWORD *)&v48[8] = 0x300000000;
        *(_OWORD *)&v49[4] = xmmword_2260E5D70;
        LOWORD(v50) = 0;
        *(_QWORD *)((char *)&v50 + 4) = 0;
        v33 = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v29 + 27), (uint64_t)&v47);
        (*(void (**)(uint64_t *, const char *, const char *, re::RenderFrame *, __n128))(*v29 + 80))(v29, a2, a3, this, v33);
        if (*(_DWORD *)(v14 + 484) >= 2u)
        {
          v34 = re::RenderGraph::addNode<re::RenderGraphResolveNode>(v27, "StencilResolve");
          v47 = v44;
          *(int8x8_t *)v48 = v45;
          *(_QWORD *)&v48[8] = 0x800000000;
          *(_OWORD *)&v49[4] = xmmword_2260E5D70;
          LOWORD(v50) = 0;
          *(_QWORD *)((char *)&v50 + 4) = 0;
          re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v34 + 216), (uint64_t)&v47);
          re::RenderGraphResolveNode::configure(v34, a2, a3, this);
        }
        result = (re *)v35.n128_u64[0];
        if (v35.n128_u64[0])
        {
          if ((v35.n128_u8[8] & 1) != 0)
            return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v35.n128_u64[0] + 40))();
        }
      }
    }
  }
  return result;
}

re *re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_3::operator()(uint64_t a1, const char *a2, const char *a3, re::RenderFrame *this, int *a5, int a6)
{
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  uint64_t v16;
  int v22;
  __int32 v23;
  uint64_t v24;
  uint64_t v25;
  re *result;
  int32x4_t v27;
  int32x4_t v28;
  uint64_t v29;
  unsigned int v30;
  re *v31;
  uint64_t *v32;
  uint64_t *v33;
  _anonymous_namespace_ *v34;
  unsigned int v35;
  unint64_t *v36;
  __n128 v37;
  re::RenderGraphNode *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int16 v43;
  char v44;
  uint64_t v45[2];
  uint64_t v46;
  int8x8_t v47;
  uint64_t v48;
  int8x8_t v49;
  __int128 v50;
  unint64_t v51;
  _BYTE v52[20];
  _BYTE v53[20];
  __int128 v54;
  __int128 v55;
  int v56;
  __int128 v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v12 = 0x9E3779B97F4A7C17;
  re::RenderFrame::tryGetInputTarget(this, *(const char **)(a1 + 64), 0, (double *)&v50);
  v13 = strlen(a2);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)a2, v13, 0, &v51);
    v14 = (*(_QWORD *)v52 - 0x61C8864680B583E9 + (v51 << 6) + (v51 >> 2)) ^ v51;
  }
  else
  {
    v14 = 0;
  }
  v15 = strlen(a3);
  if (v15)
  {
    MurmurHash3_x64_128((uint64_t)a3, v15, 0, &v51);
    v12 = ((*(_QWORD *)v52 - 0x61C8864680B583E9 + (v51 << 6) + (v51 >> 2)) ^ v51) - 0x61C8864680B583E9;
  }
  v16 = re::RenderGraphDataStore::tryGet<re::CameraData>((uint64_t)this + 32, ((v14 >> 2) + (v14 << 6) + v12) ^ v14);
  v48 = 0;
  v49 = (int8x8_t)-1;
  v46 = 0;
  v47 = (int8x8_t)-1;
  *(_QWORD *)&v52[4] = -1;
  *(_QWORD *)&v52[12] = -1;
  *(_QWORD *)v53 = -1;
  v53[8] = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v53[12] = _D0;
  v54 = xmmword_226135530;
  v55 = xmmword_226135540;
  v56 = -1;
  v57 = xmmword_2260FF4D0;
  v58 = 0;
  v22 = *a5;
  LODWORD(v51) = 3;
  HIDWORD(v51) = v22;
  *(_DWORD *)v52 = 3;
  re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v51, "FinalDepth", &v48);
  if (*(_DWORD *)(v16 + 484) >= 2u)
  {
    *(_DWORD *)&v52[12] = *(_DWORD *)(v16 + 484);
    *(_DWORD *)v52 = 8;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v51, "FinalDepth[MSAA]", &v46);
    v39.n128_u64[0] = *(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::addTargetOutput(this, (uint64_t *)&v39, (double *)&v46, 0);
    v45[0] = v48;
    v45[1] = (uint64_t)v49;
    v23 = v47.i32[0];
    *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), v45)
              + 80) = v23;
    v24 = 56;
    if (a6)
      v24 = 72;
    v39.n128_u64[0] = *(_QWORD *)(a1 + v24) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::inheritLaneProperties(this, (uint64_t *)&v39, (double *)&v46, 0);
  }
  v25 = 56;
  if (a6)
    v25 = 72;
  v39.n128_u64[0] = *(_QWORD *)(a1 + v25) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::inheritLaneProperties(this, (uint64_t *)&v39, (double *)&v48, 0);
  v51 = *(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, (uint64_t *)&v51, (double *)&v48, 0);
  result = (re *)re::RenderFrame::makeRenderGraph(this, a3, 0);
  v27.i64[0] = *((_QWORD *)&v50 + 1);
  v27.u64[1] = (unint64_t)v49;
  v28.i64[0] = -1;
  v28.i64[1] = -1;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v27, v28))) & 1) == 0)
  {
    v29 = *(_QWORD *)(a1 + 96);
    if (v29)
    {
      v30 = atomic_load((unsigned int *)(v29 + 704));
      if (v30 == 2)
      {
        v31 = result;
        v32 = (uint64_t *)(a1 + 88);
        v33 = (uint64_t *)re::RenderGraph::addNode<re::RenderGraphFullscreenNode>(result, "DepthCopy");
        re::AssetHandle::operator=(v33 + 33, v32);
        v51 = (unint64_t)"fullscreenarray";
        *(_QWORD *)v52 = 15;
        v34 = re::DynamicString::operator=((re::DynamicString *)(v33 + 36), (uint64_t)&v51);
        v39.n128_u64[1] = 0;
        v40 = 0;
        v41 = 0;
        re::DynamicString::setCapacity(&v39, 0);
        *(_QWORD *)&v42 = 0;
        *((_QWORD *)&v42 + 1) = -1;
        v43 = 0;
        v44 = 0;
        v51 = (unint64_t)"inputImage";
        *(_QWORD *)v52 = 10;
        re::DynamicString::operator=((re::DynamicString *)&v39, (uint64_t)&v51);
        v42 = v50;
        v44 = 1;
        LOBYTE(v43) = 0;
        re::RenderGraphFullscreenNode::setRenderGraphTextureCommand((uint64_t)v33, &v39);
        v35 = *(_DWORD *)(v16 + 484) > 1u;
        v36 = (unint64_t *)&v48;
        if (*(_DWORD *)(v16 + 484) > 1u)
          v36 = (unint64_t *)&v46;
        v51 = *v36;
        *(int8x8_t *)v52 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v35), 0x1FuLL)), v47, v49);
        *(_QWORD *)&v52[8] = 0x200000000;
        *(_OWORD *)&v53[4] = xmmword_2260E5D70;
        LOWORD(v54) = 0;
        *(_QWORD *)((char *)&v54 + 4) = 0;
        v37 = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v33 + 27), (uint64_t)&v51);
        (*(void (**)(uint64_t *, const char *, const char *, re::RenderFrame *, __n128))(*v33 + 80))(v33, a2, a3, this, v37);
        if (*(_DWORD *)(v16 + 484) >= 2u)
        {
          v38 = re::RenderGraph::addNode<re::RenderGraphResolveNode>(v31, "DepthResolve");
          v51 = v48;
          *(int8x8_t *)v52 = v49;
          *(_QWORD *)&v52[8] = 0x700000000;
          *(_OWORD *)&v53[4] = xmmword_2260E5D70;
          LOWORD(v54) = 0;
          *(_QWORD *)((char *)&v54 + 4) = 0;
          re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v38 + 216), (uint64_t)&v51);
          re::RenderGraphResolveNode::configure(v38, a2, a3, this);
        }
        result = (re *)v39.n128_u64[0];
        if (v39.n128_u64[0])
        {
          if ((v39.n128_u8[8] & 1) != 0)
            return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v39.n128_u64[0] + 40))();
        }
      }
    }
  }
  return result;
}

uint16x4_t re::DepthStencilSplitterProvider::provide(char const*,char const*,re::RenderFrame &)const::$_1::operator()(uint64_t a1, const char *a2, re::RenderFrame *this, int *a4, int a5, const char *a6)
{
  _QWORD *v12;
  int v18;
  const char *v19;
  uint64_t v20;
  re *RenderGraph;
  int32x4_t v22;
  int32x4_t v23;
  uint16x4_t result;
  re::RenderGraphNode *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[40];
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v12 = (_QWORD *)(a1 + 72);
  re::RenderFrame::tryGetInputTarget(this, *(const char **)(a1 + 80), 0, (double *)&v29);
  v27 = 0;
  v28 = -1;
  memset(&v32[4], 255, 24);
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v32[32] = _D0;
  v33 = xmmword_226135530;
  v34 = xmmword_226135540;
  v35 = -1;
  v32[28] = 0;
  v36 = xmmword_2260FF4D0;
  v37 = 0;
  v18 = *a4;
  LODWORD(v31) = 3;
  HIDWORD(v31) = v18;
  *(_DWORD *)v32 = 2;
  if (re::ConstStringID::operator==(v12, re::RenderFrame::kEnvironmentStencilOutputLaneID))
    v19 = "FinalEnvironmentStencil";
  else
    v19 = "FinalStencil";
  re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v31, v19, &v27);
  v20 = 72;
  if (a5)
    v20 = 56;
  v26 = *(_QWORD *)(a1 + v20) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::inheritLaneProperties(this, &v26, (double *)&v27, 0);
  v31 = *(_QWORD *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v31, (double *)&v27, 0);
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(this, a2, 0);
  v22.i64[0] = v30;
  v22.i64[1] = v28;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  result = (uint16x4_t)vmovn_s32(vceqq_s32(v22, v23));
  result.i16[0] = vmaxv_u16(result);
  if ((result.i8[0] & 1) == 0)
  {
    v25 = re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(RenderGraph, a6);
    *((_BYTE *)v25 + 360) = 1;
    v31 = v29;
    *(_QWORD *)v32 = v30;
    *(_DWORD *)&v32[8] = 0;
    *(_WORD *)&v32[12] = 256;
    v32[14] = 0;
    *(_QWORD *)&v32[16] = 2;
    re::DynamicArray<re::TargetRead>::add((re::RenderGraphNode *)((char *)v25 + 176), (__n128 *)&v31);
    v31 = v27;
    *(_QWORD *)v32 = v28;
    *(_QWORD *)&v32[8] = 0x400000000;
    *(_OWORD *)&v32[24] = xmmword_2260E5D70;
    LOWORD(v33) = 0;
    *(_QWORD *)((char *)&v33 + 4) = 0;
    return (uint16x4_t)re::DynamicArray<re::TargetWrite>::add((re::RenderGraphNode *)((char *)v25 + 216), (uint64_t)&v31).n128_u64[0];
  }
  return result;
}

uint64_t re::RealityDataPipe::RealityDataPipe(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED80CF0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  re::BucketArray<re::DynamicArray<re::RenderProfilerText>,4ul>::init(a1 + 72, a2, 1uLL);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 1;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_DWORD *)(a1 + 424) = 1;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 536) = 1;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 1;
  *(_DWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 1;
  *(_DWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_DWORD *)(a1 + 704) = 1;
  *(_DWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 760) = 1;
  *(_DWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  re::BucketArray<re::BlurPlanesRenderFrameData,4ul>::init(a1 + 744, a2, 1uLL);
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 816) = 1;
  *(_QWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_DWORD *)(a1 + 848) = 0;
  re::BucketArray<re::TintContext,4ul>::init(a1 + 800, a2, 1uLL);
  *(_OWORD *)(a1 + 856) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_QWORD *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_DWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_DWORD *)(a1 + 928) = 1;
  *(_QWORD *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_DWORD *)(a1 + 960) = 0;
  re::BucketArray<re::MeshSceneCollection,4ul>::init(a1 + 912, a2, 1uLL);
  *(_OWORD *)(a1 + 968) = 0u;
  *(_DWORD *)(a1 + 984) = 1;
  *(_QWORD *)(a1 + 992) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_DWORD *)(a1 + 1016) = 0;
  re::BucketArray<re::MeshDeformationCollection,4ul>::init(a1 + 968, a2, 1uLL);
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_DWORD *)(a1 + 1040) = 1;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_DWORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_DWORD *)(a1 + 1096) = 1;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_DWORD *)(a1 + 1152) = 1;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_DWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  re::BucketArray<re::StaticTextInfo,4ul>::init(a1 + 1136, a2, 1uLL);
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_DWORD *)(a1 + 1208) = 1;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_DWORD *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_DWORD *)(a1 + 1264) = 1;
  *(_QWORD *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_DWORD *)(a1 + 1320) = 1;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_QWORD *)(a1 + 1344) = 0;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_DWORD *)(a1 + 1376) = 1;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_DWORD *)(a1 + 1408) = 0;
  *(_QWORD *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_DWORD *)(a1 + 1432) = 1;
  *(_QWORD *)(a1 + 1456) = 0;
  *(_DWORD *)(a1 + 1464) = 0;
  *(_OWORD *)(a1 + 1440) = 0u;
  re::BucketArray<re::FilterViewMeshScenes,4ul>::init(a1 + 1416, a2, 1uLL);
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_DWORD *)(a1 + 1488) = 1;
  *(_QWORD *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_DWORD *)(a1 + 1520) = 0;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_DWORD *)(a1 + 1544) = 1;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_DWORD *)(a1 + 1576) = 0;
  re::BucketArray<re::SceneCRWSReferencePosition,4ul>::init(a1 + 1528, a2, 1uLL);
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1600) = 1;
  *(_QWORD *)(a1 + 1608) = 0;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_DWORD *)(a1 + 1632) = 0;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_DWORD *)(a1 + 1656) = 1;
  *(_QWORD *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_DWORD *)(a1 + 1688) = 0;
  re::BucketArray<re::MeshSortingCollection,4ul>::init(a1 + 1640, a2, 1uLL);
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_DWORD *)(a1 + 1712) = 1;
  *(_QWORD *)(a1 + 1720) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_DWORD *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_DWORD *)(a1 + 1768) = 1;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_DWORD *)(a1 + 1800) = 0;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_DWORD *)(a1 + 1824) = 1;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_DWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_DWORD *)(a1 + 1880) = 1;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1888) = 0;
  *(_DWORD *)(a1 + 1912) = 0;
  *(_QWORD *)(a1 + 1904) = 0;
  return a1;
}

void re::RealityDataPipe::~RealityDataPipe(re::RealityDataPipe *this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t j;
  _QWORD *v8;
  uint64_t v9;
  unint64_t k;
  uint64_t v11;
  uint64_t v12;
  unint64_t m;
  uint64_t v14;
  unint64_t n;
  uint64_t *v16;
  uint64_t v17;
  unint64_t ii;
  uint64_t v19;
  uint64_t v20;
  unint64_t jj;
  uint64_t v22;
  unint64_t kk;
  uint64_t v24;
  unint64_t mm;
  uint64_t v26;
  uint64_t v27;
  unint64_t nn;
  uint64_t v29;
  uint64_t v30;
  unint64_t i1;
  uint64_t v32;
  uint64_t v33;
  unint64_t i2;
  uint64_t v35;
  uint64_t v36;
  unint64_t i3;
  uint64_t v38;
  unint64_t i4;
  uint64_t v40;
  uint64_t v41;
  unint64_t i5;
  uint64_t v43;
  uint64_t v44;
  unint64_t i6;
  uint64_t v46;
  uint64_t v47;
  unint64_t i7;
  uint64_t v49;
  uint64_t v50;
  unint64_t i8;
  uint64_t v52;
  unint64_t i9;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t i10;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t i11;
  re::MeshShadowPerFrameUpdateData *v62;
  uint64_t v63;
  unint64_t i12;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t i13;
  uint64_t v72;
  unint64_t i14;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t i15;
  uint64_t v79;
  unint64_t i16;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  unint64_t i17;
  uint64_t v86;
  uint64_t v87;
  unint64_t i18;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  unint64_t i19;
  uint64_t v94;
  unint64_t i20;
  uint64_t v96;
  unint64_t i21;
  uint64_t v98;
  uint64_t v99;
  unint64_t i22;
  uint64_t v101;

  *(_QWORD *)this = &off_24ED80CF0;
  v2 = (uint64_t *)((char *)this + 1864);
  v3 = *((_QWORD *)this + 238);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = re::BucketArray<re::VirtualEnvironmentProbeContext,4ul>::operator[]((uint64_t)v2, i);
      re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit(v5);
    }
  }
  while (*((_QWORD *)this + 234))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  *((_QWORD *)this + 238) = 0;
  ++*((_DWORD *)this + 478);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  v6 = *((_QWORD *)this + 231);
  if (v6)
  {
    for (j = 0; j != v6; ++j)
    {
      v8 = (_QWORD *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1808, j);
      if (*v8)
      {
        if (v8[4])
          (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 40))(*v8);
        v8[4] = 0;
        v8[1] = 0;
        v8[2] = 0;
        *v8 = 0;
        ++*((_DWORD *)v8 + 6);
      }
    }
  }
  while (*((_QWORD *)this + 227))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 226);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1808);
  *((_QWORD *)this + 231) = 0;
  ++*((_DWORD *)this + 464);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1808);
  v9 = *((_QWORD *)this + 224);
  if (v9)
  {
    for (k = 0; k != v9; ++k)
    {
      v11 = re::BucketArray<re::IBLContext,4ul>::operator[]((uint64_t)this + 1752, k);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v11 + 8));

    }
  }
  while (*((_QWORD *)this + 220))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 219);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1752);
  *((_QWORD *)this + 224) = 0;
  ++*((_DWORD *)this + 450);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1752);
  v12 = *((_QWORD *)this + 217);
  if (v12)
  {
    for (m = 0; m != v12; ++m)
      re::BucketArray<SceneUnderstandingFlagEmitterData,4ul>::operator[]((uint64_t)this + 1696, m);
  }
  while (*((_QWORD *)this + 213))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 212);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1696);
  *((_QWORD *)this + 217) = 0;
  ++*((_DWORD *)this + 436);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1696);
  v14 = *((_QWORD *)this + 210);
  if (v14)
  {
    for (n = 0; n != v14; ++n)
    {
      v16 = (uint64_t *)re::BucketArray<re::MeshSortingCollection,4ul>::operator[]((uint64_t)this + 1640, n);
      re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(v16 + 18);
      re::HashTable<unsigned long long,re::MeshSortingCollection::GroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v16 + 12);
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(v16 + 6);
      re::HashTable<unsigned long long,re::MeshSortingCollection::EntitySortingData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v16);
    }
  }
  while (*((_QWORD *)this + 206))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 205);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1640);
  *((_QWORD *)this + 210) = 0;
  ++*((_DWORD *)this + 422);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1640);
  v17 = *((_QWORD *)this + 203);
  if (v17)
  {
    for (ii = 0; ii != v17; ++ii)
    {
      v19 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1584, ii);
      re::DynamicArray<re::PlanarReflectionData>::deinit(v19);
    }
  }
  while (*((_QWORD *)this + 199))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 198);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1584);
  *((_QWORD *)this + 203) = 0;
  ++*((_DWORD *)this + 408);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1584);
  v20 = *((_QWORD *)this + 196);
  if (v20)
  {
    for (jj = 0; jj != v20; ++jj)
      re::BucketArray<re::PipelineCompilationData,4ul>::operator[]((uint64_t)this + 1528, jj);
  }
  while (*((_QWORD *)this + 192))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 191);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1528);
  *((_QWORD *)this + 196) = 0;
  ++*((_DWORD *)this + 394);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1528);
  v22 = *((_QWORD *)this + 189);
  if (v22)
  {
    for (kk = 0; kk != v22; ++kk)
      re::BucketArray<re::ProbeLightingEnabledMetadata,4ul>::operator[]((uint64_t)this + 1472, kk);
  }
  while (*((_QWORD *)this + 185))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 184);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1472);
  *((_QWORD *)this + 189) = 0;
  ++*((_DWORD *)this + 380);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1472);
  v24 = *((_QWORD *)this + 182);
  if (v24)
  {
    for (mm = 0; mm != v24; ++mm)
    {
      v26 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1416, mm);
      re::DynamicArray<re::MeshScene>::deinit(v26);
    }
  }
  while (*((_QWORD *)this + 178))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 177);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1416);
  *((_QWORD *)this + 182) = 0;
  ++*((_DWORD *)this + 366);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1416);
  v27 = *((_QWORD *)this + 175);
  if (v27)
  {
    for (nn = 0; nn != v27; ++nn)
    {
      v29 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1360, nn);
      re::DynamicArray<re::StencilPortal>::deinit(v29);
    }
  }
  while (*((_QWORD *)this + 171))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 170);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1360);
  *((_QWORD *)this + 175) = 0;
  ++*((_DWORD *)this + 352);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1360);
  v30 = *((_QWORD *)this + 168);
  if (v30)
  {
    for (i1 = 0; i1 != v30; ++i1)
    {
      v32 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1304, i1);
      re::DynamicArray<re::RenderGraphFileProvider>::deinit(v32);
    }
  }
  while (*((_QWORD *)this + 164))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 163);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1304);
  *((_QWORD *)this + 168) = 0;
  ++*((_DWORD *)this + 338);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1304);
  re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::deinit((uint64_t)this + 1248);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1248);
  v33 = *((_QWORD *)this + 154);
  if (v33)
  {
    for (i2 = 0; i2 != v33; ++i2)
    {
      v35 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1192, i2);
      re::DynamicArray<re::RenderText>::deinit(v35);
    }
  }
  while (*((_QWORD *)this + 150))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 149);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1192);
  *((_QWORD *)this + 154) = 0;
  ++*((_DWORD *)this + 310);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1192);
  v36 = *((_QWORD *)this + 147);
  if (v36)
  {
    for (i3 = 0; i3 != v36; ++i3)
      re::BucketArray<unsigned long,4ul>::operator[]((uint64_t)this + 1136, i3);
  }
  while (*((_QWORD *)this + 143))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 142);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1136);
  *((_QWORD *)this + 147) = 0;
  ++*((_DWORD *)this + 296);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1136);
  v38 = *((_QWORD *)this + 140);
  if (v38)
  {
    for (i4 = 0; i4 != v38; ++i4)
    {
      v40 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1080, i4);
      re::DynamicArray<re::CameraMultiView>::deinit(v40);
    }
  }
  while (*((_QWORD *)this + 136))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 135);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1080);
  *((_QWORD *)this + 140) = 0;
  ++*((_DWORD *)this + 282);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1080);
  v41 = *((_QWORD *)this + 133);
  if (v41)
  {
    for (i5 = 0; i5 != v41; ++i5)
    {
      v43 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1024, i5);
      re::DynamicArray<re::CameraView>::deinit(v43);
    }
  }
  while (*((_QWORD *)this + 129))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 128);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1024);
  *((_QWORD *)this + 133) = 0;
  ++*((_DWORD *)this + 268);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1024);
  re::BucketArray<re::MeshDeformationCollection,4ul>::deinit((uint64_t)this + 968);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 968);
  v44 = *((_QWORD *)this + 119);
  if (v44)
  {
    for (i6 = 0; i6 != v44; ++i6)
    {
      v46 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 912, i6);
      re::DynamicArray<re::MeshScene>::deinit(v46);
    }
  }
  while (*((_QWORD *)this + 115))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 114);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 912);
  *((_QWORD *)this + 119) = 0;
  ++*((_DWORD *)this + 240);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 912);
  v47 = *((_QWORD *)this + 112);
  if (v47)
  {
    for (i7 = 0; i7 != v47; ++i7)
    {
      v49 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 856, i7);
      re::StringID::destroyString((re::StringID *)(v49 + 8));
    }
  }
  while (*((_QWORD *)this + 108))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 107);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 856);
  *((_QWORD *)this + 112) = 0;
  ++*((_DWORD *)this + 226);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 856);
  v50 = *((_QWORD *)this + 105);
  if (v50)
  {
    for (i8 = 0; i8 != v50; ++i8)
      re::BucketArray<re::SFBSystemShellBlurContext,4ul>::operator[]((uint64_t)this + 800, i8);
  }
  while (*((_QWORD *)this + 101))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 100);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 800);
  *((_QWORD *)this + 105) = 0;
  ++*((_DWORD *)this + 212);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 800);
  v52 = *((_QWORD *)this + 98);
  if (v52)
  {
    for (i9 = 0; i9 != v52; ++i9)
    {
      v54 = (_QWORD *)re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[]((uint64_t)this + 744, i9);
      v55 = v54[5];
      if (v55)
      {
        if (v54[9])
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 40))(v55);
        v54[9] = 0;
        v54[6] = 0;
        v54[7] = 0;
        v54[5] = 0;
        ++*((_DWORD *)v54 + 16);
      }
      if (*v54)
      {
        if (v54[4])
          (*(void (**)(_QWORD))(*(_QWORD *)*v54 + 40))(*v54);
        v54[4] = 0;
        v54[1] = 0;
        v54[2] = 0;
        *v54 = 0;
        ++*((_DWORD *)v54 + 6);
      }
    }
  }
  while (*((_QWORD *)this + 94))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 93);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 744);
  *((_QWORD *)this + 98) = 0;
  ++*((_DWORD *)this + 198);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 744);
  v56 = *((_QWORD *)this + 91);
  if (v56)
  {
    for (i10 = 0; i10 != v56; ++i10)
    {
      v58 = re::BucketArray<re::IBLContext,4ul>::operator[]((uint64_t)this + 688, i10);
      v59 = *(void **)(v58 + 40);
      if (v59)
      {

        *(_QWORD *)(v58 + 40) = 0;
      }
      re::DynamicArray<re::IBL>::deinit(v58);
    }
  }
  while (*((_QWORD *)this + 87))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 86);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 688);
  *((_QWORD *)this + 91) = 0;
  ++*((_DWORD *)this + 184);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 688);
  v60 = *((_QWORD *)this + 84);
  if (v60)
  {
    for (i11 = 0; i11 != v60; ++i11)
    {
      v62 = (re::MeshShadowPerFrameUpdateData *)re::BucketArray<re::MeshShadowPerFrameUpdateData,4ul>::operator[]((uint64_t)this + 632, i11);
      re::MeshShadowPerFrameUpdateData::~MeshShadowPerFrameUpdateData(v62);
    }
  }
  while (*((_QWORD *)this + 80))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 79);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 632);
  *((_QWORD *)this + 84) = 0;
  ++*((_DWORD *)this + 170);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 632);
  v63 = *((_QWORD *)this + 77);
  if (v63)
  {
    for (i12 = 0; i12 != v63; ++i12)
    {
      v65 = re::BucketArray<re::ProjectiveMeshShadowBuilderInputGlobalData,4ul>::operator[]((uint64_t)this + 576, i12);
      v66 = (_QWORD *)v65;
      if (*(_BYTE *)(v65 + 56))
        re::StringID::destroyString((re::StringID *)(v65 + 64));
      v67 = v66[5];
      if (v67)
      {

        v66[5] = 0;
      }
      v68 = v66[4];
      if (v68)
      {

        v66[4] = 0;
      }
      v69 = v66[3];
      if (v69)
      {

        v66[3] = 0;
      }
    }
  }
  while (*((_QWORD *)this + 73))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 72);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 576);
  *((_QWORD *)this + 77) = 0;
  ++*((_DWORD *)this + 156);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 576);
  v70 = *((_QWORD *)this + 70);
  if (v70)
  {
    for (i13 = 0; i13 != v70; ++i13)
      re::BucketArray<re::ProjectiveShadowBuilderInputGlobalData,4ul>::operator[]((uint64_t)this + 520, i13);
  }
  while (*((_QWORD *)this + 66))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 65);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 520);
  *((_QWORD *)this + 70) = 0;
  ++*((_DWORD *)this + 142);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 520);
  v72 = *((_QWORD *)this + 63);
  if (v72)
  {
    for (i14 = 0; i14 != v72; ++i14)
    {
      v74 = re::BucketArray<re::OpenSkyData,4ul>::operator[]((uint64_t)this + 464, i14);
      v75 = *(_QWORD *)(v74 + 128);
      if (v75)
      {
        if (*(_QWORD *)(v74 + 160))
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 40))(v75);
        *(_QWORD *)(v74 + 160) = 0;
        *(_QWORD *)(v74 + 136) = 0;
        *(_QWORD *)(v74 + 144) = 0;
        *(_QWORD *)(v74 + 128) = 0;
        ++*(_DWORD *)(v74 + 152);
      }
      v76 = *(_QWORD *)(v74 + 88);
      if (v76)
      {
        if (*(_QWORD *)(v74 + 120))
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
        *(_QWORD *)(v74 + 120) = 0;
        *(_QWORD *)(v74 + 96) = 0;
        *(_QWORD *)(v74 + 104) = 0;
        *(_QWORD *)(v74 + 88) = 0;
        ++*(_DWORD *)(v74 + 112);
      }
    }
  }
  while (*((_QWORD *)this + 59))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 58);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 464);
  *((_QWORD *)this + 63) = 0;
  ++*((_DWORD *)this + 128);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 464);
  v77 = *((_QWORD *)this + 56);
  if (v77)
  {
    for (i15 = 0; i15 != v77; ++i15)
      re::BucketArray<re::SFBSystemShellBlurContext,4ul>::operator[]((uint64_t)this + 408, i15);
  }
  while (*((_QWORD *)this + 52))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 51);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 408);
  *((_QWORD *)this + 56) = 0;
  ++*((_DWORD *)this + 114);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 408);
  v79 = *((_QWORD *)this + 49);
  if (v79)
  {
    for (i16 = 0; i16 != v79; ++i16)
    {
      v81 = re::BucketArray<re::CameraStreamContext,4ul>::operator[]((uint64_t)this + 352, i16);
      v82 = *(void **)(v81 + 1824);
      if (v82)
      {

        *(_QWORD *)(v81 + 1824) = 0;
      }
      v83 = *(void **)(v81 + 1816);
      if (v83)
      {

        *(_QWORD *)(v81 + 1816) = 0;
      }
      re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::~SmallHashTable(v81);
    }
  }
  while (*((_QWORD *)this + 45))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 44);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 352);
  *((_QWORD *)this + 49) = 0;
  ++*((_DWORD *)this + 100);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 352);
  v84 = *((_QWORD *)this + 42);
  if (v84)
  {
    for (i17 = 0; i17 != v84; ++i17)
    {
      v86 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 296, i17);
      re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit(v86);
    }
  }
  while (*((_QWORD *)this + 38))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 37);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 296);
  *((_QWORD *)this + 42) = 0;
  ++*((_DWORD *)this + 86);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 296);
  v87 = *((_QWORD *)this + 35);
  if (v87)
  {
    for (i18 = 0; i18 != v87; ++i18)
    {
      v89 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 240, i18);
      v90 = *(void **)(v89 + 16);
      if (v90)
      {

        *(_QWORD *)(v89 + 16) = 0;
      }
      v91 = *(void **)(v89 + 8);
      if (v91)
      {

        *(_QWORD *)(v89 + 8) = 0;
      }
      if (*(_QWORD *)v89)
      {

        *(_QWORD *)v89 = 0;
      }
    }
  }
  while (*((_QWORD *)this + 31))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 30);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 240);
  *((_QWORD *)this + 35) = 0;
  ++*((_DWORD *)this + 72);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 240);
  v92 = *((_QWORD *)this + 28);
  if (v92)
  {
    for (i19 = 0; i19 != v92; ++i19)
      re::BucketArray<re::PipelineCompilationData,4ul>::operator[]((uint64_t)this + 184, i19);
  }
  while (*((_QWORD *)this + 24))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 23);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 184);
  *((_QWORD *)this + 28) = 0;
  ++*((_DWORD *)this + 58);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 184);
  v94 = *((_QWORD *)this + 21);
  if (v94)
  {
    for (i20 = 0; i20 != v94; ++i20)
      re::BucketArray<re::PipelineCompilationData,4ul>::operator[]((uint64_t)this + 128, i20);
  }
  while (*((_QWORD *)this + 17))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 16);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 128);
  *((_QWORD *)this + 21) = 0;
  ++*((_DWORD *)this + 44);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 128);
  v96 = *((_QWORD *)this + 14);
  if (v96)
  {
    for (i21 = 0; i21 != v96; ++i21)
    {
      v98 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 72, i21);
      re::DynamicArray<re::RenderText>::deinit(v98);
    }
  }
  while (*((_QWORD *)this + 10))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 9);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 72);
  *((_QWORD *)this + 14) = 0;
  ++*((_DWORD *)this + 30);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 72);
  v99 = *((_QWORD *)this + 7);
  if (v99)
  {
    for (i22 = 0; i22 != v99; ++i22)
    {
      v101 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 16, i22);
      re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit(v101);
    }
  }
  while (*((_QWORD *)this + 3))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 2);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 16);
  *((_QWORD *)this + 7) = 0;
  ++*((_DWORD *)this + 16);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 16);
}

{
  re::RealityDataPipe::~RealityDataPipe(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RealityDataPipe::addMipmapGenerationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 24);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 16), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 24);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    v7 = a1 + 40;
  else
    v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 56);
  ++*(_DWORD *)(a1 + 64);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 56);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetMipmapGenerationContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 7))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 16, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMipmapGenerationContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 7))
    return (uint64_t)this + 16;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMipmapGenerationContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 16;
}

uint64_t re::RealityDataPipe::addRenderProfilerTextArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 72;
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 80);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::DynamicArray<re::RenderProfilerText>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 72), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 80);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    v7 = a1 + 96;
  else
    v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 112);
  ++*(_DWORD *)(a1 + 120);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 112);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetRenderProfilerTextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 14))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 72, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetRenderProfilerTextArrayArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 14))
    return (uint64_t)this + 72;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetRenderProfilerTextArrayArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 72;
}

uint64_t re::RealityDataPipe::addClippingParametersSlice(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1 + 128;
  v5 = *(_QWORD *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 136);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::Slice<re::ClippingParametersEntry>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 128), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 136);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 144) & 1) != 0)
    v7 = a1 + 152;
  else
    v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 168);
  ++*(_DWORD *)(a1 + 176);
  *(_OWORD *)(v8 + 16 * (v5 & 3)) = *a2;
  v9 = *(_QWORD *)(a1 + 168);
  if (!v9)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v4, v9 - 1);
}

uint64_t re::RealityDataPipe::tryGetClippingParametersSlice(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 21))
    return re::BucketArray<re::PipelineCompilationData,4ul>::operator[]((uint64_t)this + 128, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetClippingParametersSliceArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 21))
    return (uint64_t)this + 128;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetClippingParametersSliceArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 128;
}

uint64_t re::RealityDataPipe::addClippingIndexIndirectionSlice(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1 + 184;
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 192);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::Slice<re::ClippingParametersEntry>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 184), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 192);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 200) & 1) != 0)
    v7 = a1 + 208;
  else
    v7 = *(_QWORD *)(a1 + 216);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 224);
  ++*(_DWORD *)(a1 + 232);
  *(_OWORD *)(v8 + 16 * (v5 & 3)) = *a2;
  v9 = *(_QWORD *)(a1 + 224);
  if (!v9)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v4, v9 - 1);
}

uint64_t re::RealityDataPipe::tryGetClippingIndexIndirectionSlice(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 28))
    return re::BucketArray<re::PipelineCompilationData,4ul>::operator[]((uint64_t)this + 184, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetClippingIndexIndirectionSliceArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 28))
    return (uint64_t)this + 184;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetClippingIndexIndirectionSliceArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 184;
}

uint64_t re::RealityDataPipe::addProbeContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 + 240;
  v5 = *(_QWORD *)(a1 + 280);
  v6 = *(_QWORD *)(a1 + 248);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 240), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 248);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 256) & 1) != 0)
    v7 = a1 + 264;
  else
    v7 = *(_QWORD *)(a1 + 272);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 280);
  ++*(_DWORD *)(a1 + 288);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(v9 + 24) = v10;
  v11 = *(_QWORD *)(a1 + 280);
  if (!v11)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v11 - 1);
}

uint64_t re::RealityDataPipe::tryGetProbeContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 35))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 240, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetProbeContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 35))
    return (uint64_t)this + 240;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetProbeContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 240;
}

uint64_t re::RealityDataPipe::addBlurGenerationContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 296;
  v5 = *(_QWORD *)(a1 + 336);
  v6 = *(_QWORD *)(a1 + 304);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 296), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 304);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 312) & 1) != 0)
    v7 = a1 + 320;
  else
    v7 = *(_QWORD *)(a1 + 328);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 336);
  ++*(_DWORD *)(a1 + 344);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 336);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetBlurGenerationContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 42))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 296, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetBlurGenerationContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 42))
    return (uint64_t)this + 296;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetBlurGenerationContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 296;
}

uint64_t re::RealityDataPipe::addCameraStreamContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 352;
  v5 = *(_QWORD *)(a1 + 392);
  v6 = *(_QWORD *)(a1 + 360);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::CameraStreamContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 352), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 360);
  }
  if (v6 <= v5 >> 2)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(a1 + 368) & 1) != 0)
    v7 = a1 + 376;
  else
    v7 = *(_QWORD *)(a1 + 384);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 392);
  ++*(_DWORD *)(a1 + 400);
  v9 = v8 + 1840 * (v5 & 3);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 1728) = 0;
  *(_OWORD *)(v9 + 1712) = 0u;
  *(_OWORD *)(v9 + 1696) = 0u;
  *(_QWORD *)(v9 + 1732) = 0x7FFFFFFFLL;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)&v17 = 0;
  DWORD2(v17) = 0;
  re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::move((uint64_t *)&v17, (uint64_t *)(v9 + 16));
  if (v9 != a2)
  {
    re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::move((uint64_t *)(v9 + 16), (uint64_t *)(a2 + 16));
    ++*(_DWORD *)(v9 + 24);
  }
  if (&v17 != (__int128 *)(a2 + 16))
  {
    re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::move((uint64_t *)(a2 + 16), (uint64_t *)&v17);
    ++*(_DWORD *)(a2 + 24);
  }
  re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear((uint64_t)&v17);
  DWORD2(v19) = 0;
  *(_QWORD *)&v17 = *(_QWORD *)(v9 + 1696);
  *(_QWORD *)(v9 + 1696) = 0;
  *((_QWORD *)&v17 + 1) = *(_QWORD *)(v9 + 1704);
  *(_QWORD *)(v9 + 1704) = 0;
  *(_QWORD *)&v18 = *(_QWORD *)(v9 + 1712);
  *(_QWORD *)(v9 + 1712) = 0;
  DWORD2(v18) = *(_DWORD *)(v9 + 1720);
  *(_DWORD *)(v9 + 1720) = 0;
  HIDWORD(v18) = *(_DWORD *)(v9 + 1724);
  *(_DWORD *)(v9 + 1724) = 0;
  LODWORD(v19) = *(_DWORD *)(v9 + 1728);
  *(_DWORD *)(v9 + 1728) = 0;
  DWORD1(v19) = *(_DWORD *)(v9 + 1732);
  *(_DWORD *)(v9 + 1732) = 0x7FFFFFFF;
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(v9 + 1696, a2 + 1696);
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(a2 + 1696, (uint64_t)&v17);
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v17);
  v11 = v8 + 1840 * (v5 & 3);
  *(_OWORD *)(v11 + 1744) = *(_OWORD *)(a2 + 1744);
  v12 = *(_OWORD *)(a2 + 1760);
  v13 = *(_OWORD *)(a2 + 1776);
  v14 = *(_OWORD *)(a2 + 1792);
  *(_DWORD *)(v11 + 1808) = *(_DWORD *)(a2 + 1808);
  *(_OWORD *)(v11 + 1792) = v14;
  *(_OWORD *)(v11 + 1776) = v13;
  *(_OWORD *)(v11 + 1760) = v12;
  *(_QWORD *)(v11 + 1816) = *(_QWORD *)(a2 + 1816);
  *(_QWORD *)(a2 + 1816) = 0;
  *(_QWORD *)(v11 + 1824) = *(_QWORD *)(a2 + 1824);
  *(_QWORD *)(a2 + 1824) = 0;
  v15 = *(_QWORD *)(a1 + 392);
  if (!v15)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::CameraStreamContext,4ul>::operator[](v4, v15 - 1);
}

uint64_t re::RealityDataPipe::tryGetCameraStreamContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 49))
    return re::BucketArray<re::CameraStreamContext,4ul>::operator[]((uint64_t)this + 352, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetCameraStreamContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 49))
    return (uint64_t)this + 352;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetCameraStreamContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 352;
}

uint64_t re::RealityDataPipe::addSFBSystemShellBlurContext(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;

  v4 = a1 + 408;
  v5 = *(_QWORD *)(a1 + 448);
  v6 = *(_QWORD *)(a1 + 416);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::SFBSystemShellBlurContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 408), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 416);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 424) & 1) != 0)
    v7 = a1 + 432;
  else
    v7 = *(_QWORD *)(a1 + 440);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 448);
  ++*(_DWORD *)(a1 + 456);
  v9 = (_OWORD *)(v8 + 32 * (v5 & 3));
  v10 = a2[1];
  *v9 = *a2;
  v9[1] = v10;
  v11 = *(_QWORD *)(a1 + 448);
  if (!v11)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::SFBSystemShellBlurContext,4ul>::operator[](v4, v11 - 1);
}

uint64_t re::RealityDataPipe::tryGetSFBSystemShellBlurContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 56))
    return re::BucketArray<re::SFBSystemShellBlurContext,4ul>::operator[]((uint64_t)this + 408, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetSFBSystemShellBlurContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 56))
    return (uint64_t)this + 408;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetSFBSystemShellBlurContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 408;
}

uint64_t re::RealityDataPipe::addOpenSkyData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a1 + 464;
  v5 = *(_QWORD *)(a1 + 504);
  v6 = *(_QWORD *)(a1 + 472);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::OpenSkyData,4ul>::setBucketsCapacity((_QWORD *)(a1 + 464), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 472);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 480) & 1) != 0)
    v7 = a1 + 488;
  else
    v7 = *(_QWORD *)(a1 + 496);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 504);
  ++*(_DWORD *)(a1 + 512);
  v9 = v8 + 208 * (v5 & 3);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v10;
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(v9 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(v9 + 48) = v12;
  *(_OWORD *)(v9 + 64) = v13;
  *(_OWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 120) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(v9 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v14 = *(_QWORD *)(v9 + 104);
  *(_QWORD *)(v9 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v14;
  v15 = *(_QWORD *)(v9 + 120);
  *(_QWORD *)(v9 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v15;
  ++*(_DWORD *)(a2 + 112);
  ++*(_DWORD *)(v9 + 112);
  *(_QWORD *)(v9 + 160) = 0;
  *(_DWORD *)(v9 + 152) = 0;
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 144) = 0;
  *(_QWORD *)(v9 + 128) = 0;
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(v9 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  v16 = *(_QWORD *)(v9 + 144);
  *(_QWORD *)(v9 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v16;
  v17 = *(_QWORD *)(v9 + 160);
  *(_QWORD *)(v9 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v17;
  ++*(_DWORD *)(a2 + 152);
  ++*(_DWORD *)(v9 + 152);
  v18 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v9 + 177) = *(_OWORD *)(a2 + 177);
  *(_OWORD *)(v9 + 168) = v18;
  v19 = *(_QWORD *)(a1 + 504);
  if (!v19)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::OpenSkyData,4ul>::operator[](v4, v19 - 1);
}

uint64_t re::RealityDataPipe::tryGetOpenSkyData(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 63))
    return re::BucketArray<re::OpenSkyData,4ul>::operator[]((uint64_t)this + 464, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetOpenSkyDataArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 63))
    return (uint64_t)this + 464;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetOpenSkyDataArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 464;
}

unint64_t re::RealityDataPipe::addProjectiveShadowBuilderInputGlobalData(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = a1 + 520;
  v5 = *(_QWORD *)(a1 + 560);
  v6 = *(_QWORD *)(a1 + 528);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::ProjectiveShadowBuilderInputGlobalData,4ul>::setBucketsCapacity((_QWORD *)(a1 + 520), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 528);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 536) & 1) != 0)
    v7 = a1 + 544;
  else
    v7 = *(_QWORD *)(a1 + 552);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 560);
  ++*(_DWORD *)(a1 + 568);
  v9 = (_OWORD *)(v8 + ((v5 & 3) << 8));
  v10 = a2[7];
  v12 = a2[4];
  v11 = a2[5];
  v9[6] = a2[6];
  v9[7] = v10;
  v9[4] = v12;
  v9[5] = v11;
  v13 = a2[11];
  v15 = a2[8];
  v14 = a2[9];
  v9[10] = a2[10];
  v9[11] = v13;
  v9[8] = v15;
  v9[9] = v14;
  v16 = a2[15];
  v18 = a2[12];
  v17 = a2[13];
  v9[14] = a2[14];
  v9[15] = v16;
  v9[12] = v18;
  v9[13] = v17;
  v19 = *a2;
  v20 = a2[1];
  v21 = a2[3];
  v9[2] = a2[2];
  v9[3] = v21;
  *v9 = v19;
  v9[1] = v20;
  v22 = *(_QWORD *)(a1 + 560);
  if (!v22)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::ProjectiveShadowBuilderInputGlobalData,4ul>::operator[](v4, v22 - 1);
}

unint64_t re::RealityDataPipe::tryGetProjectiveShadowBuilderInputGlobalData(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 70))
    return re::BucketArray<re::ProjectiveShadowBuilderInputGlobalData,4ul>::operator[]((uint64_t)this + 520, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetProjectiveShadowBuilderInputGlobalDataArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 70))
    return (uint64_t)this + 520;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetProjectiveShadowBuilderInputGlobalDataArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 520;
}

uint64_t re::RealityDataPipe::addProjectiveMeshShadowBuilderInputGlobalData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = a1 + 576;
  v5 = *(_QWORD *)(a1 + 616);
  v6 = *(_QWORD *)(a1 + 584);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::ProjectiveMeshShadowBuilderInputGlobalData,4ul>::setBucketsCapacity((_QWORD *)(a1 + 576), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 584);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a1 + 592) & 1) != 0)
    v7 = a1 + 600;
  else
    v7 = *(_QWORD *)(a1 + 608);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 616);
  ++*(_DWORD *)(a1 + 624);
  v9 = v8 + 336 * (v5 & 3);
  v10 = *(_OWORD *)a2;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v9 = v10;
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(a2 + 48);
  v11 = *(unsigned __int8 *)(a2 + 56);
  *(_BYTE *)(v9 + 56) = v11;
  if (v11)
  {
    v12 = v8 + 336 * (v5 & 3);
    v13 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(v12 + 64) = *(_QWORD *)(v12 + 64) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
    *(_QWORD *)(v12 + 64) = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
    *(_QWORD *)(v12 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = &str_110;
  }
  v14 = (_OWORD *)(v8 + 336 * (v5 & 3));
  v15 = *(_OWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 96);
  v17 = *(_OWORD *)(a2 + 128);
  v14[7] = *(_OWORD *)(a2 + 112);
  v14[8] = v17;
  v14[5] = v15;
  v14[6] = v16;
  v18 = *(_OWORD *)(a2 + 144);
  v19 = *(_OWORD *)(a2 + 160);
  v20 = *(_OWORD *)(a2 + 192);
  v14[11] = *(_OWORD *)(a2 + 176);
  v14[12] = v20;
  v14[9] = v18;
  v14[10] = v19;
  v21 = *(_OWORD *)(a2 + 208);
  v22 = *(_OWORD *)(a2 + 224);
  v23 = *(_OWORD *)(a2 + 256);
  v14[15] = *(_OWORD *)(a2 + 240);
  v14[16] = v23;
  v14[13] = v21;
  v14[14] = v22;
  v24 = *(_OWORD *)(a2 + 272);
  v25 = *(_OWORD *)(a2 + 288);
  v26 = *(_OWORD *)(a2 + 320);
  v14[19] = *(_OWORD *)(a2 + 304);
  v14[20] = v26;
  v14[17] = v24;
  v14[18] = v25;
  v27 = *(_QWORD *)(a1 + 616);
  if (!v27)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::ProjectiveMeshShadowBuilderInputGlobalData,4ul>::operator[](v4, v27 - 1);
}

uint64_t re::RealityDataPipe::tryGetProjectiveMeshShadowBuilderInputGlobalData(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 77))
    return re::BucketArray<re::ProjectiveMeshShadowBuilderInputGlobalData,4ul>::operator[]((uint64_t)this + 576, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetProjectiveMeshShadowBuilderInputGlobalDataArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 77))
    return (uint64_t)this + 576;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetProjectiveMeshShadowBuilderInputGlobalDataArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 576;
}

uint64_t re::RealityDataPipe::addMeshShadowPerFrameUpdateData(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1 + 632;
  v5 = *(_QWORD *)(a1 + 672);
  v6 = *(_QWORD *)(a1 + 640);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MeshShadowPerFrameUpdateData,4ul>::setBucketsCapacity((_QWORD *)(a1 + 632), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 640);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 648) & 1) != 0)
    v7 = a1 + 656;
  else
    v7 = *(_QWORD *)(a1 + 664);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 672);
  ++*(_DWORD *)(a1 + 680);
  re::MeshShadowPerFrameUpdateData::MeshShadowPerFrameUpdateData(v8 + 640 * (v5 & 3), a2);
  v10 = *(_QWORD *)(a1 + 672);
  if (!v10)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::MeshShadowPerFrameUpdateData,4ul>::operator[](v4, v10 - 1);
}

uint64_t re::RealityDataPipe::tryGetMeshShadowPerFrameUpdateData(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 84))
    return re::BucketArray<re::MeshShadowPerFrameUpdateData,4ul>::operator[]((uint64_t)this + 632, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMeshShadowPerFrameUpdateDataArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 84))
    return (uint64_t)this + 632;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMeshShadowPerFrameUpdateDataArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 632;
}

uint64_t re::RealityDataPipe::addIBLContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = a1 + 688;
  v5 = re::BucketArray<re::IBLContext,4ul>::addUninitialized(a1 + 688);
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v9;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(v5 + 48) = *(_DWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 728);
  if (v10)
    return re::BucketArray<re::IBLContext,4ul>::operator[](v4, v10 - 1);
  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RealityDataPipe::tryGetIBLContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 91))
    return re::BucketArray<re::IBLContext,4ul>::operator[]((uint64_t)this + 688, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetIBLContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 91))
    return (uint64_t)this + 688;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetIBLContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 688;
}

uint64_t re::RealityDataPipe::addIBLContext(re::RealityDataPipe *this, re::IBLContext *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = (char *)this + 688;
  v5 = re::BucketArray<re::IBLContext,4ul>::addUninitialized((uint64_t)this + 688);
  re::DynamicArray<re::IBL>::DynamicArray(v5, (uint64_t *)a2);
  *(_QWORD *)(v5 + 40) = *((id *)a2 + 5);
  *(_DWORD *)(v5 + 48) = *((_DWORD *)a2 + 12);
  v7 = *((_QWORD *)this + 91);
  if (v7)
    return re::BucketArray<re::IBLContext,4ul>::operator[]((uint64_t)v4, v7 - 1);
  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RealityDataPipe::addBlurPlanesRenderFrameData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1 + 744;
  v5 = *(_QWORD *)(a1 + 784);
  v6 = *(_QWORD *)(a1 + 752);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::BlurPlanesRenderFrameData,4ul>::setBucketsCapacity((_QWORD *)(a1 + 744), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 752);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 760) & 1) != 0)
    v7 = a1 + 768;
  else
    v7 = *(_QWORD *)(a1 + 776);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 784);
  ++*(_DWORD *)(a1 + 792);
  v9 = v8 + 88 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v9 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v12;
  v13 = *(_QWORD *)(v9 + 72);
  *(_QWORD *)(v9 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v13;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(v9 + 64);
  *(_WORD *)(v9 + 80) = *(_WORD *)(a2 + 80);
  v14 = *(_QWORD *)(a1 + 784);
  if (!v14)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](v4, v14 - 1);
}

uint64_t re::RealityDataPipe::tryGetBlurPlanesRenderFrameData(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 98))
    return re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[]((uint64_t)this + 744, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetBlurPlanesRenderFrameDataArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 98))
    return (uint64_t)this + 744;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetBlurPlanesRenderFrameDataArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 744;
}

uint64_t re::RealityDataPipe::addTintContext(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;

  v4 = a1 + 800;
  v5 = *(_QWORD *)(a1 + 840);
  v6 = *(_QWORD *)(a1 + 808);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::TintContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 800), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 808);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 816) & 1) != 0)
    v7 = a1 + 824;
  else
    v7 = *(_QWORD *)(a1 + 832);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 840);
  ++*(_DWORD *)(a1 + 848);
  v9 = (_OWORD *)(v8 + 32 * (v5 & 3));
  v10 = a2[1];
  *v9 = *a2;
  v9[1] = v10;
  v11 = *(_QWORD *)(a1 + 840);
  if (!v11)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::SFBSystemShellBlurContext,4ul>::operator[](v4, v11 - 1);
}

uint64_t re::RealityDataPipe::tryGetTintContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 105))
    return re::BucketArray<re::SFBSystemShellBlurContext,4ul>::operator[]((uint64_t)this + 800, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetTintContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 105))
    return (uint64_t)this + 800;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetTintContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 800;
}

uint64_t re::RealityDataPipe::addSceneName(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 856;
  v5 = *(_QWORD *)(a1 + 896);
  v6 = *(_QWORD *)(a1 + 864);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 856), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 864);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 872) & 1) != 0)
    v7 = a1 + 880;
  else
    v7 = *(_QWORD *)(a1 + 888);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 896);
  ++*(_DWORD *)(a1 + 904);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  v11 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(v9 + 24) = v11;
  v12 = *(_QWORD *)(a1 + 896);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetSceneName(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 112))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 856, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetSceneNameArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 112))
    return (uint64_t)this + 856;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetSceneNameArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 856;
}

uint64_t re::RealityDataPipe::addMeshSceneCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = a1 + 912;
  v5 = re::BucketArray<re::MeshSceneCollection,4ul>::addUninitialized(a1 + 912);
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v9;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  v10 = *(_QWORD *)(a1 + 952);
  if (v10)
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v10 - 1);
  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RealityDataPipe::tryGetMeshSceneCollection(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 119))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 912, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMeshSceneCollectionArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 119))
    return (uint64_t)this + 912;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMeshSceneCollectionArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 912;
}

uint64_t re::RealityDataPipe::addMeshSceneCollection(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1 + 912;
  v5 = re::BucketArray<re::MeshSceneCollection,4ul>::addUninitialized(a1 + 912);
  re::DynamicArray<re::MeshScene>::DynamicArray(v5, a2);
  v7 = *(_QWORD *)(a1 + 952);
  if (v7)
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v7 - 1);
  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RealityDataPipe::addMeshDeformationCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1 + 968;
  v5 = re::BucketArray<re::MeshDeformationCollection,4ul>::addUninitialized(a1 + 968);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v5, a2);
  v7 = *(_QWORD *)(a1 + 1008);
  if (v7)
    return re::BucketArray<re::IBLContext,4ul>::operator[](v4, v7 - 1);
  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  _OWORD v26[5];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 968;
  v5 = re::BucketArray<re::MeshDeformationCollection,4ul>::addUninitialized(a1 + 968);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 16) = 1;
  *(_QWORD *)(v5 + 24) = 0;
  v6 = v5 + 24;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 48) = 0;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v8 = v5;
    v25 = v4;
    re::BucketArray<re::MeshDeformation,8ul>::init(v5, v7, *(_QWORD *)(a2 + 8));
    v9 = *(_QWORD *)(a2 + 40);
    if (v9 >= *(_QWORD *)(v8 + 40))
    {
      re::BucketArray<re::MeshDeformation,8ul>::setBucketsCapacity((uint64_t *)v8, (v9 + 7) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation const&,re::BucketArray<re::MeshDeformation,8ul> const&,true>,re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation const&,re::BucketArray<re::MeshDeformation,8ul> const&,true>,re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation&,re::BucketArray<re::MeshDeformation,8ul>&,true>>((uint64_t)v26, a2, 0, a2, *(_QWORD *)(v8 + 40), v8, 0);
      v11 = *(_QWORD *)(v8 + 40);
      v12 = v9 - v11;
      if (v9 != v11)
      {
        v13 = 0;
        while (1)
        {
          v14 = v13 + *(_QWORD *)(v8 + 40);
          if (*(_QWORD *)(v8 + 8) <= v14 >> 3)
            break;
          if ((*(_DWORD *)(v8 + 16) & 1) != 0)
            v15 = v6;
          else
            v15 = *(_QWORD *)(v8 + 32);
          v16 = *(_QWORD *)(v15 + 8 * (v14 >> 3)) + 104 * (v14 & 7);
          v17 = re::BucketArray<re::MeshDeformation,8ul>::operator[](a2, v14);
          v19 = *(_OWORD *)(v17 + 16);
          v18 = *(_OWORD *)(v17 + 32);
          *(_OWORD *)v16 = *(_OWORD *)v17;
          *(_OWORD *)(v16 + 16) = v19;
          *(_OWORD *)(v16 + 32) = v18;
          v21 = *(_OWORD *)(v17 + 64);
          v20 = *(_OWORD *)(v17 + 80);
          v22 = *(_OWORD *)(v17 + 48);
          *(_QWORD *)(v16 + 96) = *(_QWORD *)(v17 + 96);
          *(_OWORD *)(v16 + 64) = v21;
          *(_OWORD *)(v16 + 80) = v20;
          *(_OWORD *)(v16 + 48) = v22;
          if (v12 == ++v13)
            goto LABEL_14;
        }
        memset(v26, 0, sizeof(v26));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
        _os_crash();
        __break(1u);
      }
    }
    else
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation const&,re::BucketArray<re::MeshDeformation,8ul> const&,true>,re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation const&,re::BucketArray<re::MeshDeformation,8ul> const&,true>,re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation&,re::BucketArray<re::MeshDeformation,8ul>&,true>>((uint64_t)v26, a2, 0, a2, *(_QWORD *)(a2 + 40), v8, 0);
      if (v9 != *(_QWORD *)(v8 + 40))
      {
        v10 = v9;
        do
          re::BucketArray<re::MeshDeformation,8ul>::operator[](v8, v10++);
        while (v10 != *(_QWORD *)(v8 + 40));
      }
    }
LABEL_14:
    *(_QWORD *)(v8 + 40) = v9;
    v4 = v25;
  }
  v23 = *(_QWORD *)(a1 + 1008);
  if (!v23)
    goto LABEL_18;
  return re::BucketArray<re::IBLContext,4ul>::operator[](v4, v23 - 1);
}

uint64_t re::RealityDataPipe::tryGetMeshDeformationCollection(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 126))
    return re::BucketArray<re::IBLContext,4ul>::operator[]((uint64_t)this + 968, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMeshDeformationCollectionArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 126))
    return (uint64_t)this + 968;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMeshDeformationCollectionArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 968;
}

uint64_t re::RealityDataPipe::addCameraViewArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 1024;
  v5 = *(_QWORD *)(a1 + 1064);
  v6 = *(_QWORD *)(a1 + 1032);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1024), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1032);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1040) & 1) != 0)
    v7 = a1 + 1048;
  else
    v7 = *(_QWORD *)(a1 + 1056);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1064);
  ++*(_DWORD *)(a1 + 1072);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 1064);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetCameraViewArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 133))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1024, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetCameraViewArrayArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 133))
    return (uint64_t)this + 1024;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetCameraViewArrayArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1024;
}

uint64_t re::RealityDataPipe::addCameraMultiViewArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 1080;
  v5 = *(_QWORD *)(a1 + 1120);
  v6 = *(_QWORD *)(a1 + 1088);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1080), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1088);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1096) & 1) != 0)
    v7 = a1 + 1104;
  else
    v7 = *(_QWORD *)(a1 + 1112);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1120);
  ++*(_DWORD *)(a1 + 1128);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 1120);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetCameraMultiViewArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 140))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1080, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetCameraMultiViewArrayArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 140))
    return (uint64_t)this + 1080;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetCameraMultiViewArrayArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1080;
}

uint64_t re::RealityDataPipe::addStaticTextInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = a1 + 1136;
  v5 = *(_QWORD *)(a1 + 1176);
  v6 = *(_QWORD *)(a1 + 1144);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::StaticTextInfo,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1136), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1144);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1152) & 1) != 0)
    v7 = a1 + 1160;
  else
    v7 = *(_QWORD *)(a1 + 1168);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  v9 = *(_QWORD *)(a1 + 1176);
  *(_QWORD *)(a1 + 1176) = v9 + 1;
  ++*(_DWORD *)(a1 + 1184);
  *(_QWORD *)(v8 + 8 * (v5 & 3)) = *a2;
  if (v9 == -1)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<unsigned long,4ul>::operator[](v4, v9);
}

uint64_t re::RealityDataPipe::tryGetStaticTextInfo(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 147))
    return re::BucketArray<unsigned long,4ul>::operator[]((uint64_t)this + 1136, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetStaticTextInfoArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 147))
    return (uint64_t)this + 1136;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetStaticTextInfoArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1136;
}

uint64_t re::RealityDataPipe::addRenderTextArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 1192;
  v5 = *(_QWORD *)(a1 + 1232);
  v6 = *(_QWORD *)(a1 + 1200);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1192), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1200);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1208) & 1) != 0)
    v7 = a1 + 1216;
  else
    v7 = *(_QWORD *)(a1 + 1224);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1232);
  ++*(_DWORD *)(a1 + 1240);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 1232);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetRenderTextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 154))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1192, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetRenderTextArrayArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 154))
    return (uint64_t)this + 1192;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetRenderTextArrayArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1192;
}

uint64_t re::RealityDataPipe::addVFXSceneArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 1248;
  v5 = *(_QWORD *)(a1 + 1288);
  v6 = *(_QWORD *)(a1 + 1256);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1248), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1256);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1264) & 1) != 0)
    v7 = a1 + 1272;
  else
    v7 = *(_QWORD *)(a1 + 1280);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1288);
  ++*(_DWORD *)(a1 + 1296);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 1288);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetVFXSceneArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 161))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1248, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetVFXSceneArrayArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 161))
    return (uint64_t)this + 1248;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetVFXSceneArrayArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1248;
}

uint64_t re::RealityDataPipe::addRenderGraphFileProviderArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = a1 + 1304;
  v5 = re::BucketArray<re::DynamicArray<re::RenderGraphFileProvider>,4ul>::addUninitialized(a1 + 1304);
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v8;
  v9 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v9;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  v10 = *(_QWORD *)(a1 + 1344);
  if (v10)
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v10 - 1);
  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RealityDataPipe::tryGetRenderGraphFileProviderArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 168))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1304, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetRenderGraphFileProviderArrayArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 168))
    return (uint64_t)this + 1304;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetRenderGraphFileProviderArrayArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1304;
}

uint64_t re::RealityDataPipe::addRenderGraphFileProviders(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1 + 1304;
  v5 = re::BucketArray<re::DynamicArray<re::RenderGraphFileProvider>,4ul>::addUninitialized(a1 + 1304);
  re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray(v5, a2);
  v7 = *(_QWORD *)(a1 + 1344);
  if (v7)
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v7 - 1);
  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RealityDataPipe::addStencilPortalArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 1360;
  v5 = *(_QWORD *)(a1 + 1400);
  v6 = *(_QWORD *)(a1 + 1368);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1360), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1368);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1376) & 1) != 0)
    v7 = a1 + 1384;
  else
    v7 = *(_QWORD *)(a1 + 1392);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1400);
  ++*(_DWORD *)(a1 + 1408);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 1400);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetStencilPortalArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 175))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1360, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetStencilPortalArrayArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 175))
    return (uint64_t)this + 1360;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetStencilPortalArrayArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1360;
}

uint64_t re::RealityDataPipe::addFilterViewMeshScenes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 1416;
  v5 = *(_QWORD *)(a1 + 1456);
  v6 = *(_QWORD *)(a1 + 1424);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::FilterViewMeshScenes,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1416), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1424);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1432) & 1) != 0)
    v7 = a1 + 1440;
  else
    v7 = *(_QWORD *)(a1 + 1448);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1456);
  ++*(_DWORD *)(a1 + 1464);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 1456);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetFilterViewMeshScenes(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 182))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1416, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetFilterViewMeshScenesArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 182))
    return (uint64_t)this + 1416;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetFilterViewMeshScenesArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1416;
}

unint64_t re::RealityDataPipe::addProbeLightingEnabledMetadata(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a1 + 1472;
  v3 = *(_QWORD *)(a1 + 1512);
  v4 = *(_QWORD *)(a1 + 1480);
  if (v3 + 1 > 4 * v4)
  {
    re::BucketArray<re::ProbeLightingEnabledMetadata,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1472), (v3 + 4) >> 2);
    v4 = *(_QWORD *)(a1 + 1480);
  }
  if (v4 <= v3 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v5 = *(_QWORD *)(a1 + 1512);
  ++*(_DWORD *)(a1 + 1520);
  *(_QWORD *)(a1 + 1512) = v5 + 1;
  if (v5 == -1)
    goto LABEL_7;
  return re::BucketArray<re::ProbeLightingEnabledMetadata,4ul>::operator[](v2, v5);
}

unint64_t re::RealityDataPipe::tryGetProbeLightingEnabledMetadata(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 189))
    return re::BucketArray<re::ProbeLightingEnabledMetadata,4ul>::operator[]((uint64_t)this + 1472, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetProbeLightingEnabledMetadataArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 189))
    return (uint64_t)this + 1472;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetProbeLightingEnabledMetadataArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1472;
}

uint64_t re::RealityDataPipe::addSceneCRWSReferencePosition(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1 + 1528;
  v5 = *(_QWORD *)(a1 + 1568);
  v6 = *(_QWORD *)(a1 + 1536);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::SceneCRWSReferencePosition,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1528), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1536);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1544) & 1) != 0)
    v7 = a1 + 1552;
  else
    v7 = *(_QWORD *)(a1 + 1560);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1568);
  ++*(_DWORD *)(a1 + 1576);
  *(_OWORD *)(v8 + 16 * (v5 & 3)) = *a2;
  v9 = *(_QWORD *)(a1 + 1568);
  if (!v9)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v4, v9 - 1);
}

uint64_t re::RealityDataPipe::tryGetSceneCRWSReferencePosition(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 196))
    return re::BucketArray<re::PipelineCompilationData,4ul>::operator[]((uint64_t)this + 1528, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetSceneCRWSReferencePositionArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 196))
    return (uint64_t)this + 1528;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetSceneCRWSReferencePositionArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1528;
}

uint64_t re::RealityDataPipe::addPlanarReflectionContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 1584;
  v5 = *(_QWORD *)(a1 + 1624);
  v6 = *(_QWORD *)(a1 + 1592);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1584), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1592);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1600) & 1) != 0)
    v7 = a1 + 1608;
  else
    v7 = *(_QWORD *)(a1 + 1616);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1624);
  ++*(_DWORD *)(a1 + 1632);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 1624);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetPlanarReflectionContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 203))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1584, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetPlanarReflectionContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 203))
    return (uint64_t)this + 1584;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetPlanarReflectionContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1584;
}

uint64_t re::RealityDataPipe::addMeshSortingCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 + 1640;
  v5 = *(_QWORD *)(a1 + 1680);
  v6 = *(_QWORD *)(a1 + 1648);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MeshSortingCollection,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1640), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1648);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1656) & 1) != 0)
    v7 = a1 + 1664;
  else
    v7 = *(_QWORD *)(a1 + 1672);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1680);
  ++*(_DWORD *)(a1 + 1688);
  v9 = v8 + 200 * (v5 & 3);
  *(_DWORD *)(v9 + 32) = 0;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v9, (uint64_t *)a2);
  *(_DWORD *)(v9 + 80) = 0;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_QWORD *)(v9 + 84) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v9 + 48), (uint64_t *)(a2 + 48));
  *(_DWORD *)(v9 + 128) = 0;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_QWORD *)(v9 + 132) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v9 + 96), (uint64_t *)(a2 + 96));
  *(_OWORD *)(v9 + 144) = 0u;
  v9 += 144;
  *(_DWORD *)(v9 + 32) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v9, (uint64_t *)(a2 + 144));
  *(_WORD *)(v9 + 48) = *(_WORD *)(a2 + 192);
  v11 = *(_QWORD *)(a1 + 1680);
  if (!v11)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::MeshSortingCollection,4ul>::operator[](v4, v11 - 1);
}

uint64_t re::RealityDataPipe::tryGetMeshSortingCollection(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 210))
    return re::BucketArray<re::MeshSortingCollection,4ul>::operator[]((uint64_t)this + 1640, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMeshSortingCollectionArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 210))
    return (uint64_t)this + 1640;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetMeshSortingCollectionArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1640;
}

uint64_t re::RealityDataPipe::addSceneUnderstandingFlagEmitterData(uint64_t a1, int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  v4 = a1 + 1696;
  v5 = *(_QWORD *)(a1 + 1736);
  v6 = *(_QWORD *)(a1 + 1704);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<SceneUnderstandingFlagEmitterData,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1696), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1704);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1712) & 1) != 0)
    v7 = a1 + 1720;
  else
    v7 = *(_QWORD *)(a1 + 1728);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1736);
  ++*(_DWORD *)(a1 + 1744);
  v9 = (_DWORD *)(v8 - (v5 & 3) + 8 * (v5 & 3));
  v10 = *a2;
  *(_DWORD *)((char *)v9 + 3) = *(int *)((char *)a2 + 3);
  *v9 = v10;
  v11 = *(_QWORD *)(a1 + 1736);
  if (!v11)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<SceneUnderstandingFlagEmitterData,4ul>::operator[](v4, v11 - 1);
}

uint64_t re::RealityDataPipe::tryGetSceneUnderstandingFlagEmitterData(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 217))
    return re::BucketArray<SceneUnderstandingFlagEmitterData,4ul>::operator[]((uint64_t)this + 1696, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetSceneUnderstandingFlagEmitterDataArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 217))
    return (uint64_t)this + 1696;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetSceneUnderstandingFlagEmitterDataArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1696;
}

uint64_t re::RealityDataPipe::addRenderCallbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1 + 1752;
  v5 = *(_QWORD *)(a1 + 1792);
  v6 = *(_QWORD *)(a1 + 1760);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::IBLContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1752), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1760);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1768) & 1) != 0)
    v7 = a1 + 1776;
  else
    v7 = *(_QWORD *)(a1 + 1784);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1792);
  ++*(_DWORD *)(a1 + 1800);
  v9 = v8 + 56 * (v5 & 3);
  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)v9 = v10;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_DWORD *)(v9 + 40) = 0;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_QWORD *)(v9 + 44) = 0x7FFFFFFFLL;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v11 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v11;
  v12 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v12;
  LODWORD(v12) = *(_DWORD *)(v9 + 32);
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v12;
  LODWORD(v12) = *(_DWORD *)(v9 + 36);
  *(_DWORD *)(v9 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v12;
  LODWORD(v12) = *(_DWORD *)(v9 + 40);
  *(_DWORD *)(v9 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v12;
  LODWORD(v12) = *(_DWORD *)(v9 + 44);
  *(_DWORD *)(v9 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v12;
  v13 = *(_QWORD *)(a1 + 1792);
  if (!v13)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::IBLContext,4ul>::operator[](v4, v13 - 1);
}

uint64_t re::RealityDataPipe::tryGetRenderCallbacks(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 224))
    return re::BucketArray<re::IBLContext,4ul>::operator[]((uint64_t)this + 1752, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetRenderCallbacksArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 224))
    return (uint64_t)this + 1752;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetRenderCallbacksArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1752;
}

uint64_t re::RealityDataPipe::addAnchorTransformData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 1808;
  v5 = *(_QWORD *)(a1 + 1848);
  v6 = *(_QWORD *)(a1 + 1816);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1808), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1816);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1824) & 1) != 0)
    v7 = a1 + 1832;
  else
    v7 = *(_QWORD *)(a1 + 1840);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1848);
  ++*(_DWORD *)(a1 + 1856);
  v9 = v8 + 40 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_QWORD *)(a1 + 1848);
  if (!v12)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v4, v12 - 1);
}

uint64_t re::RealityDataPipe::tryGetAnchorTransformData(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 231))
    return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)this + 1808, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetAnchorTransformDataArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 231))
    return (uint64_t)this + 1808;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetAnchorTransformDataArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1808;
}

uint64_t re::RealityDataPipe::addVirtualEnvironmentProbeContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = a1 + 1864;
  v5 = *(_QWORD *)(a1 + 1904);
  v6 = *(_QWORD *)(a1 + 1872);
  if (v5 + 1 > 4 * v6)
  {
    re::BucketArray<re::VirtualEnvironmentProbeContext,4ul>::setBucketsCapacity((_QWORD *)(a1 + 1864), (v5 + 4) >> 2);
    v6 = *(_QWORD *)(a1 + 1872);
  }
  if (v6 <= v5 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 1880) & 1) != 0)
    v7 = a1 + 1888;
  else
    v7 = *(_QWORD *)(a1 + 1896);
  v8 = *(_QWORD *)(v7 + 8 * (v5 >> 2));
  ++*(_QWORD *)(a1 + 1904);
  ++*(_DWORD *)(a1 + 1912);
  v9 = v8 + 96 * (v5 & 3);
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v10;
  v11 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v11;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v9 + 24);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v9 + 80) = v13;
  *(_OWORD *)(v9 + 48) = v12;
  v14 = *(_QWORD *)(a1 + 1904);
  if (!v14)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  return re::BucketArray<re::VirtualEnvironmentProbeContext,4ul>::operator[](v4, v14 - 1);
}

uint64_t re::RealityDataPipe::tryGetVirtualEnvironmentProbeContext(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 238))
    return re::BucketArray<re::VirtualEnvironmentProbeContext,4ul>::operator[]((uint64_t)this + 1864, 0);
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetVirtualEnvironmentProbeContextArray(re::RealityDataPipe *this)
{
  if (*((_QWORD *)this + 238))
    return (uint64_t)this + 1864;
  else
    return 0;
}

uint64_t re::RealityDataPipe::tryGetVirtualEnvironmentProbeContextArrayRaw(re::RealityDataPipe *this)
{
  return (uint64_t)this + 1864;
}

_QWORD *re::BucketArray<re::DynamicArray<re::RenderProfilerText>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::DynamicArray<re::RenderProfilerText>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::DynamicArray<re::RenderProfilerText>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 160, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::BucketArray<re::BlurPlanesRenderFrameData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::BlurPlanesRenderFrameData,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::BlurPlanesRenderFrameData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 352, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::BucketArray<re::TintContext,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::TintContext,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::TintContext,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 128, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<re::MeshSceneCollection,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::MeshSceneCollection,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::MeshSceneCollection,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 160, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::BucketArray<re::MeshDeformationCollection,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::MeshDeformationCollection,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::MeshDeformationCollection,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 224, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::BucketArray<re::StaticTextInfo,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::StaticTextInfo,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::StaticTextInfo,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 32, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::BucketArray<re::FilterViewMeshScenes,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::FilterViewMeshScenes,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::FilterViewMeshScenes,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 160, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::BucketArray<re::MeshSortingCollection,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::MeshSortingCollection,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::MeshSortingCollection,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 800, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::BucketArray<re::SceneCRWSReferencePosition,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::SceneCRWSReferencePosition,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::SceneCRWSReferencePosition,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::CameraStreamContext,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 1840 * (a2 & 3);
}

uint64_t re::BucketArray<re::SFBSystemShellBlurContext,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 32 * (a2 & 3);
}

uint64_t re::BucketArray<re::OpenSkyData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 208 * (a2 & 3);
}

unint64_t re::BucketArray<re::ProjectiveShadowBuilderInputGlobalData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + ((a2 & 3) << 8);
}

uint64_t re::BucketArray<re::ProjectiveMeshShadowBuilderInputGlobalData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 336 * (a2 & 3);
}

uint64_t re::BucketArray<re::MeshShadowPerFrameUpdateData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 640 * (a2 & 3);
}

uint64_t re::BucketArray<re::IBLContext,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 56 * (a2 & 3);
}

uint64_t re::BucketArray<re::MeshDeformationCollection,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<re::IBLContext,4ul>::operator[](a1, i);
      re::BucketArray<re::MeshDeformation,8ul>::deinit(v4);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a1, i);
      re::DynamicArray<re::VFXScene>::deinit(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

unint64_t re::BucketArray<re::ProbeLightingEnabledMetadata,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + (a2 & 3);
}

uint64_t re::BucketArray<re::MeshSortingCollection,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 200 * (a2 & 3);
}

uint64_t re::BucketArray<SceneUnderstandingFlagEmitterData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) - (a2 & 3) + 8 * (a2 & 3);
}

uint64_t re::BucketArray<re::VirtualEnvironmentProbeContext,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 96 * (a2 & 3);
}

_QWORD *re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 160, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<re::Slice<re::ClippingParametersEntry>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::Slice<re::ClippingParametersEntry>,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<re::CameraStreamContext,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 7360, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::CameraStreamContext,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::move(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v4 = (uint64_t)(a2 + 2);
  v5 = *a2;
  v6 = (uint64_t)(a1 + 2);
  if (*a2 >= (unint64_t)*a1)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *>(v4, v4 + 416 * *a1, v6);
    v11 = *a1;
    if (*a1 != v5)
    {
      v12 = 416 * v11;
      v13 = v4 + 416 * v11;
      v14 = v6 + v12;
      do
      {
        *(_QWORD *)v14 = *(_QWORD *)v13;
        v15 = *(_OWORD *)(v13 + 16);
        v16 = *(_OWORD *)(v13 + 48);
        *(_OWORD *)(v14 + 32) = *(_OWORD *)(v13 + 32);
        *(_OWORD *)(v14 + 48) = v16;
        *(_OWORD *)(v14 + 16) = v15;
        v17 = *(_OWORD *)(v13 + 64);
        v18 = *(_OWORD *)(v13 + 80);
        v19 = *(_OWORD *)(v13 + 112);
        *(_OWORD *)(v14 + 96) = *(_OWORD *)(v13 + 96);
        *(_OWORD *)(v14 + 112) = v19;
        *(_OWORD *)(v14 + 64) = v17;
        *(_OWORD *)(v14 + 80) = v18;
        v20 = *(_OWORD *)(v13 + 128);
        v21 = *(_OWORD *)(v13 + 144);
        v22 = *(_OWORD *)(v13 + 176);
        *(_OWORD *)(v14 + 160) = *(_OWORD *)(v13 + 160);
        *(_OWORD *)(v14 + 176) = v22;
        *(_OWORD *)(v14 + 128) = v20;
        *(_OWORD *)(v14 + 144) = v21;
        *(_QWORD *)(v14 + 200) = 0;
        *(_QWORD *)(v14 + 208) = 0;
        *(_QWORD *)(v14 + 192) = 0;
        v23 = *(_QWORD *)(v13 + 200);
        *(_QWORD *)(v14 + 192) = *(_QWORD *)(v13 + 192);
        *(_QWORD *)(v14 + 200) = v23;
        *(_QWORD *)(v13 + 192) = 0;
        *(_QWORD *)(v13 + 200) = 0;
        v24 = *(_QWORD *)(v14 + 208);
        *(_QWORD *)(v14 + 208) = *(_QWORD *)(v13 + 208);
        *(_QWORD *)(v13 + 208) = v24;
        *(_QWORD *)(v14 + 216) = *(_QWORD *)(v13 + 216);
        *(_QWORD *)(v13 + 216) = 0;
        v25 = *(_OWORD *)(v13 + 336);
        v27 = *(_OWORD *)(v13 + 288);
        v26 = *(_OWORD *)(v13 + 304);
        *(_OWORD *)(v14 + 320) = *(_OWORD *)(v13 + 320);
        *(_OWORD *)(v14 + 336) = v25;
        *(_OWORD *)(v14 + 288) = v27;
        *(_OWORD *)(v14 + 304) = v26;
        v28 = *(_OWORD *)(v13 + 352);
        v29 = *(_OWORD *)(v13 + 368);
        v30 = *(_OWORD *)(v13 + 400);
        *(_OWORD *)(v14 + 384) = *(_OWORD *)(v13 + 384);
        *(_OWORD *)(v14 + 400) = v30;
        *(_OWORD *)(v14 + 352) = v28;
        *(_OWORD *)(v14 + 368) = v29;
        v31 = *(_OWORD *)(v13 + 240);
        v33 = *(_OWORD *)(v13 + 256);
        v32 = *(_OWORD *)(v13 + 272);
        *(_OWORD *)(v14 + 224) = *(_OWORD *)(v13 + 224);
        *(_OWORD *)(v14 + 240) = v31;
        *(_OWORD *)(v14 + 256) = v33;
        *(_OWORD *)(v14 + 272) = v32;
        v13 += 416;
        v14 += 416;
      }
      while (v13 != v4 + 416 * v5);
    }
  }
  else
  {
    v7 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *>(v4, v4 + 416 * v5, v6);
    if (v5 != *a1)
    {
      v8 = -416 * v5 + 416 * *a1;
      v9 = (id *)&a1[52 * v5 + 29];
      do
      {
        if (*v9)
        {

          *v9 = 0;
        }
        v10 = (uint64_t)*(v9 - 3);
        if (v10)
        {
          if (*(v9 - 2))
          {
            (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v10 + 40))(v10, *(v9 - 1), v7);
            *(v9 - 2) = 0;
            *(v9 - 1) = 0;
          }
          *(v9 - 3) = 0;
        }
        *(v9 - 27) = 0;
        v9 += 52;
        v8 -= 416;
      }
      while (v8);
    }
  }
  *a1 = v5;
  return re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear((uint64_t)a2);
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      v6 = *(_OWORD *)(v5 + 16);
      v7 = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v5 + 32);
      *(_OWORD *)(a3 + 48) = v7;
      *(_OWORD *)(a3 + 16) = v6;
      v8 = *(_OWORD *)(v5 + 64);
      v9 = *(_OWORD *)(v5 + 80);
      v10 = *(_OWORD *)(v5 + 112);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(v5 + 96);
      *(_OWORD *)(a3 + 112) = v10;
      *(_OWORD *)(a3 + 64) = v8;
      *(_OWORD *)(a3 + 80) = v9;
      v11 = *(_OWORD *)(v5 + 128);
      v12 = *(_OWORD *)(v5 + 144);
      v13 = *(_OWORD *)(v5 + 176);
      *(_OWORD *)(a3 + 160) = *(_OWORD *)(v5 + 160);
      *(_OWORD *)(a3 + 176) = v13;
      *(_OWORD *)(a3 + 128) = v11;
      *(_OWORD *)(a3 + 144) = v12;
      re::FixedArray<float>::operator=((uint64_t *)(a3 + 192), (uint64_t *)(v5 + 192));
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a3 + 216), (void **)(v5 + 216));
      v14 = *(_OWORD *)(v5 + 272);
      v16 = *(_OWORD *)(v5 + 224);
      v15 = *(_OWORD *)(v5 + 240);
      *(_OWORD *)(a3 + 256) = *(_OWORD *)(v5 + 256);
      *(_OWORD *)(a3 + 272) = v14;
      *(_OWORD *)(a3 + 224) = v16;
      *(_OWORD *)(a3 + 240) = v15;
      v17 = *(_OWORD *)(v5 + 336);
      v19 = *(_OWORD *)(v5 + 288);
      v18 = *(_OWORD *)(v5 + 304);
      *(_OWORD *)(a3 + 320) = *(_OWORD *)(v5 + 320);
      *(_OWORD *)(a3 + 336) = v17;
      *(_OWORD *)(a3 + 288) = v19;
      *(_OWORD *)(a3 + 304) = v18;
      result = *(__n128 *)(v5 + 384);
      v21 = *(_OWORD *)(v5 + 400);
      v23 = *(_OWORD *)(v5 + 352);
      v22 = *(_OWORD *)(v5 + 368);
      *(__n128 *)(a3 + 384) = result;
      *(_OWORD *)(a3 + 400) = v21;
      *(_OWORD *)(a3 + 352) = v23;
      *(_OWORD *)(a3 + 368) = v22;
      v5 += 416;
      a3 += 416;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *re::BucketArray<re::SFBSystemShellBlurContext,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 128, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::SFBSystemShellBlurContext,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<re::OpenSkyData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 832, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::OpenSkyData,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<re::ProjectiveShadowBuilderInputGlobalData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1024, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::ProjectiveShadowBuilderInputGlobalData,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<re::ProjectiveMeshShadowBuilderInputGlobalData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1344, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::ProjectiveMeshShadowBuilderInputGlobalData,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<re::MeshShadowPerFrameUpdateData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 2560, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::MeshShadowPerFrameUpdateData,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::BucketArray<re::IBLContext,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::IBLContext,4ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 56 * (v2 & 3);
}

_QWORD *re::BucketArray<re::IBLContext,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 224, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::IBLContext,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::BucketArray<re::MeshSceneCollection,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::MeshSceneCollection,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 40 * (v2 & 3);
}

uint64_t re::DynamicArray<re::MeshScene>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshScene>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::MeshScene>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::MeshScene>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshScene>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshScene *,re::MeshScene *,re::MeshScene *>((uint64_t)&v43, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 656 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = v9 + 656 * v4;
      v11 = a1[4];
      v12 = 656 * v8;
      do
      {
        v13 = v11 + v12;
        v14 = v9 + v12;
        v15 = *(_OWORD *)(v9 + v12);
        v16 = *(_OWORD *)(v9 + v12 + 16);
        v17 = *(_OWORD *)(v9 + v12 + 48);
        *(_OWORD *)(v13 + 32) = *(_OWORD *)(v9 + v12 + 32);
        *(_OWORD *)(v13 + 48) = v17;
        *(_OWORD *)v13 = v15;
        *(_OWORD *)(v13 + 16) = v16;
        v18 = *(_OWORD *)(v9 + v12 + 64);
        v19 = *(_OWORD *)(v9 + v12 + 80);
        v20 = *(_OWORD *)(v9 + v12 + 112);
        *(_OWORD *)(v13 + 96) = *(_OWORD *)(v9 + v12 + 96);
        *(_OWORD *)(v13 + 112) = v20;
        *(_OWORD *)(v13 + 64) = v18;
        *(_OWORD *)(v13 + 80) = v19;
        v21 = *(_OWORD *)(v9 + v12 + 128);
        v22 = *(_OWORD *)(v9 + v12 + 144);
        v23 = *(_OWORD *)(v9 + v12 + 176);
        *(_OWORD *)(v13 + 160) = *(_OWORD *)(v9 + v12 + 160);
        *(_OWORD *)(v13 + 176) = v23;
        *(_OWORD *)(v13 + 128) = v21;
        *(_OWORD *)(v13 + 144) = v22;
        v24 = *(_OWORD *)(v9 + v12 + 192);
        v25 = *(_OWORD *)(v9 + v12 + 208);
        v26 = *(_OWORD *)(v9 + v12 + 240);
        *(_OWORD *)(v13 + 224) = *(_OWORD *)(v9 + v12 + 224);
        *(_OWORD *)(v13 + 240) = v26;
        *(_OWORD *)(v13 + 192) = v24;
        *(_OWORD *)(v13 + 208) = v25;
        re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown(v11 + v12 + 256, (uint64_t *)(v9 + v12 + 256));
        *(_DWORD *)(v13 + 320) = *(_DWORD *)(v9 + v12 + 320);
        v27 = *(unsigned __int8 *)(v9 + v12 + 328);
        *(_BYTE *)(v13 + 328) = v27;
        if (v27)
          *(_QWORD *)(v13 + 336) = *(_QWORD *)(v14 + 336);
        *(_OWORD *)(v13 + 344) = *(_OWORD *)(v14 + 344);
        v28 = *(_OWORD *)(v14 + 360);
        v29 = *(_OWORD *)(v14 + 376);
        v30 = *(_OWORD *)(v14 + 408);
        *(_OWORD *)(v13 + 392) = *(_OWORD *)(v14 + 392);
        *(_OWORD *)(v13 + 408) = v30;
        *(_OWORD *)(v13 + 360) = v28;
        *(_OWORD *)(v13 + 376) = v29;
        v31 = *(_OWORD *)(v14 + 424);
        v32 = *(_OWORD *)(v14 + 440);
        v33 = *(_OWORD *)(v14 + 472);
        *(_OWORD *)(v13 + 456) = *(_OWORD *)(v14 + 456);
        *(_OWORD *)(v13 + 472) = v33;
        *(_OWORD *)(v13 + 424) = v31;
        *(_OWORD *)(v13 + 440) = v32;
        v34 = *(unsigned __int8 *)(v14 + 496);
        *(_BYTE *)(v13 + 496) = v34;
        if (v34)
        {
          v35 = v11 + v12;
          v36 = *(_OWORD *)(v9 + v12 + 528);
          *(_OWORD *)(v35 + 512) = *(_OWORD *)(v9 + v12 + 512);
          *(_OWORD *)(v35 + 528) = v36;
        }
        *(_QWORD *)(v13 + 544) = *(_QWORD *)(v14 + 544);
        v37 = *(unsigned __int8 *)(v14 + 560);
        *(_BYTE *)(v13 + 560) = v37;
        if (v37)
        {
          v38 = (_OWORD *)(v11 + v12);
          v39 = *(_OWORD *)(v9 + v12 + 576);
          v40 = *(_OWORD *)(v9 + v12 + 592);
          v41 = *(_OWORD *)(v9 + v12 + 624);
          v38[38] = *(_OWORD *)(v9 + v12 + 608);
          v38[39] = v41;
          v38[36] = v39;
          v38[37] = v40;
        }
        *(_QWORD *)(v13 + 640) = *(_QWORD *)(v14 + 640);
        v11 += 656;
        v9 += 656;
      }
      while (v14 + 656 != v10);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshScene *,re::MeshScene *,re::MeshScene *>((uint64_t)&v42, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 656 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = -656 * v4 + 656 * v5;
      v7 = 656 * v4 + a1[4] + 256;
      do
      {
        re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v7);
        v7 += 656;
        v6 -= 656;
      }
      while (v6);
    }
  }
  a1[2] = v4;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshScene *,re::MeshScene *,re::MeshScene *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    v9 = a2 + v7;
    v10 = *(_OWORD *)(a2 + v7);
    v11 = *(_OWORD *)(a2 + v7 + 16);
    v12 = *(_OWORD *)(a2 + v7 + 48);
    *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + v7 + 32);
    *(_OWORD *)(v8 + 48) = v12;
    *(_OWORD *)v8 = v10;
    *(_OWORD *)(v8 + 16) = v11;
    v13 = *(_OWORD *)(a2 + v7 + 64);
    v14 = *(_OWORD *)(a2 + v7 + 80);
    v15 = *(_OWORD *)(a2 + v7 + 112);
    *(_OWORD *)(v8 + 96) = *(_OWORD *)(a2 + v7 + 96);
    *(_OWORD *)(v8 + 112) = v15;
    *(_OWORD *)(v8 + 64) = v13;
    *(_OWORD *)(v8 + 80) = v14;
    v16 = *(_OWORD *)(a2 + v7 + 128);
    v17 = *(_OWORD *)(a2 + v7 + 144);
    v18 = *(_OWORD *)(a2 + v7 + 176);
    *(_OWORD *)(v8 + 160) = *(_OWORD *)(a2 + v7 + 160);
    *(_OWORD *)(v8 + 176) = v18;
    *(_OWORD *)(v8 + 128) = v16;
    *(_OWORD *)(v8 + 144) = v17;
    v19 = *(_OWORD *)(a2 + v7 + 192);
    v20 = *(_OWORD *)(a2 + v7 + 208);
    v21 = *(_OWORD *)(a2 + v7 + 240);
    *(_OWORD *)(v8 + 224) = *(_OWORD *)(a2 + v7 + 224);
    *(_OWORD *)(v8 + 240) = v21;
    *(_OWORD *)(v8 + 192) = v19;
    *(_OWORD *)(v8 + 208) = v20;
    if (a4 != a2)
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::copy((_anonymous_namespace_ *)(v8 + 256), (uint64_t *)(v9 + 256));
    *(_DWORD *)(v8 + 320) = *(_DWORD *)(v9 + 320);
    if (*(_BYTE *)(v8 + 328) || *(_BYTE *)(v9 + 328))
    {
      if (!*(_BYTE *)(v8 + 328) || *(_BYTE *)(v9 + 328))
      {
        if (*(_BYTE *)(v8 + 328) || !*(_BYTE *)(v9 + 328))
        {
          *(_QWORD *)(a4 + v7 + 336) = *(_QWORD *)(a2 + v7 + 336);
        }
        else
        {
          *(_BYTE *)(v8 + 328) = 1;
          *(_QWORD *)(a4 + v7 + 336) = *(_QWORD *)(a2 + v7 + 336);
        }
      }
      else
      {
        *(_BYTE *)(v8 + 328) = 0;
      }
    }
    v22 = a4 + v7;
    v23 = (_OWORD *)(a4 + v7 + 344);
    *v23 = *(_OWORD *)(v9 + 344);
    v24 = *(_OWORD *)(v9 + 360);
    v25 = *(_OWORD *)(v9 + 376);
    v26 = *(_OWORD *)(v9 + 408);
    v23[3] = *(_OWORD *)(v9 + 392);
    v23[4] = v26;
    v23[1] = v24;
    v23[2] = v25;
    v27 = *(_OWORD *)(v9 + 424);
    v28 = *(_OWORD *)(v9 + 440);
    v29 = *(_OWORD *)(v9 + 472);
    v23[7] = *(_OWORD *)(v9 + 456);
    v23[8] = v29;
    v23[5] = v27;
    v23[6] = v28;
    if (*(_BYTE *)(a4 + v7 + 496) || *(_BYTE *)(v9 + 496))
    {
      if (!*(_BYTE *)(a4 + v7 + 496) || *(_BYTE *)(v9 + 496))
      {
        if (!*(_BYTE *)(a4 + v7 + 496) && *(_BYTE *)(v9 + 496))
          *(_BYTE *)(v22 + 496) = 1;
        v30 = *(_OWORD *)(a2 + v7 + 528);
        *(_OWORD *)(a4 + v7 + 512) = *(_OWORD *)(a2 + v7 + 512);
        *(_OWORD *)(a4 + v7 + 528) = v30;
      }
      else
      {
        *(_BYTE *)(v22 + 496) = 0;
      }
    }
    v31 = a4 + v7;
    *(_QWORD *)(a4 + v7 + 544) = *(_QWORD *)(v9 + 544);
    if (*(_BYTE *)(a4 + v7 + 560) || *(_BYTE *)(v9 + 560))
    {
      if (!*(_BYTE *)(a4 + v7 + 560) || *(_BYTE *)(v9 + 560))
      {
        if (!*(_BYTE *)(a4 + v7 + 560) && *(_BYTE *)(v9 + 560))
          *(_BYTE *)(v31 + 560) = 1;
        v32 = *(_OWORD *)(a2 + v7 + 576);
        v33 = *(_OWORD *)(a2 + v7 + 592);
        v34 = *(_OWORD *)(a2 + v7 + 624);
        *(_OWORD *)(a4 + v7 + 608) = *(_OWORD *)(a2 + v7 + 608);
        *(_OWORD *)(a4 + v7 + 624) = v34;
        *(_OWORD *)(a4 + v7 + 576) = v32;
        *(_OWORD *)(a4 + v7 + 592) = v33;
      }
      else
      {
        *(_BYTE *)(v31 + 560) = 0;
      }
    }
    *(_QWORD *)(a4 + v7 + 640) = *(_QWORD *)(v9 + 640);
    v7 += 656;
  }
  while (v9 + 656 != v6);
  return v6;
}

uint64_t re::BucketArray<re::MeshDeformationCollection,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::MeshDeformationCollection,4ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 56 * (v2 & 3);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation const&,re::BucketArray<re::MeshDeformation,8ul> const&,true>,re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation const&,re::BucketArray<re::MeshDeformation,8ul> const&,true>,re::BucketArray<re::MeshDeformation,8ul>::BucketArrayIterator<re::MeshDeformation,re::MeshDeformation&,re::BucketArray<re::MeshDeformation,8ul>&,true>>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v12 = (_QWORD *)result;
  if (a2 != a4 || a3 != a5)
  {
    v13 = a5 - 1;
    do
    {
      do
      {
        v14 = a3;
        v15 = re::BucketArray<re::MeshDeformation,8ul>::operator[](a2, a3);
        result = re::BucketArray<re::MeshDeformation,8ul>::operator[](a6, a7);
        v17 = *(_OWORD *)(v15 + 16);
        v16 = *(_OWORD *)(v15 + 32);
        *(_OWORD *)result = *(_OWORD *)v15;
        *(_OWORD *)(result + 16) = v17;
        *(_OWORD *)(result + 32) = v16;
        v19 = *(_OWORD *)(v15 + 64);
        v18 = *(_OWORD *)(v15 + 80);
        v20 = *(_OWORD *)(v15 + 48);
        *(_QWORD *)(result + 96) = *(_QWORD *)(v15 + 96);
        *(_OWORD *)(result + 64) = v19;
        *(_OWORD *)(result + 80) = v18;
        *(_OWORD *)(result + 48) = v20;
        a3 = v14 + 1;
        ++a7;
      }
      while (a2 != a4);
    }
    while (v13 != v14);
    a3 = a5;
  }
  *v12 = a2;
  v12[1] = a3;
  v12[2] = a6;
  v12[3] = a7;
  return result;
}

uint64_t re::BucketArray<re::DynamicArray<re::RenderGraphFileProvider>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::MipmapGenerationContext,4ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 40 * (v2 & 3);
}

_QWORD *re::BucketArray<re::ProbeLightingEnabledMetadata,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 4, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::ProbeLightingEnabledMetadata,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<SceneUnderstandingFlagEmitterData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 28, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<SceneUnderstandingFlagEmitterData,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<re::VirtualEnvironmentProbeContext,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 384, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::VirtualEnvironmentProbeContext,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t *re::allocInfo_RenderGraphSelectionParams(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_434);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_434))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411E9E8, 0);
    *(uint64_t *)((char *)&qword_25411E9F8 + 6) = 0;
    qword_25411E9F8 = 0;
    qword_25411EA08 = 0;
    qword_25411EA10 = 0xFFFFFFFFLL;
    qword_25411E9E8 = (uint64_t)&off_24ED7DAA8;
    qword_25411EA18 = (uint64_t)"RenderGraphSelectionParams";
    dword_25411EA20 = 0;
    xmmword_25411EA28 = 0u;
    unk_25411EA38 = 0u;
    xmmword_25411EA48 = 0u;
    qword_25411EA58 = 0;
    __cxa_guard_release(&_MergedGlobals_434);
  }
  return &qword_25411E9E8;
}

void re::initInfo_RenderGraphSelectionParams(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x5F078B5A7D39B3B4;
  v10[1] = "RenderGraphSelectionParams";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E978);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E978);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E970 = v8;
      __cxa_guard_release(&qword_25411E978);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25411E970;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSelectionParams>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSelectionParams>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSelectionParams>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSelectionParams>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

int32x4_t re::internal::defaultConstruct<re::RenderGraphSelectionParams>(uint64_t a1, uint64_t a2, int32x4_t *a3)
{
  int32x4_t result;

  a3->i64[0] = (uint64_t)&off_24ED811F8;
  a3->i64[1] = -1;
  a3[1].i64[0] = -1;
  a3[1].i64[1] = 0xFFFFFFFF00000000;
  a3[2].i32[0] = -1;
  result = vdupq_n_s32(0x7FC00000u);
  a3[3] = result;
  a3[4] = result;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphSelectionParams>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

int32x4_t re::internal::defaultConstructV2<re::RenderGraphSelectionParams>(int32x4_t *a1)
{
  int32x4_t result;

  a1->i64[0] = (uint64_t)&off_24ED811F8;
  a1->i64[1] = -1;
  a1[1].i64[0] = -1;
  a1[1].i64[1] = 0xFFFFFFFF00000000;
  a1[2].i32[0] = -1;
  result = vdupq_n_s32(0x7FC00000u);
  a1[3] = result;
  a1[4] = result;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphSelectionParams>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

re::RenderGraphSelectionEmitter *re::RenderGraphSelectionEmitter::RenderGraphSelectionEmitter(re::RenderGraphSelectionEmitter *this)
{
  int32x4_t v2;

  *((_BYTE *)this + 8) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_QWORD *)((char *)this + 124) = 0x7FFFFFFFLL;
  *(_QWORD *)this = &off_24ED81198;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 260) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  *(_QWORD *)((char *)this + 276) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 44) = &off_24ED811F8;
  *((_QWORD *)this + 45) = -1;
  *((_QWORD *)this + 46) = -1;
  *((_QWORD *)this + 47) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 96) = -1;
  v2 = vdupq_n_s32(0x7FC00000u);
  *((int32x4_t *)this + 25) = v2;
  *((int32x4_t *)this + 26) = v2;
  re::StringID::invalid((re::RenderGraphSelectionEmitter *)((char *)this + 432));
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = &str_110;
  return this;
}

uint64_t re::RenderGraphSelectionEmitter::handleRenderFrameData(uint64_t this, re::RenderFrame *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  re::RenderFrameData *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const re::WeakStringID *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t (**v21)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re::RenderFrameData *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t i;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t j;
  uint64_t v42;
  int v43;
  int v44;
  const char *v45;
  _QWORD *v46;
  int v47;
  re::RenderFrameData *v48;
  void *v49;
  _BYTE v50[24];
  _BYTE v51[24];
  _QWORD v52[3];
  _QWORD *v53;
  _QWORD v54[2];
  _QWORD v55[4];

  v3 = this;
  v55[2] = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned int *)a2 + 74);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)*((_QWORD *)a2 + 35);
    while (1)
    {
      v7 = *v6;
      v6 += 18;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)a2 + 74);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = (re::RenderFrame *)((char *)a2 + 264);
    v9 = v5;
    v10 = (_QWORD *)(this + 456);
    v11 = *((_QWORD *)a2 + 35);
    v47 = *((_DWORD *)a2 + 74);
    v48 = (re::RenderFrame *)((char *)a2 + 264);
    v46 = (_QWORD *)(this + 456);
    while (1)
    {
      v12 = (const re::WeakStringID *)(v11 + 72 * v9 + 8);
      v13 = re::RenderFrameData::stream(v8, v12);
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 48) + 520))(*(_QWORD *)(v13 + 48));
      v15 = this;
      if (*v10 <= 1uLL)
      {
        v16 = *(_BYTE **)(v3 + 464);
        if (v16)
        {
          if (!*v16)
            break;
        }
      }
      if (this)
      {
        if (!*(_QWORD *)(this + 40))
        {
          re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 761);
          _os_crash();
          __break(1u);
LABEL_50:
          re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 761);
          _os_crash();
          __break(1u);
LABEL_51:
          std::__throw_bad_function_call[abi:nn180100]();
        }
        v17 = re::BucketArray<re::SceneName,4ul>::operator[](this, v14);
        this = re::StringID::operator==((_QWORD *)(v17 + 8), v10);
        if ((_DWORD)this)
        {
          if (!*(_QWORD *)(v15 + 40))
            goto LABEL_50;
          this = re::BucketArray<re::SceneName,4ul>::operator[](v15, v18);
          if (!*(_QWORD *)(this + 24))
            break;
        }
      }
LABEL_38:
      v11 = *((_QWORD *)a2 + 35);
      if (*((_DWORD *)a2 + 74) <= (v5 + 1))
        v43 = v5 + 1;
      else
        v43 = *((_DWORD *)a2 + 74);
      while (1)
      {
        v9 = (v5 + 1);
        if (v43 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v44 = v9;
        if ((*(_DWORD *)(v11 + 72 * v9) & 0x80000000) != 0)
          goto LABEL_45;
      }
      v44 = v43;
LABEL_45:
      LODWORD(v5) = v44;
      if ((_DWORD)v4 == v44)
        return this;
    }
    strcpy((char *)v55, "Selection");
    strcpy((char *)v54, "Selection");
    v19 = atomic_load((unsigned __int8 *)&qword_25411E990);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_25411E990))
    {
      qword_25411E988 = re::getCombinedScopeHash((re *)v55, (const char *)v54, v45);
      __cxa_guard_release(&qword_25411E990);
    }
    v52[0] = &off_24ED81728;
    v52[1] = v3;
    v53 = v52;
    v20 = re::RenderFrameData::stream(v8, v12);
    v21 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v20, (uint64_t *)&v49);
    if (v21)
    {
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 40);
        if (v23)
        {
          v24 = 0;
          do
          {
            v25 = re::BucketArray<unsigned long,4ul>::operator[](v22, v24);
            if (!v53)
              goto LABEL_51;
            (*(void (**)(_QWORD *, re::RenderFrame *, char *, uint64_t))(*v53 + 48))(v53, a2, (char *)a2 + 32, v25);
          }
          while (v23 != ++v24);
        }
      }
    }
    v26 = v53;
    if (v53 == v52)
    {
      v26 = v52;
      v28 = 4;
      v27 = v48;
    }
    else
    {
      v27 = v48;
      if (!v53)
        goto LABEL_29;
      v28 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v28))();
LABEL_29:
    *(_QWORD *)v51 = v55[0];
    *(_WORD *)&v51[8] = v55[1];
    *(_QWORD *)&v51[10] = v54[0];
    *(_WORD *)&v51[18] = v54[1];
    v29 = (char *)operator new(0x28uLL);
    *(_QWORD *)v29 = &off_24ED817E0;
    *(_OWORD *)(v29 + 8) = *(_OWORD *)v51;
    *((_QWORD *)v29 + 3) = *(_QWORD *)&v51[16];
    *((_QWORD *)v29 + 4) = v3;
    v4 = v3;
    v30 = re::RenderFrameData::stream(v27, v12);
    v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 48) + 632))(*(_QWORD *)(v30 + 48));
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)(v31 + 40);
      if (v33)
      {
        for (i = 0; i != v33; ++i)
        {
          v35 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v32, i);
          (*(void (**)(char *, re::RenderFrame *, char *, uint64_t))(*(_QWORD *)v29 + 48))(v29, a2, (char *)a2 + 32, v35);
        }
      }
    }
    (*(void (**)(char *))(*(_QWORD *)v29 + 40))(v29);
    *(_QWORD *)v50 = v55[0];
    *(_WORD *)&v50[8] = v55[1];
    *(_QWORD *)&v50[10] = v54[0];
    *(_WORD *)&v50[18] = v54[1];
    v36 = (char *)operator new(0x28uLL);
    *(_QWORD *)v36 = &off_24ED818B0;
    *(_OWORD *)(v36 + 8) = *(_OWORD *)v50;
    *((_QWORD *)v36 + 3) = *(_QWORD *)&v50[16];
    *((_QWORD *)v36 + 4) = v4;
    v37 = re::RenderFrameData::stream(v48, v12);
    v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v37 + 48) + 664))(*(_QWORD *)(v37 + 48));
    if (v38)
    {
      v39 = v38;
      v40 = *(_QWORD *)(v38 + 40);
      if (v40)
      {
        for (j = 0; j != v40; ++j)
        {
          v42 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v39, j);
          (*(void (**)(char *, re::RenderFrame *, char *, uint64_t))(*(_QWORD *)v36 + 48))(v36, a2, (char *)a2 + 32, v42);
        }
      }
    }
    this = (*(uint64_t (**)(char *))(*(_QWORD *)v36 + 40))(v36);
    v3 = v4;
    LODWORD(v4) = v47;
    v8 = v48;
    v10 = v46;
    goto LABEL_38;
  }
  return this;
}

uint64_t *re::DynamicInlineArray<re::RenderCamera,2ul>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a1 != a2)
  {
    v3 = *a2;
    v4 = *a1;
    if (*a2 >= (unint64_t)*a1)
    {
      v5 = a2 + 2;
      v6 = &a2[4 * v4 + 2];
      v7 = a1 + 2;
      if (v4)
        memmove(a1 + 2, a2 + 2, 32 * v4);
      memcpy(&v7[4 * v4], v6, (char *)&v5[4 * v3] - (char *)v6);
    }
    else if (v3)
    {
      memmove(a1 + 2, a2 + 2, 32 * v3);
    }
    *a1 = v3;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

uint64_t *re::DynamicInlineArray<re::Projection,2ul>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a1 != a2)
  {
    v3 = *a2;
    v4 = *a1;
    if (*a2 >= (unint64_t)*a1)
    {
      v5 = a2 + 2;
      v6 = &a2[8 * v4 + 2];
      v7 = a1 + 2;
      if (v4)
        memmove(a1 + 2, a2 + 2, v4 << 6);
      memcpy(&v7[8 * v4], v6, (char *)&v5[8 * v3] - (char *)v6);
    }
    else if (v3)
    {
      memmove(a1 + 2, a2 + 2, v3 << 6);
    }
    *a1 = v3;
    ++*((_DWORD *)a1 + 2);
  }
  return a1;
}

uint64_t re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphSelectionEmitter *this, re::RenderGraphManager *a2, AssetService *a3)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[3];
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[3];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  result = re::FontID::isValid((re::RenderGraphSelectionEmitter *)((char *)this + 432));
  if ((result & 1) == 0)
  {
    v6 = re::globalAllocators((re *)result);
    v7 = v6[2];
    v20[0] = &off_24ED81290;
    v20[1] = this;
    v21 = v7;
    v22 = v20;
    v8 = re::globalAllocators((re *)v6)[2];
    v17[0] = &off_24ED812F8;
    v17[1] = this;
    v18 = v8;
    v19 = v17;
    re::RenderGraphManager::addProvider(a2, "Selection", (uint64_t)v20, (uint64_t)v17, 0, (uint64_t)&v13);
    v9 = v13;
    v10 = v14;
    v13 = 0;
    v14 = &str_110;
    v11 = *((_QWORD *)this + 54);
    v12 = *((_QWORD *)this + 55);
    *((_QWORD *)this + 54) = v9;
    *((_QWORD *)this + 55) = v10;
    v16[0] = v9 & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
    v16[1] = v12;
    re::StringID::destroyString((re::StringID *)v16);
    *((_QWORD *)this + 56) = v15;
    re::StringID::destroyString((re::StringID *)&v13);
    if (v19)
    {
      (*(void (**)(_QWORD *))*v19)(v19);
      if (v19 != v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
      v19 = 0;
    }
    result = (uint64_t)v22;
    if (v22)
    {
      result = (*(uint64_t (**)(_QWORD *))*v22)(v22);
      if (v22 != v20)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    }
  }
  return result;
}

void re::RenderGraphSelectionEmitter::unregisterProviders(re::RenderGraphSelectionEmitter *this, re::RenderGraphManager *a2)
{
  StringID *v4;
  _BYTE v5[16];
  uint64_t v6;

  v4 = (StringID *)((char *)this + 432);
  if (re::FontID::isValid((re::RenderGraphSelectionEmitter *)((char *)this + 432)))
  {
    re::StringID::StringID((re::StringID *)v5, v4);
    v6 = *((_QWORD *)this + 56);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v5);
    re::StringID::destroyString((re::StringID *)v5);
    re::ProviderHandle::invalidate((re::ProviderHandle *)v4);
  }
}

void re::ProviderHandle::invalidate(re::ProviderHandle *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[2];

  v6 = 0;
  v7 = 0;
  v8 = 0;
  re::StringID::invalid((re::StringID *)&v6);
  v2 = v6;
  v3 = v7;
  v7 = &str_110;
  v8 = 0;
  v6 = 0;
  v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = v3;
  v9[0] = v2 & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  v9[1] = v5;
  re::StringID::destroyString((re::StringID *)v9);
  *((_QWORD *)this + 2) = v8;
  re::StringID::destroyString((re::StringID *)&v6);
}

_QWORD *re::RenderGraphSelectionEmitter::addSelectionCompleteCallback(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v9 = 0;
  v7 = v4;
  std::function<void ()(BOOL)>::operator=(v8, a3);
  re::DynamicArray<re::SelectionCompleteHandler>::add((_anonymous_namespace_ *)(a1 + 160), &v7);
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v6))(result);
}

uint64_t re::DynamicArray<re::SelectionCompleteHandler>::add(_anonymous_namespace_ *this, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SelectionConcludeHandler>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (_QWORD *)(*((_QWORD *)this + 4) + 40 * v4);
  *v5 = *a2;
  result = std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::RenderGraphSelectionEmitter::addSelectionConcludeCallback(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v9 = 0;
  v7 = v4;
  std::function<void ()(BOOL)>::operator=(v8, a3);
  re::DynamicArray<re::SelectionCompleteHandler>::add((_anonymous_namespace_ *)(a1 + 200), &v7);
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v6))(result);
}

uint64_t re::RenderGraphSelectionEmitter::setFilteredEntityIDSet(re::RenderGraphSelectionEmitter *this, const __CFArray *a2)
{
  char *v3;
  uint64_t result;
  uint64_t v5;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  uint64_t valuePtr;

  v3 = (char *)this + 240;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 240);
  result = CFArrayGetCount(a2);
  if (result >= 1)
  {
    v5 = result;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, i);
      valuePtr = 0;
      result = CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, &valuePtr);
      if ((_DWORD)result)
        result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v3, &valuePtr);
    }
  }
  return result;
}

uint64_t *re::allocInfo_RenderGraphSelectionEmitter(re *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411E998);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411E998))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411EA60, 0);
    *(uint64_t *)((char *)&qword_25411EA70 + 6) = 0;
    qword_25411EA70 = 0;
    qword_25411EA80 = 0;
    qword_25411EA88 = 0xFFFFFFFFLL;
    qword_25411EA60 = (uint64_t)&off_24ED7DAA8;
    qword_25411EA90 = (uint64_t)"RenderGraphSelectionEmitter";
    dword_25411EA98 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_25411EAD0 = 0;
    __cxa_guard_release(&qword_25411E998);
  }
  return &qword_25411EA60;
}

void re::initInfo_RenderGraphSelectionEmitter(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x81E9DFF0C63BCB34;
  v14[1] = "RenderGraphSelectionEmitter";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25411E9A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411E9A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphEmitterBase((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphEmitterBase";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411E9D8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "selectionMaterial";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x8800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411E9E0 = v12;
      __cxa_guard_release(&qword_25411E9A0);
    }
  }
  *((_QWORD *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411E9D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSelectionEmitter>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSelectionEmitter>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSelectionEmitter>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSelectionEmitter>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

re::RenderGraphSelectionEmitter *re::internal::defaultConstruct<re::RenderGraphSelectionEmitter>(int a1, int a2, re::RenderGraphSelectionEmitter *this)
{
  return re::RenderGraphSelectionEmitter::RenderGraphSelectionEmitter(this);
}

void re::internal::defaultDestruct<re::RenderGraphSelectionEmitter>(int a1, int a2, re::RenderGraphSelectionEmitter *this)
{
  re::RenderGraphSelectionEmitter::~RenderGraphSelectionEmitter(this);
}

uint64_t re::introspect_RenderGraphSelectionEmitter(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphSelectionEmitter", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSelectionEmitter, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSelectionEmitter, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphSelectionEmitter>, this);
}

void re::RenderGraphSelectionEmitter::~RenderGraphSelectionEmitter(re::RenderGraphSelectionEmitter *this)
{
  re::RenderGraphSelectionEmitter::~RenderGraphSelectionEmitter(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  re::StringID::destroyString((re::RenderGraphSelectionEmitter *)((char *)this + 456));
  re::StringID::destroyString((re::RenderGraphSelectionEmitter *)((char *)this + 432));
  v2 = (void *)*((_QWORD *)this + 43);
  if (v2)
  {

    *((_QWORD *)this + 43) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 42);
  if (v3)
  {

    *((_QWORD *)this + 42) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 41);
  if (v4)
  {

    *((_QWORD *)this + 41) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 40);
  if (v5)
  {

    *((_QWORD *)this + 40) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 39);
  if (v6)
  {

    *((_QWORD *)this + 39) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 38);
  if (v7)
  {

    *((_QWORD *)this + 38) = 0;
  }
  v8 = (void *)*((_QWORD *)this + 37);
  if (v8)
  {

    *((_QWORD *)this + 37) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 36);
  if (v9)
  {

    *((_QWORD *)this + 36) = 0;
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 30);
  re::DynamicArray<re::SelectionCompleteHandler>::deinit((uint64_t)this + 200);
  re::DynamicArray<re::SelectionCompleteHandler>::deinit((uint64_t)this + 160);
  re::AssetHandle::~AssetHandle((re::RenderGraphSelectionEmitter *)((char *)this + 136));
  re::RenderGraphEmitterBase::~RenderGraphEmitterBase(this);
}

void re::RenderGraphSelectionParams::~RenderGraphSelectionParams(re::RenderGraphSelectionParams *this)
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::prepareForRendering(char const*,char const*,re::RenderFrame &)::$_0,void ()(re::FrameCount)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::prepareForRendering(char const*,char const*,re::RenderFrame &)::$_0,void ()(re::FrameCount)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD **v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD v41[2];
  unint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  int v47;
  _QWORD *v48;
  _QWORD v49[2];
  uint64_t v50;
  int v51;
  uint64_t v52;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v52 = 0;
  v49[1] = 0;
  v50 = 0;
  v49[0] = 0;
  v51 = 0;
  v5 = *(_OWORD **)(v4 + 288);
  if (v5)
  {
    v5 = objc_msgSend(v5, sel_contents);
    v6 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v6 + 16))
    {
      v7 = v5;
      v8 = 0;
      do
      {
        if (*((_QWORD *)v7 + v8))
        {
          v45[0] = 0;
          v45[0] = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v8);
          v5 = re::DynamicArray<re::TransitionCondition *>::add(v49, v45);
          v6 = *(_QWORD *)(a1 + 16);
        }
        ++v8;
      }
      while (v8 < *(_QWORD *)(v6 + 16));
    }
  }
  v48 = 0;
  v45[1] = 0;
  v46 = 0;
  v45[0] = 0;
  v47 = 0;
  if (*(_QWORD *)(v4 + 296)
    && *(_QWORD *)(v4 + 304)
    && *(_QWORD *)(v4 + 312)
    && *(_QWORD *)(v4 + 320)
    && *(_QWORD *)(v4 + 328)
    && *(_QWORD *)(v4 + 336))
  {
    v9 = 0;
    if (*(_QWORD *)(v4 + 344))
    {
      v10 = 0;
      if (v50)
      {
        re::DynamicArray<re::RenderGraphSelectionConcludeResult>::setCapacity(v45);
        v10 = v48;
        if (!v46)
        {
          *v48 = 0;
          *((_OWORD *)v10 + 1) = 0u;
          *((_OWORD *)v10 + 2) = 0u;
          *((_OWORD *)v10 + 3) = 0u;
          *((_OWORD *)v10 + 4) = 0u;
        }
        v9 = 1;
        v46 = 1;
        ++v47;
        *v10 = *(_QWORD *)objc_msgSend(*(id *)(v4 + 296), sel_contents);
        *((_OWORD *)v10 + 1) = *(_OWORD *)objc_msgSend(*(id *)(v4 + 304), sel_contents);
        *((_OWORD *)v10 + 2) = *(_OWORD *)objc_msgSend(*(id *)(v4 + 312), sel_contents);
        v10[6] = *(_QWORD *)objc_msgSend(*(id *)(v4 + 320), sel_contents);
        *((_DWORD *)v10 + 14) = *(_DWORD *)objc_msgSend(*(id *)(v4 + 328), sel_contents);
        *((_DWORD *)v10 + 15) = *(_DWORD *)objc_msgSend(*(id *)(v4 + 336), sel_contents);
        v5 = objc_msgSend(*(id *)(v4 + 344), sel_contents);
        *((_OWORD *)v10 + 4) = *v5;
      }
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v44 = 0;
  v41[1] = 0;
  v42 = 0;
  v41[0] = 0;
  v43 = 0;
  v11 = *(_QWORD *)(v4 + 216);
  if (v11)
  {
    v12 = *(_QWORD **)(v4 + 232);
    for (i = 40 * v11; i; i -= 40)
    {
      if ((*v12 & 0xFFFFFFFFFFFFFFFuLL) <= (v3 & 0xFFFFFFFFFFFFFFFuLL))
      {
        v36 = v10;
        v37 = v9;
        v14 = v12[4];
        if (!v14)
        {
LABEL_77:
          v33 = std::__throw_bad_function_call[abi:nn180100]();
          return re::internal::Callable<re::RenderGraphSelectionEmitter::prepareForRendering(char const*,char const*,re::RenderFrame &)::$_0,void ()(re::FrameCount)>::cloneInto(v33, v34);
        }
        v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v14 + 48))(v14, &v36);
      }
      else
      {
        v5 = (_OWORD *)re::DynamicArray<re::SelectionCompleteHandler>::add((_anonymous_namespace_ *)v41, v12);
      }
      v12 += 5;
    }
  }
  if ((_QWORD *)(v4 + 200) != v41)
  {
    if (*(_QWORD *)(v4 + 200))
    {
      if (v41[0])
      {
        v5 = re::DynamicArray<re::SelectionConcludeHandler>::copy(v4 + 200, (uint64_t)v41);
LABEL_40:
        ++*(_DWORD *)(v4 + 224);
        goto LABEL_41;
      }
      v16 = *(_QWORD *)(v4 + 216);
      *(_QWORD *)(v4 + 216) = 0;
      if (!v16)
        goto LABEL_40;
      v17 = 40 * v16;
      v18 = (_OWORD **)(*(_QWORD *)(v4 + 232) + 32);
      while (1)
      {
        v5 = *v18;
        if (v18 - 3 == (_OWORD **)*v18)
          break;
        if (v5)
        {
          v19 = 5;
LABEL_38:
          v5 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 8 * v19))();
        }
        v18 += 5;
        v17 -= 40;
        if (!v17)
          goto LABEL_40;
      }
      v5 = v18 - 3;
      v19 = 4;
      goto LABEL_38;
    }
    if (v41[0])
    {
      v15 = v42;
      *(_QWORD *)(v4 + 200) = v41[0];
      re::DynamicArray<re::SelectionConcludeHandler>::setCapacity((_QWORD *)(v4 + 200), v15);
      ++*(_DWORD *)(v4 + 224);
      v5 = re::DynamicArray<re::SelectionConcludeHandler>::copy(v4 + 200, (uint64_t)v41);
    }
  }
LABEL_41:
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v39 = 0;
  v20 = *(_QWORD *)(v4 + 176);
  if (v20)
  {
    v21 = *(_QWORD **)(v4 + 192);
    v22 = v3 & 0xFFFFFFFFFFFFFFFLL;
    v23 = 40 * v20;
    do
    {
      if ((*v21 & 0xFFFFFFFFFFFFFFFuLL) <= v22)
      {
        v35[0] = v52;
        v35[1] = v50;
        v24 = v21[4];
        if (!v24)
          goto LABEL_77;
        v5 = (_OWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v24 + 48))(v24, v35);
      }
      else
      {
        v5 = (_OWORD *)re::DynamicArray<re::SelectionCompleteHandler>::add((_anonymous_namespace_ *)&v36, v21);
      }
      v21 += 5;
      v23 -= 40;
    }
    while (v23);
  }
  if ((_QWORD **)(v4 + 160) == &v36)
    goto LABEL_63;
  if (!*(_QWORD *)(v4 + 160))
  {
    if (v36)
    {
      v25 = v38;
      *(_QWORD *)(v4 + 160) = v36;
      re::DynamicArray<re::SelectionConcludeHandler>::setCapacity((_QWORD *)(v4 + 160), v25);
      ++*(_DWORD *)(v4 + 184);
      v5 = re::DynamicArray<re::SelectionConcludeHandler>::copy(v4 + 160, (uint64_t)&v36);
    }
    goto LABEL_63;
  }
  if (!v36)
  {
    v26 = *(_QWORD *)(v4 + 176);
    *(_QWORD *)(v4 + 176) = 0;
    if (!v26)
      goto LABEL_62;
    v27 = 40 * v26;
    v28 = (_OWORD **)(*(_QWORD *)(v4 + 192) + 32);
    while (1)
    {
      v5 = *v28;
      if (v28 - 3 == (_OWORD **)*v28)
        break;
      if (v5)
      {
        v29 = 5;
LABEL_60:
        v5 = (_OWORD *)(*(uint64_t (**)(_OWORD *, uint64_t *))(*(_QWORD *)v5 + 8 * v29))(v5, a2);
      }
      v28 += 5;
      v27 -= 40;
      if (!v27)
        goto LABEL_62;
    }
    v5 = v28 - 3;
    v29 = 4;
    goto LABEL_60;
  }
  v5 = re::DynamicArray<re::SelectionConcludeHandler>::copy(v4 + 160, (uint64_t)&v36);
LABEL_62:
  ++*(_DWORD *)(v4 + 184);
LABEL_63:
  v30 = *(_QWORD **)(a1 + 16);
  if (v30)
  {
    v31 = re::globalAllocators((re *)v5)[2];
    if (*v30)
    {
      if (v30[4])
        (*(void (**)(_QWORD))(*(_QWORD *)*v30 + 40))(*v30);
      v30[4] = 0;
      v30[1] = 0;
      v30[2] = 0;
      *v30 = 0;
      ++*((_DWORD *)v30 + 6);
    }
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v31 + 40))(v31, v30);
  }
  re::DynamicArray<re::SelectionCompleteHandler>::deinit((uint64_t)&v36);
  re::DynamicArray<re::SelectionCompleteHandler>::deinit((uint64_t)v41);
  if (v45[0] && v48)
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v45[0] + 40))(v45[0], v48);
  result = v49[0];
  if (v49[0])
  {
    if (v52)
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v49[0] + 40))(v49[0], v52);
  }
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::prepareForRendering(char const*,char const*,re::RenderFrame &)::$_0,void ()(re::FrameCount)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED81238;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::prepareForRendering(char const*,char const*,re::RenderFrame &)::$_0,void ()(re::FrameCount)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED81238;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::prepareForRendering(char const*,char const*,re::RenderFrame &)::$_0,void ()(re::FrameCount)>::size()
{
  return 24;
}

_QWORD *re::DynamicArray<re::RenderGraphSelectionConcludeResult>::setCapacity(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[1] != 1)
  {
    v1 = result;
    if (result[2] <= 1uLL)
    {
      v2 = *result;
      if (*v1)
      {
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, 80, 16);
        if (result)
        {
          v4 = result;
          if (v1[1])
          {
            memcpy(result, (const void *)v1[4], 80 * v1[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[4]);
          }
          v1[4] = v4;
          v1[1] = 1;
        }
        else
        {
          re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 80, *(_QWORD *)(*v1 + 8));
          result = (_QWORD *)_os_crash();
          __break(1u);
        }
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphSelectionConcludeResult>::setCapacity(v1);
        ++*((_DWORD *)v1 + 6);
      }
    }
  }
  return result;
}

uint64_t *re::DynamicArray<re::SelectionConcludeHandler>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= *(_QWORD *)(a1 + 16))
  {
    re::DynamicArray<re::SelectionConcludeHandler>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 16));
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SelectionConcludeHandler *,re::SelectionConcludeHandler *,re::SelectionConcludeHandler *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * *(_QWORD *)(a1 + 16)), *(_QWORD **)(a1 + 32));
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 != v4)
    {
      v11 = 40 * v4 - 40 * v10;
      v12 = 40 * v10 + 8;
      v13 = *(_QWORD *)(a2 + 32) + v12;
      result = (uint64_t *)(*(_QWORD *)(a1 + 32) + v12);
      do
      {
        *(result - 1) = *(_QWORD *)(v13 - 8);
        v14 = std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)result, v13);
        v13 += 40;
        result = (uint64_t *)(v14 + 40);
        v11 -= 40;
      }
      while (v11);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SelectionConcludeHandler *,re::SelectionConcludeHandler *,re::SelectionConcludeHandler *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v4), *(_QWORD **)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 16);
    if (v4 != v6)
    {
      v7 = 40 * v6 - 40 * v4;
      v8 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 40 * v4 + 32);
      while (1)
      {
        result = *v8;
        if (v8 - 3 == (uint64_t **)*v8)
          break;
        if (result)
        {
          v9 = 5;
LABEL_8:
          result = (uint64_t *)(*(uint64_t (**)(void))(*result + 8 * v9))();
        }
        v8 += 5;
        v7 -= 40;
        if (!v7)
          goto LABEL_14;
      }
      result = (uint64_t *)(v8 - 3);
      v9 = 4;
      goto LABEL_8;
    }
  }
LABEL_14:
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

_QWORD *re::DynamicArray<re::SelectionConcludeHandler>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v3 = result[1];
  if (v3 == a2)
    return result;
  v5 = result;
  if (result[2] > a2)
    return result;
  result = (_QWORD *)*result;
  if (!*v5)
  {
    result = (_QWORD *)re::DynamicArray<re::SelectionConcludeHandler>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (is_mul_ok(a2, 0x28uLL))
    {
      v2 = 40 * a2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
      if (result)
      {
        v7 = result;
        if (!v5[1])
          goto LABEL_26;
        goto LABEL_11;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = 0;
  if (!v3)
    goto LABEL_26;
LABEL_11:
  v8 = v5[4];
  v9 = v5[2];
  if (!v9)
    goto LABEL_25;
  v10 = v7 + 4;
  v11 = 40 * v9;
  v12 = (_QWORD *)(v8 + 32);
  do
  {
    *(v10 - 4) = *(v12 - 4);
    v13 = (_QWORD *)*v12;
    if (*v12)
    {
      if (v12 - 3 != v13)
      {
        *v10 = v13;
        *v12 = 0;
        goto LABEL_23;
      }
      *v10 = v10 - 3;
      (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 24))(*v12);
    }
    else
    {
      *v10 = 0;
    }
    v14 = (_QWORD *)*v12;
    if (v12 - 3 == (_QWORD *)*v12)
    {
      v14 = v12 - 3;
      v15 = 4;
    }
    else
    {
      if (!v14)
        goto LABEL_23;
      v15 = 5;
    }
    (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_23:
    v10 += 5;
    v12 += 5;
    v11 -= 40;
  }
  while (v11);
  v8 = v5[4];
LABEL_25:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
LABEL_26:
  v5[4] = v7;
  v5[1] = a2;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SelectionConcludeHandler *,re::SelectionConcludeHandler *,re::SelectionConcludeHandler *,0>(uint64_t *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = (uint64_t)(v5 + 1);
      v7 = *v5;
      v5 += 5;
      v8 = a3 + 1;
      *a3 = v7;
      a3 += 5;
      result = std::function<void ()(BOOL)>::operator=(v8, v6);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::SelectionCompleteHandler>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;

  result = *(_QWORD *)a1;
  if (!result)
    return result;
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    goto LABEL_13;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_12;
  v5 = 40 * v4;
  v6 = (_QWORD **)(v3 + 32);
  do
  {
    v7 = *v6;
    if (v6 - 3 == *v6)
    {
      v7 = v6 - 3;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_10;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
    v6 += 5;
    v5 -= 40;
  }
  while (v5);
  result = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 32);
LABEL_12:
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
LABEL_13:
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_1,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_1,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1, const char **a2, char **a3, uint64_t a4)
{
  const char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  re::Allocator *v54;
  unsigned __int8 v55;
  size_t v56;
  unint64_t v57;
  re::CameraData *v58;
  uint64_t *v59;
  uint64_t *v60;
  _QWORD *v61;
  id *v62;
  id *v63;
  id *v64;
  unsigned __int8 v65;
  size_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  re *v91;
  unint64_t v92;
  uint64_t v93;
  char **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  re::CameraData *v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  size_t v112;
  unint64_t v113;
  uint64_t v115;
  size_t v116;
  unint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t ScopeResolution;
  unsigned int v121;
  unint64_t v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  id *v129;
  uint64_t v130;
  const char *v131;
  const char *v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void **v140;
  uint64_t v141;
  void **v142;
  unint64_t v143;
  void **v144;
  id v145;
  int v146;
  unsigned int v147;
  id v148;
  int v149;
  unsigned int v150;
  id v151;
  int v152;
  unsigned int v153;
  id v154;
  int v155;
  unsigned int v156;
  id v157;
  int v158;
  unsigned int v159;
  re::CameraData *v160;
  int v161;
  unsigned int v162;
  unint64_t v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *a3;
  if (*a3)
  {
    v7 = *v6;
    if (*v6)
    {
      v8 = v6[1];
      if (v8)
      {
        v9 = (unsigned __int8 *)(v6 + 2);
        do
        {
          v7 = 31 * v7 + v8;
          v10 = *v9++;
          v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v138 = *(_QWORD *)(a1 + 8);
  v166 = v7;
  v11 = strlen(v5);
  v131 = v5;
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)v5, v11, 0, &v172);
    v12 = (v173 - 0x61C8864680B583E9 + (v172 << 6) + (v172 >> 2)) ^ v172;
  }
  else
  {
    v12 = 0;
  }
  v13 = strlen(v6);
  v14 = 0x9E3779B97F4A7C17;
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)v6, v13, 0, &v172);
    v14 = ((v173 - 0x61C8864680B583E9 + (v172 << 6) + (v172 >> 2)) ^ v172) - 0x61C8864680B583E9;
  }
  v15 = ((v12 >> 2) + (v12 << 6) + v14) ^ v12;
  v16 = (unint64_t)"N2re16SkyboxMeshIDDataE";
  if (((unint64_t)"N2re16SkyboxMeshIDDataE" & 0x8000000000000000) != 0)
  {
    v17 = (unsigned __int8 *)((unint64_t)"N2re16SkyboxMeshIDDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v18 = 5381;
    do
    {
      v16 = v18;
      v19 = *v17++;
      v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  v172 = (v15 - 0x61C8864680B583E9 + (v16 << 6) + (v16 >> 2)) ^ v16;
  v135 = a4 + 96;
  v20 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a4 + 96, (uint64_t *)&v172);
  v132 = v6;
  if (v20 && *(_QWORD *)v20)
  {
    v21 = 0;
    v6 = *(char **)(*(_QWORD *)v20 + 8);
  }
  else
  {
    v21 = 1;
  }
  v137 = v15 - 0x61C8864680B583E9;
  v22 = re::RenderGraphDataStore::get<re::CurrentSelectionData>(a4 + 32, v15);
  v141 = *(_QWORD *)(*(_QWORD *)(v22 + 8) + 440);
  v139 = *(_QWORD *)(v141 + 40);
  v136 = a4;
  v130 = a4 + 32;
  v133 = v22;
  v23 = 0;
  if (v139)
  {
    v24 = 0;
    v25 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 32);
    v26 = v25 + 72;
    v27 = v25 + 8;
    do
    {
      v143 = v24;
      v28 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v141, v24);
      v29 = *(_QWORD *)(v28 + 16);
      if (v29)
      {
        v30 = *(_QWORD *)(v28 + 32);
        v31 = v30 + 656 * v29;
        do
        {
          if (((v21 & 1) != 0 || *(char **)(v30 + 416) != v6)
            && !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v138 + 240, (uint64_t *)(v30 + 416)))
          {
            v32 = *(_QWORD *)(v30 + 8);
            if (v32)
            {
              v33 = *(uint64_t **)v30;
              v34 = 8 * v32;
              do
              {
                v35 = *v33++;
                v36 = re::DataArray<re::MeshInstance>::get(v26, v35);
                v23 += *(_QWORD *)(re::DataArray<re::MeshModel>::get(v27, *(_QWORD *)(v36 + 16)) + 56);
                v34 -= 8;
              }
              while (v34);
            }
          }
          v30 += 656;
        }
        while (v30 != v31);
      }
      v24 = v143 + 1;
    }
    while (v143 + 1 != v139);
  }
  v37 = (unint64_t)"N2re27SelectionDrawCallBufferDataE";
  if (((unint64_t)"N2re27SelectionDrawCallBufferDataE" & 0x8000000000000000) != 0)
  {
    v38 = (unsigned __int8 *)((unint64_t)"N2re27SelectionDrawCallBufferDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v39 = 5381;
    do
    {
      v37 = v39;
      v40 = *v38++;
      v39 = (33 * v39) ^ v40;
    }
    while (v40);
  }
  v41 = (v137 + (v37 << 6) + (v37 >> 2)) ^ v37;
  v42 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v136 + 40) + 32))(*(_QWORD *)(v136 + 40), 16, 8);
  *v42 = &off_24ED81940;
  v42[1] = 40 * v23;
  v43 = *(_QWORD *)(v136 + 96);
  if (v43)
  {
    v43 = v41 % *(unsigned int *)(v136 + 120);
    v44 = *(unsigned int *)(*(_QWORD *)(v136 + 104) + 4 * v43);
    if ((_DWORD)v44 != 0x7FFFFFFF)
    {
      v51 = *(_QWORD *)(v136 + 112);
      if (*(_QWORD *)(v51 + 24 * v44 + 8) == v41)
      {
LABEL_46:
        v50 = v51 + 24 * v44;
        goto LABEL_47;
      }
      while (1)
      {
        LODWORD(v44) = *(_DWORD *)(v51 + 24 * v44) & 0x7FFFFFFF;
        if ((_DWORD)v44 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v51 + 24 * v44 + 8) == v41)
          goto LABEL_46;
      }
    }
  }
  v45 = *(unsigned int *)(v136 + 132);
  if ((_DWORD)v45 == 0x7FFFFFFF)
  {
    v45 = *(unsigned int *)(v136 + 128);
    v46 = v45;
    if ((_DWORD)v45 == *(_DWORD *)(v136 + 120))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v135, 2 * *(_DWORD *)(v136 + 124));
      LODWORD(v43) = v41 % *(unsigned int *)(v136 + 120);
      v46 = *(_DWORD *)(v136 + 128);
    }
    *(_DWORD *)(v136 + 128) = v46 + 1;
    v47 = *(_QWORD *)(v136 + 112);
    v48 = *(_DWORD *)(v47 + 24 * v45);
  }
  else
  {
    v47 = *(_QWORD *)(v136 + 112);
    v48 = *(_DWORD *)(v47 + 24 * v45);
    *(_DWORD *)(v136 + 132) = v48 & 0x7FFFFFFF;
  }
  v49 = 24 * v45;
  *(_DWORD *)(v47 + v49) = v48 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v136 + 112) + v49) = *(_DWORD *)(*(_QWORD *)(v136 + 112) + 24 * v45) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v136 + 104) + 4 * v43);
  *(_QWORD *)(*(_QWORD *)(v136 + 112) + 24 * v45 + 8) = v41;
  *(_QWORD *)(*(_QWORD *)(v136 + 112) + 24 * v45 + 16) = v42;
  *(_DWORD *)(*(_QWORD *)(v136 + 104) + 4 * v43) = v45;
  ++*(_DWORD *)(v136 + 124);
  ++*(_DWORD *)(v136 + 136);
  v50 = *(_QWORD *)(v136 + 112) + 24 * v45;
LABEL_47:
  v52 = *(_QWORD *)(v50 + 16);
  if (!*(_QWORD *)(v52 + 8))
    return 0;
  v53 = *(void **)(v138 + 288);
  if (!v53 || (unint64_t)objc_msgSend(v53, sel_length) < *(_QWORD *)(v52 + 8))
  {
    v172 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v136 + 8) + 184), sel_newBufferWithLength_options_);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v138 + 288), (void **)&v172);
    if (v172)

  }
  v129 = (id *)(v138 + 288);
  v54 = *(re::Allocator **)(v136 + 376);
  v163 = 0;
  v160 = 0;
  if ((v55 & 1) == 0
  {
    re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
  }
  v160 = (re::CameraData *)re::introspect<re::CameraData>(void)::info;
  v56 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
  if (v56)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraData>(void)::info + 6), v56, 0, &v172);
    v57 = (v173 - 0x61C8864680B583E9 + (v172 << 6) + (v172 >> 2)) ^ v172;
  }
  else
  {
    v57 = 0;
  }
  v163 = v57;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v136 + 208, &v163, &v160);
  v172 = (v137 + (v163 << 6) + (v163 >> 2)) ^ v163;
  v58 = (re::CameraData *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v136 + 40) + 32))(*(_QWORD *)(v136 + 40), 528, 16);
  v160 = re::CameraData::CameraData(v58, v54);
  v59 = *(uint64_t **)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v135, &v172, &v160);
  v60 = *(uint64_t **)(v133 + 8);
  v59[55] = v60[55];
  v59[56] = v60[56];
  v61 = v59 + 6;
  re::DynamicInlineArray<re::RenderCamera,2ul>::operator=(v59 + 6, v60 + 6);
  re::DynamicInlineArray<re::Projection,2ul>::operator=(v59 + 16, (uint64_t *)(*(_QWORD *)(v133 + 8) + 128));
  v62 = (id *)(v138 + 296);
  if (!*(_QWORD *)(v138 + 296))
  {
    v172 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v136 + 8) + 184), sel_newBufferWithLength_options_, 8 * *v61, 0);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v138 + 296), (void **)&v172);
    if (v172)

  }
  v63 = (id *)(v138 + 304);
  if (!*(_QWORD *)(v138 + 304))
  {
    v172 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v136 + 8) + 184), sel_newBufferWithLength_options_, 16 * *v61, 0);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v138 + 304), (void **)&v172);
    if (v172)

  }
  v64 = (id *)(v138 + 312);
  if (!*(_QWORD *)(v138 + 312))
  {
    v172 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v136 + 8) + 184), sel_newBufferWithLength_options_, 16 * *v61, 0);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v138 + 312), (void **)&v172);
    if (v172)

  }
  v134 = (void **)(v138 + 320);
  if (!*(_QWORD *)(v138 + 320))
  {
    v172 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v136 + 8) + 184), sel_newBufferWithLength_options_, 8 * *v61, 0);
    NS::SharedPtr<MTL::Texture>::operator=(v134, (void **)&v172);
    if (v172)

  }
  v140 = (void **)(v138 + 328);
  if (!*(_QWORD *)(v138 + 328))
  {
    v172 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v136 + 8) + 184), sel_newBufferWithLength_options_, 4 * *v61, 0);
    NS::SharedPtr<MTL::Texture>::operator=(v140, (void **)&v172);
    if (v172)

  }
  v142 = (void **)(v138 + 336);
  if (!*(_QWORD *)(v138 + 336))
  {
    v172 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v136 + 8) + 184), sel_newBufferWithLength_options_, 4 * *v61, 0);
    NS::SharedPtr<MTL::Texture>::operator=(v142, (void **)&v172);
    if (v172)

  }
  v144 = (void **)(v138 + 344);
  if (!*(_QWORD *)(v138 + 344))
  {
    v172 = (unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v136 + 8) + 184), sel_newBufferWithLength_options_, 16 * *v61, 0);
    NS::SharedPtr<MTL::Texture>::operator=(v144, (void **)&v172);
    if (v172)

  }
  v163 = 0;
  v160 = 0;
  v65 = atomic_load((unsigned __int8 *)&qword_25411E9B0);
  if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_25411E9B0))
  {
    qword_25411E9A8 = re::internal::getOrCreateInfo((re::internal *)"RenderGraphSelectionParams", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSelectionParams, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSelectionParams, (void (*)(re::IntrospectionBase *))&unk_25411E980, 0);
    __cxa_guard_release(&qword_25411E9B0);
  }
  v160 = (re::CameraData *)qword_25411E9A8;
  v66 = strlen(*(const char **)(qword_25411E9A8 + 48));
  if (v66)
  {
    MurmurHash3_x64_128(*(_QWORD *)(qword_25411E9A8 + 48), v66, 0, &v172);
    v67 = (v173 - 0x61C8864680B583E9 + (v172 << 6) + (v172 >> 2)) ^ v172;
  }
  else
  {
    v67 = 0;
  }
  v163 = v67;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v136 + 208, &v163, &v160);
  v68 = (v137 + (v163 << 6) + (v163 >> 2)) ^ v163;
  v69 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v136 + 40) + 32))(*(_QWORD *)(v136 + 40), 80, 16);
  v70 = v69;
  *(_QWORD *)v69 = &off_24ED811F8;
  *(_OWORD *)(v69 + 8) = *(_OWORD *)(v138 + 360);
  v71 = *(_OWORD *)(v138 + 376);
  v72 = *(_OWORD *)(v138 + 392);
  v73 = *(_OWORD *)(v138 + 408);
  *(_QWORD *)(v69 + 72) = *(_QWORD *)(v138 + 424);
  *(_OWORD *)(v69 + 56) = v73;
  *(_OWORD *)(v69 + 40) = v72;
  *(_OWORD *)(v69 + 24) = v71;
  v74 = *(_QWORD *)(v136 + 96);
  if (v74)
  {
    v74 = v68 % *(unsigned int *)(v136 + 120);
    v75 = *(unsigned int *)(*(_QWORD *)(v136 + 104) + 4 * v74);
    if ((_DWORD)v75 != 0x7FFFFFFF)
    {
      v115 = *(_QWORD *)(v136 + 112);
      if (*(_QWORD *)(v115 + 24 * v75 + 8) == v68)
        goto LABEL_89;
      while (1)
      {
        LODWORD(v75) = *(_DWORD *)(v115 + 24 * v75) & 0x7FFFFFFF;
        if ((_DWORD)v75 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v115 + 24 * v75 + 8) == v68)
          goto LABEL_89;
      }
    }
  }
  v76 = *(unsigned int *)(v136 + 132);
  if ((_DWORD)v76 == 0x7FFFFFFF)
  {
    v76 = *(unsigned int *)(v136 + 128);
    v77 = v76;
    if ((_DWORD)v76 == *(_DWORD *)(v136 + 120))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v135, 2 * *(_DWORD *)(v136 + 124));
      LODWORD(v74) = v68 % *(unsigned int *)(v136 + 120);
      v77 = *(_DWORD *)(v136 + 128);
    }
    *(_DWORD *)(v136 + 128) = v77 + 1;
    v78 = *(_QWORD *)(v136 + 112);
    v79 = *(_DWORD *)(v78 + 24 * v76);
  }
  else
  {
    v78 = *(_QWORD *)(v136 + 112);
    v79 = *(_DWORD *)(v78 + 24 * v76);
    *(_DWORD *)(v136 + 132) = v79 & 0x7FFFFFFF;
  }
  v80 = 24 * v76;
  *(_DWORD *)(v78 + v80) = v79 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v136 + 112) + v80) = *(_DWORD *)(*(_QWORD *)(v136 + 112) + 24 * v76) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v136 + 104) + 4 * v74);
  *(_QWORD *)(*(_QWORD *)(v136 + 112) + 24 * v76 + 8) = v68;
  *(_QWORD *)(*(_QWORD *)(v136 + 112) + 24 * v76 + 16) = v70;
  *(_DWORD *)(*(_QWORD *)(v136 + 104) + 4 * v74) = v76;
  ++*(_DWORD *)(v136 + 124);
  ++*(_DWORD *)(v136 + 136);
LABEL_89:
  v81 = re::globalAllocators((re *)v69);
  v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[2] + 32))(v81[2], 40, 8);
  v83 = v82;
  *(_QWORD *)(v82 + 32) = 0;
  *(_QWORD *)(v82 + 8) = 0;
  *(_QWORD *)(v82 + 16) = 0;
  *(_QWORD *)v82 = 0;
  v84 = (unint64_t)"N2re22DrawCallIdentifierDataE";
  *(_DWORD *)(v82 + 24) = 0;
  if (((unint64_t)"N2re22DrawCallIdentifierDataE" & 0x8000000000000000) != 0)
  {
    v85 = (unsigned __int8 *)((unint64_t)"N2re22DrawCallIdentifierDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v86 = 5381;
    do
    {
      v84 = v86;
      v87 = *v85++;
      v86 = (33 * v86) ^ v87;
    }
    while (v87);
  }
  v88 = (v137 + (v84 << 6) + (v84 >> 2)) ^ v84;
  v89 = re::globalAllocators((re *)v82);
  v90 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89[2] + 32))(v89[2], 16, 8);
  v91 = (re *)(v136 + 48);
  v92 = *(_QWORD *)(v136 + 48);
  *v90 = &off_24ED81968;
  v90[1] = v83;
  if (v92)
  {
    v92 = v88 % *(unsigned int *)(v136 + 72);
    v93 = *(unsigned int *)(*(_QWORD *)(v136 + 56) + 4 * v92);
    v94 = &selRef_setRate_;
    if ((_DWORD)v93 != 0x7FFFFFFF)
    {
      v95 = *(_QWORD *)(v136 + 64);
      if (*(_QWORD *)(v95 + 24 * v93 + 8) == v88)
      {
LABEL_97:
        v96 = v95 + 24 * v93;
        goto LABEL_105;
      }
      while (1)
      {
        LODWORD(v93) = *(_DWORD *)(v95 + 24 * v93) & 0x7FFFFFFF;
        if ((_DWORD)v93 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v95 + 24 * v93 + 8) == v88)
          goto LABEL_97;
      }
    }
  }
  else
  {
    v94 = &selRef_setRate_;
  }
  v97 = *(unsigned int *)(v136 + 84);
  if ((_DWORD)v97 == 0x7FFFFFFF)
  {
    v97 = *(unsigned int *)(v136 + 80);
    v98 = v97;
    if ((_DWORD)v97 == *(_DWORD *)(v136 + 72))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v91, 2 * *(_DWORD *)(v136 + 76));
      LODWORD(v92) = v88 % *(unsigned int *)(v136 + 72);
      v98 = *(_DWORD *)(v136 + 80);
    }
    *(_DWORD *)(v136 + 80) = v98 + 1;
    v99 = *(_QWORD *)(v136 + 64);
    v100 = *(_DWORD *)(v99 + 24 * v97);
  }
  else
  {
    v99 = *(_QWORD *)(v136 + 64);
    v100 = *(_DWORD *)(v99 + 24 * v97);
    *(_DWORD *)(v136 + 84) = v100 & 0x7FFFFFFF;
  }
  v101 = 24 * v97;
  *(_DWORD *)(v99 + v101) = v100 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(v136 + 64) + v101) = *(_DWORD *)(*(_QWORD *)(v136 + 64) + 24 * v97) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v136 + 56) + 4 * v92);
  *(_QWORD *)(*(_QWORD *)(v136 + 64) + 24 * v97 + 8) = v88;
  *(_QWORD *)(*(_QWORD *)(v136 + 64) + 24 * v97 + 16) = v90;
  *(_DWORD *)(*(_QWORD *)(v136 + 56) + 4 * v92) = v97;
  ++*(_DWORD *)(v136 + 76);
  ++*(_DWORD *)(v136 + 88);
  v96 = *(_QWORD *)(v136 + 64) + 24 * v97;
LABEL_105:
  v102 = *(_QWORD *)(*(_QWORD *)(v96 + 16) + 8);
  v103 = re::globalAllocators(v91)[2];
  v167 = (unint64_t)&off_24ED81238;
  v168 = v138;
  v169 = v102;
  v170 = v103;
  v171 = &v167;
  re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((_anonymous_namespace_ *)(v136 + 3832), (uint64_t)&v167);
  if (v171)
  {
    (*(void (**)(unint64_t *))*v171)(v171);
    if (v171 != &v167)
      (*(void (**)(uint64_t))(*(_QWORD *)v170 + 40))(v170);
  }
  if (!*(_QWORD *)(v52 + 8))
    return 0;
  v104 = *v129;
  v172 = (unint64_t)v104;
  LODWORD(v173) = 0;
  HIDWORD(v173) = objc_msgSend(*v129, v94[494]);
  v167 = 0x254F47A4D0EF9BB6;
  re::RenderFrame::registerExternalBuffer(v136, (uint64_t)&v172, &v167, &v166, 0);
  if (v104)

  v105 = *v62;
  v163 = (unint64_t)v105;
  v164 = 0;
  v165 = objc_msgSend(*v62, v94[494]);
  v167 = 0x32320846451280ADLL;
  re::RenderFrame::registerExternalBuffer(v136, (uint64_t)&v163, &v167, &v166, 0);
  if (v105)

  v106 = (re::CameraData *)*v63;
  v160 = v106;
  v161 = 0;
  v162 = objc_msgSend(*v63, v94[494]);
  v167 = 0x7F4B8EECA403FF29;
  re::RenderFrame::registerExternalBuffer(v136, (uint64_t)&v160, &v167, &v166, 0);
  if (v106)

  v107 = *v64;
  v157 = v107;
  v158 = 0;
  v159 = objc_msgSend(*v64, v94[494]);
  v167 = 0x1D6555C5E40CE967;
  re::RenderFrame::registerExternalBuffer(v136, (uint64_t)&v157, &v167, &v166, 0);
  if (v107)

  v108 = *v134;
  v154 = v108;
  v155 = 0;
  v156 = objc_msgSend(*v134, v94[494]);
  v167 = 0x4AABB4110780FA30;
  re::RenderFrame::registerExternalBuffer(v136, (uint64_t)&v154, &v167, &v166, 0);
  if (v108)

  v109 = *v140;
  v151 = v109;
  v152 = 0;
  v153 = objc_msgSend(*v140, v94[494]);
  v167 = 0x511FDEFE273D287BLL;
  re::RenderFrame::registerExternalBuffer(v136, (uint64_t)&v151, &v167, &v166, 0);
  if (v109)

  v110 = *v142;
  v148 = v110;
  v149 = 0;
  v150 = objc_msgSend(*v142, v94[494]);
  v167 = 0xC687454B2B05CFFLL;
  re::RenderFrame::registerExternalBuffer(v136, (uint64_t)&v148, &v167, &v166, 0);
  if (v110)

  v111 = *v144;
  v145 = v111;
  v146 = 0;
  v147 = objc_msgSend(*v144, v94[494]);
  v167 = 0x60FB3170E2E2B568;
  re::RenderFrame::registerExternalBuffer(v136, (uint64_t)&v145, &v167, &v166, 0);
  if (v111)

  v112 = strlen(v131);
  if (v112)
  {
    MurmurHash3_x64_128((uint64_t)v131, v112, 0, &v167);
    v113 = (v168 - 0x61C8864680B583E9 + (v167 << 6) + (v167 >> 2)) ^ v167;
  }
  else
  {
    v113 = 0;
  }
  v116 = strlen(v132);
  v117 = 0x9E3779B97F4A7C17;
  if (v116)
  {
    MurmurHash3_x64_128((uint64_t)v132, v116, 0, &v167);
    v117 = ((v168 - 0x61C8864680B583E9 + (v167 << 6) + (v167 >> 2)) ^ v167) - 0x61C8864680B583E9;
  }
  v118 = *(_QWORD *)(re::RenderGraphDataStore::get<re::CurrentSelectionData>(v130, ((v113 >> 2) + (v113 << 6) + v117) ^ v113)+ 8);
  if ((*(_BYTE *)(v118 + 16) & 1) != 0)
    v119 = *(const char **)(v118 + 24);
  else
    v119 = (const char *)(v118 + 17);
  ScopeResolution = re::RenderFrame::getScopeResolution((re::RenderFrame *)v136, v119);
  v121 = *(_DWORD *)(v138 + 380);
  if (v121 == -1)
    v122 = ScopeResolution;
  else
    v122 = v121;
  v123 = *(_DWORD *)(v138 + 384);
  if (v123 == -1)
    v124 = HIDWORD(ScopeResolution);
  else
    v124 = v123;
  v125 = *((_QWORD *)re::AssetHandle::assetInfo((re::AssetHandle *)(v138 + 136)) + 10);
  if (v125 == -1)
    v125 = 0;
  v126 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v125 ^ (v125 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v125 ^ (v125 >> 30))) >> 27));
  v127 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v122 ^ (v122 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v122 ^ (v122 >> 30))) >> 27));
  v128 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v124 ^ (v124 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v124 ^ (v124 >> 30))) >> 27));
  return (((v126 ^ (v126 >> 31)) << 6)
        - 0x61C8864680B583E9
        + ((v126 ^ (v126 >> 31)) >> 2)
        + (((v128 ^ (v128 >> 31)) - 0x61C8864680B583E9 + ((v127 ^ (v127 >> 31)) << 6) + ((v127 ^ (v127 >> 31)) >> 2)) ^ v127 ^ (v127 >> 31))) ^ v126 ^ (v126 >> 31);
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_1,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED81290;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_1,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED81290;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_1,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0,void ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0,void ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1, const char **a2, char **a3, re::RenderFrame *a4)
{
  unint64_t v5;
  const char *v6;
  char *v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t ScopeResolution;
  int v26;
  int v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t v39;
  re *RenderGraph;
  double v45;
  int v46;
  int v47;
  double v48;
  int v49;
  int v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  re *v54;
  double *v55;
  re *v56;
  uint64_t v57;
  re *v58;
  double *v59;
  re *v60;
  uint64_t v61;
  re *v62;
  double *v63;
  re *v64;
  uint64_t v65;
  re *v66;
  uint64_t v67;
  uint64_t v68;
  re *v69;
  double *v70;
  re *v71;
  double *v72;
  _BYTE *v73;
  double v74;
  simd_float4 v75;
  simd_float4 v76;
  simd_float4 v77;
  simd_float4 v78;
  double v79[30];
  double v80[5];
  int v81;
  int v82;
  double v83;
  double v84;
  double v85[5];
  int v86;
  int v87;
  double v88;
  double v89;
  double v90[5];
  int v91;
  int v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  int v112;
  int v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  int v138;
  __int128 v139;
  char v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  int v151;
  __int128 v152;
  char v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  int v164;
  __int128 v165;
  char v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  int v177;
  __int128 v178;
  char v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  int v190;
  __int128 v191;
  char v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  __int128 v201;
  __int128 v202;
  int v203;
  __int128 v204;
  char v205;
  uint64_t v206;
  int v207;
  int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  int v216;
  __int128 v217;
  char v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  int v229;
  __int128 v230;
  char v231;
  int v232;
  uint64_t v233;
  char v234;
  int v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  char v241;
  int v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  char v248;
  int v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  char v255;
  int v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  char v262;
  int v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  char v269;
  int v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  char v276;
  int v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  char v283;
  int v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  const char *v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  int v319;
  int v320;
  _BYTE v321[24];
  double *v322;
  _BYTE *v323;
  _BYTE v324[24];
  double *v325;
  re *v326;
  _BYTE v327[24];
  uint64_t v328;
  _BYTE *v329;
  _BYTE v330[24];
  uint64_t v331;
  re *v332;
  _BYTE v333[24];
  uint64_t v334;
  _BYTE *v335;
  _BYTE v336[24];
  double *v337;
  re *v338;
  _BYTE v339[24];
  uint64_t v340;
  _BYTE *v341;
  _BYTE v342[24];
  double *v343;
  re *v344;
  _BYTE v345[24];
  uint64_t v346;
  _BYTE *v347;
  _BYTE v348[24];
  double *v349;
  re *v350;
  _BYTE v351[24];
  uint64_t v352;
  _BYTE *v353;
  _BYTE v354[24];
  uint64_t v355;
  re *v356;
  uint64_t v357;
  simd_float4x4 v358;
  simd_float4x4 v359;

  v357 = *MEMORY[0x24BDAC8D0];
  v5 = 0x9E3779B97F4A7C17;
  v6 = *a2;
  v7 = *a3;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = strlen(*a2);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)v6, v9, 0, &v288);
    v10 = (unint64_t)&v289[64 * v288 - 0x61C8864680B583E9 + (v288 >> 2)] ^ v288;
  }
  else
  {
    v10 = 0;
  }
  v11 = strlen(v7);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)v7, v11, 0, &v288);
    v5 = ((unint64_t)&v289[64 * v288 - 0x61C8864680B583E9 + (v288 >> 2)] ^ v288) - 0x61C8864680B583E9;
  }
  v12 = ((v10 >> 2) + (v10 << 6) + v5) ^ v10;
  v13 = re::RenderGraphDataStore::get<re::CurrentSelectionData>((uint64_t)a4 + 32, v12);
  v14 = re::RenderGraphDataStore::get<re::SelectionDrawCallBufferData>((uint64_t)a4 + 32, v12);
  if (v7)
  {
    v15 = *v7;
    if (*v7)
    {
      v16 = v7[1];
      if (v16)
      {
        v17 = (unsigned __int8 *)(v7 + 2);
        do
        {
          v15 = 31 * v15 + v16;
          v18 = *v17++;
          v16 = v18;
        }
        while (v18);
      }
      v19 = v15 & 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v20 = *(_QWORD *)(v8 + 144);
  if (v20)
  {
    v21 = atomic_load((unsigned int *)(v20 + 704));
    if (v21 == 2)
      goto LABEL_19;
    v22 = *(_QWORD *)(v8 + 144);
  }
  else
  {
    v22 = 0;
  }
  re::AssetHandle::loadNow(v22, 0);
LABEL_19:
  if (*(_QWORD *)(v14 + 8))
  {
    v282 = -1;
    v283 = 0;
    v284 = 1065353216;
    v285 = 0xFFFFFFFF00000020;
    v281 = 2;
    v288 = 0x4A9E8F49A1DF376CLL;
    v289 = "ResultsBuffer";
    v286 = -1;
    v287 = (v19 - 0x4A2CB291092AF7CLL) ^ 0x254F47A4D0EF9BB6;
    re::StringID::destroyString((re::StringID *)&v288);
    v275 = -1;
    v276 = 0;
    v277 = 1065353216;
    v278 = 0xFFFFFFFF00000020;
    v274 = 2;
    v288 = 0x6464108C8A25015ALL;
    v289 = "SelectedEntityConcludeResults";
    v279 = -1;
    v280 = (v19 + 0x37460D5C552F4782) ^ 0x32320846451280ADLL;
    re::StringID::destroyString((re::StringID *)&v288);
    v268 = -1;
    v269 = 0;
    v270 = 1065353216;
    v271 = 0xFFFFFFFF00000020;
    v267 = 2;
    v288 = 0xFE971DD94807FE52;
    v289 = "SelectedNormalConcludeResults";
    v272 = -1;
    v273 = (v19 - 0x6F11E76256B4B9DFLL) ^ 0x7F4B8EECA403FF29;
    re::StringID::destroyString((re::StringID *)&v288);
    v261 = -1;
    v262 = 0;
    v263 = 1065353216;
    v264 = 0xFFFFFFFF00000020;
    v260 = 2;
    v288 = 0x3ACAAB8BC819D2CELL;
    v289 = "SelectedPositionConcludeResults";
    v265 = -1;
    v266 = (v19 - 0x119BF5C0477EFD0) ^ 0x1D6555C5E40CE967;
    re::StringID::destroyString((re::StringID *)&v288);
    v254 = -1;
    v255 = 0;
    v256 = 1065353216;
    v257 = 0xFFFFFFFF00000020;
    v253 = 2;
    v288 = 0x955768220F01F460;
    v289 = "SelectedMeshPartConcludeResults";
    v258 = -1;
    v259 = (v19 + 0x5BCF6AFFA16946A3) ^ 0x4AABB4110780FA30;
    re::StringID::destroyString((re::StringID *)&v288);
    v247 = -1;
    v248 = 0;
    v249 = 1065353216;
    v250 = 0xFFFFFFFF00000020;
    v246 = 2;
    v288 = 0xA23FBDFC4E7A50F6;
    v289 = "SelectedInstanceConcludeResults";
    v251 = -1;
    v252 = (v19 - 0x588CEFD279C1B0BLL) ^ 0x511FDEFE273D287BLL;
    re::StringID::destroyString((re::StringID *)&v288);
    v240 = -1;
    v241 = 0;
    v242 = 1065353216;
    v243 = 0xFFFFFFFF00000020;
    v239 = 2;
    v288 = 0x18D0E8A96560B9FELL;
    v289 = "SelectedPrimitiveConcludeResults";
    v244 = -1;
    v245 = (v19 - 0x44915404A7F22CEALL) ^ 0xC687454B2B05CFFLL;
    re::StringID::destroyString((re::StringID *)&v288);
    v233 = -1;
    v234 = 0;
    v235 = 1065353216;
    v236 = 0xFFFFFFFF00000020;
    v232 = 2;
    v288 = 0xC1F662E1C5C56AD0;
    v289 = "SelectedBarycentricConcludeResults";
    v237 = -1;
    v238 = (v19 - 0xABD5DB18F4F7C8FLL) ^ 0x60FB3170E2E2B568;
    re::StringID::destroyString((re::StringID *)&v288);
    v23 = *(_QWORD *)(v13 + 8);
    if ((*(_BYTE *)(v23 + 16) & 1) != 0)
      v24 = *(const char **)(v23 + 24);
    else
      v24 = (const char *)(v23 + 17);
    ScopeResolution = re::RenderFrame::getScopeResolution(a4, v24);
    if (*(_DWORD *)(v8 + 380) == -1)
      v26 = ScopeResolution;
    else
      v26 = *(_DWORD *)(v8 + 380);
    if (*(_DWORD *)(v8 + 384) == -1)
      v27 = HIDWORD(ScopeResolution);
    else
      v27 = *(_DWORD *)(v8 + 384);
    v28 = *(float32x4_t *)(v8 + 416);
    v29 = (int32x4_t)vmulq_f32(v28, v28);
    v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
    v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
    v32 = vmulq_n_f32(v28, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
    v358.columns[2] = (simd_float4)vnegq_f32(v32);
    v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v358.columns[2], (int32x4_t)v358.columns[2]), (int8x16_t)v358.columns[2], 0xCuLL);
    v34 = vmlaq_f32(vmulq_f32(v33, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2261027C0, v32);
    v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
    v36 = (int32x4_t)vmulq_f32(v34, v34);
    v36.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2), *(float32x2_t *)v36.i8)).u32[0];
    v37 = vrsqrte_f32((float32x2_t)v36.u32[0]);
    v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v37, v37)));
    v358.columns[0] = (simd_float4)vmulq_n_f32(v35, vmul_f32(v38, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v38, v38))).f32[0]);
    v39 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v358.columns[0], (int32x4_t)v358.columns[0]), (int8x16_t)v358.columns[0], 0xCuLL), v32), (float32x4_t)v358.columns[0], v33);
    v358.columns[0].i32[3] = 0;
    v358.columns[1] = (simd_float4)vrev64q_s32(vuzp1q_s32((int32x4_t)v39, (int32x4_t)vextq_s8((int8x16_t)0, v39, 0xCuLL)));
    v358.columns[2].i32[3] = 0;
    __asm { FMOV            V3.4S, #1.0 }
    v358.columns[3].i64[0] = *(_QWORD *)(v8 + 400);
    v358.columns[3].i32[2] = *(_DWORD *)(v8 + 408);
    v359 = __invert_f4(v358);
    v78 = v359.columns[0];
    v75 = v359.columns[3];
    v76 = v359.columns[2];
    v77 = v359.columns[1];
    v224 = -1;
    v223 = -1;
    v225 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v226 = v359.columns[0].i64[0];
    v227 = xmmword_226135530;
    v228 = xmmword_226135540;
    v229 = -1;
    v230 = xmmword_2260FF4D0;
    v231 = 0;
    v219 = 0x6700000000;
    v220 = 2;
    v221 = v26;
    v222 = v27;
    v211 = -1;
    v210 = -1;
    v212 = 0;
    v213 = v359.columns[0].i64[0];
    v214 = xmmword_226135530;
    v215 = xmmword_226135540;
    v216 = -1;
    v217 = xmmword_2260FF4D0;
    v218 = 0;
    v206 = 0x7D00000000;
    v207 = 2;
    v208 = v26;
    v209 = v27;
    v198 = -1;
    v197 = -1;
    v199 = 0;
    v200 = v359.columns[0].i64[0];
    v201 = xmmword_226135530;
    v202 = xmmword_226135540;
    v203 = -1;
    v204 = xmmword_2260FF4D0;
    v205 = 0;
    v193 = 0x7D00000000;
    v194 = 2;
    v195 = v26;
    v196 = v27;
    v185 = -1;
    v184 = -1;
    v186 = 0;
    v187 = v359.columns[0].i64[0];
    v188 = xmmword_226135530;
    v189 = xmmword_226135540;
    v190 = -1;
    v191 = xmmword_2260FF4D0;
    v192 = 0;
    v180 = 0x6700000000;
    v181 = 2;
    v182 = v26;
    v183 = v27;
    v172 = -1;
    v171 = -1;
    v173 = 0;
    v174 = v359.columns[0].i64[0];
    v175 = xmmword_226135530;
    v176 = xmmword_226135540;
    v177 = -1;
    v178 = xmmword_2260FF4D0;
    v179 = 0;
    v167 = 0x3500000000;
    v168 = 2;
    v169 = v26;
    v170 = v27;
    v159 = -1;
    v158 = -1;
    v160 = 0;
    v161 = v359.columns[0].i64[0];
    v162 = xmmword_226135530;
    v163 = xmmword_226135540;
    v164 = -1;
    v165 = xmmword_2260FF4D0;
    v166 = 0;
    v154 = 0x3500000000;
    v155 = 2;
    v156 = v26;
    v157 = v27;
    v146 = -1;
    v145 = -1;
    v147 = 0;
    v148 = v359.columns[0].i64[0];
    v149 = xmmword_226135530;
    v150 = xmmword_226135540;
    v151 = -1;
    v152 = xmmword_2260FF4D0;
    v153 = 0;
    v141 = 0x7D00000000;
    v142 = 2;
    v143 = v26;
    v144 = v27;
    v133 = -1;
    v132 = -1;
    v134 = 0;
    v135 = v359.columns[0].i64[0];
    v136 = xmmword_226135530;
    v137 = xmmword_226135540;
    v138 = -1;
    v139 = xmmword_2260FF4D0;
    v140 = 0;
    v128 = 0xFC00000000;
    v129 = 2;
    v130 = v26;
    v131 = v27;
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v219, "ResultEntity", &v126);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v206, "ResultNormal", &v124);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v193, "ResultPosition", &v122);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v180, "ResultMeshPart", &v120);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v167, "ResultInstance", &v118);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v154, "ResultPrimitive", &v116);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v141, "ResultBarycentric", &v114);
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v128, "ResultDepthDiscard", &v111);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v281, "ResultsBuffer", &v109);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v274, "SelectedEntityConcludeResults", &v107);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v267, "SelectedNormalConcludeResults", &v105);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v260, "SelectedPositionConcludeResults", &v103);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v253, "SelectedMeshPartConcludeResults", &v101);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v246, "SelectedInstanceConcludeResults", &v99);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v239, "SelectedPrimitiveConcludeResults", &v97);
    re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)&v232, "SelectedBarycentricConcludeResults", &v95);
    RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "SelectionGraph", 0);
    v45 = v111;
    v46 = v112;
    v47 = v113;
    v48 = v109;
    v49 = LODWORD(v110);
    v50 = HIDWORD(v110);
    v90[0] = v126;
    v90[1] = v127;
    v90[2] = v124;
    v90[3] = v125;
    v90[4] = v111;
    v91 = v112;
    v92 = v113;
    v93 = v109;
    v94 = v110;
    v85[0] = v122;
    v85[1] = v123;
    v85[2] = v120;
    v85[3] = v121;
    v85[4] = v111;
    v86 = v112;
    v87 = v113;
    v88 = v109;
    v89 = v110;
    v80[0] = v118;
    v80[1] = v119;
    v80[2] = v116;
    v80[3] = v117;
    v80[4] = v111;
    v81 = v112;
    v82 = v113;
    v83 = v109;
    v84 = v110;
    v74 = v114;
    v51 = v115;
    v355 = re::globalAllocators(RenderGraph)[2];
    v356 = 0;
    v52 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v355 + 32))(v355, 40, 0);
    *(_QWORD *)v52 = &off_24ED81418;
    *(double *)(v52 + 8) = v45;
    *(_DWORD *)(v52 + 16) = v46;
    *(_DWORD *)(v52 + 20) = v47;
    *(double *)(v52 + 24) = v48;
    *(_DWORD *)(v52 + 32) = v49;
    *(_DWORD *)(v52 + 36) = v50;
    v356 = (re *)v52;
    v352 = re::globalAllocators((re *)v52)[2];
    v353 = 0;
    v53 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v352 + 32))(v352, 112, 0);
    *(_QWORD *)v53 = &off_24ED81480;
    *(_QWORD *)(v53 + 16) = v8;
    *(double *)(v53 + 24) = v48;
    *(_DWORD *)(v53 + 32) = v49;
    *(_DWORD *)(v53 + 36) = v50;
    *(_DWORD *)(v53 + 40) = v26;
    *(_DWORD *)(v53 + 44) = v27;
    *(simd_float4 *)(v53 + 48) = v78;
    *(simd_float4 *)(v53 + 64) = v77;
    *(simd_float4 *)(v53 + 80) = v76;
    *(simd_float4 *)(v53 + 96) = v75;
    v353 = (_BYTE *)v53;
    re::RenderGraph::addNode(RenderGraph, "SelectionRenderNodeDiscard", (uint64_t)v354, (uint64_t)v351);
    if (v353)
    {
      (**(void (***)(_BYTE *))v353)(v353);
      if (v353 != v351)
        (*(void (**)(uint64_t))(*(_QWORD *)v352 + 40))(v352);
      v353 = 0;
    }
    v54 = v356;
    if (v356)
    {
      v54 = (re *)(**(uint64_t (***)(re *))v356)(v356);
      if (v356 != (re *)v354)
        v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v355 + 40))(v355);
      v356 = 0;
    }
    v55 = (double *)re::globalAllocators(v54)[2];
    v349 = v55;
    v350 = 0;
    if (v55)
      v55 = (double *)(*(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)v55 + 32))(v55, 72, 0);
    re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(v55, v90);
    v350 = v56;
    v346 = re::globalAllocators(v56)[2];
    v347 = 0;
    v57 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v346 + 32))(v346, 112, 0);
    *(_QWORD *)v57 = &off_24ED81480;
    *(_QWORD *)(v57 + 16) = v8;
    *(double *)(v57 + 24) = v48;
    *(_DWORD *)(v57 + 32) = v49;
    *(_DWORD *)(v57 + 36) = v50;
    *(_DWORD *)(v57 + 40) = v26;
    *(_DWORD *)(v57 + 44) = v27;
    *(simd_float4 *)(v57 + 48) = v78;
    *(simd_float4 *)(v57 + 64) = v77;
    *(simd_float4 *)(v57 + 80) = v76;
    *(simd_float4 *)(v57 + 96) = v75;
    v347 = (_BYTE *)v57;
    re::RenderGraph::addNode(RenderGraph, "SelectionRenderNodeGroup01", (uint64_t)v348, (uint64_t)v345);
    if (v347)
    {
      (**(void (***)(_BYTE *))v347)(v347);
      if (v347 != v345)
        (*(void (**)(uint64_t))(*(_QWORD *)v346 + 40))(v346);
      v347 = 0;
    }
    v58 = v350;
    if (v350)
    {
      v58 = (re *)(**(uint64_t (***)(re *))v350)(v350);
      if (v350 != (re *)v348)
        v58 = (re *)(*(uint64_t (**)(double *))(*(_QWORD *)v349 + 40))(v349);
      v350 = 0;
    }
    v59 = (double *)re::globalAllocators(v58)[2];
    v343 = v59;
    v344 = 0;
    if (v59)
      v59 = (double *)(*(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)v59 + 32))(v59, 72, 0);
    re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(v59, v85);
    v344 = v60;
    v340 = re::globalAllocators(v60)[2];
    v341 = 0;
    v61 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v340 + 32))(v340, 112, 0);
    *(_QWORD *)v61 = &off_24ED81480;
    *(_QWORD *)(v61 + 16) = v8;
    *(double *)(v61 + 24) = v48;
    *(_DWORD *)(v61 + 32) = v49;
    *(_DWORD *)(v61 + 36) = v50;
    *(_DWORD *)(v61 + 40) = v26;
    *(_DWORD *)(v61 + 44) = v27;
    *(simd_float4 *)(v61 + 48) = v78;
    *(simd_float4 *)(v61 + 64) = v77;
    *(simd_float4 *)(v61 + 80) = v76;
    *(simd_float4 *)(v61 + 96) = v75;
    v341 = (_BYTE *)v61;
    re::RenderGraph::addNode(RenderGraph, "SelectionRenderNodeGroup23", (uint64_t)v342, (uint64_t)v339);
    if (v341)
    {
      (**(void (***)(_BYTE *))v341)(v341);
      if (v341 != v339)
        (*(void (**)(uint64_t))(*(_QWORD *)v340 + 40))(v340);
      v341 = 0;
    }
    v62 = v344;
    if (v344)
    {
      v62 = (re *)(**(uint64_t (***)(re *))v344)(v344);
      if (v344 != (re *)v342)
        v62 = (re *)(*(uint64_t (**)(double *))(*(_QWORD *)v343 + 40))(v343);
      v344 = 0;
    }
    v63 = (double *)re::globalAllocators(v62)[2];
    v337 = v63;
    if (v63)
      v63 = (double *)(*(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 72, 0);
    re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(v63, v80);
    v338 = v64;
    v334 = re::globalAllocators(v64)[2];
    v65 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v334 + 32))(v334, 112, 0);
    *(_QWORD *)v65 = &off_24ED81480;
    *(_QWORD *)(v65 + 16) = v8;
    *(double *)(v65 + 24) = v48;
    *(_DWORD *)(v65 + 32) = v49;
    *(_DWORD *)(v65 + 36) = v50;
    *(_DWORD *)(v65 + 40) = v26;
    *(_DWORD *)(v65 + 44) = v27;
    *(simd_float4 *)(v65 + 48) = v78;
    *(simd_float4 *)(v65 + 64) = v77;
    *(simd_float4 *)(v65 + 80) = v76;
    *(simd_float4 *)(v65 + 96) = v75;
    v335 = (_BYTE *)v65;
    re::RenderGraph::addNode(RenderGraph, "SelectionRenderNodeGroup45", (uint64_t)v336, (uint64_t)v333);
    if (v335)
    {
      (**(void (***)(_BYTE *))v335)(v335);
      if (v335 != v333)
        (*(void (**)(uint64_t))(*(_QWORD *)v334 + 40))(v334);
      v335 = 0;
    }
    v66 = v338;
    if (v338)
    {
      v66 = (re *)(**(uint64_t (***)(re *))v338)(v338);
      if (v338 != (re *)v336)
        v66 = (re *)(*(uint64_t (**)(double *))(*(_QWORD *)v337 + 40))(v337);
      v338 = 0;
    }
    v331 = re::globalAllocators(v66)[2];
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v331 + 32))(v331, 56, 0);
    *(_QWORD *)v67 = &off_24ED81620;
    *(double *)(v67 + 8) = v74;
    *(double *)(v67 + 16) = v51;
    *(double *)(v67 + 24) = v45;
    *(_DWORD *)(v67 + 32) = v46;
    *(_DWORD *)(v67 + 36) = v47;
    *(double *)(v67 + 40) = v48;
    *(_DWORD *)(v67 + 48) = v49;
    *(_DWORD *)(v67 + 52) = v50;
    v332 = (re *)v67;
    v328 = re::globalAllocators((re *)v67)[2];
    v68 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v328 + 32))(v328, 112, 0);
    *(_QWORD *)v68 = &off_24ED81480;
    *(_QWORD *)(v68 + 16) = v8;
    *(double *)(v68 + 24) = v48;
    *(_DWORD *)(v68 + 32) = v49;
    *(_DWORD *)(v68 + 36) = v50;
    *(_DWORD *)(v68 + 40) = v26;
    *(_DWORD *)(v68 + 44) = v27;
    *(simd_float4 *)(v68 + 48) = v78;
    *(simd_float4 *)(v68 + 64) = v77;
    *(simd_float4 *)(v68 + 80) = v76;
    *(simd_float4 *)(v68 + 96) = v75;
    v329 = (_BYTE *)v68;
    re::RenderGraph::addNode(RenderGraph, "SelectionRenderNodeGroup67", (uint64_t)v330, (uint64_t)v327);
    if (v329)
    {
      (**(void (***)(_BYTE *))v329)(v329);
      if (v329 != v327)
        (*(void (**)(uint64_t))(*(_QWORD *)v328 + 40))(v328);
      v329 = 0;
    }
    v69 = v332;
    if (v332)
    {
      v69 = (re *)(**(uint64_t (***)(re *))v332)(v332);
      if (v332 != (re *)v330)
        v69 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v331 + 40))(v331);
      v332 = 0;
    }
    v79[0] = v126;
    v79[1] = v127;
    v79[2] = v124;
    v79[3] = v125;
    v79[4] = v122;
    v79[5] = v123;
    v79[6] = v120;
    v79[7] = v121;
    v79[8] = v118;
    v79[9] = v119;
    v79[10] = v116;
    v79[11] = v117;
    v79[12] = v114;
    v79[13] = v115;
    v79[14] = v109;
    v79[15] = v110;
    v79[16] = v107;
    v79[17] = v108;
    v79[18] = v105;
    v79[19] = v106;
    v79[20] = v103;
    v79[21] = v104;
    v79[22] = v101;
    v79[23] = v102;
    v79[24] = v99;
    v79[25] = v100;
    v79[26] = v97;
    v79[27] = v98;
    v79[28] = v95;
    v79[29] = v96;
    v70 = (double *)re::globalAllocators(v69)[2];
    v325 = v70;
    if (v70)
      v70 = (double *)(*(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 248, 0);
    re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(v70, v79);
    v326 = v71;
    v288 = v8;
    v289 = *(const char **)&v126;
    v290 = v127;
    v291 = v124;
    v292 = v125;
    v293 = v122;
    v294 = v123;
    v295 = v120;
    v296 = v121;
    v297 = v118;
    v298 = v119;
    v299 = v116;
    v300 = v117;
    v301 = v114;
    v302 = v115;
    v303 = v109;
    v304 = v110;
    v305 = v107;
    v306 = v108;
    v307 = v105;
    v308 = v106;
    v309 = v103;
    v310 = v104;
    v311 = v101;
    v312 = v102;
    v313 = v99;
    v314 = v100;
    v315 = v97;
    v316 = v98;
    v317 = v95;
    v318 = v96;
    v319 = v26;
    v320 = v27;
    v72 = (double *)re::globalAllocators(v71)[2];
    v322 = v72;
    if (v72)
      v72 = (double *)(*(uint64_t (**)(double *, uint64_t, _QWORD))(*(_QWORD *)v72 + 32))(v72, 264, 0);
    re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::Callable(v72, (double *)&v288);
    v323 = v73;
    re::RenderGraph::addNode(RenderGraph, "SelectionResultsNode", (uint64_t)v324, (uint64_t)v321);
    if (v323)
    {
      (**(void (***)(_BYTE *))v323)(v323);
      if (v323 != v321)
        (*(void (**)(double *))(*(_QWORD *)v322 + 40))(v322);
      v323 = 0;
    }
    if (v326)
    {
      (**(void (***)(re *))v326)(v326);
      if (v326 != (re *)v324)
        (*(void (**)(double *))(*(_QWORD *)v325 + 40))(v325);
    }
  }
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0,void ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED812F8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0,void ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED812F8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0,void ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

_QWORD *re::RenderGraph::addNode(re *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v11;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE *v14;
  _BYTE v15[24];
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v8 = re::globalAllocators(a1);
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 176, 8);
  v16 = *(_QWORD *)(a3 + 24);
  v17 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v15, a3);
  v13 = *(_QWORD *)(a4 + 24);
  v14 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v12, a4);
  re::InlineRenderGraphNode::InlineRenderGraphNode((uint64_t)v9, a2, (uint64_t)v15, (uint64_t)v12);
  if (v14)
  {
    (**(void (***)(_BYTE *))v14)(v14);
    if (v14 != v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    v14 = 0;
  }
  if (v17)
  {
    (**(void (***)(_BYTE *))v17)(v17);
    if (v17 != v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    v17 = 0;
  }
  v11 = v9;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v11);
  v9[3] = *((_QWORD *)a1 + 10);
  v9[4] = *((_QWORD *)a1 + 12);
  v9[6] = *((_QWORD *)a1 + 13);
  return v9;
}

uint64_t re::RenderGraphDataStore::get<re::SelectionDrawCallBufferData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = (unint64_t)"N2re27SelectionDrawCallBufferDataE";
  if (((unint64_t)"N2re27SelectionDrawCallBufferDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27SelectionDrawCallBufferDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v6 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 80);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 24 * v6 + 8) == v7)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
        }
        v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
}

uint64_t re::InlineRenderGraphNode::InlineRenderGraphNode(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  re::StringID *v8;

  *(_QWORD *)a1 = off_24ED293C0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (re::StringID *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = &str_110;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)a1 = &off_24ED81378;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 128) = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 96, a3);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a1 + 168) = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 136, a4);
  return a1;
}

void re::InlineRenderGraphNode::~InlineRenderGraphNode(id *this)
{
  *this = &off_24ED81378;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(this + 17));
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(this + 12));
  *this = off_24ED293C0;

  re::StringID::destroyString((re::StringID *)(this + 1));
}

{
  *this = &off_24ED81378;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(this + 17));
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(this + 12));
  *this = off_24ED293C0;

  re::StringID::destroyString((re::StringID *)(this + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::InlineRenderGraphNode::getPerFrameValidationCode(re::InlineRenderGraphNode *this)
{
  return 0x11F4512BD17030A0;
}

uint64_t re::InlineRenderGraphNode::getGraphBuildValidationCode(re::InlineRenderGraphNode *this)
{
  return 0x7752D40886CA6E90;
}

uint64_t re::InlineRenderGraphNode::setup(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128));
}

uint64_t re::InlineRenderGraphNode::execute(re::InlineRenderGraphNode *this, re::RenderGraphContext *a2)
{
  return (*(uint64_t (**)(_QWORD, re::RenderGraphContext *))(**((_QWORD **)this + 21) + 16))(*((_QWORD *)this + 21), a2);
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *result)
{
  *result = &off_24ED81418;
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED81418;
  JUMPOUT(0x2276933B8);
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  __int128 v6;
  __int16 v7;
  int v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = 0x200000000;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 8, (uint64_t)&v5);
  return re::RenderGraphBuilder::setVisibilityResultsBuffer(a2, a1 + 24);
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(_QWORD *a1, _QWORD *a2)
{
  *a2 = &off_24ED81418;
  a2[1] = 0;
  a2[2] = -1;
  a2[1] = a1[1];
  a2[2] = a1[2];
  a2[3] = 0;
  a2[4] = -1;
  a2[3] = a1[3];
  a2[4] = a1[4];
  return a2;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(_QWORD *a1, _QWORD *a2)
{
  *a2 = &off_24ED81418;
  a2[1] = 0;
  a2[2] = -1;
  a2[1] = a1[1];
  a2[2] = a1[2];
  a2[3] = 0;
  a2[4] = -1;
  a2[3] = a1[3];
  a2[4] = a1[4];
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 40;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::~Callable(_QWORD *result)
{
  *result = &off_24ED81480;
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED81480;
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::operator()(uint64_t a1, re::RenderGraphContext *a2)
{
  _BYTE *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  _anonymous_namespace_ *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  _DWORD *v66;
  uint64_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  const char *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  const char *v77;
  size_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  const char *v93;
  const char *v94;
  size_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  _OWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _DWORD *v106;
  re::RenderGraphContext *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  _QWORD v111[3];
  int v112;
  uint64_t v113;
  _QWORD v114[3];
  int v115;
  uint64_t v116;
  _BYTE v117[8];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  char v121;
  char v122;
  __int16 v123;
  _QWORD v124[7];
  int v125;
  char v126;
  _OWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD v132[2];
  int v133;
  uint64_t v134;
  _OWORD v135[2];
  int v136;
  uint64_t v137;
  id v138;
  _QWORD *v139;
  int v140;
  const char *v141;
  __int16 v142;
  int v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD v155[28];
  uint64_t v156;
  int v157;
  _OWORD v158[18];
  char v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
  re::RenderGraphContext::acquireManagedRenderEncoder(&v138, a2, v6, 0);
  v7 = re::RenderGraphDataStore::get<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v8 = (_DWORD *)re::RenderGraphDataStore::get<re::RenderGraphSelectionParams>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v9 = *((_QWORD *)a2 + 146);
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 48);
  v11 = (unint64_t)"N2re22DrawCallIdentifierDataE";
  if (((unint64_t)"N2re22DrawCallIdentifierDataE" & 0x8000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((unint64_t)"N2re22DrawCallIdentifierDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v13 = 5381;
    do
    {
      v11 = v13;
      v14 = *v12++;
      v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  v15 = 0x7FFFFFFF;
  if (*(_QWORD *)(v9 + 16))
  {
    v16 = (v10 + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583E9) ^ v11;
    v17 = *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * (v16 % *(unsigned int *)(v9 + 40)));
    if (v17 != 0x7FFFFFFF)
    {
      v18 = *(_QWORD *)(v9 + 32);
      v15 = *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * (v16 % *(unsigned int *)(v9 + 40)));
      if (*(_QWORD *)(v18 + 24 * v17 + 8) != v16)
      {
        while (1)
        {
          v15 = *(_DWORD *)(v18 + 24
                                * *(unsigned int *)(*(_QWORD *)(v9 + 24) + 4 * (v16 % *(unsigned int *)(v9 + 40)))) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v18 + 24 * v15 + 8) == v16)
            goto LABEL_11;
        }
        v15 = 0x7FFFFFFF;
      }
    }
  }
LABEL_11:
  v19 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 24 * v15 + 16);
  v105 = re::RenderGraphDataStore::get<re::SelectionDrawCallBufferData>(v9, v10);
  v21 = v8[2];
  v20 = v8[3];
  v23 = v8[4];
  v22 = v8[5];
  v24 = *(_DWORD *)(a1 + 40);
  if (v21 == -1 && v20 == -1 && v23 == -1 && v22 == -1)
  {
    v21 = v24 >> 1;
    v28 = *(_DWORD *)(a1 + 44);
    v20 = v28 >> 1;
    v22 = 1;
    v23 = 1;
  }
  else
  {
    v28 = *(_DWORD *)(a1 + 44);
  }
  if (v21 + v23 <= v24)
    v29 = v23;
  else
    v29 = v24 - v21;
  v153 = v21;
  v154 = v20;
  if (v20 + v22 <= v28)
    v30 = v22;
  else
    v30 = v28 - v20;
  v155[0] = v29;
  v155[1] = v30;
  objc_msgSend(v138, sel_setScissorRect_, &v153);
  v153 = 0;
  LODWORD(v154) = 0;
  v156 = 0;
  v157 = 0;
  v159 = 0;
  v136 = 0;
  memset(v135, 0, sizeof(v135));
  v137 = 0x7FFFFFFFLL;
  v133 = 0;
  memset(v132, 0, sizeof(v132));
  v134 = 0x7FFFFFFFLL;
  v31 = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(v5 + 136)) + 1664);
  v32 = re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v33 = *((_QWORD *)a2 + 146);
  v34 = (unint64_t)"N2re16SkyboxMeshIDDataE";
  if (((unint64_t)"N2re16SkyboxMeshIDDataE" & 0x8000000000000000) != 0)
  {
    v35 = (unsigned __int8 *)((unint64_t)"N2re16SkyboxMeshIDDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v36 = 5381;
    do
    {
      v34 = v36;
      v37 = *v35++;
      v36 = (33 * v36) ^ v37;
    }
    while (v37);
  }
  *(_QWORD *)&v148 = (*(_QWORD *)(*((_QWORD *)a2 + 5) + 48) - 0x61C8864680B583E9 + (v34 << 6) + (v34 >> 2)) ^ v34;
  v38 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v33 + 64, (uint64_t *)&v148);
  v106 = v8;
  v107 = a2;
  if (v38 && *(_QWORD *)v38)
  {
    v2 = *(_BYTE **)(*(_QWORD *)v38 + 8);
    v39 = 1;
  }
  else
  {
    v39 = 0;
  }
  v40 = 0;
  v41 = *(_QWORD *)a2;
  v42 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
  v43 = *(_QWORD *)(v19 + 8);
  v124[1] = 0;
  v124[2] = v32 + 16;
  v124[4] = 0;
  v124[5] = 0;
  v124[3] = &v153;
  do
  {
    *(_DWORD *)((char *)&v124[6] + v40) = -65280;
    v40 += 4;
  }
  while (v40 != 8);
  v125 = 0;
  v126 = 0;
  v124[0] = off_24ED74B90;
  v127 = v135;
  v128 = v43;
  v129 = v31;
  v130 = v41;
  v131 = v42;
  v44 = *(_QWORD *)(v7 + 440);
  v45 = *(_QWORD *)(v44 + 40);
  if (v45)
  {
    v46 = 0;
    v47 = v5 + 240;
    do
    {
      v38 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v44, v46);
      v48 = *(_QWORD *)(v38 + 16);
      if (v48)
      {
        v49 = *(_QWORD *)(v38 + 32) + 416;
        v50 = 656 * v48;
        do
        {
          if (*(_BYTE **)v49 == v2)
            v51 = v39;
          else
            v51 = 0;
          if (*(_QWORD *)v49)
          {
            if ((v51 & 1) == 0)
            {
              v38 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v47, (uint64_t *)v49);
              if ((v38 & 1) == 0 && (*(_DWORD *)(v49 + 12) & *(_DWORD *)(v7 + 504)) != 0)
                v38 = re::mesh_traversal::traverseMeshScene((uint64_t)v124, v49 - 416, v131, 0);
            }
          }
          v49 += 656;
          v50 -= 656;
        }
        while (v50);
      }
      ++v46;
    }
    while (v46 != v45);
  }
  v122 = 0;
  HIBYTE(v123) = 0;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v116 = 0;
  v113 = 0;
  memset(v114, 0, sizeof(v114));
  v115 = 0;
  memset(v111, 0, sizeof(v111));
  v112 = 0;
  v52 = (uint64_t)v107;
  if (!*(_QWORD *)(v7 + 128))
  {
LABEL_59:
    v2 = v117;
    v58 = *(unsigned __int8 *)(v7 + 490);
    if (v58 <= 1)
    {
      if ((_QWORD)v120)
      {
        **((_OWORD **)&v120 + 1) = xmmword_22610BC10;
        if ((_QWORD)v120)
        {
          if (*((_QWORD *)&v118 + 1))
          {
            v67 = v119;
            *(float32x2_t *)v68.f32 = vcvt_f32_u32(*(uint32x2_t *)(a1 + 40));
            v68.i64[1] = v68.i64[0];
            *(float32x4_t *)v119 = vrndaq_f32(vmulq_f32(**((float32x4_t **)&v120 + 1), v68));
            *(_DWORD *)(v67 + 16) = 0;
            v66 = (_DWORD *)(v67 + 20);
            goto LABEL_71;
          }
          goto LABEL_148;
        }
        goto LABEL_146;
      }
    }
    else
    {
      if ((_QWORD)v120)
      {
        **((_OWORD **)&v120 + 1) = xmmword_2261688B0;
        v60 = v120;
        if ((_QWORD)v120)
        {
          if (*((_QWORD *)&v118 + 1))
          {
            v61 = *((_QWORD *)&v120 + 1);
            v62 = v119;
            *(float32x2_t *)v63.f32 = vcvt_f32_u32(*(uint32x2_t *)(a1 + 40));
            v63.i64[1] = v63.i64[0];
            *(float32x4_t *)v119 = vrndaq_f32(vmulq_f32(**((float32x4_t **)&v120 + 1), v63));
            *(_QWORD *)(v62 + 16) = 0x3F80000000000000;
            if (v60 > 1)
            {
              *(_OWORD *)(v61 + 16) = xmmword_2261688C0;
              v39 = v120;
              if ((unint64_t)v120 > 1)
              {
                v39 = *((_QWORD *)&v118 + 1);
                if (*((_QWORD *)&v118 + 1) > 1uLL)
                {
                  v64 = v119;
                  *(float32x2_t *)v65.f32 = vcvt_f32_u32(*(uint32x2_t *)(a1 + 40));
                  v65.i64[1] = v65.i64[0];
                  *(float32x4_t *)(v119 + 24) = vrndaq_f32(vmulq_f32(*(float32x4_t *)(*((_QWORD *)&v120 + 1) + 16), v65));
                  *(_DWORD *)(v64 + 40) = 0;
                  v66 = (_DWORD *)(v64 + 44);
LABEL_71:
                  *v66 = 1065353216;
                  v121 = 2;
                  v117[0] = 0;
                  v123 = 0;
                  v7 = re::RenderGraphContext::rtResolution(v107);
                  if (*((_BYTE *)v107 + 1332))
                    goto LABEL_140;
                  v69 = 0;
                  v70 = 0;
                  goto LABEL_73;
                }
LABEL_151:
                v108 = 0;
                v151 = 0u;
                v152 = 0u;
                v149 = 0u;
                v150 = 0u;
                v148 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v140 = 136315906;
                v141 = "operator[]";
                v142 = 1024;
                v143 = 468;
                v144 = 2048;
                v145 = 1;
                v146 = 2048;
                v147 = v39;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
LABEL_150:
              v108 = 0;
              v151 = 0u;
              v152 = 0u;
              v149 = 0u;
              v150 = 0u;
              v148 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v140 = 136315906;
              v141 = "operator[]";
              v142 = 1024;
              v143 = 468;
              v144 = 2048;
              v145 = 1;
              v146 = 2048;
              v147 = v39;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_151;
            }
LABEL_149:
            v108 = 0;
            v151 = 0u;
            v152 = 0u;
            v149 = 0u;
            v150 = 0u;
            v148 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v140 = 136315906;
            v141 = "operator[]";
            v142 = 1024;
            v143 = 468;
            v144 = 2048;
            v145 = 1;
            v146 = 2048;
            v147 = 1;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_150;
          }
          goto LABEL_147;
        }
        goto LABEL_145;
      }
      v108 = 0;
      v151 = 0u;
      v152 = 0u;
      v149 = 0u;
      v150 = 0u;
      v148 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v140 = 136315906;
      v141 = "operator[]";
      v142 = 1024;
      v143 = 468;
      v144 = 2048;
      v145 = 0;
      v146 = 2048;
      v147 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v108 = 0;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    v148 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v140 = 136315906;
    v141 = "operator[]";
    v142 = 1024;
    v143 = 468;
    v144 = 2048;
    v145 = 0;
    v146 = 2048;
    v147 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_145:
    v108 = 0;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    v148 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v140 = 136315906;
    v141 = "operator[]";
    v142 = 1024;
    v143 = 468;
    v144 = 2048;
    v145 = 0;
    v146 = 2048;
    v147 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_146:
    v108 = 0;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    v148 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v140 = 136315906;
    v141 = "operator[]";
    v142 = 1024;
    v143 = 468;
    v144 = 2048;
    v145 = 0;
    v146 = 2048;
    v147 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_147:
    v108 = 0;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    v148 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v140 = 136315906;
    v141 = "operator[]";
    v142 = 1024;
    v143 = 468;
    v144 = 2048;
    v145 = 0;
    v146 = 2048;
    v147 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_148:
    v108 = 0;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    v148 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v140 = 136315906;
    v141 = "operator[]";
    v142 = 1024;
    v143 = 468;
    v144 = 2048;
    v145 = 0;
    v146 = 2048;
    v147 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_149;
  }
  v53 = 0;
  LODWORD(v39) = 0;
  while (1)
  {
    re::Projection::computeMatrix4x4F((re::Projection *)(v7 + 144 + (v53 << 6)), (uint64_t)&v148);
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v114, (uint64_t)&v148);
    if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(a1 + 64)), (int8x16_t)vceqzq_f32(*(float32x4_t *)(a1 + 48))), vandq_s8((int8x16_t)vceqzq_f32(*(float32x4_t *)(a1 + 80)), (int8x16_t)vceqzq_f32(*(float32x4_t *)(a1 + 96))))) & 0x80000000) != 0)break;
    v55 = *(_OWORD *)(a1 + 64);
    v148 = *(_OWORD *)(a1 + 48);
    v149 = v55;
    v56 = *(_OWORD *)(a1 + 96);
    v150 = *(_OWORD *)(a1 + 80);
    v151 = v56;
LABEL_58:
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v111, (uint64_t)&v148);
    v39 = (v39 + 1);
    v53 = v39;
    if (*(_QWORD *)(v7 + 128) <= (unint64_t)v39)
      goto LABEL_59;
  }
  v57 = *(_QWORD *)(v7 + 48);
  if (v57 > v53)
  {
    re::RenderCamera::computeInverseTransform((float32x4_t *)(v7 + 64 + 32 * v53), (uint64_t)&v148);
    goto LABEL_58;
  }
  re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v53, v57);
  _os_crash();
  __break(1u);
LABEL_140:
  v70 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)v107 + 1336), "SelectionEmitter", "SelectionAll");
  if (!*((_BYTE *)v107 + 1332))
  {
    v69 = 0;
    goto LABEL_73;
  }
  v69 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)v107 + 1336), "SelectionEmitter", "SelectionNearestPass1");
  if (!*((_BYTE *)v107 + 1332))
  {
LABEL_73:
    v71 = 0;
    goto LABEL_74;
  }
  v71 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)v107 + 1336), "SelectionEmitter", "SelectionNearestPass2");
LABEL_74:
  ((void (*)(_QWORD, char *, id))v139[19])(*v139, sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "Selection", 4));
  v72 = v106[6];
  v73 = *(const char **)(*((_QWORD *)v107 + 5) + 16);
  v74 = strcmp(v73, "SelectionRenderNodeGroup01");
  if (v72 == 1)
  {
    if (v74)
    {
      if (!strcmp(v73, "SelectionRenderNodeGroup23"))
      {
        v75 = "SelectionAllGroup23";
      }
      else if (!strcmp(v73, "SelectionRenderNodeGroup45"))
      {
        v75 = "SelectionAllGroup45";
      }
      else if (!strcmp(v73, "SelectionRenderNodeGroup67"))
      {
        v75 = "SelectionAllGroup67";
      }
      else
      {
        v75 = "SelectionAll";
      }
    }
    else
    {
      v75 = "SelectionAllGroup01";
    }
    v78 = strlen(v75);
    if (v78)
    {
      MurmurHash3_x64_128((uint64_t)v75, v78, 0, (unint64_t *)&v148);
      v79 = (*((_QWORD *)&v148 + 1) - 0x61C8864680B583E9 + ((_QWORD)v148 << 6) + ((unint64_t)v148 >> 2)) ^ v148;
    }
    else
    {
      v79 = 0;
    }
    *(_QWORD *)&v148 = v79;
    v80 = re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v135, (uint64_t *)&v148);
    if (v80)
    {
      re::DrawTableSlice::DrawTableSlice(&v148, v80);
      v81 = *(_QWORD *)v107;
      v82 = *((_QWORD *)v107 + 1);
      v83 = *((_QWORD *)v107 + 3);
      re::RenderGraphContext::rtInfo(v107, *((re::RenderGraphNodeBase **)v107 + 5), (uint64_t)&v140);
      v108 = 134217472;
      v109 = 134217472;
      v110 = 0;
      re::encodeDrawCalls((uint64_t)&v138, (uint64_t)&v148, v81, v82, v83, (uint64_t)&v140, (uint64_t)&v108, (uint64_t)v75, *(_QWORD *)(*((_QWORD *)v107 + 5) + 16), *(_QWORD *)(*((_QWORD *)v107 + 5) + 24), *(_QWORD *)(*((_QWORD *)v107 + 5) + 32), v113, v116, (uint64_t)v117, v7, v70, 1, 0, 0,
        0,
        0);
    }
  }
  else
  {
    if (v74)
    {
      v76 = v105;
      if (!strcmp(v73, "SelectionRenderNodeGroup23"))
      {
        v77 = "SelectionNearestPass1Group23";
      }
      else if (!strcmp(v73, "SelectionRenderNodeGroup45"))
      {
        v77 = "SelectionNearestPass1Group45";
      }
      else if (!strcmp(v73, "SelectionRenderNodeGroup67"))
      {
        v77 = "SelectionNearestPass1Group67";
      }
      else
      {
        v77 = "SelectionNearestPass1";
      }
    }
    else
    {
      v77 = "SelectionNearestPass1Group01";
      v76 = v105;
    }
    v84 = strlen(v77);
    if (v84)
    {
      MurmurHash3_x64_128((uint64_t)v77, v84, 0, (unint64_t *)&v148);
      v85 = (*((_QWORD *)&v148 + 1) - 0x61C8864680B583E9 + ((_QWORD)v148 << 6) + ((unint64_t)v148 >> 2)) ^ v148;
    }
    else
    {
      v85 = 0;
    }
    *(_QWORD *)&v148 = v85;
    v86 = re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v135, (uint64_t *)&v148);
    if (v86)
    {
      re::DrawTableSlice::DrawTableSlice(&v148, v86);
      v87 = *(_QWORD *)v107;
      v88 = *((_QWORD *)v107 + 1);
      v89 = *((_QWORD *)v107 + 3);
      re::RenderGraphContext::rtInfo(v107, *((re::RenderGraphNodeBase **)v107 + 5), (uint64_t)&v140);
      v108 = 134217472;
      v109 = 134217472;
      v110 = 0;
      v90 = v88;
      v91 = v89;
      v2 = v117;
      v52 = (uint64_t)v107;
      re::encodeDrawCalls((uint64_t)&v138, (uint64_t)&v148, v87, v90, v91, (uint64_t)&v140, (uint64_t)&v108, (uint64_t)v77, *(_QWORD *)(*((_QWORD *)v107 + 5) + 16), *(_QWORD *)(*((_QWORD *)v107 + 5) + 24), *(_QWORD *)(*((_QWORD *)v107 + 5) + 32), v113, v116, (uint64_t)v117, v7, v69, 0, 0, 0,
        0,
        0);
    }
    if (*(_QWORD *)(v76 + 8))
    {
      v92 = objc_msgSend(*(id *)re::RenderGraphContext::metalBuffer(v52, a1 + 24), sel_contents);
      bzero(v92, *(_QWORD *)(v76 + 8));
    }
    v93 = *(const char **)(*(_QWORD *)(v52 + 40) + 16);
    if (!strcmp(v93, "SelectionRenderNodeGroup01"))
    {
      v94 = "SelectionNearestPass2Group01";
    }
    else if (!strcmp(v93, "SelectionRenderNodeGroup23"))
    {
      v94 = "SelectionNearestPass2Group23";
    }
    else if (!strcmp(v93, "SelectionRenderNodeGroup45"))
    {
      v94 = "SelectionNearestPass2Group45";
    }
    else if (!strcmp(v93, "SelectionRenderNodeGroup67"))
    {
      v94 = "SelectionNearestPass2Group67";
    }
    else
    {
      v94 = "SelectionNearestPass2";
    }
    v95 = strlen(v94);
    if (v95)
    {
      MurmurHash3_x64_128((uint64_t)v94, v95, 0, (unint64_t *)&v148);
      v96 = (*((_QWORD *)&v148 + 1) - 0x61C8864680B583E9 + ((_QWORD)v148 << 6) + ((unint64_t)v148 >> 2)) ^ v148;
    }
    else
    {
      v96 = 0;
    }
    *(_QWORD *)&v148 = v96;
    v97 = re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v135, (uint64_t *)&v148);
    if (v97)
    {
      re::DrawTableSlice::DrawTableSlice(&v148, v97);
      v98 = *(_QWORD *)v52;
      v99 = *(_QWORD *)(v52 + 8);
      v100 = *(_QWORD *)(v52 + 24);
      re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v52, *(re::RenderGraphNodeBase **)(v52 + 40), (uint64_t)&v140);
      v108 = 134217472;
      v109 = 134217472;
      v110 = 0;
      re::encodeDrawCalls((uint64_t)&v138, (uint64_t)&v148, v98, v99, v100, (uint64_t)&v140, (uint64_t)&v108, (uint64_t)v94, *(_QWORD *)(*(_QWORD *)(v52 + 40) + 16), *(_QWORD *)(*(_QWORD *)(v52 + 40) + 24), *(_QWORD *)(*(_QWORD *)(v52 + 40) + 32), v113, v116, (uint64_t)v117, v7, v71, 1, 0, 0,
        0,
        0);
    }
  }
  ((void (*)(_QWORD, char *))v139[20])(*v139, sel_popDebugGroup);
  if (v111[0] && v113)
    (*(void (**)(void))(*(_QWORD *)v111[0] + 40))();
  if (v114[0] && v116)
    (*(void (**)(void))(*(_QWORD *)v114[0] + 40))();
  if (*((_QWORD *)&v119 + 1))
  {
    if ((_QWORD)v120)
    {
      (*(void (**)(void))(**((_QWORD **)&v119 + 1) + 40))();
      *((_QWORD *)v2 + 5) = 0;
      *((_QWORD *)v2 + 6) = 0;
    }
    *((_QWORD *)&v119 + 1) = 0;
  }
  if ((_QWORD)v118 && *((_QWORD *)&v118 + 1))
    (*(void (**)(void))(*(_QWORD *)v118 + 40))();
  re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v132);
  re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v135);
  if (v156)
  {
    v101 = v158;
    v102 = &v158[9 * v156];
    do
    {
      *(_QWORD *)v101 = 0;
      ++*((_DWORD *)v101 + 2);
      v101 += 9;
    }
    while (v101 != v102);
  }
  if (v153)
  {
    v103 = v155;
    v104 = &v155[14 * v153];
    do
    {
      *v103 = 0;
      ++*((_DWORD *)v103 + 2);
      v103 += 14;
    }
    while (v103 != v104);
  }
  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&v138);
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24ED81480;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = -1;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 72);
  v5 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v5;
  *(_OWORD *)(a2 + 72) = v4;
  *(_OWORD *)(a2 + 56) = v3;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24ED81480;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = -1;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 56);
  v4 = *(_OWORD *)(a1 + 72);
  v5 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v5;
  *(_OWORD *)(a2 + 72) = v4;
  *(_OWORD *)(a2 + 56) = v3;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::size()
{
  return 112;
}

uint64_t re::RenderGraphDataStore::get<re::RenderGraphSelectionParams>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_25411E9B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25411E9B0))
  {
    qword_25411E9A8 = re::internal::getOrCreateInfo((re::internal *)"RenderGraphSelectionParams", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSelectionParams, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSelectionParams, (void (*)(re::IntrospectionBase *))&unk_25411E980, 0);
    __cxa_guard_release(&qword_25411E9B0);
  }
  v5 = strlen(*(const char **)(qword_25411E9A8 + 48));
  if (v5)
  {
    MurmurHash3_x64_128(*(_QWORD *)(qword_25411E9A8 + 48), v5, 0, v12);
    v6 = (v12[1] - 0x61C8864680B583E9 + (v12[0] << 6) + (v12[0] >> 2)) ^ v12[0];
  }
  else
  {
    v6 = 0;
  }
  v7 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v8 = (a2 - 0x61C8864680B583E9 + (v6 << 6) + (v6 >> 2)) ^ v6;
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)));
    if (v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(a1 + 80);
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v10 + 24 * v9 + 8) != v8)
      {
        while (1)
        {
          v7 = *(_DWORD *)(v10 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v8 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v7 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v10 + 24 * v7 + 8) == v8)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v7 + 16);
        }
        v7 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v7 + 16);
}

uint64_t re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = (unint64_t)"N2re22MeshLodSelectInputDataE";
  if (((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v6 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 80);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 24 * v6 + 8) == v7)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
        }
        v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(double *a1, double *a2)
{
  double result;

  *(_QWORD *)a1 = &off_24ED81518;
  a1[1] = 0.0;
  a1[2] = NAN;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = 0.0;
  a1[4] = NAN;
  a1[3] = a2[2];
  a1[4] = a2[3];
  a1[5] = 0.0;
  a1[6] = NAN;
  a1[5] = a2[4];
  a1[6] = a2[5];
  a1[7] = 0.0;
  a1[8] = NAN;
  a1[7] = a2[6];
  result = a2[7];
  a1[8] = result;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *result)
{
  *result = &off_24ED81518;
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED81518;
  JUMPOUT(0x2276933B8);
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  __int128 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5[0] = 0x100000000;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 8, (uint64_t)v5);
  v5[0] = 0x100000001;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 24, (uint64_t)v5);
  v5[0] = 0x200000000;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 40, (uint64_t)v5);
  return re::RenderGraphBuilder::setVisibilityResultsBuffer(a2, a1 + 56);
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(_QWORD *a1, _QWORD *a2)
{
  *a2 = &off_24ED81518;
  a2[1] = 0;
  a2[2] = -1;
  a2[1] = a1[1];
  a2[2] = a1[2];
  a2[3] = 0;
  a2[4] = -1;
  a2[3] = a1[3];
  a2[4] = a1[4];
  a2[5] = 0;
  a2[6] = -1;
  a2[5] = a1[5];
  a2[6] = a1[6];
  a2[7] = 0;
  a2[8] = -1;
  a2[7] = a1[7];
  a2[8] = a1[8];
  return a2;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(uint64_t a1, double *a2)
{
  return re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(a2, (double *)(a1 + 8));
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#2},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 72;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(double *a1, double *a2)
{
  double result;

  *(_QWORD *)a1 = &off_24ED81570;
  a1[1] = 0.0;
  a1[2] = NAN;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = 0.0;
  a1[4] = NAN;
  a1[3] = a2[2];
  a1[4] = a2[3];
  a1[5] = 0.0;
  a1[6] = NAN;
  a1[5] = a2[4];
  a1[6] = a2[5];
  a1[7] = 0.0;
  a1[8] = NAN;
  a1[7] = a2[6];
  result = a2[7];
  a1[8] = result;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *result)
{
  *result = &off_24ED81570;
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED81570;
  JUMPOUT(0x2276933B8);
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  __int128 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5[0] = 0x100000002;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 8, (uint64_t)v5);
  v5[0] = 0x100000003;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 24, (uint64_t)v5);
  v5[0] = 0x200000000;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 40, (uint64_t)v5);
  return re::RenderGraphBuilder::setVisibilityResultsBuffer(a2, a1 + 56);
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(_QWORD *a1, _QWORD *a2)
{
  *a2 = &off_24ED81570;
  a2[1] = 0;
  a2[2] = -1;
  a2[1] = a1[1];
  a2[2] = a1[2];
  a2[3] = 0;
  a2[4] = -1;
  a2[3] = a1[3];
  a2[4] = a1[4];
  a2[5] = 0;
  a2[6] = -1;
  a2[5] = a1[5];
  a2[6] = a1[6];
  a2[7] = 0;
  a2[8] = -1;
  a2[7] = a1[7];
  a2[8] = a1[8];
  return a2;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(uint64_t a1, double *a2)
{
  return re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(a2, (double *)(a1 + 8));
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#3},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 72;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(double *a1, double *a2)
{
  double result;

  *(_QWORD *)a1 = &off_24ED815C8;
  a1[1] = 0.0;
  a1[2] = NAN;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = 0.0;
  a1[4] = NAN;
  a1[3] = a2[2];
  a1[4] = a2[3];
  a1[5] = 0.0;
  a1[6] = NAN;
  a1[5] = a2[4];
  a1[6] = a2[5];
  a1[7] = 0.0;
  a1[8] = NAN;
  a1[7] = a2[6];
  result = a2[7];
  a1[8] = result;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *result)
{
  *result = &off_24ED815C8;
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED815C8;
  JUMPOUT(0x2276933B8);
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  __int128 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5[0] = 0x100000004;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 8, (uint64_t)v5);
  v5[0] = 0x100000005;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 24, (uint64_t)v5);
  v5[0] = 0x200000000;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 40, (uint64_t)v5);
  return re::RenderGraphBuilder::setVisibilityResultsBuffer(a2, a1 + 56);
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(_QWORD *a1, _QWORD *a2)
{
  *a2 = &off_24ED815C8;
  a2[1] = 0;
  a2[2] = -1;
  a2[1] = a1[1];
  a2[2] = a1[2];
  a2[3] = 0;
  a2[4] = -1;
  a2[3] = a1[3];
  a2[4] = a1[4];
  a2[5] = 0;
  a2[6] = -1;
  a2[5] = a1[5];
  a2[6] = a1[6];
  a2[7] = 0;
  a2[8] = -1;
  a2[7] = a1[7];
  a2[8] = a1[8];
  return a2;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(uint64_t a1, double *a2)
{
  return re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(a2, (double *)(a1 + 8));
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#4},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 72;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#5},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(double *a1, double *a2)
{
  double result;

  *(_QWORD *)a1 = &off_24ED81620;
  a1[1] = 0.0;
  a1[2] = NAN;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = 0.0;
  a1[4] = NAN;
  a1[3] = a2[2];
  a1[4] = a2[3];
  a1[5] = 0.0;
  a1[6] = NAN;
  a1[5] = a2[4];
  result = a2[5];
  a1[6] = result;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#5},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *result)
{
  *result = &off_24ED81620;
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#5},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED81620;
  JUMPOUT(0x2276933B8);
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#5},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];
  __int128 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v5[0] = 0x100000006;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 8, (uint64_t)v5);
  v5[0] = 0x200000000;
  v6 = xmmword_2260E5D70;
  v7 = 0;
  v8 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 24, (uint64_t)v5);
  return re::RenderGraphBuilder::setVisibilityResultsBuffer(a2, a1 + 40);
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#5},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(_QWORD *a1, _QWORD *a2)
{
  *a2 = &off_24ED81620;
  a2[1] = 0;
  a2[2] = -1;
  a2[1] = a1[1];
  a2[2] = a1[2];
  a2[3] = 0;
  a2[4] = -1;
  a2[3] = a1[3];
  a2[4] = a1[4];
  a2[5] = 0;
  a2[6] = -1;
  a2[5] = a1[5];
  a2[6] = a1[6];
  return a2;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#5},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(uint64_t a1, double *a2)
{
  return re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#5},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(a2, (double *)(a1 + 8));
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#5},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 56;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(double *a1, double *a2)
{
  double result;

  *(_QWORD *)a1 = &off_24ED81678;
  a1[1] = 0.0;
  a1[2] = NAN;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = 0.0;
  a1[4] = NAN;
  a1[3] = a2[2];
  a1[4] = a2[3];
  a1[5] = 0.0;
  a1[6] = NAN;
  a1[5] = a2[4];
  a1[6] = a2[5];
  a1[7] = 0.0;
  a1[8] = NAN;
  a1[7] = a2[6];
  a1[8] = a2[7];
  a1[9] = 0.0;
  a1[10] = NAN;
  a1[9] = a2[8];
  a1[10] = a2[9];
  a1[11] = 0.0;
  a1[12] = NAN;
  a1[11] = a2[10];
  a1[12] = a2[11];
  a1[13] = 0.0;
  a1[14] = NAN;
  a1[13] = a2[12];
  a1[14] = a2[13];
  a1[15] = 0.0;
  a1[16] = NAN;
  a1[15] = a2[14];
  a1[16] = a2[15];
  a1[17] = 0.0;
  a1[18] = NAN;
  a1[17] = a2[16];
  a1[18] = a2[17];
  a1[19] = 0.0;
  a1[20] = NAN;
  a1[19] = a2[18];
  a1[20] = a2[19];
  a1[21] = 0.0;
  a1[22] = NAN;
  a1[21] = a2[20];
  a1[22] = a2[21];
  a1[23] = 0.0;
  a1[24] = NAN;
  a1[23] = a2[22];
  a1[24] = a2[23];
  a1[25] = 0.0;
  a1[26] = NAN;
  a1[25] = a2[24];
  a1[26] = a2[25];
  a1[27] = 0.0;
  a1[28] = NAN;
  a1[27] = a2[26];
  a1[28] = a2[27];
  a1[29] = 0.0;
  a1[30] = NAN;
  a1[29] = a2[28];
  result = a2[29];
  a1[30] = result;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *result)
{
  *result = &off_24ED81678;
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED81678;
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v5 = 0x400000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 120, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, v4, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, a1 + 24, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, a1 + 40, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, a1 + 56, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, a1 + 72, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, a1 + 88, (uint64_t)&v5);
  *(_DWORD *)((char *)&v5 + 3) = 0;
  LODWORD(v5) = 0;
  v6 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, a1 + 104, (uint64_t)&v5);
  v5 = 0x400000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 136, (uint64_t)&v5);
  v5 = 0x400000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 152, (uint64_t)&v5);
  v5 = 0x400000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 168, (uint64_t)&v5);
  v5 = 0x400000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 184, (uint64_t)&v5);
  v5 = 0x400000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 200, (uint64_t)&v5);
  v5 = 0x400000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 216, (uint64_t)&v5);
  v5 = 0x400000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write(a2, a1 + 232, (uint64_t)&v5);
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(_QWORD *a1, _QWORD *a2)
{
  *a2 = &off_24ED81678;
  a2[1] = 0;
  a2[2] = -1;
  a2[1] = a1[1];
  a2[2] = a1[2];
  a2[3] = 0;
  a2[4] = -1;
  a2[3] = a1[3];
  a2[4] = a1[4];
  a2[5] = 0;
  a2[6] = -1;
  a2[5] = a1[5];
  a2[6] = a1[6];
  a2[7] = 0;
  a2[8] = -1;
  a2[7] = a1[7];
  a2[8] = a1[8];
  a2[9] = 0;
  a2[10] = -1;
  a2[9] = a1[9];
  a2[10] = a1[10];
  a2[11] = 0;
  a2[12] = -1;
  a2[11] = a1[11];
  a2[12] = a1[12];
  a2[13] = 0;
  a2[14] = -1;
  a2[13] = a1[13];
  a2[14] = a1[14];
  a2[15] = 0;
  a2[16] = -1;
  a2[15] = a1[15];
  a2[16] = a1[16];
  a2[17] = 0;
  a2[18] = -1;
  a2[17] = a1[17];
  a2[18] = a1[18];
  a2[19] = 0;
  a2[20] = -1;
  a2[19] = a1[19];
  a2[20] = a1[20];
  a2[21] = 0;
  a2[22] = -1;
  a2[21] = a1[21];
  a2[22] = a1[22];
  a2[23] = 0;
  a2[24] = -1;
  a2[23] = a1[23];
  a2[24] = a1[24];
  a2[25] = 0;
  a2[26] = -1;
  a2[25] = a1[25];
  a2[26] = a1[26];
  a2[27] = 0;
  a2[28] = -1;
  a2[27] = a1[27];
  a2[28] = a1[28];
  a2[29] = 0;
  a2[30] = -1;
  a2[29] = a1[29];
  a2[30] = a1[30];
  return a2;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(uint64_t a1, double *a2)
{
  return re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::Callable(a2, (double *)(a1 + 8));
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#6},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 248;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::Callable(double *a1, double *a2)
{
  double v2;
  uint64_t v3;
  double result;

  a1[2] = 0.0;
  v2 = *a2;
  v3 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = &off_24ED816D0;
  a1[1] = v2;
  a1[3] = NAN;
  *((_QWORD *)a1 + 2) = v3;
  a1[3] = a2[2];
  a1[4] = 0.0;
  a1[5] = NAN;
  a1[4] = a2[3];
  a1[5] = a2[4];
  a1[6] = 0.0;
  a1[7] = NAN;
  a1[6] = a2[5];
  a1[7] = a2[6];
  a1[8] = 0.0;
  a1[9] = NAN;
  a1[8] = a2[7];
  a1[9] = a2[8];
  a1[10] = 0.0;
  a1[11] = NAN;
  a1[10] = a2[9];
  a1[11] = a2[10];
  a1[12] = 0.0;
  a1[13] = NAN;
  a1[12] = a2[11];
  a1[13] = a2[12];
  a1[14] = 0.0;
  a1[15] = NAN;
  a1[14] = a2[13];
  a1[15] = a2[14];
  a1[16] = 0.0;
  a1[17] = NAN;
  a1[16] = a2[15];
  a1[17] = a2[16];
  a1[18] = 0.0;
  a1[19] = NAN;
  a1[18] = a2[17];
  a1[19] = a2[18];
  a1[20] = 0.0;
  a1[21] = NAN;
  a1[20] = a2[19];
  a1[21] = a2[20];
  a1[22] = 0.0;
  a1[23] = NAN;
  a1[22] = a2[21];
  a1[23] = a2[22];
  a1[24] = 0.0;
  a1[25] = NAN;
  a1[24] = a2[23];
  a1[25] = a2[24];
  a1[26] = 0.0;
  a1[27] = NAN;
  a1[26] = a2[25];
  a1[27] = a2[26];
  a1[28] = 0.0;
  a1[29] = NAN;
  a1[28] = a2[27];
  a1[29] = a2[28];
  a1[30] = 0.0;
  a1[31] = NAN;
  a1[30] = a2[29];
  result = a2[30];
  a1[31] = result;
  a1[32] = a2[31];
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::~Callable(_QWORD *result)
{
  *result = &off_24ED816D0;
  return result;
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED816D0;
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::operator()(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  id v19;
  _QWORD *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  id v27;
  _QWORD *v28;
  id v29;
  _QWORD *v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = (_DWORD *)re::RenderGraphDataStore::get<re::RenderGraphSelectionParams>(*(_QWORD *)(a2 + 1168), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 48));
  v5 = *(unsigned int *)(a1 + 256);
  v6 = 8 * v5;
  v7 = *(_DWORD *)(a1 + 260);
  v8 = v7 * v5;
  v9 = 8 * v7 * v5;
  v33 = 16 * v7 * v5;
  v34 = 16 * v5;
  v10 = v4[2];
  v11 = v4[3];
  v12 = v10 & v11 & v4[4] & v4[5];
  v13 = v7 >> 1;
  if (v12 == -1)
    v14 = v5 >> 1;
  else
    v14 = v10;
  if (v12 == -1)
    v15 = v13;
  else
    v15 = v11;
  v16 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(a2 + 8) + 104));
  re::RenderGraphContext::acquireManagedBlitEncoder(a2, v16, *(re::RenderGraphNodeBase **)(a2 + 40), 0, &v37);
  re::RenderGraphContext::metalTexture(a2, a1 + 16, 0, 0, &v36);
  v17 = v36;
  v18 = (_QWORD *)re::RenderGraphContext::metalBuffer(a2, a1 + 144);
  v40 = v14;
  v41 = v15;
  v35 = v15;
  v42 = 0;
  v38 = vdupq_n_s64(1uLL);
  v39 = 1;
  objc_msgSend(v37, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v17, 0, 0, &v40, &v38, *v18, 0, 8 * v5, v9);
  if (v36)

  re::RenderGraphContext::metalTexture(a2, a1 + 32, 0, 0, &v36);
  v19 = v36;
  v20 = (_QWORD *)re::RenderGraphContext::metalBuffer(a2, a1 + 160);
  v40 = v14;
  v41 = v35;
  v42 = 0;
  v38 = vdupq_n_s64(1uLL);
  v39 = 1;
  objc_msgSend(v37, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v19, 0, 0, &v40, &v38, *v20, 0, v34, v33);
  if (v36)

  re::RenderGraphContext::metalTexture(a2, a1 + 48, 0, 0, &v36);
  v21 = v36;
  v22 = (_QWORD *)re::RenderGraphContext::metalBuffer(a2, a1 + 176);
  v40 = v14;
  v41 = v35;
  v42 = 0;
  v38 = vdupq_n_s64(1uLL);
  v39 = 1;
  objc_msgSend(v37, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v21, 0, 0, &v40, &v38, *v22, 0, v34, v33);
  if (v36)

  v23 = 4 * v5;
  v24 = 4 * v8;
  re::RenderGraphContext::metalTexture(a2, a1 + 64, 0, 0, &v36);
  v25 = v36;
  v26 = (_QWORD *)re::RenderGraphContext::metalBuffer(a2, a1 + 192);
  v40 = v14;
  v41 = v35;
  v42 = 0;
  v38 = vdupq_n_s64(1uLL);
  v39 = 1;
  objc_msgSend(v37, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v25, 0, 0, &v40, &v38, *v26, 0, v6, v9);
  if (v36)

  re::RenderGraphContext::metalTexture(a2, a1 + 80, 0, 0, &v36);
  v27 = v36;
  v28 = (_QWORD *)re::RenderGraphContext::metalBuffer(a2, a1 + 208);
  v40 = v14;
  v41 = v35;
  v42 = 0;
  v38 = vdupq_n_s64(1uLL);
  v39 = 1;
  objc_msgSend(v37, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v27, 0, 0, &v40, &v38, *v28, 0, v23, v24);
  if (v36)

  re::RenderGraphContext::metalTexture(a2, a1 + 96, 0, 0, &v36);
  v29 = v36;
  v30 = (_QWORD *)re::RenderGraphContext::metalBuffer(a2, a1 + 224);
  v40 = v14;
  v41 = v35;
  v42 = 0;
  v38 = vdupq_n_s64(1uLL);
  v39 = 1;
  objc_msgSend(v37, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v29, 0, 0, &v40, &v38, *v30, 0, v23, v24);
  if (v36)

  re::RenderGraphContext::metalTexture(a2, a1 + 112, 0, 0, &v36);
  v31 = v36;
  v32 = (_QWORD *)re::RenderGraphContext::metalBuffer(a2, a1 + 240);
  v40 = v14;
  v41 = v35;
  v42 = 0;
  v38 = vdupq_n_s64(1uLL);
  v39 = 1;
  objc_msgSend(v37, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v31, 0, 0, &v40, &v38, *v32, 0, v34, v33);
  if (v36)

  re::RenderGraphContext::metalBuffer(a2, a1 + 128);
  re::RenderGraphContext::metalBuffer(a2, a1 + 144);
  re::RenderGraphContext::metalBuffer(a2, a1 + 160);
  re::RenderGraphContext::metalBuffer(a2, a1 + 176);
  re::RenderGraphContext::metalBuffer(a2, a1 + 192);
  re::RenderGraphContext::metalBuffer(a2, a1 + 208);
  re::RenderGraphContext::metalBuffer(a2, a1 + 224);
  re::RenderGraphContext::metalBuffer(a2, a1 + 240);

}

_QWORD *re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::cloneInto(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  a2[2] = 0;
  v2 = a1[1];
  v3 = a1[2];
  *a2 = &off_24ED816D0;
  a2[1] = v2;
  a2[3] = -1;
  a2[2] = v3;
  a2[3] = a1[3];
  a2[4] = 0;
  a2[5] = -1;
  a2[4] = a1[4];
  a2[5] = a1[5];
  a2[6] = 0;
  a2[7] = -1;
  a2[6] = a1[6];
  a2[7] = a1[7];
  a2[8] = 0;
  a2[9] = -1;
  a2[8] = a1[8];
  a2[9] = a1[9];
  a2[10] = 0;
  a2[11] = -1;
  a2[10] = a1[10];
  a2[11] = a1[11];
  a2[12] = 0;
  a2[13] = -1;
  a2[12] = a1[12];
  a2[13] = a1[13];
  a2[14] = 0;
  a2[15] = -1;
  a2[14] = a1[14];
  a2[15] = a1[15];
  a2[16] = 0;
  a2[17] = -1;
  a2[16] = a1[16];
  a2[17] = a1[17];
  a2[18] = 0;
  a2[19] = -1;
  a2[18] = a1[18];
  a2[19] = a1[19];
  a2[20] = 0;
  a2[21] = -1;
  a2[20] = a1[20];
  a2[21] = a1[21];
  a2[22] = 0;
  a2[23] = -1;
  a2[22] = a1[22];
  a2[23] = a1[23];
  a2[24] = 0;
  a2[25] = -1;
  a2[24] = a1[24];
  a2[25] = a1[25];
  a2[26] = 0;
  a2[27] = -1;
  a2[26] = a1[26];
  a2[27] = a1[27];
  a2[28] = 0;
  a2[29] = -1;
  a2[28] = a1[28];
  a2[29] = a1[29];
  a2[30] = 0;
  a2[31] = -1;
  a2[30] = a1[30];
  a2[31] = a1[31];
  a2[32] = a1[32];
  return a2;
}

double re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::moveInto(uint64_t a1, double *a2)
{
  return re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::Callable(a2, (double *)(a1 + 8));
}

uint64_t re::internal::Callable<re::RenderGraphSelectionEmitter::registerProviders(re::RenderGraphManager &,re::AssetService *)::$_0::operator() const(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#2},void ()(re::RenderGraphContext &)>::size()
{
  return 264;
}

void re::RenderGraphEmitterBase::~RenderGraphEmitterBase(re::RenderGraphEmitterBase *this)
{
  *(_QWORD *)this = off_24ED86C80;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 11);
  re::DynamicArray<re::BindPointAndPath>::deinit((uint64_t)this + 48);
  re::BindNode::deinit((re::RenderGraphEmitterBase *)((char *)this + 16));
}

void std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::ecs2::SkyboxMeshID &)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::ecs2::SkyboxMeshID &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED81728;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::ecs2::SkyboxMeshID &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED81728;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::ecs2::SkyboxMeshID &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *a4;
  v6 = (unint64_t)"N2re16SkyboxMeshIDDataE";
  if (((unint64_t)"N2re16SkyboxMeshIDDataE" & 0x8000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((unint64_t)"N2re16SkyboxMeshIDDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v8 = 5381;
    do
    {
      v6 = v8;
      v9 = *v7++;
      v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  v10 = (qword_25411E988 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
  v11 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 8) + 32))(*(_QWORD *)(a3 + 8), 16, 8);
  v12 = *(_QWORD *)(a3 + 64);
  *v11 = &off_24ED817A8;
  v11[1] = v5;
  if (v12)
  {
    v12 = v10 % *(unsigned int *)(a3 + 88);
    v13 = *(unsigned int *)(*(_QWORD *)(a3 + 72) + 4 * v12);
    if ((_DWORD)v13 != 0x7FFFFFFF)
    {
      v19 = *(_QWORD *)(a3 + 80);
      if (*(_QWORD *)(v19 + 24 * v13 + 8) == v10)
        return;
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v19 + 24 * v13) & 0x7FFFFFFF;
        if ((_DWORD)v13 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v19 + 24 * v13 + 8) == v10)
          return;
      }
    }
  }
  v14 = *(unsigned int *)(a3 + 100);
  if ((_DWORD)v14 == 0x7FFFFFFF)
  {
    v14 = *(unsigned int *)(a3 + 96);
    v15 = v14;
    if ((_DWORD)v14 == *(_DWORD *)(a3 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a3 + 64, 2 * *(_DWORD *)(a3 + 92));
      LODWORD(v12) = v10 % *(unsigned int *)(a3 + 88);
      v15 = *(_DWORD *)(a3 + 96);
    }
    *(_DWORD *)(a3 + 96) = v15 + 1;
    v16 = *(_QWORD *)(a3 + 80);
    v17 = *(_DWORD *)(v16 + 24 * v14);
  }
  else
  {
    v16 = *(_QWORD *)(a3 + 80);
    v17 = *(_DWORD *)(v16 + 24 * v14);
    *(_DWORD *)(a3 + 100) = v17 & 0x7FFFFFFF;
  }
  v18 = 24 * v14;
  *(_DWORD *)(v16 + v18) = v17 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a3 + 80) + v18) = *(_DWORD *)(*(_QWORD *)(a3 + 80) + 24 * v14) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a3 + 72) + 4 * v12);
  *(_QWORD *)(*(_QWORD *)(a3 + 80) + 24 * v14 + 8) = v10;
  *(_QWORD *)(*(_QWORD *)(a3 + 80) + 24 * v14 + 16) = v11;
  *(_DWORD *)(*(_QWORD *)(a3 + 72) + 4 * v12) = v14;
  ++*(_DWORD *)(a3 + 92);
  ++*(_DWORD *)(a3 + 104);
}

uint64_t std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::ecs2::SkyboxMeshID &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_0>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::ecs2::SkyboxMeshID &)>::target_type()
{
}

void re::SkyboxMeshIDData::~SkyboxMeshIDData(re::SkyboxMeshIDData *this)
{
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraView> &)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraView> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24ED817E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraView> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED817E0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraView> &)>::operator()(uint64_t a1, re::RenderFrame *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v9;
  const char *v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a4 + 16))
  {
    v5 = a3;
    v4 = a1;
    v7 = 0x9E3779B97F4A7C17;
    v6 = *(_QWORD *)(a4 + 32);
    v9 = atomic_load((unsigned __int8 *)&qword_25411E9C0);
    if ((v9 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    a2 = (re::RenderFrame *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (__cxa_guard_acquire(&qword_25411E9C0))
  {
    MurmurHash3_x64_128((uint64_t)"Camera", 6, 0, (unint64_t *)v17);
    qword_25411E9B8 = (*((_QWORD *)&v17[0] + 1) + v7 + (*(_QWORD *)&v17[0] << 6) + (*(_QWORD *)&v17[0] >> 2)) ^ *(_QWORD *)&v17[0];
    __cxa_guard_release(&qword_25411E9C0);
  }
LABEL_3:
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    v10 = *(const char **)(v6 + 16);
  else
    v10 = (const char *)(v6 + 9);
  v11 = qword_25411E9B8;
  v12 = strlen(v10);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)v10, v12, 0, (unint64_t *)v17);
    v7 += (*((_QWORD *)&v17[0] + 1) + v7 + (*(_QWORD *)&v17[0] << 6) + (*(_QWORD *)&v17[0] >> 2)) ^ *(_QWORD *)&v17[0];
  }
  v13 = ((v11 >> 2) + (v11 << 6) + v7) ^ v11;
  v14 = re::RenderGraphDataStore::tryGet<re::CameraData>(v5, v13);
  if (v14)
  {
    if (*(_QWORD *)(v14 + 440))
    {
      *(_QWORD *)&v17[0] = &off_24ED81860;
      *((_QWORD *)&v17[0] + 1) = v14;
      re::RenderGraphDataStore::add<re::CurrentSelectionData,re::CurrentSelectionData&>(v5, qword_25411E988, (uint64_t)v17);
      v15 = qword_25411E988;
      v16 = re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(v5, v13);
      re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData&>(v5, v15, v16);
      re::RenderFrame::emitGraph(a2, (const char *)(v4 + 8), (const char *)(v4 + 18));
    }
  }
}

uint64_t std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraView> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_1>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraView> &)>::target_type()
{
}

void re::RenderGraphDataStore::add<re::CurrentSelectionData,re::CurrentSelectionData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v5 = (unint64_t)"N2re20CurrentSelectionDataE";
  if (((unint64_t)"N2re20CurrentSelectionDataE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re20CurrentSelectionDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  v9 = (a2 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  v10 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  v10[1] = *(_QWORD *)(a3 + 8);
  v11 = *(_QWORD *)(a1 + 64);
  *v10 = &off_24ED81860;
  if (v11)
  {
    v11 = v9 % *(unsigned int *)(a1 + 88);
    v12 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v11);
    if ((_DWORD)v12 != 0x7FFFFFFF)
    {
      v18 = *(_QWORD *)(a1 + 80);
      if (*(_QWORD *)(v18 + 24 * v12 + 8) == v9)
        return;
      while (1)
      {
        LODWORD(v12) = *(_DWORD *)(v18 + 24 * v12) & 0x7FFFFFFF;
        if ((_DWORD)v12 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v18 + 24 * v12 + 8) == v9)
          return;
      }
    }
  }
  v13 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v13 == 0x7FFFFFFF)
  {
    v13 = *(unsigned int *)(a1 + 96);
    v14 = v13;
    if ((_DWORD)v13 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v11) = v9 % *(unsigned int *)(a1 + 88);
      v14 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v14 + 1;
    v15 = *(_QWORD *)(a1 + 80);
    v16 = *(_DWORD *)(v15 + 24 * v13);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 80);
    v16 = *(_DWORD *)(v15 + 24 * v13);
    *(_DWORD *)(a1 + 100) = v16 & 0x7FFFFFFF;
  }
  v17 = 24 * v13;
  *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v11);
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v13 + 8) = v9;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v13 + 16) = v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v11) = v13;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
}

uint64_t re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  uint64_t v20;

  v5 = (unint64_t)"N2re22MeshLodSelectInputDataE";
  if (((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  v20 = (a2 + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 160, 16);
  *(_QWORD *)v9 = &off_24ED77680;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(a3 + 16);
  v10 = *(unsigned __int8 *)(a3 + 17);
  *(_BYTE *)(v9 + 17) = v10;
  if (v10)
    *(_BYTE *)(v9 + 18) = *(_BYTE *)(a3 + 18);
  v11 = *(unsigned __int8 *)(a3 + 20);
  *(_BYTE *)(v9 + 20) = v11;
  if (v11)
    *(_DWORD *)(v9 + 24) = *(_DWORD *)(a3 + 24);
  v12 = *(_OWORD *)(a3 + 32);
  v13 = *(_OWORD *)(a3 + 48);
  v14 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v9 + 80) = v14;
  *(_OWORD *)(v9 + 32) = v12;
  *(_OWORD *)(v9 + 48) = v13;
  v15 = *(_OWORD *)(a3 + 96);
  v16 = *(_OWORD *)(a3 + 112);
  v17 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v9 + 144) = v17;
  *(_OWORD *)(v9 + 96) = v15;
  *(_OWORD *)(v9 + 112) = v16;
  v19 = v9;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, (unint64_t *)&v20, &v19);
}

void re::CurrentSelectionData::~CurrentSelectionData(re::CurrentSelectionData *this)
{
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraMultiView> &)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraMultiView> &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24ED818B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraMultiView> &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED818B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraMultiView> &)>::operator()(uint64_t a1, re::RenderFrame *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v9;
  const char *v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a4 + 16))
  {
    v5 = a3;
    v4 = a1;
    v7 = 0x9E3779B97F4A7C17;
    v6 = *(_QWORD *)(a4 + 32);
    v9 = atomic_load((unsigned __int8 *)&qword_25411E9D0);
    if ((v9 & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    a2 = (re::RenderFrame *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (__cxa_guard_acquire(&qword_25411E9D0))
  {
    MurmurHash3_x64_128((uint64_t)"Camera", 6, 0, (unint64_t *)v17);
    qword_25411E9C8 = (*((_QWORD *)&v17[0] + 1) + v7 + (*(_QWORD *)&v17[0] << 6) + (*(_QWORD *)&v17[0] >> 2)) ^ *(_QWORD *)&v17[0];
    __cxa_guard_release(&qword_25411E9D0);
  }
LABEL_3:
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    v10 = *(const char **)(v6 + 16);
  else
    v10 = (const char *)(v6 + 9);
  v11 = qword_25411E9C8;
  v12 = strlen(v10);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)v10, v12, 0, (unint64_t *)v17);
    v7 += (*((_QWORD *)&v17[0] + 1) + v7 + (*(_QWORD *)&v17[0] << 6) + (*(_QWORD *)&v17[0] >> 2)) ^ *(_QWORD *)&v17[0];
  }
  v13 = ((v11 >> 2) + (v11 << 6) + v7) ^ v11;
  v14 = re::RenderGraphDataStore::tryGet<re::CameraData>(v5, v13);
  if (v14)
  {
    if (*(_QWORD *)(v14 + 440))
    {
      *(_QWORD *)&v17[0] = &off_24ED81860;
      *((_QWORD *)&v17[0] + 1) = v14;
      re::RenderGraphDataStore::add<re::CurrentSelectionData,re::CurrentSelectionData&>(v5, qword_25411E988, (uint64_t)v17);
      v15 = qword_25411E988;
      v16 = re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(v5, v13);
      re::RenderGraphDataStore::add<re::MeshLodSelectInputData,re::MeshLodSelectInputData&>(v5, v15, v16);
      re::RenderFrame::emitGraph(a2, (const char *)(v4 + 8), (const char *)(v4 + 18));
    }
  }
}

uint64_t std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraMultiView> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2,std::allocator<re::RenderGraphSelectionEmitter::handleRenderFrameDataStream(re::RenderFrame &,re::WeakStringID const&)::$_2>,void ()(re::RenderFrame &,re::RenderGraphDataStore &,re::DynamicArray<re::CameraMultiView> &)>::target_type()
{
}

uint64_t re::BucketArray<re::SceneName,4ul>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!*(_QWORD *)(a1 + 40))
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, 0, 0);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v2 = a1 + 24;
  else
    v2 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)v2;
}

uint64_t re::RenderGraphDataStore::get<re::CurrentSelectionData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = (unint64_t)"N2re20CurrentSelectionDataE";
  if (((unint64_t)"N2re20CurrentSelectionDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re20CurrentSelectionDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v6 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 80);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 24 * v6 + 8) == v7)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
        }
        v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
}

void re::SelectionDrawCallBufferData::~SelectionDrawCallBufferData(re::SelectionDrawCallBufferData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::DrawCallIdentifierData::~DrawCallIdentifierData(re::DrawCallIdentifierData *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::SelectionConcludeHandler>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SelectionConcludeHandler>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SelectionConcludeHandler>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::isBoundingBoxInsideVCAPlanes(uint64_t a1, float32x4_t *a2, uint64_t a3, int a4, _BYTE *a5, float32x4_t *a6, float32x4_t *a7, uint64_t a8, float32x4_t *a9, uint64_t a10, uint64_t a11, int a12)
{
  re *v17;
  uint64_t v20;
  int8x16_t v21;
  uint64_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float v26;
  unsigned __int8 v27;
  NSObject *v28;
  uint64_t v29;
  int8x16_t v30;
  float v31;
  float v32;
  float32x4_t *v33;
  uint64_t result;
  uint64_t v35;
  int8x16_t v36;
  uint8_t v37[16];
  _OWORD v38[8];

  v17 = (re *)re::transformedAABBVertices(a1, a2, v38);
  if (a3 != a11 || a3 == 0 || a11 == 0)
  {
    switch(*a5)
    {
      case 0:
        goto LABEL_25;
      case 1:
      case 3:
        v20 = 0;
        while (1)
        {
          v21 = (int8x16_t)vmulq_f32(*a7, (float32x4_t)v38[v20]);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL))) <= 0.0)
            break;
          if (++v20 == 8)
            return 0;
        }
        goto LABEL_31;
      case 2:
      case 4:
        v22 = 0;
        break;
      case 5:
        v24 = *a6;
        v24.i32[3] = 1.0;
        v25 = (int8x16_t)vmulq_f32(*a7, v24);
        v26 = vaddv_f32(vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)));
        goto LABEL_30;
      default:
        do
          v27 = __ldaxr(re::isBoundingBoxInsideVCAPlanes(re::AABB const&,re::Matrix4x4<float> const&,unsigned long long,int,re::MeshSortingConfiguration const&,re::Vector3<float> const&,re::PlaneF const&,re::Slice<re::PlaneF>,unsigned long long,int)::__FILE____LINE___logged);
        while (__stlxr(1u, re::isBoundingBoxInsideVCAPlanes(re::AABB const&,re::Matrix4x4<float> const&,unsigned long long,int,re::MeshSortingConfiguration const&,re::Vector3<float> const&,re::PlaneF const&,re::Slice<re::PlaneF>,unsigned long long,int)::__FILE____LINE___logged));
        if ((v27 & 1) == 0)
        {
          v28 = *re::graphicsLogObjects(v17);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v37 = 0;
            _os_log_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEFAULT, "An unknown mesh sort point heuristic has been encountered. All unknown heuristics will default to kCentroid.", v37, 2u);
          }
        }
LABEL_25:
        v29 = 0;
        v26 = 0.0;
        do
        {
          v30 = (int8x16_t)vmulq_f32(*a7, (float32x4_t)v38[v29]);
          v31 = vaddv_f32(vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)));
          if (v31 >= 0.0)
            v32 = 1.0;
          else
            v32 = 2.0;
          v26 = v26 + (float)(v31 * v32);
          ++v29;
        }
        while (v29 != 8);
LABEL_30:
        if (v26 <= 0.0)
          goto LABEL_31;
        return 0;
    }
    while (1)
    {
      v23 = (int8x16_t)vmulq_f32(*a7, (float32x4_t)v38[v22]);
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL))) > 0.0)
        return 0;
      if (++v22 == 8)
        goto LABEL_31;
    }
  }
  if (a12 <= a4)
    return 0;
LABEL_31:
  if (!a10)
    return 1;
  v33 = a9;
  result = 1;
  do
  {
    v35 = 0;
    while (1)
    {
      v36 = (int8x16_t)vmulq_f32(*v33, (float32x4_t)v38[v35]);
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL))) <= 0.0)
        break;
      if (++v35 == 8)
        return 0;
    }
    ++v33;
  }
  while (v33 != &a9[a10]);
  return result;
}

void re::SFBSystemShellStencilBlurMeshNode::execute(const char **this, re::RenderGraphContext *a2)
{
  float32x2_t *v2;
  uint64_t v3;
  unint64_t var1;
  uint64_t v6;
  StringID *v7;
  re::StringID *v8;
  __int128 v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  size_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  double v43;
  double v44;
  float32x4_t v45;
  double v46;
  float32x4_t v47;
  float32x4_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t i;
  __int8 v54;
  __int8 v55;
  __int8 v56;
  int v57;
  __int8 v58;
  uint64_t (**v59)();
  const char **RenderGraphDataPipe;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  _QWORD *v78;
  float32x4_t *v79;
  uint64_t v80;
  re::DrawTable *v81;
  uint64_t (***v82)();
  re *DrawCallsFromMeshParts;
  uint64_t v84;
  uint64_t v85;
  re::DrawCallRecorderGroup *v86;
  re::DrawCallRecorderGroup *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  unint64_t j;
  uint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  float32x4_t *v107;
  uint64_t v108;
  uint64_t v109;
  float32x4_t *v110;
  uint64_t v111;
  float32x4_t *v112;
  float32x4_t *v113;
  double v114;
  double v115;
  double v116;
  float32x4_t v117;
  _anonymous_namespace_ *v118;
  int v119;
  int v120;
  unint64_t v121;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t *v130;
  _OWORD *v131;
  _OWORD *v132;
  float32x4_t *v133;
  float32x4_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  re::DrawTable *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v149;
  uint64_t v150;
  re::Allocator *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float32x2_t v156;
  unint64_t v157;
  char *v158;
  _anonymous_namespace_ *v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  unint64_t v167;
  const char **v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float32x4_t *v172;
  unint64_t v173;
  uint64_t *v174;
  _BYTE *v175;
  unsigned __int8 v176;
  uint64_t v177;
  uint64_t v178;
  float32x4_t *v179;
  float32x4_t *v180;
  __int8 *v181;
  float32x4_t *v182;
  float32x4_t *v183;
  uint64_t v184;
  float32x4_t *v185;
  unsigned __int8 *v186;
  BOOL v187;
  uint64_t v188;
  uint64_t *v189;
  __n128 v190;
  uint64_t v191;
  __n128 v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  const char *v196;
  const char *v197;
  const char *v198;
  const char *v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  re::DrawTable *v208;
  uint64_t *v209;
  uint64_t v210;
  void *v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  int v216;
  StringID *v217;
  __int128 *v218;
  uint64_t *v219;
  uint64_t v220;
  StringID *v221;
  StringID *v222;
  const char **v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  float32x4_t v229;
  float32x4_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  re::Allocator *v235;
  re::Allocator *v236;
  re::Allocator *v237;
  uint64_t v238;
  re::SFBSystemShellStencilBlurMeshNode *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  float32x4_t *v244;
  float32x4_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  __int16 v250;
  __int16 v251;
  __int128 v252;
  char v253;
  __int128 v254;
  __int128 v255;
  char v256;
  uint64_t v257;
  char v258;
  __int128 v259;
  __int128 v260;
  int v261;
  uint64_t v262;
  __int16 v263;
  uint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  int v267;
  uint64_t v268;
  _QWORD v269[2];
  unint64_t v270;
  uint64_t v271;
  _QWORD v272[2];
  unint64_t v273;
  uint64_t v274;
  _QWORD v275[2];
  unint64_t v276;
  uint64_t v277;
  _OWORD v278[4];
  uint64_t v279;
  unint64_t v280;
  int v281;
  _QWORD v282[6];
  uint64_t v283;
  int v284;
  _QWORD v285[30];
  unint64_t v286;
  int v287;
  _QWORD v288[3];
  unint64_t v289;
  int v290;
  _QWORD v291[3];
  _QWORD v292[8];
  __int16 v293;
  char v294;
  char v295;
  uint64_t v296;
  void (**v297)(re::MeshLodSelectInputData *__hidden);
  char v298;
  char v300;
  char v301;
  int v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  void (**v311)(re::MeshPassInfoData *__hidden);
  uint64_t v312;
  float32x2_t v313[2];
  float32x4_t v314;
  _OWORD v315[4];
  StringID v316;
  StringID v317;
  StringID v318;
  StringID v319;
  _QWORD v320[4];
  char v321;
  char v322;
  float32x4_t v323;
  _QWORD v324[3];
  char v325;
  float32x4_t v326[2];
  float32x4_t v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  char v332;
  int v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  char v338;
  char v339;
  uint64_t v340;
  _OWORD v341[6];
  uint64_t (**v342)();
  uint64_t v343;
  uint64_t (***v344)();
  uint64_t (***v345)();
  uint64_t v346;
  uint64_t (***v347)();
  uint64_t (**v348)();
  uint64_t v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t *v353;
  _OWORD v354[2];
  int v355;
  uint64_t v356;
  char v357[8];
  _QWORD v358[4];
  unint64_t v359;
  _QWORD v360[2];
  uint64_t v361;
  int v362;
  uint64_t v363;
  char v364;
  uint64_t v365;

  var1 = (unint64_t)a2;
  v365 = *MEMORY[0x24BDAC8D0];
  v6 = re::RenderGraphDataStore::tryGet<re::BlurReprojectionState>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  {
    *(_BYTE *)(var1 + 1120) = 1;
    *(_BYTE *)(var1 + 1512) = 5;
    *(_QWORD *)&v318.var0 = 0x2476C06B76;
    v318.var1 = "VCABlur";
    v7 = &v319;
    *(_QWORD *)&v319.var0 = 5231452;
    v319.var1 = "True";
    *(_QWORD *)&v316.var0 = 0x4CB6D3AA6EABE92CLL;
    v316.var1 = "Transparent_BackCompat";
    v8 = (re::StringID *)&v317;
    *(_QWORD *)&v317.var0 = 5231452;
    v317.var1 = "True";
    re::StringID::StringID((re::StringID *)v326, &v318);
    re::StringID::StringID((re::StringID *)&v326[1], &v319);
    re::StringID::StringID((re::StringID *)&v327, &v316);
    re::StringID::StringID((re::StringID *)&v328, &v317);
    *(_QWORD *)&v9 = 0;
    *((_QWORD *)&v9 + 1) = &str_110;
    v315[3] = v9;
    v315[2] = v9;
    v315[1] = v9;
    v315[0] = v9;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *,re::RigDataTypeClass::RigDataTypeAttribute *>((uint64_t)&v348, (uint64_t *)v326, (uint64_t *)&v329, (unint64_t *)v315);
    v10 = 64;
    do
    {
      re::StringID::destroyString((re::StringID *)((char *)&v324[2] + v10));
      re::StringID::destroyString((re::StringID *)((char *)v324 + v10));
      v10 -= 32;
    }
    while (v10);
    v11 = atomic_load((unsigned __int8 *)&qword_25411EAE8);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25411EAE8))
    {
      MurmurHash3_x64_128((uint64_t)"PlattersOnly", 12, 0, (unint64_t *)v326);
      qword_25411EAE0 = (v326[0].i64[1]
                       - 0x61C8864680B583E9
                       + (v326[0].i64[0] << 6)
                       + ((unint64_t)v326[0].i64[0] >> 2)) ^ v326[0].i64[0];
      __cxa_guard_release(&qword_25411EAE8);
    }
    v12 = atomic_load((unsigned __int8 *)&qword_25411EAF8);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25411EAF8))
    {
      MurmurHash3_x64_128((uint64_t)"PlatterContentsOnly", 19, 0, (unint64_t *)v326);
      qword_25411EAF0 = (v326[0].i64[1]
                       - 0x61C8864680B583E9
                       + (v326[0].i64[0] << 6)
                       + ((unint64_t)v326[0].i64[0] >> 2)) ^ v326[0].i64[0];
      __cxa_guard_release(&qword_25411EAF8);
    }
    v13 = *(_QWORD *)(var1 + 1168);
    v14 = (unint64_t)"N2re13VCARenderDataE";
    if (((unint64_t)"N2re13VCARenderDataE" & 0x8000000000000000) != 0)
    {
      v15 = (unsigned __int8 *)((unint64_t)"N2re13VCARenderDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v16 = 5381;
      do
      {
        v14 = v16;
        v17 = *v15++;
        v16 = (33 * v16) ^ v17;
      }
      while (v17);
    }
    v326[0].i64[0] = (*(_QWORD *)(*(_QWORD *)(var1 + 40) + 48) - 0x61C8864680B583E9 + (v14 << 6) + (v14 >> 2)) ^ v14;
    v18 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v13 + 64, (uint64_t *)v326);
    if (!v18 || !*v18)
    {
      v32 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(var1 + 8) + 104));
      re::RenderGraphContext::acquireManagedRenderEncoder(v326, var1, v32, 0);
      re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v326);
LABEL_17:
      v33 = 8;
      do
      {
        re::StringID::destroyString((re::StringID *)((char *)&v314 + v33 * 8));
        re::StringID::destroyString((re::StringID *)&v313[v33]);
        v33 -= 4;
      }
      while (v33 * 8);
      re::StringID::destroyString(v8);
      re::StringID::destroyString((re::StringID *)&v316);
      re::StringID::destroyString((re::StringID *)v7);
      re::StringID::destroyString((re::StringID *)&v318);
      *(_BYTE *)(var1 + 1120) = 0;
      *(_BYTE *)(var1 + 1512) = 0;
      return;
    }
    v238 = *v18;
    v19 = re::RenderGraphDataStore::get<re::CameraData>(*(_QWORD *)(var1 + 1168), *(_QWORD *)(*(_QWORD *)(var1 + 40) + 48));
    if (*(_QWORD *)(v19 + 48))
    {
      v2 = (float32x2_t *)v19;
      v241 = v19 + 64;
      re::RenderCamera::computeLocalTransform((re::RenderCamera *)(v19 + 64), (uint64_t)v326);
      v21 = (int32x4_t)vmulq_f32(v327, v327);
      v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
      v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
      v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
      v314 = vnegq_f32(vmulq_n_f32(v327, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]));
      v24 = v2[8];
      v313[1] = v2[9];
      v313[0] = v24;
      v25 = *(_QWORD *)(*(_QWORD *)var1 + 24);
      v311 = &off_24ED821F0;
      v312 = 0;
      v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, 48, 8);
      *(_OWORD *)v26 = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
      *(_DWORD *)(v26 + 32) = 0;
      v3 = 0x7FFFFFFFLL;
      *(_QWORD *)(v26 + 36) = 0x7FFFFFFFLL;
      v235 = (re::Allocator *)v25;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(v26, v25, 3);
      v312 = v26;
      v27 = atomic_load((unsigned __int8 *)&qword_25411EB08);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_25411EB08))
      {
        MurmurHash3_x64_128((uint64_t)"RenderGraphGlobals", 18, 0, (unint64_t *)v326);
        v194 = (v326[0].i64[1] - 0x61C8864680B583E9 + (v326[0].i64[0] << 6) + ((unint64_t)v326[0].i64[0] >> 2)) ^ v326[0].i64[0];
        MurmurHash3_x64_128((uint64_t)"RenderFrame", 11, 0, (unint64_t *)v326);
        qword_25411EB00 = ((v194 << 6)
                         - 0x61C8864680B583E9
                         + (v194 >> 2)
                         + ((v326[0].i64[1]
                           - 0x61C8864680B583E9
                           + (v326[0].i64[0] << 6)
                           + ((unint64_t)v326[0].i64[0] >> 2)) ^ v326[0].i64[0])) ^ v194;
        __cxa_guard_release(&qword_25411EB08);
      }
      v239 = (re::SFBSystemShellStencilBlurMeshNode *)re::RenderGraphDataStore::get<re::RendererGlobals>(*(_QWORD *)(var1 + 1168), qword_25411EB00);
      v229.i64[1] = re::RenderGraphDataStore::get<re::SceneScope>(*(_QWORD *)(var1 + 1168), *(_QWORD *)(*(_QWORD *)(var1 + 40) + 48));
      v28 = atomic_load((unsigned __int8 *)&qword_25411EB18);
      if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_25411EB18))
      {
        MurmurHash3_x64_128((uint64_t)"DynamicFunctionConstants", 24, 0, (unint64_t *)v326);
        qword_25411EB10 = (v326[0].i64[1]
                         - 0x61C8864680B583E9
                         + (v326[0].i64[0] << 6)
                         + ((unint64_t)v326[0].i64[0] >> 2)) ^ v326[0].i64[0];
        __cxa_guard_release(&qword_25411EB18);
      }
      v29 = qword_25411EB10;
      v30 = strlen(this[4]);
      if (v30)
      {
        MurmurHash3_x64_128((uint64_t)this[4], v30, 0, (unint64_t *)v326);
        v31 = ((v326[0].i64[1] - 0x61C8864680B583E9 + (v326[0].i64[0] << 6) + ((unint64_t)v326[0].i64[0] >> 2)) ^ v326[0].i64[0])
            - 0x61C8864680B583E9;
      }
      else
      {
        v31 = 0x9E3779B97F4A7C17;
      }
      v34 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(*(_QWORD *)(var1 + 1168), ((v29 >> 2) + (v29 << 6) + v31) ^ v29);
      if (v34)
        v10 = v34 + 8;
      else
        v10 = 0;
      v35 = re::RenderGraphDataStore::get<re::MeshLodSelectInputData>(*(_QWORD *)(var1 + 1168), *(_QWORD *)(*(_QWORD *)(var1 + 40) + 48));
      v297 = &off_24ED77680;
      v298 = *(_BYTE *)(v35 + 16);
      if (*(_BYTE *)(v35 + 17))
        v300 = *(_BYTE *)(v35 + 18);
      v222 = &v319;
      v223 = this;
      v221 = &v317;
      v225 = var1;
      v301 = *(_BYTE *)(v35 + 20);
      v36 = *(_OWORD *)(v35 + 64);
      v38 = *(_OWORD *)(v35 + 32);
      v37 = *(_OWORD *)(v35 + 48);
      v306 = *(_OWORD *)(v35 + 80);
      v305 = v36;
      v303 = v38;
      v304 = v37;
      v39 = *(_OWORD *)(v35 + 128);
      v41 = *(_OWORD *)(v35 + 96);
      v40 = *(_OWORD *)(v35 + 112);
      v310 = *(_OWORD *)(v35 + 144);
      v309 = v39;
      v307 = v41;
      v308 = v40;
      if (!v301)
        v301 = 1;
      var1 = 2139095040;
      v302 = 2139095040;
      re::CameraMatrices::CameraMatrices((re::CameraMatrices *)v357, v235, v2[61].u8[2]);
      if (!v2[61].i8[2])
      {
LABEL_34:
        v292[0] = v225;
        v292[1] = v2;
        v292[2] = v357;
        v292[3] = v229.i64[1];
        v292[4] = v239;
        v292[5] = &v311;
        v292[6] = &v297;
        v292[7] = 0;
        v293 = 1;
        v294 = 1;
        v295 = 0;
        v296 = v10;
        re::RenderGraphCameraSetupNode::setupDrawCallsForCamera((uint64_t)v292, v43, v44, v45, v46, v47);
        *(_QWORD *)&v52 = 0x7F0000007FLL;
        *((_QWORD *)&v52 + 1) = 0x7F0000007FLL;
        *(int32x4_t *)(v225 + 64) = vdupq_n_s32(0x7F800000u);
        *(_OWORD *)(v225 + 80) = v52;
        v326[0].i64[0] = qword_25411EAE0;
        v239 = (re::SFBSystemShellStencilBlurMeshNode *)re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v312, (uint64_t *)v326);
        v326[0].i64[0] = qword_25411EAF0;
        v229.i64[1] = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v312, (uint64_t *)v326);
        v289 = 0;
        v290 = 0;
        re::rendergraph_helper::getOcclusionMeshPasses((uint64_t)v326);
        re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>((uint64_t)&v311, (uint64_t *)&v289, (uint64_t)v326);
        v286 = 0;
        v287 = 0;
        re::rendergraph_helper::getOpaqueMeshPasses((uint64_t)v326);
        re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>((uint64_t)&v311, (uint64_t *)&v286, (uint64_t)v326);
        v283 = 0;
        v284 = 0;
        re::rendergraph_helper::getTransparentMeshPasses(v326);
        for (i = 0; i != 168; i += 24)
        {
          v54 = v326[1].i8[i];
          v55 = v326[1].i8[i + 1];
          v56 = v326[1].i8[i + 2];
          v57 = *(__int32 *)((char *)&v326[1].i32[i / 4] + 3);
          v58 = v326[1].i8[i + 7];
          v348 = (uint64_t (**)())v326[0].i64[i / 8 + 1];
          v59 = (uint64_t (**)())re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v312, (uint64_t *)&v348);
          if (v59)
          {
            v348 = v59;
            LOBYTE(v349) = 1;
            *(_DWORD *)((char *)&v349 + 1) = v57;
            BYTE5(v349) = v54;
            BYTE6(v349) = v55;
            HIBYTE(v349) = v56;
            LOBYTE(v350) = v58;
            re::DynamicInlineArray<re::FilteredMeshPass,10ul>::add((uint64_t)&v283, (uint64_t)&v348);
          }
        }
        v10 = v283;
        if (v229.i64[1])
        {
          v326[0].i64[0] = v229.i64[1];
          v326[0].i8[8] = 1;
          *(uint64_t *)((char *)&v326[0].i64[1] + 1) = 0xFF0003030303;
          re::DynamicInlineArray<re::FilteredMeshPass,10ul>::add((uint64_t)&v283, (uint64_t)v326);
        }
        v280 = 0;
        v281 = 0;
        var1 = v225;
        RenderGraphDataPipe = (const char **)re::RenderGraphDataStore::tryGet<re::SceneScope>(*(_QWORD *)(v225 + 1168), *(_QWORD *)(*(_QWORD *)(v225 + 40) + 48));
        v8 = (re::StringID *)&v317;
        v7 = &v319;
        if (RenderGraphDataPipe
          && (RenderGraphDataPipe = (const char **)re::RenderGraphContext::tryGetRenderGraphDataPipe((re::RenderGraphContext *)v225, RenderGraphDataPipe[1])) != 0)
        {
          RenderGraphDataPipe = (const char **)(*((uint64_t (**)(const char **))*RenderGraphDataPipe + 105))(RenderGraphDataPipe);
          v226 = (uint64_t)RenderGraphDataPipe;
        }
        else
        {
          v226 = 0;
        }
        v62 = v238;
        this = (const char **)v239;
        if (!*(_BYTE *)(v225 + 1332))
        {
          v63 = 0;
          if (!v239)
          {
LABEL_52:
            if (!*(_QWORD *)(v226 + 40))
            {
LABEL_225:
              v78 = 0;
              v224 = 0;
              goto LABEL_226;
            }
            HIDWORD(v215) = v10;
            v65 = v280;
LABEL_54:
            v66 = v282;
            v67 = v62 + 8;
            v68 = re::globalAllocators((re *)RenderGraphDataPipe)[2];
            v348 = &off_24ED81F58;
            v349 = v67;
            v352 = v68;
            v353 = (uint64_t *)&v348;
            v326[0].i64[0] = 0;
            v326[0].i64[1] = (uint64_t)&v318;
            v326[1] = (float32x4_t)1uLL;
            v327.i64[0] = 0;
            *((_QWORD *)&v329 + 1) = v68;
            *(_QWORD *)&v330 = 0;
            re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::operator=<32ul>((uint64_t)&v327.i64[1], (uint64_t)&v348);
            WORD4(v330) = 1;
            BYTE12(v330) = 0;
            *(_QWORD *)&v278[0] = v282;
            *((_QWORD *)&v278[0] + 1) = v65;
            re::RenderGraphMeshNodeBase::depthSort((re *)2, v278, var1, (uint64_t)&v245, (uint64_t)v63, (uint64_t)v326, v235, v69, v70, v71, v72, v73, v74, v75, v76, v77, v195, (int)v197, SHIDWORD(v197),
              (uint64_t)v199,
              v201,
              v203,
              v205,
              v207,
              (uint64_t)v208,
              (uint64_t)v209,
              v210,
              v211,
              v213,
              v215,
              v216,
              v218,
              v220,
              *((float *)&v220 + 1),
              *(float *)&v221,
              HIDWORD(v221),
              *(float *)&v222,
              SHIDWORD(v222),
              (__int16)v223,
              SBYTE2(v223),
              SBYTE3(v223),
              SBYTE4(v223),
              SBYTE5(v223),
              SBYTE6(v223),
              SHIBYTE(v223),
              v224,
              SBYTE1(v224),
              SBYTE2(v224),
              SBYTE3(v224),
              SBYTE4(v224),
              v225,
              SBYTE4(v225),
              BYTE5(v225),
              SBYTE6(v225),
              SHIBYTE(v225),
              v226,
              SHIDWORD(v226),
              v227,
              v229,
              (uint64_t)v235,
              (uint64_t (**)())v238,
              *(float *)&v239,
              v241);
            v78 = (_QWORD *)v245.i64[0];
            v79 = (float32x4_t *)v246;
            v245 = 0uLL;
            v246 = 0;
            v224 = v248;
            v248 = 0;
            LODWORD(v247) = v247 + 1;
            if ((_QWORD)v330)
            {
              (**(void (***)(_QWORD))v330)(v330);
              if ((unsigned __int32 *)v330 != &v327.u32[2])
                (*(void (**)(_QWORD))(**((_QWORD **)&v329 + 1) + 40))(*((_QWORD *)&v329 + 1));
            }
            if (v353)
            {
              (*(void (**)(uint64_t *))*v353)(v353);
              if (v353 != (uint64_t *)&v348)
                (*(void (**)(uint64_t))(*(_QWORD *)v352 + 40))(v352);
            }
            if (v79)
            {
              v279 = 0;
              memset(v278, 0, sizeof(v278));
              re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)var1, (uint64_t *)v278);
              v348 = (uint64_t (**)())v236;
              LODWORD(v349) = 0;
              v350 = 0;
              v351 = 0;
              v355 = 0;
              memset(v354, 0, sizeof(v354));
              v209 = (uint64_t *)v354;
              v356 = 0x7FFFFFFFLL;
              v80 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v236 + 32))(v236, 328, 8);
              v81 = re::DrawTable::DrawTable((re::DrawTable *)v80, v236, ((unint64_t)&v79[7].u64[1] + 7) >> 7);
              LODWORD(v342) = 0;
              v343 = (uint64_t)v81;
              v344 = (uint64_t (***)())v238;
              v345 = &v348;
              if (!*((_BYTE *)v81 + 320))
                (**(void (***)(uint64_t))(v80 + 280))(v80 + 280);
              v82 = &v342;
              *(_QWORD *)(v80 + 280) = &off_24ED82080;
              *(_QWORD *)(v80 + 288) = &v342;
              *(_BYTE *)(v80 + 320) = 0;
              v323.i64[0] = (uint64_t)v282;
              v323.i64[1] = v280;
              DrawCallsFromMeshParts = (re *)re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts((uint64_t *)&v323, v224, (unint64_t)v79, (float32x4_t *)var1, v80, v361, (uint64_t)v357, 0, (uint64_t)v63);
              if (!*(_QWORD *)(v80 + 40))
                goto LABEL_66;
              re::DrawTableSlice::DrawTableSlice(v326, v80);
              v84 = 0;
              v245.i64[0] = (uint64_t)"StencilBlurSetStencil";
              v245.i64[1] = (uint64_t)v326;
              v246 = v359;
              v247 = v363;
              v248 = 0;
              v249 = v364;
              v250 = 2;
              v251 = 256;
              v252 = __const__ZN2re20FeatureStencilStates18getStencilBlurInfoENS0_16StencilBlurUsageE_kWriteStInfo;
              v253 = 0;
              v254 = 0u;
              v255 = 0u;
              v256 = 0;
              if (*(_BYTE *)(var1 + 1332))
                goto LABEL_242;
              while (1)
              {
                v257 = v84;
                v258 = 0;
                DrawCallsFromMeshParts = (re *)re::RenderGraphContext::encodeDrawCalls(var1, v278, &v245);
LABEL_66:
                v85 = re::globalAllocators(DrawCallsFromMeshParts)[2];
                v342 = &off_24ED81FC0;
                v343 = v238;
                v346 = v85;
                v344 = &v348;
                v347 = v82;
                v210 = (uint64_t)v78;
                if (*(_BYTE *)(var1 + 1332))
                  goto LABEL_238;
                v240 = 0;
                v86 = 0;
                v87 = 0;
LABEL_68:
                v88 = v289;
                memset(v326, 0, 24);
                v326[1].i64[1] = (uint64_t)&v318;
                v327.i64[0] = 1;
                *((_QWORD *)&v329 + 1) = v346;
                *(_QWORD *)&v330 = 0;
                re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::operator=<32ul>((uint64_t)&v327.i64[1], (uint64_t)&v342);
                WORD4(v330) = 0;
                BYTE12(v330) = 0;
                v245.i64[0] = (uint64_t)v291;
                v245.i64[1] = v88;
                v230.i64[0] = (uint64_t)v291;
                re::RenderGraphMeshNodeBase::techniqueSort(&v245, var1, (uint64_t)v275, v87, (uint64_t *)v236);
                if ((_QWORD)v330)
                {
                  (**(void (***)(_QWORD))v330)(v330);
                  if ((unsigned __int32 *)v330 != &v327.u32[2])
                    (*(void (**)(_QWORD))(**((_QWORD **)&v329 + 1) + 40))(*((_QWORD *)&v329 + 1));
                }
                v78 = v288;
                v89 = v286;
                memset(v326, 0, 24);
                v326[1].i64[1] = (uint64_t)&v318;
                v327.i64[0] = 1;
                *((_QWORD *)&v329 + 1) = v346;
                *(_QWORD *)&v330 = 0;
                re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::operator=<32ul>((uint64_t)&v327.i64[1], (uint64_t)&v342);
                WORD4(v330) = 0;
                BYTE12(v330) = 0;
                v245.i64[0] = (uint64_t)v288;
                v245.i64[1] = v89;
                v230.i64[1] = (uint64_t)v288;
                re::RenderGraphMeshNodeBase::techniqueSort(&v245, var1, (uint64_t)v272, v86, (uint64_t *)v236);
                if ((_QWORD)v330)
                {
                  (**(void (***)(_QWORD))v330)(v330);
                  if ((unsigned __int32 *)v330 != &v327.u32[2])
                    (*(void (**)(_QWORD))(**((_QWORD **)&v329 + 1) + 40))(*((_QWORD *)&v329 + 1));
                }
                v90 = v283;
                memset(v326, 0, 24);
                v326[1].i64[1] = (uint64_t)v315;
                v327.i64[0] = 2;
                *((_QWORD *)&v329 + 1) = v346;
                *(_QWORD *)&v330 = 0;
                re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::operator=<32ul>((uint64_t)&v327.i64[1], (uint64_t)&v342);
                WORD4(v330) = 768;
                BYTE12(v330) = 0;
                v245.i64[0] = (uint64_t)v285;
                v245.i64[1] = v90;
                v82 = (uint64_t (***)())v236;
                re::RenderGraphMeshNodeBase::depthSort((re *)2, &v245, var1, (uint64_t)v269, v240, (uint64_t)v326, v236, v91, v92, v93, v94, v95, v96, v97, v98, v99, (uint64_t)v196, (int)v198, SHIDWORD(v198),
                  (uint64_t)v200,
                  v202,
                  v204,
                  v206,
                  (uint64_t)v285,
                  (uint64_t)v208,
                  (uint64_t)v209,
                  v210,
                  v212,
                  v214,
                  v215,
                  (int)v217,
                  v218,
                  v220,
                  *((float *)&v220 + 1),
                  *(float *)&v221,
                  HIDWORD(v221),
                  *(float *)&v222,
                  SHIDWORD(v222),
                  (__int16)v223,
                  SBYTE2(v223),
                  SBYTE3(v223),
                  SBYTE4(v223),
                  SBYTE5(v223),
                  SBYTE6(v223),
                  SHIBYTE(v223),
                  v224,
                  SBYTE1(v224),
                  SBYTE2(v224),
                  SBYTE3(v224),
                  SBYTE4(v224),
                  v225,
                  SBYTE4(v225),
                  BYTE5(v225),
                  SBYTE6(v225),
                  SHIBYTE(v225),
                  v226,
                  SHIDWORD(v226),
                  v228,
                  v230,
                  (uint64_t)v236,
                  (uint64_t (**)())v238,
                  *(float *)&v240,
                  (uint64_t)v242);
                if ((_QWORD)v330)
                {
                  (**(void (***)(_QWORD))v330)(v330);
                  v100 = v330;
                  if ((unsigned __int32 *)v330 != &v327.u32[2])
                    (*(void (**)(_QWORD))(**((_QWORD **)&v329 + 1) + 40))(*((_QWORD *)&v329 + 1));
                }
                if (v280 > *(unsigned __int8 *)(v224 + 12 * ((_QWORD)v79 - 1) + 4))
                  break;
                v204 = *(unsigned __int8 *)(v224 + 12 * ((_QWORD)v79 - 1) + 4);
                v206 = v280;
                v200 = "operator[]";
                v202 = 381;
                v196 = "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu";
                v198 = "index < m_size";
                re::internal::assertLog((re::internal *)6, v100);
                _os_crash();
                __break(1u);
LABEL_242:
                v84 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(var1 + 1336), v223[2], "StencilBlurSetStencil");
              }
              v220 = *(_QWORD *)re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](v66[3 * *(unsigned __int8 *)(v224 + 12 * ((_QWORD)v79 - 1) + 4)], *(unsigned int *)(v224 + 12 * ((_QWORD)v79 - 1)));
              v239 = *(re::SFBSystemShellStencilBlurMeshNode **)(*(_QWORD *)(var1 + 8) + 32);
              v268 = 0;
              v265 = 0;
              v266 = 0;
              v267 = 0;
              v264 = (uint64_t *)v236;
              re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v264, 0);
              ++v267;
              v263 = 0;
              re::buildCullingFrustum((uint64_t)v242, &v2[18], v2[61].u8[2], &v263, (uint64_t)v326, v101, v102);
              v245.i64[0] = 0;
              v245.i32[2] = 0;
              re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(&v245, (uint64_t *)v326);
              if (v226)
              {
                v243 = *(_QWORD *)(v226 + 40);
                if (v243)
                {
                  for (j = 0; j != v243; ++j)
                  {
                    v104 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v226, j);
                    v105 = *(_QWORD *)(v104 + 16);
                    if (v105)
                    {
                      v106 = *(float32x4_t **)(v104 + 32);
                      v107 = &v106[46 * v105];
                      do
                      {
                        if (v106[42].i8[0])
                        {
                          re::computeMeshSceneBoundingBox(v106 + 2, (uint64_t)v239, &v323);
                          if (re::isBoundingBoxInsidePlanesArray((uint64_t)&v323, &v245, v106 + 5))
                          {
                            v109 = *(_QWORD *)(v238 + 24);
                            if (v109)
                            {
                              v110 = *(float32x4_t **)(v238 + 40);
                              v111 = 112 * v109;
                              v112 = v110 + 6;
                              v113 = v110 + 2;
                              while (!re::isBoundingBoxInsideVCAPlanes((uint64_t)&v323, v106 + 5, 0, 0, &v106[23].i8[8], v106 + 24, v112, v108, v113, 4, v112[-6].i64[1], v112[-5].i32[0]))
                              {
                                v112 += 7;
                                v113 += 7;
                                v111 -= 112;
                                if (!v111)
                                  goto LABEL_96;
                              }
                              LOBYTE(v320[0]) = 0;
                              re::RenderGraphMeshNodeBase::computeSortDistance((uint64_t)&v323, v106 + 5, &v106[23].i8[8], (__n128 *)&v106[24], v313, &v314, 0, (uint64_t)v320, v114, v115, v116, v117);
                              v120 = v119;
                              v121 = v266 + 1;
                              if (v266 >= v265 && v265 < v121)
                              {
                                if (v264)
                                {
                                  v125 = 8;
                                  if (v265)
                                    v125 = 2 * v265;
                                  if (v125 <= v121)
                                    v126 = v266 + 1;
                                  else
                                    v126 = v125;
                                  re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v264, v126);
                                }
                                else
                                {
                                  re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v264, v121);
                                  ++v267;
                                }
                              }
                              v123 = v266;
                              v124 = v268 + 16 * v266;
                              *(_DWORD *)v124 = v120;
                              *(_QWORD *)(v124 + 8) = v106;
                              v266 = v123 + 1;
                              ++v267;
                            }
                          }
                        }
LABEL_96:
                        v106 += 46;
                      }
                      while (v106 != v107);
                    }
                  }
                }
              }
              v127 = 126 - 2 * __clz(v266);
              if (v266)
                v128 = v127;
              else
                v128 = 0;
              std::__introsort<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *,false>(v268, (float *)(v268 + 16 * v266), v128, 1);
              if (v245.i64[0])
              {
                v129 = &v246;
                v130 = &v246 + 14 * v245.i64[0];
                do
                {
                  *v129 = 0;
                  ++*((_DWORD *)v129 + 2);
                  v129 += 14;
                }
                while (v129 != v130);
              }
              if (v340)
              {
                v131 = v341;
                v132 = &v341[9 * v340];
                do
                {
                  *(_QWORD *)v131 = 0;
                  ++*((_DWORD *)v131 + 2);
                  v131 += 9;
                }
                while (v131 != v132);
              }
              var1 = v225;
              if (v326[0].i64[0])
              {
                v133 = &v326[1];
                v134 = &v326[7 * v326[0].i64[0] + 1];
                do
                {
                  v133->i64[0] = 0;
                  ++v133->i32[2];
                  v133 += 7;
                }
                while (v133 != v134);
              }
              v135 = v270;
              if (v270 <= v276)
                v135 = v276;
              if (v273 <= v135)
                v136 = v135;
              else
                v136 = v273;
              v137 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v236 + 32))(v236, 328, 8);
              v138 = re::DrawTable::DrawTable((re::DrawTable *)v137, v236, (v136 + 127) >> 7);
              v323.i64[0] = (uint64_t)&off_24ED820E8;
              v323.i64[1] = v238;
              v324[0] = v138;
              v324[1] = &v348;
              v325 = 0;
              if (v276)
              {
                re::DrawTable::clearAll((re::DrawTable *)v137);
                re::InlineFunction<40ul,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator=((_BYTE *)(v137 + 280), &v323);
                v139 = *(_BYTE *)(v225 + 1332)
                     ? re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(v225 + 1336), v223[2], "Occlusion"): 0;
                v326[0].i64[0] = v231;
                v326[0].i64[1] = v289;
                re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts((uint64_t *)v326, v277, v276, (float32x4_t *)v225, v137, v361, (uint64_t)v357, 0, v139);
                if (*(_QWORD *)(v137 + 40))
                {
                  re::DrawTableSlice::DrawTableSlice(v326, v137);
                  v245.i64[0] = (uint64_t)"Occlusion";
                  v245.i64[1] = (uint64_t)v326;
                  v246 = v359;
                  v247 = v363;
                  v248 = 0;
                  v249 = v364;
                  v250 = 2;
                  v251 = 256;
                  v252 = __const__ZN2re20FeatureStencilStates18getStencilBlurInfoENS0_16StencilBlurUsageE_kReadStInfo;
                  v253 = 0;
                  v254 = 0u;
                  v255 = 0u;
                  v256 = 0;
                  v257 = v139;
                  v258 = 0;
                  re::RenderGraphContext::encodeDrawCalls(v225, v278, &v245);
                }
              }
              if (v273)
              {
                re::DrawTable::clearAll((re::DrawTable *)v137);
                re::InlineFunction<40ul,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator=((_BYTE *)(v137 + 280), &v323);
                v140 = *(_BYTE *)(v225 + 1332)
                     ? re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(v225 + 1336), v223[2], "Opaque"): 0;
                v326[0].i64[0] = v233;
                v326[0].i64[1] = v286;
                re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts((uint64_t *)v326, v274, v273, (float32x4_t *)v225, v137, v361, (uint64_t)v357, 0, v140);
                if (*(_QWORD *)(v137 + 40))
                {
                  re::DrawTableSlice::DrawTableSlice(v326, v137);
                  v245.i64[0] = (uint64_t)"Opaque";
                  v245.i64[1] = (uint64_t)v326;
                  v246 = v359;
                  v247 = v363;
                  v248 = 0;
                  v249 = v364;
                  v250 = 2;
                  v251 = 256;
                  v252 = __const__ZN2re20FeatureStencilStates18getStencilBlurInfoENS0_16StencilBlurUsageE_kReadStInfo;
                  v253 = 0;
                  v254 = 0u;
                  v255 = 0u;
                  v256 = 0;
                  v257 = v140;
                  v258 = 0;
                  re::RenderGraphContext::encodeDrawCalls(v225, v278, &v245);
                }
              }
              v208 = (re::DrawTable *)v137;
              v245.i64[0] = (uint64_t)v236;
              v245.i32[2] = 0;
              v10 = (uint64_t)&v245;
              v246 = 0;
              LODWORD(v247) = 0;
              v63 = (uint64_t *)&v259;
              v259 = 0u;
              v260 = 0u;
              v261 = 0;
              v262 = v3;
              v141 = atomic_load((unsigned __int8 *)&qword_25411EB48);
              if ((v141 & 1) != 0)
                goto LABEL_135;
              goto LABEL_255;
            }
LABEL_226:
            v193 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(var1 + 8) + 104));
            re::RenderGraphContext::acquireManagedRenderEncoder(v326, var1, v193, 0);
            re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v326);
LABEL_227:
            if (v78 && v224)
              (*(void (**)(_QWORD *, uint64_t, __n128))(*v78 + 40))(v78, v224, v192);
            if (v360[0])
            {
              if (v363)
                (*(void (**)(__n128))(*(_QWORD *)v360[0] + 40))(v192);
              v363 = 0;
              v360[1] = 0;
              v361 = 0;
              v360[0] = 0;
              ++v362;
            }
            if (v358[0] && v359)
              (*(void (**)(__n128))(*(_QWORD *)v358[0] + 40))(v192);
            goto LABEL_17;
          }
LABEL_46:
          if (v280 >= 2)
          {
            re::internal::assertLog((re::internal *)4, v61, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
            _os_crash();
            __break(1u);
LABEL_255:
            if (__cxa_guard_acquire(&qword_25411EB48))
            {
              MurmurHash3_x64_128((uint64_t)"PlattersOnly", 12, 0, (unint64_t *)v326);
              qword_25411EB40 = (v326[0].i64[1]
                               - 0x61C8864680B583E9
                               + (v326[0].i64[0] << 6)
                               + ((unint64_t)v326[0].i64[0] >> 2)) ^ v326[0].i64[0];
              __cxa_guard_release(&qword_25411EB48);
            }
LABEL_135:
            v212 = *(void **)(v226 + 40);
            if (v212)
            {
              v142 = 0;
              v143 = (_QWORD *)(v10 + 16);
              v144 = *(_QWORD *)(*(_QWORD *)(var1 + 8) + 32);
              *((_QWORD *)&v228 + 1) = v144 + 8;
              v232 = v144 + 72;
              v79 = &v245;
              v8 = (re::StringID *)&v328;
              __asm { FMOV            V8.2S, #1.0 }
              *(_QWORD *)&v228 = v10 + 16;
              while (1)
              {
                v214 = v142;
                v149 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v226, v142);
                v150 = *(_QWORD *)(v149 + 16);
                if (v150)
                  break;
LABEL_170:
                v142 = v214 + 1;
                var1 = v225;
                if ((void *)(v214 + 1) == v212)
                  goto LABEL_171;
              }
              v7 = *(StringID **)(v149 + 32);
              v217 = &v7[46 * v150];
              while (!v7[2].var1)
              {
LABEL_169:
                v7 += 46;
                if (v7 == v217)
                  goto LABEL_170;
              }
              v151 = 0;
              v66 = *(_QWORD **)&v7[9].var0;
              var1 = (unint64_t)v7[9].var1;
              v242 = (uint64_t *)&v7[1];
              while (1)
              {
                v236 = v151;
                v152 = re::DataArray<re::MeshInstance>::get(v232, *(_QWORD *)(*(_QWORD *)&v7[2].var0 + 8 * (_QWORD)v151));
                v153 = re::DataArray<re::MeshModel>::get(*((uint64_t *)&v228 + 1), *(_QWORD *)(v152 + 16));
                if (*(_QWORD *)(v153 + 56))
                  break;
LABEL_168:
                v151 = (re::Allocator *)((char *)v236 + 1);
                if ((char *)((unint64_t)v236 + 1) >= v7[2].var1)
                  goto LABEL_169;
              }
              v2 = (float32x2_t *)v153;
              v155 = 0;
              while (1)
              {
                v156 = v2[8];
                v333 = 0;
                v334 = 0;
                v335 = 0;
                memset(v326, 0, sizeof(v326));
                v327.i8[0] = 0;
                v328 = 0u;
                v329 = 0u;
                v330 = 0u;
                v331 = 0u;
                v332 = 0;
                v336 = _D8;
                v337 = 1065353216;
                v338 = 0;
                v339 = 0;
                v157 = *(unsigned __int16 *)(*(_QWORD *)&v156 + 560 * v155 + 474);
                if (var1 <= v157)
                {
                  re::internal::assertLog((re::internal *)6, v154, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v157, var1);
                  _os_crash();
                  __break(1u);
LABEL_224:
                  re::internal::assertLog((re::internal *)6, v154, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
                  _os_crash();
                  __break(1u);
                  goto LABEL_225;
                }
                v158 = v7[17].var1;
                v327.i64[1] = v66[v157];
                *((_QWORD *)&v329 + 1) = v158;
                v159 = (_anonymous_namespace_ *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v326, qword_25411EB40);
                if (!v154)
                  goto LABEL_224;
                if (*(_DWORD *)v159 != -1)
                {
                  if (HIDWORD(v260))
                    goto LABEL_147;
                  if (v246)
                  {
                    v160 = 0;
                    while (*(uint64_t *)((char *)&v248 + v160) != *v242)
                    {
                      v160 += 8;
                      if (8 * v246 == v160)
                        goto LABEL_154;
                    }
                    if (v160 != 8 * v246)
                      goto LABEL_158;
LABEL_154:
                    if (v246 > 0xF)
                    {
                      v163 = (uint64_t *)v245.i64[0];
                      if (!v245.i64[0])
                      {
                      }
                      if (!(_QWORD)v259)
                        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v63, (uint64_t)v163, 32);
                      v164 = (uint64_t)v63;
                      if (v246)
                      {
                        v165 = 8 * v246;
                        v166 = &v248;
                        do
                        {
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v164, v166++);
                          v165 -= 8;
                        }
                        while (v165);
                      }
                      v246 = 0;
                      LODWORD(v247) = v247 + 1;
                      v63 = (uint64_t *)v164;
                      v143 = (_QWORD *)v228;
LABEL_147:
                      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v63, v242);
                      goto LABEL_158;
                    }
                  }
                  v161 = re::DynamicInlineArray<unsigned long long,16ul>::ensureCapacity(v143, v154);
                  v162 = v246;
                  if (v161)
                  {
                    *(&v248 + v246) = *v242;
                    v246 = ++v162;
                    LODWORD(v247) = v247 + 1;
                  }
                  if (!v162)
                  {
                    v204 = -1;
                    v206 = 0;
                    v200 = "operator[]";
                    v202 = 381;
                    v196 = "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu";
                    v198 = "index < m_size";
                    re::internal::assertLog((re::internal *)6, v154);
                    _os_crash();
                    __break(1u);
LABEL_238:
                    v87 = (re::DrawCallRecorderGroup *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(var1 + 1336), v223[2], "Occlusion");
                    if (*(_BYTE *)(var1 + 1332))
                    {
                      v86 = (re::DrawCallRecorderGroup *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(var1 + 1336), v223[2], "Opaque");
                      if (*(_BYTE *)(v225 + 1332))
                        v240 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(var1 + 1336), v223[2], "Transparent");
                      else
                        v240 = 0;
                    }
                    else
                    {
                      v240 = 0;
                      v86 = 0;
                    }
                    var1 = v225;
                    goto LABEL_68;
                  }
                }
LABEL_158:
                if ((unint64_t)++v155 >= *(_QWORD *)&v2[7])
                  goto LABEL_168;
              }
            }
LABEL_171:
            v219 = v63;
            v167 = v266;
            v168 = v223;
            v169 = v220;
            if (v266)
            {
              v170 = 0;
              v171 = v268;
              v234 = v268;
              v237 = (re::Allocator *)v266;
              do
              {
                v172 = *(float32x4_t **)(v171 + 16 * v170 + 8);
                v174 = (uint64_t *)&v172[1];
                v173 = v172[1].u64[0];
                if (v173 != v169)
                {
                  if (!v175 || (v176 = *v175 + 1, *v175 == 0xFE))
                  {
                    re::computeMeshSceneBoundingBox(v172 + 2, (uint64_t)v239, v326);
                    v178 = *(_QWORD *)(v238 + 24);
                    v244 = v172;
                    if (v178)
                    {
                      v179 = *(float32x4_t **)(v238 + 40);
                      v180 = v172 + 5;
                      v181 = &v172[23].i8[8];
                      v182 = v172 + 24;
                      v183 = v179 + 6;
                      v184 = 112 * v178;
                      v185 = v179 + 2;
                      v176 = -1;
                      do
                      {
                        if (re::isBoundingBoxInsideVCAPlanes((uint64_t)v326, v180, 0, 0, v181, v182, v183, v177, v185, 4, v183[-6].i64[1], v183[-5].i32[0]))
                        {
                          if (v186)
                          {
                            if (v176 >= *v186)
                              v176 = *v186;
                          }
                        }
                        v183 += 7;
                        v185 += 7;
                        v184 -= 112;
                      }
                      while (v184);
                    }
                    else
                    {
                      v176 = -1;
                    }
                    var1 = v225;
                    v168 = v223;
                    v169 = v220;
                    v171 = v234;
                    v167 = (unint64_t)v237;
                    v172 = v244;
                  }
                  if (HIDWORD(v260))
                  {
                    v187 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)v219, v174);
                  }
                  else
                  {
                    if (v246)
                    {
                      v188 = 8 * v246;
                      v189 = &v248;
                      while (*v189 != *v174)
                      {
                        ++v189;
                        v188 -= 8;
                        if (!v188)
                          goto LABEL_192;
                      }
                    }
                    else
                    {
LABEL_192:
                      v189 = &v248 + v246;
                    }
                    v187 = v189 != &v248 + v246;
                  }
                  v326[0] = (float32x4_t)0x1000001uLL;
                  v326[0].i8[2] = v187;
                  v326[1].i64[0] = 127;
                  v326[1].i8[1] = v176;
                  re::StencilPtInjectionNode::executeForPortal((unint64_t)v172, (float32x4_t *)var1, (uint64_t)v239, (uint64_t)v168[2], (char *)v168[3], (unint64_t)v168[4], (uint64_t)v326);
                }
                ++v170;
              }
              while (v170 != v167);
            }
            if ((_QWORD)v259)
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v219);
            LODWORD(v247) = v247 + 1;
            v246 = 0;
            v245.i64[0] = 0;
            v190.n128_f64[0] = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v219);
            v8 = (re::StringID *)v221;
            v7 = v222;
            v78 = (_QWORD *)v210;
            if (v270)
            {
              re::DrawTable::clearAll(v208);
              v320[0] = &off_24ED82140;
              v320[1] = v238;
              v320[2] = &v348;
              v320[3] = v208;
              v321 = BYTE4(v215);
              v322 = 0;
              re::InlineFunction<40ul,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator=((_BYTE *)v208 + 280, v320);
              if (*(_BYTE *)(var1 + 1332))
                v191 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(var1 + 1336), v168[2], "Transparent");
              else
                v191 = 0;
              v326[0].i64[0] = v207;
              v326[0].i64[1] = v283;
              re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts((uint64_t *)v326, v271, v270, (float32x4_t *)var1, (uint64_t)v208, v361, (uint64_t)v357, 0, v191);
              if (*((_QWORD *)v208 + 5))
              {
                re::DrawTableSlice::DrawTableSlice(v326, (uint64_t)v208);
                v245.i64[0] = (uint64_t)"Transparent";
                v245.i64[1] = (uint64_t)v326;
                v246 = v359;
                v247 = v363;
                v248 = 0;
                v249 = v364;
                v250 = 2;
                v251 = 256;
                v252 = __const__ZN2re20FeatureStencilStates18getStencilBlurInfoENS0_16StencilBlurUsageE_kReadStInfo;
                v253 = 0;
                v254 = 0u;
                v255 = 0u;
                v256 = 0;
                v257 = v191;
                v258 = 0;
                re::RenderGraphContext::encodeDrawCalls(var1, v278, &v245);
              }
              if (!v322)
                (*(void (**)(_QWORD *))v320[0])(v320);
            }
            if (!v325)
              (*(void (**)(float32x4_t *, __n128))v323.i64[0])(&v323, v190);
            if (v264 && v268)
              (*(void (**)(__n128))(*v264 + 40))(v190);
            if (v269[0] && v271)
              (*(void (**)(__n128))(*(_QWORD *)v269[0] + 40))(v190);
            if (v272[0] && v274)
              (*(void (**)(__n128))(*(_QWORD *)v272[0] + 40))(v190);
            if (v275[0] && v277)
              (*(void (**)(__n128))(*(_QWORD *)v275[0] + 40))(v190);
            if (v347)
            {
              ((void (*)(uint64_t (***)(), __n128))**v347)(v347, v190);
              if (v347 != &v342)
                (*(void (**)(uint64_t))(*(_QWORD *)v346 + 40))(v346);
            }
            v350 = 0;
            ++v351;
            re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v209);
            v348 = 0;
            LODWORD(v349) = 0;
            v192.n128_f64[0] = re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v209);
            goto LABEL_227;
          }
          HIDWORD(v215) = v10;
          v64 = &v280 + 3 * v280;
          v64[2] = (unint64_t)this;
          *((_BYTE *)v64 + 24) = 0;
          *(_DWORD *)((char *)v64 + 29) = 65280;
          v65 = ++v280;
          ++v281;
          goto LABEL_54;
        }
LABEL_51:
        RenderGraphDataPipe = (const char **)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(var1 + 1336), v223[2], "BlurPlatterMeshDraw");
        v62 = v238;
        v63 = (uint64_t *)RenderGraphDataPipe;
        if (!this)
          goto LABEL_52;
        goto LABEL_46;
      }
      this = 0;
      v7 = (StringID *)&v2[18];
      v8 = (re::StringID *)v358;
      v48 = (float32x4_t *)v241;
      while (1)
      {
        v49 = (unint64_t)v2[16];
        if (v49 <= (unint64_t)this)
          break;
        re::Projection::computeMatrix4x4F((re::Projection *)v7, (uint64_t)v326);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v360, (uint64_t)v326);
        v51 = (unint64_t)v2[6];
        if (v51 <= (unint64_t)this)
          goto LABEL_49;
        re::RenderCamera::computeInverseTransform(v48, (uint64_t)v326);
        *(_QWORD *)&v43 = re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v358, (uint64_t)v326).n128_u64[0];
        this = (const char **)((char *)this + 1);
        v48 += 2;
        v7 += 4;
        if ((unint64_t)this >= v2[61].u8[2])
          goto LABEL_34;
      }
      re::internal::assertLog((re::internal *)6, v42, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, this, v49);
      _os_crash();
      __break(1u);
LABEL_49:
      re::internal::assertLog((re::internal *)6, v50, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, this, v51);
      _os_crash();
      __break(1u);
    }
    v203 = 0;
    v205 = 0;
    v199 = "operator[]";
    v201 = 389;
    v197 = "index < m_size";
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu");
    _os_crash();
    __break(1u);
    goto LABEL_51;
  }
}

BOOL `anonymous namespace'::shouldSkipBlurMaterial(uint64_t a1)
{
  _BOOL8 result;
  NSObject *v2;
  uint8_t v3[16];

  if (a1)
    return *(_BYTE *)(a1 + 8) != 0;
  v2 = *re::graphicsLogObjects(0);
  result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v3 = 0;
    _os_log_error_impl(&dword_224FE9000, v2, OS_LOG_TYPE_ERROR, "BlurReprojectionState was not set.", v3, 2u);
    return 0;
  }
  return result;
}

uint64_t re::rendergraph_helper::populateMeshPassArray<1ul,re::FixedInlineArray<re::rendergraph_helper::RenderPass,1ul>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v4;
  char v5;
  char v6;
  int v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v4 = *(_BYTE *)(a3 + 16);
  v5 = *(_BYTE *)(a3 + 17);
  v6 = *(_BYTE *)(a3 + 18);
  v7 = *(_DWORD *)(a3 + 19);
  v8 = *(_BYTE *)(a3 + 23);
  v10 = *(_QWORD *)(a3 + 8);
  result = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(_QWORD *)(a1 + 8), &v10);
  if (result)
  {
    v10 = result;
    v11 = 1;
    v12 = v7;
    v13 = v4;
    v14 = v5;
    v15 = v6;
    v16 = v8;
    return re::DynamicInlineArray<re::FilteredMeshPass,1ul>::add(a2, (uint64_t)&v10);
  }
  return result;
}

uint64_t re::DynamicInlineArray<re::FilteredMeshPass,10ul>::add(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result >= 0xAuLL)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v3 = result + 16;
    v4 = result + 16 + 24 * v2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v5 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(v4 + 8) = v5;
    if (v5)
      *(_DWORD *)(v3 + 24 * v2 + 9) = *(_DWORD *)(a2 + 9);
    *(_DWORD *)(v3 + 24 * v2 + 13) = *(_DWORD *)(a2 + 13);
    ++*(_QWORD *)result;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t re::RenderGraphContext::tryGetRenderGraphDataPipe(re::RenderGraphContext *this, const char *__s)
{
  const char *v4;
  unint64_t v6[3];

  v6[2] = *MEMORY[0x24BDAC8D0];
  v4 = (const char *)strlen(__s);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)__s, (int)v4, 0, v6);
    v4 = (const char *)((v6[1] + (v6[0] << 6) + (v6[0] >> 2) - 0x61C8864680B583E9) ^ v6[0]);
  }
  return re::RenderGraphContext::tryGetRenderGraphDataPipe(this, v4);
}

_BYTE *re::DrawTable::clearAll(re::DrawTable *this)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  unint64_t j;
  uint64_t v6;
  unint64_t k;
  uint64_t v8;
  unint64_t m;
  uint64_t v10;
  unint64_t n;
  _BYTE *result;
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::DrawCall,128ul>::operator[]((uint64_t)this, i);
  }
  *((_QWORD *)this + 5) = 0;
  ++*((_DWORD *)this + 12);
  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    for (j = 0; j != v4; ++j)
      re::BucketArray<re::Matrix4x4<float>,128ul>::operator[]((uint64_t)this + 56, j);
  }
  *((_QWORD *)this + 12) = 0;
  ++*((_DWORD *)this + 26);
  v6 = *((_QWORD *)this + 19);
  if (v6)
  {
    for (k = 0; k != v6; ++k)
      re::BucketArray<re::ConstantTable const*,128ul>::operator[]((uint64_t)this + 112, k);
  }
  *((_QWORD *)this + 19) = 0;
  ++*((_DWORD *)this + 40);
  v8 = *((_QWORD *)this + 26);
  if (v8)
  {
    for (m = 0; m != v8; ++m)
      re::BucketArray<unsigned int,128ul>::operator[]((uint64_t)this + 168, m);
  }
  *((_QWORD *)this + 26) = 0;
  ++*((_DWORD *)this + 54);
  v10 = *((_QWORD *)this + 33);
  if (v10)
  {
    for (n = 0; n != v10; ++n)
      re::BucketArray<unsigned int,128ul>::operator[]((uint64_t)this + 224, n);
  }
  *((_QWORD *)this + 33) = 0;
  ++*((_DWORD *)this + 68);
  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  BYTE8(v14) = 1;
  result = re::InlineFunction<40ul,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator=((_BYTE *)this + 280, v13);
  if (!BYTE8(v14))
    return (_BYTE *)(**(uint64_t (***)(_OWORD *))&v13[0])(v13);
  return result;
}

uint64_t re::SmallHashTable<unsigned long long,re::`anonymous namespace'::SPlatterDrawInfo,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!*(_DWORD *)(a1 + 444))
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      result = a1 + 40;
      v7 = 24 * v6;
      while (*(_QWORD *)(result - 8) != a2)
      {
        result += 24;
        v7 -= 24;
        if (!v7)
          return 0;
      }
      return result;
    }
    return 0;
  }
  if (!*(_QWORD *)(a1 + 416))
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 424) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 440)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v4 = *(_QWORD *)(a1 + 432);
  if (*(_QWORD *)(v4 + 32 * v3 + 8) != a2)
  {
    while (1)
    {
      v3 = *(_DWORD *)(v4 + 32 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v4 + 32 * v3 + 8) == a2)
        return v4 + 32 * v3 + 16;
    }
    return 0;
  }
  return v4 + 32 * v3 + 16;
}

void re::allocViewportPercentsBuffer(re *this, re::RenderGraphContext *a2, const re::ViewportPercentData *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  unsigned int v12;
  unint64_t i;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  re::FrameContext::perFrameAlloc(a2, 0x20uLL, 0x10uLL, (uint64_t)&v17);
  v6 = v17;
  v8 = v18;
  v7 = v19;
  v9 = v20;
  *(_QWORD *)this = v17;
  *((_DWORD *)this + 2) = v8;
  *((_DWORD *)this + 3) = v7;
  *((_QWORD *)this + 2) = v9;
  v10 = v7 >> 4;
  if (v7 <= 0xF)
  {
LABEL_17:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, v10);
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  v11 = (_OWORD *)(v6 + v8);
  *v11 = xmmword_22610BC10;
  if (v7 <= 0x1F)
  {
LABEL_18:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, v10);
    _os_crash();
    __break(1u);
    return;
  }
  v11[1] = xmmword_22610BC10;
  if (a3)
  {
    v12 = *((unsigned __int8 *)a3 + 64);
    if (v12 >= 2)
      v12 = 2;
    if (v12)
    {
      for (i = 0; ; i = 1)
      {
        v14 = *((_QWORD *)a3 + 2);
        if (v14 <= i)
          break;
        if (i == v10)
          goto LABEL_16;
        v11[i] = *((_OWORD *)a3 + i + 2);
        v15 = i + 1;
        if (*((unsigned __int8 *)a3 + 64) >= 2u)
          v16 = 2;
        else
          v16 = *((unsigned __int8 *)a3 + 64);
        if (v15 >= v16)
          return;
      }
      re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, i, v14);
      _os_crash();
      __break(1u);
LABEL_16:
      re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, v10);
      _os_crash();
      __break(1u);
      goto LABEL_17;
    }
  }
}

uint64_t re::setViewportPercentsBuffer(re *this, id *a2, const re::mtl::ComputeCommandEncoder *a3)
{
  unsigned int v3;
  const re::ViewportPercentData *v6;
  NSObject *v7;
  uint8_t v9[8];
  unsigned int v10;
  uint64_t v11;

  v3 = a3;
  v6 = (const re::ViewportPercentData *)re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)this + 146), *(_QWORD *)(*((_QWORD *)this + 5) + 48));
  if (!v6)
  {
    v7 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "ViewportPercentsData is missing in blur pipeline. Using default values.", v9, 2u);
    }
  }
  re::allocViewportPercentsBuffer((re *)v9, *(re::RenderGraphContext **)this, v6);
  return objc_msgSend(*a2, "setBuffer:offset:atIndex:", v11, v10, v3);
}

void re::SFBSystemShellDownsampleRawNodeCompute::setupEncoder(uint64_t a1, uint64_t a2, id *a3)
{
  re::CameraStreamContext *v6;
  re::CameraStreamContext *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  __int128 v57;
  __int128 v58;
  const char *v59;
  const char *v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t buf[8];
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = (re::CameraStreamContext *)re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(*(_QWORD *)(a2 + 1168), (int)"CameraStreamContext", "RenderFrame");
  if (v6)
  {
    v7 = v6;
    v64 = a1;
    if (*(_BYTE *)(a1 + 480))
    {
      if (*((_QWORD *)v6 + 227) && *((_QWORD *)v6 + 228))
      {
        objc_msgSend(*a3, "setTexture:atIndex:");
        v8 = *((_QWORD *)v7 + 228);
LABEL_11:
        objc_msgSend(*a3, "setTexture:atIndex:", v8, 1);
LABEL_17:
        re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x410uLL, 4uLL, (uint64_t)buf);
        v14 = *(_QWORD *)buf;
        v15 = v71;
        v68 = v72;
        re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x84uLL, 4uLL, (uint64_t)buf);
        v16 = *(_QWORD *)buf;
        v17 = v71;
        v67 = v72;
        re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x30uLL, 0x10uLL, (uint64_t)buf);
        v18 = *(_QWORD *)buf;
        v66 = v71;
        v63 = v72;
        re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x50uLL, 0x10uLL, (uint64_t)buf);
        v19 = *(_QWORD *)buf;
        v20 = v71;
        v65 = v72;
        re::setViewportPercentsBuffer((re *)a2, a3, 0);
        if (*(_BYTE *)(v64 + 480))
        {
          v21 = v19 + v20;
          v22 = *((_OWORD *)v7 + 109);
          v23 = *((_OWORD *)v7 + 110);
          v24 = *((_OWORD *)v7 + 112);
          *(_OWORD *)(v21 + 32) = *((_OWORD *)v7 + 111);
          *(_OWORD *)(v21 + 48) = v24;
          *(_OWORD *)v21 = v22;
          *(_OWORD *)(v21 + 16) = v23;
          *(_DWORD *)(v21 + 64) = *((_DWORD *)v7 + 452);
          v26 = v67;
          v25 = v68;
          v27 = v15;
          v28 = v63;
          v30 = v65;
          v29 = v66;
          v31 = v17;
        }
        else
        {
          v32 = atomic_load((unsigned __int8 *)&qword_25411EB28);
          if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_25411EB28))
          {
            qword_25411EB20 = re::getCombinedScopeHash((re *)"CameraTMData", v59, v60);
            __cxa_guard_release(&qword_25411EB28);
          }
          v33 = *(_QWORD *)(a2 + 1168);
          v34 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE";
          v27 = v15;
          v31 = v17;
          if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE" & 0x8000000000000000) != 0)
          {
            v35 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
            v36 = 5381;
            do
            {
              v34 = v36;
              v37 = *v35++;
              v36 = (33 * v36) ^ v37;
            }
            while (v37);
          }
          *(_QWORD *)buf = (qword_25411EB20 + (v34 << 6) + (v34 >> 2) - 0x61C8864680B583E9) ^ v34;
          v38 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v33 + 16, (uint64_t *)buf);
          v39 = v18;
          if (v38 && *(_QWORD *)v38)
            memcpy((void *)(v14 + v15), (const void *)(*(_QWORD *)v38 + 8), 0x410uLL);
          v40 = atomic_load((unsigned __int8 *)&qword_25411EB38);
          if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_25411EB38))
          {
            qword_25411EB30 = re::getCombinedScopeHash((re *)"ToneMapping", v61, v62);
            __cxa_guard_release(&qword_25411EB38);
          }
          v41 = re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(*(_QWORD *)(a2 + 1168), qword_25411EB30);
          if (v41)
          {
            v42 = v16 + v31;
            *(_OWORD *)v42 = *(_OWORD *)(v41 + 8);
            v43 = *(_OWORD *)(v41 + 24);
            v44 = *(_OWORD *)(v41 + 40);
            v45 = *(_OWORD *)(v41 + 72);
            *(_OWORD *)(v42 + 48) = *(_OWORD *)(v41 + 56);
            *(_OWORD *)(v42 + 64) = v45;
            *(_OWORD *)(v42 + 16) = v43;
            *(_OWORD *)(v42 + 32) = v44;
            v46 = *(_OWORD *)(v41 + 88);
            v47 = *(_OWORD *)(v41 + 104);
            v48 = *(_OWORD *)(v41 + 120);
            *(_DWORD *)(v42 + 128) = *(_DWORD *)(v41 + 136);
            *(_OWORD *)(v42 + 96) = v47;
            *(_OWORD *)(v42 + 112) = v48;
            *(_OWORD *)(v42 + 80) = v46;
          }
          v49 = *(_QWORD *)(a2 + 1168);
          v50 = (unint64_t)"N2re17TintConstantsDataE";
          if (((unint64_t)"N2re17TintConstantsDataE" & 0x8000000000000000) != 0)
          {
            v51 = (unsigned __int8 *)((unint64_t)"N2re17TintConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
            v52 = 5381;
            do
            {
              v50 = v52;
              v53 = *v51++;
              v52 = (33 * v52) ^ v53;
            }
            while (v53);
          }
          *(_QWORD *)buf = (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 48) - 0x61C8864680B583E9 + (v50 << 6) + (v50 >> 2)) ^ v50;
          v54 = (_QWORD *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v49 + 64, (uint64_t *)buf);
          if (v54)
          {
            v55 = (_OWORD *)*v54;
            v26 = v67;
            v25 = v68;
            v28 = v63;
            v30 = v65;
            v29 = v66;
            if (*v54)
            {
              v56 = (_OWORD *)(v39 + v66);
              v57 = v55[1];
              v58 = v55[3];
              v56[1] = v55[2];
              v56[2] = v58;
              *v56 = v57;
            }
          }
          else
          {
            v26 = v67;
            v25 = v68;
            v28 = v63;
            v30 = v65;
            v29 = v66;
          }
        }
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", v25, v27, 1);
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", v26, v31, 2);
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", v28, v29, 3);
        objc_msgSend(*a3, "setBuffer:offset:atIndex:", v30, v20, 4);
        return;
      }
    }
    else
    {
      v6 = (re::CameraStreamContext *)re::CameraStreamContext::leftMCAM(v6);
      v10 = *((_QWORD *)v6 + 25);
      if (v10)
      {
        v6 = (re::CameraStreamContext *)re::CameraStreamContext::rightMCAM(v7);
        if (*((_QWORD *)v6 + 25))
        {
          objc_msgSend(*a3, "setTexture:atIndex:", v10, 0);
          v8 = *(_QWORD *)(re::CameraStreamContext::rightMCAM(v7) + 200);
          goto LABEL_11;
        }
      }
    }
    if (++_MergedGlobals_435 % 45 == 1)
    {
      v11 = *re::graphicsLogObjects(v6);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = _MergedGlobals_435;
        _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "No passthrough textures sent to blur CameraStreamManager for %i frame(s).", buf, 8u);
      }
    }
    v12 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 224);
    v69 = 93818879;
    v13 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v12 + 1, &v69);
    (*(void (**)(uint8_t *__return_ptr, _QWORD *, _QWORD))(*v12 + 24))(buf, v12, *(unsigned __int8 *)(v12[2] + 16 * v13 + 9));
    objc_msgSend(*a3, "setTexture:atIndex:", *(_QWORD *)buf, 0);
    objc_msgSend(*a3, "setTexture:atIndex:", *(_QWORD *)buf, 1);
    if (*(_QWORD *)buf)

    goto LABEL_17;
  }
  v9 = *re::graphicsLogObjects(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Missing camera stream context.", buf, 2u);
  }
}

uint64_t re::CameraStreamContext::leftMCAM(re::CameraStreamContext *this)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (*((_DWORD *)this + 431))
  {
    v1 = 0x7FFFFFFF;
    if (*((_QWORD *)this + 212))
    {
      v2 = *(_DWORD *)(*((_QWORD *)this + 213) + 4 * (0xFDD4A52306A2329BLL % *((unsigned int *)this + 430)));
      if (v2 != 0x7FFFFFFF)
      {
        v3 = *((_QWORD *)this + 214);
        v1 = *(_DWORD *)(*((_QWORD *)this + 213) + 4 * (0xFDD4A52306A2329BLL % *((unsigned int *)this + 430)));
        if (*(_QWORD *)(v3 + 416 * v2 + 8) != 0x11844F475DLL)
        {
          while (1)
          {
            v1 = *(_DWORD *)(v3
                           + 416
                           * *(unsigned int *)(*((_QWORD *)this + 213)
                                             + 4 * (0xFDD4A52306A2329BLL % *((unsigned int *)this + 430)))) & 0x7FFFFFFF;
            if (v1 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v3 + 416 * v1 + 8) == 0x11844F475DLL)
              return *((_QWORD *)this + 214) + 416 * v1 + 16;
          }
          v1 = 0x7FFFFFFF;
        }
      }
    }
    return *((_QWORD *)this + 214) + 416 * v1 + 16;
  }
  else
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      result = (uint64_t)this + 48;
      v6 = 416 * v4;
      while (*(_QWORD *)(result - 16) != 0x11844F475DLL)
      {
        result += 416;
        v6 -= 416;
        if (!v6)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t re::CameraStreamContext::rightMCAM(re::CameraStreamContext *this)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (*((_DWORD *)this + 431))
  {
    v1 = 0x7FFFFFFF;
    if (*((_QWORD *)this + 212))
    {
      v2 = *(_DWORD *)(*((_QWORD *)this + 213) + 4 * (0x753D5688F616C780uLL % *((unsigned int *)this + 430)));
      if (v2 != 0x7FFFFFFF)
      {
        v3 = *((_QWORD *)this + 214);
        v1 = *(_DWORD *)(*((_QWORD *)this + 213) + 4 * (0x753D5688F616C780uLL % *((unsigned int *)this + 430)));
        if (*(_QWORD *)(v3 + 416 * v2 + 8) != 0x21F05F00586)
        {
          while (1)
          {
            v1 = *(_DWORD *)(v3
                           + 416
                           * *(unsigned int *)(*((_QWORD *)this + 213)
                                             + 4 * (0x753D5688F616C780uLL % *((unsigned int *)this + 430)))) & 0x7FFFFFFF;
            if (v1 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v3 + 416 * v1 + 8) == 0x21F05F00586)
              return *((_QWORD *)this + 214) + 416 * v1 + 16;
          }
          v1 = 0x7FFFFFFF;
        }
      }
    }
    return *((_QWORD *)this + 214) + 416 * v1 + 16;
  }
  else
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      result = (uint64_t)this + 48;
      v6 = 416 * v4;
      while (*(_QWORD *)(result - 16) != 0x21F05F00586)
      {
        result += 416;
        v6 -= 416;
        if (!v6)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void re::SFBSystemShellReprojectAndRectifyNode::setupEncoder(uint64_t a1, uint64_t a2, id *a3)
{
  re::CameraStreamContext *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  re *v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  __int128 v50;
  unint64_t v51;
  char v52;
  _OWORD *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  float32x4_t *v75;
  uint64_t v76;
  uint64_t v77;
  double WarpMatrixForSourceProjection;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  id v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id *v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  __int128 v115;
  _QWORD __src[34];
  simd_float4x4 v117;
  uint8_t buf[16];
  __int128 v119;
  _OWORD v120[17];
  uint64_t v121;
  char v122;
  uint64_t v123;
  simd_float4x4 v124;

  v123 = *MEMORY[0x24BDAC8D0];
  v5 = (re::CameraStreamContext *)re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(*(_QWORD *)(a2 + 1168), (int)"CameraStreamContext", "RenderFrame");
  v6 = (_QWORD *)re::RenderGraphDataStore::tryGet<re::CameraMatrices>(*(_QWORD *)(a2 + 1168), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 48));
  v7 = *(_QWORD *)(a2 + 1168);
  v8 = (unint64_t)"N2re18CameraProjFrustumsE";
  if (((unint64_t)"N2re18CameraProjFrustumsE" & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((unint64_t)"N2re18CameraProjFrustumsE" & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  *(_QWORD *)buf = (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 48) + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
  v12 = (re *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v7 + 64, (uint64_t *)buf);
  if (v12
    && (v13 = *(_QWORD *)v12) != 0
    && (*(_QWORD *)(v13 + 16) ? (v14 = v5 == 0) : (v14 = 1), !v14 ? (v15 = v6 == 0) : (v15 = 1), !v15 && v6[8]))
  {
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x180uLL, 0x10uLL, (uint64_t)buf);
    v16 = *(_QWORD *)buf;
    v17 = *(unsigned int *)&buf[8];
    v18 = *(unsigned int *)&buf[12];
    v19 = (void *)v119;
    v20 = *(unsigned int *)&buf[12] / 0xC0uLL;
    v21 = (_OWORD *)re::CameraStreamContext::leftMCAM(v5);
    if (v18 <= 0xBF)
    {
LABEL_57:
      re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, v20);
      _os_crash();
      __break(1u);
LABEL_58:
      re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, v20);
      _os_crash();
      __break(1u);
    }
    v107 = v16;
    v23 = (_OWORD *)(v16 + v17);
    v24 = v21[13];
    v25 = v21[14];
    v26 = v21[16];
    v23[2] = v21[15];
    v23[3] = v26;
    *v23 = v24;
    v23[1] = v25;
    v27 = v21[17];
    v28 = v21[18];
    v29 = v21[20];
    v23[6] = v21[19];
    v23[7] = v29;
    v23[4] = v27;
    v23[5] = v28;
    v30 = v21[21];
    v31 = v21[22];
    v32 = v21[24];
    v23[10] = v21[23];
    v23[11] = v32;
    v23[8] = v30;
    v23[9] = v31;
    v33 = (_OWORD *)re::CameraStreamContext::rightMCAM(v5);
    if (v18 <= 0x17F)
      goto LABEL_58;
    v35 = v33[13];
    v36 = v33[14];
    v37 = v33[16];
    v23[14] = v33[15];
    v23[15] = v37;
    v23[12] = v35;
    v23[13] = v36;
    v38 = v33[17];
    v39 = v33[18];
    v40 = v33[20];
    v23[18] = v33[19];
    v23[19] = v40;
    v23[16] = v38;
    v23[17] = v39;
    v41 = v33[21];
    v42 = v33[22];
    v43 = v33[24];
    v23[22] = v33[23];
    v23[23] = v43;
    v23[20] = v41;
    v23[21] = v42;
    if (*(_QWORD *)(v13 + 16))
    {
      v44 = 0;
      v45 = 1;
      while (v44 != v20)
      {
        v46 = v13 + 32 + 16 * v44;
        v47.i32[0] = *(_DWORD *)v46;
        v48 = vabs_f32(*(float32x2_t *)(v46 + 4));
        v47.i32[1] = *(_DWORD *)(v46 + 12);
        v49 = vabs_f32(v47);
        *(float32x2_t *)&v50 = vadd_f32(v48, v49);
        *((_QWORD *)&v50 + 1) = __PAIR64__(v48.u32[1], v49.u32[0]);
        v23[12 * v44 + 1] = v50;
        LOBYTE(v46) = v45 & (*(_QWORD *)(v13 + 16) > (unint64_t)(v44 + 1));
        v44 = 1;
        v45 = 0;
        if ((v46 & 1) == 0)
          goto LABEL_20;
      }
      re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v20);
      _os_crash();
      __break(1u);
      goto LABEL_56;
    }
LABEL_20:
    v108 = v18;
    v109 = v17;
    v110 = a3;
    v51 = 0;
    v52 = 1;
    v53 = (_OWORD *)MEMORY[0x24BDAEE00];
    do
    {
      v54 = v52;
      v55 = re::CameraStreamContext::camForEyeIndex(v5, v51);
      v113 = *(float32x4_t *)v55;
      v114 = *(float32x4_t *)(v55 + 16);
      v111 = *(float32x4_t *)(v55 + 48);
      v112 = *(float32x4_t *)(v55 + 32);
      v124 = __invert_f4(*(simd_float4x4 *)(v55 + 64));
      v64 = 0;
      v117 = v124;
      do
      {
        *(float32x4_t *)&buf[v64 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v113, COERCE_FLOAT(*(_OWORD *)&v117.columns[v64])), v114, *(float32x2_t *)v117.columns[v64].f32, 1), v112, (float32x4_t)v117.columns[v64], 2), v111, (float32x4_t)v117.columns[v64], 3);
        ++v64;
      }
      while (v64 != 4);
      v65 = v119;
      v66 = v120[0];
      v67 = v120[1];
      v68 = &__src[8 * v51];
      *v68 = *(_OWORD *)buf;
      v68[1] = v65;
      v68[2] = v66;
      v68[3] = v67;
      v69 = v53;
      if (v6[8] > v51)
        v69 = (_OWORD *)(v6[10] + (v51 << 6));
      v52 = 0;
      v71 = v69[2];
      v70 = v69[3];
      v72 = v69[1];
      v68[8] = *v69;
      v68[9] = v72;
      v68[10] = v71;
      v68[11] = v70;
      v51 = 1;
    }
    while ((v54 & 1) != 0);
    __src[32] = *(_QWORD *)(*(_QWORD *)a2 + 32) & 0xFFFFFFFFFFFFFFFLL;
    if (v6[3])
    {
      v73 = 0;
      v74 = v109 + v107 + 64;
      v75 = (float32x4_t *)&__src[16];
      v76 = 128;
      while (1)
      {
        v77 = v6[5] + v76;
        WarpMatrixForSourceProjection = re::createWarpMatrixForSourceProjection(*v75, v75[1], v75[2], v75[3], *(simd_float4 *)(v77 - 128), *(simd_float4 *)(v77 - 112), *(simd_float4 *)(v77 - 96), *(simd_float4 *)(v77 - 80), v56, v57, v58, v59, v60, v61, v62, v63, *v75, v75[1], v75[2],
                                          v75[3],
                                          (simd_float4)v75[-8],
                                          (simd_float4)v75[-7],
                                          (simd_float4)v75[-6],
                                          (simd_float4)v75[-5]);
        if (v20 == v73)
          break;
        *(_DWORD *)(v74 - 24) = v79;
        *(_DWORD *)(v74 - 8) = v81;
        *(double *)(v74 - 32) = WarpMatrixForSourceProjection;
        *(_QWORD *)(v74 - 16) = v80;
        *(_DWORD *)(v74 + 8) = v83;
        *(_QWORD *)v74 = v82;
        v74 += 192;
        ++v73;
        v76 += 64;
        v75 += 4;
        if (v6[3] <= v73)
          goto LABEL_30;
      }
LABEL_56:
      re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v20);
      _os_crash();
      __break(1u);
      goto LABEL_57;
    }
LABEL_30:
    v84 = v19;
    objc_msgSend(*v110, "setBuffer:offset:atIndex:", v84, v109, 0);
    v85 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 120);
    v86 = v84;
    *(_QWORD *)buf = &off_24ED82198;
    *(_QWORD *)&v119 = v86;
    *((_QWORD *)&v119 + 1) = v109 | (v108 << 32);
    memcpy(v120, __src, sizeof(v120));
    v121 = v85;
    v122 = 0;
    re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::add(a2 + 1664, buf);
    re::setViewportPercentsBuffer((re *)a2, v110, (const re::mtl::ComputeCommandEncoder *)1);
    v87 = *(_QWORD *)(a2 + 1168);
    v88 = (unint64_t)"N2re25BlurBackgroundOpacityDataE";
    if (((unint64_t)"N2re25BlurBackgroundOpacityDataE" & 0x8000000000000000) != 0)
    {
      v89 = (unsigned __int8 *)((unint64_t)"N2re25BlurBackgroundOpacityDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v90 = 5381;
      do
      {
        v88 = v90;
        v91 = *v89++;
        v90 = (33 * v90) ^ v91;
      }
      while (v91);
    }
    v117.columns[0].i64[0] = (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 48) - 0x61C8864680B583E9 + (v88 << 6) + (v88 >> 2)) ^ v88;
    v92 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v87 + 64, (uint64_t *)&v117);
    if (v92 && (v93 = *v92) != 0)
    {
      v94 = *(_DWORD *)(v93 + 8);
      v115 = *(_OWORD *)(v93 + 16);
    }
    else
    {
      v115 = 0u;
      v94 = 0;
    }
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x20uLL, 0x10uLL, (uint64_t)&v117);
    v96 = v117.columns[1].i64[0];
    v97 = v117.columns[0].i64[0] + v117.columns[0].u32[2];
    *(_DWORD *)v97 = v94;
    *(_OWORD *)(v97 + 16) = v115;
    objc_msgSend(*v110, "setBuffer:offset:atIndex:", v96);
    v98 = *(_QWORD *)(a2 + 1168);
    v99 = (unint64_t)"N2re23ImmersiveEnvDimmingDataE";
    if (((unint64_t)"N2re23ImmersiveEnvDimmingDataE" & 0x8000000000000000) != 0)
    {
      v100 = (unsigned __int8 *)((unint64_t)"N2re23ImmersiveEnvDimmingDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v101 = 5381;
      do
      {
        v99 = v101;
        v102 = *v100++;
        v101 = (33 * v101) ^ v102;
      }
      while (v102);
    }
    v117.columns[0].i64[0] = (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 48) - 0x61C8864680B583E9 + (v99 << 6) + (v99 >> 2)) ^ v99;
    v103 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v98 + 64, (uint64_t *)&v117);
    if (v103)
      v104 = *v103;
    else
      v104 = 0;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 4uLL, 4uLL, (uint64_t)&v117);
    v105 = v117.columns[1].i64[0];
    if (v104)
      v106 = *(float *)(v104 + 8);
    else
      v106 = 1.0;
    *(float *)(v117.columns[0].i64[0] + v117.columns[0].u32[2]) = v106;
    objc_msgSend(*v110, "setBuffer:offset:atIndex:", v105);
    if (!v122)
      (**(void (***)(_QWORD *))buf)(buf);
    if (v86)

    if (v84)
  }
  else
  {
    v95 = *re::graphicsLogObjects(v12);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v95, OS_LOG_TYPE_ERROR, "Camera projection frustums were not properly set. Unable to initialize encoder in SFBSystemShellReprojectAndFilterNode.", buf, 2u);
    }
  }
}

uint64_t re::CameraStreamContext::camForEyeIndex(re::CameraStreamContext *this, int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = 0x21F05F00586;
  if (!a2)
    v2 = 0x11844F475DLL;
  if (*((_DWORD *)this + 431))
  {
    LODWORD(v3) = 0x7FFFFFFF;
    if (*((_QWORD *)this + 212))
    {
      v4 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
      v5 = *(unsigned int *)(*((_QWORD *)this + 213) + 4 * ((v4 ^ (v4 >> 31)) % *((unsigned int *)this + 430)));
      if ((_DWORD)v5 != 0x7FFFFFFF)
      {
        v6 = *((_QWORD *)this + 214);
        LODWORD(v3) = v5;
        if (*(_QWORD *)(v6 + 416 * v5 + 8) != v2)
        {
          v3 = v5;
          while (1)
          {
            LODWORD(v3) = *(_DWORD *)(v6 + 416 * v3) & 0x7FFFFFFF;
            if ((_DWORD)v3 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v6 + 416 * v3 + 8) == v2)
              return *((_QWORD *)this + 214) + 416 * v3 + 16;
          }
          LODWORD(v3) = 0x7FFFFFFF;
        }
      }
    }
    return *((_QWORD *)this + 214) + 416 * v3 + 16;
  }
  else
  {
    v7 = *((_QWORD *)this + 2);
    if (v7)
    {
      result = (uint64_t)this + 48;
      v9 = 416 * v7;
      while (*(_QWORD *)(result - 16) != v2)
      {
        result += 416;
        v9 -= 416;
        if (!v9)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::setColorConstants(uint64_t a1, id *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;

  re::FrameContext::perFrameAlloc(*(re::FrameContext **)a1, 0x70uLL, 0x10uLL, (uint64_t)&v24);
  v6 = v25;
  v7 = v26;
  v8 = *(_QWORD *)(a1 + 1168);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
  v10 = (unint64_t)"N2re24ColorFilterConstantsDataE";
  if (((unint64_t)"N2re24ColorFilterConstantsDataE" & 0x8000000000000000) != 0)
  {
    v11 = (unsigned __int8 *)((unint64_t)"N2re24ColorFilterConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v12 = 5381;
    do
    {
      v10 = v12;
      v13 = *v11++;
      v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  v14 = v24;
  v24 = (v9 + (v10 << 6) + (v10 >> 2) - 0x61C8864680B583E9) ^ v10;
  v15 = (_QWORD *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v8 + 64, (uint64_t *)&v24);
  if (v15)
  {
    v16 = (_OWORD *)*v15;
    if (*v15)
    {
      v17 = (_OWORD *)(v14 + v6);
      v18 = v16[1];
      v19 = v16[3];
      v17[1] = v16[2];
      v17[2] = v19;
      *v17 = v18;
      v20 = v16[4];
      v21 = v16[5];
      v22 = v16[7];
      v17[5] = v16[6];
      v17[6] = v22;
      v17[3] = v20;
      v17[4] = v21;
    }
  }
  return objc_msgSend(*a2, "setBuffer:offset:atIndex:", v7, v6, a3);
}

uint64_t `anonymous namespace'::setGammaLUTs(re::BufferTable *a1, id *a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v9 = 0x526A495CDE0FLL;
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, &v9);
  v7 = re::BufferTable::bufferAt(a1, *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + 16 * v6 + 8));
  return objc_msgSend(*a2, "setBuffer:offset:atIndex:", *(_QWORD *)v7, *(unsigned int *)(v7 + 8), a3);
}

void re::SFBSystemShellCreateTextureAliasNode::setup(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 592) = 1;
}

void re::SFBSystemShellCreateTextureAliasNode::execute(re::SFBSystemShellCreateTextureAliasNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  id v5;

  if (!*((_BYTE *)this + 256)
  {
    if (*((_QWORD *)this + 24))
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 26), 0, 0, &v5);
      if (v5)
      {
        re::DynamicTextureTableAdd((_QWORD *)(*(_QWORD *)a2 + 368), (_QWORD *)this + 33, &v5);
        if (v5)

      }
    }
  }
}

void re::SFBSystemShellReprojectNode::setupEncoder(uint64_t a1, re *a2, id *a3)
{
  float v5;
  float v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v5 = (float)*(int *)(a1 + 484);
  v6 = (float)*(int *)(a1 + 480);
  v7 = *a3;
  v12 = v7;

  re::setViewportPercentsBuffer(a2, a3, (const re::mtl::ComputeCommandEncoder *)1);
  v8 = *a3;
  v11 = v8;

  v9 = *a3;
  v10 = v9;

}

void `anonymous namespace'::setReprojectionConstants(uint64_t a1, id *a2, float a3, float a4)
{
  re::CameraStreamContext *v8;
  uint64_t v9;
  re *v10;
  BOOL v11;
  NSObject *v13;
  re *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  float *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  _OWORD *v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  char v61;
  _OWORD *v62;
  __int128 v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  _OWORD *v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  id v79;
  id v80;
  id *v81;
  id v82;
  uint8_t buf[16];
  _OWORD v84[27];
  id v85;
  uint64_t v86;
  char v87;
  _DWORD __dst[108];
  _QWORD __src[58];

  __src[55] = *MEMORY[0x24BDAC8D0];
  v8 = (re::CameraStreamContext *)re::RenderGraphDataStore::tryGet<re::CameraStreamContext>(*(_QWORD *)(a1 + 1168), (int)"CameraStreamContext", "RenderFrame");
  v9 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*(_QWORD *)(a1 + 1168), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48));
  v10 = (re *)re::RenderGraphDataStore::tryGet<re::CameraMatrices>(*(_QWORD *)(a1 + 1168), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48));
  if (v9)
    v11 = v8 == 0;
  else
    v11 = 1;
  if (!v11 && v10 != 0)
  {
    v14 = v10;
    v15 = *(_QWORD *)(a1 + 1168);
    v16 = (unint64_t)"N2re20WorldToViewCacheDataE";
    if (((unint64_t)"N2re20WorldToViewCacheDataE" & 0x8000000000000000) != 0)
    {
      v17 = (unsigned __int8 *)((unint64_t)"N2re20WorldToViewCacheDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v18 = 5381;
      do
      {
        v16 = v18;
        v19 = *v17++;
        v18 = (33 * v18) ^ v19;
      }
      while (v19);
    }
    *(_QWORD *)buf = (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 48) + (v16 << 6) + (v16 >> 2) - 0x61C8864680B583E9) ^ v16;
    v20 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v15 + 64, (uint64_t *)buf);
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a1, 0x180uLL, 0x10uLL, (uint64_t)buf);
    v22 = *(_QWORD *)buf;
    v23 = *(unsigned int *)&buf[8];
    v24 = *(unsigned int *)&buf[12];
    v82 = *(id *)&v84[0];
    v25 = *(unsigned int *)&buf[12] / 0xC0uLL;
    v26 = (_OWORD *)re::CameraStreamContext::leftMCAM(v8);
    if (v24 <= 0xBF)
    {
LABEL_45:
      re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, v25);
      _os_crash();
      __break(1u);
    }
    else
    {
      v81 = a2;
      v28 = (float *)(v22 + v23);
      v29 = v26[13];
      v30 = v26[14];
      v31 = v26[16];
      *((_OWORD *)v28 + 2) = v26[15];
      *((_OWORD *)v28 + 3) = v31;
      *(_OWORD *)v28 = v29;
      *((_OWORD *)v28 + 1) = v30;
      v32 = v26[17];
      v33 = v26[18];
      v34 = v26[20];
      *((_OWORD *)v28 + 6) = v26[19];
      *((_OWORD *)v28 + 7) = v34;
      *((_OWORD *)v28 + 4) = v32;
      *((_OWORD *)v28 + 5) = v33;
      v35 = v26[21];
      v36 = v26[22];
      v37 = v26[24];
      *((_OWORD *)v28 + 10) = v26[23];
      *((_OWORD *)v28 + 11) = v37;
      *((_OWORD *)v28 + 8) = v35;
      *((_OWORD *)v28 + 9) = v36;
      v38 = (_OWORD *)re::CameraStreamContext::rightMCAM(v8);
      if (v24 > 0x17F)
      {
        v40 = v38[13];
        v41 = v38[14];
        v42 = v38[16];
        *((_OWORD *)v28 + 14) = v38[15];
        *((_OWORD *)v28 + 15) = v42;
        *((_OWORD *)v28 + 12) = v40;
        *((_OWORD *)v28 + 13) = v41;
        v43 = v38[17];
        v44 = v38[18];
        v45 = v38[20];
        *((_OWORD *)v28 + 18) = v38[19];
        *((_OWORD *)v28 + 19) = v45;
        *((_OWORD *)v28 + 16) = v43;
        *((_OWORD *)v28 + 17) = v44;
        v46 = v38[21];
        v47 = v38[22];
        v48 = v38[24];
        *((_OWORD *)v28 + 22) = v38[23];
        *((_OWORD *)v28 + 23) = v48;
        *((_OWORD *)v28 + 20) = v46;
        *((_OWORD *)v28 + 21) = v47;
        v49 = re::RenderGraphDataStore::tryGet<re::BlurReprojectionState>(*(_QWORD *)(a1 + 1168), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48));
        if (v49)
          v53 = *(float *)(v49 + 20);
        else
          v53 = 1.0;
        v54 = 0;
        v28[44] = v53;
        v28[92] = v53;
        memset(&__src[48], 0, 32);
        v55 = *((_QWORD *)v14 + 3);
        v56 = 1;
        v57 = (_OWORD *)MEMORY[0x24BDAEE00];
        while (1)
        {
          v58 = v21 + (v54 << 6);
          if (v21)
            v59 = (_OWORD *)(v58 + 16);
          else
            v59 = v57;
          v60 = v59[1];
          v61 = v56;
          v62 = &__src[8 * v54];
          *v62 = *v59;
          v62[1] = v60;
          v63 = v59[3];
          v62[2] = v59[2];
          v62[3] = v63;
          v64 = (_OWORD *)(v58 + 144);
          if (!v21)
            v64 = v57;
          v65 = v64[1];
          v62[8] = *v64;
          v62[9] = v65;
          v66 = v64[3];
          v62[10] = v64[2];
          v62[11] = v66;
          v67 = v57;
          if (v55 > v54)
          {
            v68 = *((_QWORD *)v14 + 8);
            if (v68 <= v54)
            {
              memset(v84, 0, 64);
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              __dst[0] = 136315906;
              *(_QWORD *)&__dst[1] = "operator[]";
              LOWORD(__dst[3]) = 1024;
              *(_DWORD *)((char *)&__dst[3] + 2) = 797;
              HIWORD(__dst[4]) = 2048;
              *(_QWORD *)&__dst[5] = v54;
              LOWORD(__dst[7]) = 2048;
              *(_QWORD *)((char *)&__dst[7] + 2) = v68;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_45;
            }
            v67 = (_OWORD *)(*((_QWORD *)v14 + 10) + (v54 << 6));
          }
          v70 = v67[2];
          v69 = v67[3];
          v71 = v67[1];
          v62[16] = *v67;
          v62[17] = v71;
          v62[18] = v70;
          v62[19] = v69;
          v72 = xmmword_22610BC10;
          if (*(_QWORD *)(v9 + 16) > v54)
            v72 = *(_OWORD *)(v9 + 32 + 16 * v54);
          v56 = 0;
          *(_OWORD *)&__src[2 * v54 + 48] = v72;
          v54 = 1;
          if ((v61 & 1) == 0)
          {
            __src[52] = __PAIR64__(LODWORD(a3), LODWORD(a4));
            if (v55)
            {
              v73 = 0;
              v74 = 0;
              do
              {
                v75 = (_OWORD *)(*((_QWORD *)v14 + 5) + v73);
                v76 = v75[1];
                v77 = v75[2];
                v78 = v75[3];
                *(_OWORD *)buf = *v75;
                v84[0] = v76;
                v84[1] = v77;
                v84[2] = v78;
                v73 += 64;
              }
              while (*((_QWORD *)v14 + 3) > v74);
            }
            v79 = v82;
            objc_msgSend(*v81, "setBuffer:offset:atIndex:", v79, v23, 0);
            memcpy(__dst, __src, 0x1A8uLL);
            v80 = v79;
            *(_QWORD *)buf = &off_24ED82018;
            memcpy(v84, __dst, sizeof(v84));
            v85 = v80;
            v86 = v23 | (v24 << 32);
            v87 = 0;
            re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::add(a1 + 1664, buf);
            if (!v87)
              (**(void (***)(_QWORD *))buf)(buf);
            if (v80)

            if (v79)
            return;
          }
        }
      }
    }
    re::internal::assertLog((re::internal *)6, v39, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, v25);
    _os_crash();
    __break(1u);
  }
  v13 = *re::graphicsLogObjects(v10);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Missing data for Reprojection Constants in blur pipeline. Unable to setup encoder.", buf, 2u);
  }
}

void re::SFBSystemShellBlurTAANode::setupEncoder(uint64_t a1, re *a2, id *a3)
{
  float v6;
  float v7;
  id v8;
  uint64_t v9;
  int32x2_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  v6 = (float)*(int *)(a1 + 488);
  v7 = (float)*(int *)(a1 + 484);
  v8 = *a3;
  v18 = v8;

  re::setViewportPercentsBuffer(a2, a3, (const re::mtl::ComputeCommandEncoder *)1);
  v9 = re::RenderGraphDataStore::tryGet<re::BlurReprojectionState>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  *(int32x2_t *)&v11 = re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 4uLL, 4uLL, (uint64_t)&v19);
  if (v21 <= 3)
  {
    re::internal::assertLog((re::internal *)6, *(_QWORD *)&v10, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
  }
  else
  {
    v12 = v22;
    v13 = 16;
    if (!*(_BYTE *)(a1 + 480))
      v13 = 12;
    *(_DWORD *)(v19 + v20) = *(_DWORD *)(v9 + v13);
    objc_msgSend(*a3, "setBuffer:offset:atIndex:", v12);
    v14 = *a3;
    v17 = v14;

    v15 = *a3;
    v16 = v15;

  }
}

void re::SFBSystemShellReprojectNode::execute(re::SFBSystemShellReprojectNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;

  v4 = re::RenderGraphDataStore::tryGet<re::BlurReprojectionState>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    re::RenderGraphComputeNodeBase::execute(this, a2);
}

BOOL re::SFBSystemShellComputeNode::skipNode(re::SFBSystemShellComputeNode *this, re::RenderGraphContext *a2)
{
  re::SFBSystemShellComputeNode *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v16;
  _BYTE v17[12];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v3 = this;
  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 24);
  v5 = 0;
  if (v4)
  {
    v6 = *((_QWORD *)this + 26);
    v7 = 32 * v4;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, v6, 0, 0, (id *)v17);
      v8 = (unint64_t)objc_msgSend(*(id *)v17, sel_protectionOptions);
      this = *(re::SFBSystemShellComputeNode **)v17;
      if (*(_QWORD *)v17)

      v5 |= v8;
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  v9 = *((_QWORD *)v3 + 29);
  if (v9)
  {
    v10 = 0;
    v11 = *((_QWORD *)v3 + 31);
    v12 = v9 << 6;
    do
    {
      re::RenderGraphContext::metalTexture((uint64_t)a2, v11, 0, 0, (id *)v17);
      v13 = (unint64_t)objc_msgSend(*(id *)v17, sel_protectionOptions);
      this = *(re::SFBSystemShellComputeNode **)v17;
      if (*(_QWORD *)v17)

      v10 |= v13;
      v11 += 64;
      v12 -= 64;
    }
    while (v12);
  }
  else
  {
    v10 = 0;
  }
  if ((v5 & ~v10) != 0)
  {
    v14 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = *((_QWORD *)v3 + 2);
      *(_DWORD *)v17 = 136315650;
      *(_QWORD *)&v17[4] = v16;
      v18 = 2048;
      v19 = v5;
      v20 = 2048;
      v21 = v10;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "[SFBSystemShellComputeNode] (%s) Mismatching protection options for input texture %llu and output texture %llu. Skipping compute for this frame.", v17, 0x20u);
    }
  }
  return (v5 & ~v10) != 0;
}

void re::SFBSystemShellTileDownsampleNode::execute(re::SFBSystemShellTileDownsampleNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;

  v4 = re::RenderGraphDataStore::tryGet<re::BlurReprojectionState>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    re::RenderGraphMRCNode::execute(this, a2);
}

id re::SFBSystemShellTileDownsampleNode::setupEncoder(re::SFBSystemShellTileDownsampleNode *this, re::RenderGraphContext *a2, id *a3)
{
  const re::ViewportPercentData *v5;
  NSObject *v6;
  uint8_t v8[8];
  unsigned int v9;
  uint64_t v10;

  v5 = (const re::ViewportPercentData *)re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (!v5)
  {
    v6 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "ViewportPercentsData is missing in blur pipeline. Using default values.", v8, 2u);
    }
  }
  re::allocViewportPercentsBuffer((re *)v8, *(re::RenderGraphContext **)a2, v5);
  return objc_msgSend(*a3, sel_setTileBuffer_offset_atIndex_, v10, v9, 0);
}

void re::SFBSystemShellComputeNode::execute(re::SFBSystemShellComputeNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;

  v4 = re::RenderGraphDataStore::tryGet<re::BlurReprojectionState>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    re::RenderGraphComputeNodeBase::execute(this, a2);
}

void re::SFBSystemShellComputeNode::~SFBSystemShellComputeNode(re::SFBSystemShellComputeNode *this)
{
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
  JUMPOUT(0x2276933B8);
}

void re::SFBSystemShellBlurTAANode::~SFBSystemShellBlurTAANode(re::SFBSystemShellBlurTAANode *this)
{
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
  JUMPOUT(0x2276933B8);
}

void re::SFBSystemShellStencilBlurMeshNode::~SFBSystemShellStencilBlurMeshNode(re::SFBSystemShellStencilBlurMeshNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::SFBSystemShellDownsampleRawNodeCompute::~SFBSystemShellDownsampleRawNodeCompute(re::SFBSystemShellDownsampleRawNodeCompute *this)
{
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
  JUMPOUT(0x2276933B8);
}

void re::SFBSystemShellReprojectAndRectifyNode::~SFBSystemShellReprojectAndRectifyNode(re::SFBSystemShellReprojectAndRectifyNode *this)
{
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
  JUMPOUT(0x2276933B8);
}

void re::SFBSystemShellReprojectNode::~SFBSystemShellReprojectNode(re::SFBSystemShellReprojectNode *this)
{
  re::RenderGraphComputeNodeBase::~RenderGraphComputeNodeBase(this);
  JUMPOUT(0x2276933B8);
}

void re::SFBSystemShellCreateTextureAliasNode::~SFBSystemShellCreateTextureAliasNode(re::SFBSystemShellCreateTextureAliasNode *this)
{
  *((_QWORD *)this + 33) = 0;
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  *((_QWORD *)this + 33) = 0;
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::SFBSystemShellTileDownsampleNode::~SFBSystemShellTileDownsampleNode(re::SFBSystemShellTileDownsampleNode *this)
{
  re::RenderGraphMRCNode::~RenderGraphMRCNode(this);
  JUMPOUT(0x2276933B8);
}

BOOL re::RenderGraphMRCNode::needsNewPipelineState(re::RenderGraphMRCNode *this, re::RenderGraphContext *a2)
{
  return *((_QWORD *)this + 49) == 0;
}

void re::MeshPassInfoData::~MeshPassInfoData(re::MeshPassInfoData *this)
{
  JUMPOUT(0x2276933B8);
}

re::CameraMatrices *re::CameraMatrices::CameraMatrices(re::CameraMatrices *this, re::Allocator *a2, unint64_t a3)
{
  *(_QWORD *)this = &off_24ED73630;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 96) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_BYTE *)this + 128) = 1;
  *((_QWORD *)this + 1) = a2;
  re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)this + 1, a3);
  ++*((_DWORD *)this + 8);
  *((_QWORD *)this + 6) = a2;
  re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)this + 6, a3);
  ++*((_DWORD *)this + 18);
  *((_BYTE *)this + 128) = a3;
  return this;
}

uint64_t re::RenderGraphContext::tryGetRenderGraphDataPipe(re::RenderGraphContext *this, const char *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t result;
  int v5;
  int v6;
  const char *v7;
  re::RenderGraphContext *v8;

  v3 = &unk_255825000;
  if ((v2 & 1) == 0)
  {
    v7 = a2;
    v8 = this;
    v3 = (_QWORD *)&unk_255825000;
    v6 = v5;
    a2 = v7;
    this = v8;
    if (v6)
    {
      re::RenderGraphContext::tryGetRenderGraphDataPipe(unsigned long)::kRenderGraphDataPipeDataScopeHash = re::hashString((re *)"RenderGraphDataPipeData", v7);
      v3 = (_QWORD *)&unk_255825000;
      a2 = v7;
      this = v8;
    }
  }
  result = re::RenderGraphDataStore::tryGet<re::RenderGraphDataPipeData>(*((_QWORD *)this + 146), (unint64_t)&a2[64 * v3[237] - 0x61C8864680B583E9 + (v3[237] >> 2)] ^ v3[237]);
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

void re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_0,BOOL ()(re::MeshPartDrawContext const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

BOOL re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_0,BOOL ()(re::MeshPartDrawContext const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(v2 + 32);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = &v3[14 * v4];
  if (v4)
  {
    v6 = 112 * v4;
    while (*v3 != *a2)
    {
      v3 += 14;
      v6 -= 112;
      if (!v6)
      {
        v3 = v5;
        return v3 != v5;
      }
    }
  }
  return v3 != v5;
}

_QWORD *re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_0,BOOL ()(re::MeshPartDrawContext const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED81F58;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_0,BOOL ()(re::MeshPartDrawContext const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED81F58;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_0,BOOL ()(re::MeshPartDrawContext const&)>::size()
{
  return 16;
}

uint64_t re::FunctionBase<32ul,BOOL ()(re::MeshPartDrawContext const&)>::operator=<32ul>(uint64_t a1, uint64_t a2)
{
  void (***v4)(_QWORD);
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(void (****)(_QWORD))(a1 + 40);
    if (v4)
    {
      (**v4)(v4);
      if (*(_QWORD *)(a1 + 40) != a1)
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 40) = 0;
    }
    v5 = *(_QWORD *)(a2 + 40);
    if (v5)
    {
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v7 = a1;
      if (v6 >= 0x21)
      {
        v8 = v6;
        v9 = *(_QWORD *)(a1 + 32);
        if (v9)
          v7 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v8, 0);
        else
          v7 = 0;
      }
      *(_QWORD *)(a1 + 40) = v7;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
    }
  }
  return a1;
}

void re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_2,BOOL ()(re::MeshPartDrawContext const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_2,BOOL ()(re::MeshPartDrawContext const&)>::operator()(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float32x4_t *v6;
  float32x4_t *v7;
  __int8 *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int32 v16;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v6 = *(float32x4_t **)(v2 + 40);
  v7 = a2 + 4;
  v8 = &a2[9].i8[8];
  v9 = a2 + 8;
  v10 = v6 + 6;
  v11 = 112 * v3;
  for (i = v6 + 2; ; i += 7)
  {
    if (v13)
    {
      if ((a2[9].i8[9] & 1) != 0 && *(_BYTE *)(v13 + 1) && a2[10].f32[1] == *(float *)(v13 + 4))
        v15 = a2[9].u8[11] == *(unsigned __int8 *)(v13 + 8) ? v10[-6].i64[1] : 0;
      else
        v15 = 0;
      v16 = a2[11].i32[1];
      if (re::isBoundingBoxInsideVCAPlanes(a2[1].i64[0] + 432, v7, v15, a2[11].i32[2], v8, v9, v10, v14, i, 4, v10[-6].i64[1], v10[-5].i32[0]))
      {
        if ((v16 & 0x4000000) == 0)
          break;
      }
    }
    v10 += 7;
    v11 -= 112;
    if (!v11)
      return 0;
  }
  return 1;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_2,BOOL ()(re::MeshPartDrawContext const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED81FC0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_2,BOOL ()(re::MeshPartDrawContext const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED81FC0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_2,BOOL ()(re::MeshPartDrawContext const&)>::size()
{
  return 24;
}

void `anonymous namespace'::computeWarpTransforms(uint64_t a1, unint64_t a2, uint64_t a3, simd_float4 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double WarpMatrixForSourceProjection;
  __int32 v17;
  uint64_t v18;
  __int32 v19;
  uint64_t v20;
  __int32 v21;
  double v22;
  float32x4_t *v23;
  uint64_t v24;
  double ViewportToNDCReprojectionMatrix;
  __int32 v26;
  __int32 v27;
  uint64_t v28;
  __int32 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int32 v39;
  __int32 v40;
  uint64_t v41;
  uint64_t v42;
  __int32 v43;
  double v44;
  double v45;
  __int32 v46;
  __int32 v47;
  uint64_t v48;
  __int32 v49;
  uint64_t v50;

  v8 = a5;
  v13 = (int)a5;
  v14 = a3 + ((uint64_t)(int)a5 << 6);
  WarpMatrixForSourceProjection = re::createWarpMatrixForSourceProjection(*(float32x4_t *)(v14 + 256), *(float32x4_t *)(v14 + 272), *(float32x4_t *)(v14 + 288), *(float32x4_t *)(v14 + 304), *a4, a4[1], a4[2], a4[3], a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8, *(float32x4_t *)(v14 + 256), *(float32x4_t *)(v14 + 272), *(float32x4_t *)(v14 + 288),
                                    *(float32x4_t *)(v14 + 304),
                                    *(simd_float4 *)v14,
                                    *(simd_float4 *)(v14 + 16),
                                    *(simd_float4 *)(v14 + 32),
                                    *(simd_float4 *)(v14 + 48));
  if (a2 <= v8)
  {
    re::internal::assertLog((re::internal *)6, v15, WarpMatrixForSourceProjection, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, a2);
    _os_crash();
    __break(1u);
  }
  else
  {
    v23 = (float32x4_t *)(a1 + 192 * (int)v13);
    *(double *)v23[5].i64 = WarpMatrixForSourceProjection;
    v23[5].i32[2] = v17;
    v23[6].i64[0] = v18;
    v23[6].i32[2] = v19;
    v23[7].i64[0] = v20;
    v23[7].i32[2] = v21;
    LODWORD(v22) = *(_DWORD *)(a3 + 420);
    v24 = a3 + 16 * v13;
    ViewportToNDCReprojectionMatrix = re::createViewportToNDCReprojectionMatrix(*(_QWORD *)(v24 + 384), *(_QWORD *)(v24 + 392), v23[5], v23[6], v23[7], *(float *)(a3 + 416), v22);
    v23[5].i32[2] = v26;
    *(double *)v23[5].i64 = ViewportToNDCReprojectionMatrix;
    v23[6].i32[2] = v27;
    v23[6].i64[0] = v28;
    v23[7].i32[2] = v29;
    v23[7].i64[0] = v30;
    *(double *)v23[8].i64 = re::createWarpMatrixForSourceProjection(*(float32x4_t *)(v14 + 256), *(float32x4_t *)(v14 + 272), *(float32x4_t *)(v14 + 288), *(float32x4_t *)(v14 + 304), *a4, a4[1], a4[2], a4[3], v31, v32, v33, v34, v35, v36, v37, v38, *(float32x4_t *)(v14 + 256), *(float32x4_t *)(v14 + 272), *(float32x4_t *)(v14 + 288),
                              *(float32x4_t *)(v14 + 304),
                              *(simd_float4 *)(v14 + 128),
                              *(simd_float4 *)(v14 + 144),
                              *(simd_float4 *)(v14 + 160),
                              *(simd_float4 *)(v14 + 176));
    v23[8].i32[2] = v39;
    v23[9].i32[2] = v40;
    v23[9].i64[0] = v41;
    v23[10].i64[0] = v42;
    v23[10].i32[2] = v43;
    LODWORD(v44) = *(_DWORD *)(a3 + 420);
    v45 = re::createViewportToNDCReprojectionMatrix(*(_QWORD *)(v24 + 384), *(_QWORD *)(v24 + 392), v23[8], v23[9], v23[10], *(float *)(a3 + 416), v44);
    v23[8].i32[2] = v46;
    *(double *)v23[8].i64 = v45;
    v23[9].i32[2] = v47;
    v23[9].i64[0] = v48;
    v23[10].i32[2] = v49;
    v23[10].i64[0] = v50;
  }
}

_QWORD *re::internal::Callable<`anonymous namespace'::setReprojectionConstants(re::RenderGraphContext &,float,float,re::mtl::ComputeCommandEncoder,unsigned int)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::~Callable(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED82018;
  v2 = (void *)a1[56];
  if (v2)
  {

    a1[56] = 0;
  }
  return a1;
}

void re::internal::Callable<`anonymous namespace'::setReprojectionConstants(re::RenderGraphContext &,float,float,re::mtl::ComputeCommandEncoder,unsigned int)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::~Callable(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED82018;
  v2 = (void *)a1[56];
  if (v2)
  {

    a1[56] = 0;
  }
  JUMPOUT(0x2276933B8);
}

void *re::internal::Callable<`anonymous namespace'::setReprojectionConstants(re::RenderGraphContext &,float,float,re::mtl::ComputeCommandEncoder,unsigned int)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator()(uint64_t a1, simd_float4 *a2, simd_float4 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  simd_float4 *v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v18[4];
  _BYTE __dst[392];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 16;
  memcpy(__dst, (char *)objc_msgSend(*(id *)(a1 + 448), sel_contents) + *(unsigned int *)(a1 + 456), *(unsigned int *)(a1 + 460));
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = v11 & 1;
    if ((v11 & 1) != 0)
      v13 = a2;
    else
      v13 = a3;
    v14 = v13[1];
    v15 = v13[2];
    v16 = v13[3];
    v18[0] = *v13;
    v18[1] = v14;
    v18[2] = v15;
    v18[3] = v16;
    v11 = 0;
    v10 = 1;
  }
  while (v12);
  return memcpy((char *)objc_msgSend(*(id *)(a1 + 448), sel_contents) + *(unsigned int *)(a1 + 456), __dst, *(unsigned int *)(a1 + 460));
}

_QWORD *re::internal::Callable<`anonymous namespace'::setReprojectionConstants(re::RenderGraphContext &,float,float,re::mtl::ComputeCommandEncoder,unsigned int)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED82018;
  memcpy(a2 + 2, (const void *)(a1 + 16), 0x1B0uLL);
  a2[56] = *(id *)(a1 + 448);
  a2[57] = *(_QWORD *)(a1 + 456);
  return a2;
}

_QWORD *re::internal::Callable<`anonymous namespace'::setReprojectionConstants(re::RenderGraphContext &,float,float,re::mtl::ComputeCommandEncoder,unsigned int)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED82018;
  memcpy(a2 + 2, (const void *)(a1 + 16), 0x1B0uLL);
  a2[56] = *(id *)(a1 + 448);
  a2[57] = *(_QWORD *)(a1 + 456);
  return a2;
}

uint64_t re::internal::Callable<`anonymous namespace'::setReprojectionConstants(re::RenderGraphContext &,float,float,re::mtl::ComputeCommandEncoder,unsigned int)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::size()
{
  return 464;
}

void re::RenderGraphMeshNode::~RenderGraphMeshNode(re::RenderGraphMeshNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED876C0;
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 296);
  v2 = *((_QWORD *)this + 33);
  if (v2)
  {
    if ((*((_BYTE *)this + 272) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 35));
    *(_OWORD *)((char *)this + 264) = 0u;
    *(_OWORD *)((char *)this + 280) = 0u;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  re::RenderGraphMeshNode::~RenderGraphMeshNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphMRCNode::~RenderGraphMRCNode(re::RenderGraphMRCNode *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24ED85B80;
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)this + 400);
  v2 = (void *)*((_QWORD *)this + 49);
  if (v2)
  {

    *((_QWORD *)this + 49) = 0;
  }
  v3 = *((_QWORD *)this + 44);
  if (v3)
  {
    if (*((_QWORD *)this + 48))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 48) = 0;
    *((_QWORD *)this + 45) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 44) = 0;
    ++*((_DWORD *)this + 94);
  }
  v4 = *((_QWORD *)this + 35);
  if (v4)
  {
    if ((*((_BYTE *)this + 288) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 37));
    *(_OWORD *)((char *)this + 280) = 0u;
    *(_OWORD *)((char *)this + 296) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphMRCNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  re::RenderGraphMRCNode::~RenderGraphMRCNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::BlurReprojectionState>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re21BlurReprojectionStateE";
  if (((unint64_t)"N2re21BlurReprojectionStateE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re21BlurReprojectionStateE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::get<re::RendererGlobals>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = (unint64_t)"N2re15RendererGlobalsE";
  if (((unint64_t)"N2re15RendererGlobalsE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re15RendererGlobalsE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v6 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 80);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 24 * v6 + 8) == v7)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
        }
        v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
}

uint64_t re::RenderGraphDataStore::get<re::SceneScope>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = (unint64_t)"N2re10SceneScopeE";
  if (((unint64_t)"N2re10SceneScopeE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re10SceneScopeE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v6 = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 64))
  {
    v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
    if (v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 80);
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)));
      if (*(_QWORD *)(v9 + 24 * v8 + 8) != v7)
      {
        while (1)
        {
          v6 = *(_DWORD *)(v9 + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (v7 % *(unsigned int *)(a1 + 88)))) & 0x7FFFFFFF;
          if (v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 24 * v6 + 8) == v7)
            return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
        }
        v6 = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v6 + 16);
}

uint64_t re::DynamicInlineArray<re::FilteredMeshPass,1ul>::add(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  result = re::DynamicInlineArray<re::FilteredMeshPass,1ul>::ensureCapacity(a1, a2);
  if ((_DWORD)result)
  {
    v5 = a1 + 2;
    v6 = *a1;
    v7 = (uint64_t)&a1[3 * *a1 + 2];
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(v7 + 8) = v8;
    if (v8)
      *(_DWORD *)((char *)&v5[3 * v6 + 1] + 1) = *(_DWORD *)(a2 + 9);
    *(_DWORD *)((char *)&v5[3 * v6 + 1] + 5) = *(_DWORD *)(a2 + 13);
    ++*a1;
    ++*((_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t re::DynamicInlineArray<re::FilteredMeshPass,1ul>::ensureCapacity(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (!*a1)
    return 1;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_1,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_1,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator()(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  __n128 v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __n128 v40[4];
  _OWORD v41[4];

  v5 = (int *)*((_QWORD *)a1 + 1);
  v6 = *v5 + 1;
  *v5 = v6;
  if (!*(_BYTE *)(a2 + 94))
    *(_BYTE *)(a2 + 94) = 1;
  *(_BYTE *)(a2 + 95) = v6;
  v7 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24);
  v8 = (uint64_t *)(a2 + 80);
  v40[0].n128_u8[0] = v6;
  v40[0].n128_u8[1] = *(_BYTE *)(a3 + 153) & 1;
  v40[0].n128_u32[1] = *(_DWORD *)(a3 + 164);
  v40[0].n128_u8[8] = *(_BYTE *)(a3 + 155);
  v40[0].n128_u32[3] = *(_DWORD *)(a3 + 184);
  if (*(_DWORD *)(v7 + 444))
  {
    v9 = v7 + 416;
LABEL_5:
LABEL_21:
    v20 = *((_QWORD *)a1 + 1);
    v21 = *(_QWORD *)(v20 + 16);
    if (*(_QWORD *)(v21 + 48))
    {
      v22 = *v8;
      v23 = 0xBF58476D1CE4E5B9 * (*v8 ^ ((unint64_t)*v8 >> 30));
      v24 = *(unsigned int *)(*(_QWORD *)(v21 + 56)
                            + 4
                            * (((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                               * (v23 ^ (v23 >> 27))) >> 31))
                             % *(unsigned int *)(v21 + 72)));
      if ((_DWORD)v24 != 0x7FFFFFFF)
      {
        v25 = *(_QWORD *)(v21 + 64);
        if (*(_QWORD *)(v25 + (v24 << 6) + 16) == v22)
        {
LABEL_26:
          v26 = (float32x4_t *)(v25 + (v24 << 6));
          v27 = (float32x4_t *)re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](*(_QWORD *)(v20 + 8) + 56, *(unsigned int *)(a2 + 76));
          v28 = 0;
          LODWORD(v29) = 0;
          HIDWORD(v29) = v26[2].i32[1];
          v30.n128_u32[0] = v26[2].u32[0];
          v31.n128_u64[0] = 0;
          v31.n128_u64[1] = v26[2].u32[2];
          v32 = vnegq_f32(v26[3]);
          v32.i32[3] = 1.0;
          v33 = *v27;
          v34 = v27[1];
          v35 = v27[2];
          v36 = v27[3];
          v40[0] = v30;
          v40[1] = (__n128)v29;
          v40[2] = v31;
          v40[3] = (__n128)v32;
          do
          {
            v41[v28] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, COERCE_FLOAT(*(_OWORD *)&v40[v28])), v34, (float32x2_t)v40[v28].n128_u64[0], 1), v35, (float32x4_t)v40[v28], 2), v36, (float32x4_t)v40[v28], 3);
            ++v28;
          }
          while (v28 != 4);
          v37 = (float32x4_t)v41[1];
          v38 = (float32x4_t)v41[2];
          v39 = (float32x4_t)v41[3];
          *v27 = (float32x4_t)v41[0];
          v27[1] = v37;
          v27[2] = v38;
          v27[3] = v39;
        }
        else
        {
          while (1)
          {
            v24 = *(_DWORD *)(v25 + (v24 << 6) + 8) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v25 + (v24 << 6) + 16) == v22)
              goto LABEL_26;
          }
        }
      }
    }
    return;
  }
  v10 = v7 + 32;
  v11 = *(_QWORD *)(v7 + 16);
  if (v11)
  {
    v12 = 0;
    v13 = *v8;
    while (*(_QWORD *)(v7 + v12 + 32) != v13)
    {
      v12 += 24;
      if (24 * v11 == v12)
      {
        if ((v11 & 0xFFFFFFF0) != 0)
        {
          v9 = v7 + 416;
          if (*(_QWORD *)(v7 + 416))
            goto LABEL_15;
          v14 = *(uint64_t **)v7;
          if (!*(_QWORD *)v7)
          {
          }
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v7 + 416, (uint64_t)v14, 32);
          v11 = *(_QWORD *)(v7 + 16);
          if (v11)
          {
LABEL_15:
            v15 = v10 + 24 * v11;
            do
            {
              v10 += 24;
            }
            while (v10 != v15);
          }
          *(_QWORD *)(v7 + 16) = 0;
          ++*(_DWORD *)(v7 + 24);
          goto LABEL_5;
        }
        v41[0] = v40[0];
        if (v11 >= 0x10)
          goto LABEL_31;
        goto LABEL_20;
      }
    }
    goto LABEL_21;
  }
  v13 = *v8;
  v41[0] = v40[0];
LABEL_20:
  v16 = v10 + 24 * v11;
  *(_QWORD *)v16 = v13;
  *(_OWORD *)(v16 + 8) = v41[0];
  v17 = *(_QWORD *)(v7 + 16);
  ++*(_DWORD *)(v7 + 24);
  v18 = __CFADD__(v17, 1);
  v19 = v17 + 1;
  *(_QWORD *)(v7 + 16) = v19;
  if (!v18)
    goto LABEL_21;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, v19);
  _os_crash();
  __break(1u);
LABEL_31:
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  _os_crash();
  __break(1u);
}

_QWORD *re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_1,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED82080;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_1,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED82080;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_1,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::size()
{
  return 16;
}

void re::HashTable<unsigned long long,re::`anonymous namespace'::SPlatterDrawInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 8) == v6)
        return;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 8) == v6)
          return;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  ++*(_DWORD *)(a1 + 40);
}

__n128 re::HashTable<unsigned long long,re::`anonymous namespace'::SPlatterDrawInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __n128 *a5)
{
  uint64_t v8;
  int v9;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  uint64_t v27;
  __n128 result;
  _BYTE v29[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v8 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = (_QWORD *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v21 - 1) & 0x80000000) != 0)
              {
                v22 = 0xBF58476D1CE4E5B9 * (*v21 ^ (*v21 >> 30));
                v23 = (0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31);
              }
              v21 += 4;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v26 = 2 * v11;
        else
          v26 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 32 * v8);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 32 * v8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  v27 = 32 * v8;
  *(_DWORD *)(v24 + v27) = v25 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v27) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v8 + 8) = *a4;
  result = *a5;
  *(__n128 *)(*(_QWORD *)(a1 + 16) + 32 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void *re::DynamicInlineArray<re::DynamicInlineArray<re::PlaneF,6ul>,2ul>::copy(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  void *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  const void *v13;
  uint64_t v14;

  v3 = a2 + 2;
  v4 = *a2;
  v5 = a1 + 2;
  if ((unint64_t)*a2 >= *a1)
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> const*,re::DynamicInlineArray<re::PlaneF,6ul> const*,re::DynamicInlineArray<re::PlaneF,6ul>*,0>(v3, &v3[14 * *a1], v5);
    if (*a1 != v4)
    {
      v9 = &v3[14 * v4];
      v10 = 14 * *a1;
      v11 = &v3[v10];
      v12 = &v5[v10];
      do
      {
        *v12 = 0;
        *((_DWORD *)v12 + 2) = 0;
        v13 = v11 + 2;
        v14 = *v11;
        v11 += 14;
        result = memcpy(v12 + 2, v13, 16 * v14);
        *v12 = v14;
        v12 += 14;
      }
      while (v11 != v9);
    }
  }
  else
  {
    result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> const*,re::DynamicInlineArray<re::PlaneF,6ul> const*,re::DynamicInlineArray<re::PlaneF,6ul>*,0>(v3, &v3[14 * v4], v5);
    if (v4 != *a1)
    {
      v7 = &v5[14 * *a1];
      v8 = &v5[14 * v4];
      do
      {
        *v8 = 0;
        ++*((_DWORD *)v8 + 2);
        v8 += 14;
      }
      while (v8 != v7);
    }
  }
  *a1 = v4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DynamicInlineArray<re::PlaneF,6ul> const*,re::DynamicInlineArray<re::PlaneF,6ul> const*,re::DynamicInlineArray<re::PlaneF,6ul>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::DynamicInlineArray<re::Vector4<float>,2ul>::operator=(a3, v4);
      v4 += 14;
      a3 += 14;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::__introsort<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *,false>(uint64_t a1, float *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  float *v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  unint64_t v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  __int128 *v32;
  __int128 *v33;
  __int128 *v34;
  float *v35;
  float v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float *v40;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  float *v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  float *v54;
  float *v55;
  float v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  float *v68;
  float v69;
  float *v70;
  uint64_t v72;
  float v73;
  float *v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 <= *result)
  {
    if (v4 > v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 > *result)
      {
        v7 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      v8 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 <= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  float v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_OWORD *)(a2 - 16);
      if (*(float *)(a2 - 16) > *(float *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)a1, (float *)(a1 + 16), (float *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)a1, (float *)(a1 + 16), (float *)(a1 + 32), (unsigned __int32 *)(a2 - 16));
      return 1;
    case 5:
      v16 = (__int128 *)(a1 + 16);
      v17 = (__int128 *)(a1 + 32);
      v18 = (__int128 *)(a1 + 48);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)a1, (float *)(a1 + 16), (float *)(a1 + 32), (unsigned __int32 *)(a1 + 48));
      v20 = *(float *)(a2 - 16);
      v19 = (__int128 *)(a2 - 16);
      if (v20 > *(float *)(a1 + 48))
      {
        v21 = *v18;
        *v18 = *v19;
        *v19 = v21;
        if (*(float *)v18 > *(float *)v17)
        {
          v22 = *v17;
          *v17 = *v18;
          *v18 = v22;
          if (*(float *)v17 > *(float *)v16)
          {
            v23 = *v16;
            *v16 = *v17;
            *v17 = v23;
            if (*(float *)(a1 + 16) > *(float *)a1)
            {
              v24 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v16;
              *v16 = v24;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (float *)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)a1, (float *)(a1 + 16), (float *)(a1 + 32));
      v9 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(float *)v9;
    if (*(float *)v9 > *v8)
    {
      v25 = *(_QWORD *)(v9 + 4);
      v26 = *(_DWORD *)(v9 + 12);
      v13 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v13 + 48) = *(_OWORD *)(a1 + v13 + 32);
        if (v13 == -32)
          break;
        v14 = *(float *)(a1 + v13 + 16);
        v13 -= 16;
        if (v12 <= v14)
        {
          v15 = a1 + v13 + 48;
          goto LABEL_12;
        }
      }
      v15 = a1;
LABEL_12:
      *(float *)v15 = v12;
      *(_QWORD *)(v15 + 4) = v25;
      *(_DWORD *)(v15 + 12) = v26;
      if (++v11 == 8)
        return v9 + 16 == a2;
    }
    v8 = (float *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>(float *a1, float *a2, float *a3, unsigned __int32 *a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>(a1, a2, a3);
  result.n128_u32[0] = *a4;
  if (*(float *)a4 > *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f32[0] = *a3;
    if (*a3 > *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f32[0] = *a2;
      if (*a2 > *a1)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_3,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_3,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator()(_QWORD *result, uint64_t a2, float32x4_t *a3)
{
  _OWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t *v7;
  __int8 *v8;
  float32x4_t *v9;
  _QWORD *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  int v14;
  int i;
  float32x4_t *v16;
  uint64_t v17;
  unsigned int v18;
  float32x4_t *v20;
  int v21;
  unsigned __int8 v22;
  _OWORD v24[2];

  v3 = (_OWORD *)a3[2].i64[0];
  if (v3)
  {
    v4 = v3[1];
    v24[0] = *v3;
    v24[1] = v4;
    v5 = result[1];
    v6 = *(_QWORD *)(v5 + 24);
    if (v6)
    {
      v7 = *(float32x4_t **)(v5 + 40);
      v20 = &v7[7 * v6];
      v8 = &a3[9].i8[8];
      v9 = a3 + 8;
      v21 = a3[11].i32[2];
      v22 = -1;
      do
      {
        v10 = result;
        if (v11)
        {
          v12 = (float *)v11;
          if ((a3[9].i8[9] & 1) != 0)
          {
            result = v10;
            if (*((_BYTE *)v12 + 1) && a3[10].f32[1] == v12[1])
            {
              if (a3[9].u8[11] == *((unsigned __int8 *)v12 + 8))
                v13 = v7->i64[1];
              else
                v13 = 0;
            }
            else
            {
              v13 = 0;
            }
          }
          else
          {
            v13 = 0;
            result = v10;
          }
          if (*(_BYTE *)(a2 + 3) == 2)
            v14 = *(_DWORD *)(a2 + 32);
          else
            v14 = 1;
          if (v14 >= 1)
          {
            for (i = 0; i != v14; ++i)
            {
              v16 = (float32x4_t *)re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](result[2] + 56, (i + *(_DWORD *)(a2 + 76)));
              if (re::isBoundingBoxInsideVCAPlanes((uint64_t)v24, v16, v13, v21, v8, v9, v7 + 6, v17, v7 + 2, 4, v7->i64[1], v7[1].i32[0]))
              {
                v18 = *(unsigned __int8 *)v12;
                if (v22 < v18)
                  LOBYTE(v18) = v22;
                v22 = v18;
              }
              result = v10;
            }
          }
        }
        else
        {
          result = v10;
        }
        v7 += 7;
      }
      while (v7 != v20);
    }
    else
    {
      v22 = -1;
    }
    if (!*(_BYTE *)(a2 + 94))
      *(_BYTE *)(a2 + 94) = 1;
    *(_BYTE *)(a2 + 95) = v22 - 1;
  }
  return result;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_3,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED820E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_3,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED820E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_3,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::size()
{
  return 32;
}

void re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_4,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

unsigned __int8 *re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_4,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator()(unsigned __int8 *result, uint64_t a2, float32x4_t *a3, unsigned __int8 *a4)
{
  _OWORD *v4;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  __int8 *v13;
  float32x4_t *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  int i;
  float32x4_t *v21;
  uint64_t v22;
  unsigned int v23;
  float32x4_t *v24;
  float32x4_t *v25;
  int v26;
  unsigned __int8 v27;
  uint64_t v28;
  _OWORD v29[2];

  v4 = (_OWORD *)a3[2].i64[0];
  if (v4)
  {
    v6 = a2;
    v7 = result;
    if (result[32] != *a4
    {
      v28 = v6;
      v9 = v4[1];
      v29[0] = *v4;
      v29[1] = v9;
      v10 = *((_QWORD *)v7 + 1);
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        v12 = *(float32x4_t **)(v10 + 40);
        v24 = a3;
        v25 = &v12[7 * v11];
        v13 = &a3[9].i8[8];
        v14 = a3 + 8;
        v26 = a3[11].i32[2];
        v27 = -1;
        v15 = v7;
        do
        {
          if (result)
          {
            if ((v24[9].i8[9] & 1) != 0)
            {
              v17 = v28;
              if (result[1] && v24[10].f32[1] == *((float *)result + 1))
                v16 = v24[9].u8[11] == result[8] ? v12->i64[1] : 0;
              else
                v16 = 0;
            }
            else
            {
              v16 = 0;
              v17 = v28;
            }
            v18 = *(_BYTE *)(v17 + 3) == 2 ? *(_DWORD *)(v17 + 32) : 1;
            if (v18 >= 1)
            {
              v19 = result;
              for (i = 0; i != v18; ++i)
              {
                v21 = (float32x4_t *)re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](*((_QWORD *)v15 + 3) + 56, (i + *(_DWORD *)(v28 + 76)));
                result = (unsigned __int8 *)re::isBoundingBoxInsideVCAPlanes((uint64_t)v29, v21, v16, v26, v13, v14, v12 + 6, v22, v12 + 2, 4, v12->i64[1], v12[1].i32[0]);
                if ((_DWORD)result)
                {
                  v23 = *v19;
                  if (v27 < v23)
                    LOBYTE(v23) = v27;
                  v27 = v23;
                }
              }
            }
          }
          v12 += 7;
          v7 = v15;
        }
        while (v12 != v25);
      }
      else
      {
        v27 = -1;
      }
      LOBYTE(v8) = v27 - 1;
      v6 = v28;
    }
    if (!*(_BYTE *)(v6 + 94))
      *(_BYTE *)(v6 + 94) = 1;
    *(_BYTE *)(v6 + 95) = v8;
  }
  return result;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_4,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED82140;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_4,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED82140;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_4,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::size()
{
  return 40;
}

uint64_t re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re21TonemapParametersDataE";
  if (((unint64_t)"N2re21TonemapParametersDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re21TonemapParametersDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 64, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

_QWORD *re::internal::Callable<re::SFBSystemShellReprojectAndRectifyNode::setupEncoder(re::RenderGraphContext &,re::mtl::ComputeCommandEncoder)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::~Callable(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED82198;
  v2 = (void *)a1[2];
  if (v2)
  {

    a1[2] = 0;
  }
  return a1;
}

void re::internal::Callable<re::SFBSystemShellReprojectAndRectifyNode::setupEncoder(re::RenderGraphContext &,re::mtl::ComputeCommandEncoder)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::~Callable(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED82198;
  v2 = (void *)a1[2];
  if (v2)
  {

    a1[2] = 0;
  }
  JUMPOUT(0x2276933B8);
}

void *re::internal::Callable<re::SFBSystemShellReprojectAndRectifyNode::setupEncoder(re::RenderGraphContext &,re::mtl::ComputeCommandEncoder)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator()(uint64_t a1, simd_float4 *a2, simd_float4 *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  simd_float4 *v17;
  simd_float4 v18;
  simd_float4 v19;
  float32x4_t *v20;
  double WarpMatrixForSourceProjection;
  _OWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  simd_float4 *v30;
  simd_float4 v32;
  simd_float4 v33;
  simd_float4 v34;
  simd_float4 v35;
  _OWORD __dst[24];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = memcpy(__dst, (char *)objc_msgSend(*(id *)(a1 + 16), sel_contents) + *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28));
  v14 = 0;
  v15 = 1;
  do
  {
    v16 = v15 & 1;
    if ((v15 & 1) != 0)
      v17 = a2;
    else
      v17 = a3;
    v18 = v17[1];
    v34 = v18;
    v35 = *v17;
    v19 = v17[3];
    v32 = v19;
    v33 = v17[2];
    v20 = (float32x4_t *)(a1 + (v14 << 6));
    WarpMatrixForSourceProjection = re::createWarpMatrixForSourceProjection(v20[10], v20[11], v20[12], v20[13], v35, v18, v33, v19, (uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, v20[10], v20[11], v20[12],
                                      v20[13],
                                      *(simd_float4 *)(a1 + 32 + (v14 << 6)),
                                      *(simd_float4 *)(a1 + 32 + (v14 << 6) + 16),
                                      *(simd_float4 *)(a1 + 32 + (v14 << 6) + 32),
                                      *(simd_float4 *)(a1 + 32 + (v14 << 6) + 48));
    v15 = 0;
    v22 = &__dst[12 * v14];
    *((_DWORD *)v22 + 10) = v23;
    *((double *)v22 + 4) = WarpMatrixForSourceProjection;
    *((_DWORD *)v22 + 14) = v24;
    *((_QWORD *)v22 + 6) = v25;
    *((_DWORD *)v22 + 18) = v26;
    *((_QWORD *)v22 + 8) = v27;
    v28 = *(_QWORD *)(a1 + 304);
    v29 = *(_QWORD *)(a1 + 288);
    v30 = (simd_float4 *)(v28 + (v14 << 6));
    *v30 = v35;
    v30[1] = v34;
    v30[2] = v33;
    v30[3] = v32;
    *(_QWORD *)(v28 + 128) = v29;
    v14 = 1;
  }
  while (v16);
  return memcpy((char *)objc_msgSend(*(id *)(a1 + 16), sel_contents) + *(unsigned int *)(a1 + 24), __dst, *(unsigned int *)(a1 + 28));
}

_QWORD *re::internal::Callable<re::SFBSystemShellReprojectAndRectifyNode::setupEncoder(re::RenderGraphContext &,re::mtl::ComputeCommandEncoder)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED82198;
  a2[2] = *(id *)(a1 + 16);
  a2[3] = *(_QWORD *)(a1 + 24);
  memcpy(a2 + 4, (const void *)(a1 + 32), 0x118uLL);
  return a2;
}

_QWORD *re::internal::Callable<re::SFBSystemShellReprojectAndRectifyNode::setupEncoder(re::RenderGraphContext &,re::mtl::ComputeCommandEncoder)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED82198;
  a2[2] = *(id *)(a1 + 16);
  a2[3] = *(_QWORD *)(a1 + 24);
  memcpy(a2 + 4, (const void *)(a1 + 32), 0x118uLL);
  return a2;
}

uint64_t re::internal::Callable<re::SFBSystemShellReprojectAndRectifyNode::setupEncoder(re::RenderGraphContext &,re::mtl::ComputeCommandEncoder)::$_0,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::size()
{
  return 320;
}

__n128 re::DynamicArray<re::TargetRead>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  __n128 *v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::TargetRead>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (__n128 *)(*((_QWORD *)this + 4) + 32 * v4);
  v5->n128_u64[0] = 0;
  v5->n128_u64[1] = -1;
  v5->n128_u64[0] = a2->n128_u64[0];
  v5->n128_u64[1] = a2->n128_u64[1];
  result = a2[1];
  v5[1] = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::TargetWrite>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::TargetWrite>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 6);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = -1;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8);
  result = *(__n128 *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 48) = v7;
  *(__n128 *)(v5 + 16) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RenderGraphNode::configure(re::RenderGraphNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5;
  const char *v6;
  const char *v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = 0x9E3779B97F4A7C17;
  v7 = (const char *)*((_QWORD *)this + 3);
  v6 = (const char *)*((_QWORD *)this + 4);
  v8 = strlen(v7);
  if (v8)
  {
    MurmurHash3_x64_128((uint64_t)v7, v8, 0, &v12);
    v9 = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
  }
  else
  {
    v9 = 0;
  }
  v10 = strlen(v6);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)v6, v10, 0, &v12);
    v5 = ((v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12) - 0x61C8864680B583E9;
  }
  *((_QWORD *)this + 6) = ((v9 >> 2) + (v9 << 6) + v5) ^ v9;
  v11 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;

}

void re::RenderGraphNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *((_QWORD *)this + 14);
  if (v5)
  {
    v6 = *((_QWORD *)this + 16);
    v7 = v6 + 32 * v5;
    do
    {
      re::RenderGraphBuilder::read((uint64_t)a2, v6, v6 + 16);
      v6 += 32;
    }
    while (v6 != v7);
  }
  v8 = *((_QWORD *)this + 19);
  if (v8)
  {
    v9 = *((_QWORD *)this + 21);
    v10 = v9 + (v8 << 6);
    do
    {
      re::RenderGraphBuilder::write(a2, v9, v9 + 16);
      v9 += 64;
    }
    while (v9 != v10);
  }
  v11 = *((_QWORD *)this + 24);
  if (v11)
  {
    v12 = *((_QWORD *)this + 26);
    v13 = v12 + 32 * v11;
    do
    {
      re::RenderGraphBuilder::read((uint64_t)a2, v12, v12 + 16);
      v12 += 32;
    }
    while (v12 != v13);
  }
  v14 = *((_QWORD *)this + 29);
  if (v14)
  {
    v15 = *((_QWORD *)this + 31);
    v16 = v15 + (v14 << 6);
    do
    {
      re::RenderGraphBuilder::write((uint64_t)a2, v15, v15 + 16);
      v15 += 64;
    }
    while (v15 != v16);
  }
  *((_QWORD *)a2 + 75) = *((_QWORD *)this + 9);
  if (*((_BYTE *)this + 80))
    *((_BYTE *)a2 + 608) = *((_BYTE *)this + 80);
}

_QWORD *re::RenderGraphNode::patch(_QWORD *this, re::RenderGraphContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _BOOL8 v15;
  char *v16;
  const re::IntrospectionBase *v17;
  const re::IntrospectionBase **v18;
  _QWORD v19[3];
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const re::IntrospectionBase *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (this[5])
  {
    v2 = (uint64_t)this;
    v3 = *((_QWORD *)a2 + 146);
    v4 = (unint64_t)"N2re28RenderGraphNodeExecutionDataE";
    if (((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x8000000000000000) != 0)
    {
      v5 = (unsigned __int8 *)((unint64_t)"N2re28RenderGraphNodeExecutionDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v6 = 5381;
      do
      {
        v4 = v6;
        v7 = *v5++;
        v6 = (33 * v6) ^ v7;
      }
      while (v7);
    }
    v20 = (((this[7] + (this[6] << 6) + (this[6] >> 2) - 0x61C8864680B583E9) ^ this[6])
         - 0x61C8864680B583E9
         + (v4 << 6)
         + (v4 >> 2)) ^ v4;
    this = (_QWORD *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v3 + 16, (uint64_t *)&v20);
    if (this && *this)
    {
      v8 = *this + 8;
      v9 = strlen(*(const char **)(v2 + 16));
      if (v9)
      {
        MurmurHash3_x64_128(*(_QWORD *)(v2 + 16), v9, 0, &v20);
        v10 = (v21 - 0x61C8864680B583E9 + (v20 << 6) + (v20 >> 2)) ^ v20;
      }
      else
      {
        v10 = 0;
      }
      v20 = v10;
      this = (_QWORD *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v8, (uint64_t *)&v20);
      if (this)
      {
        v11 = this[2];
        if (v11)
        {
          v12 = (uint64_t *)this[4];
          v13 = &v12[7 * v11];
          do
          {
            re::FixedArray<unsigned char>::FixedArray(&v20, v12);
            v14 = re::FixedArray<unsigned int>::FixedArray(&v23, (uint64_t)(v12 + 3));
            v26 = (const re::IntrospectionBase *)v12[6];
            v17 = v26;
            v18 = (const re::IntrospectionBase **)v2;
            v15 = re::scanForCopy((uint64_t)v14, (uint64_t *)&v18, &v17);
            if (v15)
            {
              v16 = v22;
              v19[1] = 0;
              v19[2] = 0;
            }
            if (v23)
            {
              if (v24)
              {
                (*(void (**)(void))(*(_QWORD *)v23 + 40))();
                v24 = 0;
                v25 = 0;
              }
              v23 = 0;
            }
            this = (_QWORD *)v20;
            if (v20)
            {
              if (v21)
                this = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 40))();
            }
            v12 += 7;
          }
          while (v12 != v13);
        }
      }
    }
  }
  return this;
}

uint64_t *re::allocInfo_RenderGraphNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411EB60);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411EB60))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411ED68, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411ED78 = 0;
    qword_25411ED88 = 0;
    qword_25411ED90 = 0xFFFFFFFFLL;
    qword_25411ED68 = (uint64_t)&off_24ED7DAA8;
    qword_25411ED98 = (uint64_t)"RenderGraphNode";
    dword_25411EDA0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411EDD8 = 0;
    __cxa_guard_release(&qword_25411EB60);
  }
  return &qword_25411ED68;
}

void re::initInfo_RenderGraphNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t *v15;
  unsigned __int8 v16;
  const re::IntrospectionBase *v17;
  unsigned __int8 v18;
  int v19;
  re::IntrospectionRegistry *v20;
  const re::IntrospectionBase *v21;
  const char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  unsigned __int8 v30;
  const re::IntrospectionBase *v31;
  unsigned __int8 v32;
  int v33;
  re::IntrospectionRegistry *v34;
  const re::IntrospectionBase *v35;
  const char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned __int8 v42;
  uint64_t *v43;
  unsigned __int8 v44;
  const re::IntrospectionBase *v45;
  unsigned __int8 v46;
  int v47;
  re::IntrospectionRegistry *v48;
  const re::IntrospectionBase *v49;
  const char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned __int8 v56;
  uint64_t *v57;
  unsigned __int8 v58;
  const re::IntrospectionBase *v59;
  unsigned __int8 v60;
  int v61;
  re::IntrospectionRegistry *v62;
  const re::IntrospectionBase *v63;
  const char *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  const re::IntrospectionBase *v70;
  void *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  re *v78;
  uint64_t *v79;
  const re::IntrospectionBase *v80;
  void *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t Settings;
  uint64_t v85;
  uint64_t v86;
  re *v87;
  uint64_t *v88;
  const re::IntrospectionBase *v89;
  void *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  re *v96;
  uint64_t *v97;
  const re::IntrospectionBase *v98;
  void *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  re *v105;
  uint64_t *v106;
  const re::IntrospectionBase *v107;
  void *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117[2];
  __int128 v118;
  const char *v119;
  __int128 v120;

  *(_QWORD *)&v118 = 0xA3C1F00635C716B4;
  *((_QWORD *)&v118 + 1) = "RenderGraphNode";
  re::StringID::destroyString((re::StringID *)&v118);
  *((_OWORD *)this + 2) = v114;
  v4 = atomic_load((unsigned __int8 *)&qword_25411EB58);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411EB58);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNodeBase((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNodeBase";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411EC28 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "name";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411EC30 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = atomic_load((unsigned __int8 *)&qword_25411EBC8);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25411EBC8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411EC68, 0);
        *(uint64_t *)((char *)&qword_25411EC78 + 6) = 0;
        qword_25411EC78 = 0;
        *(_QWORD *)&xmmword_25411EC88 = 0;
        *((_QWORD *)&xmmword_25411EC88 + 1) = 0xFFFFFFFFLL;
        qword_25411EC68 = (uint64_t)&off_24ED1FA08;
        qword_25411ECA0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25411EC98);
        qword_25411EC68 = (uint64_t)&off_24ED822D8;
        __cxa_guard_release(&qword_25411EBC8);
      }
      if ((_MergedGlobals_436 & 1) == 0)
      {
        v15 = (uint64_t *)qword_25411EB78;
        if (qword_25411EB78)
          goto LABEL_10;
        v16 = atomic_load((unsigned __int8 *)&qword_25411EB68);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25411EB68))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411EDE0, 0);
          *(_QWORD *)(v77 + 22) = 0;
          qword_25411EDF0 = 0;
          *(_QWORD *)&xmmword_25411EE00 = 0;
          *((_QWORD *)&xmmword_25411EE00 + 1) = 0xFFFFFFFFLL;
          qword_25411EDE0 = (uint64_t)&off_24ED7DAA8;
          qword_25411EE10 = (uint64_t)"TargetRead";
          dword_25411EE18 = 0;
          xmmword_25411EE20 = 0u;
          *(_OWORD *)&qword_25411EE30 = 0u;
          xmmword_25411EE40 = 0u;
          qword_25411EE50 = 0;
          __cxa_guard_release(&qword_25411EB68);
        }
        qword_25411EB78 = (uint64_t)&qword_25411EDE0;
        *(_QWORD *)&v120 = 0x10643527A3D5CELL;
        *((_QWORD *)&v120 + 1) = "TargetRead";
        re::StringID::destroyString((re::StringID *)&v120);
        xmmword_25411EE00 = v118;
        v18 = atomic_load((unsigned __int8 *)&qword_25411EB70);
        if ((v18 & 1) == 0)
        {
          v78 = (re *)__cxa_guard_acquire(&qword_25411EB70);
          if ((_DWORD)v78)
          {
            v79 = re::introspectionAllocator(v78);
            v81 = re::introspect_RenderGraphTargetHandle((re *)1, v80);
            v82 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v79 + 32))(v79, 72, 8);
            *(_DWORD *)v82 = 1;
            *(_QWORD *)(v82 + 8) = "targetHandle";
            *(_QWORD *)(v82 + 16) = v81;
            *(_QWORD *)(v82 + 24) = 0;
            *(_QWORD *)(v82 + 32) = 1;
            *(_DWORD *)(v82 + 40) = 0;
            *(_QWORD *)(v82 + 48) = 0;
            *(_QWORD *)(v82 + 56) = 0;
            *(_DWORD *)(v82 + 64) = 0;
            qword_25411EBE8 = v82;
            v83 = re::introspectionAllocator((re *)v82);
            Settings = re::introspect_ReadSettings((re::IntrospectionBase **)1);
            v85 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v83 + 32))(v83, 72, 8);
            *(_DWORD *)v85 = 1;
            *(_QWORD *)(v85 + 8) = "settings";
            *(_QWORD *)(v85 + 16) = Settings;
            *(_QWORD *)(v85 + 24) = 0;
            *(_QWORD *)(v85 + 32) = 0x1000000002;
            *(_DWORD *)(v85 + 40) = 0;
            *(_QWORD *)(v85 + 48) = 0;
            *(_QWORD *)(v85 + 56) = 0;
            *(_DWORD *)(v85 + 64) = 0;
            qword_25411EBF0 = v85;
            __cxa_guard_release(&qword_25411EB70);
          }
        }
        qword_25411EDF0 = 0x2000000008;
        v15 = &qword_25411EDE0;
        dword_25411EDF8 = 8;
        word_25411EDFC = 0;
        dword_25411EE18 = 2;
        *(_QWORD *)&xmmword_25411EE20 = &qword_25411EBE8;
        *((_QWORD *)&xmmword_25411EE20 + 1) = re::internal::defaultConstruct<re::TargetRead>;
        qword_25411EE30 = (uint64_t)re::internal::defaultDestruct<re::TargetRead>;
        *(_QWORD *)&xmmword_25411EE40 = 0;
        qword_25411EE38 = 0;
        *((_QWORD *)&xmmword_25411EE40 + 1) = re::internal::defaultConstructV2<re::TargetRead>;
        qword_25411EE50 = (uint64_t)re::internal::defaultDestructV2<re::TargetRead>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411EDE0, v17);
        v120 = v118;
        if ((_MergedGlobals_436 & 1) == 0)
        {
LABEL_10:
          _MergedGlobals_436 = 1;
          v19 = *((_DWORD *)v15 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411EC68, 0);
          qword_25411EC78 = 0x2800000003;
          dword_25411EC80 = v19;
          word_25411EC84 = 0;
          *(_QWORD *)&xmmword_25411EC88 = 0;
          *((_QWORD *)&xmmword_25411EC88 + 1) = 0xFFFFFFFFLL;
          qword_25411EC98 = (uint64_t)v15;
          qword_25411ECA0 = 0;
          qword_25411EC68 = (uint64_t)&off_24ED822D8;
          re::IntrospectionRegistry::add(v20, v21);
          re::getPrettyTypeName((re *)&qword_25411EC68, (const re::IntrospectionBase *)&v118);
          if ((BYTE8(v118) & 1) != 0)
            v22 = v119;
          else
            v22 = (char *)&v118 + 9;
          if ((_QWORD)v118 && (BYTE8(v118) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v118 + 40))();
          v116 = *((_OWORD *)v15 + 2);
          v23 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v117);
          if (v23)
          {
            v24 = *v23;
            *((_QWORD *)&v115 + 1) = v24;
          }
          else
          {
            v120 = v116;
            re::TypeBuilder::beginListType((uint64_t)&v118, v117, 1, 0x28uLL, 8uLL, &v120);
            re::TypeBuilder::setConstructor((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v118, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v118, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v118, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v118, v25);
          }
          xmmword_25411EC88 = v115;
          re::StringID::destroyString((re::StringID *)v117);
        }
      }
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "TargetReads";
      *(_QWORD *)(v26 + 16) = &qword_25411EC68;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0xB000000002;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_25411EC38 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v28 = atomic_load((unsigned __int8 *)&qword_25411EBD0);
      if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_25411EBD0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411ECA8, 0);
        *(uint64_t *)((char *)&qword_25411ECB8 + 6) = 0;
        qword_25411ECB8 = 0;
        *(_QWORD *)&xmmword_25411ECC8 = 0;
        *((_QWORD *)&xmmword_25411ECC8 + 1) = 0xFFFFFFFFLL;
        qword_25411ECA8 = (uint64_t)&off_24ED1FA08;
        qword_25411ECE0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25411ECD8);
        qword_25411ECA8 = (uint64_t)&off_24ED82370;
        __cxa_guard_release(&qword_25411EBD0);
      }
      if ((byte_25411EB51 & 1) == 0)
      {
        v29 = (uint64_t *)qword_25411EB90;
        if (qword_25411EB90)
          goto LABEL_26;
        v30 = atomic_load((unsigned __int8 *)&qword_25411EB80);
        if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_25411EB80))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411EE58, 0);
          *(_QWORD *)(v86 + 22) = 0;
          qword_25411EE68 = 0;
          *(_QWORD *)&xmmword_25411EE78 = 0;
          *((_QWORD *)&xmmword_25411EE78 + 1) = 0xFFFFFFFFLL;
          qword_25411EE58 = (uint64_t)&off_24ED7DAA8;
          qword_25411EE88 = (uint64_t)"TargetWrite";
          dword_25411EE90 = 0;
          *(_OWORD *)(v86 + 64) = 0u;
          *(_OWORD *)(v86 + 80) = 0u;
          *(_OWORD *)(v86 + 96) = 0u;
          qword_25411EEC8 = 0;
          __cxa_guard_release(&qword_25411EB80);
        }
        qword_25411EB90 = (uint64_t)&qword_25411EE58;
        *(_QWORD *)&v120 = 0x1FC226FCD6FE15CLL;
        *((_QWORD *)&v120 + 1) = "TargetWrite";
        re::StringID::destroyString((re::StringID *)&v120);
        xmmword_25411EE78 = v118;
        v32 = atomic_load((unsigned __int8 *)&qword_25411EB88);
        if ((v32 & 1) == 0)
        {
          v87 = (re *)__cxa_guard_acquire(&qword_25411EB88);
          if ((_DWORD)v87)
          {
            v88 = re::introspectionAllocator(v87);
            v90 = re::introspect_RenderGraphTargetHandle((re *)1, v89);
            v91 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v88 + 32))(v88, 72, 8);
            *(_DWORD *)v91 = 1;
            *(_QWORD *)(v91 + 8) = "targetHandle";
            *(_QWORD *)(v91 + 16) = v90;
            *(_QWORD *)(v91 + 24) = 0;
            *(_QWORD *)(v91 + 32) = 1;
            *(_DWORD *)(v91 + 40) = 0;
            *(_QWORD *)(v91 + 48) = 0;
            *(_QWORD *)(v91 + 56) = 0;
            *(_DWORD *)(v91 + 64) = 0;
            qword_25411EBF8 = v91;
            v92 = re::introspectionAllocator((re *)v91);
            v93 = re::introspect_WriteSettings((re::IntrospectionBase **)1);
            v94 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v92 + 32))(v92, 72, 8);
            *(_DWORD *)v94 = 1;
            *(_QWORD *)(v94 + 8) = "settings";
            *(_QWORD *)(v94 + 16) = v93;
            *(_QWORD *)(v94 + 24) = 0;
            *(_QWORD *)(v94 + 32) = 0x1000000002;
            *(_DWORD *)(v94 + 40) = 0;
            *(_QWORD *)(v94 + 48) = 0;
            *(_QWORD *)(v94 + 56) = 0;
            *(_DWORD *)(v94 + 64) = 0;
            qword_25411EC00 = v94;
            __cxa_guard_release(&qword_25411EB88);
          }
        }
        qword_25411EE68 = 0x4000000008;
        v29 = &qword_25411EE58;
        dword_25411EE70 = 16;
        word_25411EE74 = 0;
        dword_25411EE90 = 2;
        qword_25411EE98 = (uint64_t)&qword_25411EBF8;
        qword_25411EEA0 = (uint64_t)re::internal::defaultConstruct<re::TargetWrite>;
        qword_25411EEA8 = (uint64_t)re::internal::defaultDestruct<re::TargetWrite>;
        qword_25411EEB8 = 0;
        qword_25411EEB0 = 0;
        qword_25411EEC0 = (uint64_t)re::internal::defaultConstructV2<re::TargetWrite>;
        qword_25411EEC8 = (uint64_t)re::internal::defaultDestructV2<re::TargetWrite>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411EE58, v31);
        v120 = v118;
        if ((byte_25411EB51 & 1) == 0)
        {
LABEL_26:
          byte_25411EB51 = 1;
          v33 = *((_DWORD *)v29 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411ECA8, 0);
          qword_25411ECB8 = 0x2800000003;
          dword_25411ECC0 = v33;
          word_25411ECC4 = 0;
          *(_QWORD *)&xmmword_25411ECC8 = 0;
          *((_QWORD *)&xmmword_25411ECC8 + 1) = 0xFFFFFFFFLL;
          qword_25411ECD8 = (uint64_t)v29;
          qword_25411ECE0 = 0;
          qword_25411ECA8 = (uint64_t)&off_24ED82370;
          re::IntrospectionRegistry::add(v34, v35);
          re::getPrettyTypeName((re *)&qword_25411ECA8, (const re::IntrospectionBase *)&v118);
          if ((BYTE8(v118) & 1) != 0)
            v36 = v119;
          else
            v36 = (char *)&v118 + 9;
          if ((_QWORD)v118 && (BYTE8(v118) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v118 + 40))();
          v116 = *((_OWORD *)v29 + 2);
          v37 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v117);
          if (v37)
          {
            v38 = *v37;
            *((_QWORD *)&v115 + 1) = v38;
          }
          else
          {
            v120 = v116;
            re::TypeBuilder::beginListType((uint64_t)&v118, v117, 1, 0x28uLL, 8uLL, &v120);
            re::TypeBuilder::setConstructor((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v118, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v118, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v118, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v118, v39);
          }
          xmmword_25411ECC8 = v115;
          re::StringID::destroyString((re::StringID *)v117);
        }
      }
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "TargetWrites";
      *(_QWORD *)(v40 + 16) = &qword_25411ECA8;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0xD800000003;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_25411EC40 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v42 = atomic_load((unsigned __int8 *)&qword_25411EBD8);
      if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_25411EBD8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411ECE8, 0);
        *(_QWORD *)(v75 + 22) = 0;
        qword_25411ECF8 = 0;
        *(_QWORD *)&xmmword_25411ED08 = 0;
        *((_QWORD *)&xmmword_25411ED08 + 1) = 0xFFFFFFFFLL;
        qword_25411ECE8 = (uint64_t)&off_24ED1FA08;
        qword_25411ED20 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25411ED18);
        qword_25411ECE8 = (uint64_t)&off_24ED82408;
        __cxa_guard_release(&qword_25411EBD8);
      }
      if ((byte_25411EB52 & 1) == 0)
      {
        v43 = (uint64_t *)qword_25411EBA8;
        if (qword_25411EBA8)
          goto LABEL_42;
        v44 = atomic_load((unsigned __int8 *)&qword_25411EB98);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_25411EB98))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411EED0, 0);
          *(_QWORD *)(v95 + 22) = 0;
          qword_25411EEE0 = 0;
          *(_QWORD *)&xmmword_25411EEF0 = 0;
          *((_QWORD *)&xmmword_25411EEF0 + 1) = 0xFFFFFFFFLL;
          qword_25411EED0 = (uint64_t)&off_24ED7DAA8;
          qword_25411EF00 = (uint64_t)"BufferRead";
          dword_25411EF08 = 0;
          xmmword_25411EF10 = 0u;
          *(_OWORD *)&qword_25411EF20 = 0u;
          xmmword_25411EF30 = 0u;
          qword_25411EF40 = 0;
          __cxa_guard_release(&qword_25411EB98);
        }
        qword_25411EBA8 = (uint64_t)&qword_25411EED0;
        *(_QWORD *)&v120 = 0xD20F3D0E03C2CLL;
        *((_QWORD *)&v120 + 1) = "BufferRead";
        re::StringID::destroyString((re::StringID *)&v120);
        xmmword_25411EEF0 = v118;
        v46 = atomic_load((unsigned __int8 *)&qword_25411EBA0);
        if ((v46 & 1) == 0)
        {
          v96 = (re *)__cxa_guard_acquire(&qword_25411EBA0);
          if ((_DWORD)v96)
          {
            v97 = re::introspectionAllocator(v96);
            v99 = re::introspect_RenderGraphBufferHandle((re *)1, v98);
            v100 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v97 + 32))(v97, 72, 8);
            *(_DWORD *)v100 = 1;
            *(_QWORD *)(v100 + 8) = "bufferHandle";
            *(_QWORD *)(v100 + 16) = v99;
            *(_QWORD *)(v100 + 24) = 0;
            *(_QWORD *)(v100 + 32) = 1;
            *(_DWORD *)(v100 + 40) = 0;
            *(_QWORD *)(v100 + 48) = 0;
            *(_QWORD *)(v100 + 56) = 0;
            *(_DWORD *)(v100 + 64) = 0;
            qword_25411EC08 = v100;
            v101 = re::introspectionAllocator((re *)v100);
            v102 = re::introspect_ReadSettings((re::IntrospectionBase **)1);
            v103 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v101 + 32))(v101, 72, 8);
            *(_DWORD *)v103 = 1;
            *(_QWORD *)(v103 + 8) = "settings";
            *(_QWORD *)(v103 + 16) = v102;
            *(_QWORD *)(v103 + 24) = 0;
            *(_QWORD *)(v103 + 32) = 0x1000000002;
            *(_DWORD *)(v103 + 40) = 0;
            *(_QWORD *)(v103 + 48) = 0;
            *(_QWORD *)(v103 + 56) = 0;
            *(_DWORD *)(v103 + 64) = 0;
            qword_25411EC10 = v103;
            __cxa_guard_release(&qword_25411EBA0);
          }
        }
        qword_25411EEE0 = 0x2000000008;
        v43 = &qword_25411EED0;
        dword_25411EEE8 = 8;
        word_25411EEEC = 0;
        dword_25411EF08 = 2;
        *(_QWORD *)&xmmword_25411EF10 = &qword_25411EC08;
        *((_QWORD *)&xmmword_25411EF10 + 1) = re::internal::defaultConstruct<re::BufferRead>;
        qword_25411EF20 = (uint64_t)re::internal::defaultDestruct<re::BufferRead>;
        *(_QWORD *)&xmmword_25411EF30 = 0;
        qword_25411EF28 = 0;
        *((_QWORD *)&xmmword_25411EF30 + 1) = re::internal::defaultConstructV2<re::BufferRead>;
        qword_25411EF40 = (uint64_t)re::internal::defaultDestructV2<re::BufferRead>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411EED0, v45);
        v120 = v118;
        if ((byte_25411EB52 & 1) == 0)
        {
LABEL_42:
          byte_25411EB52 = 1;
          v47 = *((_DWORD *)v43 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411ECE8, 0);
          qword_25411ECF8 = 0x2800000003;
          dword_25411ED00 = v47;
          word_25411ED04 = 0;
          *(_QWORD *)&xmmword_25411ED08 = 0;
          *((_QWORD *)&xmmword_25411ED08 + 1) = 0xFFFFFFFFLL;
          qword_25411ED18 = (uint64_t)v43;
          qword_25411ED20 = 0;
          qword_25411ECE8 = (uint64_t)&off_24ED82408;
          re::IntrospectionRegistry::add(v48, v49);
          re::getPrettyTypeName((re *)&qword_25411ECE8, (const re::IntrospectionBase *)&v118);
          if ((BYTE8(v118) & 1) != 0)
            v50 = v119;
          else
            v50 = (char *)&v118 + 9;
          if ((_QWORD)v118 && (BYTE8(v118) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v118 + 40))();
          v116 = *((_OWORD *)v43 + 2);
          v51 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v117);
          if (v51)
          {
            v52 = *v51;
            *((_QWORD *)&v115 + 1) = v52;
          }
          else
          {
            v120 = v116;
            re::TypeBuilder::beginListType((uint64_t)&v118, v117, 1, 0x28uLL, 8uLL, &v120);
            re::TypeBuilder::setConstructor((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v118, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v118, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v118, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v118, v53);
          }
          xmmword_25411ED08 = v115;
          re::StringID::destroyString((re::StringID *)v117);
        }
      }
      v54 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v54 = 1;
      *(_QWORD *)(v54 + 8) = "BufferReads";
      *(_QWORD *)(v54 + 16) = &qword_25411ECE8;
      *(_QWORD *)(v54 + 24) = 0;
      *(_QWORD *)(v54 + 32) = 0x6000000004;
      *(_DWORD *)(v54 + 40) = 0;
      *(_QWORD *)(v54 + 48) = 0;
      *(_QWORD *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_25411EC48 = v54;
      v55 = re::introspectionAllocator((re *)v54);
      v56 = atomic_load((unsigned __int8 *)&qword_25411EBE0);
      if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_25411EBE0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411ED28, 0);
        *(_QWORD *)(v76 + 22) = 0;
        qword_25411ED38 = 0;
        *(_QWORD *)&xmmword_25411ED48 = 0;
        *((_QWORD *)&xmmword_25411ED48 + 1) = 0xFFFFFFFFLL;
        qword_25411ED28 = (uint64_t)&off_24ED1FA08;
        qword_25411ED60 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25411ED58);
        qword_25411ED28 = (uint64_t)&off_24ED824A0;
        __cxa_guard_release(&qword_25411EBE0);
      }
      if ((byte_25411EB53 & 1) == 0)
      {
        v57 = (uint64_t *)qword_25411EBC0;
        if (qword_25411EBC0)
          goto LABEL_58;
        v58 = atomic_load((unsigned __int8 *)&qword_25411EBB0);
        if ((v58 & 1) == 0 && __cxa_guard_acquire(&qword_25411EBB0))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411EF48, 0);
          *(_QWORD *)(v104 + 22) = 0;
          qword_25411EF58 = 0;
          *(_QWORD *)&xmmword_25411EF68 = 0;
          *((_QWORD *)&xmmword_25411EF68 + 1) = 0xFFFFFFFFLL;
          qword_25411EF48 = (uint64_t)&off_24ED7DAA8;
          qword_25411EF78 = (uint64_t)"BufferWrite";
          dword_25411EF80 = 0;
          *(_OWORD *)(v104 + 64) = 0u;
          *(_OWORD *)(v104 + 80) = 0u;
          *(_OWORD *)(v104 + 96) = 0u;
          qword_25411EFB8 = 0;
          __cxa_guard_release(&qword_25411EBB0);
        }
        qword_25411EBC0 = (uint64_t)&qword_25411EF48;
        *(_QWORD *)&v120 = 0x196FD864BC046BELL;
        *((_QWORD *)&v120 + 1) = "BufferWrite";
        re::StringID::destroyString((re::StringID *)&v120);
        xmmword_25411EF68 = v118;
        v60 = atomic_load((unsigned __int8 *)&qword_25411EBB8);
        if ((v60 & 1) == 0)
        {
          v105 = (re *)__cxa_guard_acquire(&qword_25411EBB8);
          if ((_DWORD)v105)
          {
            v106 = re::introspectionAllocator(v105);
            v108 = re::introspect_RenderGraphBufferHandle((re *)1, v107);
            v109 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v106 + 32))(v106, 72, 8);
            *(_DWORD *)v109 = 1;
            *(_QWORD *)(v109 + 8) = "bufferHandle";
            *(_QWORD *)(v109 + 16) = v108;
            *(_QWORD *)(v109 + 24) = 0;
            *(_QWORD *)(v109 + 32) = 1;
            *(_DWORD *)(v109 + 40) = 0;
            *(_QWORD *)(v109 + 48) = 0;
            *(_QWORD *)(v109 + 56) = 0;
            *(_DWORD *)(v109 + 64) = 0;
            qword_25411EC18 = v109;
            v110 = re::introspectionAllocator((re *)v109);
            v111 = re::introspect_WriteSettings((re::IntrospectionBase **)1);
            v112 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v110 + 32))(v110, 72, 8);
            *(_DWORD *)v112 = 1;
            *(_QWORD *)(v112 + 8) = "settings";
            *(_QWORD *)(v112 + 16) = v111;
            *(_QWORD *)(v112 + 24) = 0;
            *(_QWORD *)(v112 + 32) = 0x1000000002;
            *(_DWORD *)(v112 + 40) = 0;
            *(_QWORD *)(v112 + 48) = 0;
            *(_QWORD *)(v112 + 56) = 0;
            *(_DWORD *)(v112 + 64) = 0;
            qword_25411EC20 = v112;
            __cxa_guard_release(&qword_25411EBB8);
          }
        }
        qword_25411EF58 = 0x4000000008;
        v57 = &qword_25411EF48;
        dword_25411EF60 = 16;
        word_25411EF64 = 0;
        dword_25411EF80 = 2;
        qword_25411EF88 = (uint64_t)&qword_25411EC18;
        qword_25411EF90 = (uint64_t)re::internal::defaultConstruct<re::BufferWrite>;
        qword_25411EF98 = (uint64_t)re::internal::defaultDestruct<re::BufferWrite>;
        qword_25411EFA8 = 0;
        qword_25411EFA0 = 0;
        qword_25411EFB0 = (uint64_t)re::internal::defaultConstructV2<re::BufferWrite>;
        qword_25411EFB8 = (uint64_t)re::internal::defaultDestructV2<re::BufferWrite>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25411EF48, v59);
        v120 = v118;
        if ((byte_25411EB53 & 1) == 0)
        {
LABEL_58:
          byte_25411EB53 = 1;
          v61 = *((_DWORD *)v57 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411ED28, 0);
          qword_25411ED38 = 0x2800000003;
          dword_25411ED40 = v61;
          word_25411ED44 = 0;
          *(_QWORD *)&xmmword_25411ED48 = 0;
          *((_QWORD *)&xmmword_25411ED48 + 1) = 0xFFFFFFFFLL;
          qword_25411ED58 = (uint64_t)v57;
          qword_25411ED60 = 0;
          qword_25411ED28 = (uint64_t)&off_24ED824A0;
          re::IntrospectionRegistry::add(v62, v63);
          re::getPrettyTypeName((re *)&qword_25411ED28, (const re::IntrospectionBase *)&v118);
          if ((BYTE8(v118) & 1) != 0)
            v64 = v119;
          else
            v64 = (char *)&v118 + 9;
          if ((_QWORD)v118 && (BYTE8(v118) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v118 + 40))();
          v116 = *((_OWORD *)v57 + 2);
          v65 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v117);
          if (v65)
          {
            v66 = *v65;
            *((_QWORD *)&v115 + 1) = v66;
          }
          else
          {
            v120 = v116;
            re::TypeBuilder::beginListType((uint64_t)&v118, v117, 1, 0x28uLL, 8uLL, &v120);
            re::TypeBuilder::setConstructor((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v118, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v118, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v118, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v118, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v118, v67);
          }
          xmmword_25411ED48 = v115;
          re::StringID::destroyString((re::StringID *)v117);
        }
      }
      v68 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 72, 8);
      *(_DWORD *)v68 = 1;
      *(_QWORD *)(v68 + 8) = "BufferWrites";
      *(_QWORD *)(v68 + 16) = &qword_25411ED28;
      *(_QWORD *)(v68 + 24) = 0;
      *(_QWORD *)(v68 + 32) = 0x8800000005;
      *(_DWORD *)(v68 + 40) = 0;
      *(_QWORD *)(v68 + 48) = 0;
      *(_QWORD *)(v68 + 56) = 0;
      *(_DWORD *)(v68 + 64) = 0;
      qword_25411EC50 = v68;
      v69 = re::introspectionAllocator((re *)v68);
      v71 = re::introspect_size_t((re *)1, v70);
      v72 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v69 + 32))(v69, 72, 8);
      *(_DWORD *)v72 = 1;
      *(_QWORD *)(v72 + 8) = "ThreadgroupMemoryLength";
      *(_QWORD *)(v72 + 16) = v71;
      *(_QWORD *)(v72 + 24) = 0;
      *(_QWORD *)(v72 + 32) = 0x4800000006;
      *(_DWORD *)(v72 + 40) = 0;
      *(_QWORD *)(v72 + 48) = 0;
      *(_QWORD *)(v72 + 56) = 0;
      *(_DWORD *)(v72 + 64) = 0;
      qword_25411EC58 = v72;
      v73 = re::introspectionAllocator((re *)v72);
      v74 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 16, 8);
      *(_DWORD *)v74 = 2;
      *(_QWORD *)(v74 + 8) = 0;
      qword_25411EC60 = v74;
      __cxa_guard_release(&qword_25411EB58);
    }
  }
  *((_QWORD *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((_QWORD *)this + 8) = &qword_25411EC28;
  re::IntrospectionRegistry::add(this, v3);
  v113 = v114;
}

uint64_t re::introspect_RenderGraphNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphNode>, this);
}

double re::internal::defaultConstruct<re::TargetRead>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = -1;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 19) = 0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a3 + 24) = 2;
  return result;
}

double re::internal::defaultConstructV2<re::TargetRead>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 19) = 0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a1 + 24) = 2;
  return result;
}

double re::internal::defaultConstruct<re::TargetWrite>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a3 + 8) = xmmword_226194BC0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = xmmword_2260E5D70;
  *(_WORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 52) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::TargetWrite>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_226194BC0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_2260E5D70;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

double re::internal::defaultConstruct<re::BufferRead>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = -1;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 19) = 0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a3 + 24) = 2;
  return result;
}

double re::internal::defaultConstructV2<re::BufferRead>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 19) = 0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(a1 + 24) = 2;
  return result;
}

double re::internal::defaultConstruct<re::BufferWrite>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a3 + 8) = xmmword_226194BC0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = xmmword_2260E5D70;
  *(_WORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 52) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::BufferWrite>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_226194BC0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_2260E5D70;
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

_QWORD *re::DynamicArray<re::TargetRead>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TargetRead>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TargetRead>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TargetRead>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TargetRead>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 32 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = -1;
          *v11 = *(_QWORD *)v8;
          v11[1] = *(_QWORD *)(v8 + 8);
          *((_OWORD *)v11 + 1) = *(_OWORD *)(v8 + 16);
          v8 += 32;
          v11 += 4;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::TargetWrite>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TargetWrite>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TargetWrite>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TargetWrite>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TargetWrite>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + (v9 << 6);
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = -1;
          *v11 = *(_QWORD *)v8;
          v11[1] = *(_QWORD *)(v8 + 8);
          v12 = *(_OWORD *)(v8 + 16);
          v13 = *(_OWORD *)(v8 + 48);
          *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 3) = v13;
          *((_OWORD *)v11 + 1) = v12;
          v8 += 64;
          v11 += 8;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::TargetRead>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::TargetRead>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::TargetRead>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::TargetRead>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::TargetRead>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::TargetRead>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::TargetRead>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::TargetRead>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::TargetRead>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::TargetRead>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::TargetRead>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v10.n128_u64[0] = 0;
  v10.n128_u64[1] = -1;
  v12 = 2;
  re::DynamicArray<re::TargetRead>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 32 * *((_QWORD *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::TargetRead>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::TargetRead>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

_QWORD *re::DynamicArray<re::TargetRead>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::TargetRead>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 32 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = -1;
        *(_DWORD *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 19) = 0;
        *(_QWORD *)(v7 + 24) = 2;
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::TargetRead>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::TargetRead>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::TargetRead>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 32 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 32;
        v12 -= 32;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::TargetWrite>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::TargetWrite>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::TargetWrite>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::TargetWrite>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::TargetWrite>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::TargetWrite>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::TargetWrite>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::TargetWrite>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::TargetWrite>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::TargetWrite>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::TargetWrite>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  v11 = 0u;
  v10[1] = -1;
  DWORD1(v11) = 1;
  v12 = xmmword_2260E5D70;
  v13 = 0u;
  DWORD2(v13) = 0;
  re::DynamicArray<re::TargetWrite>::add(this, (uint64_t)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + (*((_QWORD *)this + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::TargetWrite>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::TargetWrite>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

_QWORD *re::DynamicArray<re::TargetWrite>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::TargetWrite>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = v4 << 6;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)v7 = 0;
        *(_OWORD *)(v7 + 8) = xmmword_226194BC0;
        *(_OWORD *)(v7 + 32) = xmmword_2260E5D70;
        *(_WORD *)(v7 + 48) = 0;
        *(_DWORD *)(v7 + 52) = 0;
        *(_DWORD *)(v7 + 56) = 0;
        v6 += 64;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::TargetWrite>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::TargetWrite>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::TargetWrite>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = v10 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 64;
        v12 -= 64;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::TargetWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BufferRead>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::BufferRead>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::BufferRead>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::BufferRead>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BufferRead>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::TargetRead>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BufferRead>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::TargetRead>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::TargetRead>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::TargetRead>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::BufferRead>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v10.n128_u64[0] = 0;
  v10.n128_u64[1] = -1;
  v12 = 2;
  re::DynamicArray<re::TargetRead>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 32 * *((_QWORD *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::BufferRead>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::BufferRead>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::TargetRead>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::TargetRead>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::TargetRead>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 32 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 32;
        v12 -= 32;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferRead>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BufferWrite>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::BufferWrite>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::BufferWrite>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::BufferWrite>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BufferWrite>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::TargetWrite>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BufferWrite>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::TargetWrite>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::TargetWrite>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::TargetWrite>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::BufferWrite>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _QWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  v11 = 0u;
  v10[1] = -1;
  DWORD1(v11) = 1;
  v12 = xmmword_2260E5D70;
  v13 = 0u;
  DWORD2(v13) = 0;
  re::DynamicArray<re::TargetWrite>::add(this, (uint64_t)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + (*((_QWORD *)this + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::BufferWrite>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::BufferWrite>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::TargetWrite>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::TargetWrite>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::TargetWrite>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = v10 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 64;
        v12 -= 64;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BufferWrite>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void processShadowsToGenerate(unint64_t a1, void **a2, _OWORD *a3, uint64_t a4, unint64_t a5, re::MaterialParameterTableBuilder *a6, re::PerFrameAllocatorGPU *a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  re::MaterialParameterTableBuilder *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  char *v40;
  uint64_t v41;
  BOOL v42;
  re::Allocator **v43;
  re::MaterialParameterBlock *v44;
  int v45;
  id v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  re::MaterialParameterBlock *v59;
  int v60;
  id v61;
  re::PerFrameAllocatorGPU *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  size_t v68;
  _OWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  re::MaterialParameterBlock *v73;
  __int128 v74;
  __int128 v75;
  float v76;
  int v77;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  int v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  unint64_t v126;
  unsigned __int8 *v127;
  uint64_t v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  unint64_t v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  size_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  NSObject *v176;
  uint64_t v177;
  double v178;
  uint64_t v179;
  int v180;
  re *v181;
  const char *v182;
  unint64_t v183;
  const char *v184;
  uint64_t v185;
  _OWORD *v187;
  unint64_t v188;
  unint64_t v190;
  __int128 v191;
  void *v192;
  __int128 v193;
  uint64_t v194;
  unint64_t v195[2];
  unint64_t v196;
  __int128 v197;
  re::MaterialParameterBlock **v198;
  _QWORD *v199;
  uint64_t v202;
  __int128 v203;
  _QWORD v204[2];
  unint64_t v205;
  uint64_t v206;
  uint64_t v207[6];
  uint64_t v208;
  uint64_t v209[4];
  uint64_t v210[4];
  uint64_t v211[4];
  uint64_t v212[4];
  uint64_t v213[4];
  uint64_t v214[4];
  uint64_t v215[4];
  uint64_t v216[4];
  uint64_t v217[4];
  uint64_t v218[4];
  uint64_t v219[4];
  uint64_t v220[4];
  uint64_t v221[4];
  uint64_t v222[4];
  id v223;
  int v224;
  int v225;
  _QWORD v226[4];
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint8_t buf[112];
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  _BYTE v235[32];
  __int128 v236;
  _BYTE v237[48];
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _BYTE v241[32];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  re::MaterialParameterTableBuilder *v245;
  __int128 v246;
  int v247;
  __int128 v248;
  __int128 v249;
  _OWORD v250[3];
  __int128 v251;
  _BYTE v252[24];
  __int128 v253;
  int v254;
  _BYTE v255[48];
  __int128 v256;
  _BYTE v257[44];
  uint64_t v258;

  v258 = *MEMORY[0x24BDAC8D0];
  v13 = atomic_load((unsigned __int8 *)&qword_25411EFC8);
  if ((v13 & 1) == 0)
  {
    v181 = (re *)__cxa_guard_acquire(&qword_25411EFC8);
    if ((_DWORD)v181)
    {
      _MergedGlobals_437 = re::hashString(v181, v182);
      __cxa_guard_release(&qword_25411EFC8);
    }
  }
  v14 = atomic_load((unsigned __int8 *)&qword_25411EFD8);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25411EFD8))
  {
    qword_25411EFD0 = re::getCombinedScopeHash(_MergedGlobals_437, v183, v184);
    __cxa_guard_release(&qword_25411EFD8);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 88);
  if (v15)
    goto LABEL_187;
  do
  {
    while (1)
    {
      v17 = re::WorldOrderedShadows::create((_anonymous_namespace_ *)a1, (uint64_t)v204);
      v18 = v205;
      v203 = v205;
      v202 = (uint64_t)a6;
      v190 = a5;
      if (!v205)
      {
        v19 = a6;
LABEL_25:
        a5 = (unint64_t)a3 + 56;
        v194 = *((_QWORD *)a3 + 7);
        v43 = (re::Allocator **)(a3 + 5);
        v192 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(*((re::Allocator **)a3 + 10), v19);
LABEL_26:
        v8 = v205;
        if (!v205)
        {
          v62 = *(re::PerFrameAllocatorGPU **)a5;
          a5 = (unint64_t)re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(*v43, v19);
          goto LABEL_39;
        }
        if (v205 < 0x666666666666667)
        {
          v49 = 40 * v205;
          v50 = (_QWORD *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, unint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, 40 * v205, 8);
          if (v50)
          {
            a1 = (unint64_t)v50;
            v198 = v43;
            v52 = v50;
            if (v8 != 1)
            {
              bzero(v50, v49 - 40);
              v52 = (_QWORD *)(a1 + v49 - 40);
            }
            v196 = 40 * v8;
            v9 = 0;
            v7 = 0;
            v52[4] = 0;
            *(_OWORD *)v52 = 0u;
            *((_OWORD *)v52 + 1) = 0u;
            v27 = (unint64_t)&v255[24];
            v18 = a1 + 16;
            do
            {
              v53 = v205;
              if (v205 <= v7)
              {
                *(_QWORD *)v257 = 0;
                memset(buf, 0, 80);
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                LODWORD(v250[0]) = 136315906;
                *(_QWORD *)((char *)v250 + 4) = "operator[]";
                WORD6(v250[0]) = 1024;
                *(_DWORD *)((char *)v250 + 14) = 797;
                WORD1(v250[1]) = 2048;
                *(_QWORD *)((char *)&v250[1] + 4) = v7;
                WORD6(v250[1]) = 2048;
                *(_QWORD *)((char *)&v250[1] + 14) = v53;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_178:
                *(_QWORD *)v257 = 0;
                memset(buf, 0, 80);
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                LODWORD(v250[0]) = 136315906;
                *(_QWORD *)((char *)v250 + 4) = "operator[]";
                WORD6(v250[0]) = 1024;
                *(_DWORD *)((char *)v250 + 14) = 468;
                WORD1(v250[1]) = 2048;
                *(_QWORD *)((char *)&v250[1] + 4) = v8;
                WORD6(v250[1]) = 2048;
                *(_QWORD *)((char *)&v250[1] + 14) = v8;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_179:
                v229 = 0;
                memset(buf, 0, 80);
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                LODWORD(v250[0]) = 136315906;
                *(_QWORD *)((char *)v250 + 4) = "operator[]";
                WORD6(v250[0]) = 1024;
                *(_DWORD *)((char *)v250 + 14) = 797;
                WORD1(v250[1]) = 2048;
                *(_QWORD *)((char *)&v250[1] + 4) = a1;
                WORD6(v250[1]) = 2048;
                *(_QWORD *)((char *)&v250[1] + 14) = v53;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_180:
                v229 = 0;
                memset(buf, 0, 80);
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                LODWORD(v250[0]) = 136315906;
                *(_QWORD *)((char *)v250 + 4) = "operator[]";
                WORD6(v250[0]) = 1024;
                *(_DWORD *)((char *)v250 + 14) = 468;
                WORD1(v250[1]) = 2048;
                *(_QWORD *)((char *)&v250[1] + 4) = a1;
                WORD6(v250[1]) = 2048;
                *(_QWORD *)((char *)&v250[1] + 14) = v7;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_181:
                v226[0] = 0;
                memset(buf, 0, 80);
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v255 = 136315906;
                *(_QWORD *)&v255[4] = "operator[]";
                *(_WORD *)&v255[12] = 1024;
                *(_DWORD *)&v255[14] = 797;
                *(_WORD *)&v255[18] = 2048;
                *(_QWORD *)&v255[20] = v27;
                *(_WORD *)&v255[28] = 2048;
                *(_QWORD *)&v255[30] = v9;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_182:
                v226[0] = 0;
                memset(buf, 0, 80);
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v255 = 136315906;
                *(_QWORD *)&v255[4] = "operator[]";
                *(_WORD *)&v255[12] = 1024;
                *(_DWORD *)&v255[14] = 468;
                *(_WORD *)&v255[18] = 2048;
                *(_QWORD *)&v255[20] = v7;
                *(_WORD *)&v255[28] = 2048;
                *(_QWORD *)&v255[30] = v7;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_183;
              }
              v54 = *(_OWORD *)(v206 + v9 + 16);
              *(_OWORD *)v255 = *(_OWORD *)(v206 + v9);
              *(_OWORD *)&v255[16] = v54;
              v55 = re::ShadowTileManager::dataForTile((uint64_t)a2, (unsigned __int16 *)&v255[24]);
              if (v8 == v7)
                goto LABEL_178;
              v57 = *(_QWORD *)(v55 + 192);
              v56 = *(_QWORD *)(v55 + 200);
              v58 = *(_OWORD *)(v55 + 176);
              *(_WORD *)(v18 - 16) = *(_WORD *)&v255[24];
              *(_OWORD *)(v18 - 8) = v58;
              *(_QWORD *)(v18 + 8) = v57;
              *(_QWORD *)(v18 + 16) = v56;
              ++v7;
              v18 += 40;
              v9 += 32;
            }
            while (v8 != v7);
            v59 = *v198;
            *(_QWORD *)v255 = 0x29BCD869CB9AA7DDLL;
            re::PerFrameAllocatorGPU::allocInternal(a7, v196, 0x10uLL, 0, buf);
            v60 = *(_DWORD *)&buf[8];
            memcpy((void *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]), (const void *)a1, v196);
            v61 = **(id **)&buf[24];
            *(_QWORD *)&v250[0] = v61;
            DWORD2(v250[0]) = v60;
            HIDWORD(v250[0]) = 40 * v8;
            re::MaterialParameterBlock::setBuffer(v59, (uint64_t *)v255, (uint64_t)v250, (uint64_t)buf);
            *(_QWORD *)buf = 0;
            if (v61)
            {

              *(_QWORD *)&v250[0] = 0;
            }
            v62 = *(re::PerFrameAllocatorGPU **)a5;
            a5 = (unint64_t)re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v59, v19);
            (*(void (**)(re::MaterialParameterTableBuilder *, unint64_t))(*(_QWORD *)v19 + 40))(v19, a1);
LABEL_39:
            v7 = v205;
            v188 = a5;
            a7 = v62;
            if (!v205)
            {
              v199 = 0;
              goto LABEL_46;
            }
            if (v205 >> 61)
              goto LABEL_193;
            a1 = 8 * v205;
            v64 = (_QWORD *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, unint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, 8 * v205, 8);
            if (!v64)
              goto LABEL_194;
            v66 = v64;
            v67 = v64;
            if (v7 != 1)
            {
              v68 = a1 - 8;
              bzero(v64, v68);
              v67 = (_QWORD *)((char *)v66 + v68);
            }
            v199 = v66;
            *v67 = 0;
LABEL_46:
            v227 = 0uLL;
            v228 = 0;
            a5 = (unint64_t)a6;
            re::FixedArray<int>::init<>((uint64_t *)&v227, (uint64_t)a6, v7);
            memset(v257, 0, 36);
            *(_QWORD *)&v257[36] = 0x7FFFFFFFLL;
            re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v257, (uint64_t)a6, 3);
            if (v7)
            {
              a1 = 0;
              v9 = (unint64_t)&buf[8];
              v8 = 0xBF58476D1CE4E5B9;
              v18 = 0x94D049BB133111EBLL;
              v27 = 0x7FFFFFFFLL;
              while (1)
              {
                v53 = v205;
                if (v205 <= a1)
                  goto LABEL_179;
                v69 = a3;
                v70 = v7;
                v71 = v206 + 32 * a1;
                v72 = re::ShadowTileManager::dataForTile((uint64_t)a2, (unsigned __int16 *)(v71 + 24));
                v73 = (re::MaterialParameterBlock *)*((_QWORD *)v69 + 9);
                re::MaterialParameterBlock::setFloat(v73, "receiverPlaneHeight", *(float *)v72, (uint64_t)v226);
                v226[0] = 0;
                re::MaterialParameterBlock::setFloat(v73, "receiverDepthNormalization", *(float *)(v72 + 4), (uint64_t)&v223);
                v223 = 0;
                re::MaterialParameterBlock::setFloat(v73, "floorPlaneHeight", *(float *)(v72 + 8), (uint64_t)v222);
                v222[0] = 0;
                re::MaterialParameterBlock::setInt(v73, "tileIndex", *(unsigned __int16 *)(v71 + 24), (uint64_t)v221);
                v221[0] = 0;
                v74 = *(_OWORD *)(v72 + 64);
                *(_OWORD *)v255 = *(_OWORD *)(v72 + 48);
                *(_OWORD *)&v255[16] = v74;
                v75 = *(_OWORD *)(v72 + 96);
                *(_OWORD *)&v255[32] = *(_OWORD *)(v72 + 80);
                v256 = v75;
                re::MaterialParameterBlock::setMatrix4x4F(v73, "tileProj", v255, (uint64_t)v220);
                v220[0] = 0;
                LODWORD(v250[0]) = *((_DWORD *)v69 + 48);
                *(_QWORD *)buf = 0x2651C5BB725E4431;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v219);
                v219[0] = 0;
                LODWORD(v250[0]) = *((_DWORD *)v69 + 47);
                *(_QWORD *)buf = 0x58F744A8543328D7;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v218);
                v218[0] = 0;
                LODWORD(v250[0]) = *((_DWORD *)v69 + 54);
                *(_QWORD *)buf = 0x13276C0E66FCCEDLL;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v217);
                v217[0] = 0;
                LODWORD(v250[0]) = *((_DWORD *)v69 + 55);
                *(_QWORD *)buf = 0x76708FF238D5F0A6;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v216);
                v216[0] = 0;
                v76 = cos(*((float *)v69 + 59) * 3.14159265 / 180.0);
                *(float *)v250 = v76;
                *(_QWORD *)buf = 0x7DDA5D55C0FC4FA9;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v215);
                v215[0] = 0;
                a3 = v69;
                v77 = *((_DWORD *)v69 + 60);
                a5 = (unint64_t)a6;
                LODWORD(v250[0]) = v77;
                *(_QWORD *)buf = 0x17E9B59A609C84C2;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v214);
                v214[0] = 0;
                if (*(_BYTE *)(v72 + 40))
                  _ZF = 1;
                else
                  _ZF = re::internal::shadows::g_enableShadowFlattening == 0;
                if (_ZF)
                  v79 = 1;
                else
                  v79 = 2;
                LODWORD(v250[0]) = v79;
                *(_QWORD *)buf = 0x5FE82A114F627B09;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 7, (uint64_t)v213);
                v213[0] = 0;
                LODWORD(v250[0]) = *(_DWORD *)(v72 + 12);
                *(_QWORD *)buf = 0x65BBCF6D7FDD200ALL;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v212);
                v212[0] = 0;
                LODWORD(v250[0]) = *(_DWORD *)(v72 + 16);
                *(_QWORD *)buf = 0x7300C2F63F7BC750;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v211);
                v211[0] = 0;
                LODWORD(v250[0]) = *(_DWORD *)(v72 + 20);
                *(_QWORD *)buf = 0x71A74BC906F47D1BLL;
                re::MaterialParameterBlock::setConstant(v73, (uint64_t *)buf, 4uLL, v250, 1, (uint64_t)v210);
                v210[0] = 0;
                v208 = 0x3559BD29F3DDB747;
                re::MaterialParameterBlock::setBinding(v73, &v208, "rendergraph", (uint64_t)"MeshShadowMippedReceiverDepthColorTexture", 2, (uint64_t)v209);
                v208 = 0;
                v209[0] = 0;
                v199[a1] = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v73, a6);
                v7 = *((_QWORD *)&v227 + 1);
                if (*((_QWORD *)&v227 + 1) <= a1)
                  goto LABEL_180;
                *(_DWORD *)(v228 + 4 * a1) = *(_DWORD *)(v72 + 24);
                v80 = re::HashTable<unsigned long long,re::PersistentShadowState::ClusterInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)(a2 + 16), (uint64_t *)(v72 + 32));
                v81 = *(_QWORD *)(v80 + 16);
                if (v81)
                  break;
LABEL_70:
                ++a1;
                v7 = v70;
                if (a1 == v70)
                  goto LABEL_71;
              }
              v82 = *(_QWORD **)(v80 + 32);
              v83 = &v82[2 * v81];
              while (2)
              {
                memset(&buf[8], 0, 20);
                *(_QWORD *)&buf[32] = 0;
                *(_QWORD *)buf = a6;
                re::DynamicArray<int>::setCapacity(buf, 0);
                ++*(_DWORD *)&buf[24];
                v84 = 0xBF58476D1CE4E5B9 * (*v82 ^ (*v82 >> 30));
                v85 = (0x94D049BB133111EBLL * (v84 ^ (v84 >> 27))) ^ ((0x94D049BB133111EBLL * (v84 ^ (v84 >> 27))) >> 31);
                if (*(_QWORD *)v257)
                {
                  v86 = v85 % *(unsigned int *)&v257[24];
                  v87 = *(unsigned int *)(*(_QWORD *)&v257[8] + 4 * v86);
                  if ((_DWORD)v87 != 0x7FFFFFFF)
                  {
                    while (*(_QWORD *)(*(_QWORD *)&v257[16] + (v87 << 6) + 16) != *v82)
                    {
                      v87 = *(_DWORD *)(*(_QWORD *)&v257[16] + (v87 << 6) + 8) & 0x7FFFFFFF;
                      if ((_DWORD)v87 == 0x7FFFFFFF)
                        goto LABEL_64;
                    }
                    v89 = *(_QWORD *)&v257[16] + (v87 << 6);
LABEL_66:
                    LODWORD(v250[0]) = a1;
                    re::DynamicArray<int>::add((_QWORD *)(v89 + 24), v250);
                    if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
                      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[32]);
                    v82 += 2;
                    if (v82 == v83)
                      goto LABEL_70;
                    continue;
                  }
                }
                else
                {
                  LODWORD(v86) = 0;
                }
                break;
              }
LABEL_64:
              v88 = re::HashTable<unsigned long long,re::DynamicArray<unsigned int>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v257, v86, v85, v82, (uint64_t)buf);
              ++*(_DWORD *)&v257[40];
              v89 = *(_QWORD *)&v257[16] + ((unint64_t)v88 << 6);
              goto LABEL_66;
            }
LABEL_71:
            v18 = *((_QWORD *)a3 + 6);
            *(_QWORD *)&v250[0] = v18;
            *((_QWORD *)&v250[0] + 1) = a5;
            *(_QWORD *)&v250[1] = v7;
            *((_QWORD *)&v250[1] + 1) = v199;
            v250[2] = v227;
            v90 = v228;
            v228 = 0;
            v227 = 0uLL;
            v91 = *((_QWORD *)a3 + 12);
            *(_QWORD *)&v251 = v90;
            *((_QWORD *)&v251 + 1) = v91;
            v254 = 0;
            *(_OWORD *)v252 = *(_OWORD *)v257;
            memset(v257, 0, 24);
            *(_QWORD *)&v252[16] = *(_QWORD *)&v257[16];
            v253 = *(_OWORD *)&v257[24];
            *(_OWORD *)&v257[24] = xmmword_2260F5A80;
            v92 = re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v257);
            if ((_QWORD)v227 && *((_QWORD *)&v227 + 1))
              (*(void (**)(double))(*(_QWORD *)v227 + 40))(v92);
            a1 = v205;
            memset(v257, 0, 24);
            re::FixedArray<re::ShadowInfo::BlurInfo>::init<>((uint64_t *)v257, a5, v205);
            if (a1)
            {
              v27 = 0;
              v7 = *(_QWORD *)&v257[8];
              v93 = *(char **)&v257[16];
              v8 = 24;
              do
              {
                v9 = v205;
                if (v205 <= v27)
                  goto LABEL_181;
                v94 = re::ShadowTileManager::dataForTile((uint64_t)a2, (unsigned __int16 *)(v206 + v8));
                if (v7 == v27)
                  goto LABEL_182;
                memcpy(v93, (const void *)(v94 + 224), 0x394uLL);
                ++v27;
                v93 += 928;
                v8 += 32;
              }
              while (a1 != v27);
            }
            memset(v255, 0, 24);
            a1 = *(_QWORD *)v257;
            v95 = v190;
            if (*(_QWORD *)v257)
            {
              a5 = *(_QWORD *)&v257[8];
              re::FixedArray<re::ShadowInfo::BlurInfo>::init<>((uint64_t *)v255, *(uint64_t *)v257, *(unint64_t *)&v257[8]);
              if (*(_QWORD *)&v255[8] != a5)
                goto LABEL_195;
              if (a5)
              {
                v97 = *(_QWORD *)&v257[16];
                memmove(*(void **)&v255[16], *(const void **)&v257[16], 928 * a5 - 12);
                v98 = v97;
                v95 = v190;
                (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v98);
              }
            }
            a5 = (unint64_t)buf;
            a1 = (unint64_t)&v227;
            *(_QWORD *)buf = 0;
            *(_OWORD *)&buf[16] = 0u;
            v7 = (unint64_t)buf;
            *(_QWORD *)&buf[8] = a6;
            *(_QWORD *)&buf[32] = a6;
            *(_OWORD *)&buf[40] = 0u;
            *(_DWORD *)&buf[56] = -1;
            memset(&buf[60], 0, 40);
            *(_QWORD *)&buf[100] = 0x7FFFFFFFLL;
            re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&buf[64], (uint64_t)a6, 3);
            v232 = 0u;
            v233 = 0u;
            v231 = 0u;
            v234 = 0;
            *(_QWORD *)&v233 = a6;
            *(_DWORD *)v235 = 1065353216;
            *(_OWORD *)&v235[4] = xmmword_22610CC60;
            *(_QWORD *)&v235[20] = 0x3CF5C28F3F800000;
            *(_WORD *)&v235[28] = 0;
            v236 = xmmword_22610CC70;
            *(_QWORD *)v237 = 0x3EB333333F800000;
            v237[8] = 1;
            *(_OWORD *)&v237[12] = xmmword_22610CC80;
            *(_OWORD *)&v237[28] = xmmword_22610CC90;
            *(_DWORD *)&v237[44] = 1106247680;
            *(_QWORD *)&v238 = 0x419800003DCCCCCDLL;
            BYTE8(v238) = 0;
            v239 = xmmword_2260E5F50;
            LOBYTE(v240) = 1;
            *(_QWORD *)v241 = 0x3F8000003F2D42C4;
            *(_DWORD *)&v241[8] = 10;
            *(_OWORD *)&v241[12] = xmmword_22610CCA0;
            *(_DWORD *)&v241[28] = 1056964608;
            *(_QWORD *)&v242 = 0x4000000000000000;
            WORD4(v242) = 0;
            WORD6(v242) = 1;
            BYTE14(v242) = 0;
            *(_QWORD *)&v243 = 897988541;
            *((_QWORD *)&v243 + 1) = 0x3E80000000000000;
            *(_QWORD *)&v248 = 0;
            v247 = 0;
            v246 = 0u;
            v8 = (unint64_t)&v246;
            *(_QWORD *)&v244 = 0x103DCCCCCDLL;
            v245 = a6;
            a2 = (void **)&v245;
            re::DynamicArray<re::EvaluationRegister>::setCapacity(&v245, 0);
            ++v247;
            *((_QWORD *)&v248 + 1) = 0;
            v249 = 0u;
            *((_QWORD *)&v231 + 1) = v188;
            *(_QWORD *)&v232 = v194;
            *((_QWORD *)&v232 + 1) = v192;
            *(_QWORD *)&v231 = a7;
            *(_QWORD *)buf = v18;
            v100 = *(_QWORD *)&buf[8];
            if (!*(_QWORD *)&buf[8] || *(_QWORD *)&buf[8] == *((_QWORD *)&v250[0] + 1))
            {
              v101 = *(_QWORD *)&buf[16];
              v102 = *(_QWORD *)&buf[24];
              *(_QWORD *)&buf[8] = *((_QWORD *)&v250[0] + 1);
              *(_OWORD *)&buf[16] = v250[1];
              *((_QWORD *)&v250[0] + 1) = v100;
              *(_QWORD *)&v250[1] = v101;
              *((_QWORD *)&v250[1] + 1) = v102;
              re::FixedArray<float>::operator=((uint64_t *)&buf[32], (uint64_t *)&v250[2]);
              v104 = *(_QWORD *)v252;
              *(_QWORD *)&buf[56] = *((_QWORD *)&v251 + 1);
              if (!*(_QWORD *)&buf[64] || *(_QWORD *)&buf[64] == *(_QWORD *)v252)
              {
                *(_QWORD *)v252 = *(_QWORD *)&buf[64];
                v112 = *(_OWORD *)&buf[72];
                *(_QWORD *)&buf[64] = v104;
                *(_QWORD *)&buf[72] = *(_QWORD *)&v252[8];
                *(_QWORD *)&buf[80] = *(_QWORD *)&v252[16];
                *(_OWORD *)&v252[8] = v112;
                v113 = *(_OWORD *)&buf[88];
                *(_OWORD *)&buf[88] = v253;
                v253 = v113;
              }
              else
              {
                if (*(_DWORD *)&buf[92])
                {
                  if (*(_DWORD *)&buf[88])
                    memset_pattern16(*(void **)&buf[72], &unk_2260EB7B0, 4 * *(unsigned int *)&buf[88]);
                  if (*(_DWORD *)&buf[96])
                  {
                    a1 = 0;
                    a5 = 0;
                    do
                    {
                      re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(*(_QWORD *)&buf[80] + a1);
                      ++a5;
                      a1 += 64;
                    }
                    while (a5 < *(unsigned int *)&buf[96]);
                  }
                  *(_DWORD *)&buf[96] = 0;
                  *(_DWORD *)&buf[92] = 0;
                  *(_DWORD *)&buf[100] = 0x7FFFFFFF;
                  ++*(_DWORD *)&buf[104];
                }
                if (v104)
                {
                  v103 = DWORD1(v253);
                  if (*(_DWORD *)&buf[88] < DWORD1(v253))
                    re::HashTable<unsigned long long,re::DynamicArray<unsigned int>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&buf[64], DWORD1(v253));
                  v105 = DWORD2(v253);
                  if (DWORD2(v253))
                  {
                    v106 = 0;
                    v107 = 0;
                    do
                    {
                      v108 = (_QWORD *)(*(_QWORD *)&v252[16] + v106);
                      if ((*(_DWORD *)(*(_QWORD *)&v252[16] + v106 + 8) & 0x80000000) != 0)
                      {
                        v9 = (unint64_t)(v108 + 3);
                        a5 = *v108;
                        a1 = *(unsigned int *)&buf[100];
                        v7 = *v108 % (unint64_t)*(unsigned int *)&buf[88];
                        if (*(_DWORD *)&buf[100] == 0x7FFFFFFF)
                        {
                          a1 = *(unsigned int *)&buf[96];
                          v109 = *(_DWORD *)&buf[96];
                          if (*(_DWORD *)&buf[96] == *(_DWORD *)&buf[88])
                          {
                            re::HashTable<unsigned long long,re::DynamicArray<unsigned int>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&buf[64], 2 * *(_DWORD *)&buf[92]);
                            v109 = *(_DWORD *)&buf[96];
                            v7 = a5 % *(unsigned int *)&buf[88];
                          }
                          *(_DWORD *)&buf[96] = v109 + 1;
                          v110 = *(_QWORD *)&buf[80];
                          v111 = *(_DWORD *)(*(_QWORD *)&buf[80] + (a1 << 6) + 8);
                        }
                        else
                        {
                          v110 = *(_QWORD *)&buf[80];
                          v111 = *(_DWORD *)(*(_QWORD *)&buf[80]
                                           + ((unint64_t)*(unsigned int *)&buf[100] << 6)
                                           + 8);
                          *(_DWORD *)&buf[100] = v111 & 0x7FFFFFFF;
                        }
                        *(_DWORD *)(v110 + (a1 << 6) + 8) = v111 | 0x80000000;
                        *(_DWORD *)(*(_QWORD *)&buf[80] + (a1 << 6) + 8) = *(_DWORD *)(*(_QWORD *)&buf[80]
                                                                                     + (a1 << 6)
                                                                                     + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)&buf[72] + 4 * v7);
                        *(_QWORD *)(*(_QWORD *)&buf[80] + (a1 << 6)) = a5;
                        *(_QWORD *)(*(_QWORD *)&buf[80] + (a1 << 6) + 16) = v108[2];
                        re::DynamicArray<float>::DynamicArray(*(_QWORD *)&buf[80] + (a1 << 6) + 24, v108 + 3);
                        *(_DWORD *)(*(_QWORD *)&buf[72] + 4 * v7) = a1;
                        ++*(_DWORD *)&buf[92];
                        v105 = DWORD2(v253);
                      }
                      ++v107;
                      v106 += 64;
                    }
                    while (v107 < v105);
                  }
                  ++*(_DWORD *)&buf[104];
                  v95 = v190;
                }
              }
              v114 = v233;
              if ((_QWORD)v233)
                v115 = (_QWORD)v233 == *(_QWORD *)v255;
              else
                v115 = 1;
              if (!v115)
                goto LABEL_197;
              v116 = *((_QWORD *)&v233 + 1);
              v117 = v234;
              v233 = *(_OWORD *)v255;
              *(_QWORD *)v255 = v114;
              *(_QWORD *)&v255[8] = v116;
              v234 = *(_QWORD *)&v255[16];
              *(_QWORD *)&v255[16] = v117;
              if (v245)
              {
                if (v204[0])
                  re::DynamicArray<re::AllocatedShadowHandle>::copy((void **)&v245, (uint64_t)v204);
                else
                  *((_QWORD *)&v246 + 1) = 0;
                ++v247;
              }
              else if (v204[0])
              {
                v245 = (re::MaterialParameterTableBuilder *)v204[0];
                a1 = (unint64_t)&v245;
                re::DynamicArray<re::EvaluationRegister>::setCapacity(&v245, v205);
                ++v247;
                re::DynamicArray<re::AllocatedShadowHandle>::copy((void **)&v245, (uint64_t)v204);
              }
              v118 = a3[20];
              *(_OWORD *)&v241[16] = a3[19];
              v242 = v118;
              v243 = a3[21];
              *(_QWORD *)&v244 = *((_QWORD *)a3 + 44);
              v119 = a3[16];
              v238 = a3[15];
              v239 = v119;
              v120 = a3[18];
              v240 = a3[17];
              *(_OWORD *)v241 = v120;
              v121 = a3[12];
              v236 = a3[11];
              *(_OWORD *)v237 = v121;
              v122 = a3[14];
              *(_OWORD *)&v237[16] = a3[13];
              *(_OWORD *)&v237[32] = v122;
              v123 = a3[10];
              *(_OWORD *)v235 = a3[9];
              *(_OWORD *)&v235[16] = v123;
              v124 = *((_QWORD *)&v248 + 1);
              if (*((_QWORD *)&v248 + 1) && *((_QWORD *)&v248 + 1) != v202)
                goto LABEL_198;
              v125 = v249;
              *((_QWORD *)&v248 + 1) = v202;
              v249 = v203;
              v202 = v124;
              v203 = v125;
              v126 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_24MeshShadowGenerationDataEEE";
              if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_24MeshShadowGenerationDataEEE" & 0x8000000000000000) != 0)
              {
                v127 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_24MeshShadowGenerationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
                v128 = 5381;
                do
                {
                  v126 = v128;
                  v129 = *v127++;
                  v128 = (33 * v128) ^ v129;
                }
                while (v129);
              }
              v130 = (qword_25411EFD0 + (v126 << 6) + (v126 >> 2) - 0x61C8864680B583E9) ^ v126;
              v131 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v95 + 40) + 32))(*(_QWORD *)(v95 + 40), 480, 16);
              v132 = v95;
              v133 = v131;
              *(_QWORD *)v131 = &off_24ED82550;
              *(_OWORD *)(v131 + 16) = *(_OWORD *)buf;
              v134 = *(_QWORD *)&buf[16];
              *(_OWORD *)&buf[8] = 0u;
              *(_QWORD *)(v131 + 32) = v134;
              *(_QWORD *)(v131 + 40) = 0;
              *(_OWORD *)(v131 + 40) = *(_OWORD *)&buf[24];
              *(_OWORD *)&buf[24] = 0u;
              v135 = *(_QWORD *)&buf[48];
              *(_QWORD *)(v131 + 56) = *(_QWORD *)&buf[40];
              *(_QWORD *)(v131 + 64) = v135;
              *(_QWORD *)&buf[40] = 0;
              *(_QWORD *)&buf[48] = 0;
              *(_QWORD *)(v131 + 72) = *(_QWORD *)&buf[56];
              *(_DWORD *)(v131 + 112) = 0;
              *(_DWORD *)(v131 + 120) = 0;
              *(_OWORD *)(v131 + 80) = *(_OWORD *)&buf[64];
              *(_OWORD *)(v131 + 96) = 0u;
              *(_OWORD *)&buf[64] = 0u;
              *(_QWORD *)(v131 + 96) = *(_QWORD *)&buf[80];
              *(_OWORD *)(v131 + 104) = *(_OWORD *)&buf[88];
              *(_OWORD *)&buf[88] = xmmword_2260F5A80;
              v136 = v232;
              *(_OWORD *)(v131 + 128) = v231;
              *(_OWORD *)(v131 + 144) = v136;
              v138 = *((_QWORD *)&v233 + 1);
              v137 = v233;
              v233 = 0u;
              *(_OWORD *)(v131 + 160) = __PAIR128__(v138, v137);
              *(_QWORD *)(v131 + 176) = 0;
              *(_QWORD *)(v131 + 176) = v234;
              *(_QWORD *)&buf[80] = 0;
              v234 = 0;
              v139 = *(_OWORD *)&v235[16];
              *(_OWORD *)(v131 + 192) = *(_OWORD *)v235;
              *(_OWORD *)(v131 + 208) = v139;
              v140 = v236;
              v141 = *(_OWORD *)v237;
              v142 = *(_OWORD *)&v237[32];
              *(_OWORD *)(v131 + 256) = *(_OWORD *)&v237[16];
              *(_OWORD *)(v131 + 272) = v142;
              *(_OWORD *)(v131 + 224) = v140;
              *(_OWORD *)(v131 + 240) = v141;
              v143 = v238;
              v144 = v239;
              v145 = *(_OWORD *)v241;
              *(_OWORD *)(v131 + 320) = v240;
              *(_OWORD *)(v131 + 336) = v145;
              *(_OWORD *)(v131 + 288) = v143;
              *(_OWORD *)(v131 + 304) = v144;
              v146 = *(_OWORD *)&v241[16];
              v147 = v242;
              v148 = v244;
              *(_OWORD *)(v131 + 384) = v243;
              *(_OWORD *)(v131 + 400) = v148;
              *(_OWORD *)(v131 + 352) = v146;
              *(_OWORD *)(v131 + 368) = v147;
              *(_DWORD *)(v131 + 440) = 0;
              *(_QWORD *)(v131 + 432) = 0;
              *(_QWORD *)(v131 + 416) = v245;
              *(_OWORD *)(v131 + 448) = v248;
              *(_QWORD *)(v131 + 472) = *((_QWORD *)&v249 + 1);
              v149 = *(_QWORD *)(v132 + 96);
              a2 = (void **)(v132 + 96);
              v245 = 0;
              *(_OWORD *)(v131 + 424) = v246;
              v246 = 0u;
              ++v247;
              *(_DWORD *)(v131 + 440) = 1;
              v248 = 0u;
              *(_QWORD *)(v131 + 464) = v249;
              v249 = 0uLL;
              if (v149
                && (v149 = v130 % *(unsigned int *)(v132 + 120),
                    v150 = *(unsigned int *)(*(_QWORD *)(v132 + 104) + 4 * v149),
                    (_DWORD)v150 != 0x7FFFFFFF))
              {
                v179 = *(_QWORD *)(v132 + 112);
                while (*(_QWORD *)(v179 + 24 * v150 + 8) != v130)
                {
                  LODWORD(v150) = *(_DWORD *)(v179 + 24 * v150) & 0x7FFFFFFF;
                  if ((_DWORD)v150 == 0x7FFFFFFF)
                    goto LABEL_128;
                }
              }
              else
              {
LABEL_128:
                v151 = *(unsigned int *)(v190 + 132);
                if ((_DWORD)v151 == 0x7FFFFFFF)
                {
                  v151 = *(unsigned int *)(v190 + 128);
                  v152 = v151;
                  if ((_DWORD)v151 == *(_DWORD *)(v190 + 120))
                  {
                    re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)a2, 2 * *(_DWORD *)(v190 + 124));
                    LODWORD(v149) = v130 % *(unsigned int *)(v190 + 120);
                    v152 = *(_DWORD *)(v190 + 128);
                  }
                  *(_DWORD *)(v190 + 128) = v152 + 1;
                  v153 = *(_QWORD *)(v190 + 112);
                  v154 = *(_DWORD *)(v153 + 24 * v151);
                }
                else
                {
                  v153 = *(_QWORD *)(v190 + 112);
                  v154 = *(_DWORD *)(v153 + 24 * v151);
                  *(_DWORD *)(v190 + 132) = v154 & 0x7FFFFFFF;
                }
                v155 = 24 * v151;
                *(_DWORD *)(v153 + v155) = v154 | 0x80000000;
                *(_DWORD *)(*(_QWORD *)(v190 + 112) + v155) = *(_DWORD *)(*(_QWORD *)(v190 + 112) + 24 * v151) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v190 + 104) + 4 * v149);
                *(_QWORD *)(*(_QWORD *)(v190 + 112) + 24 * v151 + 8) = v130;
                *(_QWORD *)(*(_QWORD *)(v190 + 112) + 24 * v151 + 16) = v133;
                *(_DWORD *)(*(_QWORD *)(v190 + 104) + 4 * v149) = v151;
                ++*(_DWORD *)(v190 + 124);
                ++*(_DWORD *)(v190 + 136);
              }
              re::MeshShadowGenerationData::~MeshShadowGenerationData((re::MeshShadowGenerationData *)buf);
              if (*(_QWORD *)v255 && *(_QWORD *)&v255[8])
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v255 + 40))(*(_QWORD *)v255, *(_QWORD *)&v255[16]);
              v156.n128_f64[0] = re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v252);
              if (*(_QWORD *)&v250[2])
              {
                if (*((_QWORD *)&v250[2] + 1))
                {
                  (*(void (**)(double))(**(_QWORD **)&v250[2] + 40))(v156.n128_f64[0]);
                  *((_QWORD *)&v250[2] + 1) = 0;
                  *(_QWORD *)&v251 = 0;
                }
                *(_QWORD *)&v250[2] = 0;
              }
              if (*((_QWORD *)&v250[0] + 1) && *(_QWORD *)&v250[1])
                (*(void (**)(__n128))(**((_QWORD **)&v250[0] + 1) + 40))(v156);
              re::FixedArray<re::MeshShadowDepthPrepassReceiverParametersCPU>::deinit(&v202);
              if (*((_QWORD *)a3 + 2))
              {
                v27 = 0;
                a1 = (unint64_t)v207;
                a5 = 0x7FFFFFFFLL;
                do
                {
                  v8 = *(_QWORD *)(*((_QWORD *)a3 + 4) + 24 * v27 + 16);
                  v157 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v207, v8);
                  if (v157)
                  {
                    v9 = v157;
                    v158 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a4 + 368, v8);
                    if (v158)
                    {
                      v159 = v158;
                      memset(v250, 0, 36);
                      *(_QWORD *)((char *)&v250[2] + 4) = 0x7FFFFFFFLL;
                      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v250, (uint64_t)a6, 3);
                      *(_QWORD *)&v251 = 0;
                      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)buf, v159);
                      *(_QWORD *)&buf[48] = *(_QWORD *)v9;
                      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=((uint64_t)v250, (uint64_t *)buf);
                      *(_QWORD *)&v251 = *(_QWORD *)&buf[48];
                      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)buf);
                      v7 = *((_QWORD *)a3 + 2);
                      if (v7 <= v27)
                        goto LABEL_186;
                      v160 = _MergedGlobals_437;
                      v161 = strlen(*(const char **)(*((_QWORD *)a3 + 4) + 24 * v27));
                      v162 = 0x9E3779B97F4A7C17;
                      if (v161)
                      {
                        MurmurHash3_x64_128(*(_QWORD *)(*((_QWORD *)a3 + 4) + 24 * v27), v161, 0, (unint64_t *)buf);
                        v162 = ((*(_QWORD *)&buf[8]
                               - 0x61C8864680B583E9
                               + (*(_QWORD *)buf << 6)
                               + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf)
                             - 0x61C8864680B583E9;
                      }
                      v163 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_32MeshShadowPerSceneGenerationDataEEE";
                      if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_32MeshShadowPerSceneGenerationDataEEE" & 0x8000000000000000) != 0)
                      {
                        v164 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_32MeshShadowPe"
                                                                     "rSceneGenerationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
                        v165 = 5381;
                        do
                        {
                          v163 = v165;
                          v166 = *v164++;
                          v165 = (33 * v165) ^ v166;
                        }
                        while (v166);
                      }
                      v167 = ((((v160 >> 2) + (v160 << 6) + v162) ^ v160)
                            - 0x61C8864680B583E9
                            + (v163 << 6)
                            + (v163 >> 2)) ^ v163;
                      v168 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v190 + 40) + 32))(*(_QWORD *)(v190 + 40), 64, 8);
                      *(_QWORD *)v168 = &off_24ED82590;
                      *(_DWORD *)(v168 + 40) = 0;
                      *(_QWORD *)(v168 + 24) = 0;
                      *(_QWORD *)(v168 + 32) = 0;
                      *(_DWORD *)(v168 + 48) = 0;
                      *(_QWORD *)(v168 + 8) = *(_QWORD *)&v250[0];
                      *(_QWORD *)(v168 + 16) = 0;
                      *(_QWORD *)(v168 + 16) = *((_QWORD *)&v250[0] + 1);
                      v250[0] = 0uLL;
                      *(_QWORD *)(v168 + 24) = *(_QWORD *)&v250[1];
                      *(_QWORD *)&v250[1] = 0;
                      *(_QWORD *)(v168 + 32) = *((_QWORD *)&v250[1] + 1);
                      *(_QWORD *)(v168 + 40) = *(_QWORD *)&v250[2];
                      *(_OWORD *)((char *)&v250[1] + 8) = xmmword_2260F5A80;
                      *(_QWORD *)(v168 + 56) = v251;
                      v169 = *(_QWORD *)(v190 + 96);
                      if (!v169
                        || (v169 = v167 % *(unsigned int *)(v190 + 120),
                            v170 = *(unsigned int *)(*(_QWORD *)(v190 + 104) + 4 * v169),
                            (_DWORD)v170 == 0x7FFFFFFF))
                      {
LABEL_159:
                        v172 = *(unsigned int *)(v190 + 132);
                        if ((_DWORD)v172 == 0x7FFFFFFF)
                        {
                          v172 = *(unsigned int *)(v190 + 128);
                          v173 = v172;
                          if ((_DWORD)v172 == *(_DWORD *)(v190 + 120))
                          {
                            re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)a2, 2 * *(_DWORD *)(v190 + 124));
                            v169 = v167 % *(unsigned int *)(v190 + 120);
                            v173 = *(_DWORD *)(v190 + 128);
                          }
                          *(_DWORD *)(v190 + 128) = v173 + 1;
                          v174 = *(_QWORD *)(v190 + 112);
                          v175 = *(_DWORD *)(v174 + 24 * v172);
                        }
                        else
                        {
                          v174 = *(_QWORD *)(v190 + 112);
                          v175 = *(_DWORD *)(v174 + 24 * v172);
                          *(_DWORD *)(v190 + 132) = v175 & 0x7FFFFFFF;
                        }
                        v177 = 24 * v172;
                        *(_DWORD *)(v174 + v177) = v175 | 0x80000000;
                        *(_DWORD *)(*(_QWORD *)(v190 + 112) + v177) = *(_DWORD *)(*(_QWORD *)(v190 + 112) + 24 * v172) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v190 + 104) + 4 * v169);
                        *(_QWORD *)(*(_QWORD *)(v190 + 112) + 24 * v172 + 8) = v167;
                        *(_QWORD *)(*(_QWORD *)(v190 + 112) + 24 * v172 + 16) = v168;
                        *(_DWORD *)(*(_QWORD *)(v190 + 104) + 4 * v169) = v172;
                        ++*(_DWORD *)(v190 + 124);
                        ++*(_DWORD *)(v190 + 136);
                      }
                      else
                      {
                        v171 = *(_QWORD *)(v190 + 112);
                        while (*(_QWORD *)(v171 + 24 * v170 + 8) != v167)
                        {
                          LODWORD(v170) = *(_DWORD *)(v171 + 24 * v170) & 0x7FFFFFFF;
                          if ((_DWORD)v170 == 0x7FFFFFFF)
                            goto LABEL_159;
                        }
                      }
                      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v250);
                    }
                    else
                    {
                      v176 = *re::shadowLogObjects(0);
                      if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 134217984;
                        *(_QWORD *)&buf[4] = v8;
                        _os_log_error_impl(&dword_224FE9000, v176, OS_LOG_TYPE_ERROR, "MeshShadowBuilder: In generate data, world %llu has no receivers but the world still exists", buf, 0xCu);
                      }
                    }
                  }
                  ++v27;
                }
                while (*((_QWORD *)a3 + 2) > v27);
              }
              v178 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v207);
              if (v204[0])
              {
                if (v206)
                  (*(void (**)(double))(*(_QWORD *)v204[0] + 40))(v178);
              }
              return;
            }
LABEL_196:
            re::internal::assertLog((re::internal *)4, v99, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
            _os_crash();
            __break(1u);
LABEL_197:
            re::internal::assertLog((re::internal *)4, v103, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
            _os_crash();
            __break(1u);
LABEL_198:
            re::internal::assertLog((re::internal *)4, v103, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
            _os_crash();
            __break(1u);
LABEL_199:
            re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 96, v9);
            _os_crash();
            __break(1u);
LABEL_200:
            re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
            break;
          }
LABEL_192:
          re::internal::assertLog((re::internal *)4, v51, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_193:
          re::internal::assertLog((re::internal *)6, v63, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v7);
          _os_crash();
          __break(1u);
LABEL_194:
          re::internal::assertLog((re::internal *)4, v65, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
LABEL_195:
          re::internal::assertLog((re::internal *)4, v96, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
          _os_crash();
          __break(1u);
          goto LABEL_196;
        }
LABEL_191:
        re::internal::assertLog((re::internal *)6, v48, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v8);
        _os_crash();
        __break(1u);
        goto LABEL_192;
      }
      if (v205 >= 0x24924924924924ALL)
      {
        re::internal::assertLog((re::internal *)6, v16, v17, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 112, v205);
        _os_crash();
        __break(1u);
LABEL_190:
        re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_191;
      }
      v19 = a6;
      v20 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, unint64_t, uint64_t, double))(*(_QWORD *)a6 + 32))(a6, 112 * v205, 16, v17);
      *((_QWORD *)&v203 + 1) = v20;
      if (!v20)
        goto LABEL_190;
      v22 = v18 - 1;
      if (v18 != 1)
      {
        do
        {
          *(_QWORD *)v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
          v20 += 112;
          --v22;
        }
        while (v22);
      }
      *(_QWORD *)v20 = 0;
      *(_DWORD *)(v20 + 8) = 0;
      v9 = v205;
      if (!v205)
        goto LABEL_25;
      if (v205 >= 0x2AAAAAAAAAAAAABLL)
        goto LABEL_199;
      a1 = 96 * v205;
      v23 = (_OWORD *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, unint64_t, uint64_t))(*(_QWORD *)a6 + 32))(a6, 96 * v205, 16);
      if (!v23)
        goto LABEL_200;
      a5 = (unint64_t)v23;
      v187 = a3;
      v25 = v23;
      if (v9 != 1)
      {
        bzero(v23, a1 - 96);
        v25 = (_OWORD *)(a5 + a1 - 96);
      }
      v185 = 96 * v9;
      v8 = 0;
      v25[4] = 0u;
      v25[5] = 0u;
      v25[2] = 0u;
      v25[3] = 0u;
      *v25 = 0u;
      v25[1] = 0u;
      v7 = 1;
      v26 = *((_QWORD *)&v203 + 1);
      v19 = a6;
      while (1)
      {
        v27 = v205;
        if (v205 <= v8)
          break;
        v28 = (char *)a5;
        v27 = v206 + 32 * v8 + 24;
        a5 = (unint64_t)a2;
        v29 = re::ShadowTileManager::dataForTile((uint64_t)a2, (unsigned __int16 *)v27);
        v30 = *(_OWORD *)(v29 + 128);
        *(_OWORD *)v255 = *(_OWORD *)(v29 + 112);
        *(_OWORD *)&v255[16] = v30;
        v31 = *(_OWORD *)(v29 + 160);
        *(_OWORD *)&v255[32] = *(_OWORD *)(v29 + 144);
        v256 = v31;
        *(_OWORD *)v195 = *(_OWORD *)&v255[16];
        v197 = *(_OWORD *)v255;
        v191 = v31;
        v193 = *(_OWORD *)&v255[32];
        _S8 = *(_DWORD *)(v29 + 208);
        a1 = *(unsigned __int16 *)v27;
        v33 = re::ShadowTileManager::dataForTile((uint64_t)a2, (unsigned __int16 *)v27);
        if (v9 <= v8)
          goto LABEL_184;
        v35 = *(__n128 *)(v33 + 1248);
        __asm { FCVT            H1, S8 }
        a5 = (unint64_t)v28;
        v40 = &v28[96 * v8];
        *(_OWORD *)v40 = v197;
        *((_OWORD *)v40 + 1) = *(_OWORD *)v195;
        *((_OWORD *)v40 + 2) = v193;
        *((_OWORD *)v40 + 3) = v191;
        *((_WORD *)v40 + 32) = _H1;
        *((_WORD *)v40 + 33) = a1;
        *((__n128 *)v40 + 5) = v35;
        re::buildCullingPlanes((uint64_t)v255, v34, (uint64_t)buf, v35);
        if (v18 <= v8)
          goto LABEL_185;
        v41 = v26 + 112 * v8;
        if ((uint8_t *)v41 != buf)
        {
          re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)(v26 + 112 * v8), (unint64_t *)buf);
          ++*(_DWORD *)(v41 + 8);
        }
        v8 = v7;
        v42 = v9 > v7;
        v7 = (v7 + 1);
        if (!v42)
        {
          v43 = (re::Allocator **)(v187 + 5);
          v44 = (re::MaterialParameterBlock *)*((_QWORD *)v187 + 10);
          v221[0] = 0x31EF696315A95E84;
          a1 = 96 * v9;
          re::PerFrameAllocatorGPU::allocInternal(a7, v185, 0x10uLL, 0, buf);
          v45 = *(_DWORD *)&buf[8];
          memcpy((void *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]), v28, v185);
          v46 = **(id **)&buf[24];
          v223 = v46;
          v224 = v45;
          v225 = 96 * v9;
          re::MaterialParameterBlock::setBuffer(v44, v221, (uint64_t)&v223, (uint64_t)v226);
          v226[0] = 0;
          if (v46)
          {

            v223 = 0;
          }
          a5 = (unint64_t)v187 + 56;
          v194 = *((_QWORD *)v187 + 7);
          v192 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v44, a6);
          v47 = v28;
          a3 = v187;
          (*(void (**)(re::MaterialParameterTableBuilder *, char *))(*(_QWORD *)a6 + 40))(a6, v47);
          goto LABEL_26;
        }
      }
LABEL_183:
      *(_QWORD *)v255 = 0;
      memset(buf, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v250[0]) = 136315906;
      *(_QWORD *)((char *)v250 + 4) = "operator[]";
      WORD6(v250[0]) = 1024;
      *(_DWORD *)((char *)v250 + 14) = 797;
      WORD1(v250[1]) = 2048;
      *(_QWORD *)((char *)&v250[1] + 4) = v8;
      WORD6(v250[1]) = 2048;
      *(_QWORD *)((char *)&v250[1] + 14) = v27;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_184:
      *(_QWORD *)v257 = 0;
      memset(buf, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v250[0]) = 136315906;
      *(_QWORD *)((char *)v250 + 4) = "operator[]";
      WORD6(v250[0]) = 1024;
      *(_DWORD *)((char *)v250 + 14) = 468;
      WORD1(v250[1]) = 2048;
      *(_QWORD *)((char *)&v250[1] + 4) = v8;
      WORD6(v250[1]) = 2048;
      *(_QWORD *)((char *)&v250[1] + 14) = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_185:
      v222[0] = 0;
      a3 = v250;
      v251 = 0u;
      *(_OWORD *)v252 = 0u;
      memset(v250, 0, sizeof(v250));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v257 = 136315906;
      *(_QWORD *)&v257[4] = "operator[]";
      *(_WORD *)&v257[12] = 1024;
      *(_DWORD *)&v257[14] = 468;
      *(_WORD *)&v257[18] = 2048;
      *(_QWORD *)&v257[20] = v8;
      *(_WORD *)&v257[28] = 2048;
      *(_QWORD *)&v257[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_186:
      *(_QWORD *)v257 = 0;
      memset(buf, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v255 = 136315906;
      *(_QWORD *)&v255[4] = "operator[]";
      *(_WORD *)&v255[12] = 1024;
      *(_DWORD *)&v255[14] = 789;
      *(_WORD *)&v255[18] = 2048;
      *(_QWORD *)&v255[20] = v27;
      *(_WORD *)&v255[28] = 2048;
      *(_QWORD *)&v255[30] = v7;
      _os_log_send_and_compose_impl();
      v15 = _os_crash_msg();
      __break(1u);
LABEL_187:
      *(_QWORD *)buf = 0xAD90622DE24C6320;
      *(_QWORD *)&buf[8] = "meshshadow:enableShadow";
      LOBYTE(v250[0]) = 0;
      if (!re::DebugSettingsManager::getWithErrorCode<BOOL>(v15, buf, v250))
        break;
      re::StringID::destroyString((re::StringID *)buf);
    }
    v180 = LOBYTE(v250[0]);
    re::StringID::destroyString((re::StringID *)buf);
  }
  while (v180);
}

uint64_t regenerateRenderingData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, id *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  BOOL v48;
  uint64_t v49;
  _anonymous_namespace_ *v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  float v58;
  __n128 v59;
  id v60;
  _anonymous_namespace_ *v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned __int16 v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t result;
  id *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90[4];
  uint64_t v91[4];
  uint64_t v92[4];
  id v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  id v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  id v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int16 *v109;
  uint64_t v110;
  _anonymous_namespace_ *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  _BYTE v116[12];
  __int16 v117;
  int v118;
  __int16 v119;
  unint64_t v120;
  __int16 v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  v10 = a1;
  v128 = *MEMORY[0x24BDAC8D0];
  re::WorldOrderedShadows::create(a1 + 80, (uint64_t)&v84);
  v13 = *((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v111 = 0;
    v112 = 0;
    v113 = 0;
    re::FixedArray<re::Matrix4x4<float>>::init<>((uint64_t *)&v111, a4, *((unint64_t *)&v85 + 1));
    if (v13 >= 0x24924924924924ALL)
    {
LABEL_62:
      re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 112, v13);
      _os_crash();
      __break(1u);
LABEL_63:
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v15 = 112 * v13;
    v16 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a4 + 32))(a4, 112 * v13, 16);
    if (!v16)
      goto LABEL_63;
    v18 = v16;
    v19 = v13 - 1;
    if (v13 != 1)
    {
      v18 = v16;
      do
      {
        *(_DWORD *)(v18 + 28) = 0;
        *(_DWORD *)(v18 + 32) = 0;
        *(_OWORD *)(v18 + 48) = 0uLL;
        *(_OWORD *)(v18 + 64) = 0uLL;
        *(_OWORD *)(v18 + 80) = 0uLL;
        *(_OWORD *)(v18 + 96) = 0uLL;
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 16) = 0;
        *(_QWORD *)v18 = 0;
        *(_WORD *)(v18 + 24) = 0;
        v18 += 112;
        --v19;
      }
      while (v19);
    }
    v82 = a4;
    v83 = v16;
    v80 = a3;
    v81 = a6;
    *(_DWORD *)(v18 + 28) = 0;
    *(_DWORD *)(v18 + 32) = 0;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)v18 = 0;
    *(_WORD *)(v18 + 24) = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    re::FixedArray<half>::init<>(&v108, a4, v13);
    if (*((_QWORD *)&v85 + 1))
    {
      v79 = a5;
      v20 = v10;
      v21 = 0;
      v22 = 1;
      v23 = v109;
      v24 = v110;
      do
      {
        v25 = v24;
        v26 = (unsigned __int16 *)(v87 + 32 * v21 + 24);
        v27 = re::ShadowTileManager::dataForTile(v20, v26);
        if (*(_BYTE *)(a2 + 152))
          _ZF = *(_BYTE *)(v27 + 41) == 0;
        else
          _ZF = 1;
        v29 = !_ZF;
        v30 = v112;
        if (v112 <= v21)
          goto LABEL_59;
        v31 = (_OWORD *)(v113 + (v21 << 6));
        v32 = *(_OWORD *)(v27 + 1168);
        v33 = *(_OWORD *)(v27 + 1184);
        v34 = *(_OWORD *)(v27 + 1216);
        v31[2] = *(_OWORD *)(v27 + 1200);
        v31[3] = v34;
        *v31 = v32;
        v31[1] = v33;
        if (v13 <= v21)
          goto LABEL_60;
        v35 = v83 + 112 * v21;
        *(_DWORD *)(v35 + 16) = *(_DWORD *)(v27 + 1232);
        *(_DWORD *)(v35 + 20) = *(_DWORD *)(v27 + 1236);
        *(_OWORD *)v35 = *(_OWORD *)(v27 + 1248);
        *(_WORD *)(v35 + 24) = *v26;
        if (v29)
        {
          v36 = *(float *)(a2 + 160);
          v37 = *(float *)(a2 + 164) - v36;
          v38 = 1.0 / v37;
          v39 = (float)-v36 / v37;
        }
        else
        {
          v39 = 1.0;
          v38 = 0.0;
        }
        v24 = v25;
        v40 = v83 + 112 * v21;
        *(float *)(v40 + 28) = v38;
        *(float *)(v40 + 32) = v39;
        v41 = *(_OWORD *)(v27 + 1280);
        v42 = *(_OWORD *)(v27 + 1296);
        v43 = *(_OWORD *)(v27 + 1312);
        *(_OWORD *)(v40 + 48) = *(_OWORD *)(v27 + 1264);
        *(_OWORD *)(v40 + 64) = v41;
        *(_OWORD *)(v40 + 80) = v42;
        *(_OWORD *)(v40 + 96) = v43;
        if ((unint64_t)v23 <= v21)
          goto LABEL_61;
        _S0 = *(_DWORD *)(v27 + 1152);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(v25 + 2 * v21) = _S0;
        v21 = v22;
        v48 = *((_QWORD *)&v85 + 1) > (unint64_t)v22++;
      }
      while (v48);
      v10 = v20;
      v15 = 112 * v13;
      a5 = v79;
    }
    else
    {
      v24 = v110;
    }
    v51 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, v113, v13 << 6, 0);
    v52 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, v83, v15, 0);
    v53 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, v24, 2 * v13, 0);
    v13 = *(_QWORD *)(a2 + 40);
    if (v13)
      v54 = (id)(v13 + 8);
    v107 = 0x26B98E39084D2FA1;
    v55 = v51;
    v104 = v55;
    v105 = 0;
    v106 = objc_msgSend(v51, sel_length);
    re::MaterialParameterBlock::setBuffer((re::MaterialParameterBlock *)v13, &v107, (uint64_t)&v104, (uint64_t)&v123);
    *(_QWORD *)&v123 = 0;
    if (v55)
    {

      v104 = 0;
    }
    v107 = 0;
    v103 = 0x5A438D3F6E44D7FFLL;
    v56 = v52;
    v100 = v56;
    v101 = 0;
    v102 = objc_msgSend(v52, sel_length);
    re::MaterialParameterBlock::setBuffer((re::MaterialParameterBlock *)v13, &v103, (uint64_t)&v100, (uint64_t)v116);
    *(_QWORD *)v116 = 0;
    if (v56)
    {

      v100 = 0;
    }
    v103 = 0;
    v96 = 0x41AA1904683CFD85;
    v57 = v53;
    v93 = v57;
    v94 = 0;
    v95 = objc_msgSend(v53, sel_length);
    re::MaterialParameterBlock::setBuffer((re::MaterialParameterBlock *)v13, &v96, (uint64_t)&v93, (uint64_t)&v97);
    v97 = 0;
    if (v57)
    {

      v93 = 0;
    }
    v96 = 0;
    LODWORD(v90[0]) = *(_DWORD *)(a2 + 156);
    v91[0] = 0x5D6F32980B624810;
    re::MaterialParameterBlock::setConstant((re::MaterialParameterBlock *)v13, v91, 4uLL, v90, 1, (uint64_t)v92);
    v92[0] = 0;
    LODWORD(v114) = *(_DWORD *)(a2 + 144);
    v90[0] = 0x2651C5BB725E4431;
    re::MaterialParameterBlock::setConstant((re::MaterialParameterBlock *)v13, v90, 4uLL, &v114, 1, (uint64_t)v91);
    v91[0] = 0;
    v58 = cos(*(float *)(a2 + 184) * 3.14159265 / 180.0);
    v115 = v58;
    v114 = 0x7DDA5D55C0FC4FA9;
    v59.n128_f64[0] = re::MaterialParameterBlock::setConstant((re::MaterialParameterBlock *)v13, &v114, 4uLL, &v115, 1, (uint64_t)v90);
    v90[0] = 0;
    if (v13)
    {
      v60 = (id)(v13 + 8);

    }
    if (v53)

    if (v52)
    if (v51)

    if (v108 && v109)
      (*(void (**)(__n128))(*(_QWORD *)v108 + 40))(v59);
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v82 + 40))(v82, v83, v59);
    v61 = v111;
    if (v111 && v112)
      v61 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v111 + 40))();
    v98 = 0;
    v99 = 0;
    v97 = 0;
    if (*((_QWORD *)&v85 + 1))
    {
      v62 = 0;
      v63 = 1;
      v21 = v98;
      v64 = v99;
      v30 = 96;
      while (1)
      {
        v23 = (unsigned __int16 *)(v87 + 32 * v62 + 24);
        v65 = re::ShadowTileManager::dataForTile(v10, v23);
        if (v21 <= v62)
          break;
        v66 = *(_DWORD *)(v65 + 1752);
        v67 = *v23;
        v68 = *(_DWORD *)(v65 + 1744);
        v69 = *(_OWORD *)(v65 + 1728);
        v70 = v64 + 96 * v62;
        v71 = *(_OWORD *)(v65 + 1664);
        v72 = *(_OWORD *)(v65 + 1680);
        v73 = *(_OWORD *)(v65 + 1712);
        *(_OWORD *)(v70 + 32) = *(_OWORD *)(v65 + 1696);
        *(_OWORD *)(v70 + 48) = v73;
        *(_OWORD *)v70 = v71;
        *(_OWORD *)(v70 + 16) = v72;
        *(_OWORD *)(v70 + 64) = v69;
        *(_DWORD *)(v70 + 80) = v68;
        *(_WORD *)(v70 + 84) = v67;
        *(_DWORD *)(v70 + 88) = v66;
        v62 = v63;
        v48 = *((_QWORD *)&v85 + 1) > (unint64_t)v63++;
        if (!v48)
          goto LABEL_53;
      }
      v92[0] = 0;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v123 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v116 = 136315906;
      *(_QWORD *)&v116[4] = "operator[]";
      v117 = 1024;
      v118 = 468;
      v119 = 2048;
      v120 = v62;
      v121 = 2048;
      v122 = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_59:
      v97 = 0;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v123 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v116 = 136315906;
      *(_QWORD *)&v116[4] = "operator[]";
      v117 = 1024;
      v118 = 468;
      v119 = 2048;
      v120 = v21;
      v121 = 2048;
      v122 = v30;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_60:
      v97 = 0;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v123 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v116 = 136315906;
      *(_QWORD *)&v116[4] = "operator[]";
      v117 = 1024;
      v118 = 468;
      v119 = 2048;
      v120 = v21;
      v121 = 2048;
      v122 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_61:
      v97 = 0;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v123 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v116 = 136315906;
      *(_QWORD *)&v116[4] = "operator[]";
      v117 = 1024;
      v118 = 468;
      v119 = 2048;
      v120 = v21;
      v121 = 2048;
      v122 = (unint64_t)v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_62;
    }
    v21 = v98;
    v64 = v99;
LABEL_53:
    v74 = v97;
    v75 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(v81, v80 + 368);
    *(_QWORD *)(v75 + 48) = v84;
    v84 = 0;
    *(_OWORD *)(v75 + 56) = v85;
    v85 = 0u;
    ++v86;
    *(_DWORD *)(v75 + 72) = 1;
    *(_DWORD *)(v75 + 128) = 0;
    *(_OWORD *)(v75 + 80) = v87;
    v76 = *((_QWORD *)&v88 + 1);
    *(_QWORD *)(v75 + 96) = v88;
    *(_QWORD *)(v75 + 104) = v76;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)(v75 + 112) = v89;
    v89 = xmmword_2260F5A80;
    *(_QWORD *)(v75 + 136) = v13;
    *(_QWORD *)(v75 + 144) = v74;
    *(_QWORD *)(v75 + 152) = v21;
    *(_QWORD *)(v75 + 160) = v64;
  }
  else
  {
    *(_DWORD *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_QWORD *)(a6 + 36) = 0x7FFFFFFFLL;
    *(_QWORD *)(a6 + 48) = v84;
    v84 = 0;
    *(_OWORD *)(a6 + 56) = v85;
    v85 = 0u;
    ++v86;
    *(_DWORD *)(a6 + 72) = 1;
    *(_DWORD *)(a6 + 128) = 0;
    *(_OWORD *)(a6 + 80) = v87;
    v49 = *((_QWORD *)&v88 + 1);
    *(_QWORD *)(a6 + 96) = v88;
    *(_QWORD *)(a6 + 104) = v49;
    v87 = 0u;
    v88 = 0u;
    *(_OWORD *)(a6 + 112) = v89;
    v89 = xmmword_2260F5A80;
    *(_QWORD *)(a6 + 136) = 0;
    *(_OWORD *)(a6 + 152) = 0u;
  }
  v77 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v87 + 1);
  result = v84;
  if (v84)
  {
    if ((_QWORD)v87)
      return (*(uint64_t (**)(double))(*(_QWORD *)v84 + 40))(v77);
  }
  return result;
}

void re::ProjectiveMeshShadowBuilder::buildShadowGenerationData(void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, re::MaterialParameterTableBuilder *a4@<X4>, _OWORD *a5@<X5>, unint64_t a6@<X6>, _BYTE *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  re::PerFrameAllocatorGPU *v18;
  BOOL v19;
  double v20;
  uint64_t v21[6];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27[6];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v13 = *(_QWORD *)(a6 + 8);
  v14 = *(_QWORD *)(a2 + 64);
  if (v14)
  {
    v16 = *(_QWORD *)(v13 + 104);
    if (v16)
      v17 = *(_QWORD *)(v16 + 336);
    else
      v17 = 0;
    v18 = (re::PerFrameAllocatorGPU *)re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(v17, *(_QWORD *)(*(_QWORD *)(v13 + 136) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(v13 + 136) + 16) << 60));
    processShadowsToGenerate(a2 + 48, a1, a5, a3, a6, a4, v18);
    LODWORD(v14) = *(_QWORD *)(a2 + 64) != 0;
  }
  if (*(_DWORD *)(a2 + 28))
    v19 = 0;
  else
    v19 = (_DWORD)v14 == 0;
  if (v19)
  {
    *a7 = 0;
  }
  else
  {
    regenerateRenderingData((uint64_t)a1, (uint64_t)(a5 + 3), a3, (uint64_t)a4, (id *)(v13 + 184), (uint64_t)v21);
    re::Optional<re::PersistentShadowRenderingData>::Optional((uint64_t)a7, (uint64_t)v21);
    if (v29)
    {
      if (v30)
      {
        (*(void (**)(void))(*(_QWORD *)v29 + 40))();
        v30 = 0;
        v31 = 0;
      }
      v29 = 0;
    }
    if (v28)
    {

      v28 = 0;
    }
    v20 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v27);
    if (v22)
    {
      if (v26)
        (*(void (**)(double))(*(_QWORD *)v22 + 40))(v20);
      v26 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      ++v25;
    }
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v21);
  }
}

void re::ProjectiveMeshShadowBuilder::buildShadowRenderingData(uint64_t a1, re::PersistentShadowState *a2, uint64_t a3, re::MaterialParameterTableBuilder *a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _WORD *v29;
  unint64_t v30;
  _BOOL4 v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v42;
  const void *v43;
  uint64_t v44;
  float *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  unint64_t v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  re *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  NSObject *v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  os_unfair_lock_s *v129;
  int v130;
  re *v131;
  const char *v132;
  unint64_t v133;
  const char *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t v140;
  int v141;
  unint64_t *v142;
  __int128 v145;
  _BYTE v146[44];
  uint64_t v147;
  const char *v148;
  void *__dst;
  uint64_t v150;
  const char *v151;
  int v152;
  uint8_t buf[16];
  __int128 v154;
  _BYTE v155[248];
  _BYTE v156[28];
  __int16 v157;
  unint64_t v158;
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD **)(a7 + 8);
  v11 = v10[13];
  if (v11)
    v12 = *(_QWORD *)(v11 + 336);
  else
    v12 = 0;
  v13 = re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(v12, *(_QWORD *)(v10[17] + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(v10[17] + 16) << 60));
  LODWORD(v14) = *(_DWORD *)(a3 + 64);
  if ((_DWORD)v14)
  {
    v15 = v13;
    v16 = atomic_load((unsigned __int8 *)&qword_25411EFE8);
    if ((v16 & 1) == 0)
    {
      v131 = (re *)__cxa_guard_acquire(&qword_25411EFE8);
      if ((_DWORD)v131)
      {
        qword_25411EFE0 = re::hashString(v131, v132);
        __cxa_guard_release(&qword_25411EFE8);
      }
    }
    v17 = atomic_load((unsigned __int8 *)&qword_25411EFF8);
    v18 = a5;
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25411EFF8))
    {
      qword_25411EFF0 = re::getCombinedScopeHash(qword_25411EFE0, v133, v134);
      __cxa_guard_release(&qword_25411EFF8);
    }
    v138 = v10;
    v19 = v10[11];
    if (v19)
      goto LABEL_143;
    while (1)
    {
      v141 = v14;
      v137 = v19;
      v145 = 0u;
      memset(v146, 0, 20);
      *(_QWORD *)&v146[20] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v145, (uint64_t)a4, 3);
      v20 = *(_QWORD *)(a6 + 344);
      if (v20)
      {
        v21 = *(_QWORD *)(a6 + 360);
        v22 = v21 + 16 * v20;
        do
        {
          v23 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v21 ^ (*(_QWORD *)v21 >> 30));
          v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
          if ((_QWORD)v145)
          {
            v25 = v24 % *(unsigned int *)&v146[8];
            v26 = *(unsigned int *)(*((_QWORD *)&v145 + 1) + 4 * v25);
            if ((_DWORD)v26 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(*(_QWORD *)v146 + 32 * v26 + 16) != *(_QWORD *)v21)
              {
                v26 = *(_DWORD *)(*(_QWORD *)v146 + 32 * v26 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v26 == 0x7FFFFFFF)
                  goto LABEL_16;
              }
              goto LABEL_17;
            }
          }
          else
          {
            LODWORD(v25) = 0;
          }
LABEL_16:
          re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy((uint64_t)&v145, v25, v24, (_QWORD *)v21, (_DWORD *)(v21 + 12));
          ++*(_DWORD *)&v146[24];
LABEL_17:
          v21 += 16;
        }
        while (v21 != v22);
      }
      v27 = *(_DWORD *)(v18 + 40);
      v28 = *(_QWORD *)(a3 + 64);
      a6 = *(_QWORD *)(a3 + 136);
      v147 = 0;
      v148 = 0;
      __dst = 0;
      re::FixedArray<half>::init<>(&v147, (uint64_t)a4, v28);
      if (!*(_QWORD *)(a3 + 64))
        break;
      v135 = v15;
      v18 = 0;
      v15 = 0;
      v14 = (unint64_t)v148;
      v29 = __dst;
      v19 = (unint64_t)a2;
      while (1)
      {
        v30 = *(_QWORD *)(re::ShadowTileManager::dataForTile((uint64_t)a2, (unsigned __int16 *)(*(_QWORD *)(a3 + 80) + 32 * v18 + 24))+ 32);
        v31 = re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)&v145, v30);
        _S0 = 0;
        if (!v31)
          goto LABEL_29;
        if ((_QWORD)v145)
        {
          v33 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v30 ^ (v30 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v30 ^ (v30 >> 30))) >> 27));
          v34 = (v33 ^ (v33 >> 31)) % *(unsigned int *)&v146[8];
          v35 = *(_QWORD *)v146;
          v36 = *(unsigned int *)(*((_QWORD *)&v145 + 1) + 4 * v34);
          if ((_DWORD)v36 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(*(_QWORD *)v146 + 32 * v36 + 16) != v30)
            {
              v36 = *(_DWORD *)(*(_QWORD *)v146 + 32 * v36 + 8) & 0x7FFFFFFF;
              if (v36 == 0x7FFFFFFF)
                goto LABEL_27;
            }
            goto LABEL_28;
          }
        }
        else
        {
          v35 = *(_QWORD *)v146;
        }
LABEL_27:
        v36 = 0x7FFFFFFFLL;
LABEL_28:
        _S0 = *(_DWORD *)(v35 + 32 * v36 + 24);
LABEL_29:
        if (v14 <= v18)
          break;
        __asm { FCVT            H0, S0 }
        v29[v18] = _H0;
        v18 = (v15 + 1);
        v15 = v18;
        if (*(_QWORD *)(a3 + 64) <= v18)
        {
          v15 = v135;
          goto LABEL_34;
        }
      }
      v150 = 0;
      v154 = 0u;
      memset(v155, 0, 48);
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v156 = 136315906;
      *(_QWORD *)&v156[4] = "operator[]";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 468;
      *(_WORD *)&v156[18] = 2048;
      *(_QWORD *)&v156[20] = v18;
      v157 = 2048;
      v158 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_140:
      v150 = 0;
      v154 = 0u;
      memset(v155, 0, 48);
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v156 = 136315906;
      *(_QWORD *)&v156[4] = "operator[]";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 468;
      *(_WORD *)&v156[18] = 2048;
      *(_QWORD *)&v156[20] = v14;
      v157 = 2048;
      v158 = a6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_141:
      v150 = 0;
      v154 = 0u;
      memset(v155, 0, 48);
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v156 = 136315906;
      *(_QWORD *)&v156[4] = "operator[]";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 468;
      *(_WORD *)&v156[18] = 2048;
      *(_QWORD *)&v156[20] = v14;
      v157 = 2048;
      v158 = a6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_142:
      v147 = 0;
      v154 = 0u;
      memset(v155, 0, 48);
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v156 = 136315906;
      *(_QWORD *)&v156[4] = "operator[]";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 789;
      *(_WORD *)&v156[18] = 2048;
      *(_QWORD *)&v156[20] = v14;
      v157 = 2048;
      v158 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_143:
      *(_QWORD *)buf = 0xAD90622DE24C6320;
      *(_QWORD *)&buf[8] = "meshshadow:enableShadow";
      LOBYTE(v145) = 0;
      if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v19, buf, &v145))
      {
        re::StringID::destroyString((re::StringID *)buf);
        continue;
      }
LABEL_146:
      v130 = v145;
      re::StringID::destroyString((re::StringID *)buf);
      if (!v130)
      {
LABEL_110:
        *(_QWORD *)buf = 0x3C62BE4765422600;
        *(_QWORD *)&buf[8] = "meshshadow:visualizeClusters";
        LOBYTE(v145) = 0;
        v116 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v19, buf, &v145);
        v117 = v145;
        *(_QWORD *)&v145 = 0x26DCF6608CA13E42;
        *((_QWORD *)&v145 + 1) = "meshshadow:visualizeClusterInfo";
        v156[0] = 0;
        v118 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v19, &v145, v156);
        v119 = v19;
        v120 = v156[0];
        *(_QWORD *)v156 = 0x3C62BEC2F3809D42;
        *(_QWORD *)&v156[8] = "meshshadow:visualizeMatrices";
        LOBYTE(v147) = 0;
        v121 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v119, v156, &v147);
        v122 = v147;
        v147 = 0x572C0E956CDDF93CLL;
        v148 = "meshshadow:visualizePlanes";
        LOBYTE(v150) = 0;
        v123 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v119, &v147, &v150);
        v124 = v150;
        v150 = 0x5A213028C6E74578;
        v151 = "meshshadow:visualizeCullBoundingBoxes";
        LOBYTE(v152) = 0;
        if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v119, &v150, &v152))
          v125 = 0;
        else
          v125 = v152;
        re::StringID::destroyString((re::StringID *)&v150);
        re::StringID::destroyString((re::StringID *)&v147);
        re::StringID::destroyString((re::StringID *)v156);
        re::StringID::destroyString((re::StringID *)&v145);
        re::StringID::destroyString((re::StringID *)buf);
        if (v116)
          v117 = 0;
        if (v118)
          v126 = 0;
        else
          v126 = v120;
        if (v121)
          v127 = 0;
        else
          v127 = v122;
        if (v123)
          LODWORD(v19) = 0;
        else
          LODWORD(v19) = v124;
        goto LABEL_125;
      }
    }
    v14 = (unint64_t)v148;
    v19 = (unint64_t)a2;
    if (v148)
    {
      v29 = __dst;
LABEL_34:
      re::PerFrameAllocatorGPU::allocInternal((re::PerFrameAllocatorGPU *)v15, 2 * v14, 0x10uLL, 0, buf);
      v42 = *(_DWORD *)&buf[8];
      memcpy((void *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]), v29, 2 * v14);
      v15 = (uint64_t)**((id **)&v154 + 1);
      v150 = v15;
      LODWORD(v151) = v42;
      HIDWORD(v151) = 2 * v14;
      re::MaterialParameterBlock::setBuffer((re::MaterialParameterBlock *)a6, "patchFadeOpacityArray", (uint64_t)&v150, (uint64_t)buf);
      *(_QWORD *)buf = 0;
      if (v15)

      v18 = a5;
    }
    if (v147 && v148)
    {
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v147 + 40))(v147, __dst);
      v148 = 0;
      __dst = 0;
    }
    v152 = v27;
    v147 = 0x114714ADE9B09C5FLL;
    re::MaterialParameterBlock::setConstant((re::MaterialParameterBlock *)a6, &v147, 4uLL, &v152, 1, (uint64_t)v156);
    *(_QWORD *)v156 = 0;
    v14 = *(_QWORD *)(v18 + 64);
    v18 = (unint64_t)re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable((re::Allocator *)a6, a4);
    a6 = *(_QWORD *)(a3 + 152);
    v43 = *(const void **)(a3 + 160);
    v148 = 0;
    __dst = 0;
    v147 = 0;
    re::FixedArray<re::MeshReceiverPerShadowConstants>::init<>((uint64_t)&v147, (uint64_t)a4, a6);
    if (v148 != (const char *)a6)
    {
      re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
      _os_crash();
      __break(1u);
      goto LABEL_146;
    }
    v136 = v18;
    v140 = v14;
    v45 = (float *)__dst;
    if (a6)
      memmove(__dst, v43, 96 * a6 - 4);
    if (*(_QWORD *)(a3 + 64))
    {
      v14 = 0;
      v46 = 0;
      v18 = 0x7FFFFFFFLL;
      v15 = 96;
      do
      {
        v47 = *(_QWORD *)(re::ShadowTileManager::dataForTile(v19, (unsigned __int16 *)(*(_QWORD *)(a3 + 80) + 32 * v14 + 24))+ 32);
        if (re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)&v145, v47))
        {
          if ((_QWORD)v145
            && (v48 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v47 ^ (v47 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v47 ^ (v47 >> 30))) >> 27)),
                v49 = *(unsigned int *)(*((_QWORD *)&v145 + 1) + 4 * ((v48 ^ (v48 >> 31)) % *(unsigned int *)&v146[8])),
                (_DWORD)v49 != 0x7FFFFFFF))
          {
            v51 = *(_QWORD *)(*(_QWORD *)v146 + 32 * v49 + 16);
            for (i = v49; v51 != v47; v49 = i)
            {
              i = *(_DWORD *)(*(_QWORD *)v146 + 32 * i + 8) & 0x7FFFFFFF;
              v49 = 0x7FFFFFFFLL;
              if (i == 0x7FFFFFFF)
                break;
              v51 = *(_QWORD *)(*(_QWORD *)v146 + 32 * i + 16);
            }
          }
          else
          {
            v49 = 0x7FFFFFFFLL;
          }
          if (a6 <= v14)
            goto LABEL_140;
          v50 = *(float *)(*(_QWORD *)v146 + 32 * v49 + 24);
        }
        else
        {
          v50 = 1.0;
          if (a6 <= v14)
            goto LABEL_141;
        }
        v45[24 * v14 + 22] = v50;
        v14 = ++v46;
      }
      while (*(_QWORD *)(a3 + 64) > (unint64_t)v46);
    }
    *(_QWORD *)v156 = v147;
    *(_QWORD *)&v156[8] = a6;
    *(_QWORD *)&v156[16] = v45;
    *(_QWORD *)&buf[5] = 0;
    *(_QWORD *)buf = 0;
    v154 = (unint64_t)a4;
    *(_QWORD *)v155 = 0;
    *(_DWORD *)&v155[32] = 1065353216;
    *(_OWORD *)&v155[36] = xmmword_22610CC60;
    *(_QWORD *)&v155[52] = 0x3CF5C28F3F800000;
    *(_WORD *)&v155[60] = 0;
    *(_OWORD *)&v155[64] = xmmword_22610CC70;
    *(_QWORD *)&v155[80] = 0x3EB333333F800000;
    v155[88] = 1;
    *(_OWORD *)&v155[92] = xmmword_22610CC80;
    *(_OWORD *)&v155[108] = xmmword_22610CC90;
    *(_QWORD *)&v155[124] = 0x3DCCCCCD41F00000;
    *(_DWORD *)&v155[132] = 1100480512;
    v155[136] = 0;
    *(_OWORD *)&v155[144] = xmmword_2260E5F50;
    v155[160] = 1;
    *(_QWORD *)&v155[176] = 0x3F8000003F2D42C4;
    *(_OWORD *)&v155[188] = xmmword_22610CCA0;
    *(_QWORD *)&v155[204] = 1056964608;
    *(_DWORD *)&v155[184] = 10;
    *(_DWORD *)&v155[212] = 0x40000000;
    *(_WORD *)&v155[216] = 0;
    *(_WORD *)&v155[220] = 1;
    v155[222] = 0;
    *(_QWORD *)&v155[224] = 897988541;
    *(_QWORD *)&v155[232] = 0x3E80000000000000;
    *(_QWORD *)&v155[240] = 0x103DCCCCCDLL;
    *(_QWORD *)&v155[8] = v140;
    *(_QWORD *)&v155[16] = v136;
    re::FixedArray<float>::operator=((uint64_t *)&v154, (uint64_t *)v156);
    v53 = *(_QWORD *)(v19 + 56);
    v54 = a5;
    v55 = *(_DWORD *)(a5 + 152);
    *(_DWORD *)&buf[4] = v141;
    *(_DWORD *)&buf[8] = v53;
    *(_DWORD *)buf = v55;
    buf[12] = *(_BYTE *)(a5 + 173);
    v56 = *(_OWORD *)(a5 + 320);
    *(_OWORD *)&v155[192] = *(_OWORD *)(a5 + 304);
    *(_OWORD *)&v155[208] = v56;
    *(_OWORD *)&v155[224] = *(_OWORD *)(a5 + 336);
    *(_QWORD *)&v155[240] = *(_QWORD *)(a5 + 352);
    v57 = *(_OWORD *)(a5 + 256);
    *(_OWORD *)&v155[128] = *(_OWORD *)(a5 + 240);
    *(_OWORD *)&v155[144] = v57;
    v58 = *(_OWORD *)(a5 + 288);
    *(_OWORD *)&v155[160] = *(_OWORD *)(a5 + 272);
    *(_OWORD *)&v155[176] = v58;
    v59 = *(_OWORD *)(a5 + 192);
    *(_OWORD *)&v155[64] = *(_OWORD *)(a5 + 176);
    *(_OWORD *)&v155[80] = v59;
    v60 = *(_OWORD *)(a5 + 224);
    *(_OWORD *)&v155[96] = *(_OWORD *)(a5 + 208);
    *(_OWORD *)&v155[112] = v60;
    v61 = *(_OWORD *)(a5 + 160);
    *(_OWORD *)&v155[32] = *(_OWORD *)(a5 + 144);
    *(_OWORD *)&v155[48] = v61;
    v62 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x8000000000000000) != 0)
    {
      v63 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_23MeshShadowRenderingDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
      v64 = 5381;
      do
      {
        v62 = v64;
        v65 = *v63++;
        v64 = (33 * v64) ^ v65;
      }
      while (v65);
    }
    v66 = (qword_25411EFF0 + (v62 << 6) + (v62 >> 2) - 0x61C8864680B583E9) ^ v62;
    v67 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a7 + 40) + 32))(*(_QWORD *)(a7 + 40), 304, 16);
    *(_QWORD *)v67 = &off_24ED825D0;
    *(_QWORD *)(v67 + 21) = *(_QWORD *)&buf[5];
    *(_QWORD *)(v67 + 16) = *(_QWORD *)buf;
    v69 = *((_QWORD *)&v154 + 1);
    v68 = v154;
    v154 = 0uLL;
    *(_OWORD *)(v67 + 32) = __PAIR128__(v69, v68);
    *(_QWORD *)(v67 + 48) = 0;
    *(_QWORD *)(v67 + 48) = *(_QWORD *)v155;
    *(_QWORD *)v155 = 0;
    v70 = *(_OWORD *)&v155[8];
    v71 = *(_OWORD *)&v155[24];
    *(_OWORD *)(v67 + 88) = *(_OWORD *)&v155[40];
    *(_OWORD *)(v67 + 72) = v71;
    *(_OWORD *)(v67 + 56) = v70;
    v72 = *(_OWORD *)&v155[56];
    v73 = *(_OWORD *)&v155[72];
    v74 = *(_OWORD *)&v155[88];
    *(_OWORD *)(v67 + 152) = *(_OWORD *)&v155[104];
    *(_OWORD *)(v67 + 136) = v74;
    *(_OWORD *)(v67 + 120) = v73;
    *(_OWORD *)(v67 + 104) = v72;
    v75 = *(_OWORD *)&v155[120];
    v76 = *(_OWORD *)&v155[136];
    v77 = *(_OWORD *)&v155[152];
    *(_OWORD *)(v67 + 216) = *(_OWORD *)&v155[168];
    *(_OWORD *)(v67 + 200) = v77;
    *(_OWORD *)(v67 + 184) = v76;
    *(_OWORD *)(v67 + 168) = v75;
    v78 = *(_OWORD *)&v155[184];
    v79 = *(_OWORD *)&v155[200];
    v80 = *(_OWORD *)&v155[216];
    *(_OWORD *)(v67 + 280) = *(_OWORD *)&v155[232];
    *(_OWORD *)(v67 + 264) = v80;
    *(_OWORD *)(v67 + 248) = v79;
    *(_OWORD *)(v67 + 232) = v78;
    v81 = *(_QWORD *)(a7 + 96);
    if (v81
      && (v81 = v66 % *(unsigned int *)(a7 + 120),
          v82 = *(unsigned int *)(*(_QWORD *)(a7 + 104) + 4 * v81),
          (_DWORD)v82 != 0x7FFFFFFF))
    {
      v88 = *(_QWORD *)(a7 + 112);
      while (*(_QWORD *)(v88 + 24 * v82 + 8) != v66)
      {
        LODWORD(v82) = *(_DWORD *)(v88 + 24 * v82) & 0x7FFFFFFF;
        if ((_DWORD)v82 == 0x7FFFFFFF)
          goto LABEL_63;
      }
    }
    else
    {
LABEL_63:
      v83 = *(unsigned int *)(a7 + 132);
      if ((_DWORD)v83 == 0x7FFFFFFF)
      {
        v83 = *(unsigned int *)(a7 + 128);
        v84 = v83;
        if ((_DWORD)v83 == *(_DWORD *)(a7 + 120))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a7 + 96, 2 * *(_DWORD *)(a7 + 124));
          LODWORD(v81) = v66 % *(unsigned int *)(a7 + 120);
          v84 = *(_DWORD *)(a7 + 128);
        }
        *(_DWORD *)(a7 + 128) = v84 + 1;
        v85 = *(_QWORD *)(a7 + 112);
        v86 = *(_DWORD *)(v85 + 24 * v83);
      }
      else
      {
        v85 = *(_QWORD *)(a7 + 112);
        v86 = *(_DWORD *)(v85 + 24 * v83);
        *(_DWORD *)(a7 + 132) = v86 & 0x7FFFFFFF;
      }
      v87 = 24 * v83;
      *(_DWORD *)(v85 + v87) = v86 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(a7 + 112) + v87) = *(_DWORD *)(*(_QWORD *)(a7 + 112) + 24 * v83) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a7 + 104) + 4 * v81);
      *(_QWORD *)(*(_QWORD *)(a7 + 112) + 24 * v83 + 8) = v66;
      *(_QWORD *)(*(_QWORD *)(a7 + 112) + 24 * v83 + 16) = v67;
      *(_DWORD *)(*(_QWORD *)(a7 + 104) + 4 * v81) = v83;
      ++*(_DWORD *)(a7 + 124);
      ++*(_DWORD *)(a7 + 136);
      if ((_QWORD)v154 && *((_QWORD *)&v154 + 1))
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v154 + 40))(v154, *(_QWORD *)v155);
    }
    if (*(_QWORD *)v156 && *(_QWORD *)&v156[8])
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v156 + 40))(*(_QWORD *)v156, *(_QWORD *)&v156[16]);
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v145);
    v89 = *(_QWORD *)(a5 + 16);
    if (v89)
    {
      v14 = 0;
      v15 = a3 + 88;
      a6 = (unint64_t)v146;
      v142 = (unint64_t *)(a7 + 48);
      while (1)
      {
        v90 = *(_QWORD *)(*(_QWORD *)(v54 + 32) + 24 * v14 + 16);
        if (re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a3 + 88, v90))
        {
          break;
        }
LABEL_108:
        if (v89 <= ++v14)
          goto LABEL_109;
      }
      if (*(_QWORD *)v15)
      {
        v91 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v90 ^ (v90 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v90 ^ (v90 >> 30))) >> 27));
        v92 = (v91 ^ (v91 >> 31)) % *(unsigned int *)(a3 + 112);
        v93 = *(_QWORD *)(a3 + 104);
        v94 = *(unsigned int *)(*(_QWORD *)(a3 + 96) + 4 * v92);
        if ((_DWORD)v94 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v93 + 32 * v94 + 16) != v90)
          {
            v94 = *(_DWORD *)(v93 + 32 * v94 + 8) & 0x7FFFFFFF;
            if (v94 == 0x7FFFFFFF)
              goto LABEL_86;
          }
          goto LABEL_87;
        }
      }
      else
      {
        v93 = *(_QWORD *)(a3 + 104);
      }
LABEL_86:
      v94 = 0x7FFFFFFFLL;
LABEL_87:
      v18 = v93 + 32 * v94;
      memset(v146, 0, 36);
      *(_QWORD *)&v145 = 0;
      BYTE8(v145) = 0;
      *(_QWORD *)&v146[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v146, (uint64_t)a4, 3);
      *(_QWORD *)&v145 = *(_QWORD *)(v18 + 24);
      BYTE8(v145) = v90 != 0;
      v95 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a3, v90);
      if (v95)
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=((uint64_t)v146, v95);
        v19 = *(_QWORD *)(a5 + 16);
        if (v19 <= v14)
          goto LABEL_142;
        v96 = qword_25411EFE0;
        v97 = (re *)strlen(*(const char **)(*(_QWORD *)(a5 + 32) + 24 * v14));
        v98 = 0x9E3779B97F4A7C17;
        if (v97)
        {
          v97 = (re *)MurmurHash3_x64_128(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 24 * v14), (int)v97, 0, (unint64_t *)buf);
          v98 = ((*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf)
              - 0x61C8864680B583E9;
        }
        v99 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_31MeshShadowPerSceneRenderingDataEEE";
        if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_31MeshShadowPerSceneRenderingDataEEE" & 0x8000000000000000) != 0)
        {
          v100 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_31MeshShadowPerSceneRenderingDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
          v101 = 5381;
          do
          {
            v99 = v101;
            v102 = *v100++;
            v101 = (33 * v101) ^ v102;
          }
          while (v102);
        }
        v103 = ((((v96 >> 2) + (v96 << 6) + v98) ^ v96) - 0x61C8864680B583E9 + (v99 << 6) + (v99 >> 2)) ^ v99;
        v104 = re::globalAllocators(v97);
        v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v104[2] + 32))(v104[2], 72, 8);
        *(_QWORD *)v105 = &off_24ED82610;
        v106 = BYTE8(v145);
        *(_QWORD *)(v105 + 8) = v145;
        *(_BYTE *)(v105 + 16) = v106;
        *(_DWORD *)(v105 + 56) = 0;
        *(_QWORD *)(v105 + 40) = 0;
        *(_QWORD *)(v105 + 48) = 0;
        *(_DWORD *)(v105 + 64) = 0;
        *(_QWORD *)(v105 + 24) = *(_QWORD *)v146;
        *(_QWORD *)(v105 + 32) = 0;
        *(_QWORD *)(v105 + 32) = *(_QWORD *)&v146[8];
        *(_OWORD *)v146 = 0uLL;
        *(_QWORD *)(v105 + 40) = *(_QWORD *)&v146[16];
        *(_QWORD *)&v146[16] = 0;
        *(_OWORD *)(v105 + 48) = *(_OWORD *)&v146[24];
        *(_OWORD *)&v146[24] = xmmword_2260F5A80;
        v107 = *v142;
        if (!*v142
          || (v107 = v103 % *(unsigned int *)(a7 + 72),
              v108 = *(unsigned int *)(*(_QWORD *)(a7 + 56) + 4 * v107),
              (_DWORD)v108 == 0x7FFFFFFF))
        {
LABEL_99:
          v110 = *(unsigned int *)(a7 + 84);
          if ((_DWORD)v110 == 0x7FFFFFFF)
          {
            v110 = *(unsigned int *)(a7 + 80);
            v111 = v110;
            if ((_DWORD)v110 == *(_DWORD *)(a7 + 72))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v142, 2 * *(_DWORD *)(a7 + 76));
              v107 = v103 % *(unsigned int *)(a7 + 72);
              v111 = *(_DWORD *)(a7 + 80);
            }
            *(_DWORD *)(a7 + 80) = v111 + 1;
            v112 = *(_QWORD *)(a7 + 64);
            v113 = *(_DWORD *)(v112 + 24 * v110);
          }
          else
          {
            v112 = *(_QWORD *)(a7 + 64);
            v113 = *(_DWORD *)(v112 + 24 * v110);
            *(_DWORD *)(a7 + 84) = v113 & 0x7FFFFFFF;
          }
          v115 = 24 * v110;
          *(_DWORD *)(v112 + v115) = v113 | 0x80000000;
          *(_DWORD *)(*(_QWORD *)(a7 + 64) + v115) = *(_DWORD *)(*(_QWORD *)(a7 + 64) + 24 * v110) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a7 + 56) + 4 * v107);
          *(_QWORD *)(*(_QWORD *)(a7 + 64) + 24 * v110 + 8) = v103;
          *(_QWORD *)(*(_QWORD *)(a7 + 64) + 24 * v110 + 16) = v105;
          *(_DWORD *)(*(_QWORD *)(a7 + 56) + 4 * v107) = v110;
          ++*(_DWORD *)(a7 + 76);
          ++*(_DWORD *)(a7 + 88);
        }
        else
        {
          v109 = *(_QWORD *)(a7 + 64);
          while (*(_QWORD *)(v109 + 24 * v108 + 8) != v103)
          {
            LODWORD(v108) = *(_DWORD *)(v109 + 24 * v108) & 0x7FFFFFFF;
            if ((_DWORD)v108 == 0x7FFFFFFF)
              goto LABEL_99;
          }
        }
      }
      else
      {
        v114 = *re::shadowLogObjects(0);
        if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v90;
          _os_log_error_impl(&dword_224FE9000, v114, OS_LOG_TYPE_ERROR, "MeshShadowBuilder: In render data generation, world %llu has no receivers but the world still exists", buf, 0xCu);
        }
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v146);
      v54 = a5;
      v89 = *(_QWORD *)(a5 + 16);
      goto LABEL_108;
    }
LABEL_109:
    v19 = v137;
    if (v137)
      goto LABEL_110;
    v117 = 0;
    v126 = 0;
    v127 = 0;
    v125 = 0;
LABEL_125:
    v128 = v138[13];
    if (v128)
    {
      v129 = *(os_unfair_lock_s **)(v128 + 304);
      if (v129)
      {
        if (v126 && *(_BYTE *)(a5 + 104))
          re::PersistentShadowState::visualizeShadowClusterInfo((uint64_t)a2, *(os_unfair_lock_s **)(v128 + 304), (const StringID *)(a5 + 112), a5 + 144);
        if (v117)
          re::PersistentShadowState::visualizeShadowClusters(a2, v129);
        if (v127)
          re::PersistentShadowState::visualizeShadowMatrices(a2, v129);
        if ((_DWORD)v19)
          re::PersistentShadowState::visualizeShadowPlanes(a2, v129);
        if (v125)
          re::PersistentShadowState::visualizeCullBoundingBoxes(a2, v129);
      }
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<unsigned int>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::DynamicArray<unsigned int>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + (v9 << 6) + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)a5;
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v15 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v15;
  v16 = *(_QWORD *)(v13 + 56);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v16;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v13 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::DynamicArray<unsigned int>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0)
            re::HashTable<unsigned long long,re::DynamicArray<unsigned int>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 16), v11, v11 + 8);
          v11 += 64;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::FixedArray<re::ShadowInfo::BlurInfo>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t i;
  uint64_t j;
  char *v11;
  uint64_t k;
  char *v13;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0x469EE58469EE59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 928, a3);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 928 * a3, 16);
  a1[2] = v5;
  if (!v5)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v7 = (char *)v5;
  v8 = a3 - 1;
  if (v8)
  {
    for (i = 0; i != v8; ++i)
    {
      bzero(v7, 0x3A0uLL);
      for (j = 0; j != 896; j += 224)
      {
        v11 = &v7[j];
        *((_OWORD *)v11 + 6) = 0uLL;
        *((_OWORD *)v11 + 7) = 0uLL;
        *((_OWORD *)v11 + 4) = 0uLL;
        *((_OWORD *)v11 + 5) = 0uLL;
        *((_OWORD *)v11 + 2) = 0uLL;
        *((_OWORD *)v11 + 3) = 0uLL;
        *((_OWORD *)v11 + 10) = 0uLL;
        *((_OWORD *)v11 + 11) = 0uLL;
        *((_OWORD *)v11 + 12) = 0uLL;
        *((_OWORD *)v11 + 13) = 0uLL;
      }
      v7 += 928;
    }
  }
  bzero(v7, 0x3A0uLL);
  for (k = 0; k != 896; k += 224)
  {
    v13 = &v7[k];
    *((_OWORD *)v13 + 6) = 0uLL;
    *((_OWORD *)v13 + 7) = 0uLL;
    *((_OWORD *)v13 + 4) = 0uLL;
    *((_OWORD *)v13 + 5) = 0uLL;
    *((_OWORD *)v13 + 2) = 0uLL;
    *((_OWORD *)v13 + 3) = 0uLL;
    *((_OWORD *)v13 + 10) = 0uLL;
    *((_OWORD *)v13 + 11) = 0uLL;
    *((_OWORD *)v13 + 12) = 0uLL;
    *((_OWORD *)v13 + 13) = 0uLL;
  }
}

void re::MeshShadowGenerationData::~MeshShadowGenerationData(re::MeshShadowGenerationData *this)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  re::FixedArray<re::MeshShadowDepthPrepassReceiverParametersCPU>::deinit((uint64_t *)this + 55);
  v2 = *((_QWORD *)this + 50);
  if (v2)
  {
    if (*((_QWORD *)this + 54))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 52) = 0;
    *((_QWORD *)this + 50) = 0;
    ++*((_DWORD *)this + 106);
  }
  v3 = *((_QWORD *)this + 18);
  if (v3)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  v4.n128_f64[0] = re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 8);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    if (*((_QWORD *)this + 5))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 6), v4.n128_f64[0]);
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 6) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 3), v4);
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

void re::FixedArray<half>::init<>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  _WORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 < 0)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 2, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 2 * a3;
  v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 2 * a3, 2);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 2);
    v8 = (_WORD *)((char *)v8 + v5 - 2);
  }
  *v8 = 0;
}

uint64_t re::Optional<re::PersistentShadowRenderingData>::Optional(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 8), (uint64_t *)a2);
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v5;
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v6;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 132) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 88));
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v7 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = v7;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v8 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v8;
  return a1;
}

uint64_t re::FixedArray<re::MeshReceiverPerShadowConstants>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x2AAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 96, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 96 * a3, 16);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)(result + 88) = 0;
      *(_OWORD *)result = 0uLL;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_QWORD *)(result + 78) = 0;
      result += 96;
      --v6;
    }
    while (v6);
  }
  *(_DWORD *)(result + 88) = 0;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_QWORD *)(result + 78) = 0;
  return result;
}

uint64_t re::FixedArray<re::MeshShadowDepthPrepassReceiverParametersCPU>::deinit(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *a1;
  if (result)
  {
    v3 = a1[1];
    if (v3)
    {
      v4 = a1[2] + 112 * v3;
      v5 = a1[2];
      do
      {
        *(_QWORD *)v5 = 0;
        ++*(_DWORD *)(v5 + 8);
        v5 += 112;
      }
      while (v5 != v4);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return result;
}

_QWORD *re::RenderGraphDataStoreWrapper<re::MeshShadowGenerationData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED82550;
  re::MeshShadowGenerationData::~MeshShadowGenerationData((re::MeshShadowGenerationData *)(a1 + 2));
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::MeshShadowGenerationData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED82550;
  re::MeshShadowGenerationData::~MeshShadowGenerationData((re::MeshShadowGenerationData *)(a1 + 2));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneGenerationData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED82590;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 1);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneGenerationData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED82590;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::MeshShadowRenderingData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED825D0;
  v2 = a1[4];
  if (v2)
  {
    if (a1[5])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[6]);
      a1[5] = 0;
      a1[6] = 0;
    }
    a1[4] = 0;
  }
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::MeshShadowRenderingData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED825D0;
  v2 = a1[4];
  if (v2)
  {
    if (a1[5])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[6]);
      a1[5] = 0;
      a1[6] = 0;
    }
    a1[4] = 0;
  }
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneRenderingData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED82610;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 3);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::MeshShadowPerSceneRenderingData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED82610;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(a1 + 3);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::ARSegmentationEmitterCache *this, re::RenderGraphManager *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[3];
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  result = re::FontID::isValid((re::ARSegmentationEmitterCache *)((char *)this + 64));
  if ((result & 1) == 0)
  {
    v5 = re::globalAllocators((re *)result);
    v6 = v5[2];
    v19[0] = &off_24ED828D8;
    v20 = v6;
    v21 = v19;
    v7 = re::globalAllocators((re *)v5)[2];
    v16[0] = &off_24ED82930;
    v17 = v7;
    v18 = v16;
    re::RenderGraphManager::addProvider(a2, "ARSegmentationCache", (uint64_t)v19, (uint64_t)v16, 0, (uint64_t)&v12);
    v8 = v12;
    v9 = v13;
    v12 = 0;
    v13 = &str_110;
    v10 = *((_QWORD *)this + 8);
    v11 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 8) = v8;
    *((_QWORD *)this + 9) = v9;
    v15[0] = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
    v15[1] = v11;
    re::StringID::destroyString((re::StringID *)v15);
    *((_QWORD *)this + 10) = v14;
    re::StringID::destroyString((re::StringID *)&v12);
    if (v18)
    {
      (*(void (**)(_QWORD *))*v18)(v18);
      if (v18 != v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      v18 = 0;
    }
    result = (uint64_t)v21;
    if (v21)
    {
      result = (*(uint64_t (**)(_QWORD *))*v21)(v21);
      if (v21 != v19)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    }
  }
  return result;
}

void re::ARSegmentationEmitterCache::unregisterRenderGraphProvider(re::ARSegmentationEmitterCache *this, re::RenderGraphManager *a2)
{
  StringID *v4;
  _BYTE v5[16];
  uint64_t v6;

  v4 = (StringID *)((char *)this + 64);
  if (re::FontID::isValid((re::ARSegmentationEmitterCache *)((char *)this + 64)))
  {
    re::StringID::StringID((re::StringID *)v5, v4);
    v6 = *((_QWORD *)this + 10);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v5);
    re::StringID::destroyString((re::StringID *)v5);
    re::ProviderHandle::invalidate((re::ProviderHandle *)v4);
  }
}

void re::ARSegmentationEmitterCache::applyCachedDataToGraph(void **this, const re::ARSegmentationConnectionData *a2, id **a3, const char *a4)
{
  if (re::ARSegmentationEmitterCache::changeSpecification((int32x4_t *)this, (uint64_t)a2))
    re::ARSegmentationEmitterCache::reallocateCachedData(this, a3[1]);
  re::ARSegmentationEmitterCache::setTexturesOnLanes(this, (re::RenderFrame *)a3, a4);
}

BOOL re::ARSegmentationEmitterCache::changeSpecification(int32x4_t *a1, uint64_t a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int8x16_t v4;
  char v5;

  *(int32x2_t *)v2.i8 = vrev64_s32(*(int32x2_t *)(a2 + 16));
  v3.i64[0] = v2.i64[0];
  v3.i64[1] = *(_QWORD *)(a2 + 36);
  v4 = (int8x16_t)vceqq_s32(a1[3], v3);
  v5 = vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, v4));
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(v4))) & 1) != 0)
  {
    v2.i64[1] = *(_QWORD *)(a2 + 36);
    a1[3] = v2;
  }
  return (v5 & 0xF) != 0;
}

void re::ARSegmentationEmitterCache::reallocateCachedData(void **this, id *a2)
{
  id *v3;
  id v4;
  id v5;
  id v6;

  v3 = a2 + 23;
  v4 = a2[23];
  v5 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v5, sel_setWidth_, *((unsigned int *)this + 13));
  objc_msgSend(v5, sel_setHeight_, *((unsigned int *)this + 12));
  objc_msgSend(v5, sel_setUsage_, 3);
  objc_msgSend(v5, sel_setStorageMode_, 2);
  objc_msgSend(v5, sel_setPixelFormat_, *((int *)this + 14));
  re::mtl::Device::makeTexture(v5, v3, &v6);
  NS::SharedPtr<MTL::Texture>::operator=(this + 3, &v6);
  if (v6)

  objc_msgSend(v5, sel_setPixelFormat_, *((int *)this + 14));
  re::mtl::Device::makeTexture(v5, v3, &v6);
  NS::SharedPtr<MTL::Texture>::operator=(this + 4, &v6);
  if (v6)

  objc_msgSend(v5, sel_setPixelFormat_, *((int *)this + 15));
  re::mtl::Device::makeTexture(v5, v3, &v6);
  NS::SharedPtr<MTL::Texture>::operator=(this + 5, &v6);
  if (v6)

  if (v5)
}

void re::ARSegmentationEmitterCache::setTexturesOnLanes(id *this, re::RenderFrame *a2, const char *a3)
{
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;

  if (a3)
  {
    v6 = *a3;
    if (*a3)
    {
      v7 = a3[1];
      if (v7)
      {
        v8 = a3 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
      v6 &= ~0x8000000000000000;
    }
  }
  else
  {
    v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v17 = v6;
  v10 = this[3];
  v15 = re::kARSegmentationTextureFG & 0x7FFFFFFFFFFFFFFFLL;
  v16 = v10;
  re::RenderFrame::registerExternalTexture((uint64_t)a2, &v16, &v15, &v17, 0);
  if (v10)

  v11 = this[4];
  v14 = v11;
  v15 = re::kARSegmentationTextureBG & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::registerExternalTexture((uint64_t)a2, &v14, &v15, &v17, 0);
  if (v11)

  v12 = this[5];
  v13 = v12;
  v15 = re::kARSegmentationTextureDilatedDepth & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::registerExternalTexture((uint64_t)a2, &v13, &v15, &v17, 0);
  if (v12)

  re::RenderFrame::emitGraph(a2, "ARSegmentationCache", a3);
}

uint64_t re::createARSegmentationGenerateGuideData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  const char *v18;
  unint64_t v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  if ((v6 & 1) == 0
  {
    re::createARSegmentationGenerateGuideData(re::RenderFrame &,re::RenderSceneContext &)::kARSegmentationDataTypeScopeHash = re::hashString((re *)"ARSegmentationData", v18);
  }
  v7 = 0x9E3779B97F4A7C17;
  v8 = re::createARSegmentationGenerateGuideData(re::RenderFrame &,re::RenderSceneContext &)::kARSegmentationDataTypeScopeHash;
  v9 = *(const char **)(a2 + 56);
  v10 = strlen(v9);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)v9, v10, 0, v19);
    v7 = ((v19[1] - 0x61C8864680B583E9 + (v19[0] << 6) + (v19[0] >> 2)) ^ v19[0]) - 0x61C8864680B583E9;
  }
  v11 = re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(a1 + 32, ((v8 >> 2) + (v8 << 6) + v7) ^ v8);
  *(_QWORD *)a3 = &off_24ED82988;
  *(_QWORD *)(a3 + 32) = 0x7300000046;
  *(_DWORD *)(a3 + 40) = 25;
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(*(id *)(v11 + 8), sel_width);
    v14 = objc_msgSend(*(id *)(v12 + 32), sel_height);
    v15 = objc_msgSend(*(id *)(v12 + 8), sel_width);
    result = (uint64_t)objc_msgSend(*(id *)(v12 + 8), sel_height);
    v17 = -1;
  }
  else
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    result = 1;
    v17 = 1;
  }
  *(_DWORD *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 12) = v14;
  *(_DWORD *)(a3 + 16) = v15;
  *(_DWORD *)(a3 + 20) = result;
  *(_DWORD *)(a3 + 24) = v17;
  *(_DWORD *)(a3 + 28) = v17;
  return result;
}

uint64_t re::ARSegmentationDilationNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  _QWORD v13[4];
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  char v20;

  v10[0] = 0;
  v16 = 0;
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v17 = 257;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 37, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v14);
  result = v13[0];
  if (v13[0])
  {
    if ((v13[1] & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13[0] + 40))();
    memset(v13, 0, sizeof(v13));
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

void re::ARSegmentationDilationNode::setup(re::ARSegmentationDilationNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 280, (uint64_t)&v6);
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::ARSegmentationDilationNode::execute(id *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned __int16 v11;
  unint64_t v12;
  unint64_t v13;
  id *v14;
  id v15;
  _WORD v16[4];
  _QWORD v17[3];
  id v18[3];

  v4 = re::RenderGraphDataStore::get<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(*((_QWORD *)a2 + 146), *(const char **)(v4 + 8));
  v6 = re::RenderGraphDataStore::tryGet<re::ARSegmentationExecuteData>(*((_QWORD *)a2 + 146), *(const char **)(v4 + 8));
  if (v5)
  {
    v7 = v6;
    v8 = objc_msgSend(this[37], sel_threadExecutionWidth);
    v9 = objc_msgSend(this[37], sel_maxTotalThreadsPerThreadgroup) / v8;
    v10 = *(_DWORD *)(v7 + 8);
    v16[2] = v10;
    v11 = v9 - 2 * v10;
    v16[1] = v11;
    v16[0] = v8 - 2 * v10;
    v12 = (objc_msgSend(*(id *)(v5 + 8), sel_width) + v16[0] - 1) / v16[0];
    v13 = (objc_msgSend(*(id *)(v5 + 8), sel_height) + v11 - 1) / v11;
    v14 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
    re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v14, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v15);
    objc_msgSend(v15, "setComputePipelineState:", this[37]);
    objc_msgSend(v15, "setTexture:atIndex:", *(_QWORD *)(v5 + 8), 0);
    objc_msgSend(v15, "setTexture:atIndex:", *(_QWORD *)(v5 + 16), 1);
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)(this + 35), 0, 0, v18);
    objc_msgSend(v15, "setTexture:atIndex:", v18[0], 2);
    if (v18[0])

    objc_msgSend(v15, "setBytes:length:atIndex:", v16, 8, 0);
    objc_msgSend(v15, "setThreadgroupMemoryLength:atIndex:", 4 * v9 * v8, 0);
    objc_msgSend(v15, "setThreadgroupMemoryLength:atIndex:", 2 * v9 * v8, 1);
    v18[0] = (id)v12;
    v18[1] = (id)v13;
    v18[2] = (id)1;
    v17[0] = v8;
    v17[1] = v9;
    v17[2] = 1;
    objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", v18, v17);

  }
}

void re::ARSegmentationGenerateGuideNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  _anonymous_namespace_ *v9;
  void **v10;
  _BYTE v11[8];
  _anonymous_namespace_ *v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  char v24;

  v11[0] = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v19 = 0;
  v21 = 257;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v11);
  NS::SharedPtr<MTL::Texture>::operator=(this + 39, ComputePipelineState);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v16);
  v9 = (_anonymous_namespace_ *)v14;
  if ((_QWORD)v14)
  {
    if ((BYTE8(v14) & 1) != 0)
      v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    v14 = 0u;
    v15 = 0u;
  }
  if (v11[0])
  {
    v9 = v12;
    if (v12)
    {
      if ((v13 & 1) != 0)
        v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
    }
  }
  v11[0] = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v19 = 0;
  v21 = 257;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v10 = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v11);
  NS::SharedPtr<MTL::Texture>::operator=(this + 40, v10);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v16);
  if ((_QWORD)v14)
  {
    if ((BYTE8(v14) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v14 + 40))();
    v14 = 0u;
    v15 = 0u;
  }
  if (v11[0] && v12 && (v13 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
}

uint64_t re::ARSegmentationGenerateGuideNode::setup(re::ARSegmentationGenerateGuideNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  char *v5;
  uint64_t result;
  _QWORD v7[2];
  __int128 v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)this + 280;
  v7[0] = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 280, (uint64_t)v7);
  *(_DWORD *)((char *)v7 + 3) = 0;
  LODWORD(v7[0]) = 0;
  v7[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)v5, (uint64_t)v7);
  v7[0] = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  result = re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 296, (uint64_t)v7);
  *((_BYTE *)a2 + 593) = 1;
  return result;
}

void re::ARSegmentationGenerateGuideNode::execute(re::ARSegmentationGenerateGuideNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  id *v5;
  uint64_t v6;
  float v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = re::RenderGraphDataStore::get<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = (id *)re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(*((_QWORD *)a2 + 146), *(const char **)(v4 + 8));
  v6 = re::RenderGraphDataStore::tryGet<re::ARSegmentationExecuteData>(*((_QWORD *)a2 + 146), *(const char **)(v4 + 8));
  if (v5)
  {
    v19 = v6;
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 280, 0, 0, &v23);
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 296, 0, 0, &v22);
    re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v21);
    v7 = (float)(unint64_t)objc_msgSend(v5[3], sel_width);
    v8 = objc_msgSend(v5[4], sel_width);
    if ((float)(unint64_t)v8 < v7)
      v7 = (float)(unint64_t)v8;
    v20 = vcvtps_u32_f32(v7 / (float)(unint64_t)objc_msgSend(v5[1], sel_width));
    objc_msgSend(v21, "setComputePipelineState:", *((_QWORD *)this + 39));
    objc_msgSend(v21, "setTexture:atIndex:", v5[3], 0);
    objc_msgSend(v21, "setTexture:atIndex:", v5[4], 1);
    objc_msgSend(v21, "setTexture:atIndex:", v23, 2);
    objc_msgSend(v21, "setBytes:length:atIndex:", &v20, 4, 0);
    v9 = objc_msgSend(*((id *)this + 39), sel_threadExecutionWidth);
    v10 = objc_msgSend(*((id *)this + 39), sel_maxTotalThreadsPerThreadgroup) / v9;
    v11 = (v9 + objc_msgSend(v23, sel_width) - 1) / v9;
    v12 = objc_msgSend(v23, sel_height);
    v27 = v11;
    v28 = (v10 + v12 - 1) / v10;
    v29 = 1;
    v24 = v9;
    v25 = v10;
    v26 = 1;
    objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", &v27, &v24);
    objc_msgSend(v21, "setComputePipelineState:", *((_QWORD *)this + 40));
    objc_msgSend(v21, "setTexture:atIndex:", v23, 0);
    objc_msgSend(v21, "setTexture:atIndex:", v22, 1);
    objc_msgSend(v21, "setBytes:length:atIndex:", &v20, 4, 0);
    v13 = objc_msgSend(*((id *)this + 40), sel_threadExecutionWidth);
    v14 = objc_msgSend(*((id *)this + 40), sel_maxTotalThreadsPerThreadgroup) / v13;
    v15 = (v13 + objc_msgSend(v22, sel_width) - 1) / v13;
    v16 = objc_msgSend(v22, sel_height);
    v27 = v15;
    v28 = (v14 + v16 - 1) / v14;
    v29 = 1;
    v24 = v13;
    v25 = v14;
    v26 = 1;
    objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", &v27, &v24);
    re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v21);
    v17 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1)
                                                                                              + 104))
                            + 16));
    v18 = *(_QWORD *)(v19 + 32);
    ++**(_QWORD **)(v19 + 40);
    objc_msgSend(v17, "encodeSignalEvent:value:", v18);

    if (v22)
    if (v23)

  }
}

uint64_t re::ARSegmentationDualGuidedFilterNode::setup(re::ARSegmentationDualGuidedFilterNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  _QWORD v6[2];
  __int128 v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)a2 + 593) = 1;
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 256, (uint64_t)v6);
  v6[0] = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 272, (uint64_t)v6);
  v6[0] = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 288, (uint64_t)v6);
}

void re::ARSegmentationDualGuidedFilterNode::execute(re::ARSegmentationDualGuidedFilterNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;

  v4 = re::RenderGraphDataStore::get<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(*((_QWORD *)a2 + 146), *(const char **)(v4 + 8));
  v6 = re::RenderGraphDataStore::tryGet<re::ARSegmentationExecuteData>(*((_QWORD *)a2 + 146), *(const char **)(v4 + 8));
  if (v5)
  {
    v7 = v6;
    v8 = (void **)(v6 + 24);
    v9 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1)
                                                                                             + 104))
                           + 16));
    v14 = v9;
    objc_msgSend(v9, "encodeWaitForEvent:value:", *(_QWORD *)(v7 + 32), **(_QWORD **)(v7 + 40));
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 256, 0, 0, &v13);
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 272, 0, 0, &v12);
    re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 288, 0, 0, &v11);
    re::ar::DualGuidedFilter::encodeDualCoefficients(v8, &v14, &v13, (void **)(v5 + 8), &v12, (uint64_t *)&v11);
    v10 = *(_QWORD *)(v7 + 32);
    ++**(_QWORD **)(v7 + 40);
    objc_msgSend(v9, "encodeSignalEvent:value:", v10);
    if (v11)

    if (v12)
    if (v13)

  }
}

void re::ARSegmentationCompositeNode::execute(re::ARSegmentationCompositeNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  re::BufferTable *v13;
  re *v14;
  const re::WeakStringID *v15;
  re *v16;
  const re::WeakStringID *v17;
  re::BufferTable *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = re::RenderGraphDataStore::get<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  v5 = re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(*((_QWORD *)a2 + 146), *(const char **)(v4 + 8));
  v6 = re::RenderGraphDataStore::tryGet<re::ARSegmentationExecuteData>(*((_QWORD *)a2 + 146), *(const char **)(v4 + 8));
  if (v5)
  {
    v7 = v6;
    v8 = objc_retain(*(id *)(re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1)
                                                                                             + 104))
                           + 16));
    objc_msgSend(v8, "encodeWaitForEvent:value:", *(_QWORD *)(v7 + 32), **(_QWORD **)(v7 + 40));
    v9 = (_QWORD *)(*(_QWORD *)a2 + 368);
    v20 = 0x5739F99E7C0200E3;
    re::DynamicTextureTableAdd(v9, &v20, (id *)(v5 + 24));
    v10 = (_QWORD *)(*(_QWORD *)a2 + 368);
    v20 = 0x239F7200ED1CA884;
    re::DynamicTextureTableAdd(v10, &v20, (id *)(v5 + 32));
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 8uLL, 8uLL, (uint64_t)&v20);
    v11 = v22;
    v12 = v21 | ((unint64_t)HIDWORD(v21) << 32);
    *(_QWORD *)(v20 + v21) = *(_QWORD *)(v7 + 16);
    v13 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    v19 = 0x3A4249E1C0094FBALL;
    v20 = v11;
    v21 = v12;
    re::BufferTable::setBuffer(v13, (const re::WeakStringID *)&v19, (const BufferView *)&v20);
    re::RenderGraphFullscreenNode::executeInternal(this, a2, (re::ARSegmentationCompositeNode *)((char *)this + 264));
    v14 = (re *)(*(_QWORD *)a2 + 368);
    v20 = 0x5739F99E7C0200E3;
    re::DynamicTextureTableRemove(v14, (re::TextureTable *)&v20, v15);
    v16 = (re *)(*(_QWORD *)a2 + 368);
    v20 = 0x239F7200ED1CA884;
    re::DynamicTextureTableRemove(v16, (re::TextureTable *)&v20, v17);
    v18 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    v20 = 0x3A4249E1C0094FBALL;
    re::BufferTable::removeBuffer(v18, (const re::WeakStringID *)&v20);

  }
}

uint64_t *re::allocInfo_ARSegmentationConnectionData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_438);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_438))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F100, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411F110 = 0;
    qword_25411F120 = 0;
    qword_25411F128 = 0xFFFFFFFFLL;
    qword_25411F100 = (uint64_t)&off_24ED7DAA8;
    qword_25411F130 = (uint64_t)"ARSegmentationConnectionData";
    dword_25411F138 = 0;
    xmmword_25411F140 = 0u;
    unk_25411F150 = 0u;
    xmmword_25411F160 = 0u;
    qword_25411F170 = 0;
    __cxa_guard_release(&_MergedGlobals_438);
  }
  return &qword_25411F100;
}

void re::initInfo_ARSegmentationConnectionData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  _QWORD v46[2];
  __int128 v47;

  v46[0] = 0x938F17887DE011F6;
  v46[1] = "ARSegmentationConnectionData";
  re::StringID::destroyString((re::StringID *)v46);
  *((_OWORD *)this + 2) = v47;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F008);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F008);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphData((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphData";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F0B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "guideScratchWidth";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F0B8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint32_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "guideScratchHeight";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0xC00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411F0C0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint32_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "guideWidth";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411F0C8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_uint32_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "guideHeight";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1400000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25411F0D0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_uint32_t((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "compositionAlphaWidth";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x1800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_25411F0D8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_uint32_t((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "compositionAlphaHeight";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x1C00000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_25411F0E0 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::mtl::introspect_PixelFormat((re::mtl *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "guideFormat";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x2000000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_25411F0E8 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::mtl::introspect_PixelFormat((re::mtl *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "coefficientsFormat";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x2400000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_25411F0F0 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v43 = re::mtl::introspect_PixelFormat((re::mtl *)1, v42);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "dilatedFormat";
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x2800000009;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_25411F0F8 = v44;
      __cxa_guard_release(&qword_25411F008);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 10;
  *((_QWORD *)this + 8) = &qword_25411F0B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ARSegmentationConnectionData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ARSegmentationConnectionData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ARSegmentationConnectionData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ARSegmentationConnectionData>;
  re::IntrospectionRegistry::add(this, v3);
  v45 = v47;
}

void re::internal::defaultConstruct<re::ARSegmentationConnectionData>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED82988;
}

_QWORD *re::internal::defaultConstructV2<re::ARSegmentationConnectionData>(_QWORD *result)
{
  *result = &off_24ED82988;
  return result;
}

uint64_t re::introspect_ARSegmentationConnectionData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationConnectionData", (uint64_t (*)(re::internal *))re::allocInfo_ARSegmentationConnectionData, (re::IntrospectionBase *(*)(void))re::initInfo_ARSegmentationConnectionData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ARSegmentationConnectionData>, this);
}

uint64_t *re::allocInfo_ARSegmentationDilationNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F010);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F010))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F178, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411F188 = 0;
    qword_25411F198 = 0;
    qword_25411F1A0 = 0xFFFFFFFFLL;
    qword_25411F178 = (uint64_t)&off_24ED7DAA8;
    qword_25411F1A8 = (uint64_t)"ARSegmentationDilationNode";
    dword_25411F1B0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411F1E8 = 0;
    __cxa_guard_release(&qword_25411F010);
  }
  return &qword_25411F178;
}

void re::initInfo_ARSegmentationDilationNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0xCBB585821370F806;
  v18[1] = "ARSegmentationDilationNode";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F018);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F018);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F058 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "library";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F060 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_RenderGraphTargetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "dilatedDepthTexture";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x11800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411F068 = v16;
      __cxa_guard_release(&qword_25411F018);
    }
  }
  *((_QWORD *)this + 2) = 0x13000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25411F058;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ARSegmentationDilationNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ARSegmentationDilationNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ARSegmentationDilationNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ARSegmentationDilationNode>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

double re::internal::defaultConstruct<re::ARSegmentationDilationNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED82638;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  result = NAN;
  *((_QWORD *)v3 + 36) = -1;
  *((_QWORD *)v3 + 37) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ARSegmentationDilationNode>(int a1, int a2, re::ARSegmentationDilationNode *this)
{
  re::ARSegmentationDilationNode::~ARSegmentationDilationNode(this);
}

double re::internal::defaultConstructV2<re::ARSegmentationDilationNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED82638;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  result = NAN;
  *((_QWORD *)v1 + 36) = -1;
  *((_QWORD *)v1 + 37) = 0;
  return result;
}

uint64_t re::introspect_ARSegmentationDilationNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationDilationNode", (uint64_t (*)(re::internal *))re::allocInfo_ARSegmentationDilationNode, (re::IntrospectionBase *(*)(void))re::initInfo_ARSegmentationDilationNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ARSegmentationDilationNode>, this);
}

uint64_t *re::allocInfo_ARSegmentationGenerateGuideNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F020);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F020))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F1F0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411F200 = 0;
    qword_25411F210 = 0;
    qword_25411F218 = 0xFFFFFFFFLL;
    qword_25411F1F0 = (uint64_t)&off_24ED7DAA8;
    qword_25411F220 = (uint64_t)"ARSegmentationGenerateGuideNode";
    dword_25411F228 = 0;
    xmmword_25411F230 = 0u;
    unk_25411F240 = 0u;
    xmmword_25411F250 = 0u;
    qword_25411F260 = 0;
    __cxa_guard_release(&qword_25411F020);
  }
  return &qword_25411F1F0;
}

void re::initInfo_ARSegmentationGenerateGuideNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0x475A9A5066DB65ECLL;
  v22[1] = "ARSegmentationGenerateGuideNode";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F028);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F028);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F070 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "library";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F078 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_RenderGraphTargetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "guideScratchTexture";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x11800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411F080 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_RenderGraphTargetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "guideTexture";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x12800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411F088 = v20;
      __cxa_guard_release(&qword_25411F028);
    }
  }
  *((_QWORD *)this + 2) = 0x14800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411F070;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ARSegmentationGenerateGuideNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ARSegmentationGenerateGuideNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ARSegmentationGenerateGuideNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ARSegmentationGenerateGuideNode>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

double re::internal::defaultConstruct<re::ARSegmentationGenerateGuideNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED826E0;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  result = NAN;
  *((_QWORD *)v3 + 36) = -1;
  *((_QWORD *)v3 + 37) = 0;
  *((_QWORD *)v3 + 38) = -1;
  *((_QWORD *)v3 + 39) = 0;
  *((_QWORD *)v3 + 40) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ARSegmentationGenerateGuideNode>(int a1, int a2, re::ARSegmentationGenerateGuideNode *this)
{
  re::ARSegmentationGenerateGuideNode::~ARSegmentationGenerateGuideNode(this);
}

double re::internal::defaultConstructV2<re::ARSegmentationGenerateGuideNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED826E0;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  result = NAN;
  *((_QWORD *)v1 + 36) = -1;
  *((_QWORD *)v1 + 37) = 0;
  *((_QWORD *)v1 + 38) = -1;
  *((_QWORD *)v1 + 39) = 0;
  *((_QWORD *)v1 + 40) = 0;
  return result;
}

uint64_t re::introspect_ARSegmentationGenerateGuideNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationGenerateGuideNode", (uint64_t (*)(re::internal *))re::allocInfo_ARSegmentationGenerateGuideNode, (re::IntrospectionBase *(*)(void))re::initInfo_ARSegmentationGenerateGuideNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ARSegmentationGenerateGuideNode>, this);
}

uint64_t *re::allocInfo_ARSegmentationDualGuidedFilterNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F030);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F030))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F268, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411F278 = 0;
    qword_25411F288 = 0;
    qword_25411F290 = 0xFFFFFFFFLL;
    qword_25411F268 = (uint64_t)&off_24ED7DAA8;
    qword_25411F298 = (uint64_t)"ARSegmentationDualGuidedFilterNode";
    dword_25411F2A0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_25411F2D8 = 0;
    __cxa_guard_release(&qword_25411F030);
  }
  return &qword_25411F268;
}

void re::initInfo_ARSegmentationDualGuidedFilterNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0x9399778B94A360A2;
  v22[1] = "ARSegmentationDualGuidedFilterNode";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F038);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F038);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F090 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_RenderGraphTargetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "guideTexture";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F098 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_RenderGraphTargetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "coefficientsTextureFG";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x11000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411F0A0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_RenderGraphTargetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "coefficientsTextureBG";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x12000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411F0A8 = v20;
      __cxa_guard_release(&qword_25411F038);
    }
  }
  *((_QWORD *)this + 2) = 0x13000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411F090;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ARSegmentationDualGuidedFilterNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ARSegmentationDualGuidedFilterNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ARSegmentationDualGuidedFilterNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ARSegmentationDualGuidedFilterNode>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

double re::internal::defaultConstruct<re::ARSegmentationDualGuidedFilterNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED82788;
  *((_QWORD *)v3 + 32) = 0;
  result = NAN;
  *((_QWORD *)v3 + 33) = -1;
  *((_QWORD *)v3 + 34) = 0;
  *((_QWORD *)v3 + 35) = -1;
  *((_QWORD *)v3 + 36) = 0;
  *((_QWORD *)v3 + 37) = -1;
  return result;
}

void re::internal::defaultDestruct<re::ARSegmentationDualGuidedFilterNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

double re::internal::defaultConstructV2<re::ARSegmentationDualGuidedFilterNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED82788;
  *((_QWORD *)v1 + 32) = 0;
  result = NAN;
  *((_QWORD *)v1 + 33) = -1;
  *((_QWORD *)v1 + 34) = 0;
  *((_QWORD *)v1 + 35) = -1;
  *((_QWORD *)v1 + 36) = 0;
  *((_QWORD *)v1 + 37) = -1;
  return result;
}

uint64_t re::introspect_ARSegmentationDualGuidedFilterNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationDualGuidedFilterNode", (uint64_t (*)(re::internal *))re::allocInfo_ARSegmentationDualGuidedFilterNode, (re::IntrospectionBase *(*)(void))re::initInfo_ARSegmentationDualGuidedFilterNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ARSegmentationDualGuidedFilterNode>, this);
}

uint64_t *re::allocInfo_ARSegmentationCompositeNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F040);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F040))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F2E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411F2F0 = 0;
    qword_25411F300 = 0;
    qword_25411F308 = 0xFFFFFFFFLL;
    qword_25411F2E0 = (uint64_t)&off_24ED7DAA8;
    qword_25411F310 = (uint64_t)"ARSegmentationCompositeNode";
    dword_25411F318 = 0;
    xmmword_25411F320 = 0u;
    unk_25411F330 = 0u;
    xmmword_25411F340 = 0u;
    qword_25411F350 = 0;
    __cxa_guard_release(&qword_25411F040);
  }
  return &qword_25411F2E0;
}

void re::initInfo_ARSegmentationCompositeNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x9962540693657AECLL;
  v10[1] = "ARSegmentationCompositeNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F050);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F050);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphFullscreenNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphFullscreenNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F048 = v8;
      __cxa_guard_release(&qword_25411F050);
    }
  }
  *((_QWORD *)this + 2) = 0x1E800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25411F048;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ARSegmentationCompositeNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ARSegmentationCompositeNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ARSegmentationCompositeNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ARSegmentationCompositeNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::ARSegmentationCompositeNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode *v3;
  double result;

  *((_QWORD *)this + 56) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v3 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
  *(_QWORD *)v3 = &off_24ED82830;
  *((_QWORD *)v3 + 57) = 0;
  result = NAN;
  *((_QWORD *)v3 + 58) = -1;
  *((_QWORD *)v3 + 59) = 0;
  *((_QWORD *)v3 + 60) = -1;
  return result;
}

void re::internal::defaultDestruct<re::ARSegmentationCompositeNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

double re::internal::defaultConstructV2<re::ARSegmentationCompositeNode>(uint64_t a1)
{
  re::RenderGraphFullscreenNode *v1;
  double result;

  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v1 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)a1);
  *(_QWORD *)v1 = &off_24ED82830;
  *((_QWORD *)v1 + 57) = 0;
  result = NAN;
  *((_QWORD *)v1 + 58) = -1;
  *((_QWORD *)v1 + 59) = 0;
  *((_QWORD *)v1 + 60) = -1;
  return result;
}

uint64_t re::introspect_ARSegmentationCompositeNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ARSegmentationCompositeNode", (uint64_t (*)(re::internal *))re::allocInfo_ARSegmentationCompositeNode, (re::IntrospectionBase *(*)(void))re::initInfo_ARSegmentationCompositeNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ARSegmentationCompositeNode>, this);
}

void re::ARSegmentationDilationNode::~ARSegmentationDilationNode(re::ARSegmentationDilationNode *this)
{
  re::ARSegmentationDilationNode::~ARSegmentationDilationNode(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {

    *((_QWORD *)this + 37) = 0;
  }
  re::AssetHandle::~AssetHandle((re::ARSegmentationDilationNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
}

void re::ARSegmentationGenerateGuideNode::~ARSegmentationGenerateGuideNode(re::ARSegmentationGenerateGuideNode *this)
{
  re::ARSegmentationGenerateGuideNode::~ARSegmentationGenerateGuideNode(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 40);
  if (v2)
  {

    *((_QWORD *)this + 40) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 39);
  if (v3)
  {

    *((_QWORD *)this + 39) = 0;
  }
  re::AssetHandle::~AssetHandle((re::ARSegmentationGenerateGuideNode *)((char *)this + 256));
  re::RenderGraphNode::~RenderGraphNode(this);
}

void re::ARSegmentationDualGuidedFilterNode::~ARSegmentationDualGuidedFilterNode(re::ARSegmentationDualGuidedFilterNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::ARSegmentationCompositeNode::~ARSegmentationCompositeNode(re::ARSegmentationCompositeNode *this)
{
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator()()
{
  return 0x1A4E9E909310CFLL;
}

_QWORD *re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED828D8;
  return result;
}

_QWORD *re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED828D8;
  return result;
}

uint64_t re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

void re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1, uint64_t a2, char **a3, re::RenderFrame *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;

  v5 = *a3;
  if (*a3)
  {
    v6 = 0x9E3779B97F4A7C17;
    v7 = *v5;
    if (*v5)
    {
      v8 = v5[1];
      if (v8)
      {
        v9 = (unsigned __int8 *)(v5 + 2);
        do
        {
          v7 = 31 * v7 + v8;
          v10 = *v9++;
          v8 = v10;
        }
        while (v10);
      }
      v6 = (v7 & 0x7FFFFFFFFFFFFFFFLL) - 0x61C8864680B583E9;
    }
  }
  else
  {
    v6 = 0x1E3779B97F4A7C16;
  }
  v18 = 2;
  v19 = -1;
  v20 = -1;
  v21 = -1;
  v22 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v23 = _D0;
  v24 = xmmword_226135530;
  v25 = xmmword_226135540;
  v26 = -1;
  v29 = 0;
  v17 = 2;
  v30 = 2 * re::kARSegmentationTextureFG;
  v31 = off_255825788;
  v27 = -1;
  v28 = (v6 + (re::kARSegmentationTextureFG << 6) + ((re::kARSegmentationTextureFG & 0x7FFFFFFFFFFFFFFFuLL) >> 2)) ^ re::kARSegmentationTextureFG & 0x7FFFFFFFFFFFFFFFLL;
  re::StringID::destroyString((re::StringID *)&v30);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v17, off_255825788, &v30);
  v16 = 0x3A41DA2B27DFFE0CLL;
  re::RenderFrame::addTargetOutput(a4, &v16, (double *)&v30, v5);
  v30 = 2 * re::kARSegmentationTextureBG;
  v31 = off_255825798;
  v28 = (v6 + (re::kARSegmentationTextureBG << 6) + ((re::kARSegmentationTextureBG & 0x7FFFFFFFFFFFFFFFuLL) >> 2)) ^ re::kARSegmentationTextureBG & 0x7FFFFFFFFFFFFFFFLL;
  re::StringID::destroyString((re::StringID *)&v30);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v17, off_255825798, &v30);
  v16 = 0x3A41DA2B27DFFD90;
  re::RenderFrame::addTargetOutput(a4, &v16, (double *)&v30, v5);
  v30 = 2 * re::kARSegmentationTextureDilatedDepth;
  v31 = off_2558257A8;
  v28 = (v6
       + (re::kARSegmentationTextureDilatedDepth << 6)
       + ((re::kARSegmentationTextureDilatedDepth & 0x7FFFFFFFFFFFFFFFuLL) >> 2)) ^ re::kARSegmentationTextureDilatedDepth & 0x7FFFFFFFFFFFFFFFLL;
  re::StringID::destroyString((re::StringID *)&v30);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v17, off_2558257A8, &v30);
  v16 = 0x5F7D65B7480CA957;
  re::RenderFrame::addTargetOutput(a4, &v16, (double *)&v30, v5);
}

_QWORD *re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED82930;
  return result;
}

_QWORD *re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED82930;
  return result;
}

uint64_t re::internal::Callable<re::ARSegmentationEmitterCache::registerRenderGraphProvider(re::RenderGraphManager &)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

void re::ARSegmentationConnectionData::~ARSegmentationConnectionData(re::ARSegmentationConnectionData *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re23ARSegmentationInputDataE";
  if (((unint64_t)"N2re23ARSegmentationInputDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re23ARSegmentationInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(uint64_t a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"ARSegmentationData", 18, 0, &v10);
  v4 = v10;
  v5 = v11;
  v6 = strlen(a2);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)a2, v6, 0, &v10);
    v7 = ((v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10) - 0x61C8864680B583E9;
  }
  else
  {
    v7 = 0x9E3779B97F4A7C17;
  }
  v8 = (v5 - 0x61C8864680B583E9 + (v4 << 6) + (v4 >> 2)) ^ v4;
  return re::RenderGraphDataStore::tryGet<re::ARSegmentationInputData>(a1, ((v8 >> 2) + (v8 << 6) + v7) ^ v8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::ARSegmentationExecuteData>(uint64_t a1, const char *a2)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"ARSegmentationData", 18, 0, &v13);
  v4 = (v14 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583E9) ^ v13;
  v5 = strlen(a2);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)a2, v5, 0, &v13);
    v6 = ((v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13) - 0x61C8864680B583E9;
  }
  else
  {
    v6 = 0x9E3779B97F4A7C17;
  }
  v7 = ((v4 >> 2) + (v4 << 6) + v6) ^ v4;
  v8 = (unint64_t)"N2re25ARSegmentationExecuteDataE";
  if (((unint64_t)"N2re25ARSegmentationExecuteDataE" & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((unint64_t)"N2re25ARSegmentationExecuteDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v13 = (v7 - 0x61C8864680B583E9 + (v8 << 6) + (v8 >> 2)) ^ v8;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v13);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::RenderGraphUploadPostParams::setup(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 592) = 1;
}

void re::RenderGraphUploadPostParams::execute(re::RenderGraphUploadPostParams *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  void *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  unsigned __int8 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  __int128 *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;

  if (*((_BYTE *)this + 256) && !*((_BYTE *)this + 257))
  {
    v4 = re::RenderGraphDataStore::add<re::TonemapParametersData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    re::TonemapUserParameters::computeRenderParameters((re::RenderGraphUploadPostParams *)((char *)this + 260), (uint64_t)&v22);
    *(_OWORD *)(v4 + 88) = v27;
    *(_OWORD *)(v4 + 104) = v28;
    *(_OWORD *)(v4 + 120) = v29;
    *(_DWORD *)(v4 + 136) = v30;
    *(_OWORD *)(v4 + 24) = v23;
    *(_OWORD *)(v4 + 40) = v24;
    *(_OWORD *)(v4 + 56) = v25;
    *(_OWORD *)(v4 + 72) = v26;
    *(_OWORD *)(v4 + 8) = v22;
  }
  if (*((_BYTE *)this + 258))
  {
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    re::BloomUserParameters::computeRenderParameters((re::RenderGraphUploadPostParams *)((char *)this + 320), (uint64_t)&v22);
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x98uLL, 4uLL, (uint64_t)&v32);
    v5 = v34;
    v20 = v33;
    v6 = &v32[v33];
    *((_OWORD *)v6 + 6) = v28;
    *((_OWORD *)v6 + 7) = v29;
    *((_OWORD *)v6 + 8) = v30;
    *((_QWORD *)v6 + 18) = v31;
    *((_OWORD *)v6 + 2) = v24;
    *((_OWORD *)v6 + 3) = v25;
    *((_OWORD *)v6 + 4) = v26;
    *((_OWORD *)v6 + 5) = v27;
    *(_OWORD *)v6 = v22;
    *((_OWORD *)v6 + 1) = v23;
    v7 = re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::BloomExecData>>(*((re **)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    *(_DWORD *)(v7 + 24) = HIDWORD(v22);
    v32 = v5;
    v33 = v20;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v7 + 8), (void **)&v32);
    v8 = v32;
    *(_QWORD *)(v7 + 16) = v33;
    if (v8)

  }
  if (*((_BYTE *)this + 259))
  {
    v9 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v10 = xmmword_2260E5F40;
    v11 = xmmword_2260E5F20;
    v12 = xmmword_2260E5F10;
    if (v9[64] && *v9 != v9[1] && v9[65])
    {
      v12 = *((_OWORD *)v9 + 1);
      v11 = *((_OWORD *)v9 + 2);
      v10 = *((_OWORD *)v9 + 3);
    }
    v17 = v12;
    v18 = v11;
    v19 = v10;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x30uLL, 0x10uLL, (uint64_t)&v22);
    v13 = (void *)v23;
    v21 = *((_QWORD *)&v22 + 1);
    v14 = (__int128 *)(v22 + DWORD2(v22));
    *v14 = v17;
    v14[1] = v18;
    v14[2] = v19;
    v15 = re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::ColorExecData>>(*((re **)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    *(_QWORD *)&v22 = v13;
    *((_QWORD *)&v22 + 1) = v21;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 8), (void **)&v22);
    v16 = (void *)v22;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)&v22 + 1);
    if (v16)

  }
}

void re::RenderGraphCombinedPostProcessNode::configure(re::RenderGraphCombinedPostProcessNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  re::AssetHandle *v12;
  uint64_t v13;
  unint64_t v14;

  v8 = *((_QWORD *)this + 53);
  if (v8)
  {
    v9 = 0;
    v10 = 8;
    do
    {
      v11 = (uint64_t *)(*((_QWORD *)this + 55) + v10);
      v13 = *v11;
      v12 = (re::AssetHandle *)(v11 - 1);
      if (v13)
      {
        if (v8 <= v9)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        re::AssetHandle::loadAsync(v12);
        v8 = *((_QWORD *)this + 53);
      }
      if (v9 > 0xE)
        break;
      ++v9;
      v10 += 24;
    }
    while (v8 > v9);
  }
  v14 = *((_QWORD *)this + 32);
  if (v14 <= 0xF)
  {
    bzero((char *)this + 8 * v14 + 272, 128 - 8 * v14);
LABEL_11:
    *((_QWORD *)this + 32) = 16;
    ++*((_DWORD *)this + 66);
    goto LABEL_12;
  }
  if (v14 != 16)
    goto LABEL_11;
LABEL_12:
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

uint64_t re::RenderGraphCombinedPostProcessNode::setup(re::RenderGraphCombinedPostProcessNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 24))
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v7 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  re::RenderGraphBuilder::read((uint64_t)a2, *((_QWORD *)this + 26), *((_QWORD *)this + 26) + 16);
  if (*((_BYTE *)this + 402))
  {
    *(_DWORD *)((char *)&v7 + 3) = 0;
    LODWORD(v7) = 0;
    *((_QWORD *)&v7 + 1) = 2;
    re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 448, (uint64_t)&v7);
  }
  if (!*((_QWORD *)this + 29))
  {
LABEL_7:
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v7 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *((_QWORD *)this + 31);
  *(_QWORD *)&v7 = 0x100000000;
  v8 = xmmword_2260E5D70;
  LOWORD(v9) = 0;
  *(_QWORD *)((char *)&v9 + 4) = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, v5, (uint64_t)&v7);
}

void re::RenderGraphCombinedPostProcessNode::execute(re::RenderGraphCombinedPostProcessNode *this, re::RenderGraphContext *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  re::BufferTable *v19;
  uint64_t v20;
  uint64_t v21;
  re::BufferTable *v22;
  uint64_t v23;
  re::BufferTable *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  _BOOL4 v32;
  NSObject *v33;
  const char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  re::MaterialParameterTableLayers *v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  re *v58;
  const re::WeakStringID *v59;
  const re::WeakStringID *v60;
  re::BufferTable *v61;
  re *v62;
  re::BufferTable *v63;
  re::BufferTable *v64;
  re *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  _BOOL4 v69;
  id v70[5];
  char v71;
  __int16 v72;
  __int16 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[3];
  int v85;
  void *v86;
  _QWORD v87[3];
  int v88;
  void *v89;
  _BYTE v90[16];
  uint64_t v91[9];
  _BYTE v92[48];
  _BYTE v93[24];
  uint64_t *v94;
  __int128 v95;
  uint64_t *v96;
  __int128 v97;
  uint8_t buf[16];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v90, 5042, 0);
  if (*((_BYTE *)this + 400))
  {
    v6 = atomic_load((unsigned __int8 *)&qword_25411F360);
    if ((v6 & 1) == 0)
    {
      v65 = (re *)__cxa_guard_acquire(&qword_25411F360);
      if ((_DWORD)v65)
      {
        _MergedGlobals_439 = re::getCombinedScopeHash(v65, v66, v67);
        __cxa_guard_release(&qword_25411F360);
      }
    }
    if (*((_BYTE *)this + 401))
    {
      v7 = _MergedGlobals_439;
      v8 = *((_QWORD *)a2 + 146);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 146);
      v7 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 48);
    }
    v9 = re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(v8, v7);
    if (!v9)
    {
      v33 = *re::graphicsLogObjects(0);
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        goto LABEL_83;
      *(_WORD *)buf = 0;
      v34 = "RenderGraphCombinedPostProcessNode expects TonemapParametersData from the render graph data store but there "
            "isn't any. Will skip the execution.";
LABEL_48:
      _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 2u);
      goto LABEL_83;
    }
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x84uLL, 4uLL, (uint64_t)buf);
    v10 = v99;
    v11 = *(unsigned int *)&buf[8] | ((unint64_t)*(unsigned int *)&buf[12] << 32);
    v12 = *(_QWORD *)buf + *(unsigned int *)&buf[8];
    *(_OWORD *)v12 = *(_OWORD *)(v9 + 8);
    v13 = *(_OWORD *)(v9 + 24);
    v14 = *(_OWORD *)(v9 + 40);
    v15 = *(_OWORD *)(v9 + 72);
    *(_OWORD *)(v12 + 48) = *(_OWORD *)(v9 + 56);
    *(_OWORD *)(v12 + 64) = v15;
    *(_OWORD *)(v12 + 16) = v13;
    *(_OWORD *)(v12 + 32) = v14;
    v16 = *(_OWORD *)(v9 + 88);
    v17 = *(_OWORD *)(v9 + 104);
    v18 = *(_OWORD *)(v9 + 120);
    *(_DWORD *)(v12 + 128) = *(_DWORD *)(v9 + 136);
    *(_OWORD *)(v12 + 96) = v17;
    *(_OWORD *)(v12 + 112) = v18;
    *(_OWORD *)(v12 + 80) = v16;
    v19 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
    *(_QWORD *)v92 = 0x1C6D7B14F4E32CD0;
    *(_QWORD *)buf = v10;
    *(_QWORD *)&buf[8] = v11;
    re::BufferTable::setBuffer(v19, (const re::WeakStringID *)v92, (const BufferView *)buf);
  }
  if (!*((_BYTE *)this + 402))
    goto LABEL_15;
  v20 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::BloomExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (!v20)
  {
    v33 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      goto LABEL_83;
    *(_WORD *)buf = 0;
    v34 = "RenderGraphCombinedPostProcessNode expects BloomExecDataWrapper from the render graph data store but there isn"
          "'t any. Will skip the execution. Did you forget to add a upload node?";
    goto LABEL_48;
  }
  v21 = v20;
  v2 = *(_QWORD *)a2 + 368;
  *(_QWORD *)buf = 0x12DFD1912E60118;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 448, 0, 0, v70);
  re::makeView2DTo2DArray(v70, v92);
  re::DynamicTextureTableAdd((_QWORD *)v2, buf, (id *)v92);
  if (*(_QWORD *)v92)
  {

    *(_QWORD *)v92 = 0;
  }
  if (v70[0])

  v22 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
  *(_QWORD *)buf = 0x127DBE076EDDD69;
  re::BufferTable::setBuffer(v22, (const re::WeakStringID *)buf, v21 + 8);
LABEL_15:
  if (!*((_BYTE *)this + 404))
    goto LABEL_18;
  v23 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::ColorExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (!v23)
  {
    v33 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      goto LABEL_83;
    *(_WORD *)buf = 0;
    v34 = "RenderGraphCombinedPostProcessNode expects ColorExecDataWrapper from the render graph data store but there isn"
          "'t any. Will skip the execution. Did you forget to add a upload node?";
    goto LABEL_48;
  }
  v24 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
  *(_QWORD *)buf = 0x775E00AD509B0A76;
  re::BufferTable::setBuffer(v24, (const re::WeakStringID *)buf, v23 + 8);
LABEL_18:
  v25 = (unint64_t)v92;
  v26 = *(_QWORD *)a2;
  v91[0] = 0xA3521511A35B9;
  if (!*((_QWORD *)this + 24))
  {
LABEL_87:
    v70[0] = 0;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)(v25 + 4) = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)(v25 + 14) = 789;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)(v25 + 20) = 0;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)(v25 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    v70[0] = 0;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    *(_OWORD *)buf = 0u;
    a2 = (re::RenderGraphContext *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 789;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = v25;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_90:
    v57 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), *((const char **)this + 2), (const char *)v2);
LABEL_71:
    v77 = v57;
    v78 = 0;
    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a2, v91);
    re::RenderGraphContext::encodeDrawCalls(a2, v91, v70);
    v58 = (re *)(*(_QWORD *)a2 + 368);
    v91[0] = v3;
    re::DynamicTextureTableRemove(v58, (re::TextureTable *)v91, v59);
    if (*((_BYTE *)this + 400))
    {
      v61 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
      v91[0] = 0x1C6D7B14F4E32CD0;
      re::BufferTable::removeBuffer(v61, (const re::WeakStringID *)v91);
    }
    if (*((_BYTE *)this + 402))
    {
      v62 = (re *)(*(_QWORD *)a2 + 368);
      v91[0] = 0x12DFD1912E60118;
      re::DynamicTextureTableRemove(v62, (re::TextureTable *)v91, v60);
      v63 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
      v91[0] = 0x127DBE076EDDD69;
      re::BufferTable::removeBuffer(v63, (const re::WeakStringID *)v91);
    }
    if (*((_BYTE *)this + 404))
    {
      v64 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
      v91[0] = 0x775E00AD509B0A76;
      re::BufferTable::removeBuffer(v64, (const re::WeakStringID *)v91);
    }
    if (v84[0] && v86)
      (*(void (**)(void))(*(_QWORD *)v84[0] + 40))();
    v43 = v87[0];
    if (!v87[0])
      goto LABEL_83;
    v44 = v89;
    if (!v89)
      goto LABEL_83;
LABEL_82:
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v43 + 40))(v43, v44);
    goto LABEL_83;
  }
  v27 = (_QWORD *)(v26 + 368);
  re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 26), 0, 0, (id *)v92);
  re::makeView2DTo2DArray((id *)v92, buf);
  re::DynamicTextureTableAdd(v27, v91, (id *)buf);
  if (*(_QWORD *)buf)
  {

    *(_QWORD *)buf = 0;
  }
  if (*(_QWORD *)v92)

  v2 = *((unsigned __int8 *)this + 400);
  v28 = *((unsigned __int8 *)this + 402);
  v29 = *((unsigned __int8 *)this + 403);
  v30 = *((unsigned __int8 *)this + 404);
  v31 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (v31)
    v32 = *(_BYTE *)(v31 + 65) != 0;
  else
    v32 = 0;
  v69 = v32;
  v68 = v31;
  if (!*((_QWORD *)this + 53))
  {
    v3 = 0;
    v39 = *((_QWORD *)this + 32);
LABEL_39:
    if (v39 <= (v2 | (2 * v28) | (4 * v29) | (8 * v30)))
    {
      re::DynamicString::format((re::DynamicString *)"%s: Permutation %du was requested but only %lu materials exist.", (re::DynamicString *)buf, *((_QWORD *)this + 2), v2 | (2 * v28) | (4 * v29) | (8 * v30), v39);
      re::RenderGraphExecutable::addError(*((_QWORD *)a2 + 147), (uint64_t)buf);
      v43 = *(_QWORD *)buf;
      if (!*(_QWORD *)buf || (buf[8] & 1) == 0)
        goto LABEL_83;
      v44 = (void *)v99;
      goto LABEL_82;
    }
    v25 = (v2 | (2 * v28) | (4 * v29) | (8 * v30));
    if (v3 <= v25)
      goto LABEL_88;
    v40 = *(_QWORD *)(*((_QWORD *)this + v25 + 34) + 1664);
    v41 = *(_QWORD *)(*((_QWORD *)this + 55) + 24 * v25 + 8);
    if (v41)
      v42 = *(_QWORD *)(v41 + 664);
    else
      v42 = 0;
    v45 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) >> 27));
    *(_QWORD *)buf = v42 ^ (v45 >> 31) ^ v45;
    v46 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a2 + 1568, (uint64_t *)buf);
    if (v46)
      v47 = *v46;
    else
      v47 = 0;
    re::RenderGraphContext::makeFullscreenDrawCall(a2, v40, v47, 0, 0, 0, (int32x2_t *)buf);
    if (v69)
      v2 = (uint64_t)"fullscreenarray";
    else
      v2 = (uint64_t)"fullscreen";
    v48 = (re::MaterialParameterTableLayers *)v102;
    if (v69)
      v49 = 15;
    else
      v49 = 10;
    MurmurHash3_x64_128(v2, v49, 0, (unint64_t *)v92);
    v50 = re::MaterialParameterTableLayers::resolveTechniqueIndices(v48, (*(_QWORD *)&v92[8] + (*(_QWORD *)v92 << 6) + (*(_QWORD *)v92 >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)v92);
    if (!v51)
      goto LABEL_89;
    HIDWORD(v100) = *v50;
    if (HIDWORD(v100) == -1)
      goto LABEL_83;
    v52 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    v89 = 0;
    v86 = 0;
    memset(v87, 0, sizeof(v87));
    v88 = 0;
    memset(v84, 0, sizeof(v84));
    v85 = 0;
    if (v52)
    {
      v53 = v52;
      if (*(_QWORD *)(v52 + 128))
      {
        v35 = 0;
        v25 = 0;
        v3 = v52 + 64;
        while (1)
        {
          re::Projection::computeMatrix4x4F((re::Projection *)(v53 + 144 + (v35 << 6)), (uint64_t)v92);
          re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v84, (uint64_t)v92);
          v55 = *(_QWORD *)(v53 + 48);
          if (v55 <= v35)
            break;
          re::RenderCamera::computeInverseTransform((float32x4_t *)(v3 + 32 * v35), (uint64_t)v92);
          re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v87, (uint64_t)v92);
          v25 = (v25 + 1);
          v35 = v25;
          if (*(_QWORD *)(v53 + 128) <= (unint64_t)v25)
            goto LABEL_66;
        }
LABEL_86:
        re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v35, v55);
        _os_crash();
        __break(1u);
        goto LABEL_87;
      }
LABEL_66:
      v56 = *(unsigned __int8 *)(v53 + 490);
    }
    else
    {
      *(_OWORD *)v92 = xmmword_2260E5F10;
      *(_OWORD *)&v92[16] = xmmword_2260E5F20;
      *(_OWORD *)&v92[32] = xmmword_2260E5F40;
      *(_OWORD *)v93 = xmmword_2260E5D70;
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v84, (uint64_t)v92);
      *(_OWORD *)v92 = xmmword_2260E5F10;
      *(_OWORD *)&v92[16] = xmmword_2260E5F20;
      *(_OWORD *)&v92[32] = xmmword_2260E5F40;
      *(_OWORD *)v93 = xmmword_2260E5D70;
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v87, (uint64_t)v92);
      if (v69)
      {
        v56 = *(unsigned __int8 *)(v68 + 64);
        *(_OWORD *)v92 = xmmword_2260E5F10;
        *(_OWORD *)&v92[16] = xmmword_2260E5F20;
        *(_OWORD *)&v92[32] = xmmword_2260E5F40;
        *(_OWORD *)v93 = xmmword_2260E5D70;
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v84, (uint64_t)v92);
        *(_OWORD *)v92 = xmmword_2260E5F10;
        *(_OWORD *)&v92[16] = xmmword_2260E5F20;
        *(_OWORD *)&v92[32] = xmmword_2260E5F40;
        *(_OWORD *)v93 = xmmword_2260E5D70;
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v87, (uint64_t)v92);
      }
      else
      {
        v56 = 1;
      }
    }
    v3 = 0xA3521511A35B9;
    DWORD1(v100) = v56;
    re::DrawCallRef::DrawCallRef(&v79, (const re::DrawCall *)buf);
    v57 = 0;
    *(_QWORD *)v92 = &v79;
    *(_QWORD *)&v92[24] = &v80;
    *(_QWORD *)v93 = &v81;
    v94 = &v82;
    *(int64x2_t *)&v92[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v92[32] = *(_OWORD *)&v92[8];
    *(_OWORD *)&v93[8] = *(_OWORD *)&v92[8];
    v95 = *(_OWORD *)&v92[8];
    v96 = &v83;
    v97 = *(_OWORD *)&v92[8];
    v70[0] = (id)v2;
    v70[1] = v92;
    v70[2] = v89;
    v70[3] = v86;
    v70[4] = 0;
    v71 = v56;
    v72 = 2;
    v73 = 0;
    v74 = 0u;
    v75 = 0u;
    v76 = 0;
    if (!*((_BYTE *)a2 + 1332))
      goto LABEL_71;
    goto LABEL_90;
  }
  v35 = 0;
  v36 = 0;
  v25 = (unint64_t)this + 272;
  while (re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*((_QWORD *)this + 55) + v35)))
  {
    v3 = *((_QWORD *)this + 53);
    if (v3 <= v36)
    {
      v70[0] = 0;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = 789;
      *(_WORD *)&v92[18] = 2048;
      *(_QWORD *)&v92[20] = v36;
      *(_WORD *)&v92[28] = 2048;
      *(_QWORD *)&v92[30] = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_85:
      re::internal::assertLog((re::internal *)6, v38, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v36, v39);
      _os_crash();
      __break(1u);
      goto LABEL_86;
    }
    v37 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*((_QWORD *)this + 55) + v35));
    v39 = *((_QWORD *)this + 32);
    if (v39 <= v36)
      goto LABEL_85;
    *(_QWORD *)(v25 + 8 * v36) = v37;
    v3 = *((_QWORD *)this + 53);
    if (v36 <= 0xE)
    {
      ++v36;
      v35 += 24;
      if (v3 > v36)
        continue;
    }
    goto LABEL_39;
  }
LABEL_83:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v90);
}

void re::RenderGraphCombinedPostProcessNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v6;
  re::MaterialParameterBlock *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE v13[12];
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  _OWORD v20[5];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a1 + 400) | (2 * *(unsigned __int8 *)(a1 + 402)) | (4 * *(unsigned __int8 *)(a1 + 403)) | (8 * *(unsigned __int8 *)(a1 + 404));
  if (*(_QWORD *)(a1 + 424) > v2)
  {
    v4 = *(_QWORD *)(a1 + 440);
    if (*(_QWORD *)(v4 + 24 * v2 + 8))
    {
      v6 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v4 + 24 * v2));
      if (v6)
      {
        v7 = *(re::MaterialParameterBlock **)(v6 + 1672);
        if (v7)
        {
          v8 = *(_QWORD *)(a1 + 424);
          if (v8 <= v2)
          {
            memset(v20, 0, sizeof(v20));
            v12 = v8;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v13 = 136315906;
            *(_QWORD *)&v13[4] = "operator[]";
            v14 = 1024;
            v15 = 797;
            v16 = 2048;
            v17 = v2;
            v18 = 2048;
            v19 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 440) + 24 * v2 + 8);
          if (v9)
            v10 = *(_QWORD *)(v9 + 664);
          else
            v10 = 0;
          v11 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
          *(_QWORD *)&v20[0] = v10 ^ (v11 >> 31) ^ v11;
          re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v7, v13);
          re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, (unint64_t *)v20, v13);
          if (*(_QWORD *)v13)

        }
      }
    }
  }
}

uint64_t *re::allocInfo_RenderGraphUploadPostParams(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F368);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F368))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F400, 0);
    *(uint64_t *)((char *)&qword_25411F410 + 6) = 0;
    qword_25411F410 = 0;
    qword_25411F420 = 0;
    qword_25411F428 = 0xFFFFFFFFLL;
    qword_25411F400 = (uint64_t)&off_24ED7DAA8;
    qword_25411F430 = (uint64_t)"RenderGraphUploadPostParams";
    dword_25411F438 = 0;
    unk_25411F440 = 0u;
    unk_25411F450 = 0u;
    unk_25411F460 = 0u;
    qword_25411F470 = 0;
    __cxa_guard_release(&qword_25411F368);
  }
  return &qword_25411F400;
}

void re::initInfo_RenderGraphUploadPostParams(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[2];
  __int128 v33;

  v32[0] = 0x5202598F4D5E78FELL;
  v32[1] = "RenderGraphUploadPostParams";
  re::StringID::destroyString((re::StringID *)v32);
  *((_OWORD *)this + 2) = v33;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F370);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F370);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F388 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "tonemappingEnabled";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F390 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "bloomEnabled";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10200000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411F398 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = re::introspect_TonemapUserParameters((re::IntrospectionBase **)1);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "tonemapUserParameters";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x10400000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_25411F3A0 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v21 = re::introspect_BloomUserParameters((re::IntrospectionBase **)1);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "bloomUserParameters";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x14000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_25411F3A8 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_BOOL((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "colorConvertEnabled";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x10300000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_25411F3B0 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_BOOL((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "tonemappingSharedParamsEnabled";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x10100000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_25411F3B8 = v30;
      __cxa_guard_release(&qword_25411F370);
    }
  }
  *((_QWORD *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_25411F388;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphUploadPostParams>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphUploadPostParams>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphUploadPostParams>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphUploadPostParams>;
  re::IntrospectionRegistry::add(this, v3);
  v31 = v33;
}

double re::internal::defaultConstruct<re::RenderGraphUploadPostParams>(int a1, int a2, re::RenderGraphUploadPostParams *this)
{
  return re::RenderGraphUploadPostParams::RenderGraphUploadPostParams(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphUploadPostParams>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphUploadPostParams>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphUploadPostParams(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphUploadPostParams", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphUploadPostParams, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphUploadPostParams, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphUploadPostParams>, this);
}

uint64_t *re::allocInfo_RenderGraphCombinedPostProcessNode(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F378);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F378))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F478, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411F488 = 0;
    qword_25411F498 = 0;
    qword_25411F4A0 = 0xFFFFFFFFLL;
    qword_25411F478 = (uint64_t)&off_24ED7DAA8;
    qword_25411F4A8 = (uint64_t)"RenderGraphCombinedPostProcessNode";
    dword_25411F4B0 = 0;
    xmmword_25411F4B8 = 0u;
    unk_25411F4C8 = 0u;
    xmmword_25411F4D8 = 0u;
    qword_25411F4E8 = 0;
    __cxa_guard_release(&qword_25411F378);
  }
  return &qword_25411F478;
}

void re::initInfo_RenderGraphCombinedPostProcessNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[2];
  __int128 v39;

  v38[0] = 0x41FFC6ACD6032468;
  v38[1] = "RenderGraphCombinedPostProcessNode";
  re::StringID::destroyString((re::StringID *)v38);
  *((_OWORD *)this + 2) = v39;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F380);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F380);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F3C0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "tonemappingEnabled";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x19000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F3C8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "bloomEnabled";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x19200000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411F3D0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "vignetteEnabled";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x19300000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411F3D8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_RenderGraphTargetHandle((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "downsampledTarget";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x1C000000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25411F3E0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "combinedMaterialPermutations";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x19800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_25411F3E8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "colorConvertEnabled";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x19400000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_25411F3F0 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_BOOL((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "tonemappingSharedParamsEnabled";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x19100000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_25411F3F8 = v36;
      __cxa_guard_release(&qword_25411F380);
    }
  }
  *((_QWORD *)this + 2) = 0x1D000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((_QWORD *)this + 8) = &qword_25411F3C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphCombinedPostProcessNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphCombinedPostProcessNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphCombinedPostProcessNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphCombinedPostProcessNode>;
  re::IntrospectionRegistry::add(this, v3);
  v37 = v39;
}

double re::internal::defaultConstruct<re::RenderGraphCombinedPostProcessNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED82A70;
  *((_QWORD *)v3 + 32) = 0;
  *((_DWORD *)v3 + 66) = 0;
  *((_QWORD *)v3 + 52) = 0;
  *((_QWORD *)v3 + 53) = 0;
  *((_QWORD *)v3 + 51) = 0;
  *((_DWORD *)v3 + 108) = 0;
  *((_DWORD *)v3 + 100) = 0;
  *((_BYTE *)v3 + 404) = 0;
  *((_QWORD *)v3 + 55) = 0;
  *((_QWORD *)v3 + 56) = 0;
  result = NAN;
  *((_QWORD *)v3 + 57) = -1;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphCombinedPostProcessNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphCombinedPostProcessNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED82A70;
  *((_QWORD *)v1 + 32) = 0;
  *((_DWORD *)v1 + 66) = 0;
  *((_QWORD *)v1 + 52) = 0;
  *((_QWORD *)v1 + 53) = 0;
  *((_QWORD *)v1 + 51) = 0;
  *((_DWORD *)v1 + 108) = 0;
  *((_DWORD *)v1 + 100) = 0;
  *((_BYTE *)v1 + 404) = 0;
  *((_QWORD *)v1 + 55) = 0;
  *((_QWORD *)v1 + 56) = 0;
  result = NAN;
  *((_QWORD *)v1 + 57) = -1;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphCombinedPostProcessNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphCombinedPostProcessNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphCombinedPostProcessNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphCombinedPostProcessNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphCombinedPostProcessNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphCombinedPostProcessNode>, this);
}

void re::RenderGraphUploadPostParams::~RenderGraphUploadPostParams(re::RenderGraphUploadPostParams *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphCombinedPostProcessNode::~RenderGraphCombinedPostProcessNode(re::RenderGraphCombinedPostProcessNode *this)
{
  *(_QWORD *)this = &off_24ED82A70;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 408);
  *((_QWORD *)this + 32) = 0;
  ++*((_DWORD *)this + 66);
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  *(_QWORD *)this = &off_24ED82A70;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 408);
  *((_QWORD *)this + 32) = 0;
  ++*((_DWORD *)this + 66);
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::add<re::TonemapParametersData>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = (unint64_t)"N2re21TonemapParametersDataE";
  if (((unint64_t)"N2re21TonemapParametersDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re21TonemapParametersDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v10 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  v6 = a1 + 64;
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 144, 8);
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_QWORD *)(v7 + 136) = 0;
  *(_QWORD *)v7 = &off_24ED82B30;
  *(_BYTE *)(v7 + 128) = 1;
  v9 = v7;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v6, (unint64_t *)&v10, &v9);
}

void re::TonemapParametersData::~TonemapParametersData(re::TonemapParametersData *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::ColorExecData>>(re *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13ColorExecDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13ColorExecDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13ColorExecDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v11 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  v6 = (uint64_t)a1 + 16;
  v7 = re::globalAllocators(a1);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 24, 8);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24ED82B70;
  v10 = v8;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v6, (unint64_t *)&v11, &v10);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::ColorExecData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED82B70;
  v2 = (void *)a1[1];
  if (v2)
  {

    a1[1] = 0;
  }
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::ColorExecData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24ED82B70;
  v2 = (void *)a1[1];
  if (v2)
  {

    a1[1] = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::ColorExecData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13ColorExecDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13ColorExecDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13ColorExecDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

double re::RenderGraphUploadPostParams::RenderGraphUploadPostParams(re::RenderGraphUploadPostParams *this)
{
  char *v1;
  re::RenderGraphNode *v2;
  double result;

  v1 = (char *)this + 260;
  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v2 = &off_24ED829C8;
  *((_DWORD *)v2 + 64) = 0;
  *(_OWORD *)v1 = xmmword_2260F4F30;
  *((_OWORD *)v1 + 1) = xmmword_2260EDC60;
  *((_BYTE *)v2 + 292) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)v2 + 37) = _D0;
  *((_BYTE *)v2 + 304) = 0;
  *((_QWORD *)v1 + 6) = 0x3F80000000000000;
  *((_BYTE *)v2 + 316) = 0;
  result = 0.00781250182;
  *((_QWORD *)v2 + 40) = 0x3F8000003E800000;
  *((_QWORD *)v2 + 41) = 0x13F800000;
  return result;
}

_QWORD *re::RenderFrameContextBuilder::build@<X0>(unint64_t a1@<X1>, unint64_t a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  __n128 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _anonymous_namespace_ *v32;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _anonymous_namespace_ *v41;
  signed int v42;
  _anonymous_namespace_ *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t (**v58)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (**v64)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unsigned __int8 *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t i;
  uint64_t v74;
  uint64_t v75;
  unint64_t j;
  _QWORD *v77;
  uint64_t v78;
  uint64_t (**v79)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (**v86)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _anonymous_namespace_ *v87;
  uint64_t v88;
  char **v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  uint64_t v95;
  uint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t k;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char v113;
  float32x4_t *v114;
  uint64_t v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t (**v130)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  unint64_t v138;
  unsigned __int8 *v139;
  uint64_t v140;
  unsigned int v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float32x4_t *v163;
  float32x4_t v164;
  float32x4_t *v165;
  float32x4_t v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  __n128 v185;
  float32x4_t *v186;
  uint64_t v187;
  uint64_t v188;
  float32x4_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  double v213;
  unint64_t v214;
  unint64_t v215;
  const re::WeakStringID *v216;
  uint64_t v217;
  uint64_t (**v218)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t m;
  uint64_t v227;
  uint64_t (**v228)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _anonymous_namespace_ *v232;
  uint64_t v233;
  unint64_t v234;
  _QWORD *v235;
  re::Allocator *v236;
  unint64_t v237;
  uint64_t v238;
  __int128 v239;
  char v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t (**v253)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  __n128 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  const char *v268;
  unint64_t v269;
  const char *v270;
  _QWORD *v271;
  _QWORD *v272;
  __int128 *v273;
  uint64_t v274;
  __int128 *v275;
  uint64_t v276;
  unint64_t v277;
  re::Allocator *v278;
  uint64_t v279;
  unint64_t v280;
  re::WeakStringID *v281;
  unint64_t v282;
  unint64_t v283;
  _anonymous_namespace_ *v284;
  re::RenderFrameData *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  _BYTE *v289;
  char v290;
  uint64_t **v291;
  uint64_t v292;
  uint64_t *v293;
  int v294;
  uint64_t *v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  __int128 v303;
  uint64_t v304;
  __int128 v305;
  int v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  float32x4_t v310;
  unint64_t v311;
  float v312;
  unsigned __int8 v313;
  char v314;
  _BYTE v315[44];
  __int128 v316;
  __int128 v317;
  int v318;
  uint64_t v319;
  char v320[8];
  _QWORD v321[3];
  int v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  __int16 v328;
  re::Allocator *v329;
  char v330;
  _QWORD v331[3];
  int v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  __int16 v338;
  re::Allocator *v339;
  char v340;
  _QWORD v341[2];
  unint64_t v342;
  int v343;
  void *v344;
  __n128 v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  __int128 v350;
  uint64_t v351;
  __int128 v352;
  __int128 v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD v372[2];
  uint64_t v373;
  _QWORD v374[2];
  __int128 v375;
  char v376;
  __int128 v377;
  char v378;
  _QWORD v379[3];
  _QWORD *v380;
  _QWORD v381[3];
  _QWORD *v382;
  _BYTE v383[48];
  float32x4_t v384;
  float32x4_t v385;
  __int128 v386;
  uint64_t v387;
  __int128 v388;
  int v389;
  _QWORD v390[3];
  _QWORD *v391;
  _BYTE v392[24];
  _BYTE *v393;
  _QWORD v394[3];
  _QWORD *v395;
  _BYTE v396[31];
  __int128 v397;
  _BYTE v398[64];
  __int128 v399;
  _BYTE v400[145];
  __int128 v401;
  _BYTE v402[32];
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  uint64_t *v407;
  unint64_t v408;
  uint64_t v409;
  char v410;
  _OWORD v411[16];
  uint64_t v412;

  v6 = a3;
  v412 = *MEMORY[0x24BDAC8D0];
  v272 = *(_QWORD **)(a1 + 8);
  v7 = v272[4];
  *(_OWORD *)(a3 + 16) = 0u;
  v273 = (__int128 *)(a3 + 16);
  v274 = v7;
  v278 = *(re::Allocator **)(a1 + 376);
  *(_QWORD *)(a3 + 24) = v278;
  v8 = a3 + 24;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  v344 = 0;
  v342 = 0;
  v343 = 0;
  v341[1] = 0;
  v341[0] = v278;
  result = re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v341, 0);
  ++v343;
  v10 = *(unsigned int *)(a1 + 296);
  v271 = (_QWORD *)a2;
  v11 = 0;
  if ((_DWORD)v10)
  {
    v12 = *(int **)(a1 + 280);
    while (1)
    {
      v13 = *v12;
      v12 += 18;
      if (v13 < 0)
        break;
      if (v10 == ++v11)
      {
        LODWORD(v11) = *(_DWORD *)(a1 + 296);
        break;
      }
    }
  }
  if ((_DWORD)v10 != (_DWORD)v11)
  {
    v3 = v11;
    v14 = *(_QWORD *)(a1 + 280);
    a2 = 72;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 72 * v3 + 64) + 512))(*(_QWORD *)(v14 + 72 * v3 + 64));
      if (result)
        result = re::DynamicArray<re::WeakStringID>::add(v341, (_QWORD *)(v14 + 72 * v3 + 8));
      v15 = *(_DWORD *)(a1 + 296);
      v14 = *(_QWORD *)(a1 + 280);
      if (v15 <= (int)v11 + 1)
        v15 = v11 + 1;
      while (1)
      {
        v3 = (v11 + 1);
        if (v15 - 1 == (_DWORD)v11)
          break;
        LODWORD(v11) = v11 + 1;
        v16 = v3;
        if ((*(_DWORD *)(v14 + 72 * v3) & 0x80000000) != 0)
          goto LABEL_16;
      }
      v16 = v15;
LABEL_16:
      LODWORD(v11) = v16;
    }
    while ((_DWORD)v10 != v16);
  }
  if (!v342)
    goto LABEL_403;
  v18 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 160))(*(_QWORD *)(a1 + 320));
  v19 = v342;
  *(_QWORD *)&v396[16] = 0;
  *(_QWORD *)v396 = v278;
  *(_QWORD *)&v396[8] = v342;
  if (v342)
  {
    if (v342 >= 0x2C0B02C0B02C0CLL)
      goto LABEL_427;
    v20 = (*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(_QWORD *)v278 + 32))(v278, 1488 * v342, 16);
    *(_QWORD *)&v396[16] = v20;
    if (!v20)
    {
LABEL_428:
      re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_429:
      re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 3040, v30);
      _os_crash();
      __break(1u);
      goto LABEL_430;
    }
    while (--v19)
      v20 = re::RenderFrameContextBuilder::Result::PerSceneData::PerSceneData(v20, v278) + 1488;
    re::RenderFrameContextBuilder::Result::PerSceneData::PerSceneData(v20, v278);
  }
  if ((_BYTE *)v8 != v396)
  {
    v22 = *(_QWORD *)v8;
    if (*(_QWORD *)v8 && v22 != *(_QWORD *)v396)
    {
      re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      _os_crash();
      __break(1u);
      goto LABEL_436;
    }
    v23 = *(_QWORD *)(v6 + 32);
    v24 = *(_QWORD *)(v6 + 40);
    v25 = *(_QWORD *)&v396[8];
    v26 = *(_QWORD *)&v396[16];
    *(_QWORD *)(v6 + 24) = *(_QWORD *)v396;
    *(_QWORD *)(v6 + 32) = v25;
    *(_QWORD *)v396 = v22;
    *(_QWORD *)&v396[8] = v23;
    *(_QWORD *)(v6 + 40) = v26;
    *(_QWORD *)&v396[16] = v24;
  }
  v27 = (_anonymous_namespace_ *)re::FixedArray<re::RenderFrameContextBuilder::Result::PerSceneData>::deinit(v396);
  v320[0] = 0;
  memset(v321, 0, sizeof(v321));
  v322 = 0;
  v324 = 0;
  v323 = 0;
  v325 = 0;
  v326 = 0x1FFFFFFFFLL;
  v328 = 0;
  v330 = 0;
  memset(v331, 0, sizeof(v331));
  v332 = 0;
  v334 = 0;
  v333 = 0;
  v335 = 0;
  v336 = 0x1FFFFFFFFLL;
  v338 = 0;
  v340 = 0;
  v327 = 0x80000000800;
  v329 = v278;
  v337 = 0x80000000800;
  v339 = v278;
  v8 = v342;
  v282 = v8;
  if (!v8)
  {
    v284 = 0;
    goto LABEL_36;
  }
  v30 = v8;
  if (v8 >= 0x158ED2308158EELL)
    goto LABEL_429;
  if (!v28)
  {
LABEL_430:
    re::internal::assertLog((re::internal *)4, v31, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_431:
    re::internal::assertLog((re::internal *)6, v35, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, v8);
    _os_crash();
    __break(1u);
    goto LABEL_432;
  }
  v32 = v28;
  v33 = v8 - 1;
  if (v8 != 1)
  {
    v32 = v28;
    do
    {
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_DWORD *)v32 + 6) = 0;
      *((_QWORD *)v32 + 2) = 0;
      *((_QWORD *)v32 + 13) = 0;
      *((_DWORD *)v32 + 28) = 0;
      *((_DWORD *)v32 + 742) = 0;
      *(_OWORD *)((char *)v32 + 2936) = 0uLL;
      *(_OWORD *)((char *)v32 + 2952) = 0uLL;
      *((_OWORD *)v32 + 2) = 0uLL;
      *((_OWORD *)v32 + 3) = 0uLL;
      *((_OWORD *)v32 + 4) = 0uLL;
      *((_OWORD *)v32 + 5) = 0uLL;
      *((_DWORD *)v32 + 24) = 0;
      *(_QWORD *)((char *)v32 + 2972) = 0x7FFFFFFFLL;
      *((_QWORD *)v32 + 373) = v320;
      *((_BYTE *)v32 + 2992) = 1;
      v34 = (_OWORD *)((char *)v32 + 3000);
      *((_BYTE *)v32 + 3032) = 0;
      v32 = (_anonymous_namespace_ *)((char *)v32 + 3040);
      *v34 = 0uLL;
      v34[1] = 0uLL;
      --v33;
    }
    while (v33);
  }
  v284 = v28;
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  *((_DWORD *)v32 + 6) = 0;
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 13) = 0;
  *((_DWORD *)v32 + 28) = 0;
  *((_DWORD *)v32 + 742) = 0;
  *(_OWORD *)((char *)v32 + 2936) = 0u;
  *(_OWORD *)((char *)v32 + 2952) = 0u;
  *((_OWORD *)v32 + 2) = 0u;
  *((_OWORD *)v32 + 3) = 0u;
  *((_OWORD *)v32 + 4) = 0u;
  *((_OWORD *)v32 + 5) = 0u;
  *((_DWORD *)v32 + 24) = 0;
  *(_QWORD *)((char *)v32 + 2972) = 0x7FFFFFFFLL;
  *((_QWORD *)v32 + 373) = v320;
  *((_BYTE *)v32 + 2992) = 1;
  *((_BYTE *)v32 + 3032) = 0;
  *(_OWORD *)((char *)v32 + 3000) = 0u;
  *(_OWORD *)((char *)v32 + 3016) = 0u;
LABEL_36:
  v408 = 0;
  v407 = 0;
  v409 = 0;
  v410 = 0;
  v8 = v342;
  v408 = v8;
  if (!v8)
    goto LABEL_42;
  if (v8 >= 0x492492492492493)
    goto LABEL_431;
  v409 = v36;
  if (!v36)
  {
LABEL_432:
    re::internal::assertLog((re::internal *)4, v37, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    goto LABEL_433;
  }
  v38 = v8 - 1;
  if (v8 != 1)
  {
    do
    {
      *(_OWORD *)(v36 + 16) = 0uLL;
      *(_OWORD *)(v36 + 32) = 0uLL;
      *(_QWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_OWORD *)v36 = 0uLL;
      *(_DWORD *)(v36 + 16) = 1;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0;
      *(_DWORD *)(v36 + 48) = 0;
      v36 += 56;
      --v38;
    }
    while (v38);
  }
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_QWORD *)(v36 + 40) = 0;
  *(_QWORD *)(v36 + 48) = 0;
  *(_OWORD *)v36 = 0u;
  *(_DWORD *)(v36 + 16) = 1;
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)(v36 + 32) = 0;
  *(_DWORD *)(v36 + 48) = 0;
LABEL_42:
  v283 = v6;
  v39 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)v273 = v39;
  v40 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 312))(v39);
  if (v40)
  {
    *(_OWORD *)&v400[80] = v40[12];
    *(_OWORD *)&v400[96] = v40[13];
    *(_OWORD *)&v400[112] = v40[14];
    *(_OWORD *)&v400[128] = v40[15];
    *(_OWORD *)&v400[16] = v40[8];
    *(_OWORD *)&v400[32] = v40[9];
    *(_OWORD *)&v400[48] = v40[10];
    *(_OWORD *)&v400[64] = v40[11];
    *(_OWORD *)&v398[32] = v40[4];
    *(_OWORD *)&v398[48] = v40[5];
    v399 = v40[6];
    *(_OWORD *)v400 = v40[7];
    *(_OWORD *)&v396[15] = *v40;
    v397 = v40[1];
    *(_OWORD *)v398 = v40[2];
    *(_OWORD *)&v398[16] = v40[3];
    if (v410)
    {
      memmove(v411, v40, 0xF8uLL);
    }
    else
    {
      v410 = 1;
      v411[12] = *(_OWORD *)&v400[80];
      v411[13] = *(_OWORD *)&v400[96];
      v411[14] = *(_OWORD *)&v400[112];
      v411[15] = *(_OWORD *)&v400[128];
      v411[8] = *(_OWORD *)&v400[16];
      v411[9] = *(_OWORD *)&v400[32];
      v411[10] = *(_OWORD *)&v400[48];
      v411[11] = *(_OWORD *)&v400[64];
      v411[4] = *(_OWORD *)&v398[32];
      v411[5] = *(_OWORD *)&v398[48];
      v411[6] = v399;
      v411[7] = *(_OWORD *)v400;
      v411[0] = *(_OWORD *)&v396[15];
      v411[1] = v397;
      v411[2] = *(_OWORD *)v398;
      v411[3] = *(_OWORD *)&v398[16];
    }
  }
  v285 = (re::RenderFrameData *)(a1 + 264);
  *(_QWORD *)((char *)&v397 + 1) = 0;
  memset(&v396[8], 0, 20);
  *(_QWORD *)v396 = v278;
  v41 = (_anonymous_namespace_ *)re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v396, 0);
  ++*(_DWORD *)&v396[24];
  *(_DWORD *)((char *)&v397 + 9) = 1065353216;
  memset(&v398[25], 0, 24);
  *(_QWORD *)&v398[49] = 0xFFFFFFFFLL;
  v398[57] = 0;
  *(_DWORD *)&v400[17] = 1065353216;
  *(_OWORD *)&v400[21] = xmmword_22610CC60;
  *(_QWORD *)&v400[37] = 0x3CF5C28F3F800000;
  *(_WORD *)&v400[45] = 0;
  *(_OWORD *)&v400[49] = xmmword_22610CC70;
  *(_QWORD *)&v400[65] = 0x3EB333333F800000;
  v19 = 1;
  v400[73] = 1;
  *(_OWORD *)&v400[77] = xmmword_22610CC80;
  *(_OWORD *)&v400[93] = xmmword_22610CC90;
  *(_QWORD *)&v400[109] = 0x3DCCCCCD41F00000;
  *(_DWORD *)&v400[117] = 1100480512;
  v400[121] = 0;
  *(_OWORD *)&v400[129] = xmmword_2260E5F50;
  LOBYTE(v401) = 1;
  *(_QWORD *)v402 = 0x3F8000003F2D42C4;
  *(_DWORD *)&v402[8] = 10;
  *(_OWORD *)&v402[12] = xmmword_22610CCA0;
  *(_DWORD *)&v402[28] = 1056964608;
  *(_QWORD *)&v403 = 0x4000000000000000;
  WORD4(v403) = 0;
  WORD6(v403) = 1;
  BYTE14(v403) = 0;
  *(_QWORD *)&v404 = 897988541;
  *((_QWORD *)&v404 + 1) = 0x3E80000000000000;
  *(_QWORD *)&v405 = 0x103DCCCCCDLL;
  LOBYTE(v406) = 1;
  *((_QWORD *)&v406 + 1) = 0;
  v277 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  v42 = v342;
  v316 = 0u;
  v317 = 0u;
  v318 = 0;
  v319 = 0x7FFFFFFFLL;
  memset(v315, 0, 36);
  *(_QWORD *)&v315[36] = 0x7FFFFFFFLL;
  v314 = 1;
  if (v3)
    goto LABEL_425;
  while (1)
  {
    v275 = (__int128 *)v3;
    if (!v342)
      break;
    v19 = 0;
    v44 = 0x7FFFFFFFLL;
    v3 = 24;
    do
    {
      v45 = *(_QWORD *)(v283 + 32);
      if (v45 <= v19)
        goto LABEL_411;
      a2 = (unint64_t)v344 + 8 * v19;
      v345.n128_u64[0] = *(_QWORD *)(v283 + 40) + 1488 * v19;
      v46 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
      v47 = (0x94D049BB133111EBLL * (v46 ^ (v46 >> 27))) ^ ((0x94D049BB133111EBLL * (v46 ^ (v46 >> 27))) >> 31);
      if (!(_QWORD)v316)
      {
        LODWORD(v48) = 0;
LABEL_56:
        re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove((uint64_t)&v316, v48, v47, (_QWORD *)v344 + v19, &v345);
        ++HIDWORD(v319);
        v45 = *(_QWORD *)(v283 + 32);
        goto LABEL_57;
      }
      v48 = v47 % DWORD2(v317);
      v49 = *(unsigned int *)(*((_QWORD *)&v316 + 1) + 4 * v48);
      if ((_DWORD)v49 == 0x7FFFFFFF)
        goto LABEL_56;
      while (*(_QWORD *)(v317 + 24 * v49 + 8) != *(_QWORD *)a2)
      {
        LODWORD(v49) = *(_DWORD *)(v317 + 24 * v49) & 0x7FFFFFFF;
        if ((_DWORD)v49 == 0x7FFFFFFF)
          goto LABEL_56;
      }
LABEL_57:
      if (v45 <= v19)
        goto LABEL_412;
      v50 = *(_QWORD *)(v283 + 40);
      v51 = *(_QWORD *)(re::RenderFrameData::stream(v285, (const re::WeakStringID *)a2) + 48);
      *(_QWORD *)(v50 + 1488 * v19 + 1480) = v51;
      if (v18)
        v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 888))(v51) != 0;
      else
        v52 = 0;
      *(_BYTE *)(v50 + 1488 * v19++ + 1456) = v52;
    }
    while (v19 < v342);
    if (!v342)
      break;
    v44 = 0;
    v3 = 1488;
    v18 = &v345;
    v6 = (unint64_t)v383;
LABEL_64:
    v53 = v282;
    if (v44 == v282)
      goto LABEL_416;
    v19 = v408;
    if (v408 <= v44)
      goto LABEL_417;
    a2 = v283;
    v19 = *(_QWORD *)(v283 + 32);
    if (v19 <= v44)
      goto LABEL_418;
    v54 = (char *)v344;
    v276 = v409;
    v19 = *(_QWORD *)(v283 + 40);
    v55 = v19 + 1488 * v44;
    v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v55 + 1480) + 512))(*(_QWORD *)(v55 + 1480));
    *(_QWORD *)v55 = v56;
    if (!*(_BYTE *)(v283 + 8))
    {
      v57 = *(_BYTE *)(v56 + 32);
      *(_BYTE *)(v283 + 8) = 1;
      *(_BYTE *)(v283 + 9) = v57;
    }
    v291 = (uint64_t **)(v19 + 1488 * v44);
    v280 = v44;
    v281 = (re::WeakStringID *)&v54[8 * v44];
    v291[1] = *(uint64_t **)v281;
    a2 = re::RenderFrameData::stream(v285, v281);
    v291[14] = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v55 + 1480) + 640))(*(_QWORD *)(v55 + 1480));
    v293 = (uint64_t *)(v291 + 14);
    v291[15] = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v55 + 1480) + 672))(*(_QWORD *)(v55 + 1480));
    v295 = (uint64_t *)(v291 + 15);
    v291[89] = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v55 + 1480) + 840))(*(_QWORD *)(v55 + 1480));
    v394[0] = &off_24ED82B98;
    v394[1] = (char *)v284 + 3040 * v44;
    v395 = v394;
    v279 = a2;
    v58 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(a2, (uint64_t *)&v345);
    v45 = 0xBF58476D1CE4E5B9;
    if (v58)
    {
      if (v8)
      {
        a2 = *(_QWORD *)(v8 + 40);
        if (a2)
        {
          v3 = 0;
          while (1)
          {
            v60 = re::BucketArray<re::LightInfoArrays,4ul>::operator[](v8, v3);
            if (!v395)
              break;
            (*(void (**)(_QWORD *, uint64_t))(*v395 + 48))(v395, v60);
            if (a2 == ++v3)
              goto LABEL_75;
          }
LABEL_426:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_427:
          re::internal::assertLog((re::internal *)6, v17, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 1488, v19);
          _os_crash();
          __break(1u);
          goto LABEL_428;
        }
      }
    }
LABEL_75:
    v61 = v395;
    if (v395 == v394)
    {
      v61 = v394;
      v62 = 4;
LABEL_79:
      (*(void (**)(_QWORD *, uint64_t))(*v61 + 8 * v62))(v61, v59);
    }
    else if (v395)
    {
      v62 = 5;
      goto LABEL_79;
    }
    v63 = re::RenderFrameData::stream(v285, v281);
    v64 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v63, (uint64_t *)&v345);
    if (v64)
    {
      v313 = 0;
      if (v65)
      {
        if (*((_QWORD *)v65 + 5))
        {
          if (!*((_QWORD *)v65 + 1))
            goto LABEL_423;
          if ((v65[16] & 1) != 0)
            v65 += 24;
          else
            v65 = (unsigned __int8 *)*((_QWORD *)v65 + 4);
          LODWORD(v65) = **(unsigned __int8 **)v65;
          if ((_DWORD)v65)
          {
            LODWORD(v65) = 1;
            v313 = 1;
          }
        }
        else
        {
          LODWORD(v65) = 0;
        }
      }
    }
    else
    {
      LODWORD(v65) = 0;
      v313 = 0;
    }
    v312 = 5.0;
    if (v275)
    {
      v345.n128_u64[0] = 0xDE63B48E3B4B8A1ELL;
      v345.n128_u64[1] = (unint64_t)"globaldirectionallight";
      re::DebugSettingsManager::getWithErrorCode<BOOL>((uint64_t)v275, &v345, &v313);
      re::StringID::destroyString((re::StringID *)&v345);
      v345.n128_u64[0] = 0xB06DDEFED9D91CB8;
      v345.n128_u64[1] = (unint64_t)"iblshadow:distanceforglobaldirectionallight";
      re::DebugSettingsManager::getWithErrorCode<float>((uint64_t)v275, &v345, &v312);
      re::StringID::destroyString((re::StringID *)&v345);
      LODWORD(v65) = v313;
    }
    if ((_DWORD)v65)
      re::LightContextBuilder::addGlobalDirectionalLight((_anonymous_namespace_ *)((char *)v284 + 3040 * v44), v312);
    v287 = (uint64_t)v291[89];
    if (v287)
    {
      v286 = *(_QWORD *)(v287 + 40);
      if (v286)
      {
        v66 = 0;
        v289 = (_BYTE *)(v19 + 1488 * v44 + 1456);
        do
        {
          v288 = v66;
          v67 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v287, v66);
          v68 = *(_QWORD *)(v67 + 16);
          if (v68)
          {
            a2 = *(_QWORD *)(v67 + 32);
            v296 = a2 + 736 * v68;
            do
            {
              v69 = (uint64_t *)re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)&v316, *(_QWORD *)a2 >> 1);
              if (v69)
              {
                v3 = (uint64_t)v69;
                v70 = *v69;
                v71 = *v293;
                if (*v293)
                {
                  v72 = *(_QWORD *)(v71 + 40);
                  if (v72)
                  {
                    for (i = 0; i != v72; ++i)
                    {
                      v19 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v71, i);
                      *(_QWORD *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::addUninitialized(v70 + 504) = v19;
                    }
                  }
                }
                v74 = *v295;
                if (*v295)
                {
                  v75 = *(_QWORD *)(v74 + 40);
                  if (v75)
                  {
                    for (j = 0; j != v75; ++j)
                    {
                      v19 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v74, j);
                      *(_QWORD *)re::BucketArray<re::DynamicArray<re::CameraMultiView> const*,4ul>::addUninitialized(v70 + 560) = v19;
                    }
                  }
                }
                if (*(_BYTE *)(a2 + 721))
                  *(_QWORD *)(*(_QWORD *)v3 + 1464) = **v291;
                if (*(_BYTE *)(a2 + 722))
                  *(_BYTE *)(*(_QWORD *)v3 + 1456) = *v289;
                *(_BYTE *)(v70 + 616) = *(_BYTE *)(a2 + 720);
                v45 = 0xBF58476D1CE4E5B9;
              }
              a2 += 736;
            }
            while (a2 != v296);
          }
          v66 = v288 + 1;
        }
        while (v288 + 1 != v286);
      }
    }
    v77 = operator new(0x20uLL);
    v78 = v279;
    *v77 = &off_24ED82C68;
    v77[1] = v279;
    v77[2] = v291;
    v77[3] = &v316;
    v393 = v77;
    v79 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v279, (uint64_t *)&v345);
    if (!v79
    {
LABEL_126:
      v83 = v393;
      if (v393 == v392)
      {
        v83 = v392;
        v84 = 4;
LABEL_130:
        (*(void (**)(_QWORD *, uint64_t))(*v83 + 8 * v84))(v83, v80);
      }
      else if (v393)
      {
        v84 = 5;
        goto LABEL_130;
      }
      v85 = re::RenderFrameData::stream(v285, v281);
      v86 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v85, (uint64_t *)&v345);
      if (v86)
      {
        v88 = *(_QWORD *)v87;
        if (*(_QWORD *)v87)
        {
          if (*(_QWORD *)(v88 + 40))
          {
            if (!*(_QWORD *)(v88 + 8))
              goto LABEL_424;
            if ((*(_BYTE *)(v88 + 16) & 1) != 0)
              v89 = (char **)(v88 + 24);
            else
              v89 = *(char ***)(v88 + 32);
            v90 = *v291;
            v292 = **v291;
            v290 = **v89;
            v297 = v90[3];
            v311 = v297;
            if (v314)
            {
              v91 = *v293;
              if (*v293)
              {
                a2 = *(_QWORD *)(v91 + 40);
                if (a2)
                {
                  v19 = 0;
                  while (1)
                  {
                    v87 = (_anonymous_namespace_ *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v91, v19);
                    v92 = *((_QWORD *)v87 + 2);
                    if (v92)
                      break;
LABEL_156:
                    if (++v19 == a2)
                      goto LABEL_157;
                  }
                  v93 = (float32x4_t *)*((_QWORD *)v87 + 4);
                  v94 = &v93[42 * v92];
                  while (2)
                  {
                    re::Projection::computeMatrix4x4F((re::Projection *)&v93[4], (uint64_t)&v299);
                    re::RenderCamera::computeInverseTransform(v93 + 2, (uint64_t)&v307);
                    v96 = 0;
                    v97 = v299;
                    v98 = v300;
                    v99 = v301;
                    v100 = v302;
                    *(_OWORD *)v383 = v307;
                    *(_OWORD *)&v383[16] = v308;
                    *(_OWORD *)&v383[32] = v309;
                    v384 = v310;
                    do
                    {
                      *(float32x4_t *)((char *)&v345 + v96) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v97, COERCE_FLOAT(*(_OWORD *)&v383[v96])), v98, *(float32x2_t *)&v383[v96], 1), v99, *(float32x4_t *)&v383[v96], 2), v100, *(float32x4_t *)&v383[v96], 3);
                      v96 += 16;
                    }
                    while (v96 != 64);
                    *(__n128 *)v383 = v345;
                    *(float32x4_t *)&v383[16] = v346;
                    *(float32x4_t *)&v383[32] = v347;
                    v384 = v348;
                    re::buildCullingPlanes((uint64_t)v383, v95, (uint64_t)&v345, v345);
                    v101 = v311;
                    if (!re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v315, v311))
                    {
                      v301.i64[0] = 0;
                      v300.i64[0] = 0;
                      v299 = 0uLL;
                      v300.i32[2] = 0;
                      re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v315, (uint64_t *)&v311, (uint64_t)&v299);
                      re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::deinit((uint64_t)&v299);
                    }
                    if (*(_QWORD *)v315)
                    {
                      v102 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (v101 ^ (v101 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v101 ^ (v101 >> 30))) >> 27));
                      v103 = (v102 ^ (v102 >> 31)) % *(unsigned int *)&v315[24];
                      v104 = *(_QWORD *)&v315[16];
                      v105 = *(unsigned int *)(*(_QWORD *)&v315[8] + 4 * v103);
                      if ((_DWORD)v105 != 0x7FFFFFFF)
                      {
                        while (*(_QWORD *)(*(_QWORD *)&v315[16] + (v105 << 6) + 16) != v101)
                        {
                          v105 = *(_DWORD *)(*(_QWORD *)&v315[16] + (v105 << 6) + 8) & 0x7FFFFFFF;
                          if (v105 == 0x7FFFFFFF)
                            goto LABEL_154;
                        }
LABEL_155:
                        v87 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::add(v104 + (v105 << 6) + 24, v345.n128_u64);
                        v93 += 42;
                        if (v93 == v94)
                          goto LABEL_156;
                        continue;
                      }
                    }
                    else
                    {
                      v104 = *(_QWORD *)&v315[16];
                    }
                    break;
                  }
LABEL_154:
                  v105 = 0x7FFFFFFFLL;
                  goto LABEL_155;
                }
              }
LABEL_157:
              v106 = *v295;
              if (*v295)
              {
                v19 = *(_QWORD *)(v106 + 40);
                if (v19)
                {
                  for (k = 0; k != v19; ++k)
                  {
                    v87 = (_anonymous_namespace_ *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v106, k);
                    v108 = *((_QWORD *)v87 + 2);
                    if (!v108)
                      continue;
                    v109 = *((_QWORD *)v87 + 4);
                    v110 = v109 + 1360 * v108;
                    do
                    {
                      v111 = 0;
                      v112 = 1;
                      do
                      {
                        v113 = v112;
                        v114 = (float32x4_t *)(v109 + 672 * v111);
                        re::Projection::computeMatrix4x4F((re::Projection *)&v114[4], (uint64_t)&v299);
                        re::RenderCamera::computeInverseTransform(v114 + 2, (uint64_t)&v307);
                        v116 = 0;
                        v117 = v299;
                        v118 = v300;
                        v119 = v301;
                        v120 = v302;
                        *(_OWORD *)v383 = v307;
                        *(_OWORD *)&v383[16] = v308;
                        *(_OWORD *)&v383[32] = v309;
                        v384 = v310;
                        do
                        {
                          *(float32x4_t *)((char *)&v345 + v116) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v117, COERCE_FLOAT(*(_OWORD *)&v383[v116])), v118, *(float32x2_t *)&v383[v116], 1), v119, *(float32x4_t *)&v383[v116], 2), v120, *(float32x4_t *)&v383[v116], 3);
                          v116 += 16;
                        }
                        while (v116 != 64);
                        *(__n128 *)v383 = v345;
                        *(float32x4_t *)&v383[16] = v346;
                        *(float32x4_t *)&v383[32] = v347;
                        v384 = v348;
                        re::buildCullingPlanes((uint64_t)v383, v115, (uint64_t)&v345, v345);
                        a2 = v311;
                        if (!re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v315, v311))
                        {
                          v301.i64[0] = 0;
                          v300.i64[0] = 0;
                          v299 = 0uLL;
                          v300.i32[2] = 0;
                          re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v315, (uint64_t *)&v311, (uint64_t)&v299);
                          re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::deinit((uint64_t)&v299);
                        }
                        if (!*(_QWORD *)v315)
                        {
                          v123 = *(_QWORD *)&v315[16];
LABEL_173:
                          v124 = 0x7FFFFFFFLL;
                          goto LABEL_174;
                        }
                        v121 = 0x94D049BB133111EBLL
                             * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
                        v122 = (v121 ^ (v121 >> 31)) % *(unsigned int *)&v315[24];
                        v123 = *(_QWORD *)&v315[16];
                        v124 = *(unsigned int *)(*(_QWORD *)&v315[8] + 4 * v122);
                        if ((_DWORD)v124 == 0x7FFFFFFF)
                          goto LABEL_173;
                        while (*(_QWORD *)(*(_QWORD *)&v315[16] + (v124 << 6) + 16) != a2)
                        {
                          v124 = *(_DWORD *)(*(_QWORD *)&v315[16] + (v124 << 6) + 8) & 0x7FFFFFFF;
                          if (v124 == 0x7FFFFFFF)
                            goto LABEL_173;
                        }
LABEL_174:
                        v87 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::add(v123 + (v124 << 6) + 24, v345.n128_u64);
                        v112 = 0;
                        v111 = 1;
                      }
                      while ((v113 & 1) != 0);
                      v109 += 1360;
                    }
                    while (v109 != v110);
                  }
                }
              }
            }
            v125 = *(_QWORD *)&v396[16];
            v78 = v279;
            if (*(_QWORD *)&v396[16] >= *(_QWORD *)&v396[8])
            {
              v126 = *(_QWORD *)&v396[16] + 1;
              if (*(_QWORD *)&v396[8] < (unint64_t)(*(_QWORD *)&v396[16] + 1))
              {
                if (*(_QWORD *)v396)
                {
                  v127 = 8;
                  if (*(_QWORD *)&v396[8])
                    v127 = 2 * *(_QWORD *)&v396[8];
                  if (v127 <= v126)
                    v128 = *(_QWORD *)&v396[16] + 1;
                  else
                    v128 = v127;
                  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v396, v128);
                }
                else
                {
                  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v396, v126);
                  ++*(_DWORD *)&v396[24];
                }
              }
              v125 = *(_QWORD *)&v396[16];
            }
            v129 = *(_QWORD *)((char *)&v397 + 1) + 24 * v125;
            *(_QWORD *)v129 = v292;
            *(_BYTE *)(v129 + 8) = v290;
            *(_DWORD *)(v129 + 9) = v345.n128_u32[0];
            *(_DWORD *)(v129 + 12) = *(unsigned __int32 *)((char *)v345.n128_u32 + 3);
            *(_QWORD *)(v129 + 16) = v297;
            ++*(_QWORD *)&v396[16];
            ++*(_DWORD *)&v396[24];
            if (!v297)
              *(_DWORD *)((char *)&v397 + 9) = 1065353216;
          }
        }
      }
      v390[0] = &off_24ED82CF8;
      v390[1] = v276 + 56 * v280;
      v391 = v390;
      v130 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v78, (uint64_t *)&v345);
      v3 = 1488;
      if (v130)
      {
        if (v8)
        {
          v19 = *(_QWORD *)(v8 + 40);
          if (v19)
          {
            a2 = 0;
            do
            {
              v132 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v8, a2);
              if (!v391)
                goto LABEL_426;
              (*(void (**)(_QWORD *, uint64_t))(*v391 + 48))(v391, v132);
            }
            while (v19 != ++a2);
          }
        }
      }
      v133 = v391;
      if (v391 == v390)
      {
        v133 = v390;
        v134 = 4;
LABEL_200:
        (*(void (**)(_QWORD *, uint64_t))(*v133 + 8 * v134))(v133, v131);
      }
      else if (v391)
      {
        v134 = 5;
        goto LABEL_200;
      }
      v44 = v280 + 1;
      if (v280 + 1 >= v342)
        break;
      goto LABEL_64;
    }
    v19 = 0;
    v3 = v8 + 24;
    while (1)
    {
      v81 = *(_QWORD *)(v8 + 40);
      if (v81 <= v19)
        break;
      a2 = v19 >> 2;
      v45 = *(_QWORD *)(v8 + 8);
      if (v45 <= v19 >> 2)
        goto LABEL_410;
      v82 = v8 + 24;
      if ((*(_BYTE *)(v8 + 16) & 1) == 0)
        v82 = *(_QWORD *)(v8 + 32);
      v45 = 0xBF58476D1CE4E5B9;
      if (!v393)
        goto LABEL_426;
      (*(void (**)(_BYTE *, unint64_t))(*(_QWORD *)v393 + 48))(v393, *(_QWORD *)(v82 + 8 * a2) + 736 * (v19++ & 3));
      if (v44 == v19)
        goto LABEL_126;
    }
    re::internal::assertLog((re::internal *)6, v80, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, v19, v81);
    _os_crash();
    __break(1u);
LABEL_410:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 858;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = a2;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_411:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 468;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = v19;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_412:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 468;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = v19;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_413:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    v215 = v214;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 468;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = v215;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v215;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_414:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 468;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = v45;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v215;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_415:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 468;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = v45;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v215;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_416:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    v19 = v53;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 468;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = v19;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_417:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 468;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = v44;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_418:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 468;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = v44;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_419:
    re::internal::assertLog((re::internal *)4, v245, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
    _os_crash();
    __break(1u);
LABEL_420:
    re::internal::assertLog((re::internal *)4, v248, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
    _os_crash();
    __break(1u);
LABEL_421:
    re::internal::assertLog((re::internal *)4, v251, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
    _os_crash();
    __break(1u);
LABEL_422:
    re::internal::assertLog((re::internal *)4, v255, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
    _os_crash();
    __break(1u);
LABEL_423:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 866;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = 0;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_424:
    v299.i64[0] = 0;
    v348 = 0u;
    v349 = 0u;
    v346 = 0u;
    v347 = 0u;
    v345 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v383 = 136315906;
    *(_QWORD *)&v383[4] = "operator[]";
    *(_WORD *)&v383[12] = 1024;
    *(_DWORD *)&v383[14] = 866;
    *(_WORD *)&v383[18] = 2048;
    *(_QWORD *)&v383[20] = 0;
    *(_WORD *)&v383[28] = 2048;
    *(_QWORD *)&v383[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_425:
    v345.n128_u64[0] = 0xBEE9CE6A024C1838;
    v345.n128_u64[1] = (unint64_t)"meshshadow:textureGenerationEnableViewFrustumCulling";
    re::DebugSettingsManager::getWithErrorCode<BOOL>(v3, &v345, &v314);
    re::StringID::destroyString((re::StringID *)&v345);
  }
  re::LightContextAtlasContainer::allocateTiles((re::LightContextAtlasContainer *)v320);
  re::ProjectiveShadowBuilder::build(*(re::RenderManager **)(v277 + 8), (uint64_t)&v407, (unint64_t)v271, (uint32x2_t *)&v307);
  *(_QWORD *)v283 = v307;
  v135 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v283 + 16) + 280))(*(_QWORD *)(v283 + 16));
  if (v135)
  {
    a2 = v135;
    v136 = atomic_load((unsigned __int8 *)&qword_25411F4F8);
    if ((v136 & 1) == 0)
    {
      v135 = __cxa_guard_acquire(&qword_25411F4F8);
      if ((_DWORD)v135)
      {
        _MergedGlobals_440 = re::hashString((re *)v135, v268);
        __cxa_guard_release(&qword_25411F4F8);
      }
    }
    v137 = atomic_load((unsigned __int8 *)&qword_25411F508);
    if ((v137 & 1) == 0)
    {
      v135 = __cxa_guard_acquire(&qword_25411F508);
      if ((_DWORD)v135)
      {
        qword_25411F500 = re::getCombinedScopeHash(_MergedGlobals_440, v269, v270);
        __cxa_guard_release(&qword_25411F508);
      }
    }
    v138 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11OpenSkyDataEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11OpenSkyDataEEE" & 0x8000000000000000) != 0)
    {
      v139 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11OpenSkyDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
      v140 = 5381;
      do
      {
        v138 = v140;
        v141 = *v139++;
        v140 = (33 * v140) ^ v141;
      }
      while (v141);
    }
    v142 = (qword_25411F500 + (v138 << 6) + (v138 >> 2) - 0x61C8864680B583E9) ^ v138;
    v143 = re::globalAllocators((re *)v135);
    v144 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v143[2] + 32))(v143[2], 224, 16);
    *(_QWORD *)v144 = &off_24ED82DA0;
    v145 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v144 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v144 + 32) = v145;
    v146 = *(_OWORD *)(a2 + 32);
    v147 = *(_OWORD *)(a2 + 48);
    v148 = *(_OWORD *)(a2 + 64);
    *(_DWORD *)(v144 + 96) = *(_DWORD *)(a2 + 80);
    *(_OWORD *)(v144 + 64) = v147;
    *(_OWORD *)(v144 + 80) = v148;
    *(_OWORD *)(v144 + 48) = v146;
    *(_QWORD *)(v144 + 136) = 0;
    *(_QWORD *)(v144 + 112) = 0;
    *(_QWORD *)(v144 + 120) = 0;
    *(_QWORD *)(v144 + 104) = 0;
    *(_DWORD *)(v144 + 128) = 0;
    *(_QWORD *)(v144 + 104) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(v144 + 112) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    v149 = *(_QWORD *)(v144 + 120);
    *(_QWORD *)(v144 + 120) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = v149;
    v150 = *(_QWORD *)(v144 + 136);
    *(_QWORD *)(v144 + 136) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = v150;
    ++*(_DWORD *)(a2 + 112);
    ++*(_DWORD *)(v144 + 128);
    *(_QWORD *)(v144 + 176) = 0;
    *(_QWORD *)(v144 + 152) = 0;
    *(_QWORD *)(v144 + 160) = 0;
    *(_QWORD *)(v144 + 144) = 0;
    *(_DWORD *)(v144 + 168) = 0;
    *(_QWORD *)(v144 + 144) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(v144 + 152) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    v151 = *(_QWORD *)(v144 + 160);
    *(_QWORD *)(v144 + 160) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a2 + 144) = v151;
    v152 = *(_QWORD *)(v144 + 176);
    *(_QWORD *)(v144 + 176) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = v152;
    ++*(_DWORD *)(a2 + 152);
    ++*(_DWORD *)(v144 + 168);
    v153 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(v144 + 193) = *(_OWORD *)(a2 + 177);
    *(_OWORD *)(v144 + 184) = v153;
    v154 = *(_QWORD *)(v277 + 48);
    if (!v154)
      goto LABEL_210;
    v154 = v142 % *(unsigned int *)(v277 + 72);
    v155 = *(unsigned int *)(*(_QWORD *)(v277 + 56) + 4 * v154);
    if ((_DWORD)v155 == 0x7FFFFFFF)
      goto LABEL_210;
    v171 = *(_QWORD *)(v277 + 64);
    if (*(_QWORD *)(v171 + 24 * v155 + 8) != v142)
    {
      while (1)
      {
        LODWORD(v155) = *(_DWORD *)(v171 + 24 * v155) & 0x7FFFFFFF;
        if ((_DWORD)v155 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v171 + 24 * v155 + 8) == v142)
          goto LABEL_216;
      }
LABEL_210:
      v19 = *(unsigned int *)(v277 + 84);
      if ((_DWORD)v19 == 0x7FFFFFFF)
      {
        v19 = *(unsigned int *)(v277 + 80);
        v156 = v19;
        if ((_DWORD)v19 == *(_DWORD *)(v277 + 72))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v277 + 48, 2 * *(_DWORD *)(v277 + 76));
          LODWORD(v154) = v142 % *(unsigned int *)(v277 + 72);
          v156 = *(_DWORD *)(v277 + 80);
        }
        *(_DWORD *)(v277 + 80) = v156 + 1;
        v157 = *(_QWORD *)(v277 + 64);
        v158 = *(_DWORD *)(v157 + 24 * v19);
      }
      else
      {
        v157 = *(_QWORD *)(v277 + 64);
        v158 = *(_DWORD *)(v157 + 24 * v19);
        *(_DWORD *)(v277 + 84) = v158 & 0x7FFFFFFF;
      }
      v159 = 24 * v19;
      *(_DWORD *)(v157 + v159) = v158 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(v277 + 64) + v159) = *(_DWORD *)(*(_QWORD *)(v277 + 64) + 24 * v19) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v277 + 56) + 4 * v154);
      *(_QWORD *)(*(_QWORD *)(v277 + 64) + 24 * v19 + 8) = v142;
      *(_QWORD *)(*(_QWORD *)(v277 + 64) + 24 * v19 + 16) = v144;
      *(_DWORD *)(*(_QWORD *)(v277 + 56) + 4 * v154) = v19;
      ++*(_DWORD *)(v277 + 76);
      ++*(_DWORD *)(v277 + 88);
    }
  }
LABEL_216:
  v18 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v273 + 376))(*(_QWORD *)v273);
  v160 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v273 + 344))(*(_QWORD *)v273);
  if (!v18)
    goto LABEL_286;
  v6 = v160;
  if (!v160)
  {
LABEL_433:
    re::internal::assertLog((re::internal *)4, v161, "assertion failure: '%s' (%s:line %i) Mesh Shadow Global Data should not be nullptr if mesh shadow per frame update data exists", "meshShadowGlobalData", "build", 368);
    v162 = _os_crash();
    __break(1u);
    goto LABEL_434;
  }
  a2 = (unint64_t)&v398[25];
  v19 = v272[21];
  v3 = v19 + 336;
  v162 = (uint64_t)v275;
  if (!v275)
    goto LABEL_219;
LABEL_434:
  v345.n128_u64[0] = 0x6F2CA1B2EF949A36;
  v345.n128_u64[1] = (unint64_t)"meshshadow:textureGenerationNominalDequeueSize";
  *(_DWORD *)v383 = 0;
  re::DebugSettingsManager::getWithErrorCode<int>(v162, &v345, v383);
LABEL_436:
  re::StringID::destroyString((re::StringID *)&v345);
  v345.n128_u64[0] = 0xAD1A32C714F7C026;
  v345.n128_u64[1] = (unint64_t)"meshshadow:textureGenerationWorkDivisionFactor";
  *(_DWORD *)v383 = 0;
  re::DebugSettingsManager::getWithErrorCode<int>((uint64_t)v275, &v345, v383);
  re::StringID::destroyString((re::StringID *)&v345);
LABEL_219:
  v383[0] = 0;
  if (v314)
  {
    v163 = *(float32x4_t **)(v19 + 256);
    v164 = v163[28];
    v299 = v163[27];
    v300 = v164;
    v165 = *(float32x4_t **)(v19 + 296);
    v166 = v165[28];
    v301 = v165[27];
    v302 = v166;
    v306 = 0;
    v167 = *(_QWORD *)&v315[16];
    v345.n128_u8[0] = 1;
    v348 = v301;
    v349 = v166;
    v346 = v299;
    v347 = v164;
    LODWORD(v353) = 0;
    v303 = 0u;
    v304 = 0;
    v305 = xmmword_2260F5A80;
    v383[0] = 1;
    *(float32x4_t *)&v383[16] = v299;
    *(float32x4_t *)&v383[32] = v164;
    v384 = v301;
    v385 = v166;
    v389 = 0;
    v168 = *(_OWORD *)v315;
    memset(v315, 0, 24);
    v386 = v168;
    v350 = 0u;
    v387 = v167;
    v351 = 0;
    v169 = *(_OWORD *)&v315[24];
    *(_OWORD *)&v315[24] = xmmword_2260F5A80;
    v388 = v169;
    v352 = xmmword_2260F5A80;
    re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v350);
    re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v303);
  }
  re::PersistentShadowState::consumeMeshShadowUpdate(v3);
  atomic_store(*(_QWORD *)(v6 + 328), (unint64_t *)(v19 + 888));
  v170 = *(_OWORD *)v6;
  *(_QWORD *)&v398[17] = *(_QWORD *)(v6 + 16);
  *(_OWORD *)&v398[1] = v170;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)a2, *(_QWORD *)(v6 + 24));
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v398[33], *(_QWORD *)(v6 + 32));
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v398[41], *(_QWORD *)(v6 + 40));
  *(_QWORD *)&v398[49] = *(_QWORD *)(v6 + 48);
  if (v398[57] || *(_BYTE *)(v6 + 56))
  {
    if (!v398[57] || *(_BYTE *)(v6 + 56))
    {
      if (v398[57] || !*(_BYTE *)(v6 + 56))
      {
        re::StringID::operator=((unint64_t *)((char *)&v399 + 1), (uint64_t *)(v6 + 64));
      }
      else
      {
        v398[57] = 1;
        re::StringID::StringID((re::StringID *)((char *)&v399 + 1), (const StringID *)(v6 + 64));
      }
    }
    else
    {
      re::StringID::destroyString((re::StringID *)((char *)&v399 + 1));
      v398[57] = 0;
    }
  }
  v172 = *(_OWORD *)(v6 + 80);
  v173 = *(_OWORD *)(v6 + 96);
  v174 = *(_OWORD *)(v6 + 112);
  *(_OWORD *)&v400[49] = *(_OWORD *)(v6 + 128);
  *(_OWORD *)&v400[33] = v174;
  *(_OWORD *)&v400[17] = v173;
  *(_OWORD *)&v400[1] = v172;
  v175 = *(_OWORD *)(v6 + 144);
  v176 = *(_OWORD *)(v6 + 160);
  v177 = *(_OWORD *)(v6 + 176);
  *(_OWORD *)&v400[113] = *(_OWORD *)(v6 + 192);
  *(_OWORD *)&v400[97] = v177;
  *(_OWORD *)&v400[81] = v176;
  *(_OWORD *)&v400[65] = v175;
  v178 = *(_OWORD *)(v6 + 208);
  v179 = *(_OWORD *)(v6 + 224);
  v180 = *(_OWORD *)(v6 + 240);
  *(_OWORD *)&v402[16] = *(_OWORD *)(v6 + 256);
  *(_OWORD *)v402 = v180;
  v401 = v179;
  *(_OWORD *)&v400[129] = v178;
  v181 = *(_OWORD *)(v6 + 272);
  v182 = *(_OWORD *)(v6 + 288);
  v183 = *(_OWORD *)(v6 + 304);
  v406 = *(_OWORD *)(v6 + 320);
  v405 = v183;
  v404 = v182;
  v403 = v181;
  v184 = v277;
  re::ProjectiveMeshShadowBuilder::buildShadowGenerationData((void **)v3, (uint64_t)&v299, (uint64_t)v18, v278, v396, v277, &v345);
  if (v345.n128_u8[0])
  {
    v186 = (float32x4_t *)(v19 + 776);
    a2 = v19 + 720;
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v19 + 720, &v345.n128_i64[1]);
    if ((__int8 *)(v19 + 720) != &v345.n128_i8[8])
    {
      v188 = *(_QWORD *)(v19 + 768);
      if (v188 && v348.i64[1] && v188 != v348.i64[1])
      {
        re::internal::assertLog((re::internal *)4, v187, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
        _os_crash();
        __break(1u);
      }
      *(_QWORD *)(v19 + 768) = v348.i64[1];
      v348.i64[1] = v188;
      v189 = *v186;
      *v186 = v349;
      v349 = v189;
      v190 = *(_QWORD *)(v19 + 800);
      *(_QWORD *)(v19 + 800) = *((_QWORD *)&v350 + 1);
      *((_QWORD *)&v350 + 1) = v190;
      LODWORD(v350) = v350 + 1;
      ++*(_DWORD *)(v19 + 792);
    }
    if ((__int8 *)a2 != &v345.n128_i8[8])
    {
      v191 = *(_QWORD *)(v19 + 808);
      v192 = v351;
      if (!v191 || v191 == v351)
      {
        *(_QWORD *)(v19 + 808) = v351;
        v351 = v191;
        v209 = *((_QWORD *)&v352 + 1);
        v210 = *(_OWORD *)(v19 + 816);
        v211 = *(_OWORD *)(v19 + 832);
        *(_QWORD *)(v19 + 816) = v352;
        *(_QWORD *)(v19 + 824) = v209;
        v352 = v210;
        *(_OWORD *)(v19 + 832) = v353;
        v353 = v211;
      }
      else
      {
        if (*(_DWORD *)(v19 + 836))
        {
          v193 = *(unsigned int *)(v19 + 832);
          if ((_DWORD)v193)
            memset_pattern16(*(void **)(v19 + 816), &unk_2260EB7B0, 4 * v193);
          v194 = *(unsigned int *)(v19 + 840);
          if ((_DWORD)v194)
          {
            v195 = 0;
            v196 = 32 * v194;
            do
            {
              v197 = *(_QWORD *)(v19 + 824) + v195;
              v198 = *(_DWORD *)(v197 + 8);
              if (v198 < 0)
                *(_DWORD *)(v197 + 8) = v198 & 0x7FFFFFFF;
              v195 += 32;
            }
            while (v196 != v195);
          }
          *(_DWORD *)(v19 + 844) = 0x7FFFFFFF;
          *(_DWORD *)(v19 + 836) = 0;
          *(_DWORD *)(v19 + 840) = 0;
          ++*(_DWORD *)(v19 + 848);
        }
        if (v192)
        {
          if (*(_DWORD *)(v19 + 832) < DWORD1(v353))
            re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v19 + 808, DWORD1(v353));
          v199 = DWORD2(v353);
          if (DWORD2(v353))
          {
            a2 = 0;
            v200 = 0;
            do
            {
              v201 = (unint64_t *)(*((_QWORD *)&v352 + 1) + a2);
              if ((*(_DWORD *)(*((_QWORD *)&v352 + 1) + a2 + 8) & 0x80000000) != 0)
              {
                v202 = *v201;
                v203 = *(unsigned int *)(v19 + 832);
                v204 = *v201 % v203;
                v205 = *(unsigned int *)(v19 + 844);
                if ((_DWORD)v205 == 0x7FFFFFFF)
                {
                  v205 = *(unsigned int *)(v19 + 840);
                  v206 = v205;
                  if ((_DWORD)v205 == (_DWORD)v203)
                  {
                    re::HashTable<unsigned long long,re::WorldOrderedShadows::Range,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v19 + 808, 2 * *(_DWORD *)(v19 + 836));
                    v204 = v202 % *(unsigned int *)(v19 + 832);
                    v206 = *(_DWORD *)(v19 + 840);
                  }
                  *(_DWORD *)(v19 + 840) = v206 + 1;
                  v207 = *(_QWORD *)(v19 + 824);
                  v208 = *(_DWORD *)(v207 + 32 * v205 + 8);
                }
                else
                {
                  v207 = *(_QWORD *)(v19 + 824);
                  v208 = *(_DWORD *)(v207 + 32 * v205 + 8);
                  *(_DWORD *)(v19 + 844) = v208 & 0x7FFFFFFF;
                }
                *(_DWORD *)(v207 + 32 * v205 + 8) = v208 | 0x80000000;
                *(_DWORD *)(*(_QWORD *)(v19 + 824) + 32 * v205 + 8) = *(_DWORD *)(*(_QWORD *)(v19 + 824) + 32 * v205 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v19 + 816) + 4 * v204);
                *(_QWORD *)(*(_QWORD *)(v19 + 824) + 32 * v205) = v202;
                *(_QWORD *)(*(_QWORD *)(v19 + 824) + 32 * v205 + 16) = v201[2];
                *(_QWORD *)(*(_QWORD *)(v19 + 824) + 32 * v205 + 24) = v201[3];
                *(_DWORD *)(*(_QWORD *)(v19 + 816) + 4 * v204) = v205;
                ++*(_DWORD *)(v19 + 836);
                v199 = DWORD2(v353);
              }
              ++v200;
              a2 += 32;
            }
            while (v200 < v199);
          }
          ++*(_DWORD *)(v19 + 848);
        }
      }
    }
    v212 = *(_QWORD *)(v19 + 856);
    *(_QWORD *)(v19 + 856) = v355;
    v355 = v212;
    re::FixedArray<float>::operator=((uint64_t *)(v19 + 864), &v356);
    v184 = v277;
    if (v345.n128_u8[0])
    {
      a2 = (unint64_t)&v351;
      if (v356)
      {
        if (v357)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v356 + 40))(v356, v358);
          v357 = 0;
          v358 = 0;
        }
        v356 = 0;
      }
      if (v355)
      {

        v355 = 0;
      }
      v213 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(&v351);
      if (v348.i64[1])
      {
        if (*((_QWORD *)&v350 + 1))
          (*(void (**)(double))(*(_QWORD *)v348.i64[1] + 40))(v213);
        *((_QWORD *)&v350 + 1) = 0;
        v349 = 0uLL;
        v348.i64[1] = 0;
        LODWORD(v350) = v350 + 1;
      }
      v185.n128_f64[0] = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(&v345.n128_i64[1]);
    }
  }
  if (v302.i64[0])
  {
    if (v304)
      (*(void (**)(__n128))(*(_QWORD *)v302.i64[0] + 40))(v185);
    v304 = 0;
    *(_QWORD *)&v303 = 0;
    v302 = 0uLL;
    ++DWORD2(v303);
  }
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)&v299);
  if (v383[0])
    re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v386);
  re::ProjectiveMeshShadowBuilder::buildShadowRenderingData((uint64_t)&v312, (re::PersistentShadowState *)(v272[21] + 336), v272[21] + 720, *(re::MaterialParameterTableBuilder **)(v184 + 376), (unint64_t)v396, (unint64_t)v18, v184);
LABEL_286:
  v214 = v282;
  v3 = v283;
  v44 = (unint64_t)v278;
  v18 = (__n128 *)v285;
  if (v342)
  {
    v45 = 0;
    v294 = 0;
    v275 = &v375;
    v272 = v374;
    v273 = &v377;
    v271 = v372;
    do
    {
      if (v45 == v214)
        goto LABEL_413;
      v215 = *(_QWORD *)(v3 + 32);
      if (v215 <= v45)
        goto LABEL_414;
      v216 = (const re::WeakStringID *)((char *)v344 + 8 * v45);
      v19 = *(_QWORD *)(v3 + 40);
      a2 = re::RenderFrameData::stream((re::RenderFrameData *)v18, v216);
      v217 = re::RenderFrameData::stream((re::RenderFrameData *)v18, v216);
      v18 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v217 + 48) + 552))(*(_QWORD *)(v217 + 48));
      v346.i64[0] = 0;
      v346.i32[2] = 0;
      v347.i64[0] = 0;
      v345 = (__n128)v44;
      re::DynamicArray<re::MeshScene>::setCapacity(&v345, 0);
      ++v346.i32[2];
      v381[0] = &off_24ED82DC8;
      v381[1] = &v345;
      v382 = v381;
      v218 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(a2, (uint64_t *)v383);
      if (v218)
      {
        if (v220)
        {
          v8 = *(_QWORD *)(v220 + 40);
          if (v8)
          {
            v6 = 0;
            do
            {
              v221 = re::BucketArray<re::MeshScene,4ul>::operator[](v220, v6);
              if (!v382)
                goto LABEL_426;
              (*(void (**)(_QWORD *, uint64_t))(*v382 + 48))(v382, v221);
            }
            while (v8 != ++v6);
          }
        }
      }
      v222 = v382;
      if (v382 == v381)
      {
        v222 = v381;
        v223 = 4;
        v44 = v277;
        v6 = 1488;
      }
      else
      {
        v44 = v277;
        v6 = 1488;
        if (!v382)
          goto LABEL_301;
        v223 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t))(*v222 + 8 * v223))(v222, v219);
LABEL_301:
      v298 = v19;
      v224 = v19 + 1488 * v45 + 40;
      if (v346.i64[0])
      {
        v225 = re::BucketArray<re::MeshSceneCollection,16ul>::addUninitialized(v19 + 1488 * v45 + 40);
        *(_QWORD *)(v225 + 32) = 0;
        *(_DWORD *)(v225 + 24) = 0;
        *(_QWORD *)(v225 + 8) = 0;
        *(_QWORD *)(v225 + 16) = 0;
        *(_QWORD *)v225 = 0;
        *(__n128 *)v225 = v345;
        *(_QWORD *)(v225 + 16) = v346.i64[0];
        v345 = 0uLL;
        v346.i64[0] = 0;
        *(_QWORD *)(v225 + 32) = v347.i64[0];
        v347.i64[0] = 0;
        ++v346.i32[2];
        ++*(_DWORD *)(v225 + 24);
      }
      re::DynamicArray<re::MeshScene>::deinit((uint64_t)&v345);
      v3 = v283;
      if (v18)
      {
        v19 = v18[2].n128_u64[1];
        if (v19)
        {
          for (m = 0; m != v19; ++m)
          {
            v227 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v18, m);
            re::BucketArray<re::MeshSceneCollection,16ul>::add(v224, v227);
          }
        }
      }
      v379[0] = &off_24ED82E58;
      v379[1] = v224;
      v380 = v379;
      v228 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(a2, (uint64_t *)&v345);
      if (v228)
      {
        if (v18)
        {
          v8 = v18[2].n128_u64[1];
          if (v8)
          {
            a2 = 0;
            do
            {
              v230 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v18, a2);
              if (!v380)
                goto LABEL_426;
              (*(void (**)(_QWORD *, uint64_t))(*v380 + 48))(v380, v230);
            }
            while (v8 != ++a2);
          }
        }
      }
      v231 = v380;
      if (v380 == v379)
      {
        v231 = v379;
        v233 = 4;
        v232 = v284;
        goto LABEL_317;
      }
      v232 = v284;
      if (v380)
      {
        v233 = 5;
LABEL_317:
        (*(void (**)(_QWORD *, uint64_t))(*v231 + 8 * v233))(v231, v229);
      }
      v234 = v298 + 1488 * v45;
      *(_QWORD *)(v234 + 96) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v234 + 1480) + 600))(*(_QWORD *)(v234 + 1480));
      *(_QWORD *)(v234 + 104) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v234 + 1480) + 768))(*(_QWORD *)(v234 + 1480));
      v18 = (__n128 *)(v234 + 104);
      *(_QWORD *)(v234 + 696) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v234 + 1480) + 704))(*(_QWORD *)(v234 + 1480));
      *(_QWORD *)(v234 + 704) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v234 + 1480) + 736))(*(_QWORD *)(v234 + 1480));
      if (!*((_BYTE *)v232 + 3040 * v45 + 2992))
      {
        v235 = (_QWORD *)(v234 + 1480);
        v236 = *(re::Allocator **)(v44 + 376);
        v18 = (__n128 *)v18->n128_u64[0];
        v237 = v298 + 1488 * v45;
        a2 = *(_QWORD *)(v237 + 112);
        v44 = *(_QWORD *)(v237 + 120);
        v238 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v235 + 872))(*v235);
        re::LightContextBuilder::build((uint64_t)v232 + 3040 * v45, v236, v274, v224, (uint64_t)v18, a2, v44, v237 + 504, (uint64_t)&v345, v238);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v237 + 128, (uint64_t)&v345);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v237 + 168, (uint64_t)&v347.i64[1]);
        re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator=((_QWORD *)(v237 + 208), &v350);
        re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(v237 + 264, &v354);
        re::FixedArray<float>::operator=((uint64_t *)(v237 + 312), &v359);
        re::FixedArray<float>::operator=((uint64_t *)(v237 + 336), &v362);
        re::FixedArray<float>::operator=((uint64_t *)(v237 + 360), &v365);
        re::FixedArray<float>::operator=((uint64_t *)(v237 + 384), &v368);
        re::FixedArray<float>::operator=((uint64_t *)(v237 + 408), &v371);
        re::FixedArray<float>::operator=((uint64_t *)(v237 + 432), &v373);
        v239 = v375;
        *(_BYTE *)(v237 + 472) = v376;
        *(_OWORD *)(v237 + 456) = v239;
        v240 = v378;
        *(_OWORD *)(v237 + 480) = v377;
        *(_BYTE *)(v237 + 496) = v240;
        if (v373)
        {
          if (v374[0])
          {
            (*(void (**)(void))(*(_QWORD *)v373 + 40))();
            v374[0] = 0;
            v374[1] = 0;
          }
          v373 = 0;
        }
        v3 = v283;
        if (v371)
        {
          if (v372[0])
          {
            (*(void (**)(void))(*(_QWORD *)v371 + 40))();
            v372[0] = 0;
            v372[1] = 0;
          }
          v371 = 0;
        }
        if (v368)
        {
          if (v369)
          {
            (*(void (**)(void))(*(_QWORD *)v368 + 40))();
            v369 = 0;
            v370 = 0;
          }
          v368 = 0;
        }
        if (v365)
        {
          if (v366)
          {
            (*(void (**)(void))(*(_QWORD *)v365 + 40))();
            v366 = 0;
            v367 = 0;
          }
          v365 = 0;
        }
        if (v362)
        {
          if (v363)
          {
            (*(void (**)(void))(*(_QWORD *)v362 + 40))();
            v363 = 0;
            v364 = 0;
          }
          v362 = 0;
        }
        if (v359)
        {
          if (v360)
          {
            (*(void (**)(void))(*(_QWORD *)v359 + 40))();
            v360 = 0;
            v361 = 0;
          }
          v359 = 0;
        }
        re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(&v354);
        re::BucketArray<re::LightContext,16ul>::deinit((uint64_t)&v350);
        if ((_QWORD)v350)
        {
          v241 = v351;
          if ((v351 & 1) == 0)
          {
            (*(void (**)(void))(*(_QWORD *)v350 + 40))();
            v241 = v351;
          }
          v350 = 0uLL;
          LODWORD(v351) = (v241 | 1) + 2;
        }
        re::DynamicArray<re::FilterView>::deinit((uint64_t)&v347.i64[1]);
        re::DynamicArray<re::ShadowView>::deinit((uint64_t)&v345);
      }
      v215 = v308;
      if ((unint64_t)v308 <= v45)
        goto LABEL_415;
      v242 = *((_QWORD *)&v308 + 1);
      v18 = (__n128 *)v285;
      v243 = re::RenderFrameData::stream(v285, v216);
      v244 = re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v243, (uint64_t *)&v345);
      if (v244)
      {
        v44 = (unint64_t)v278;
        v19 = v298;
        if (v244)
        {
          if (!*(_QWORD *)(v244 + 40))
            goto LABEL_419;
          v244 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v244, 0);
        }
      }
      else
      {
        v44 = (unint64_t)v278;
        v19 = v298;
      }
      *(_QWORD *)(v19 + 1488 * v45 + 16) = v244;
      v246 = re::RenderFrameData::stream(v285, v216);
      v247 = re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v246, (uint64_t *)&v345);
      if (v247)
      {
        if (v247)
        {
          if (!*(_QWORD *)(v247 + 40))
            goto LABEL_420;
          v247 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v247, 0);
        }
      }
      *(_QWORD *)(v19 + 1488 * v45 + 24) = v247;
      v249 = re::RenderFrameData::stream(v285, v216);
      v250 = re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v249, (uint64_t *)&v345);
      if (v250)
      {
        if (v250)
        {
          if (!*(_QWORD *)(v250 + 40))
            goto LABEL_421;
          v250 = re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::operator[](v250, 0);
        }
      }
      a2 = 72;
      v19 += 1488 * v45;
      *(_QWORD *)(v19 + 32) = v250;
      re::FixedArray<float>::operator=((uint64_t *)(v19 + 624), (uint64_t *)(v242 + 72 * v45));
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v19 + 648, (uint64_t *)(v242 + 72 * v45 + 24));
      v252 = re::RenderFrameData::stream(v285, v216);
      v253 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v252, (uint64_t *)&v345);
      if (v253)
      {
        if (v254)
        {
          if (!*(_QWORD *)(v254 + 40))
            goto LABEL_422;
          re::BucketArray<unsigned long,4ul>::operator[](v254, 0);
          v256 = v298 + 1488 * v45;
          if (!*(_BYTE *)(v256 + 1472))
            *(_BYTE *)(v256 + 1472) = 1;
          *(_BYTE *)(v298 + 1488 * v45 + 1473) = v294++;
        }
      }
      ++v45;
      v214 = v282;
    }
    while (v45 < v342);
  }
  if (*((_QWORD *)&v307 + 1) && (_QWORD)v308)
  {
    v257 = (_QWORD *)*((_QWORD *)&v308 + 1);
    v258 = 72 * v308;
    do
    {
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v257 + 3);
      re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(v257);
      v257 += 9;
      v258 -= 72;
    }
    while (v258);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v307 + 1) + 40))(*((_QWORD *)&v307 + 1), *((_QWORD *)&v308 + 1));
  }
  re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v315);
  v259.n128_f64[0] = re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v316);
  if (v398[57])
    re::StringID::destroyString((re::StringID *)((char *)&v399 + 1));
  if (*(_QWORD *)&v398[41])
  {

    *(_QWORD *)&v398[41] = 0;
  }
  if (*(_QWORD *)&v398[33])
  {

    *(_QWORD *)&v398[33] = 0;
  }
  if (*(_QWORD *)&v398[25])
  {

    *(_QWORD *)&v398[25] = 0;
  }
  if (*(_QWORD *)v396 && *(_QWORD *)((char *)&v397 + 1))
    (*(void (**)(__n128))(**(_QWORD **)v396 + 40))(v259);
  if (v407 && v408)
  {
    v260 = v409;
    v261 = 56 * v408;
    do
    {
      re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::deinit(v260);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v260);
      v260 += 56;
      v261 -= 56;
    }
    while (v261);
    (*(void (**)(uint64_t *, uint64_t))(*v407 + 40))(v407, v409);
  }
  if (v282)
  {
    v262 = 0;
    do
    {
      v263 = (char *)v284 + v262;
      re::ObjectHelper::destroy<re::KeyValuePair<unsigned short,re::LightContextBuilder::LightArrays>>((uint64_t)v284 + v262 + 120, (uint64_t)v284 + 352 * *(_QWORD *)((char *)v284 + v262 + 104) + v262 + 120);
      *((_QWORD *)v263 + 13) = 0;
      ++*((_DWORD *)v263 + 28);
      re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::deinit((uint64_t *)((char *)v284 + v262 + 2936));
      *((_QWORD *)v263 + 11) = 0;
      *((_DWORD *)v263 + 24) = 0;
      re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::deinit((uint64_t *)((char *)v284 + v262 + 2936));
      re::ObjectHelper::destroy<re::KeyValuePair<unsigned short,re::LightContextBuilder::LightArrays>>((uint64_t)v284 + v262 + 120, (uint64_t)v284 + 352 * *(_QWORD *)((char *)v284 + v262 + 104) + v262 + 120);
      *((_QWORD *)v263 + 13) = 0;
      ++*((_DWORD *)v263 + 28);
      v264 = *(_QWORD *)((char *)v284 + v262 + 64);
      if (v264)
      {
        if (*((_QWORD *)v263 + 9))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v264 + 40))(v264, *(_QWORD *)((char *)v284 + v262 + 80));
          *((_QWORD *)v263 + 9) = 0;
          *((_QWORD *)v263 + 10) = 0;
        }
        *((_QWORD *)v263 + 8) = 0;
      }
      v265 = *((_QWORD *)v263 + 5);
      if (v265)
      {
        if (*(_QWORD *)((char *)v284 + v262 + 48))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v265 + 40))(v265, *(_QWORD *)((char *)v284 + v262 + 56));
          *(_QWORD *)((char *)v284 + v262 + 48) = 0;
          *(_QWORD *)((char *)v284 + v262 + 56) = 0;
        }
        *((_QWORD *)v263 + 5) = 0;
      }
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)v284 + v262);
      v262 += 3040;
    }
    while (3040 * v282 != v262);
  }
  re::DataArray<re::TextureAtlasTile>::~DataArray(v331);
  result = re::DataArray<re::TextureAtlasTile>::~DataArray(v321);
LABEL_403:
  v266 = v341[0];
  if (v341[0])
  {
    v267 = v344;
    if (v344)
    {
      if (v342)
        bzero(v344, 8 * v342);
      return (_QWORD *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v266 + 40))(v266, v267);
    }
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 24 * v3 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 24 * v3 + 8) == a2)
        return v5 + 24 * v3 + 16;
    }
    return 0;
  }
  return v5 + 24 * v3 + 16;
}

BOOL re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + (v3 << 6) + 16) == a2)
    return 1;
  do
  {
    v3 = *(_DWORD *)(v5 + (v3 << 6) + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + (v3 << 6) + 16) != a2);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + (v10 << 6) + 16) == v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + (v10 << 6) + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

unint64_t *re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::add(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 112 * v5;
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 8) = 0;
  result = re::DynamicInlineArray<re::PlaneF,6ul>::move((unint64_t *)v11, a2);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::BucketArray<re::MeshSceneCollection,16ul>::add(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = re::BucketArray<re::MeshSceneCollection,16ul>::addUninitialized(a1);
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v6;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a1);
    }
  }
  return a1;
}

void re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 72;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (_WORD *)(v8 + 12), (_DWORD *)(v8 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 72;
    }
  }
}

void re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_WORD *)(*(_QWORD *)&v13[16] + v10 + 12), (uint64_t *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _WORD *a4, _DWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 12) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_DWORD *)(v14 + 16) = *a5;
  re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(v14 + 24, (uint64_t)(a5 + 2));
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _WORD *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned short,re::LightContexts::LightContextContents,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 12) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  v15 = *(_DWORD *)a5;
  *(_OWORD *)(v14 + 24) = 0u;
  v14 += 24;
  *(_DWORD *)(v14 - 8) = v15;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5 + 1);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, v4, v5);
    re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<unsigned long long,unsigned int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (_QWORD *)(v8 + 16), (_DWORD *)(v8 + 24));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::LightContext::~LightContext(re::LightContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  v3 = *((_QWORD *)this + 12);
  if (v3)
  {
    if (*((_QWORD *)this + 13))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 14));
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
    }
    *((_QWORD *)this + 12) = 0;
  }
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    if (*((_QWORD *)this + 10))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 11));
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = 0;
    }
    *((_QWORD *)this + 9) = 0;
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 8));
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    *(_QWORD *)this = 0;
  }
}

uint64_t re::BucketArray<re::LightContext,16ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  re::LightContext *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (re::LightContext *)re::BucketArray<re::LightContext,16ul>::operator[](a1, i);
      re::LightContext::~LightContext(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::DynamicArray<re::FilterView>::deinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 352 * v4;
        do
        {
          re::DynamicArray<re::MeshScene>::deinit((uint64_t)(v3 + 38));
          if (*v3)
          {
            if ((v3[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v3[2]);
            *(_OWORD *)v3 = 0u;
            *((_OWORD *)v3 + 1) = 0u;
          }
          v3 += 44;
          v5 -= 352;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::ShadowView>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 320 * v4;
        v6 = 0uLL;
        do
        {
          if (v3->n128_u64[0])
          {
            if ((v3->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v3->n128_u64[0] + 40))(v3->n128_u64[0], v3[1].n128_u64[0], v6);
              v6 = 0uLL;
            }
            *v3 = v6;
            v3[1] = v6;
          }
          v3 += 20;
          v5 -= 320;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
    }
  }
  return a1;
}

void re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (_QWORD *)(v8 + 16), (_QWORD *)(v8 + 24));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 24));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

_QWORD *re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)result[2];
      v5 = 24 * v2;
      do
      {
        re::FixedArray<re::PlanarReceiverInfo>::deinit(v4);
        v4 += 3;
        v5 -= 24;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::PlanarReceiverInfo>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 96 * v2;
      do
      {
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v4 + 48));
        re::DynamicArray<re::MeshScene>::deinit(v4);
        v4 += 96;
        v5 -= 96;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::DataArray<re::TextureAtlasTile>::~DataArray(_QWORD *a1)
{
  re::DataArray<re::TextureAtlasTile>::deinit((uint64_t)a1);
  if (*a1)
  {
    if (a1[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

_QWORD *re::FixedArray<re::RenderFrameContextBuilder::Result::PerSceneData>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  re::RenderFrameContextBuilder::Result::PerSceneData *v4;
  uint64_t v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (re::RenderFrameContextBuilder::Result::PerSceneData *)result[2];
      v5 = 1488 * v2;
      do
      {
        re::RenderFrameContextBuilder::Result::PerSceneData::~PerSceneData(v4);
        v4 = (re::RenderFrameContextBuilder::Result::PerSceneData *)(v6 + 1488);
        v5 -= 1488;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::RenderFrameContextBuilder::Result::PerSceneData::~PerSceneData(re::RenderFrameContextBuilder::Result::PerSceneData *this)
{
  re::StringID *v2;

  v2 = (re::RenderFrameContextBuilder::Result::PerSceneData *)((char *)this + 720);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1008);
  re::StringID::destroyString(v2);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 81);
  re::FixedArray<re::PlanarReceiverData::Bucket>::deinit((_QWORD *)this + 78);
  re::BucketArray<unsigned long,4ul>::deinit((uint64_t)this + 560);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 560);
  re::BucketArray<unsigned long,4ul>::deinit((uint64_t)this + 504);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 504);
  re::LightContext::~LightContext((re::RenderFrameContextBuilder::Result::PerSceneData *)((char *)this + 312));
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 33);
  re::BucketArray<re::LightContext,16ul>::deinit((uint64_t)this + 208);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 208);
  re::DynamicArray<re::FilterView>::deinit((uint64_t)this + 168);
  re::DynamicArray<re::ShadowView>::deinit((uint64_t)this + 128);
  re::BucketArray<re::MeshSceneCollection,16ul>::deinit((uint64_t)this + 40);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 40);
  *((_QWORD *)this + 1) = 0;
}

uint64_t re::BucketArray<re::MeshSceneCollection,16ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](a1, i);
      re::DynamicArray<re::MeshScene>::deinit(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::RenderFrameContextBuilder::Result::PerSceneData::PerSceneData(uint64_t a1, re::Allocator *a2)
{
  __int128 v9;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  re::BucketArray<re::MeshSceneCollection,16ul>::init(a1 + 40, (uint64_t)a2, 1uLL);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = a2;
  re::DynamicArray<re::ShadowView>::setCapacity((_QWORD *)(a1 + 128), 0);
  ++*(_DWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 168) = a2;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  re::DynamicArray<re::FilterView>::setCapacity((_QWORD *)(a1 + 168), 0);
  ++*(_DWORD *)(a1 + 192);
  re::LightContexts::LightContexts((re::LightContexts *)(a1 + 208), a2);
  re::PortalInfo::PortalInfo((re::PortalInfo *)(a1 + 504), a2);
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 624) = a2;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 684) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 648) = 0u;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1 + 648, (uint64_t)a2, 3);
  bzero((void *)(a1 + 696), 0x2F8uLL);
  *(_QWORD *)(a1 + 728) = &str_110;
  *(_BYTE *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_BYTE *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1060) = 0u;
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  *(_QWORD *)(a1 + 1120) = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 1128) = _D0;
  *(_DWORD *)(a1 + 1136) = 1065353216;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_DWORD *)(a1 + 1175) = 0;
  *(_QWORD *)(a1 + 1180) = 0xFFFFFFFF00000001;
  *(int32x4_t *)(a1 + 1200) = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v9 = 0x7F0000007FLL;
  *((_QWORD *)&v9 + 1) = 0x7F0000007FLL;
  *(_OWORD *)(a1 + 1216) = v9;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1392) = 0x10100010001;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_WORD *)(a1 + 1440) = 1;
  *(_BYTE *)(a1 + 1442) = 0;
  *(_BYTE *)(a1 + 1456) = 0;
  *(_QWORD *)(a1 + 1464) = 0;
  *(_BYTE *)(a1 + 1472) = 0;
  *(_QWORD *)(a1 + 1480) = 0;
  return a1;
}

uint64_t re::BucketArray<re::MeshSceneCollection,16ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::MeshSceneCollection,16ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::MeshSceneCollection,16ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 16 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 640, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::DynamicArray<re::ShadowView>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  int v34;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ShadowView>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x140uLL))
        {
          v2 = 320 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 320 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_26;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 320, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_26:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 320 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = v8 + v10;
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *(_QWORD *)v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v14 + 24) = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          *(_QWORD *)(v14 + 8) = v18;
          *(_QWORD *)(v14 + 16) = v17;
          v19 = *(_OWORD *)(v8 + v10 + 96);
          v20 = *(_OWORD *)(v8 + v10 + 112);
          v21 = *(_OWORD *)(v8 + v10 + 128);
          *(_QWORD *)((char *)v13 + 142) = *(_QWORD *)(v8 + v10 + 142);
          *((_OWORD *)v13 + 7) = v20;
          *((_OWORD *)v13 + 8) = v21;
          *((_OWORD *)v13 + 6) = v19;
          v22 = *(_OWORD *)(v8 + v10 + 32);
          v23 = *(_OWORD *)(v8 + v10 + 48);
          v24 = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v13 + 4) = *(_OWORD *)(v8 + v10 + 64);
          *((_OWORD *)v13 + 5) = v24;
          *((_OWORD *)v13 + 2) = v22;
          *((_OWORD *)v13 + 3) = v23;
          *((_BYTE *)v13 + 160) = *(_BYTE *)(v8 + v10 + 160);
          LODWORD(v16) = *(unsigned __int8 *)(v8 + v10 + 161);
          *((_BYTE *)v13 + 161) = v16;
          if ((_DWORD)v16)
            *((_BYTE *)v13 + 162) = *(_BYTE *)(v14 + 162);
          v25 = *(unsigned __int8 *)(v14 + 164);
          *((_BYTE *)v13 + 164) = v25;
          if (v25)
            LODWORD(v7[v10 / 8 + 21]) = *(_DWORD *)(v8 + v10 + 168);
          v26 = (_QWORD *)(v8 + v10);
          v27 = *(_OWORD *)(v8 + v10 + 176);
          v28 = *(_OWORD *)(v8 + v10 + 192);
          v29 = *(_OWORD *)(v8 + v10 + 224);
          *((_OWORD *)v13 + 13) = *(_OWORD *)(v8 + v10 + 208);
          *((_OWORD *)v13 + 14) = v29;
          *((_OWORD *)v13 + 11) = v27;
          *((_OWORD *)v13 + 12) = v28;
          v30 = *(_OWORD *)(v8 + v10 + 240);
          v31 = *(_OWORD *)(v8 + v10 + 256);
          v32 = *(_OWORD *)(v8 + v10 + 288);
          *((_OWORD *)v13 + 17) = *(_OWORD *)(v8 + v10 + 272);
          *((_OWORD *)v13 + 18) = v32;
          *((_OWORD *)v13 + 15) = v30;
          *((_OWORD *)v13 + 16) = v31;
          v33 = *(unsigned __int8 *)(v8 + v10 + 304);
          *((_BYTE *)v13 + 304) = v33;
          if (v33)
            BYTE1(v7[v10 / 8 + 38]) = *((_BYTE *)v26 + 305);
          v34 = *((_DWORD *)v26 + 77);
          *((_BYTE *)v13 + 312) = *((_BYTE *)v26 + 312);
          *((_DWORD *)v13 + 77) = v34;
          if (*v26)
          {
            if ((*(_BYTE *)(v14 + 8) & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v26 + 40))(*v26, *(_QWORD *)(v14 + 16));
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *(_OWORD *)(v14 + 16) = v12;
          }
          v10 += 320;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_26;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::FilterView>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::FilterView>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x160uLL))
        {
          v2 = 352 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 352 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 352, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 352 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          *(_OWORD *)v12 = 0u;
          *((_OWORD *)v12 + 1) = 0u;
          v12[3] = *(_QWORD *)(v8 + v10 + 24);
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          *(_QWORD *)v13 = 0;
          v15 = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 24) = 0;
          v17 = v7[v10 / 8 + 1];
          v16 = v7[v10 / 8 + 2];
          v12[1] = v14;
          v12[2] = v15;
          *(_QWORD *)(v13 + 8) = v17;
          *(_QWORD *)(v13 + 16) = v16;
          v18 = *(_OWORD *)(v8 + v10 + 96);
          v19 = *(_OWORD *)(v8 + v10 + 112);
          v20 = *(_OWORD *)(v8 + v10 + 128);
          *(_QWORD *)((char *)v12 + 142) = *(_QWORD *)(v8 + v10 + 142);
          *((_OWORD *)v12 + 7) = v19;
          *((_OWORD *)v12 + 8) = v20;
          *((_OWORD *)v12 + 6) = v18;
          v21 = *(_OWORD *)(v8 + v10 + 32);
          v22 = *(_OWORD *)(v8 + v10 + 48);
          v23 = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v12 + 4) = *(_OWORD *)(v8 + v10 + 64);
          *((_OWORD *)v12 + 5) = v23;
          *((_OWORD *)v12 + 2) = v21;
          *((_OWORD *)v12 + 3) = v22;
          *((_BYTE *)v12 + 160) = *(_BYTE *)(v8 + v10 + 160);
          LODWORD(v15) = *(unsigned __int8 *)(v8 + v10 + 161);
          *((_BYTE *)v12 + 161) = v15;
          if ((_DWORD)v15)
            *((_BYTE *)v12 + 162) = *(_BYTE *)(v13 + 162);
          v24 = *(unsigned __int8 *)(v13 + 164);
          *((_BYTE *)v12 + 164) = v24;
          if (v24)
            LODWORD(v7[v10 / 8 + 21]) = *(_DWORD *)(v8 + v10 + 168);
          v25 = v8 + v10;
          v26 = *(_OWORD *)(v8 + v10 + 176);
          v27 = *(_OWORD *)(v8 + v10 + 192);
          v28 = *(_OWORD *)(v8 + v10 + 224);
          *((_OWORD *)v12 + 13) = *(_OWORD *)(v8 + v10 + 208);
          *((_OWORD *)v12 + 14) = v28;
          *((_OWORD *)v12 + 11) = v26;
          *((_OWORD *)v12 + 12) = v27;
          v29 = *(_OWORD *)(v8 + v10 + 240);
          v30 = *(_OWORD *)(v8 + v10 + 256);
          v31 = *(_OWORD *)(v8 + v10 + 288);
          *((_OWORD *)v12 + 17) = *(_OWORD *)(v8 + v10 + 272);
          *((_OWORD *)v12 + 18) = v31;
          *((_OWORD *)v12 + 15) = v29;
          *((_OWORD *)v12 + 16) = v30;
          v12[42] = 0;
          v12[39] = 0;
          v12[40] = 0;
          v12[38] = 0;
          *((_DWORD *)v12 + 82) = 0;
          v32 = *(_QWORD *)(v8 + v10 + 312);
          v12[38] = *(_QWORD *)(v8 + v10 + 304);
          v12[39] = v32;
          *(_QWORD *)(v25 + 304) = 0;
          *(_QWORD *)(v25 + 312) = 0;
          v33 = v12[40];
          v12[40] = *(_QWORD *)(v8 + v10 + 320);
          *(_QWORD *)(v25 + 320) = v33;
          v34 = v12[42];
          v35 = *(_QWORD *)(v8 + v10 + 344);
          v12[42] = *(_QWORD *)(v8 + v10 + 336);
          *(_QWORD *)(v25 + 336) = v34;
          *(_DWORD *)(v25 + 328) = *(_DWORD *)(v8 + v10 + 328) + 1;
          ++*((_DWORD *)v12 + 82);
          v12[43] = v35;
          re::DynamicArray<re::MeshScene>::deinit(v8 + v10 + 304);
          if (*(_QWORD *)(v8 + v10))
          {
            if ((*(_BYTE *)(v13 + 8) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + v10) + 40))(*(_QWORD *)(v8 + v10), *(_QWORD *)(v13 + 16));
            *(_OWORD *)v13 = 0u;
            *(_OWORD *)(v13 + 16) = 0u;
          }
          v10 += 352;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

re::LightContexts *re::LightContexts::LightContexts(re::LightContexts *this, re::Allocator *a2)
{
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 4) = 1;
  *((_QWORD *)this + 3) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 0;
  re::BucketArray<re::LightContext,16ul>::init((uint64_t)this, (uint64_t)a2, 1uLL);
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)((char *)this + 92) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 13) = a2;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 16) = a2;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = a2;
  *((_OWORD *)this + 10) = 0u;
  *((_QWORD *)this + 22) = a2;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = a2;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = a2;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 264) = 0;
  *((_BYTE *)this + 288) = 0;
  *((_OWORD *)this + 17) = 0u;
  return this;
}

uint64_t *re::BucketArray<re::LightContext,16ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::LightContext,16ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::LightContext,16ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 16 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 2688, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::PortalInfo *re::PortalInfo::PortalInfo(re::PortalInfo *this, re::Allocator *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::init((uint64_t)this, (uint64_t)a2, 1uLL);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 1;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  re::BucketArray<re::DynamicArray<re::CameraMultiView> const*,4ul>::init((uint64_t)this + 56, (uint64_t)a2, 1uLL);
  *((_BYTE *)this + 112) = 0;
  return this;
}

uint64_t re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 32, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::DynamicArray<re::CameraMultiView> const*,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::DynamicArray<re::CameraMultiView> const*,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::DynamicArray<re::CameraMultiView> const*,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 32, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

double re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 352;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::ObjectHelper::destroy<re::KeyValuePair<unsigned short,re::LightContextBuilder::LightArrays>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit(v3 + 288);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3 + 288);
      re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit(v3 + 232);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3 + 232);
      re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit(v3 + 176);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3 + 176);
      re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit(v3 + 120);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3 + 120);
      re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit(v3 + 64);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3 + 64);
      re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit(v3 + 8);
      result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3 + 8);
      v3 += 352;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a1, i);
      re::DynamicArray<re::RectAreaLightInfo>::deinit(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](a1, i);
      v5 = v4[12];
      if (v5)
      {
        if (v4[13])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, v4[14]);
          v4[13] = 0;
          v4[14] = 0;
        }
        v4[12] = 0;
      }
      v6 = v4[9];
      if (v6)
      {
        if (v4[10])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, v4[11]);
          v4[10] = 0;
          v4[11] = 0;
        }
        v4[9] = 0;
      }
      v7 = v4[5];
      if (v7)
      {
        if (v4[6])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, v4[7]);
          v4[6] = 0;
          v4[7] = 0;
        }
        v4[5] = 0;
      }
      re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](a1, i);
      v5 = v4[12];
      if (v5)
      {
        if (v4[13])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, v4[14]);
          v4[13] = 0;
          v4[14] = 0;
        }
        v4[12] = 0;
      }
      v6 = v4[9];
      if (v6)
      {
        if (v4[10])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, v4[11]);
          v4[10] = 0;
          v4[11] = 0;
        }
        v4[9] = 0;
      }
      v7 = v4[5];
      if (v7)
      {
        if (v4[6])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, v4[7]);
          v4[6] = 0;
          v4[7] = 0;
        }
        v4[5] = 0;
      }
      re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](a1, i);
      v5 = v4[12];
      if (v5)
      {
        if (v4[13])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, v4[14]);
          v4[13] = 0;
          v4[14] = 0;
        }
        v4[12] = 0;
      }
      v6 = v4[9];
      if (v6)
      {
        if (v4[10])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, v4[11]);
          v4[10] = 0;
          v4[11] = 0;
        }
        v4[9] = 0;
      }
      v7 = v4[5];
      if (v7)
      {
        if (v4[6])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, v4[7]);
          v4[6] = 0;
          v4[7] = 0;
        }
        v4[5] = 0;
      }
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::SkinningModelBuilder::RawSkinnedMeshPartData,4ul>::operator[](a1, i);
      v5 = v4[8];
      if (v5)
      {
        if (v4[9])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, v4[10]);
          v4[9] = 0;
          v4[10] = 0;
        }
        v4[8] = 0;
      }
      v6 = v4[5];
      if (v6)
      {
        if (v4[6])
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, v4[7]);
          v4[6] = 0;
          v4[7] = 0;
        }
        v4[5] = 0;
      }
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a1, i);
      if (*v4)
      {
        if (v4[4])
          (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4);
        v4[4] = 0;
        v4[1] = 0;
        v4[2] = 0;
        *v4 = 0;
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_DWORD *re::HashTable<unsigned short,re::LightContextBuilder::LightArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,true>::EntryWithoutHash::free(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*result & 0x80000000) != 0)
  {
    v1 = (uint64_t)result;
    *result &= ~0x80000000;
    v2 = (uint64_t)(result + 58);
    v3 = (uint64_t)(result + 2);
    v4 = (uint64_t)(result + 72);
    re::BucketArray<re::LightContextBuilder::RectAreaLightBucket,4ul>::deinit((uint64_t)(result + 72));
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    re::BucketArray<re::LightContextBuilder::PointLightBucket,4ul>::deinit(v2);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
    re::BucketArray<re::LightContextBuilder::SpotLightBucket,4ul>::deinit(v1 + 176);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1 + 176);
    re::BucketArray<re::LightContextBuilder::RealWorldProxyLightBucket,4ul>::deinit(v1 + 120);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1 + 120);
    v1 += 64;
    re::BucketArray<re::LightContextBuilder::DirectionalLightBucket,4ul>::deinit(v1);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
    re::BucketArray<re::LightContextBuilder::AmbientLightBucket,4ul>::deinit(v3);
    return (_DWORD *)re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v3);
  }
  return result;
}

double re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::deinit(v6 + 24);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  uint64_t v27;
  _BYTE v28[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v8 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v28, v13, v12);
          v15 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v28[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = (_QWORD *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v21 - 1) & 0x80000000) != 0)
              {
                v22 = 0xBF58476D1CE4E5B9 * (*v21 ^ (*v21 >> 30));
                v23 = (0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31);
                re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v23 % *(unsigned int *)(a1 + 24), v23, v21, v21 + 1);
              }
              v21 += 3;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::WeakStringID,re::TextureBlockResolution,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12)
          v26 = 2 * v11;
        else
          v26 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 24 * v8);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  v27 = 24 * v8;
  *(_DWORD *)(v24 + v27) = v25 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v27) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
}

void std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0>,void ()(re::LightInfoArrays &)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0>,void ()(re::LightInfoArrays &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED82B98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0>,void ()(re::LightInfoArrays &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED82B98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0>,void ()(re::LightInfoArrays &)>::operator()(uint64_t a1, __int16 *a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = (uint64_t)(a2 + 104);
  v5 = (unsigned __int16)*a2;
  re::LightContextBuilder::addAmbientLights(*(_QWORD **)(a1 + 8), *a2, (uint64_t)(a2 + 4));
  re::LightContextBuilder::addDirectionalLights(*(_QWORD *)(a1 + 8), v5, (uint64_t)(a2 + 24));
  re::LightContextBuilder::addRealWorldProxyLights(*(_QWORD *)(a1 + 8), v5, (uint64_t)(a2 + 44));
  re::LightContextBuilder::addSpotLights(*(_QWORD *)(a1 + 8), v5, (uint64_t)(a2 + 64));
  re::LightContextBuilder::addPointLights(*(_QWORD *)(a1 + 8), v5, (uint64_t)(a2 + 84));
  return re::LightContextBuilder::addRectAreaLights(*(_QWORD *)(a1 + 8), v5, v4);
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0>,void ()(re::LightInfoArrays &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_0>,void ()(re::LightInfoArrays &)>::target_type()
{
}

uint64_t re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 3);
}

uint64_t re::BucketArray<re::DynamicArray<re::CameraMultiView> const*,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::DynamicArray<re::CameraMultiView> const*,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 3);
}

void std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1>,void ()(re::StencilPortal &)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1>,void ()(re::StencilPortal &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED82C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1>,void ()(re::StencilPortal &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED82C68;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1>,void ()(re::StencilPortal &)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t j;
  uint64_t v13;

  result = (uint64_t *)re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(*(_QWORD *)(a1 + 24), *a2 >> 1);
  if (result)
  {
    v4 = *result;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(v5 + 112);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 40);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v9 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v6, i);
          result = (uint64_t *)re::BucketArray<re::DynamicArray<re::CameraView> const*,4ul>::addUninitialized(v4 + 504);
          *result = v9;
        }
        v5 = *(_QWORD *)(a1 + 16);
      }
    }
    v10 = *(_QWORD *)(v5 + 120);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 40);
      if (v11)
      {
        for (j = 0; j != v11; ++j)
        {
          v13 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v10, j);
          result = (uint64_t *)re::BucketArray<re::DynamicArray<re::CameraMultiView> const*,4ul>::addUninitialized(v4 + 560);
          *result = v13;
        }
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1>,void ()(re::StencilPortal &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_1>,void ()(re::StencilPortal &)>::target_type()
{
}

uint64_t re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 112 * v4;
        v6 = *(_QWORD *)(a1 + 32);
        do
        {
          *(_QWORD *)v6 = 0;
          ++*(_DWORD *)(v6 + 8);
          v6 += 112;
        }
        while (v6 != v5);
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + (v9 << 6) + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  v14 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)a5;
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v15 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v15;
  v16 = *(_QWORD *)(v13 + 56);
  *(_QWORD *)(v13 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v16;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v13 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0)
            re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 16), v11, v11 + 8);
          v11 += 64;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

_QWORD *re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DynamicInlineArray<re::PlaneF,6ul>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 112 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          re::DynamicInlineArray<re::PlaneF,6ul>::move(v11, (unint64_t *)v8);
          *(_QWORD *)v8 = 0;
          ++*(_DWORD *)(v8 + 8);
          v8 += 112;
          v11 += 14;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2>,void ()(re::ProjectiveShadowBuilder::Input::PerSceneData &)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2>,void ()(re::ProjectiveShadowBuilder::Input::PerSceneData &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED82CF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2>,void ()(re::ProjectiveShadowBuilder::Input::PerSceneData &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED82CF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2>,void ()(re::ProjectiveShadowBuilder::Input::PerSceneData &)>::operator()(uint64_t a1, uint64_t a2)
{
  return re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::add(*(_QWORD *)(a1 + 8), a2);
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2>,void ()(re::ProjectiveShadowBuilder::Input::PerSceneData &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_2>,void ()(re::ProjectiveShadowBuilder::Input::PerSceneData &)>::target_type()
{
}

uint64_t re::RenderGraphDataStoreWrapper<re::OpenSkyData>::~RenderGraphDataStoreWrapper(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED82DA0;
  v3 = (_QWORD *)(a1 + 144);
  v2 = *(_QWORD *)(a1 + 144);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 176))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 176) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 168);
  }
  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 136))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    ++*(_DWORD *)(a1 + 128);
  }
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::OpenSkyData>::~RenderGraphDataStoreWrapper(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24ED82DA0;
  v3 = (_QWORD *)(a1 + 144);
  v2 = *(_QWORD *)(a1 + 144);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 176))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 176) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 168);
  }
  v4 = *(_QWORD *)(a1 + 104);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 136))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    ++*(_DWORD *)(a1 + 128);
  }
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3>,void ()(re::MeshScene &)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3>,void ()(re::MeshScene &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED82DC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3>,void ()(re::MeshScene &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED82DC8;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3>,void ()(re::MeshScene &)>::operator()(uint64_t a1, __int128 *a2)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 8);
  if (*result)
    return re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)result, a2);
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3>,void ()(re::MeshScene &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_3>,void ()(re::MeshScene &)>::target_type()
{
}

uint64_t re::BucketArray<re::MeshSceneCollection,16ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 16 * v3)
  {
    re::BucketArray<re::MeshSceneCollection,16ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 16) >> 4);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 4));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 40 * (v2 & 0xF);
}

void std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4>,void ()(re::RayTracedShadowReceiverCollection &)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4>,void ()(re::RayTracedShadowReceiverCollection &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED82E58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4>,void ()(re::RayTracedShadowReceiverCollection &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED82E58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4>,void ()(re::RayTracedShadowReceiverCollection &)>::operator()(uint64_t a1, uint64_t a2)
{
  return re::BucketArray<re::MeshSceneCollection,16ul>::add(*(_QWORD *)(a1 + 8), a2);
}

uint64_t std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4>,void ()(re::RayTracedShadowReceiverCollection &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4,std::allocator<re::RenderFrameContextBuilder::build(re::RenderFrame &,re::RenderFrameContextBuilder::MutableState &)::$_4>,void ()(re::RayTracedShadowReceiverCollection &)>::target_type()
{
}

void re::RenderGraphMotionBlurNode::configure(re::RenderGraphMotionBlurNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  *((_QWORD *)this + 58) = re::AssetHandle::asset<re::MaterialAsset>((re::RenderGraphMotionBlurNode *)((char *)this + 504));
  *((_QWORD *)this + 59) = re::AssetHandle::asset<re::MaterialAsset>((re::RenderGraphMotionBlurNode *)((char *)this + 528));
  *((_QWORD *)this + 60) = re::AssetHandle::asset<re::MaterialAsset>((re::RenderGraphMotionBlurNode *)((char *)this + 552));
  *((_QWORD *)this + 57) = re::AssetHandle::asset<re::MaterialAsset>((re::RenderGraphMotionBlurNode *)((char *)this + 576));
  re::RenderGraphFullscreenNode::configure(this, a2, a3, a4);
}

void re::RenderGraphMotionBlurNode::execute(re::RenderGraphMotionBlurNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t *v6;
  float32x2_t v7;
  double v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  re::BufferTable *v18;
  re::BufferTable *v19;
  uint64_t v20;
  simd_float4 v21;
  simd_float4 v22;
  simd_float4 v23;
  simd_float4 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[16];
  _OWORD v30[4];
  _OWORD v31[4];
  _OWORD v32[4];
  simd_float4x4 v33;
  simd_float4x4 v34;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v29, 5054, 0);
  v4 = re::RenderGraphDataStore::get<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
  if (!*(_QWORD *)(v4 + 272))
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  v6 = (float32x4_t *)v4;
  if (!*(_QWORD *)(v4 + 128))
  {
LABEL_17:
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  v27 = *(_OWORD *)(v4 + 304);
  v28 = *(_OWORD *)(v4 + 288);
  v25 = *(_OWORD *)(v4 + 320);
  v26 = *(_OWORD *)(v4 + 336);
  *(float32x2_t *)&v8 = re::Projection::computeMatrix4x4F((re::Projection *)(v4 + 144), (uint64_t)v31);
  if (!v6[3].i64[0])
  {
LABEL_18:
    re::internal::assertLog((re::internal *)6, *(_QWORD *)&v7, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, 0, 0);
    _os_crash();
    __break(1u);
    return;
  }
  re::RenderCamera::computeInverseTransform(v6 + 4, (uint64_t)v30);
  v9 = 0;
  v10 = (float32x4_t)v31[0];
  v11 = (float32x4_t)v31[1];
  v12 = (float32x4_t)v31[2];
  v13 = (float32x4_t)v31[3];
  v32[0] = v30[0];
  v32[1] = v30[1];
  v32[2] = v30[2];
  v32[3] = v30[3];
  do
  {
    v33.columns[v9] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, COERCE_FLOAT(v32[v9])), v11, *(float32x2_t *)&v32[v9], 1), v12, (float32x4_t)v32[v9], 2), v13, (float32x4_t)v32[v9], 3);
    ++v9;
  }
  while (v9 != 4);
  v34 = __invert_f4(v33);
  v23 = v34.columns[1];
  v24 = v34.columns[0];
  v21 = v34.columns[3];
  v22 = v34.columns[2];
  v14 = *((float *)this + 122) * (float)*((unsigned int *)this + 123);
  re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x90uLL, 0x10uLL, (uint64_t)&v33);
  v15 = (void *)v33.columns[1].i64[0];
  v20 = v33.columns[0].i64[1];
  v16 = v33.columns[0].i64[0] + v33.columns[0].u32[2];
  *(simd_float4 *)v16 = v24;
  *(simd_float4 *)(v16 + 16) = v23;
  *(simd_float4 *)(v16 + 32) = v22;
  *(simd_float4 *)(v16 + 48) = v21;
  *(_OWORD *)(v16 + 64) = v28;
  *(_OWORD *)(v16 + 80) = v27;
  *(_OWORD *)(v16 + 96) = v25;
  *(_OWORD *)(v16 + 112) = v26;
  *(float *)(v16 + 128) = v14;
  v33.columns[0].i64[0] = (uint64_t)v15;
  v33.columns[0].i64[1] = v20;
  if (*((_BYTE *)this + 496))
  {
    v17 = *((_QWORD *)this + 57);
  }
  else if (v14 >= 0.25)
  {
    if (v14 >= 0.6)
      v17 = *((_QWORD *)this + 60);
    else
      v17 = *((_QWORD *)this + 59);
  }
  else
  {
    v17 = *((_QWORD *)this + 58);
  }
  *((_QWORD *)this + 40) = v17;
  v18 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
  *(_QWORD *)&v32[0] = 0x64A435BF9C14DD23;
  re::BufferTable::setBuffer(v18, (const re::WeakStringID *)v32, (uint64_t)&v33);
  re::RenderGraphFullscreenNode::executeInternal(this, a2, (re::RenderGraphMotionBlurNode *)((char *)this + 264));
  v19 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
  *(_QWORD *)&v32[0] = 0x64A435BF9C14DD23;
  re::BufferTable::removeBuffer(v19, (const re::WeakStringID *)v32);
  if (v33.columns[0].i64[0])

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v29);
}

uint64_t *re::allocInfo_MotionBlurUserParameters(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_441);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_441))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F580, 0);
    *(uint64_t *)((char *)&qword_25411F590 + 6) = 0;
    qword_25411F590 = 0;
    qword_25411F5A0 = 0;
    qword_25411F5A8 = 0xFFFFFFFFLL;
    qword_25411F580 = (uint64_t)&off_24ED7DAA8;
    qword_25411F5B0 = (uint64_t)"MotionBlurUserParameters";
    dword_25411F5B8 = 0;
    xmmword_25411F5C0 = 0u;
    unk_25411F5D0 = 0u;
    xmmword_25411F5E0 = 0u;
    qword_25411F5F0 = 0;
    __cxa_guard_release(&_MergedGlobals_441);
  }
  return &qword_25411F580;
}

void re::initInfo_MotionBlurUserParameters(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xD00187F985DB45A4;
  v15[1] = "MotionBlurUserParameters";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F518);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F518);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_float((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "exposureTime";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25411F538 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint32_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "frameRate";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x400000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411F540 = v13;
      __cxa_guard_release(&qword_25411F518);
    }
  }
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411F538;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MotionBlurUserParameters>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MotionBlurUserParameters>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MotionBlurUserParameters>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MotionBlurUserParameters>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::internal::defaultConstruct<re::MotionBlurUserParameters>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0x3C3C888F86;
}

_QWORD *re::internal::defaultConstructV2<re::MotionBlurUserParameters>(_QWORD *result)
{
  *result = 0x3C3C888F86;
  return result;
}

uint64_t *re::allocInfo_RenderGraphMotionBlurNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F528);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F528))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F5F8, 0);
    *(uint64_t *)((char *)&qword_25411F608 + 6) = 0;
    qword_25411F608 = 0;
    qword_25411F618 = 0;
    qword_25411F620 = 0xFFFFFFFFLL;
    qword_25411F5F8 = (uint64_t)&off_24ED7DAA8;
    qword_25411F628 = (uint64_t)"RenderGraphMotionBlurNode";
    dword_25411F630 = 0;
    xmmword_25411F638 = 0u;
    unk_25411F648 = 0u;
    xmmword_25411F658 = 0u;
    qword_25411F668 = 0;
    __cxa_guard_release(&qword_25411F528);
  }
  return &qword_25411F5F8;
}

void re::initInfo_RenderGraphMotionBlurNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;

  v35[0] = 0x642F8AC82BD1C86ELL;
  v35[1] = "RenderGraphMotionBlurNode";
  re::StringID::destroyString((re::StringID *)v35);
  *((_OWORD *)this + 2) = v36;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F530);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F530);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphFullscreenNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphFullscreenNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F548 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = (uint64_t *)qword_25411F520;
      if (!qword_25411F520)
      {
        v11 = re::allocInfo_MotionBlurUserParameters((re *)v9);
        qword_25411F520 = (uint64_t)v11;
        re::initInfo_MotionBlurUserParameters((re *)v11, v12);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "motionBlurUserParameters";
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1E800000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25411F550 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "debugPassthrough";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x1F000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25411F558 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_AssetHandle((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "motionBlurLowSampleCountMaterial";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x1F800000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25411F560 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_AssetHandle((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "motionBlurMediumSampleCountMaterial";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x21000000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_25411F568 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_AssetHandle((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "motionBlurHighSampleCountMaterial";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x22800000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_25411F570 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_AssetHandle((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "debugPassthroughMaterial";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x24000000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_25411F578 = v33;
      __cxa_guard_release(&qword_25411F530);
    }
  }
  *((_QWORD *)this + 2) = 0x25800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_25411F548;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphMotionBlurNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphMotionBlurNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphMotionBlurNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphMotionBlurNode>;
  re::IntrospectionRegistry::add(this, v3);
  v34 = v36;
}

double re::internal::defaultConstruct<re::RenderGraphMotionBlurNode>(int a1, int a2, re::RenderGraphFullscreenNode *this)
{
  re::RenderGraphFullscreenNode *v3;
  double result;

  *((_QWORD *)this + 56) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v3 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(this);
  *(_QWORD *)v3 = &off_24ED82EE8;
  result = 0.0;
  *(_OWORD *)((char *)v3 + 456) = 0u;
  *(_OWORD *)((char *)v3 + 472) = 0u;
  *((_QWORD *)v3 + 61) = 0x3C3C888F86;
  *(_OWORD *)((char *)v3 + 504) = 0u;
  *(_OWORD *)((char *)v3 + 520) = 0u;
  *(_OWORD *)((char *)v3 + 536) = 0u;
  *(_OWORD *)((char *)v3 + 552) = 0u;
  *(_OWORD *)((char *)v3 + 568) = 0u;
  *(_OWORD *)((char *)v3 + 584) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphMotionBlurNode>(int a1, int a2, re::RenderGraphMotionBlurNode *this)
{
  re::RenderGraphMotionBlurNode::~RenderGraphMotionBlurNode(this);
}

double re::internal::defaultConstructV2<re::RenderGraphMotionBlurNode>(uint64_t a1)
{
  re::RenderGraphFullscreenNode *v1;
  double result;

  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v1 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)a1);
  *(_QWORD *)v1 = &off_24ED82EE8;
  result = 0.0;
  *(_OWORD *)((char *)v1 + 456) = 0u;
  *(_OWORD *)((char *)v1 + 472) = 0u;
  *((_QWORD *)v1 + 61) = 0x3C3C888F86;
  *(_OWORD *)((char *)v1 + 504) = 0u;
  *(_OWORD *)((char *)v1 + 520) = 0u;
  *(_OWORD *)((char *)v1 + 536) = 0u;
  *(_OWORD *)((char *)v1 + 552) = 0u;
  *(_OWORD *)((char *)v1 + 568) = 0u;
  *(_OWORD *)((char *)v1 + 584) = 0u;
  return result;
}

uint64_t re::introspect_RenderGraphMotionBlurNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphMotionBlurNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphMotionBlurNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphMotionBlurNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphMotionBlurNode>, this);
}

void re::RenderGraphMotionBlurNode::~RenderGraphMotionBlurNode(re::RenderGraphMotionBlurNode *this)
{
  re::RenderGraphMotionBlurNode::~RenderGraphMotionBlurNode(this);
  JUMPOUT(0x2276933B8);
}

{
  re::AssetHandle::~AssetHandle((re::RenderGraphMotionBlurNode *)((char *)this + 576));
  re::AssetHandle::~AssetHandle((re::RenderGraphMotionBlurNode *)((char *)this + 552));
  re::AssetHandle::~AssetHandle((re::RenderGraphMotionBlurNode *)((char *)this + 528));
  re::AssetHandle::~AssetHandle((re::RenderGraphMotionBlurNode *)((char *)this + 504));
  re::RenderGraphFullscreenNode::~RenderGraphFullscreenNode(this);
}

uint64_t re::RenderGraphVRRUnwarpNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  _QWORD v13[4];
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;

  v10[0] = 0;
  v16 = 0;
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 41, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v14);
  result = v13[0];
  if (v13[0])
  {
    if ((v13[1] & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13[0] + 40))();
    memset(v13, 0, sizeof(v13));
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

void re::RenderGraphVRRUnwarpNode::setup(re::RenderGraphVRRUnwarpNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int16 v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 256, (uint64_t)&v6);
  *(_DWORD *)((char *)&v6 + 3) = 0;
  LODWORD(v6) = 0;
  v7 = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 288, (uint64_t)&v6);
  v6 = 0x500000000;
  v8 = xmmword_2260E5D70;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 272, (uint64_t)&v6);
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphVRRUnwarpNode::execute(re::RenderGraphVRRUnwarpNode *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  id *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *((_QWORD *)a2 + 146);
  v5 = (unint64_t)"N2re13VRRUnwarpDataE";
  if (((unint64_t)"N2re13VRRUnwarpDataE" & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)((unint64_t)"N2re13VRRUnwarpDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  v32 = (id)((*(_QWORD *)(*((_QWORD *)a2 + 5) + 48) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5);
  v9 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v4 + 64, (uint64_t *)&v32);
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      if (v11)
        v12 = *(_BYTE *)(v11 + 65) != 0;
      else
        v12 = 0;
      v13 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)a2 + 1) + 104));
      re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)a2, v13, *((re::RenderGraphNodeBase **)a2 + 5), 0, &v28);
      objc_msgSend(v28, "setComputePipelineState:", *((_QWORD *)this + 41));
      re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 256, 0, 0, &v27);
      re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 272, 0, 0, &v26);
      v25 = v27;
      v24 = v26;
      if (!v12)
      {
        re::makeView2DTo2DArray(&v27, &v32);
        NS::SharedPtr<MTL::Texture>::operator=(&v25, &v32);
        if (v32)

        re::makeView2DTo2DArray(&v26, &v32);
        NS::SharedPtr<MTL::Texture>::operator=(&v24, &v32);
        if (v32)

      }
      v14 = re::RenderGraphContext::metalBuffer((uint64_t)a2, (uint64_t)this + 288);
      objc_msgSend(v28, "setTexture:atIndex:", v25, 0);
      objc_msgSend(v28, "setTexture:atIndex:", v24, 1);
      objc_msgSend(v28, "setBuffer:offset:atIndex:", *(_QWORD *)v14, *(unsigned int *)(v14 + 8), 0);
      v15 = objc_msgSend(v26, sel_width);
      v16 = objc_msgSend(v26, sel_height);
      v17 = objc_msgSend(*((id *)this + 41), sel_threadExecutionWidth);
      v18 = objc_msgSend(*((id *)this + 41), sel_maxTotalThreadsPerThreadgroup);
      v19 = *((_QWORD *)a2 + 1);
      v20 = v18 / v17;
      v23 = v28;
      re::RenderManager::sampleComputeEncoderMTLCounterBegin(v19, &v23, 1u);

      objc_msgSend(v28, "setBytes:length:atIndex:", v10 + 8, 2, 1);
      v32 = (id)v15;
      v33 = v16;
      v34 = 1;
      v29 = v17;
      v30 = v20;
      v31 = 1;
      objc_msgSend(v28, "dispatchThreads:threadsPerThreadgroup:", &v32, &v29);
      if (v12)
      {
        objc_msgSend(v28, "setBytes:length:atIndex:", v10 + 10, 2, 1);
        v32 = (id)v15;
        v33 = v16;
        v34 = 1;
        v29 = v17;
        v30 = v20;
        v31 = 1;
        objc_msgSend(v28, "dispatchThreads:threadsPerThreadgroup:", &v32, &v29);
      }
      v21 = *((_QWORD *)a2 + 1);
      v22 = v28;
      re::RenderManager::sampleComputeEncoderMTLCounterEnd(v21, &v22, 1u);

      if (v24)
      if (v25)

      if (v26)
      if (v27)

    }
  }
}

uint64_t *re::allocInfo_RenderGraphVRRUnwarpNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_442);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_442))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F6A0, 0);
    *(uint64_t *)((char *)&qword_25411F6B0 + 6) = 0;
    qword_25411F6B0 = 0;
    qword_25411F6C0 = 0;
    qword_25411F6C8 = 0xFFFFFFFFLL;
    qword_25411F6A0 = (uint64_t)&off_24ED7DAA8;
    qword_25411F6D0 = (uint64_t)"RenderGraphVRRUnwarpNode";
    dword_25411F6D8 = 0;
    xmmword_25411F6E0 = 0u;
    unk_25411F6F0 = 0u;
    xmmword_25411F700 = 0u;
    qword_25411F710 = 0;
    __cxa_guard_release(&_MergedGlobals_442);
  }
  return &qword_25411F6A0;
}

void re::initInfo_RenderGraphVRRUnwarpNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0x602B7219C45EA382;
  v22[1] = "RenderGraphVRRUnwarpNode";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F678);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F678);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F680 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_RenderGraphTargetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "unwarpedColorHandle";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x11000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F688 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_RenderGraphTargetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "warpedColorHandle";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x10000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411F690 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_AssetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "library";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x13000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411F698 = v20;
      __cxa_guard_release(&qword_25411F678);
    }
  }
  *((_QWORD *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411F680;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphVRRUnwarpNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphVRRUnwarpNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphVRRUnwarpNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphVRRUnwarpNode>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

double re::internal::defaultConstruct<re::RenderGraphVRRUnwarpNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *v3;
  double result;

  v3 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v3 = &off_24ED82F90;
  *((_QWORD *)v3 + 32) = 0;
  *((_QWORD *)v3 + 33) = -1;
  *((_QWORD *)v3 + 34) = 0;
  *((_QWORD *)v3 + 35) = -1;
  *((_QWORD *)v3 + 36) = 0;
  *((_QWORD *)v3 + 37) = -1;
  *((_BYTE *)v3 + 67) = 0;
  result = 0.0;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphVRRUnwarpNode>(int a1, int a2, re::RenderGraphVRRUnwarpNode *this)
{
  re::RenderGraphVRRUnwarpNode::~RenderGraphVRRUnwarpNode(this);
}

double re::internal::defaultConstructV2<re::RenderGraphVRRUnwarpNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *v1;
  double result;

  v1 = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)v1 = &off_24ED82F90;
  *((_QWORD *)v1 + 32) = 0;
  *((_QWORD *)v1 + 33) = -1;
  *((_QWORD *)v1 + 34) = 0;
  *((_QWORD *)v1 + 35) = -1;
  *((_QWORD *)v1 + 36) = 0;
  *((_QWORD *)v1 + 37) = -1;
  *((_BYTE *)v1 + 67) = 0;
  result = 0.0;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  return result;
}

uint64_t re::introspect_RenderGraphVRRUnwarpNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphVRRUnwarpNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphVRRUnwarpNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphVRRUnwarpNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphVRRUnwarpNode>, this);
}

void re::RenderGraphVRRUnwarpNode::~RenderGraphVRRUnwarpNode(re::RenderGraphVRRUnwarpNode *this)
{
  re::RenderGraphVRRUnwarpNode::~RenderGraphVRRUnwarpNode(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 41);
  if (v2)
  {

    *((_QWORD *)this + 41) = 0;
  }
  re::AssetHandle::~AssetHandle((re::RenderGraphVRRUnwarpNode *)((char *)this + 304));
  re::RenderGraphNode::~RenderGraphNode(this);
}

void re::SyncMechanism::resetWithNewEvent(id *this)
{
  void **v2;
  id v3;

  v2 = this + 2;
  v3 = objc_msgSend(*this, sel_newEvent);
  NS::SharedPtr<MTL::Texture>::operator=(v2, &v3);
  if (v3)

  this[4] = (id)1;
}

uint64_t re::SyncMechanism::sync(re::SyncMechanism *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  if (!*((_BYTE *)this + 24))
  {
    if ((v2 & 3) != 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!v2)
LABEL_3:
    re::SyncMechanism::resetWithNewEvent((id *)this);
LABEL_4:
  objc_msgSend(*((id *)this + 1), "encodeSignalEvent:value:", *((_QWORD *)this + 2), (*((_QWORD *)this + 4))++);
  result = objc_msgSend(*((id *)this + 1), "encodeWaitForEvent:value:", *((_QWORD *)this + 2));
  ++*((_QWORD *)this + 5);
  return result;
}

void re::RenderGraphVFXNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_BYTE *)a2 + 592) = 1;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphVFXNode::execute(re::RenderGraphVFXNode *this, re::RenderGraphContext *a2)
{
  re *isStatisticCollectionEnabled;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void (***TextureTableByName)(_QWORD *__return_ptr, _QWORD, id *);
  void (***v14)(_QWORD *__return_ptr, _QWORD, id *);
  _QWORD *v15;
  unsigned __int8 v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  id v32;
  re *v33;
  uint64_t v34;
  re **v35;
  void *v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  id v43;
  id v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  uint64_t *v47;
  uint64_t *v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t *v54;
  uint64_t v55;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  _OWORD v63[4];
  _BYTE v64[16];
  id v65[4];
  __int128 v66;
  __int128 v67;
  id v68;
  uint64_t v69;
  _OWORD *v70;
  _QWORD v71[3];
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(this);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v4 = re::profilerThreadContext(isStatisticCollectionEnabled);
    if (*(_QWORD *)(v4 + 152))
      v58 = mach_absolute_time();
  }
  else
  {
    v4 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v64, 5085, 0);
  *((_BYTE *)a2 + 1512) = 3;
  v5 = *((_QWORD *)a2 + 146);
  v6 = (unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE" & 0x8000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v8 = 5381;
    do
    {
      v6 = v8;
      v9 = *v7++;
      v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  v10 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 80);
  v65[0] = (id)((*(_QWORD *)(*((_QWORD *)a2 + 5) + 48) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6);
  v11 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v5 + 16, (uint64_t *)v65);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      TextureTableByName = (void (***)(_QWORD *__return_ptr, _QWORD, id *))re::MaterialManager::findTextureTableByName(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), "VFXTextureTable");
      v59 = v4;
      if (TextureTableByName)
      {
        v14 = TextureTableByName;
        v65[0] = (id)0xC10C601B47401E3;
        (**TextureTableByName)(v71, TextureTableByName, v65);
        ((void (**)(id *__return_ptr, _QWORD, id *))*v14)[3](v65, v14, (id *)BYTE2(v71[0]));
        v15 = (_QWORD *)(*(_QWORD *)a2 + 368);
        *(_QWORD *)&v63[0] = 0x6C456FCA259980DELL;
        re::DynamicTextureTableAdd(v15, v63, v65);
        if (v65[0])

      }
      else
      {
        do
          v16 = __ldaxr(_MergedGlobals_443);
        while (__stlxr(1u, _MergedGlobals_443));
        if ((v16 & 1) == 0)
        {
          v17 = *re::graphicsLogObjects(0);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v65[0]) = 0;
            _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Cannot retrieve VFX texture table, VFX couldn't be rendered", (uint8_t *)v65, 2u);
          }
        }
      }
      v18 = *(_QWORD *)(v12 + 8);
      v60 = *(_OWORD *)(v18 + 48);
      v61 = *(_OWORD *)(v18 + 64);
      memset(v63, 0, sizeof(v63));
      re::Projection::computeMatrix4x4F((re::Projection *)(v18 + 80), (uint64_t)v63);
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        v20 = *(uint64_t **)(v18 + 32);
        v21 = &v20[v19];
        do
        {
          v22 = *v20;
          if (*(_BYTE *)(*v20 + 794))
            v23 = 1;
          else
            v23 = *(float *)(*v20 + 772) == -1.0;
          if (!v23)
          {
            v24 = objc_retainAutorelease(*(id *)(v22 + 664));
            v25 = objc_msgSend(v24, "uuid");
            *(_BYTE *)(v10 + 18) = 1;
            v26 = *(_QWORD *)(v10 + 112);
            v27 = *(_QWORD *)(v10 + 96);
            if (v27)
            {
              v28 = 8 * v27;
              v29 = *(_QWORD **)(v10 + 112);
              while (*v29 != v25)
              {
                ++v29;
                v28 -= 8;
                if (!v28)
                {
                  v29 = (_QWORD *)(v26 + 8 * v27);
                  break;
                }
              }
            }
            else
            {
              v29 = *(_QWORD **)(v10 + 112);
            }
            if (v27 != ((uint64_t)v29 - v26) >> 3)
            {
              objc_msgSend(v24, "scene");
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v30, "restart");

            }
            objc_msgSend(v24, "scene", v58);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v65[0] = (id)MEMORY[0x24BDAC760];
            v65[1] = (id)3221225472;
            v65[2] = ___ZN2re12_GLOBAL__N_116simulateVFXSceneERNS_18RenderGraphContextERKNS_8VFXSceneERNS_10VFXManagerEDv4_fDv3_fRK13simd_float4x4b_block_invoke;
            v65[3] = &unk_24ED83118;
            v32 = v24;
            v68 = v32;
            v69 = v22;
            v66 = v61;
            v67 = v60;
            v70 = v63;
            objc_msgSend(v31, "performTransaction:", v65);

            re::globalAllocators(v33);
            v34 = *(_QWORD *)(*(_QWORD *)a2 + 24);
            v35 = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 32))(v34, 8, 8);
            objc_msgSend(v32, "recycleBuffersGetCompletion");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            v37 = (re *)_Block_copy(v36);
            *v35 = v37;
            v72 = re::globalAllocators(v37)[2];
            v73 = v71;
            v71[0] = &off_24ED83148;
            (*(void (**)(uint64_t, re **, _QWORD *))(*(_QWORD *)v34 + 16))(v34, v35, v71);
            if (v73)
            {
              (*(void (**)(_QWORD *))*v73)(v73);
              if (v73 != v71)
                (*(void (**)(uint64_t))(*(_QWORD *)v72 + 40))(v72);
            }

          }
          ++v20;
        }
        while (v20 != v21);
        v38 = *(_QWORD *)(v18 + 16);
        if (v38)
        {
          v39 = 8 * v38;
          v40 = *(uint64_t **)(v18 + 32);
          do
          {
            v41 = *v40;
            v42 = *((unsigned __int8 *)this + 256);
            v43 = objc_retainAutorelease(*(id *)(*v40 + 664));
            *(_BYTE *)(v41 + 794) = 1;
            v44 = v43;
            *(_QWORD *)(v41 + 784) = objc_msgSend(v44, "drawCallCount");
            if (v42)
            {
              v45 = atomic_load((unsigned __int8 *)&qword_25411F738);
              if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_25411F738))
              {
                qword_25411F770 = 0;
                qword_25411F778 = 0;
                qword_25411F768 = 0;
                __cxa_atexit((void (*)(void *))re::FixedArray<re::MaterialParameterTable const*>::~FixedArray, &qword_25411F768, &dword_224FE9000);
                __cxa_guard_release(&qword_25411F738);
              }
              v46 = atomic_load((unsigned __int8 *)&qword_25411F740);
              if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_25411F740))
              {
                qword_25411F788 = 0;
                unk_25411F790 = 0;
                qword_25411F780 = 0;
                __cxa_atexit((void (*)(void *))re::FixedArray<re::SharedPtr<re::MaterialParameterTable>>::~FixedArray, &qword_25411F780, &dword_224FE9000);
                __cxa_guard_release(&qword_25411F740);
              }
              if (qword_25411F748 == -1)
              {
                v47 = &qword_25411F778;
                v48 = &qword_25411F770;
              }
              else
              {
                dispatch_once(&qword_25411F748, &__block_literal_global_41);
                v48 = &qword_25411F770;
                v47 = &qword_25411F778;
              }
            }
            else
            {
              v49 = atomic_load((unsigned __int8 *)&qword_25411F750);
              if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_25411F750))
              {
                qword_25411F7A0 = 0;
                qword_25411F7A8 = 0;
                qword_25411F798 = 0;
                __cxa_atexit((void (*)(void *))re::FixedArray<re::MaterialParameterTable const*>::~FixedArray, &qword_25411F798, &dword_224FE9000);
                __cxa_guard_release(&qword_25411F750);
              }
              v50 = atomic_load((unsigned __int8 *)&qword_25411F758);
              if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_25411F758))
              {
                qword_25411F7B8 = 0;
                unk_25411F7C0 = 0;
                qword_25411F7B0 = 0;
                __cxa_atexit((void (*)(void *))re::FixedArray<re::SharedPtr<re::MaterialParameterTable>>::~FixedArray, &qword_25411F7B0, &dword_224FE9000);
                __cxa_guard_release(&qword_25411F758);
              }
              if (qword_25411F760 == -1)
              {
                v47 = &qword_25411F7A8;
                v48 = &qword_25411F7A0;
              }
              else
              {
                dispatch_once(&qword_25411F760, &__block_literal_global_3_2);
                v48 = &qword_25411F7A0;
                v47 = &qword_25411F7A8;
              }
            }
            v51 = *v48;
            v52 = *v47;

            *(_QWORD *)(v41 + 184) = v52;
            *(_QWORD *)(v41 + 192) = v51;
            ++v40;
            v39 -= 8;
          }
          while (v39);
        }
      }
      *((_BYTE *)a2 + 1512) = 0;
      v4 = v59;
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v64);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 152))
    {
      v53 = mach_absolute_time();
      v54 = *(int64x2_t **)(v4 + 152);
      if (v54)
      {
        v55 = v54[604].u64[0];
        if (v55 >= v53 - v58)
          v55 = v53 - v58;
        v54[604].i64[0] = v55;
        v56 = v54[604].u64[1];
        if (v56 <= v53 - v58)
          v56 = v53 - v58;
        v54[604].i64[1] = v56;
        v57 = vdupq_n_s64(1uLL);
        v57.i64[0] = v53 - v58;
        v54[605] = vaddq_s64(v54[605], v57);
        *(_BYTE *)(v4 + 184) = 0;
      }
    }
  }
}

uint64_t *re::allocInfo_RenderGraphVFXNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F720);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F720))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F7C8, 0);
    *(uint64_t *)((char *)&qword_25411F7D8 + 6) = 0;
    qword_25411F7D8 = 0;
    qword_25411F7E8 = 0;
    qword_25411F7F0 = 0xFFFFFFFFLL;
    qword_25411F7C8 = (uint64_t)&off_24ED7DAA8;
    qword_25411F7F8 = (uint64_t)"RenderGraphVFXNode";
    dword_25411F800 = 0;
    unk_25411F808 = 0u;
    unk_25411F818 = 0u;
    xmmword_25411F828 = 0u;
    qword_25411F838 = 0;
    __cxa_guard_release(&qword_25411F720);
  }
  return &qword_25411F7C8;
}

void re::initInfo_RenderGraphVFXNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xA5BAE2AEEC3D8B24;
  v10[1] = "RenderGraphVFXNode";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F730);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F730);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F728 = v8;
      __cxa_guard_release(&qword_25411F730);
    }
  }
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25411F728;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphVFXNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphVFXNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphVFXNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphVFXNode>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphVFXNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED83038;
  *((_BYTE *)result + 256) = 0;
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphVFXNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphVFXNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED83038;
  *((_BYTE *)result + 256) = 0;
  return result;
}

uint64_t re::introspect_RenderGraphVFXNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphVFXNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphVFXNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphVFXNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphVFXNode>, this);
}

void re::RenderGraphVFXNode::~RenderGraphVFXNode(re::RenderGraphVFXNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::FixedArray<re::MaterialParameterTable const*>::~FixedArray(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
  {
    if (a1[1])
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *re::FixedArray<re::SharedPtr<re::MaterialParameterTable>>::~FixedArray(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*a1)
  {
    v2 = a1[1];
    if (v2)
    {
      v3 = a1[2];
      v4 = 8 * v2;
      do
      {
        if (*(_QWORD *)v3)
        {

          *(_QWORD *)v3 = 0;
        }
        v3 += 8;
        v4 -= 8;
      }
      while (v4);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
      a1[1] = 0;
      a1[2] = 0;
    }
    *a1 = 0;
  }
  return a1;
}

void ___ZN2re12_GLOBAL__N_122materialParameterTableEb_block_invoke()
{
}

void re::`anonymous namespace'::buildMaterialTables(uint64_t *a1, _QWORD *a2, re::MaterialParameterTable *a3)
{
  unint64_t v3;
  unint64_t v7;
  void *v8;
  re::MaterialParameterTable *v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  unint64_t v12;
  unint64_t v13;
  re *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  unint64_t v22;
  unint64_t v23;
  _anonymous_namespace_ *v24;
  re::MaterialParameterTable *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"Opaque", 6, 0, (unint64_t *)&v27);
  v8 = (void *)*((_QWORD *)&v27 + 1);
  v7 = v27;
  MurmurHash3_x64_128((uint64_t)"Transparent", 11, 0, (unint64_t *)&v27);
  v10 = *((_QWORD *)&v27 + 1);
  v9 = (re::MaterialParameterTable *)v27;
  v11 = (_anonymous_namespace_ *)MurmurHash3_x64_128((uint64_t)"VFXDepthWrite", 13, 0, (unint64_t *)&v27);
  v12 = *((_QWORD *)&v27 + 1);
  v13 = v27;
  a2[1] = 3;
  a2[2] = v14;
  if (v14)
  {
    LOBYTE(v26) = (_BYTE)a3;
    a3 = 0;
    v3 = ((unint64_t)v8 + 64 * v7 + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
    v7 = (v10 + ((_QWORD)v9 << 6) + ((unint64_t)v9 >> 2) - 0x61C8864680B583E9) ^ (unint64_t)v9;
    v12 = (v12 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583E9) ^ v13;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    do
    {
      v16 = re::globalAllocators(v14);
      v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 1128, 8);
      bzero(v8, 0x468uLL);
      re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)v8);
      v9 = (re::MaterialParameterTable *)a2[1];
      if (v9 <= a3)
      {
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_38;
      }
      v17 = a2[2];
      v18 = *(_QWORD *)(v17 + 8 * (_QWORD)a3);
      *(_QWORD *)(v17 + 8 * (_QWORD)a3) = v8;
      if (v18)

      a3 = (re::MaterialParameterTable *)((char *)a3 + 1);
    }
    while (a3 != (re::MaterialParameterTable *)3);
    v19 = a2[1];
    if (!v19)
      goto LABEL_39;
    if (v19 != 1)
    {
      v20 = a2[2];
      v9 = *(re::MaterialParameterTable **)v20;
      v8 = *(void **)(v20 + 8);
      a3 = (re::MaterialParameterTable *)&unk_255828000;
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        goto LABEL_41;
      goto LABEL_10;
    }
  }
  else
  {
LABEL_38:
    re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_39:
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  a2 = (_QWORD *)MEMORY[0x24BDACB70];
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_41:
  dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
LABEL_10:
  if (*((_QWORD *)a3 + 415) != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  if (*((_QWORD *)a3 + 415) != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  re::MaterialParameterTable::addPassTechniqueMapping(v9, v3, 0, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
  if (*((_QWORD *)a3 + 415) != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  re::MaterialParameterTable::addPassTechniqueMapping((re::MaterialParameterTable *)v8, v7, 0, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
  if (*((_QWORD *)a3 + 415) != -1)
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  re::MaterialParameterTable::addPassTechniqueMapping((re::MaterialParameterTable *)v8, v12, 0, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
  v22 = v7;
  v3 = v12;
  if ((v26 & 1) != 0)
  {
    v26 = v12;
    MurmurHash3_x64_128((uint64_t)"FadeDepthPrepass", 16, 0, (unint64_t *)&v27);
    v23 = (*((_QWORD *)&v27 + 1) - 0x61C8864680B583E9 + ((_QWORD)v27 << 6) + ((unint64_t)v27 >> 2)) ^ v27;
    MurmurHash3_x64_128((uint64_t)"FadeOpaque", 10, 0, (unint64_t *)&v27);
    v22 = (*((_QWORD *)&v27 + 1) - 0x61C8864680B583E9 + ((_QWORD)v27 << 6) + ((unint64_t)v27 >> 2)) ^ v27;
    MurmurHash3_x64_128((uint64_t)"VFXFadeOpaqueDepthWrite", 23, 0, (unint64_t *)&v27);
    v3 = (*((_QWORD *)&v27 + 1) - 0x61C8864680B583E9 + ((_QWORD)v27 << 6) + ((unint64_t)v27 >> 2)) ^ v27;
    if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
      dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
    re::MaterialParameterTable::addPassTechniqueMapping(v9, v23, 0, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
    v12 = v26;
  }
  if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
  re::MaterialParameterTable::addPassTechniqueMapping(v9, v22, 0, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
  if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
  re::MaterialParameterTable::addPassTechniqueMapping(v9, v3, 0, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
  if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
  re::MaterialParameterTable::addPassTechniqueMapping((re::MaterialParameterTable *)v8, v7, 0, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
  if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
    dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
  v24 = (_anonymous_namespace_ *)re::MaterialParameterTable::addPassTechniqueMapping((re::MaterialParameterTable *)v8, v12, 0, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
  v25 = 0;
  a3 = (re::MaterialParameterTable *)a2[1];
  v7 = a1[1];
  do
  {
    if (a3 == v25)
      goto LABEL_36;
    if ((re::MaterialParameterTable *)v7 == v25)
      goto LABEL_37;
    *(_QWORD *)(a1[2] + 8 * (_QWORD)v25) = *(_QWORD *)(a2[2] + 8 * (_QWORD)v25);
    v25 = (re::MaterialParameterTable *)((char *)v25 + 1);
  }
  while (v25 != (re::MaterialParameterTable *)3);
}

void ___ZN2re12_GLOBAL__N_122materialParameterTableEb_block_invoke_2()
{
}

uint64_t ___ZN2re12_GLOBAL__N_116simulateVFXSceneERNS_18RenderGraphContextERKNS_8VFXSceneERNS_10VFXManagerEDv4_fDv3_fRK13simd_float4x4b_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  double v5;
  double v11;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + 792);
  objc_msgSend(*(id *)(a1 + 64), "scene");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setIsPlaying:", v2);

  objc_msgSend(*(id *)(a1 + 64), "scene");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 768);
  objc_msgSend(v4, "setTimeScale:", v5);

  __asm { FMOV            V0.4S, #1.0 }
  objc_msgSend(*(id *)(a1 + 64), "setCameraEntityTransformProjection:::::::", *(double *)&_Q0, *(double *)(a1 + 32), *(double *)(a1 + 48), **(double **)(a1 + 80), *(double *)(*(_QWORD *)(a1 + 80) + 16), *(double *)(*(_QWORD *)(a1 + 80) + 32), *(double *)(*(_QWORD *)(a1 + 80) + 48));
  LODWORD(v11) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 776);
  objc_msgSend(*(id *)(a1 + 64), "setSceneScale:", v11);
  objc_msgSend(*(id *)(a1 + 64), "setSceneTransform:::", *(double *)(*(_QWORD *)(a1 + 72) + 720), *(double *)(*(_QWORD *)(a1 + 72) + 736), *(double *)(*(_QWORD *)(a1 + 72) + 752));
  objc_msgSend(*(id *)(a1 + 64), "setRootTransform:::", *(double *)(*(_QWORD *)(a1 + 72) + 672), *(double *)(*(_QWORD *)(a1 + 72) + 688), *(double *)(*(_QWORD *)(a1 + 72) + 704));
  return objc_msgSend(*(id *)(a1 + 64), "tickWithDeltaTime:", *(float *)(*(_QWORD *)(a1 + 72) + 772));
}

void _ZN2re8internal8CallableIZNS_12_GLOBAL__N_116simulateVFXSceneERNS_18RenderGraphContextERKNS_8VFXSceneERNS_10VFXManagerEDv4_fDv3_fRK13simd_float4x4bE3__0FvPvEJEED0Ev()
{
  JUMPOUT(0x2276933B8);
}

void _ZNK2re8internal8CallableIZNS_12_GLOBAL__N_116simulateVFXSceneERNS_18RenderGraphContextERKNS_8VFXSceneERNS_10VFXManagerEDv4_fDv3_fRK13simd_float4x4bE3__0FvPvEJEEclEOSG_(uint64_t a1, void (****a2)(void))
{
  void (***v2)(void);
  void (**v3)(void);

  v2 = *a2;
  v3 = **a2;
  if (v3)
  {
    v3[2]();
    v3 = *v2;
  }

}

_QWORD *_ZNK2re8internal8CallableIZNS_12_GLOBAL__N_116simulateVFXSceneERNS_18RenderGraphContextERKNS_8VFXSceneERNS_10VFXManagerEDv4_fDv3_fRK13simd_float4x4bE3__0FvPvEJEE9cloneIntoESG_(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED83148;
  return result;
}

_QWORD *_ZN2re8internal8CallableIZNS_12_GLOBAL__N_116simulateVFXSceneERNS_18RenderGraphContextERKNS_8VFXSceneERNS_10VFXManagerEDv4_fDv3_fRK13simd_float4x4bE3__0FvPvEJEE8moveIntoESG_(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED83148;
  return result;
}

uint64_t _ZNK2re8internal8CallableIZNS_12_GLOBAL__N_116simulateVFXSceneERNS_18RenderGraphContextERKNS_8VFXSceneERNS_10VFXManagerEDv4_fDv3_fRK13simd_float4x4bE3__0FvPvEJEE4sizeEv()
{
  return 16;
}

uint64_t re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 40 * (a2 & 3);
}

unint64_t re::ProfilerOverlayRenderGraphProvider::prepareFrame(re::ProfilerOverlayRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5[2];

  v5[0] = 0x25D31770DB1DF3E2;
  v5[1] = (unint64_t)"ProfilerOverlayRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

double re::ProfilerOverlayRenderGraphProvider::provide(re::ProfilerOverlayRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  re::RenderGraphProfilerOverlayNode *v11;
  double result;
  double v13[2];
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;
  char v25;
  uint64_t v26[4];
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v15 = 2;
  v16 = -1;
  v17 = -1;
  v18 = -1;
  v19 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v20 = _D0;
  v21 = xmmword_226135530;
  v22 = xmmword_226135540;
  v23 = -1;
  v24 = xmmword_2260FF4D0;
  v25 = 0;
  v14 = 3;
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v14, "Profiler Overlay Output", v13);
  v26[0] = 65290051;
  re::RenderFrame::addTargetOutput(a4, v26, v13, 0);
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "ProfilerOverlay", 0);
  v11 = re::RenderGraph::addNode<re::RenderGraphProfilerOverlayNode>(RenderGraph, "Profiler Overlay Render Node");
  *(double *)v26 = v13[0];
  *(double *)&v26[1] = v13[1];
  v26[2] = 0x100000000;
  v27 = xmmword_2260E5D70;
  v28 = 0;
  v29 = 0;
  *(_QWORD *)&result = re::DynamicArray<re::TargetWrite>::add((re::RenderGraphProfilerOverlayNode *)((char *)v11 + 216), (uint64_t)v26).n128_u64[0];
  return result;
}

__n128 re::RenderGraphProfilerOverlayNode::RenderGraphProfilerOverlayNode(re::RenderGraphProfilerOverlayNode *this, const char *a2)
{
  re::RenderGraphNode *v2;
  __n128 result;

  v2 = re::RenderGraphNode::RenderGraphNode(this, a2);
  *((_DWORD *)v2 + 64) = 1;
  *(_QWORD *)v2 = &off_24ED831A0;
  *(_OWORD *)((char *)v2 + 264) = 0u;
  *(_OWORD *)((char *)v2 + 280) = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  *((__n128 *)v2 + 19) = result;
  *((_OWORD *)v2 + 20) = xmmword_226195820;
  *((_QWORD *)v2 + 42) = 0x3F33333341A00000;
  *((_DWORD *)v2 + 86) = 1061997773;
  *((_OWORD *)v2 + 22) = xmmword_22611CBB0;
  *((_OWORD *)v2 + 23) = xmmword_226195830;
  *((__n128 *)v2 + 24) = result;
  *((_DWORD *)v2 + 100) = 1050253722;
  return result;
}

void re::RenderGraphProfilerOverlayNode::configure(re::RenderGraphProfilerOverlayNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re::DrawingManager *v8;

  if (*((_QWORD *)this + 34))
  {
    v8 = *(re::DrawingManager **)(*((_QWORD *)a4 + 1) + 104);
    if (v8)
    {
      if (re::DrawingManager::shouldRenderProfilerNode(v8))
        *((_QWORD *)this + 36) = re::AssetHandle::asset<re::MaterialAsset>((re::RenderGraphProfilerOverlayNode *)((char *)this + 264));
    }
  }
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

void re::RenderGraphProfilerOverlayNode::setup(re::RenderGraphProfilerOverlayNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  if (*((_QWORD *)this + 36))
  {
    if (!*((_QWORD *)this + 24))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::RenderGraphBuilder::read((uint64_t)a2, *((_QWORD *)this + 26), *((_QWORD *)this + 26) + 16);
  }
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProfilerOverlayNode::execute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,uint64_t a42,id a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,id a55,uint64_t a56,re::DynamicString *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a65;
  unint64_t a66;
  float a67;
  float a68;
  _OWORD *a69;
  unint64_t a70;
  int a72;
  uint64_t a73;
  uint64_t a74;
  _QWORD *a75;
  void *__p;
  re::StringID *a77;
  unint64_t a78;
  int a79;
  _OWORD *a80;
  unsigned __int8 a81;
  unsigned __int8 a82;
  __int128 a83;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  re::DrawingManager *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  _BOOL4 v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  re::MaterialParameterTableLayers *v95;
  int v96;
  int *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  unint64_t v104;
  uint64_t v105;
  int64x2_t v106;
  unint64_t v107;
  re *v108;
  const re::WeakStringID *v109;
  uint64_t result;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  re::DrawingManager *v125;
  float LayerContentsScale;
  float v127;
  float v128;
  float v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  char v135;
  _OWORD *v136;
  _OWORD *v137;
  __int128 v138;
  __int128 v139;
  _OWORD *v140;
  unint64_t v141;
  _OWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  const float *v153;
  float32x4_t v154;
  float32x4_t v155;
  int v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v175;
  double v176;
  double v177;
  float v178;
  float v179;
  float v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  __int128 v186;
  unint64_t v187;
  __int128 v188;
  unint64_t v189;
  __int128 v190;
  unint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  int32x2_t v195;
  double v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  unsigned int v202;
  __int128 v203;
  char *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  re::RenderManager *v210;
  uint64_t v211;
  id v212;
  unint64_t v213;
  _OWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  void *v222;
  float v223;
  float v224;
  uint64x2_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  re::StringID *v229;
  re::StringID *v230;
  re::TextManager *v231;
  __int128 v232;
  re::StringID *v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _anonymous_namespace_ *v238;
  _anonymous_namespace_ *v239;
  _anonymous_namespace_ *v240;
  _anonymous_namespace_ *v241;
  _anonymous_namespace_ *v242;
  _anonymous_namespace_ *v243;
  _anonymous_namespace_ *v244;
  _anonymous_namespace_ *v245;
  _anonymous_namespace_ *v246;
  _anonymous_namespace_ *v247;
  _anonymous_namespace_ *v248;
  uint64_t v249;
  unsigned __int8 v250;
  char v251;
  _OWORD *v252;
  _OWORD *v253;
  __int128 v254;
  __int128 v255;
  _OWORD *v256;
  _OWORD *v257;
  uint64_t v258;
  float v259;
  int v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  unint64_t v266;
  float v267;
  float v268;
  unsigned __int8 v269;
  uint64_t v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  _OWORD *v276;
  unint64_t v277;
  int v278;
  int v279;
  float v280;
  float v281;
  float v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 *v286;
  __int128 v287;
  __int128 v288;
  float v289;
  __int128 v290;
  __int128 v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  uint64_t v300;
  re::DebugRenderer *v301;
  unint64_t v302;
  _OWORD *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  os_unfair_lock_s *v328;
  _QWORD *v329;
  _anonymous_namespace_ *v330;
  _anonymous_namespace_ *v331;
  _anonymous_namespace_ *v332;
  _anonymous_namespace_ *v333;
  _anonymous_namespace_ *v334;
  _anonymous_namespace_ *v335;
  unint64_t v336;
  int v337;
  unint64_t v338;
  uint64_t v339;
  int v340;
  unsigned __int8 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _OWORD *v345;
  _OWORD *v346;
  __int128 v347;
  __int128 v348;
  _OWORD *v349;
  _OWORD *v350;
  uint64_t v351;
  _QWORD *v352;
  uint64_t v353;
  double v354;
  double v355;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  __int128 v360;
  unint64_t v361;
  unint64_t v362;
  double v363;
  int v364;
  uint64_t v365;
  unint64_t v366;
  _OWORD *v367;
  int v368;
  __int128 v369;
  int v370;
  float v371;
  float v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  re::DebugRenderer *v381;
  id v382;
  uint64_t v383;
  _OWORD *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  int32x2_t v393;
  uint64_t v394;
  unsigned int v395;
  uint64_t v396;
  double v397;
  double v398;
  int v399;
  uint64_t v400;
  float v402;
  float v403;
  __int128 v404;
  re::TextManager *v405;
  __int128 v406;
  _OWORD *v407;
  _OWORD *v408;
  __int128 v409;
  __int128 v410;
  _OWORD *v411;
  _OWORD *v412;
  uint64_t v413;
  int v414;
  int32x2_t v415;
  __int128 v416;
  unint64_t v417;
  unint64_t v418;
  char *v419;
  uint64_t v420;
  int v421;
  __int128 v422;
  char *v423;
  int v424;
  __int128 v425;
  __int128 v426;
  int v427;
  __int128 v428;
  __int128 v429;
  int v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  re::RenderManager *v434;
  uint64_t v435;
  re::DebugRenderer *v436;
  uint64_t v437;
  _OWORD *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t v461;
  int v462;
  unint64_t v463;
  int v464;
  uint64_t v465;
  int v466;
  float v467;
  int v468;
  unsigned __int8 v469;
  uint64_t v470;
  uint64_t v471;
  id v472;
  id v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  id v477;
  id v478;
  id v479;
  unint64_t v480;
  uint64_t v481;
  unsigned __int8 v482;
  uint64_t v483;
  id v484;
  id v485;
  id v486;
  float32x4_t v487;
  float v488;
  id v489;
  _QWORD *v490;
  unint64_t v491;
  float32x4_t v492;
  uint64_t v493;
  unsigned int v494;
  unsigned int v495;
  __int128 v496;
  __int128 v497;
  uint64_t v498;
  int v499;
  id v500;
  re::DynamicString *v501;
  _BOOL4 v502;
  _BOOL4 v503;
  uint64_t v504;
  uint64_t v505;
  float *v506;
  uint64_t v507;
  __int128 v508;
  __int128 v509;

  v77 = a2;
  v78 = a1;
  v79 = (unint64_t)&STACK[0xD60];
  v80 = (uint64_t)&STACK[0xAE0];
  v81 = (unint64_t)&a83;
  STACK[0xE58] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 288))
    goto LABEL_44;
  v82 = *(re::DrawingManager **)(*(_QWORD *)(a2 + 8) + 104);
  if (!v82 || !re::DrawingManager::shouldRenderProfilerNode(v82))
    goto LABEL_44;
  v83 = 0xA3521516DAFB1;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)&__p);
  v84 = *(_QWORD *)v77;
  STACK[0xAE0] = 0xA3521516DAFB1;
  if (!*(_QWORD *)(v78 + 192))
  {
LABEL_443:
    STACK[0xA70] = 0;
    *(_OWORD *)&STACK[0xB90] = 0u;
    *(_OWORD *)&STACK[0xBA0] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    v77 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    *(_QWORD *)(v79 + 4) = "operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    *(_DWORD *)(v79 + 14) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    *(_QWORD *)(v79 + 20) = 0;
    LOWORD(STACK[0xD7C]) = 2048;
    *(_QWORD *)(v79 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_444:
    re::internal::assertLog((re::internal *)6, v98, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_445;
  }
  v85 = (_QWORD *)(v84 + 368);
  re::RenderGraphContext::metalTexture(v77, *(_QWORD *)(v78 + 208), 0, 0, (id *)&STACK[0xD60]);
  re::makeView2DTo2DArray((id *)&STACK[0xD60], &STACK[0xB60]);
  re::DynamicTextureTableAdd(v85, &STACK[0xAE0], (id *)&STACK[0xB60]);
  if (STACK[0xB60])
  {

    STACK[0xB60] = 0;
  }
  if (STACK[0xD60])

  v76 = v78;
  v86 = *(_QWORD *)(*(_QWORD *)(v78 + 288) + 1664);
  v87 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
  v75 = v87;
  v88 = 1;
  if (v87)
  {
    v89 = *(_BYTE *)(v87 + 65) != 0;
    if (*(_BYTE *)(v87 + 65))
      v88 = 2;
    else
      v88 = 1;
  }
  else
  {
    v89 = 0;
  }
  v90 = *(_QWORD *)(v76 + 272);
  if (v90)
    v91 = *(_QWORD *)(v90 + 664);
  else
    v91 = 0;
  v92 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v90 ^ (v90 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v90 ^ (v90 >> 30))) >> 27));
  STACK[0xB60] = v91 ^ (v92 >> 31) ^ v92;
  v93 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v77 + 1568, (uint64_t *)&STACK[0xB60]);
  if (v93)
    v94 = *v93;
  else
    v94 = 0;
  re::RenderGraphContext::makeFullscreenDrawCall((_QWORD *)v77, v86, v94, 0, 0, 0, (int32x2_t *)&STACK[0xB60]);
  v95 = (re::MaterialParameterTableLayers *)STACK[0xBA0];
  if (v89)
    v83 = (uint64_t)"fullscreenarray";
  else
    v83 = (uint64_t)"fullscreen";
  if (v89)
    v96 = 15;
  else
    v96 = 10;
  MurmurHash3_x64_128(v83, v96, 0, &STACK[0xD60]);
  v97 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices(v95, (STACK[0xD68] + (STACK[0xD60] << 6) + (STACK[0xD60] >> 2) - 0x61C8864680B583E9) ^ STACK[0xD60]);
  if (!v98)
    goto LABEL_444;
  v99 = *v97;
  LODWORD(STACK[0xB8C]) = *v97;
  if (v99 == -1)
    goto LABEL_43;
  v100 = re::RenderGraphDataStore::tryGet<re::CameraData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
  STACK[0xA10] = 0;
  STACK[0xA00] = 0;
  a83 = 0uLL;
  LODWORD(STACK[0xA08]) = 0;
  STACK[0xB50] = 0;
  STACK[0xB38] = 0;
  STACK[0xB40] = 0;
  STACK[0xB30] = 0;
  LODWORD(STACK[0xB48]) = 0;
  if (v100)
  {
    v101 = v100;
    if (*(_QWORD *)(v100 + 128))
    {
      v79 = 0;
      v75 = 0;
      while (1)
      {
        re::Projection::computeMatrix4x4F((re::Projection *)(v101 + 144 + (v79 << 6)), (uint64_t)&STACK[0xD60]);
        *(_QWORD *)&v103 = re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&STACK[0xB30], (uint64_t)&STACK[0xD60]).n128_u64[0];
        v104 = *(_QWORD *)(v101 + 48);
        if (v104 <= v79)
          break;
        re::RenderCamera::computeInverseTransform((float32x4_t *)(v101 + 64 + 32 * v79), (uint64_t)&STACK[0xD60]);
        re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&a83, (uint64_t)&STACK[0xD60]);
        v75 = (v75 + 1);
        v79 = v75;
        if (*(_QWORD *)(v101 + 128) <= (unint64_t)v75)
          goto LABEL_33;
      }
      re::internal::assertLog((re::internal *)6, v102, v103, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v79, v104);
      _os_crash();
      __break(1u);
      goto LABEL_443;
    }
LABEL_33:
    v88 = *(_BYTE *)(v101 + 490);
    v79 = (unint64_t)&STACK[0xD60];
  }
  else
  {
    *(_OWORD *)&STACK[0xD60] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0xD70] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0xD80] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0xD90] = xmmword_2260E5D70;
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&STACK[0xB30], (uint64_t)&STACK[0xD60]);
    *(_OWORD *)&STACK[0xD60] = xmmword_2260E5F10;
    *(_OWORD *)&STACK[0xD70] = xmmword_2260E5F20;
    *(_OWORD *)&STACK[0xD80] = xmmword_2260E5F40;
    *(_OWORD *)&STACK[0xD90] = xmmword_2260E5D70;
    re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&a83, (uint64_t)&STACK[0xD60]);
    if (v89)
    {
      v88 = *(_BYTE *)(v75 + 64);
      *(_OWORD *)&STACK[0xD60] = xmmword_2260E5F10;
      *(_OWORD *)&STACK[0xD70] = xmmword_2260E5F20;
      *(_OWORD *)&STACK[0xD80] = xmmword_2260E5F40;
      *(_OWORD *)&STACK[0xD90] = xmmword_2260E5D70;
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&STACK[0xB30], (uint64_t)&STACK[0xD60]);
      *(_OWORD *)&STACK[0xD60] = xmmword_2260E5F10;
      *(_OWORD *)&STACK[0xD70] = xmmword_2260E5F20;
      *(_OWORD *)&STACK[0xD80] = xmmword_2260E5F40;
      *(_OWORD *)&STACK[0xD90] = xmmword_2260E5D70;
      re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)&a83, (uint64_t)&STACK[0xD60]);
    }
  }
  LODWORD(STACK[0xB84]) = v88;
  v75 = (unint64_t)&STACK[0xA38];
  re::DrawCallRef::DrawCallRef(&STACK[0xA38], (const re::DrawCall *)&STACK[0xB60]);
  v105 = 0;
  STACK[0xD60] = (unint64_t)&STACK[0xA38];
  v106 = vdupq_n_s64(1uLL);
  *(int64x2_t *)&STACK[0xD68] = v106;
  STACK[0xD78] = (unint64_t)&STACK[0xA40];
  *(int64x2_t *)&STACK[0xD80] = v106;
  STACK[0xD90] = (unint64_t)&STACK[0xA48];
  *(int64x2_t *)&STACK[0xD98] = v106;
  STACK[0xDA8] = (unint64_t)&STACK[0xA50];
  *(int64x2_t *)&STACK[0xDB0] = v106;
  STACK[0xDC0] = (unint64_t)&STACK[0xA58];
  *(int64x2_t *)&STACK[0xDC8] = v106;
  STACK[0xA70] = v83;
  STACK[0xA78] = (unint64_t)&STACK[0xD60];
  v107 = STACK[0xB50];
  STACK[0xA80] = STACK[0xA10];
  STACK[0xA88] = v107;
  STACK[0xA90] = 0;
  LOBYTE(STACK[0xA98]) = v88;
  LOWORD(STACK[0xA99]) = 2;
  LOWORD(STACK[0xA9C]) = 0;
  *(_OWORD *)&STACK[0xAAF] = 0u;
  *(_OWORD *)&STACK[0xABF] = 0u;
  LOBYTE(STACK[0xACF]) = 0;
  if (*(_BYTE *)(v77 + 1332))
    goto LABEL_451;
  while (1)
  {
    *(_QWORD *)(v81 + 224) = v105;
    LOBYTE(STACK[0xAD8]) = 0;
    re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)v77, (uint64_t *)&STACK[0xAE0]);
    re::RenderGraphContext::encodeDrawCalls(v77, &STACK[0xAE0], &STACK[0xA70]);
    v108 = (re *)(*(_QWORD *)v77 + 368);
    *(_QWORD *)(v81 + 240) = 0xA3521516DAFB1;
    re::DynamicTextureTableRemove(v108, (re::TextureTable *)&STACK[0xAE0], v109);
    if (STACK[0xB30] && STACK[0xB50])
      (*(void (**)(unint64_t))(*(_QWORD *)STACK[0xB30] + 40))(STACK[0xB30]);
    if ((_QWORD)a83 && *(_QWORD *)(v81 + 32))
      (*(void (**)(void))(*(_QWORD *)a83 + 40))();
LABEL_43:
    re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&__p);
    v78 = v76;
LABEL_44:
    result = *(_QWORD *)(*(_QWORD *)(v77 + 8) + 104);
    if (!result)
      return result;
    result = re::DrawingManager::shouldRenderProfilerNode((re::DrawingManager *)result);
    if (!(_DWORD)result)
      return result;
    v111 = *(_QWORD *)(*(_QWORD *)(v77 + 8) + 104);
    if (!v111 || !*(_QWORD *)(v111 + 1664))
      return result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)&STACK[0xA60]);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&STACK[0xA28], 5074, 0);
    v112 = *(_QWORD *)(v77 + 8);
    if (*(_QWORD *)(v112 + 8) < 2uLL)
      goto LABEL_156;
    v113 = *(_QWORD *)(v112 + 104);
    if (v113)
      v75 = *(_QWORD *)(v113 + 1664);
    else
      v75 = 0;
    os_unfair_lock_lock((os_unfair_lock_t)(v75 + 16));
    STACK[0xB60] = re::ProfilerManager::getProcessorId<re::ProfilerFlameChartProcessor>();
    v114 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((_QWORD *)(v75 + 480), &STACK[0xB60]);
    if (!v114)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 16));
      goto LABEL_156;
    }
    v115 = v114[3];
    os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 16));
    if (!v115 || !*(_BYTE *)(v115 + 8))
      goto LABEL_156;
    v504 = v78;
    *(_QWORD *)(v81 + 72) = 0;
    *(_QWORD *)(v81 + 80) = 0;
    *(_QWORD *)(v81 + 88) = 0;
    os_unfair_lock_lock((os_unfair_lock_t)(v115 + 12));
    v75 = 0xCCCCCCCCCCCCCCCDLL;
    std::vector<re::ProfilerFlameChartBlock>::reserve(&STACK[0xA38], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v115 + 48) - *(_QWORD *)(v115 + 40)) >> 6));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<re::ProfilerFlameChartBlock *>,std::__wrap_iter<re::ProfilerFlameChartBlock *>,std::back_insert_iterator<std::vector<re::ProfilerFlameChartBlock>>,0>(*(char **)(v115 + 40), *(char **)(v115 + 48), (uint64_t)&STACK[0xA38]);
    os_unfair_lock_unlock((os_unfair_lock_t)(v115 + 12));
    v117 = *(_QWORD *)(v81 + 72);
    v116 = *(_QWORD *)(v81 + 80);
    v118 = v116 - v117;
    if (v116 == v117)
      goto LABEL_154;
    v119 = re::RenderGraphContext::rtResolution((re::RenderGraphContext *)v77);
    v121 = v119;
    v122 = HIDWORD(v119);
    if ((int)v119 >= 0)
      v123 = v119;
    else
      v123 = (v119 + 1);
    if (v119 >= 0)
      v124 = HIDWORD(v119);
    else
      v124 = (HIDWORD(v119) + 1);
    v125 = *(re::DrawingManager **)(*(_QWORD *)(v77 + 8) + 104);
    if (v125)
      LayerContentsScale = re::DrawingManager::getLayerContentsScale(v125, 0, v120);
    else
      LayerContentsScale = 0.0;
    v127 = (float)(int)v121;
    v128 = (float)(int)v122;
    if ((int)v121 >= (int)v122)
    {
      _NF = (float)(v128 / v127) < 0.65;
      v130 = 2.0;
      if ((float)(v128 / v127) < 0.65)
        v130 = 3.0;
      v131 = 10.0;
      v132 = 5.0;
    }
    else
    {
      _NF = (float)(v127 / v128) < 0.65;
      v130 = 2.0;
      if ((float)(v127 / v128) < 0.65)
        v130 = 3.0;
      v131 = 16.0;
      v132 = 12.0;
    }
    if (_NF)
      v131 = v132;
    if (LayerContentsScale == 1.0)
      v133 = v130;
    else
      v133 = LayerContentsScale;
    *(float *)(v504 + 336) = v131;
    v134 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
    if (v134)
    {
      v502 = *(_BYTE *)(v134 + 65) != 0;
      if (*(_BYTE *)(v134 + 65))
        v135 = 2;
      else
        v135 = 1;
    }
    else
    {
      v502 = 0;
      v135 = 1;
    }
    v469 = v135;
    LOBYTE(a73) = v135;
    *(_QWORD *)(v81 + 272) = 0;
    *(_QWORD *)(v81 + 248) = 0;
    *(_QWORD *)(v81 + 256) = 0;
    *(_QWORD *)(v81 + 240) = 0;
    LODWORD(STACK[0xAF8]) = 0;
    v79 = 2;
    re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)&STACK[0xAE0], 2uLL);
    if (!*(_QWORD *)(v81 + 256))
      goto LABEL_456;
    v136 = *(_OWORD **)(v81 + 272);
    *v136 = xmmword_2260E5F10;
    v136[1] = xmmword_2260E5F20;
    v136[2] = xmmword_2260E5F40;
    v136[3] = xmmword_2260E5D70;
    v79 = *(_QWORD *)(v81 + 256);
    if (v79 <= 1)
      goto LABEL_457;
    v137 = *(_OWORD **)(v81 + 272);
    v137[4] = xmmword_2260E5F10;
    v137[5] = xmmword_2260E5F20;
    v137[6] = xmmword_2260E5F40;
    v137[7] = xmmword_2260E5D70;
    *(_QWORD *)(v81 + 32) = 0;
    *(_QWORD *)(v81 + 16) = 0;
    a83 = 0uLL;
    LODWORD(STACK[0xA08]) = 0;
    v79 = 2;
    re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)&a83, 2uLL);
    v138 = 0uLL;
    if (!*(_QWORD *)(v81 + 16))
      goto LABEL_458;
    DWORD1(v139) = 0;
    *((_QWORD *)&v139 + 1) = 0;
    *((float *)&v138 + 1) = 2.0 / v128;
    v140 = *(_OWORD **)(v81 + 32);
    *v140 = COERCE_UNSIGNED_INT(2.0 / v127);
    v140[1] = v138;
    v140[2] = xmmword_22616D260;
    v140[3] = xmmword_2261688B0;
    v79 = *(_QWORD *)(v81 + 16);
    if (v79 <= 1)
      goto LABEL_459;
    v141 = 0xCCCCCCCCCCCCCCCDLL * (v118 >> 6);
    v142 = *(_OWORD **)(v81 + 32);
    *(float *)&v139 = 2.0 / v127;
    v142[4] = v139;
    v142[5] = v138;
    v142[6] = xmmword_22616D260;
    v142[7] = xmmword_2261688B0;
    v143 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(v77 + 8) + 104));
    re::RenderGraphContext::acquireManagedRenderEncoder(&a74, v77, v143, 0);
    v501 = (re::DynamicString *)re::RenderGraphDataStore::tryGet<re::StencilInfoData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
    a77 = 0;
    __p = 0;
    a78 = 0;
    if (v141 >> 57)
      abort();
    v144 = (SHIDWORD(v121) / 18);
    v474 = 6 * v141 + 12;
    v494 = v144 - ((int)v124 >> 1);
    v81 = (100 - ((int)v123 >> 1));
    v79 = (v121 - 200);
    v499 = -((int)v124 >> 1);
    STACK[0xB80] = (unint64_t)&a78;
    v121 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::RenderText>>(v141);
    STACK[0xB60] = v121;
    STACK[0xB68] = v121;
    STACK[0xB78] = v121 + (v145 << 7);
    v146 = v121 + (v141 << 7);
    v123 = 0x3F8000003F800000;
    v124 = -1;
    do
    {
      *(_OWORD *)(v121 + 96) = 0u;
      *(_OWORD *)(v121 + 112) = 0u;
      *(_OWORD *)(v121 + 64) = 0u;
      *(_OWORD *)(v121 + 80) = 0u;
      *(_OWORD *)(v121 + 32) = 0u;
      *(_OWORD *)(v121 + 48) = 0u;
      *(_OWORD *)v121 = 0u;
      *(_OWORD *)(v121 + 16) = 0u;
      re::StringID::invalid((re::StringID *)v121);
      *(_QWORD *)(v121 + 16) = 0x3F8000003F800000;
      *(_QWORD *)(v121 + 24) = 0x3F8000003F800000;
      *(_OWORD *)(v121 + 32) = 0u;
      *(_OWORD *)(v121 + 48) = 0u;
      *(_OWORD *)(v121 + 64) = 0u;
      *(_OWORD *)(v121 + 80) = 0u;
      *(_OWORD *)(v121 + 96) = 0u;
      *(_QWORD *)(v121 + 112) = -1;
      v121 += 128;
    }
    while (v121 != v146);
    STACK[0xB70] = v146;
    std::vector<re::RenderText>::__swap_out_circular_buffer((uint64_t *)&__p, &STACK[0xB60]);
    std::__split_buffer<re::RenderText>::~__split_buffer((uint64_t)&STACK[0xB60]);
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 32 * v474, 0x10uLL, (uint64_t)&STACK[0xB60]);
    v150 = LODWORD(STACK[0xB6C]);
    v75 = v150 >> 5;
    if (v150 <= 0x1F)
      goto LABEL_460;
    v151 = LODWORD(STACK[0xB68]);
    v152 = STACK[0xB70];
    *(float *)&v148 = (float)((int)v81 + (int)v79);
    v153 = (const float *)&dword_2260ECE14;
    v154 = vld1q_dup_f32(v153);
    v155 = v154;
    v155.i32[3] = *(_DWORD *)(v504 + 340);
    v121 = STACK[0xB60] + v151;
    if ((v122 & 0x80000000) == 0)
      v156 = v122;
    else
      v156 = v122 + 1;
    *(_QWORD *)&v157 = v148;
    DWORD2(v157) = 0;
    HIDWORD(v157) = 1.0;
    v158 = v157;
    *((float *)&v158 + 1) = (float)(v156 >> 1);
    *(_OWORD *)v121 = v158;
    *(float32x4_t *)(v121 + 16) = v155;
    if (v150 <= 0x3F)
      goto LABEL_461;
    *(float *)&v149 = (float)(int)v81;
    v154.i32[3] = *(_DWORD *)(v504 + 340);
    *(_QWORD *)&v159 = v149;
    DWORD2(v159) = 0;
    HIDWORD(v159) = 1.0;
    v160 = v159;
    *((float *)&v160 + 1) = (float)(v156 >> 1);
    *(_OWORD *)(v121 + 32) = v160;
    *(float32x4_t *)(v121 + 48) = v154;
    if (v150 <= 0x5F)
      goto LABEL_462;
    *(_QWORD *)&v161 = v149;
    DWORD2(v161) = 0;
    HIDWORD(v161) = 1.0;
    *(_QWORD *)&v162 = 0;
    DWORD2(v162) = 0;
    HIDWORD(v162) = *(_DWORD *)(v504 + 344);
    *(_QWORD *)&v163 = 0;
    DWORD2(v163) = 0;
    *(_OWORD *)(v121 + 64) = v161;
    *(_OWORD *)(v121 + 80) = v162;
    if (v150 <= 0x7F)
      goto LABEL_463;
    DWORD1(v148) = 0;
    DWORD2(v148) = 0;
    HIDWORD(v148) = 1.0;
    HIDWORD(v163) = *(_DWORD *)(v504 + 344);
    *(_OWORD *)(v121 + 96) = v148;
    *(_OWORD *)(v121 + 112) = v163;
    if (v150 <= 0x9F)
      goto LABEL_464;
    v164 = *(_OWORD *)(v121 + 16);
    *(_OWORD *)(v121 + 128) = *(_OWORD *)v121;
    *(_OWORD *)(v121 + 144) = v164;
    if (v150 <= 0xBF)
      goto LABEL_465;
    v165 = *(_OWORD *)(v121 + 80);
    *(_OWORD *)(v121 + 160) = *(_OWORD *)(v121 + 64);
    *(_OWORD *)(v121 + 176) = v165;
    if (v150 <= 0xDF)
      goto LABEL_467;
    *(_OWORD *)(v121 + 192) = v148;
    *(_OWORD *)(v121 + 208) = xmmword_226195840;
    if (v150 <= 0xFF)
      goto LABEL_469;
    *(_OWORD *)(v121 + 224) = v161;
    *(_OWORD *)(v121 + 240) = xmmword_226195840;
    if (v150 <= 0x11F)
      goto LABEL_471;
    *((float *)&v159 + 1) = (float)v499;
    *(_OWORD *)(v121 + 256) = v159;
    *(_OWORD *)(v121 + 272) = xmmword_2260E5D70;
    if (v150 <= 0x13F)
      goto LABEL_473;
    *((float *)&v157 + 1) = (float)v499;
    *(_OWORD *)(v121 + 288) = v157;
    *(_OWORD *)(v121 + 304) = xmmword_2260E5D70;
    if (v150 <= 0x15F)
      goto LABEL_475;
    v463 = v152;
    v465 = v151;
    v467 = (float)(int)v81;
    v166 = *(_OWORD *)(v121 + 208);
    *(_OWORD *)(v121 + 320) = *(_OWORD *)(v121 + 192);
    *(_OWORD *)(v121 + 336) = v166;
    if (v150 <= 0x17F)
      goto LABEL_477;
    v167 = *(_OWORD *)(v121 + 272);
    *(_OWORD *)(v121 + 352) = *(_OWORD *)(v121 + 256);
    *(_OWORD *)(v121 + 368) = v167;
    ((void (*)(_QWORD, char *, id))a75[19])(*a75, sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "FlameChart", 4));
    v170 = STACK[0xA38];
    v169 = STACK[0xA40];
    __asm { FMOV            V0.4S, #1.0 }
    v496 = _Q0;
    v175 = v494;
    if (STACK[0xA38] == STACK[0xA40])
      break;
    v83 = 0;
    v176 = (double)(int)v81;
    v177 = (double)(int)v79;
    v178 = (float)(int)v144;
    v179 = (float)(int)v79 / v133;
    v79 = 12;
    v76 = 16;
    v180 = 1.0;
    v484 = (id)STACK[0xA40];
    while (1)
    {
      v181 = v83;
      v182 = *(_QWORD *)(v170 + 136);
      v83 = v144;
      if (v182)
      {
        v83 = v175;
        if (v182 != 1)
          v83 = v181;
      }
      if (v79 >= v75)
        break;
      v183 = *(_OWORD *)(v170 + 164);
      *(float *)&v184 = v176 + v177 * *(double *)(v170 + 152);
      *((float *)&v184 + 1) = (float)(int)(v144 + v144 * *(unsigned __int16 *)(v170 + 160) + v83);
      DWORD2(v184) = 0;
      *((float *)&v184 + 3) = v180;
      *(_OWORD *)(v121 + 384) = v184;
      *(_OWORD *)(v121 + 400) = v183;
      v185 = v79 + 1;
      if (v79 + 1 >= v75)
        goto LABEL_446;
      *(float *)&v186 = v176 + v177 * *(double *)(v170 + 144);
      *((float *)&v186 + 1) = (float)(int)(v144 + v144 * *(unsigned __int16 *)(v170 + 160) + v83);
      DWORD2(v186) = 0;
      *((float *)&v186 + 3) = v180;
      *(_OWORD *)(v121 + 416) = v186;
      *(_OWORD *)(v121 + 432) = v183;
      v187 = v79 + 2;
      if (v79 + 2 >= v75)
        goto LABEL_447;
      *(float *)&v188 = v176 + v177 * *(double *)(v170 + 144);
      *((float *)&v188 + 1) = (float)(int)(v83 + v144 * *(unsigned __int16 *)(v170 + 160));
      DWORD2(v188) = 0;
      *((float *)&v188 + 3) = v180;
      *(_OWORD *)(v121 + 448) = v188;
      *(_OWORD *)(v121 + 464) = v183;
      v189 = v79 + 3;
      if (v79 + 3 >= v75)
        goto LABEL_448;
      *(float *)&v190 = v176 + v177 * *(double *)(v170 + 152);
      *((float *)&v190 + 1) = (float)(int)(v83 + v144 * *(unsigned __int16 *)(v170 + 160));
      DWORD2(v190) = 0;
      *((float *)&v190 + 3) = v180;
      *(_OWORD *)(v121 + 480) = v190;
      *(_OWORD *)(v121 + 496) = v183;
      v191 = v79 + 4;
      if (v79 + 4 >= v75)
        goto LABEL_449;
      v192 = *(_OWORD *)(v121 + 400);
      *(_OWORD *)(v121 + 512) = *(_OWORD *)(v121 + 384);
      *(_OWORD *)(v121 + 528) = v192;
      if (v79 + 5 >= v75)
        goto LABEL_450;
      v193 = *(_OWORD *)(v121 + 464);
      *(_OWORD *)(v121 + 544) = *(_OWORD *)(v121 + 448);
      *(_OWORD *)(v121 + 560) = v193;
      if (*(unsigned __int16 *)(v170 + 160) <= 8u && *(double *)(v170 + 152) - *(double *)(v170 + 144) > 0.00999999978)
      {
        v81 = v144;
        re::StringID::invalid((re::StringID *)&STACK[0xB60]);
        *(_OWORD *)&STACK[0xBA0] = 0u;
        *(_OWORD *)&STACK[0xBB0] = 0u;
        *(_OWORD *)&STACK[0xB80] = 0u;
        *(_OWORD *)&STACK[0xB90] = 0u;
        STACK[0xBD0] = -1;
        *(_OWORD *)&STACK[0xB70] = *(_OWORD *)(v504 + 304);
        STACK[0xBC0] = v170;
        STACK[0xBC8] = strlen((const char *)v170);
        re::StringID::operator=(&STACK[0xB60], (uint64_t *)(*(_QWORD *)(v77 + 8) + 8));
        STACK[0xBD0] = -1;
        v194 = v504;
        v195.i32[0] = *(_DWORD *)(v504 + 320);
        v196 = *(double *)(v170 + 144);
        v197 = *(double *)(v170 + 152) - v196;
        v198 = *(float *)(v504 + 332);
        if (v198 >= v197)
        {
          v200 = *(float *)(v504 + 324);
        }
        else
        {
          v199 = *(float *)(v504 + 328);
          v200 = *(float *)(v504 + 324);
          if (v199 <= v197)
          {
            v195.i32[0] = *(_DWORD *)(v504 + 324);
          }
          else
          {
            v198 = (float)(v197 - v198) / (float)(v199 - v198);
            *(float *)v195.i32 = *(float *)v195.i32 + (float)((float)(v200 - *(float *)v195.i32) * v198);
          }
          v194 = v504;
        }
        LOWORD(v198) = *(_WORD *)(v170 + 160);
        v201 = (float)(v179 * v197) / (float)((float)(*(float *)v195.i32 * *(float *)(v194 + 336)) / v200);
        if (v201 < (float)STACK[0xBC8])
          STACK[0xBC8] = (unint64_t)v201;
        *(float *)&v202 = v176 + v177 * v196;
        *(float *)v195.i32 = (float)(*(float *)v195.i32 * v178) * *(float *)(v504 + 372);
        *((_QWORD *)&v203 + 1) = *((_QWORD *)&v496 + 1);
        *(_QWORD *)&v203 = __PAIR64__((float)(int)v83 + (float)(v178 * (float)((float)LODWORD(v198) + 0.75)), v202);
        *(float32x4_t *)&STACK[0xB80] = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)v195.i32);
        *(float32x4_t *)&STACK[0xB90] = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(v195, 0), 0x20uLL).i32);
        *(_OWORD *)&STACK[0xBA0] = xmmword_2260E5F40;
        *(_OWORD *)&STACK[0xBB0] = v203;
        v204 = (char *)__p + v76;
        re::StringID::operator=((unint64_t *)((char *)__p + v76 - 16), (uint64_t *)&STACK[0xB60]);
        v205 = *(_OWORD *)&STACK[0xB70];
        v206 = *(_OWORD *)&STACK[0xB90];
        *((_OWORD *)v204 + 1) = *(_OWORD *)&STACK[0xB80];
        *((_OWORD *)v204 + 2) = v206;
        *(_OWORD *)v204 = v205;
        v207 = *(_OWORD *)&STACK[0xBA0];
        v208 = *(_OWORD *)&STACK[0xBB0];
        v209 = *(_OWORD *)&STACK[0xBC0];
        *((_QWORD *)v204 + 12) = STACK[0xBD0];
        *((_OWORD *)v204 + 4) = v208;
        *((_OWORD *)v204 + 5) = v209;
        *((_OWORD *)v204 + 3) = v207;
        v80 = (uint64_t)&STACK[0xAE0];
        re::StringID::destroyString((re::StringID *)&STACK[0xB60]);
        v175 = v494;
        v169 = (unint64_t)v484;
        v180 = 1.0;
      }
      v170 += 320;
      v121 += 192;
      v76 += 128;
      v79 += 6;
      if (v170 == v169)
        goto LABEL_128;
    }
LABEL_445:
    re::internal::assertLog((re::internal *)6, v168, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v79, v75);
    _os_crash();
    __break(1u);
LABEL_446:
    re::internal::assertLog((re::internal *)6, v168, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v185, v75);
    _os_crash();
    __break(1u);
LABEL_447:
    re::internal::assertLog((re::internal *)6, v168, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v187, v75);
    _os_crash();
    __break(1u);
LABEL_448:
    re::internal::assertLog((re::internal *)6, v168, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v189, v75);
    _os_crash();
    __break(1u);
LABEL_449:
    re::internal::assertLog((re::internal *)6, v168, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v191, v75);
    _os_crash();
    __break(1u);
LABEL_450:
    re::internal::assertLog((re::internal *)6, v168, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()");
    _os_crash();
    __break(1u);
LABEL_451:
    v105 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)(v77 + 1336), *(const char **)(v76 + 16), (const char *)v83);
  }
LABEL_128:
  v210 = *(re::RenderManager **)(v77 + 8);
  v211 = *((_QWORD *)v210 + 13);
  if (v211)
    v121 = *(_QWORD *)(v211 + 304);
  else
    v121 = 0;
  v81 = (unint64_t)&a83;
  v124 = (unint64_t)&STACK[0xD60];
  re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v77, *(re::RenderGraphNodeBase **)(v77 + 40), (uint64_t)&STACK[0xB60]);
  v212 = *(id *)re::DebugRenderer::pipelineStateWithAlphaBlending((re::DebugRenderer *)v121, v210, (RenderTargetInfo *)&STACK[0xB60]);
  ((void (*)(_QWORD, char *, id))a75[7])(*a75, sel_setRenderPipelineState_, v212);
  v213 = STACK[0xA00];
  if (!STACK[0xA00])
    goto LABEL_484;
  v500 = v212;
  v214 = (_OWORD *)STACK[0xA10];
  *(_OWORD *)&STACK[0xB60] = *(_OWORD *)STACK[0xA10];
  *(_OWORD *)&STACK[0xB70] = v214[1];
  *(_OWORD *)&STACK[0xB80] = v214[2];
  *(_OWORD *)&STACK[0xB90] = v214[3];
  if (v213 == 1)
  {
LABEL_485:
    *(_QWORD *)(v80 + 80) = 0;
    *(_OWORD *)(v124 + 48) = 0u;
    *(_OWORD *)(v124 + 64) = 0u;
    *(_OWORD *)(v124 + 16) = 0u;
    *(_OWORD *)(v124 + 32) = 0u;
    *(_OWORD *)v124 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xA70]) = 136315906;
    *(_QWORD *)(v81 + 132) = "operator[]";
    LOWORD(STACK[0xA7C]) = 1024;
    *(_DWORD *)(v81 + 142) = 789;
    LOWORD(STACK[0xA82]) = 2048;
    *(_QWORD *)(v81 + 148) = 1;
    LOWORD(STACK[0xA8C]) = 2048;
    *(_QWORD *)(v81 + 158) = 1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_486;
  }
  *(_OWORD *)&STACK[0xBA0] = v214[4];
  *(_OWORD *)&STACK[0xBB0] = v214[5];
  *(_OWORD *)&STACK[0xBC0] = v214[6];
  *(_OWORD *)&STACK[0xBD0] = v214[7];
  re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x100uLL, 0x100uLL, (uint64_t)&STACK[0xD60]);
  v215 = LODWORD(STACK[0xD68]);
  v485 = (id)STACK[0xD70];
  v216 = STACK[0xD60] + v215;
  *(_OWORD *)(v216 + 64) = *(_OWORD *)&STACK[0xBA0];
  *(_OWORD *)(v216 + 80) = *(_OWORD *)&STACK[0xBB0];
  *(_OWORD *)(v216 + 96) = *(_OWORD *)&STACK[0xBC0];
  *(_OWORD *)(v216 + 112) = *(_OWORD *)&STACK[0xBD0];
  *(_OWORD *)v216 = *(_OWORD *)&STACK[0xB60];
  *(_OWORD *)(v216 + 16) = *(_OWORD *)&STACK[0xB70];
  *(_OWORD *)(v216 + 32) = *(_OWORD *)&STACK[0xB80];
  *(_OWORD *)(v216 + 48) = *(_OWORD *)&STACK[0xB90];
  *(_DWORD *)(v216 + 128) = 1065353216;
  *(_OWORD *)(v216 + 240) = 0u;
  *(_OWORD *)(v216 + 228) = 0u;
  *(_OWORD *)(v216 + 212) = 0u;
  *(_OWORD *)(v216 + 196) = 0u;
  *(_OWORD *)(v216 + 180) = 0u;
  *(_OWORD *)(v216 + 164) = 0u;
  *(_OWORD *)(v216 + 148) = 0u;
  *(_OWORD *)(v216 + 132) = 0u;
  *(_OWORD *)&STACK[0xD80] = 0u;
  *(_OWORD *)&STACK[0xD90] = 0u;
  *(_OWORD *)&STACK[0xD70] = 0u;
  re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x80uLL, 0x80uLL, (uint64_t)&STACK[0xA70]);
  v217 = LODWORD(STACK[0xA78]);
  v480 = STACK[0xA80];
  v218 = STACK[0xA70] + v217;
  *(_DWORD *)(v218 + 16) = 0;
  *(_DWORD *)(v218 + 28) = 1;
  *(_OWORD *)(v218 + 32) = *(_OWORD *)&STACK[0xD60];
  *(_OWORD *)(v218 + 48) = *(_OWORD *)&STACK[0xD70];
  *(_OWORD *)(v218 + 64) = *(_OWORD *)&STACK[0xD80];
  *(_OWORD *)(v218 + 80) = *(_OWORD *)&STACK[0xD90];
  *(_OWORD *)&STACK[0xA80] = 0u;
  *(_OWORD *)&STACK[0xA90] = 0u;
  re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x400uLL, 0x100uLL, (uint64_t)&STACK[0xB30]);
  v219 = LODWORD(STACK[0xB38]);
  v220 = STACK[0xB40];
  v221 = STACK[0xB30] + v219;
  *(_OWORD *)v221 = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 16) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 32) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 48) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 64) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 80) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 96) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 112) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 128) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 144) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 160) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 176) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 192) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 208) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 224) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 240) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 256) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 272) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 288) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 304) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 320) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 336) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 352) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 368) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 384) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 400) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 416) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 432) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 448) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 464) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 480) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 496) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 512) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 528) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 544) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 560) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 576) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 592) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 608) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 624) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 640) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 656) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 672) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 688) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 704) = xmmword_2260E5F10;
  *(_OWORD *)(v221 + 720) = xmmword_2260E5F20;
  *(_OWORD *)(v221 + 736) = xmmword_2260E5F40;
  *(_OWORD *)(v221 + 752) = xmmword_2260E5D70;
  *(_OWORD *)(v221 + 880) = 0u;
  *(_OWORD *)(v221 + 896) = 0u;
  *(_OWORD *)(v221 + 848) = 0u;
  *(_OWORD *)(v221 + 864) = 0u;
  *(_OWORD *)(v221 + 816) = 0u;
  *(_OWORD *)(v221 + 832) = 0u;
  *(_OWORD *)(v221 + 784) = 0u;
  *(_OWORD *)(v221 + 800) = 0u;
  *(_OWORD *)(v221 + 768) = 0u;
  *(_DWORD *)(v221 + 940) = v469;
  *(_DWORD *)(v221 + 944) = v502;
  *(_OWORD *)(v221 + 960) = 0u;
  *(_OWORD *)(v221 + 976) = *(_OWORD *)&STACK[0xA70];
  *(_OWORD *)(v221 + 992) = *(_OWORD *)&STACK[0xA80];
  *(_OWORD *)(v221 + 1008) = *(_OWORD *)&STACK[0xA90];
  ((void (*)(_QWORD, char *, unint64_t, uint64_t, _QWORD))a75[2])(*a75, sel_setVertexBuffer_offset_atIndex_, v463, v465, 0);
  ((void (*)(_QWORD, char *, id, uint64_t, uint64_t))a75[2])(*a75, sel_setVertexBuffer_offset_atIndex_, v485, v215, 1);
  ((void (*)(_QWORD, char *, unint64_t, uint64_t, uint64_t))a75[2])(*a75, sel_setVertexBuffer_offset_atIndex_, v480, v217, 2);
  ((void (*)(_QWORD, char *, unint64_t, uint64_t, uint64_t))a75[2])(*a75, sel_setVertexBuffer_offset_atIndex_, v220, v219, 3);
  ((void (*)(_QWORD, char *, uint64_t, _QWORD, uint64_t))a75[25])(*a75, sel_drawPrimitives_vertexStart_vertexCount_, 3, 0, v474);
  ((void (*)(_QWORD, char *))a75[20])(*a75, sel_popDebugGroup);
  if (v500)

  v223 = *(float *)(v504 + 372);
  *(float *)&v222 = (float)((float)(int)v144 * 0.75) * v223;
  v486 = v222;
  v224 = (float)((float)(int)v144 * 0.25) * v223;
  STACK[0xB30] = *(_QWORD *)"Simulation";
  LODWORD(STACK[0xB37]) = 7237481;
  re::StringID::invalid((re::StringID *)&STACK[0xB60]);
  *(_OWORD *)&STACK[0xBA0] = 0u;
  *(_OWORD *)&STACK[0xBB0] = 0u;
  *(_OWORD *)&STACK[0xB80] = 0u;
  *(_OWORD *)&STACK[0xB90] = 0u;
  *(_OWORD *)&STACK[0xB70] = *(_OWORD *)(v504 + 304);
  STACK[0xBC0] = (unint64_t)&STACK[0xB30];
  STACK[0xBC8] = 11;
  STACK[0xBD0] = -1;
  re::StringID::operator=(&STACK[0xB60], (uint64_t *)(*(_QWORD *)(v77 + 8) + 8));
  STACK[0xBD0] = -1;
  v225 = (uint64x2_t)vdupq_lane_s32((int32x2_t)v486, 0);
  v487 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)&v486);
  v492 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, *(float *)vshrq_n_u64(v225, 0x20uLL).i32);
  v226 = v496;
  *(float *)&v226 = v467;
  v497 = v226;
  v227 = v226;
  *((float *)&v227 + 1) = (float)(int)v144 - v224;
  *(float32x4_t *)&STACK[0xB80] = v487;
  *(float32x4_t *)&STACK[0xB90] = v492;
  *(_OWORD *)&STACK[0xBA0] = xmmword_2260E5F40;
  *(_OWORD *)&STACK[0xBB0] = v227;
  std::vector<re::RenderText>::push_back[abi:nn180100]((uint64_t *)&__p, (StringID *)&STACK[0xB60]);
  strcpy((char *)&a69, "Render");
  *(_OWORD *)&STACK[0xB70] = *(_OWORD *)(v504 + 304);
  STACK[0xBC0] = (unint64_t)&a69;
  STACK[0xBC8] = 7;
  re::StringID::operator=(&STACK[0xB60], (uint64_t *)(*(_QWORD *)(v77 + 8) + 8));
  STACK[0xBD0] = -1;
  v228 = v497;
  *((float *)&v228 + 1) = (float)(int)v494 - v224;
  *(float32x4_t *)&STACK[0xB80] = v487;
  *(float32x4_t *)&STACK[0xB90] = v492;
  *(_OWORD *)&STACK[0xBA0] = xmmword_2260E5F40;
  *(_OWORD *)&STACK[0xBB0] = v228;
  std::vector<re::RenderText>::push_back[abi:nn180100]((uint64_t *)&__p, (StringID *)&STACK[0xB60]);
  v229 = (re::StringID *)__p;
  v230 = a77;
  v79 = (unint64_t)&STACK[0xD60];
  if (__p != a77)
  {
    do
    {
      if (*((_QWORD *)v229 + 13))
      {
        v231 = *(re::TextManager **)(*(_QWORD *)(v77 + 8) + 72);
        re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v77, *(re::RenderGraphNodeBase **)(v77 + 40), (uint64_t)&STACK[0xD60]);
        if (v501)
        {
          v232 = *(_OWORD *)((char *)v501 + 8);
          LOBYTE(STACK[0xA80]) = *((_BYTE *)v501 + 24);
          *(_OWORD *)&STACK[0xA70] = v232;
        }
        else
        {
          STACK[0xA70] = 0;
          STACK[0xA78] = 0;
          LOBYTE(STACK[0xA80]) = 0;
          LOWORD(STACK[0xA71]) = -1;
          LOBYTE(STACK[0xA73]) = 7;
          LOWORD(STACK[0xA79]) = -1;
          LOBYTE(STACK[0xA7B]) = 7;
        }
        *(_QWORD *)&v508 = &STACK[0xAE0];
        *((_QWORD *)&v508 + 1) = &a83;
        re::TextManager::render(v231, (unsigned int *)&STACK[0xD60], (uint64_t)&STACK[0xA70], (uint64_t)&a74, *(_QWORD *)v77, v508, &a73, (uint64_t)v229, v502, 0);
      }
      v229 = (re::StringID *)((char *)v229 + 128);
    }
    while (v229 != v230);
  }
  re::StringID::destroyString((re::StringID *)&STACK[0xB60]);
  v75 = (unint64_t)__p;
  if (__p)
  {
    v233 = a77;
    v234 = __p;
    if (a77 != __p)
    {
      do
      {
        v233 = (re::StringID *)((char *)v233 - 128);
        re::StringID::destroyString(v233);
      }
      while (v233 != (re::StringID *)v75);
      v234 = __p;
    }
    a77 = (re::StringID *)v75;
    operator delete(v234);
  }
  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&a74);
  if ((_QWORD)a83 && STACK[0xA10])
    (*(void (**)(void))(*(_QWORD *)a83 + 40))();
  if (STACK[0xAE0] && STACK[0xB00])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0xAE0] + 40))(STACK[0xAE0]);
  v116 = STACK[0xA38];
LABEL_154:
  v78 = v504;
  if (v116)
  {
    *(_QWORD *)(v81 + 80) = v116;
    MEMORY[0x2276933AC]();
  }
LABEL_156:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&STACK[0xA28]);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&STACK[0xA60]);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)&STACK[0xA60]);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&STACK[0xA28], 5074, 0);
  v235 = *(_QWORD *)(v77 + 8);
  v236 = *(_QWORD *)(v235 + 104);
  if (v236)
  {
    v237 = *(_QWORD *)(v236 + 1664);
    if (v237)
    {
      if (*(_QWORD *)(v235 + 8) >= 2uLL)
      {
        v238 = (_anonymous_namespace_ *)re::ProfilerManager::getProcessor<re::ProfilerMiniHUDProcessor,void>(v237);
        if (v238)
        {
          v75 = (unint64_t)v238;
          if (*((_BYTE *)v238 + 8))
          {
            STACK[0xBB0] = 0;
            *(_OWORD *)&STACK[0xB90] = 0u;
            *(_OWORD *)&STACK[0xBA0] = 0u;
            *(_OWORD *)&STACK[0xB70] = 0u;
            *(_OWORD *)&STACK[0xB80] = 0u;
            *(_OWORD *)&STACK[0xB60] = 0u;
            v239 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xB98], 0);
            *(_OWORD *)&STACK[0xBC8] = 0u;
            *(_OWORD *)&STACK[0xBB8] = 0u;
            v240 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xBB8], 0);
            *(_OWORD *)&STACK[0xBE8] = 0u;
            *(_OWORD *)&STACK[0xBD8] = 0u;
            v241 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xBD8], 0);
            *(_OWORD *)&STACK[0xC08] = 0u;
            *(_OWORD *)&STACK[0xBF8] = 0u;
            v242 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xBF8], 0);
            *(_OWORD *)&STACK[0xC28] = 0u;
            *(_OWORD *)&STACK[0xC18] = 0u;
            v243 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xC18], 0);
            *(_OWORD *)&STACK[0xC48] = 0u;
            *(_OWORD *)&STACK[0xC38] = 0u;
            v244 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xC38], 0);
            *(_OWORD *)&STACK[0xC68] = 0u;
            *(_OWORD *)&STACK[0xC58] = 0u;
            v245 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xC58], 0);
            v123 = (uint64_t)&STACK[0xC78];
            *(_OWORD *)&STACK[0xC78] = 0u;
            *(_OWORD *)&STACK[0xC88] = 0u;
            v246 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xC78], 0);
            *(_OWORD *)&STACK[0xC98] = 0u;
            *(_OWORD *)&STACK[0xCA8] = 0u;
            v247 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xC98], 0);
            v80 = (uint64_t)&STACK[0xCB8];
            *(_OWORD *)&STACK[0xCB8] = 0u;
            *(_OWORD *)&STACK[0xCC8] = 0u;
            v248 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xCB8], 0);
            *(_OWORD *)&STACK[0xCD8] = 0u;
            *(_OWORD *)&STACK[0xCE8] = 0u;
            re::DynamicString::setCapacity(&STACK[0xCD8], 0);
            os_unfair_lock_lock((os_unfair_lock_t)(v75 + 12));
            re::ProfilerMiniHudStatistics::copy((uint64_t)&STACK[0xB60], v75 + 424);
            os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 12));
            v124 = re::RenderGraphContext::rtResolution((re::RenderGraphContext *)v77);
            v249 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
            if (v249)
            {
              v250 = *(_BYTE *)(v249 + 65);
              if (v250)
                v251 = 2;
              else
                v251 = 1;
            }
            else
            {
              v250 = 0;
              v251 = 1;
            }
            a82 = v250;
            a81 = v251;
            *(_QWORD *)(v81 + 104) = 0;
            *(_QWORD *)(v81 + 80) = 0;
            *(_QWORD *)(v81 + 88) = 0;
            *(_QWORD *)(v81 + 72) = 0;
            LODWORD(STACK[0xA50]) = 0;
            v121 = 2;
            re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)&STACK[0xA38], 2uLL);
            if (!*(_QWORD *)(v81 + 88))
            {
LABEL_466:
              *(_QWORD *)(v81 + 240) = 0;
              *(_OWORD *)(v79 + 48) = 0u;
              *(_OWORD *)(v79 + 64) = 0u;
              *(_OWORD *)(v79 + 16) = 0u;
              *(_OWORD *)(v79 + 32) = 0u;
              *(_OWORD *)v79 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 0;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_467:
              re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 6, v75);
              _os_crash();
              __break(1u);
LABEL_468:
              *(_QWORD *)(v81 + 240) = 0;
              *(_OWORD *)(v79 + 48) = 0u;
              *(_OWORD *)(v79 + 64) = 0u;
              *(_OWORD *)(v79 + 16) = 0u;
              *(_OWORD *)(v79 + 32) = 0u;
              *(_OWORD *)v79 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 1;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = v121;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_469:
              re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 7, v75);
              _os_crash();
              __break(1u);
              goto LABEL_470;
            }
            v252 = *(_OWORD **)(v81 + 104);
            *v252 = xmmword_2260E5F10;
            v252[1] = xmmword_2260E5F20;
            v252[2] = xmmword_2260E5F40;
            v252[3] = xmmword_2260E5D70;
            v121 = *(_QWORD *)(v81 + 88);
            if (v121 <= 1)
              goto LABEL_468;
            v253 = *(_OWORD **)(v81 + 104);
            v253[4] = xmmword_2260E5F10;
            v253[5] = xmmword_2260E5F20;
            v253[6] = xmmword_2260E5F40;
            v253[7] = xmmword_2260E5D70;
            a80 = 0;
            a78 = 0;
            __p = 0;
            a77 = 0;
            a79 = 0;
            v121 = 2;
            re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)&__p, 2uLL);
            v254 = 0uLL;
            if (!a78)
            {
LABEL_470:
              *(_QWORD *)(v81 + 240) = 0;
              *(_OWORD *)(v79 + 48) = v254;
              *(_OWORD *)(v79 + 64) = v254;
              *(_OWORD *)(v79 + 16) = v254;
              *(_OWORD *)(v79 + 32) = v254;
              *(_OWORD *)v79 = v254;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 0;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_471:
              re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 8, v75);
              _os_crash();
              __break(1u);
LABEL_472:
              *(_QWORD *)(v81 + 240) = 0;
              *(_OWORD *)&STACK[0xD90] = 0u;
              *(_OWORD *)&STACK[0xDA0] = 0u;
              *(_OWORD *)&STACK[0xD70] = 0u;
              *(_OWORD *)&STACK[0xD80] = 0u;
              *(_OWORD *)&STACK[0xD60] = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 1;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = v121;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_473:
              re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 9, v75);
              _os_crash();
              __break(1u);
              goto LABEL_474;
            }
            v505 = v78;
            v123 = HIDWORD(v124);
            DWORD1(v255) = 0;
            *((_QWORD *)&v255 + 1) = 0;
            *(float *)&v255 = 2.0 / (float)(int)v124;
            *((float *)&v254 + 1) = 2.0 / (float)SHIDWORD(v124);
            v256 = a80;
            *a80 = v255;
            v256[1] = v254;
            v256[2] = xmmword_22616D260;
            v256[3] = xmmword_2261688B0;
            v121 = a78;
            if (a78 <= 1)
              goto LABEL_472;
            v257 = a80;
            a80[4] = v255;
            v257[5] = v254;
            v257[6] = xmmword_22616D260;
            v257[7] = xmmword_2261688B0;
            v258 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(v77 + 8) + 104));
            re::RenderGraphContext::acquireManagedRenderEncoder(&a74, v77, v258, 0);
            a73 = re::RenderGraphDataStore::tryGet<re::StencilInfoData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
            v259 = (float)(SHIDWORD(v124) / 4);
            LODWORD(STACK[0xA24]) = 1107296256;
            if ((v124 & 0x80000000) == 0)
              v260 = v124;
            else
              v260 = v124 + 3;
            v261 = *(float *)&STACK[0xB6C];
            if (*(float *)&STACK[0xB70] <= 0.0)
              v262 = -0.0;
            else
              v262 = *(float *)&STACK[0xB6C];
            if (*(float *)&STACK[0xB70] > 0.0)
              v261 = *(float *)&STACK[0xB70];
            v488 = v261;
            v263 = *(float *)&STACK[0xB74];
            v264 = *(float *)&STACK[0xB68];
            v265 = 1.0 / (float)((float)(1000.0 / *(float *)&STACK[0xB60]) / 16.667);
            v266 = STACK[0xB78];
            v80 = (uint64_t)&STACK[0xB60];
            v121 = STACK[0xB90];
            v267 = 0.0;
            if (v265 <= 1.0)
              v267 = 1.0 - v265;
            v268 = v267 + (float)(*(float *)(v505 + 400) * (float)(1.0 - v267));
            v269 = atomic_load((unsigned __int8 *)&qword_25411F848);
            v79 = (unint64_t)&_MergedGlobals_444;
            if ((v269 & 1) == 0 && __cxa_guard_acquire(&qword_25411F848))
            {
              _MergedGlobals_444 = *(_DWORD *)(v505 + 400);
              __cxa_guard_release(&qword_25411F848);
            }
            *(float *)&_MergedGlobals_444 = (float)(v268 * 0.1) + (float)(*(float *)&_MergedGlobals_444 * 0.9);
            *(float *)&STACK[0xA20] = v259 / 5.0;
            a72 = 1090519040;
            re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x480uLL, 0x10uLL, (uint64_t)&STACK[0xD60]);
            v273 = LODWORD(STACK[0xD68]);
            v274 = LODWORD(STACK[0xD6C]);
            v275 = STACK[0xD70];
            v276 = (_OWORD *)(STACK[0xD60] + v273);
            v277 = v274 >> 5;
            a69 = v276;
            a70 = v274 >> 5;
            if ((v124 & 0x80000000) == 0)
              v278 = v124;
            else
              v278 = v124 + 1;
            *(float *)&v271 = (float)-(v278 >> 1) + 10.0;
            a68 = *(float *)&v271;
            if ((v124 & 0x8000000000000000) == 0)
              v279 = HIDWORD(v124);
            else
              v279 = HIDWORD(v124) + 1;
            v280 = (float)-(v279 >> 1) + 10.0;
            v281 = v280 + v259;
            a67 = v280 + v259;
            if (v274 <= 0x1F)
            {
LABEL_474:
              re::internal::assertLog((re::internal *)6, v270, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
              _os_crash();
              __break(1u);
LABEL_475:
              re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 10, v75);
              _os_crash();
              __break(1u);
LABEL_476:
              re::internal::assertLog((re::internal *)6, v270, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, v277);
              _os_crash();
              __break(1u);
LABEL_477:
              re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 11, v75);
              _os_crash();
              __break(1u);
              goto LABEL_478;
            }
            v282 = (float)(v260 >> 2);
            *(_QWORD *)&v283 = 0;
            DWORD2(v283) = 0;
            HIDWORD(v283) = _MergedGlobals_444;
            *(float *)&v272 = *(float *)&v271 + v282;
            DWORD2(v272) = 0;
            HIDWORD(v272) = 1.0;
            v284 = v272;
            *((float *)&v284 + 1) = v281;
            *v276 = v284;
            v276[1] = v283;
            if (v274 <= 0x3F)
              goto LABEL_476;
            DWORD2(v271) = 0;
            HIDWORD(v271) = 1.0;
            v285 = v271;
            *((float *)&v285 + 1) = v281;
            v276[2] = v285;
            v276[3] = v283;
            v123 = (uint64_t)&STACK[0xD60];
            if ((_DWORD)v277 == 2)
            {
LABEL_478:
              re::internal::assertLog((re::internal *)6, v270, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 2, 2);
              _os_crash();
              __break(1u);
              goto LABEL_479;
            }
            *((float *)&v271 + 1) = (float)-(v279 >> 1) + 10.0;
            v276[4] = v271;
            v276[5] = v283;
            v286 = v276 + 4;
            if (v274 <= 0x7F)
            {
LABEL_479:
              re::internal::assertLog((re::internal *)6, v270, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 3, v277);
              _os_crash();
              __break(1u);
              goto LABEL_480;
            }
            *((float *)&v272 + 1) = v280;
            v276[6] = v272;
            v276[7] = v283;
            if ((_DWORD)v277 == 4)
            {
LABEL_480:
              re::internal::assertLog((re::internal *)6, v270, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 4, 4);
              _os_crash();
              __break(1u);
              goto LABEL_481;
            }
            v477 = (id)v275;
            v481 = v273;
            v287 = *v276;
            v288 = v276[1];
            v276[8] = *v276;
            v276[9] = v288;
            if (v274 <= 0xBF)
            {
LABEL_481:
              re::internal::assertLog((re::internal *)6, v270, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 5, v277);
              _os_crash();
              __break(1u);
LABEL_482:
              *(_QWORD *)(v81 + 240) = 0;
              *(_OWORD *)(v123 + 48) = 0u;
              *(_OWORD *)(v123 + 64) = 0u;
              *(_OWORD *)(v123 + 16) = 0u;
              *(_OWORD *)(v123 + 32) = 0u;
              *(_OWORD *)v123 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 0;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_483;
            }
            *(float *)&v287 = (float)(v264 + v262) / 16.667;
            v289 = (float)(v263 / 1000000.0) / 16.667;
            v290 = *v286;
            v291 = v276[5];
            v276[10] = *v286;
            v276[11] = v291;
            *(_QWORD *)&a83 = v75 + 848;
            *((_QWORD *)&a83 + 1) = v75 + 864;
            *(_QWORD *)(v81 + 16) = &a69;
            *(_QWORD *)(v81 + 24) = &a68;
            *(_QWORD *)(v81 + 32) = &a67;
            *(_QWORD *)(v81 + 40) = &STACK[0xA20];
            a66 = 6;
            a65 = 1008981770;
            *(float *)&v290 = 1.0 - *(float *)&v287;
            re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t)&a83, 0, &a66, &a65, *(double *)&v287, *(double *)&v290, *(float *)&v287 * v282);
            *(float *)&v292 = 1.0 - (float)(v488 / 16.667);
            *(float *)&v293 = v488 / 16.667;
            re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t)&a83, 1, &a66, &a65, v293, v292, (float)(v488 / 16.667) * v282);
            *(float *)&v294 = 1.0 - v289;
            *(float *)&v295 = v289;
            re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t)&a83, 2, &a66, &a65, v295, v294, v289 * v282);
            *(float *)&v296 = 1.0 - v265;
            *(float *)&v297 = v265;
            re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t)&a83, 3, &a66, &a65, v296, v297, (float)(v260 >> 2));
            if ((uint64_t)STACK[0xB90] >= 1)
            {
              *(float *)&v299 = (float)((float)((float)v266 * 0.00097656) * 0.00097656) / (float)(uint64_t)v121;
              *(float *)&v298 = 1.0 - *(float *)&v299;
              re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t)&a83, 4, &a66, &a65, v298, v299, (float)(v260 >> 2));
            }
            ((void (*)(_QWORD, char *, id))a75[19])(*a75, sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "MiniHUDRect", 4));
            v124 = *(_QWORD *)(v77 + 8);
            v300 = *(_QWORD *)(v124 + 104);
            if (v300)
              v301 = *(re::DebugRenderer **)(v300 + 304);
            else
              v301 = 0;
            v80 = (uint64_t)&STACK[0xAE0];
            re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v77, *(re::RenderGraphNodeBase **)(v77 + 40), (uint64_t)&STACK[0xD60]);
            v489 = *(id *)re::DebugRenderer::pipelineStateWithAlphaBlending(v301, (re::RenderManager *)v124, (RenderTargetInfo *)&STACK[0xD60]);
            ((void (*)(_QWORD, char *))a75[7])(*a75, sel_setRenderPipelineState_);
            v302 = a78;
            if (!a78)
              goto LABEL_482;
            v303 = a80;
            *(_OWORD *)&STACK[0xD60] = *a80;
            *(_OWORD *)&STACK[0xD70] = v303[1];
            *(_OWORD *)&STACK[0xD80] = v303[2];
            *(_OWORD *)&STACK[0xD90] = v303[3];
            if (v302 == 1)
            {
LABEL_483:
              *(_QWORD *)(v80 + 80) = 0;
              *(_OWORD *)(v81 + 176) = 0u;
              *(_OWORD *)(v81 + 192) = 0u;
              *(_OWORD *)(v81 + 144) = 0u;
              *(_OWORD *)(v81 + 160) = 0u;
              *(_OWORD *)(v81 + 128) = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xAE0]) = 136315906;
              *(_QWORD *)(v81 + 244) = "operator[]";
              LOWORD(STACK[0xAEC]) = 1024;
              *(_DWORD *)(v81 + 254) = 789;
              LOWORD(STACK[0xAF2]) = 2048;
              *(_QWORD *)(v80 + 20) = 1;
              LOWORD(STACK[0xAFC]) = 2048;
              *(_QWORD *)(v80 + 30) = 1;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_484:
              *(_QWORD *)(v81 + 128) = 0;
              *(_OWORD *)(v80 + 176) = 0u;
              *(_OWORD *)(v80 + 192) = 0u;
              *(_OWORD *)(v80 + 144) = 0u;
              *(_OWORD *)(v80 + 160) = 0u;
              *(_OWORD *)(v80 + 128) = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xD60]) = 136315906;
              *(_QWORD *)(v124 + 4) = "operator[]";
              LOWORD(STACK[0xD6C]) = 1024;
              *(_DWORD *)(v124 + 14) = 789;
              LOWORD(STACK[0xD72]) = 2048;
              *(_QWORD *)(v124 + 20) = 0;
              LOWORD(STACK[0xD7C]) = 2048;
              *(_QWORD *)(v124 + 30) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_485;
            }
            *(_OWORD *)&STACK[0xDA0] = v303[4];
            *(_OWORD *)&STACK[0xDB0] = v303[5];
            *(_OWORD *)&STACK[0xDC0] = v303[6];
            *(_OWORD *)&STACK[0xDD0] = v303[7];
            re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x100uLL, 0x100uLL, (uint64_t)&STACK[0xA70]);
            v304 = LODWORD(STACK[0xA78]);
            v475 = *(_QWORD *)(v81 + 144);
            v305 = *(_QWORD *)(v81 + 128) + v304;
            *(_OWORD *)(v305 + 64) = *(_OWORD *)&STACK[0xDA0];
            *(_OWORD *)(v305 + 80) = *(_OWORD *)&STACK[0xDB0];
            *(_OWORD *)(v305 + 96) = *(_OWORD *)&STACK[0xDC0];
            *(_OWORD *)(v305 + 112) = *(_OWORD *)&STACK[0xDD0];
            *(_OWORD *)v305 = *(_OWORD *)&STACK[0xD60];
            *(_OWORD *)(v305 + 16) = *(_OWORD *)&STACK[0xD70];
            *(_OWORD *)(v305 + 32) = *(_OWORD *)&STACK[0xD80];
            *(_OWORD *)(v305 + 48) = *(_OWORD *)&STACK[0xD90];
            *(_DWORD *)(v305 + 128) = 1065353216;
            *(_OWORD *)(v305 + 240) = 0u;
            *(_OWORD *)(v305 + 228) = 0u;
            *(_OWORD *)(v305 + 212) = 0u;
            *(_OWORD *)(v305 + 196) = 0u;
            *(_OWORD *)(v305 + 180) = 0u;
            *(_OWORD *)(v305 + 164) = 0u;
            *(_OWORD *)(v305 + 148) = 0u;
            *(_OWORD *)(v305 + 132) = 0u;
            *(_OWORD *)&STACK[0xB00] = 0u;
            *(_OWORD *)&STACK[0xB10] = 0u;
            *(_OWORD *)&STACK[0xAF0] = 0u;
            re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x80uLL, 0x80uLL, (uint64_t)&STACK[0xA70]);
            v306 = LODWORD(STACK[0xA78]);
            v307 = *(_QWORD *)(v81 + 144);
            v308 = *(_QWORD *)(v81 + 128) + v306;
            *(_DWORD *)(v308 + 16) = 0;
            *(_DWORD *)(v308 + 28) = 1;
            *(_OWORD *)(v308 + 32) = *(_OWORD *)&STACK[0xAE0];
            *(_OWORD *)(v308 + 48) = *(_OWORD *)&STACK[0xAF0];
            *(_OWORD *)(v308 + 64) = *(_OWORD *)&STACK[0xB00];
            *(_OWORD *)(v308 + 80) = *(_OWORD *)&STACK[0xB10];
            *(_OWORD *)&STACK[0xB40] = 0u;
            *(_OWORD *)&STACK[0xB50] = 0u;
            v309 = a81;
            v310 = a82;
            re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x400uLL, 0x100uLL, (uint64_t)&STACK[0xA70]);
            v311 = LODWORD(STACK[0xA78]);
            v312 = *(_QWORD *)(v81 + 144);
            v313 = *(_QWORD *)(v81 + 128) + v311;
            *(_OWORD *)v313 = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 16) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 32) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 48) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 64) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 80) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 96) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 112) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 128) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 144) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 160) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 176) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 192) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 208) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 224) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 240) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 256) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 272) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 288) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 304) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 320) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 336) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 352) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 368) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 384) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 400) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 416) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 432) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 448) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 464) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 480) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 496) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 512) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 528) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 544) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 560) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 576) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 592) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 608) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 624) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 640) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 656) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 672) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 688) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 704) = xmmword_2260E5F10;
            *(_OWORD *)(v313 + 720) = xmmword_2260E5F20;
            *(_OWORD *)(v313 + 736) = xmmword_2260E5F40;
            *(_OWORD *)(v313 + 752) = xmmword_2260E5D70;
            *(_OWORD *)(v313 + 880) = 0u;
            *(_OWORD *)(v313 + 896) = 0u;
            *(_OWORD *)(v313 + 848) = 0u;
            *(_OWORD *)(v313 + 864) = 0u;
            *(_OWORD *)(v313 + 816) = 0u;
            *(_OWORD *)(v313 + 832) = 0u;
            *(_OWORD *)(v313 + 784) = 0u;
            *(_OWORD *)(v313 + 800) = 0u;
            *(_OWORD *)(v313 + 768) = 0u;
            *(_DWORD *)(v313 + 940) = v309;
            *(_DWORD *)(v313 + 944) = v310;
            *(_OWORD *)(v313 + 960) = 0u;
            *(_OWORD *)(v313 + 976) = *(_OWORD *)&STACK[0xB30];
            *(_OWORD *)(v313 + 992) = *(_OWORD *)&STACK[0xB40];
            *(_OWORD *)(v313 + 1008) = *(_OWORD *)&STACK[0xB50];
            ((void (*)(_QWORD, char *, id, uint64_t, _QWORD))a75[2])(*a75, sel_setVertexBuffer_offset_atIndex_, v477, v481, 0);
            ((void (*)(_QWORD, char *, uint64_t, uint64_t, uint64_t))a75[2])(*a75, sel_setVertexBuffer_offset_atIndex_, v475, v304, 1);
            ((void (*)(_QWORD, char *, uint64_t, uint64_t, uint64_t))a75[2])(*a75, sel_setVertexBuffer_offset_atIndex_, v307, v306, 2);
            ((void (*)(_QWORD, char *, uint64_t, uint64_t, uint64_t))a75[2])(*a75, sel_setVertexBuffer_offset_atIndex_, v312, v311, 3);
            ((void (*)(_QWORD, char *, uint64_t, _QWORD, unint64_t))a75[25])(*a75, sel_drawPrimitives_vertexStart_vertexCount_, 3, 0, a66);
            ((void (*)(_QWORD, char *))a75[20])(*a75, sel_popDebugGroup);
            *(_QWORD *)(v81 + 144) = &a68;
            *(_QWORD *)(v81 + 152) = &a72;
            *(_QWORD *)(v81 + 160) = &a67;
            *(_QWORD *)(v81 + 168) = &STACK[0xA20];
            *(_QWORD *)(v81 + 176) = &STACK[0xA24];
            *(_QWORD *)(v81 + 184) = &a73;
            *(_QWORD *)(v81 + 192) = &a74;
            *(_QWORD *)(v81 + 200) = &STACK[0xA38];
            *(_QWORD *)(v81 + 208) = &__p;
            *(_QWORD *)(v81 + 216) = &a81;
            v314 = STACK[0xBA0];
            v315 = STACK[0xBA0] >> 1;
            v78 = v505;
            *(_QWORD *)(v81 + 128) = v505;
            *(_QWORD *)(v81 + 136) = v77;
            _ZF = (v314 & 1) == 0;
            v316 = v314 >> 1;
            if (!_ZF)
              v316 = v315;
            *(_QWORD *)(v81 + 224) = &a82;
            if (v316)
              re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_1::operator()((uint64_t *)&STACK[0xA70], 0, &STACK[0xB98]);
            v317 = STACK[0xBC0];
            if ((STACK[0xBC0] & 1) != 0)
              v318 = v317 >> 1;
            else
              v318 = v317 >> 1;
            v75 = (unint64_t)&STACK[0xBD8];
            if (v318)
              re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_1::operator()((uint64_t *)&STACK[0xA70], 1, &STACK[0xBB8]);
            v319 = STACK[0xBE0];
            if ((STACK[0xBE0] & 1) != 0)
              v320 = v319 >> 1;
            else
              v320 = v319 >> 1;
            v80 = (uint64_t)&STACK[0xAE0];
            v79 = (unint64_t)&STACK[0xD60];
            if (v320)
              re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_1::operator()((uint64_t *)&STACK[0xA70], 2, &STACK[0xBD8]);
            v321 = STACK[0xC00];
            if ((STACK[0xC00] & 1) != 0)
              v322 = v321 >> 1;
            else
              v322 = v321 >> 1;
            if (v322)
              re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_1::operator()((uint64_t *)&STACK[0xA70], 3, &STACK[0xBF8]);
            v323 = STACK[0xC20];
            if ((STACK[0xC20] & 1) != 0)
              v324 = v323 >> 1;
            else
              v324 = v323 >> 1;
            if (v324)
              re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_1::operator()((uint64_t *)&STACK[0xA70], 4, &STACK[0xC18]);
            if (v489)

            re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&a74);
            if (__p && a80)
              (*(void (**)(void))(*(_QWORD *)__p + 40))();
            v325 = *(_QWORD *)(v81 + 72);
            if (v325 && *(_QWORD *)(v81 + 104))
              (*(void (**)(uint64_t))(*(_QWORD *)v325 + 40))(v325);
            if (STACK[0xCD8])
            {
              if ((STACK[0xCE0] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xCD8] + 40))(STACK[0xCD8], STACK[0xCE8]);
              *(_OWORD *)&STACK[0xCD8] = 0u;
              *(_OWORD *)&STACK[0xCE8] = 0u;
            }
            if (STACK[0xCB8])
            {
              if ((STACK[0xCC0] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xCB8] + 40))(STACK[0xCB8], STACK[0xCC8]);
              *(_OWORD *)&STACK[0xCB8] = 0u;
              *(_OWORD *)&STACK[0xCC8] = 0u;
            }
            if (STACK[0xC98])
            {
              if ((STACK[0xCA0] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xC98] + 40))(STACK[0xC98], STACK[0xCA8]);
              *(_OWORD *)&STACK[0xC98] = 0u;
              *(_OWORD *)&STACK[0xCA8] = 0u;
            }
            if (STACK[0xC78])
            {
              if ((STACK[0xC80] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xC78] + 40))(STACK[0xC78], STACK[0xC88]);
              *(_OWORD *)&STACK[0xC78] = 0u;
              *(_OWORD *)&STACK[0xC88] = 0u;
            }
            if (STACK[0xC58])
            {
              if ((STACK[0xC60] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xC58] + 40))(STACK[0xC58], STACK[0xC68]);
              *(_OWORD *)&STACK[0xC58] = 0u;
              *(_OWORD *)&STACK[0xC68] = 0u;
            }
            if (STACK[0xC38])
            {
              if ((STACK[0xC40] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xC38] + 40))(STACK[0xC38], STACK[0xC48]);
              *(_OWORD *)&STACK[0xC38] = 0u;
              *(_OWORD *)&STACK[0xC48] = 0u;
            }
            if (STACK[0xC18])
            {
              if ((STACK[0xC20] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xC18] + 40))(STACK[0xC18], STACK[0xC28]);
              *(_OWORD *)&STACK[0xC18] = 0u;
              *(_OWORD *)&STACK[0xC28] = 0u;
            }
            if (STACK[0xBF8])
            {
              if ((STACK[0xC00] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xBF8] + 40))(STACK[0xBF8], STACK[0xC08]);
              *(_OWORD *)&STACK[0xBF8] = 0u;
              *(_OWORD *)&STACK[0xC08] = 0u;
            }
            if (STACK[0xBD8])
            {
              if ((STACK[0xBE0] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xBD8] + 40))(STACK[0xBD8], STACK[0xBE8]);
              *(_OWORD *)&STACK[0xBD8] = 0u;
              *(_OWORD *)&STACK[0xBE8] = 0u;
            }
            if (STACK[0xBB8])
            {
              if ((STACK[0xBC0] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xBB8] + 40))(STACK[0xBB8], STACK[0xBC8]);
              *(_OWORD *)&STACK[0xBB8] = 0u;
              *(_OWORD *)&STACK[0xBC8] = 0u;
            }
            if (STACK[0xB98] && (STACK[0xBA0] & 1) != 0)
              (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xB98] + 40))(STACK[0xB98], STACK[0xBA8]);
          }
        }
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&STACK[0xA28]);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&STACK[0xA60]);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)&__p);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&STACK[0xA60], 5074, 0);
  v326 = *(_QWORD *)(v77 + 8);
  v327 = *(_QWORD *)(v326 + 104);
  if (v327)
  {
    v75 = *(_QWORD *)(v327 + 1664);
    if (v75)
    {
      if (*(_QWORD *)(v326 + 8) >= 2uLL)
      {
        v328 = (os_unfair_lock_s *)(v75 + 16);
        os_unfair_lock_lock((os_unfair_lock_t)(v75 + 16));
        STACK[0xB60] = re::ProfilerManager::getProcessorId<re::ProfilerDetailedHUDProcessor>();
        v329 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((_QWORD *)(v75 + 480), &STACK[0xB60]);
        if (v329)
        {
          v75 = v329[3];
          os_unfair_lock_unlock(v328);
          if (v75 && *(_BYTE *)(v75 + 8))
          {
            *(_OWORD *)&STACK[0xB60] = 0u;
            *(_OWORD *)&STACK[0xB70] = 0u;
            v331 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xB60], 0);
            *(_OWORD *)&STACK[0xB80] = 0u;
            *(_OWORD *)&STACK[0xB90] = 0u;
            v332 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xB80], 0);
            *(_OWORD *)&STACK[0xBA0] = 0u;
            *(_OWORD *)&STACK[0xBB0] = 0u;
            v333 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xBA0], 0);
            *(_OWORD *)&STACK[0xBC0] = 0u;
            *(_OWORD *)&STACK[0xBD0] = 0u;
            v334 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xBC0], 0);
            *(_OWORD *)&STACK[0xBE0] = 0u;
            *(_OWORD *)&STACK[0xBF0] = 0u;
            v335 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&STACK[0xBE0], 0);
            *(_OWORD *)&STACK[0xC00] = 0u;
            *(_OWORD *)&STACK[0xC10] = 0u;
            re::DynamicString::setCapacity(&STACK[0xC00], 0);
            os_unfair_lock_lock((os_unfair_lock_t)(v75 + 12));
            re::DynamicString::operator=((re::DynamicString *)&STACK[0xB60], (re::DynamicString *)(v75 + 64));
            re::DynamicString::operator=((re::DynamicString *)&STACK[0xB80], (re::DynamicString *)(v75 + 96));
            re::DynamicString::operator=((re::DynamicString *)&STACK[0xBC0], (re::DynamicString *)(v75 + 160));
            re::DynamicString::operator=((re::DynamicString *)&STACK[0xBA0], (re::DynamicString *)(v75 + 128));
            re::DynamicString::operator=((re::DynamicString *)&STACK[0xBE0], (re::DynamicString *)(v75 + 192));
            re::DynamicString::operator=((re::DynamicString *)&STACK[0xC00], (re::DynamicString *)(v75 + 224));
            os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 12));
            v336 = re::RenderGraphContext::rtResolution((re::RenderGraphContext *)v77);
            v337 = v336;
            v338 = HIDWORD(v336);
            LODWORD(a73) = HIDWORD(v336);
            LODWORD(a69) = v336;
            v339 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
            if (v339)
            {
              v340 = *(unsigned __int8 *)(v339 + 65);
              if (*(_BYTE *)(v339 + 65))
                v341 = 2;
              else
                v341 = 1;
            }
            else
            {
              v340 = 0;
              v341 = 1;
            }
            v80 = (uint64_t)&STACK[0xAE0];
            LOBYTE(a72) = v340;
            LOBYTE(a68) = v341;
            STACK[0xB50] = 0;
            STACK[0xB38] = 0;
            STACK[0xB40] = 0;
            STACK[0xB30] = 0;
            LODWORD(STACK[0xB48]) = 0;
            v121 = 2;
            re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)&STACK[0xB30], 2uLL);
            if (!STACK[0xB40])
              goto LABEL_494;
            v407 = (_OWORD *)STACK[0xB50];
            *v407 = xmmword_2260E5F10;
            v407[1] = xmmword_2260E5F20;
            v407[2] = xmmword_2260E5F40;
            v407[3] = xmmword_2260E5D70;
            v121 = STACK[0xB40];
            if (STACK[0xB40] <= 1)
            {
LABEL_495:
              *(_QWORD *)v80 = 0;
              *(_OWORD *)(v79 + 48) = 0u;
              *(_OWORD *)(v79 + 64) = 0u;
              *(_OWORD *)(v79 + 16) = 0u;
              *(_OWORD *)(v79 + 32) = 0u;
              *(_OWORD *)v79 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 1;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = v121;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_496;
            }
            v408 = (_OWORD *)STACK[0xB50];
            v408[4] = xmmword_2260E5F10;
            v408[5] = xmmword_2260E5F20;
            v408[6] = xmmword_2260E5F40;
            v408[7] = xmmword_2260E5D70;
            *(_QWORD *)(v81 + 104) = 0;
            *(_QWORD *)(v81 + 80) = 0;
            *(_QWORD *)(v81 + 88) = 0;
            *(_QWORD *)(v81 + 72) = 0;
            LODWORD(STACK[0xA50]) = 0;
            v121 = 2;
            re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)&STACK[0xA38], 2uLL);
            v409 = 0uLL;
            if (!*(_QWORD *)(v81 + 88))
            {
LABEL_496:
              *(_QWORD *)v80 = 0;
              *(_OWORD *)(v79 + 48) = v409;
              *(_OWORD *)(v79 + 64) = v409;
              *(_OWORD *)(v79 + 16) = v409;
              *(_OWORD *)(v79 + 32) = v409;
              *(_OWORD *)v79 = v409;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 0;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_497;
            }
            DWORD1(v410) = 0;
            *((_QWORD *)&v410 + 1) = 0;
            *(float *)&v410 = 2.0 / (float)v337;
            *((float *)&v409 + 1) = 2.0 / (float)(int)v338;
            v411 = *(_OWORD **)(v81 + 104);
            *v411 = v410;
            v411[1] = v409;
            v411[2] = xmmword_22616D260;
            v411[3] = xmmword_2261688B0;
            v121 = *(_QWORD *)(v81 + 88);
            if (v121 <= 1)
            {
LABEL_497:
              *(_QWORD *)v80 = 0;
              *(_OWORD *)(v79 + 48) = 0u;
              *(_OWORD *)(v79 + 64) = 0u;
              *(_OWORD *)(v79 + 16) = 0u;
              *(_OWORD *)(v79 + 32) = 0u;
              *(_OWORD *)v79 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 1;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = v121;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_498:
              re::internal::assertLog((re::internal *)6, *(_QWORD *)&v415, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, v418);
              _os_crash();
              __break(1u);
LABEL_499:
              re::internal::assertLog((re::internal *)6, *(_QWORD *)&v415, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, v418);
              _os_crash();
              __break(1u);
LABEL_500:
              re::internal::assertLog((re::internal *)6, *(_QWORD *)&v415, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 2, v418);
              _os_crash();
              __break(1u);
LABEL_501:
              re::internal::assertLog((re::internal *)6, *(_QWORD *)&v415, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 3, v418);
              _os_crash();
              __break(1u);
              goto LABEL_502;
            }
            v412 = *(_OWORD **)(v81 + 104);
            v412[4] = v410;
            v412[5] = v409;
            v412[6] = xmmword_22616D260;
            v412[7] = xmmword_2261688B0;
            v413 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(v77 + 8) + 104));
            re::RenderGraphContext::acquireManagedRenderEncoder(&STACK[0xA28], v77, v413, 0);
            a74 = re::RenderGraphDataStore::tryGet<re::StencilInfoData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
            LODWORD(a66) = 3;
            LODWORD(STACK[0xA24]) = 3;
            LODWORD(STACK[0xA20]) = 1065353216;
            if (v337 < (int)v338)
            {
              if ((double)v337 / (double)(int)v338 <= 0.699999988)
              {
                LODWORD(a66) = 6;
                v414 = 1;
              }
              else
              {
                LODWORD(a66) = 3;
                v414 = 2;
              }
              LODWORD(STACK[0xA24]) = v414;
            }
            *(int32x2_t *)&v416 = re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0xC0uLL, 0x10uLL, (uint64_t)&STACK[0xD60]);
            v417 = LODWORD(STACK[0xD6C]);
            v418 = v417 >> 5;
            if (v417 <= 0x1F)
              goto LABEL_498;
            v419 = (char *)LODWORD(STACK[0xD68]);
            v420 = *(_QWORD *)(v79 + 16);
            if (v337 >= 0)
              v421 = v337;
            else
              v421 = v337 + 1;
            *(float *)&v416 = (float)(v421 >> 1);
            *(_QWORD *)&v422 = 0;
            DWORD2(v422) = 0;
            HIDWORD(v422) = *(_DWORD *)(v78 + 368);
            v423 = &v419[*(_QWORD *)v79];
            if ((v338 & 0x80000000) == 0)
              v424 = v338;
            else
              v424 = v338 + 1;
            DWORD2(v416) = 0;
            HIDWORD(v416) = 1.0;
            v425 = v416;
            *((float *)&v425 + 1) = (float)(v424 >> 1);
            *(_QWORD *)&v426 = 0;
            DWORD2(v426) = 0;
            *(_OWORD *)v423 = v425;
            *((_OWORD *)v423 + 1) = v422;
            if (v417 <= 0x3F)
              goto LABEL_499;
            HIDWORD(v426) = *(_DWORD *)(v78 + 368);
            if (v337 >= 0)
              v427 = v337;
            else
              v427 = v337 + 1;
            *(float *)&v422 = (float)-(v427 >> 1);
            DWORD2(v422) = 0;
            HIDWORD(v422) = 1.0;
            v428 = v422;
            *((float *)&v428 + 1) = (float)(v424 >> 1);
            *((_OWORD *)v423 + 2) = v428;
            *((_OWORD *)v423 + 3) = v426;
            if (v417 <= 0x5F)
              goto LABEL_500;
            *(_QWORD *)&v429 = 0;
            DWORD2(v429) = 0;
            HIDWORD(v429) = *(_DWORD *)(v78 + 368);
            if ((v338 & 0x80000000) == 0)
              v430 = v338;
            else
              v430 = v338 + 1;
            *((float *)&v422 + 1) = (float)-(v430 >> 1);
            *(_QWORD *)&v431 = 0;
            DWORD2(v431) = 0;
            *((_OWORD *)v423 + 4) = v422;
            *((_OWORD *)v423 + 5) = v429;
            if (v417 <= 0x7F)
              goto LABEL_501;
            HIDWORD(v431) = *(_DWORD *)(v78 + 368);
            *((float *)&v416 + 1) = (float)-(v430 >> 1);
            *((_OWORD *)v423 + 6) = v416;
            *((_OWORD *)v423 + 7) = v431;
            if (v417 <= 0x9F)
            {
LABEL_502:
              re::internal::assertLog((re::internal *)6, *(_QWORD *)&v415, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 4, v418);
              _os_crash();
              __break(1u);
              goto LABEL_503;
            }
            v483 = v420;
            v432 = *((_OWORD *)v423 + 1);
            *((_OWORD *)v423 + 8) = *(_OWORD *)v423;
            *((_OWORD *)v423 + 9) = v432;
            if (v417 <= 0xBF)
            {
LABEL_503:
              re::internal::assertLog((re::internal *)6, *(_QWORD *)&v415, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 5, v418);
              _os_crash();
              __break(1u);
LABEL_504:
              *(_QWORD *)v80 = 0;
              *(_OWORD *)(v79 + 48) = 0u;
              *(_OWORD *)(v79 + 64) = 0u;
              *(_OWORD *)(v79 + 16) = 0u;
              *(_OWORD *)(v79 + 32) = 0u;
              *(_OWORD *)v79 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xA70]) = 136315906;
              *(_QWORD *)(v81 + 132) = "operator[]";
              LOWORD(STACK[0xA7C]) = 1024;
              *(_DWORD *)(v81 + 142) = 789;
              LOWORD(STACK[0xA82]) = 2048;
              *(_QWORD *)(v81 + 148) = 0;
              LOWORD(STACK[0xA8C]) = 2048;
              *(_QWORD *)(v81 + 158) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_505:
              *(_QWORD *)&a83 = 0;
              *(_OWORD *)(v81 + 176) = 0u;
              *(_OWORD *)(v81 + 192) = 0u;
              *(_OWORD *)(v81 + 144) = 0u;
              *(_OWORD *)(v81 + 160) = 0u;
              *(_OWORD *)(v81 + 128) = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(STACK[0xAE0]) = 136315906;
              *(_QWORD *)(v80 + 4) = "operator[]";
              LOWORD(STACK[0xAEC]) = 1024;
              *(_DWORD *)(v80 + 14) = 789;
              LOWORD(STACK[0xAF2]) = 2048;
              *(_QWORD *)(v80 + 20) = 1;
              LOWORD(STACK[0xAFC]) = 2048;
              *(_QWORD *)(v80 + 30) = 1;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v433 = *((_OWORD *)v423 + 5);
            *((_OWORD *)v423 + 10) = *((_OWORD *)v423 + 4);
            *((_OWORD *)v423 + 11) = v433;
            (*(void (**)(_QWORD, char *, id))(*(_QWORD *)(v81 + 64) + 152))(**(_QWORD **)(v81 + 64), sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "SystemHUDRect", 4));
            v434 = *(re::RenderManager **)(v77 + 8);
            v435 = *((_QWORD *)v434 + 13);
            if (v435)
              v436 = *(re::DebugRenderer **)(v435 + 304);
            else
              v436 = 0;
            v80 = (uint64_t)&STACK[0xAE0];
            re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v77, *(re::RenderGraphNodeBase **)(v77 + 40), (uint64_t)&STACK[0xD60]);
            v479 = *(id *)re::DebugRenderer::pipelineStateWithAlphaBlending(v436, v434, (RenderTargetInfo *)&STACK[0xD60]);
            (*(void (**)(_QWORD, char *))(*(_QWORD *)(v81 + 64) + 56))(**(_QWORD **)(v81 + 64), sel_setRenderPipelineState_);
            v437 = *(_QWORD *)(v81 + 88);
            if (!v437)
              goto LABEL_504;
            v473 = v419;
            v476 = v340;
            v507 = v78;
            v438 = *(_OWORD **)(v81 + 104);
            *(_OWORD *)v79 = *v438;
            *(_OWORD *)(v79 + 16) = v438[1];
            *(_OWORD *)(v79 + 32) = v438[2];
            *(_OWORD *)(v79 + 48) = v438[3];
            if (v437 == 1)
              goto LABEL_505;
            *(_OWORD *)(v79 + 64) = v438[4];
            *(_OWORD *)(v79 + 80) = v438[5];
            *(_OWORD *)(v79 + 96) = v438[6];
            *(_OWORD *)(v79 + 112) = v438[7];
            re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x100uLL, 0x100uLL, (uint64_t)&STACK[0xA70]);
            v439 = LODWORD(STACK[0xA78]);
            v471 = *(_QWORD *)(v81 + 144);
            v440 = *(_QWORD *)(v81 + 128) + v439;
            *(_OWORD *)(v440 + 64) = *(_OWORD *)(v79 + 64);
            *(_OWORD *)(v440 + 80) = *(_OWORD *)(v79 + 80);
            *(_OWORD *)(v440 + 96) = *(_OWORD *)(v79 + 96);
            *(_OWORD *)(v440 + 112) = *(_OWORD *)(v79 + 112);
            *(_OWORD *)v440 = *(_OWORD *)v79;
            *(_OWORD *)(v440 + 16) = *(_OWORD *)(v79 + 16);
            *(_OWORD *)(v440 + 32) = *(_OWORD *)(v79 + 32);
            *(_OWORD *)(v440 + 48) = *(_OWORD *)(v79 + 48);
            *(_DWORD *)(v440 + 128) = 1065353216;
            *(_OWORD *)(v440 + 240) = 0u;
            *(_OWORD *)(v440 + 228) = 0u;
            *(_OWORD *)(v440 + 212) = 0u;
            *(_OWORD *)(v440 + 196) = 0u;
            *(_OWORD *)(v440 + 180) = 0u;
            *(_OWORD *)(v440 + 164) = 0u;
            *(_OWORD *)(v440 + 148) = 0u;
            *(_OWORD *)(v440 + 132) = 0u;
            *(_OWORD *)&STACK[0xB00] = 0u;
            *(_OWORD *)&STACK[0xB10] = 0u;
            *(_OWORD *)&STACK[0xAF0] = 0u;
            re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x80uLL, 0x80uLL, (uint64_t)&STACK[0xA70]);
            v441 = LODWORD(STACK[0xA78]);
            v442 = *(_QWORD *)(v81 + 144);
            v443 = *(_QWORD *)(v81 + 128) + v441;
            *(_DWORD *)(v443 + 16) = 0;
            *(_DWORD *)(v443 + 28) = 1;
            *(_OWORD *)(v443 + 32) = *(_OWORD *)&STACK[0xAE0];
            *(_OWORD *)(v443 + 48) = *(_OWORD *)&STACK[0xAF0];
            *(_OWORD *)(v443 + 64) = *(_OWORD *)&STACK[0xB00];
            *(_OWORD *)(v443 + 80) = *(_OWORD *)&STACK[0xB10];
            *(_OWORD *)(v81 + 16) = 0u;
            *(_OWORD *)(v81 + 32) = 0u;
            v444 = v341;
            re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x400uLL, 0x100uLL, (uint64_t)&STACK[0xA70]);
            v445 = LODWORD(STACK[0xA78]);
            v446 = *(_QWORD *)(v81 + 144);
            v447 = *(_QWORD *)(v81 + 128) + v445;
            *(_OWORD *)v447 = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 16) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 32) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 48) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 64) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 80) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 96) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 112) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 128) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 144) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 160) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 176) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 192) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 208) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 224) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 240) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 256) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 272) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 288) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 304) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 320) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 336) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 352) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 368) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 384) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 400) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 416) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 432) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 448) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 464) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 480) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 496) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 512) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 528) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 544) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 560) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 576) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 592) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 608) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 624) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 640) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 656) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 672) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 688) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 704) = xmmword_2260E5F10;
            *(_OWORD *)(v447 + 720) = xmmword_2260E5F20;
            *(_OWORD *)(v447 + 736) = xmmword_2260E5F40;
            *(_OWORD *)(v447 + 752) = xmmword_2260E5D70;
            *(_OWORD *)(v447 + 880) = 0u;
            *(_OWORD *)(v447 + 896) = 0u;
            *(_OWORD *)(v447 + 848) = 0u;
            *(_OWORD *)(v447 + 864) = 0u;
            *(_OWORD *)(v447 + 816) = 0u;
            *(_OWORD *)(v447 + 832) = 0u;
            *(_OWORD *)(v447 + 784) = 0u;
            *(_OWORD *)(v447 + 800) = 0u;
            *(_OWORD *)(v447 + 768) = 0u;
            *(_DWORD *)(v447 + 940) = v444;
            *(_DWORD *)(v447 + 944) = v476;
            *(_OWORD *)(v447 + 960) = 0u;
            *(_OWORD *)(v447 + 976) = a83;
            *(_OWORD *)(v447 + 992) = *(_OWORD *)(v81 + 16);
            *(_OWORD *)(v447 + 1008) = *(_OWORD *)(v81 + 32);
            (*(void (**)(_QWORD, char *, uint64_t, id, _QWORD))(*(_QWORD *)(v81 + 64) + 16))(**(_QWORD **)(v81 + 64), sel_setVertexBuffer_offset_atIndex_, v483, v473, 0);
            (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 + 64) + 16))(**(_QWORD **)(v81 + 64), sel_setVertexBuffer_offset_atIndex_, v471, v439, 1);
            (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 + 64) + 16))(**(_QWORD **)(v81 + 64), sel_setVertexBuffer_offset_atIndex_, v442, v441, 2);
            (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 + 64) + 16))(**(_QWORD **)(v81 + 64), sel_setVertexBuffer_offset_atIndex_, v446, v445, 3);
            (*(void (**)(_QWORD, char *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v81 + 64) + 200))(**(_QWORD **)(v81 + 64), sel_drawPrimitives_vertexStart_vertexCount_, 3, 0, 6);
            (*(void (**)(_QWORD, char *))(*(_QWORD *)(v81 + 64) + 160))(**(_QWORD **)(v81 + 64), sel_popDebugGroup);
            *(_QWORD *)(v81 + 144) = &STACK[0xA24];
            *(_QWORD *)(v81 + 152) = &a69;
            *(_QWORD *)(v81 + 160) = &a73;
            *(_QWORD *)(v81 + 168) = &a66;
            *(_QWORD *)(v81 + 176) = &STACK[0xA20];
            *(_QWORD *)(v81 + 184) = &a74;
            *(_QWORD *)(v81 + 192) = &STACK[0xA28];
            *(_QWORD *)(v81 + 200) = &STACK[0xB30];
            *(_QWORD *)(v81 + 208) = &STACK[0xA38];
            *(_QWORD *)(v81 + 216) = &a68;
            v448 = STACK[0xB68];
            v449 = STACK[0xB68] >> 1;
            v78 = v507;
            *(_QWORD *)(v81 + 128) = v507;
            *(_QWORD *)(v81 + 136) = v77;
            _ZF = (v448 & 1) == 0;
            v450 = v448 >> 1;
            if (!_ZF)
              v450 = v449;
            *(_QWORD *)(v81 + 224) = &a72;
            if (v450)
              re::RenderGraphProfilerOverlayNode::executeSystemHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t *)&STACK[0xA70], 10, 40, 0, &STACK[0xB60]);
            v451 = STACK[0xB88];
            if ((STACK[0xB88] & 1) != 0)
              v452 = v451 >> 1;
            else
              v452 = v451 >> 1;
            v75 = (unint64_t)&STACK[0xBA0];
            if (v452)
              re::RenderGraphProfilerOverlayNode::executeSystemHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t *)&STACK[0xA70], 11, 45, 1, &STACK[0xB80]);
            v453 = STACK[0xBC8];
            if ((STACK[0xBC8] & 1) != 0)
              v454 = v453 >> 1;
            else
              v454 = v453 >> 1;
            v80 = (uint64_t)&STACK[0xAE0];
            if (v454)
              re::RenderGraphProfilerOverlayNode::executeSystemHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t *)&STACK[0xA70], 11, 40, 2, &STACK[0xBC0]);
            v455 = STACK[0xBA8];
            if ((STACK[0xBA8] & 1) != 0)
              v456 = v455 >> 1;
            else
              v456 = v455 >> 1;
            if (v456)
              re::RenderGraphProfilerOverlayNode::executeSystemHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t *)&STACK[0xA70], 8, 40, 3, &STACK[0xBA0]);
            v457 = STACK[0xBE8];
            if ((STACK[0xBE8] & 1) != 0)
              v458 = v457 >> 1;
            else
              v458 = v457 >> 1;
            if (v458)
              re::RenderGraphProfilerOverlayNode::executeSystemHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t *)&STACK[0xA70], 8, 40, 4, &STACK[0xBE0]);
            v459 = STACK[0xC08];
            if ((STACK[0xC08] & 1) != 0)
              v460 = v459 >> 1;
            else
              v460 = v459 >> 1;
            if (v460)
              re::RenderGraphProfilerOverlayNode::executeSystemHUDRendering(re::RenderGraphContext &)::$_0::operator()((uint64_t *)&STACK[0xA70], 8, 40, 5, &STACK[0xC00]);
            if (v479)

            re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&STACK[0xA28]);
            v461 = *(_QWORD *)(v81 + 72);
            if (v461 && *(_QWORD *)(v81 + 104))
              (*(void (**)(uint64_t))(*(_QWORD *)v461 + 40))(v461);
            if (STACK[0xB30] && STACK[0xB50])
              (*(void (**)(unint64_t))(*(_QWORD *)STACK[0xB30] + 40))(STACK[0xB30]);
            if (STACK[0xC00])
            {
              if ((STACK[0xC08] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xC00] + 40))(STACK[0xC00], STACK[0xC10]);
              *(_OWORD *)&STACK[0xC00] = 0u;
              *(_OWORD *)&STACK[0xC10] = 0u;
            }
            if (STACK[0xBE0])
            {
              if ((STACK[0xBE8] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xBE0] + 40))(STACK[0xBE0], STACK[0xBF0]);
              *(_OWORD *)&STACK[0xBE0] = 0u;
              *(_OWORD *)&STACK[0xBF0] = 0u;
            }
            if (STACK[0xBC0])
            {
              if ((STACK[0xBC8] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xBC0] + 40))(STACK[0xBC0], STACK[0xBD0]);
              *(_OWORD *)&STACK[0xBC0] = 0u;
              *(_OWORD *)&STACK[0xBD0] = 0u;
            }
            if (STACK[0xBA0])
            {
              if ((STACK[0xBA8] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xBA0] + 40))(STACK[0xBA0], STACK[0xBB0]);
              *(_OWORD *)&STACK[0xBA0] = 0u;
              *(_OWORD *)&STACK[0xBB0] = 0u;
            }
            if (STACK[0xB80])
            {
              if ((STACK[0xB88] & 1) != 0)
                (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xB80] + 40))(STACK[0xB80], STACK[0xB90]);
              *(_OWORD *)&STACK[0xB80] = 0u;
              *(_OWORD *)&STACK[0xB90] = 0u;
            }
            if (STACK[0xB60] && (STACK[0xB68] & 1) != 0)
              (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)STACK[0xB60] + 40))(STACK[0xB60], STACK[0xB70]);
          }
        }
        else
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(v75 + 16));
        }
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&STACK[0xA60]);
  result = re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&__p);
  v342 = *(_QWORD *)(*(_QWORD *)(v77 + 8) + 104);
  if (!v342)
    return result;
  v343 = *(_QWORD *)(v342 + 1648);
  if (!v343 || !*(_BYTE *)(v343 + 204) || *(_BYTE *)(v343 + 17))
    return result;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard((uint64_t *)&STACK[0xA38]);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&__p, 5074, 0);
  v121 = re::RenderGraphContext::rtResolution((re::RenderGraphContext *)v77);
  v344 = re::RenderGraphDataStore::tryGet<re::ViewportPercentData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
  if (v344)
  {
    v503 = *(_BYTE *)(v344 + 65) != 0;
    if (*(_BYTE *)(v344 + 65))
      v123 = 2;
    else
      v123 = 1;
  }
  else
  {
    v503 = 0;
    v123 = 1;
  }
  LOBYTE(STACK[0xA28]) = v123;
  STACK[0xB00] = 0;
  STACK[0xAE8] = 0;
  STACK[0xAF0] = 0;
  STACK[0xAE0] = 0;
  LODWORD(STACK[0xAF8]) = 0;
  v124 = 2;
  re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)&STACK[0xAE0], 2uLL);
  if (!STACK[0xAF0])
  {
    *(_QWORD *)(v81 + 128) = 0;
    *(_OWORD *)&STACK[0xB90] = 0u;
    *(_OWORD *)&STACK[0xBA0] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    *(_QWORD *)(v79 + 4) = "operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    *(_DWORD *)(v79 + 14) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    *(_QWORD *)(v79 + 20) = 0;
    LOWORD(STACK[0xD7C]) = 2048;
    *(_QWORD *)(v79 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_453;
  }
  v345 = (_OWORD *)STACK[0xB00];
  *v345 = xmmword_2260E5F10;
  v345[1] = xmmword_2260E5F20;
  v345[2] = xmmword_2260E5F40;
  v345[3] = xmmword_2260E5D70;
  v124 = STACK[0xAF0];
  if (STACK[0xAF0] <= 1)
  {
LABEL_453:
    *(_QWORD *)(v81 + 128) = 0;
    *(_OWORD *)&STACK[0xB90] = 0u;
    *(_OWORD *)&STACK[0xBA0] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    *(_QWORD *)(v79 + 4) = "operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    *(_DWORD *)(v79 + 14) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    *(_QWORD *)(v79 + 20) = 1;
    LOWORD(STACK[0xD7C]) = 2048;
    *(_QWORD *)(v79 + 30) = v124;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_454;
  }
  v346 = (_OWORD *)STACK[0xB00];
  v346[4] = xmmword_2260E5F10;
  v346[5] = xmmword_2260E5F20;
  v346[6] = xmmword_2260E5F40;
  v346[7] = xmmword_2260E5D70;
  *(_QWORD *)(v81 + 32) = 0;
  *(_QWORD *)(v81 + 16) = 0;
  a83 = 0uLL;
  LODWORD(STACK[0xA08]) = 0;
  v124 = 2;
  re::DynamicArray<re::Matrix4x4<float>>::resize((uint64_t)&a83, 2uLL);
  v347 = 0uLL;
  if (!*(_QWORD *)(v81 + 16))
  {
LABEL_454:
    *(_QWORD *)(v81 + 128) = 0;
    *(_OWORD *)&STACK[0xB90] = v347;
    *(_OWORD *)&STACK[0xBA0] = v347;
    *(_OWORD *)&STACK[0xB70] = v347;
    *(_OWORD *)&STACK[0xB80] = v347;
    *(_OWORD *)&STACK[0xB60] = v347;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    *(_QWORD *)(v79 + 4) = "operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    *(_DWORD *)(v79 + 14) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    *(_QWORD *)(v79 + 20) = 0;
    LOWORD(STACK[0xD7C]) = 2048;
    *(_QWORD *)(v79 + 30) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_455;
  }
  v75 = HIDWORD(v121);
  DWORD1(v348) = 0;
  *((_QWORD *)&v348 + 1) = 0;
  *(float *)&v348 = 2.0 / (float)(int)v121;
  *((float *)&v347 + 1) = 2.0 / (float)SHIDWORD(v121);
  v349 = *(_OWORD **)(v81 + 32);
  *v349 = v348;
  v349[1] = v347;
  v349[2] = xmmword_22616D260;
  v349[3] = xmmword_2261688B0;
  v124 = *(_QWORD *)(v81 + 16);
  if (v124 <= 1)
  {
LABEL_455:
    *(_QWORD *)(v81 + 128) = 0;
    *(_OWORD *)&STACK[0xB90] = 0u;
    *(_OWORD *)&STACK[0xBA0] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    *(_QWORD *)(v79 + 4) = "operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    *(_DWORD *)(v79 + 14) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    *(_QWORD *)(v79 + 20) = 1;
    LOWORD(STACK[0xD7C]) = 2048;
    *(_QWORD *)(v79 + 30) = v124;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_456:
    *(_QWORD *)(v81 + 128) = 0;
    *(_OWORD *)&STACK[0xB90] = 0u;
    *(_OWORD *)&STACK[0xBA0] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    STACK[0xD64] = (unint64_t)"operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    LODWORD(STACK[0xD6E]) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    STACK[0xD74] = 0;
    LOWORD(STACK[0xD7C]) = 2048;
    STACK[0xD7E] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_457:
    *(_QWORD *)(v81 + 128) = 0;
    *(_OWORD *)&STACK[0xB90] = 0u;
    *(_OWORD *)&STACK[0xBA0] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    STACK[0xD64] = (unint64_t)"operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    LODWORD(STACK[0xD6E]) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    STACK[0xD74] = 1;
    LOWORD(STACK[0xD7C]) = 2048;
    STACK[0xD7E] = v79;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_458:
    *(_QWORD *)(v81 + 128) = 0;
    *(_OWORD *)&STACK[0xB90] = v138;
    *(_OWORD *)&STACK[0xBA0] = v138;
    *(_OWORD *)&STACK[0xB70] = v138;
    *(_OWORD *)&STACK[0xB80] = v138;
    *(_OWORD *)&STACK[0xB60] = v138;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    STACK[0xD64] = (unint64_t)"operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    LODWORD(STACK[0xD6E]) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    STACK[0xD74] = 0;
    LOWORD(STACK[0xD7C]) = 2048;
    STACK[0xD7E] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_459:
    *(_QWORD *)(v81 + 128) = 0;
    *(_OWORD *)&STACK[0xB90] = 0u;
    *(_OWORD *)&STACK[0xBA0] = 0u;
    *(_OWORD *)&STACK[0xB70] = 0u;
    *(_OWORD *)&STACK[0xB80] = 0u;
    *(_OWORD *)&STACK[0xB60] = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(STACK[0xD60]) = 136315906;
    STACK[0xD64] = (unint64_t)"operator[]";
    LOWORD(STACK[0xD6C]) = 1024;
    LODWORD(STACK[0xD6E]) = 789;
    LOWORD(STACK[0xD72]) = 2048;
    STACK[0xD74] = 1;
    LOWORD(STACK[0xD7C]) = 2048;
    STACK[0xD7E] = v79;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_460:
    re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, v75);
    _os_crash();
    __break(1u);
LABEL_461:
    re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, v75);
    _os_crash();
    __break(1u);
LABEL_462:
    re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 2, v75);
    _os_crash();
    __break(1u);
LABEL_463:
    re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 3, v75);
    _os_crash();
    __break(1u);
LABEL_464:
    re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 4, v75);
    _os_crash();
    __break(1u);
LABEL_465:
    re::internal::assertLog((re::internal *)6, v147, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 5, v75);
    _os_crash();
    __break(1u);
    goto LABEL_466;
  }
  v350 = *(_OWORD **)(v81 + 32);
  v350[4] = v348;
  v350[5] = v347;
  v350[6] = xmmword_22616D260;
  v350[7] = xmmword_2261688B0;
  v351 = re::RenderGraphDataStore::tryGet<re::DynamicArray<re::RenderProfilerText>>(*(_QWORD *)(v77 + 1168), (int)"ProfilerOverlay", "RenderFrame");
  if (v351)
  {
    v352 = (_QWORD *)v351;
    v482 = v123;
    v353 = re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*(_QWORD *)(v77 + 8) + 104));
    re::RenderGraphContext::acquireManagedRenderEncoder(&STACK[0xA60], v77, v353, 0);
    v498 = re::RenderGraphDataStore::tryGet<re::StencilInfoData>(*(_QWORD *)(v77 + 1168), *(_QWORD *)(*(_QWORD *)(v77 + 40) + 48));
    v354 = (double)(int)v121;
    v355 = (double)SHIDWORD(v121);
    if ((int)v121 >= SHIDWORD(v121))
    {
      v357 = 3;
      v495 = 9;
      v80 = 3;
    }
    else
    {
      if (v354 / v355 <= 0.699999988)
        v356 = 6;
      else
        v356 = 10;
      v495 = v356;
      if (v354 / v355 <= 0.699999988)
        v357 = 1;
      else
        v357 = 2;
      if (v354 / v355 <= 0.699999988)
        v80 = 6;
      else
        v80 = 5;
    }
    v490 = v352;
    v358 = v352[2];
    v491 = HIDWORD(v121);
    if ((v121 & 0x8000000000000000) != 0)
      LODWORD(v75) = HIDWORD(v121) + 1;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0xC0uLL, 0x10uLL, (uint64_t)&STACK[0xB60]);
    v361 = LODWORD(STACK[0xB6C]);
    v362 = v361 >> 5;
    if (v361 > 0x1F)
    {
      v363 = (double)(int)v80;
      v364 = -((int)v75 >> 1);
      v365 = LODWORD(STACK[0xB68]);
      v366 = STACK[0xB70];
      v367 = (_OWORD *)(STACK[0xB60] + v365);
      if ((v121 & 0x80000000) == 0)
        v368 = v121;
      else
        v368 = v121 + 1;
      *(float *)&v360 = (float)(v368 >> 1);
      *(_QWORD *)&v369 = 0;
      DWORD2(v369) = 0;
      HIDWORD(v369) = *(_DWORD *)(v78 + 368);
      v370 = (int)v358 / v357;
      if ((int)v358 % v357 > 0)
        ++v370;
      v371 = (double)v370 / v363;
      v372 = (float)v364 + (float)((float)SHIDWORD(v121) * v371);
      DWORD2(v360) = 0;
      HIDWORD(v360) = 1.0;
      v373 = v360;
      *((float *)&v373 + 1) = v372;
      *(_QWORD *)&v374 = 0;
      DWORD2(v374) = 0;
      *v367 = v373;
      v367[1] = v369;
      if (v361 > 0x3F)
      {
        HIDWORD(v374) = *(_DWORD *)(v78 + 368);
        *(float *)&v369 = (float)-(v368 >> 1);
        DWORD2(v369) = 0;
        HIDWORD(v369) = 1.0;
        v375 = v369;
        *((float *)&v375 + 1) = v372;
        v367[2] = v375;
        v367[3] = v374;
        if (v361 > 0x5F)
        {
          *(_QWORD *)&v376 = 0;
          DWORD2(v376) = 0;
          HIDWORD(v376) = *(_DWORD *)(v78 + 368);
          *((float *)&v369 + 1) = (float)v364;
          *(_QWORD *)&v377 = 0;
          DWORD2(v377) = 0;
          v367[4] = v369;
          v367[5] = v376;
          if (v361 > 0x7F)
          {
            HIDWORD(v377) = *(_DWORD *)(v78 + 368);
            *((float *)&v360 + 1) = (float)v364;
            v367[6] = v360;
            v367[7] = v377;
            if (v361 > 0x9F)
            {
              v462 = -(v368 >> 1);
              v464 = v364;
              v466 = v80;
              v468 = v121;
              v378 = v367[1];
              v367[8] = *v367;
              v367[9] = v378;
              if (v361 > 0xBF)
              {
                v478 = (id)v366;
                v379 = v367[5];
                v367[10] = v367[4];
                v367[11] = v379;
                (*(void (**)(_QWORD, char *, id))(*(_QWORD *)(v81 + 120) + 152))(**(_QWORD **)(v81 + 120), sel_pushDebugGroup_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, "ProfilerOverlay", 4));
                v121 = *(_QWORD *)(v77 + 8);
                v380 = *(_QWORD *)(v121 + 104);
                if (v380)
                  v381 = *(re::DebugRenderer **)(v380 + 304);
                else
                  v381 = 0;
                v80 = (uint64_t)&STACK[0xAE0];
                re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v77, *(re::RenderGraphNodeBase **)(v77 + 40), (uint64_t)&STACK[0xB60]);
                v382 = *(id *)re::DebugRenderer::pipelineStateWithAlphaBlending(v381, (re::RenderManager *)v121, (RenderTargetInfo *)&STACK[0xB60]);
                (*(void (**)(_QWORD, char *, id))(*(_QWORD *)(v81 + 120) + 56))(**(_QWORD **)(v81 + 120), sel_setRenderPipelineState_, v382);
                v383 = *(_QWORD *)(v81 + 16);
                if (v383)
                {
                  v472 = v382;
                  v384 = *(_OWORD **)(v81 + 32);
                  *(_OWORD *)&STACK[0xB60] = *v384;
                  *(_OWORD *)&STACK[0xB70] = v384[1];
                  *(_OWORD *)&STACK[0xB80] = v384[2];
                  *(_OWORD *)&STACK[0xB90] = v384[3];
                  if (v383 != 1)
                  {
                    v506 = (float *)v78;
                    *(_OWORD *)&STACK[0xBA0] = v384[4];
                    *(_OWORD *)&STACK[0xBB0] = v384[5];
                    *(_OWORD *)&STACK[0xBC0] = v384[6];
                    *(_OWORD *)&STACK[0xBD0] = v384[7];
                    re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x100uLL, 0x100uLL, (uint64_t)&STACK[0xD60]);
                    v385 = LODWORD(STACK[0xD68]);
                    v386 = *(_QWORD *)(v79 + 16);
                    v387 = *(_QWORD *)v79 + v385;
                    *(_OWORD *)(v387 + 64) = *(_OWORD *)&STACK[0xBA0];
                    *(_OWORD *)(v387 + 80) = *(_OWORD *)&STACK[0xBB0];
                    *(_OWORD *)(v387 + 96) = *(_OWORD *)&STACK[0xBC0];
                    *(_OWORD *)(v387 + 112) = *(_OWORD *)&STACK[0xBD0];
                    *(_OWORD *)v387 = *(_OWORD *)&STACK[0xB60];
                    *(_OWORD *)(v387 + 16) = *(_OWORD *)&STACK[0xB70];
                    *(_OWORD *)(v387 + 32) = *(_OWORD *)&STACK[0xB80];
                    *(_OWORD *)(v387 + 48) = *(_OWORD *)&STACK[0xB90];
                    *(_DWORD *)(v387 + 128) = 1065353216;
                    *(_OWORD *)(v387 + 240) = 0u;
                    *(_OWORD *)(v387 + 228) = 0u;
                    *(_OWORD *)(v387 + 212) = 0u;
                    *(_OWORD *)(v387 + 196) = 0u;
                    *(_OWORD *)(v387 + 180) = 0u;
                    *(_OWORD *)(v387 + 164) = 0u;
                    *(_OWORD *)(v387 + 148) = 0u;
                    *(_OWORD *)(v387 + 132) = 0u;
                    *(_OWORD *)(v79 + 32) = 0u;
                    *(_OWORD *)(v79 + 48) = 0u;
                    *(_OWORD *)(v79 + 16) = 0u;
                    re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x80uLL, 0x80uLL, (uint64_t)&STACK[0xA70]);
                    v388 = LODWORD(STACK[0xA78]);
                    v470 = *(_QWORD *)(v81 + 144);
                    v389 = *(_QWORD *)(v81 + 128) + v388;
                    *(_DWORD *)(v389 + 16) = 0;
                    *(_DWORD *)(v389 + 28) = 1;
                    *(_OWORD *)(v389 + 32) = *(_OWORD *)v79;
                    *(_OWORD *)(v389 + 48) = *(_OWORD *)(v79 + 16);
                    *(_OWORD *)(v389 + 64) = *(_OWORD *)(v79 + 32);
                    *(_OWORD *)(v389 + 80) = *(_OWORD *)(v79 + 48);
                    *(_OWORD *)(v81 + 144) = 0u;
                    *(_OWORD *)(v81 + 160) = 0u;
                    re::FrameContext::perFrameAlloc(*(re::FrameContext **)v77, 0x400uLL, 0x100uLL, (uint64_t)&STACK[0xB30]);
                    v390 = LODWORD(STACK[0xB38]);
                    v391 = STACK[0xB40];
                    v392 = STACK[0xB30] + v390;
                    *(_OWORD *)v392 = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 16) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 32) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 48) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 64) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 80) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 96) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 112) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 128) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 144) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 160) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 176) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 192) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 208) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 224) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 240) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 256) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 272) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 288) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 304) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 320) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 336) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 352) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 368) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 384) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 400) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 416) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 432) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 448) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 464) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 480) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 496) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 512) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 528) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 544) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 560) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 576) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 592) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 608) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 624) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 640) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 656) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 672) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 688) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 704) = xmmword_2260E5F10;
                    *(_OWORD *)(v392 + 720) = xmmword_2260E5F20;
                    *(_OWORD *)(v392 + 736) = xmmword_2260E5F40;
                    *(_OWORD *)(v392 + 752) = xmmword_2260E5D70;
                    *(_OWORD *)(v392 + 880) = 0u;
                    *(_OWORD *)(v392 + 896) = 0u;
                    *(_OWORD *)(v392 + 848) = 0u;
                    *(_OWORD *)(v392 + 864) = 0u;
                    *(_OWORD *)(v392 + 816) = 0u;
                    *(_OWORD *)(v392 + 832) = 0u;
                    *(_OWORD *)(v392 + 784) = 0u;
                    *(_OWORD *)(v392 + 800) = 0u;
                    *(_OWORD *)(v392 + 768) = 0u;
                    *(_DWORD *)(v392 + 940) = v482;
                    *(_DWORD *)(v392 + 944) = v503;
                    *(_OWORD *)(v392 + 960) = 0u;
                    *(_OWORD *)(v392 + 976) = *(_OWORD *)(v81 + 128);
                    *(_OWORD *)(v392 + 992) = *(_OWORD *)(v81 + 144);
                    *(_OWORD *)(v392 + 1008) = *(_OWORD *)(v81 + 160);
                    (*(void (**)(_QWORD, char *, id, uint64_t, _QWORD))(*(_QWORD *)(v81 + 120) + 16))(**(_QWORD **)(v81 + 120), sel_setVertexBuffer_offset_atIndex_, v478, v365, 0);
                    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 + 120) + 16))(**(_QWORD **)(v81 + 120), sel_setVertexBuffer_offset_atIndex_, v386, v385, 1);
                    (*(void (**)(_QWORD, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 + 120) + 16))(**(_QWORD **)(v81 + 120), sel_setVertexBuffer_offset_atIndex_, v470, v388, 2);
                    (*(void (**)(_QWORD, char *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 + 120)
                                                                                               + 16))(**(_QWORD **)(v81 + 120), sel_setVertexBuffer_offset_atIndex_, v391, v390, 3);
                    (*(void (**)(_QWORD, char *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v81 + 120) + 200))(**(_QWORD **)(v81 + 120), sel_drawPrimitives_vertexStart_vertexCount_, 3, 0, 6);
                    (*(void (**)(_QWORD, char *))(*(_QWORD *)(v81 + 120) + 160))(**(_QWORD **)(v81 + 120), sel_popDebugGroup);
                    if (v472)

                    v394 = v490[2];
                    if (v394)
                    {
                      v395 = 0;
                      v396 = v490[4];
                      v397 = 1.0 / (double)v357 * v354;
                      v398 = 1.0 / v363 * v355;
                      v399 = (int)v491 / v466;
                      v400 = (v394 << 7) - 128;
                      __asm { FMOV            V0.4S, #1.0 }
                      v493 = *((_QWORD *)&_Q0 + 1);
                      do
                      {
                        *(float *)v393.i32 = v506[95] * (float)(v468 / v357 / *(_DWORD *)(v396 + 124));
                        if (*(float *)v393.i32 > (float)(v506[94] * (float)(v399 / *(_DWORD *)(v396 + 120))))
                          *(float *)v393.i32 = v506[94] * (float)(v399 / *(_DWORD *)(v396 + 120));
                        *(float *)v393.i32 = v506[93] * *(float *)v393.i32;
                        *((_QWORD *)&v404 + 1) = v493;
                        v402 = (double)v462 + v397 * (double)(int)(v395 % v357);
                        *(float *)&v404 = v402;
                        v403 = (double)v464 + v398 * (double)(int)(v395 / v357 + 1);
                        *((float *)&v404 + 1) = v403;
                        *(float32x4_t *)(v396 + 32) = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)v393.i32);
                        *(float32x4_t *)(v396 + 48) = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(v393, 0), 0x20uLL).i32);
                        *(_OWORD *)(v396 + 64) = xmmword_2260E5F40;
                        *(_OWORD *)(v396 + 80) = v404;
                        v405 = *(re::TextManager **)(*(_QWORD *)(v77 + 8) + 72);
                        re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v77, *(re::RenderGraphNodeBase **)(v77 + 40), (uint64_t)&STACK[0xB60]);
                        if (v498)
                        {
                          v406 = *(_OWORD *)(v498 + 8);
                          LOBYTE(STACK[0xD70]) = *(_BYTE *)(v498 + 24);
                          *(_OWORD *)&STACK[0xD60] = v406;
                        }
                        else
                        {
                          STACK[0xD60] = 0;
                          STACK[0xD68] = 0;
                          LOBYTE(STACK[0xD70]) = 0;
                          LOWORD(STACK[0xD61]) = -1;
                          LOBYTE(STACK[0xD63]) = 7;
                          LOWORD(STACK[0xD69]) = -1;
                          LOBYTE(STACK[0xD6B]) = 7;
                        }
                        *(_QWORD *)&v509 = &STACK[0xAE0];
                        *((_QWORD *)&v509 + 1) = &a83;
                        re::TextManager::render(v405, (unsigned int *)&STACK[0xB60], (uint64_t)&STACK[0xD60], (uint64_t)&STACK[0xA60], *(_QWORD *)v77, v509, &STACK[0xA28], v396, v503, 0);
                        if (!v400)
                          break;
                        ++v395;
                        v396 += 128;
                        v400 -= 128;
                      }
                      while (v395 < v495);
                    }
                    re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&STACK[0xA60]);
                    v81 = (unint64_t)&a83;
                    goto LABEL_341;
                  }
                  goto LABEL_493;
                }
LABEL_492:
                *(_QWORD *)(v81 + 128) = 0;
                *(_OWORD *)&STACK[0xB90] = 0u;
                *(_OWORD *)&STACK[0xBA0] = 0u;
                *(_OWORD *)&STACK[0xB70] = 0u;
                *(_OWORD *)&STACK[0xB80] = 0u;
                *(_OWORD *)&STACK[0xB60] = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                LODWORD(STACK[0xD60]) = 136315906;
                *(_QWORD *)(v79 + 4) = "operator[]";
                LOWORD(STACK[0xD6C]) = 1024;
                *(_DWORD *)(v79 + 14) = 789;
                LOWORD(STACK[0xD72]) = 2048;
                *(_QWORD *)(v79 + 20) = 0;
                LOWORD(STACK[0xD7C]) = 2048;
                *(_QWORD *)(v79 + 30) = 0;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_493:
                *(_QWORD *)(v80 + 80) = 0;
                *(_OWORD *)(v79 + 48) = 0u;
                *(_OWORD *)(v79 + 64) = 0u;
                *(_OWORD *)(v79 + 16) = 0u;
                *(_OWORD *)(v79 + 32) = 0u;
                *(_OWORD *)v79 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                LODWORD(STACK[0xA70]) = 136315906;
                *(_QWORD *)(v81 + 132) = "operator[]";
                LOWORD(STACK[0xA7C]) = 1024;
                *(_DWORD *)(v81 + 142) = 789;
                LOWORD(STACK[0xA82]) = 2048;
                *(_QWORD *)(v81 + 148) = 1;
                LOWORD(STACK[0xA8C]) = 2048;
                *(_QWORD *)(v81 + 158) = 1;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_494:
                *(_QWORD *)v80 = 0;
                *(_OWORD *)(v79 + 48) = 0u;
                *(_OWORD *)(v79 + 64) = 0u;
                *(_OWORD *)(v79 + 16) = 0u;
                *(_OWORD *)(v79 + 32) = 0u;
                *(_OWORD *)v79 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                LODWORD(STACK[0xA70]) = 136315906;
                *(_QWORD *)(v81 + 132) = "operator[]";
                LOWORD(STACK[0xA7C]) = 1024;
                *(_DWORD *)(v81 + 142) = 789;
                LOWORD(STACK[0xA82]) = 2048;
                *(_QWORD *)(v81 + 148) = 0;
                LOWORD(STACK[0xA8C]) = 2048;
                *(_QWORD *)(v81 + 158) = 0;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_495;
              }
LABEL_491:
              re::internal::assertLog((re::internal *)6, v359, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 5, v362);
              _os_crash();
              __break(1u);
              goto LABEL_492;
            }
LABEL_490:
            re::internal::assertLog((re::internal *)6, v359, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 4, v362);
            _os_crash();
            __break(1u);
            goto LABEL_491;
          }
LABEL_489:
          re::internal::assertLog((re::internal *)6, v359, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 3, v362);
          _os_crash();
          __break(1u);
          goto LABEL_490;
        }
LABEL_488:
        re::internal::assertLog((re::internal *)6, v359, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 2, v362);
        _os_crash();
        __break(1u);
        goto LABEL_489;
      }
LABEL_487:
      re::internal::assertLog((re::internal *)6, v359, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, v362);
      _os_crash();
      __break(1u);
      goto LABEL_488;
    }
LABEL_486:
    re::internal::assertLog((re::internal *)6, v359, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, v362);
    _os_crash();
    __break(1u);
    goto LABEL_487;
  }
LABEL_341:
  if ((_QWORD)a83 && *(_QWORD *)(v81 + 32))
    (*(void (**)(void))(*(_QWORD *)a83 + 40))();
  if (STACK[0xAE0])
  {
    if (STACK[0xB00])
      (*(void (**)(unint64_t))(*(_QWORD *)STACK[0xAE0] + 40))(STACK[0xAE0]);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&__p);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)23>::end((uint64_t)&STACK[0xA38]);
}

void re::RenderGraphProfilerOverlayNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::MaterialParameterBlock *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (*(_QWORD *)(a1 + 272))
  {
    v4 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 264));
    if (v4)
    {
      v5 = *(re::MaterialParameterBlock **)(v4 + 1672);
      if (v5)
      {
        v6 = *(_QWORD *)(a1 + 272);
        if (v6)
          v7 = *(_QWORD *)(v6 + 664);
        else
          v7 = 0;
        v8 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
        v10 = v7 ^ (v8 >> 31) ^ v8;
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v5, &v9);
        re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, &v10, &v9);
        if (v9)

      }
    }
  }
}

void re::RenderGraphProfilerOverlayNode::executeSystemHUDRendering(re::RenderGraphContext &)::$_0::operator()(uint64_t *a1, int a2, int a3, int a4, _QWORD *a5)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  double v16;
  int v17;
  int v18;
  int v19;
  float v20;
  int v21;
  int v22;
  float v23;
  double v24;
  re::TextManager *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  char v34;
  unsigned int v35[13];
  unint64_t v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _BYTE v46[16];
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  re::StringID::invalid((re::StringID *)v46);
  v47 = 0x3F8000003F800000;
  v48 = 0x3F8000003F800000;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = -1;
  re::StringID::invalid((re::StringID *)v36);
  v40 = 0u;
  v41 = 0u;
  v43 = 0;
  v44 = 0;
  v42 = -1;
  v45 = re::kInvalidStringRenderHandle;
  v11 = *(_OWORD *)(v10 + 352);
  v38 = 0u;
  v39 = 0u;
  v37 = v11;
  HIDWORD(v37) = 1065353216;
  re::StringID::operator=(v36, (uint64_t *)(*(_QWORD *)(a1[1] + 8) + 8));
  re::TextManager::drawDynamicText(*(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 72), (uint64_t)v46, a5, (uint64_t)v36);
  v12 = a1[1];
  v13 = *(_DWORD *)a1[2];
  v14 = *(_DWORD *)a1[3];
  if (v14 >= 0)
    v15 = *(_DWORD *)a1[3];
  else
    v15 = v14 + 1;
  v16 = (double)-(v15 >> 1);
  v17 = a4 / v13;
  v18 = *(_DWORD *)a1[4];
  if (v18 >= 0)
    v19 = *(_DWORD *)a1[4];
  else
    v19 = v18 + 1;
  v24 = (double)-(v19 >> 1);
  v20 = v16 + 1.0 / (double)v13 * (double)v14 * (double)(a4 % v13);
  v21 = v14 / v13;
  v22 = *(_DWORD *)a1[5];
  v23 = v24 + 1.0 / (double)v22 * (double)v18 * (double)(v17 + 1);
  *(float *)&v24 = *(float *)(v10 + 380) * (float)(v21 / a3);
  if (*(float *)&v24 > (float)(*(float *)(v10 + 376) * (float)(v18 / v22 / a2)))
    *(float *)&v24 = *(float *)(v10 + 376) * (float)(v18 / v22 / a2);
  *(float *)&v24 = *(float *)a1[6] * *(float *)&v24;
  __asm { FMOV            V5.4S, #1.0 }
  *(_QWORD *)&_Q5 = __PAIR64__(LODWORD(v23), LODWORD(v20));
  v49 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)&v24);
  v50 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(*(int32x2_t *)&v24, 0), 0x20uLL).i32);
  v51 = xmmword_2260E5F40;
  v52 = _Q5;
  v30 = *(re::TextManager **)(*(_QWORD *)(v12 + 8) + 72);
  re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v12, *(re::RenderGraphNodeBase **)(v12 + 40), (uint64_t)v35);
  v31 = *(_QWORD *)a1[7];
  if (v31)
  {
    v32 = *(_OWORD *)(v31 + 8);
    v34 = *(_BYTE *)(v31 + 24);
    v33 = v32;
  }
  else
  {
    *(_QWORD *)&v33 = 134217472;
    *((_QWORD *)&v33 + 1) = 134217472;
    v34 = 0;
  }
  re::TextManager::render(v30, v35, (uint64_t)&v33, a1[8], *(_QWORD *)a1[1], *(_OWORD *)(a1 + 9), (_BYTE *)a1[11], (uint64_t)v46, *(_BYTE *)a1[12], 0);
  re::StringID::destroyString((re::StringID *)v36);
  re::StringID::destroyString((re::StringID *)v46);
}

uint64_t re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_0::operator()(uint64_t result, uint64_t a2, unint64_t *a3, _DWORD *a4, double a5, double a6, float a7)
{
  _QWORD *v7;
  unint64_t v8;
  float32x4_t v9;
  __int128 v15;
  float32x4_t v16;
  _OWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  _OWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  __int128 v27;
  _OWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  _OWORD *v45;
  __int128 v46;

  if (*(float *)&a5 > 1.0)
    *(float *)&a5 = 1.0;
  if (*(float *)&a6 < 0.0)
    *(float *)&a6 = 0.0;
  v7 = *(_QWORD **)(result + 16);
  v8 = v7[1];
  if (v8 <= *a3)
  {
    re::internal::assertLog((re::internal *)6, a2, a5, a6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *a3, v8);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  v9 = vmulq_n_f32(*(float32x4_t *)*(_QWORD *)result, *(float *)&a5);
  __asm { FMOV            V0.4S, #1.0 }
  HIDWORD(v15) = HIDWORD(_Q0);
  *(float *)&v15 = **(float **)(result + 24) + a7;
  *((float *)&v15 + 1) = **(float **)(result + 32) - (float)(**(float **)(result + 40) * (float)(int)a2);
  v16 = vaddq_f32(v9, vmulq_n_f32(*(float32x4_t *)*(_QWORD *)(result + 8), *(float *)&a6));
  DWORD2(v15) = *a4;
  v17 = (_OWORD *)(*v7 + 32 * *a3);
  *v17 = v15;
  v17[1] = v16;
  v18 = *(_QWORD **)(result + 16);
  v19 = *a3 + 1;
  v20 = v18[1];
  if (v20 <= v19)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v19, v20);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  HIDWORD(v21) = HIDWORD(_Q0);
  LODWORD(v21) = **(_DWORD **)(result + 24);
  *((float *)&v21 + 1) = **(float **)(result + 32) - (float)(**(float **)(result + 40) * (float)(int)a2);
  DWORD2(v21) = *a4;
  v22 = (_OWORD *)(*v18 + 32 * v19);
  *v22 = v21;
  v22[1] = v16;
  v23 = *(_QWORD **)(result + 16);
  v24 = *a3 + 2;
  v25 = v23[1];
  if (v25 <= v24)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v24, v25);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  v26 = (float)(a2 + 1);
  HIDWORD(v27) = HIDWORD(_Q0);
  LODWORD(v27) = **(_DWORD **)(result + 24);
  *((float *)&v27 + 1) = **(float **)(result + 32) - (float)(**(float **)(result + 40) * v26);
  DWORD2(v27) = *a4;
  v28 = (_OWORD *)(*v23 + 32 * v24);
  *v28 = v27;
  v28[1] = v16;
  v29 = *(_QWORD **)(result + 16);
  v30 = *a3 + 3;
  v31 = v29[1];
  if (v31 <= v30)
  {
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v30, v31);
    _os_crash();
    __break(1u);
    goto LABEL_18;
  }
  *(float *)&_Q0 = **(float **)(result + 24) + a7;
  *((float *)&_Q0 + 1) = **(float **)(result + 32) - (float)(**(float **)(result + 40) * v26);
  DWORD2(_Q0) = *a4;
  v32 = (_OWORD *)(*v29 + 32 * v30);
  *v32 = _Q0;
  v32[1] = v16;
  v33 = *(_QWORD **)(result + 16);
  v34 = *a3;
  v35 = v33[1];
  if (v35 <= *a3)
  {
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v34, v35);
    _os_crash();
    __break(1u);
    goto LABEL_19;
  }
  v36 = v34 + 4;
  if (v35 <= v34 + 4)
  {
LABEL_19:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v36, v35);
    _os_crash();
    __break(1u);
    goto LABEL_20;
  }
  v37 = (_OWORD *)(*v33 + 32 * v34);
  v38 = (_OWORD *)(*v33 + 32 * v36);
  v39 = v37[1];
  *v38 = *v37;
  v38[1] = v39;
  v40 = *(_QWORD **)(result + 16);
  v41 = *a3 + 2;
  v42 = v40[1];
  if (v42 <= v41)
  {
LABEL_20:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v41, v42);
    _os_crash();
    __break(1u);
    goto LABEL_21;
  }
  v43 = *a3 + 5;
  if (v42 > v43)
  {
    v44 = (_OWORD *)(*v40 + 32 * v41);
    v45 = (_OWORD *)(*v40 + 32 * v43);
    v46 = v44[1];
    *v45 = *v44;
    v45[1] = v46;
    *a3 += 6;
    *(float *)a4 = *(float *)a4 + 0.01;
    return result;
  }
LABEL_21:
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v43, v42);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::RenderGraphProfilerOverlayNode::executeMiniHUDRendering(re::RenderGraphContext &)::$_1::operator()(uint64_t *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int32x2_t v9;
  re::TextManager *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  unsigned int v20[13];
  unint64_t v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  re::StringID::invalid((re::StringID *)v31);
  v32 = 0x3F8000003F800000;
  v33 = 0x3F8000003F800000;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = -1;
  re::StringID::invalid((re::StringID *)v21);
  v25 = 0u;
  v26 = 0u;
  v28 = 0;
  v29 = 0;
  v27 = -1;
  v30 = re::kInvalidStringRenderHandle;
  v7 = *(_OWORD *)(v6 + 384);
  v23 = 0u;
  v24 = 0u;
  v22 = v7;
  HIDWORD(v22) = _MergedGlobals_444;
  re::StringID::operator=(v21, (uint64_t *)(*(_QWORD *)(a1[1] + 8) + 8));
  re::TextManager::drawDynamicText(*(_QWORD *)(*(_QWORD *)(a1[1] + 8) + 72), (uint64_t)v31, a3, (uint64_t)v21);
  v8 = a1[1];
  *(float *)v9.i32 = *(float *)(v6 + 372) * 32.0;
  __asm { FMOV            V5.4S, #1.0 }
  *(float *)&_Q5 = *(float *)a1[2] + 8.0;
  *((float *)&_Q5 + 1) = (float)(*(float *)a1[4] + (float)(*(float *)a1[5] / -3.0))
                       - (float)(*(float *)a1[5] * (float)a2);
  v34 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)v9.i32);
  v35 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(v9, 0), 0x20uLL).i32);
  v36 = xmmword_2260E5F40;
  v37 = _Q5;
  v15 = *(re::TextManager **)(*(_QWORD *)(v8 + 8) + 72);
  re::RenderGraphContext::rtInfo((re::RenderGraphContext *)v8, *(re::RenderGraphNodeBase **)(v8 + 40), (uint64_t)v20);
  v16 = *(_QWORD *)a1[7];
  if (v16)
  {
    v17 = *(_OWORD *)(v16 + 8);
    v19 = *(_BYTE *)(v16 + 24);
    v18 = v17;
  }
  else
  {
    *(_QWORD *)&v18 = 134217472;
    *((_QWORD *)&v18 + 1) = 134217472;
    v19 = 0;
  }
  re::TextManager::render(v15, v20, (uint64_t)&v18, a1[8], *(_QWORD *)a1[1], *(_OWORD *)(a1 + 9), (_BYTE *)a1[11], (uint64_t)v31, *(_BYTE *)a1[12], 0);
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v31);
}

uint64_t std::vector<re::RenderText>::push_back[abi:nn180100](uint64_t *a1, StringID *a2)
{
  uint64_t *v4;
  unint64_t v5;
  re::StringID *v6;
  uint64_t result;
  StringID v8;
  StringID v9;
  StringID v10;
  StringID v11;
  StringID v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  StringID v20;
  StringID v21;
  StringID v22;
  StringID v23;
  StringID v24;
  _QWORD v25[5];

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = (re::StringID *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v14 = ((uint64_t)v6 - *a1) >> 7;
    if ((unint64_t)(v14 + 1) >> 57)
      abort();
    v15 = v5 - *a1;
    v16 = v15 >> 6;
    if (v15 >> 6 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFF80)
      v17 = 0x1FFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v25[4] = v4;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::RenderText>>(v17);
    else
      v18 = 0;
    v19 = v17 + (v14 << 7);
    v25[0] = v17;
    v25[1] = v19;
    v25[3] = v17 + (v18 << 7);
    re::StringID::StringID((re::StringID *)v19, a2);
    v21 = a2[2];
    v20 = a2[3];
    *(StringID *)(v19 + 16) = a2[1];
    *(StringID *)(v19 + 32) = v21;
    *(StringID *)(v19 + 48) = v20;
    v22 = a2[4];
    v23 = a2[5];
    v24 = a2[6];
    *(_QWORD *)(v19 + 112) = *(_QWORD *)&a2[7].var0;
    *(StringID *)(v19 + 80) = v23;
    *(StringID *)(v19 + 96) = v24;
    *(StringID *)(v19 + 64) = v22;
    v25[2] = v19 + 128;
    std::vector<re::RenderText>::__swap_out_circular_buffer(a1, v25);
    v13 = a1[1];
    result = std::__split_buffer<re::RenderText>::~__split_buffer((uint64_t)v25);
  }
  else
  {
    result = (uint64_t)re::StringID::StringID(v6, a2);
    v8 = a2[1];
    v9 = a2[3];
    *(StringID *)(result + 32) = a2[2];
    *(StringID *)(result + 48) = v9;
    *(StringID *)(result + 16) = v8;
    v10 = a2[4];
    v11 = a2[5];
    v12 = a2[6];
    *(_QWORD *)(result + 112) = *(_QWORD *)&a2[7].var0;
    *(StringID *)(result + 80) = v11;
    *(StringID *)(result + 96) = v12;
    *(StringID *)(result + 64) = v10;
    v13 = result + 128;
  }
  a1[1] = v13;
  return result;
}

uint64_t *re::allocInfo_RenderGraphProfilerOverlayNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F850);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F850))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F870, 0);
    *(uint64_t *)((char *)&qword_25411F880 + 6) = 0;
    qword_25411F880 = 0;
    qword_25411F890 = 0;
    qword_25411F898 = 0xFFFFFFFFLL;
    qword_25411F870 = (uint64_t)&off_24ED7DAA8;
    qword_25411F8A0 = (uint64_t)"RenderGraphProfilerOverlayNode";
    dword_25411F8A8 = 0;
    xmmword_25411F8B0 = 0u;
    unk_25411F8C0 = 0u;
    xmmword_25411F8D0 = 0u;
    qword_25411F8E0 = 0;
    __cxa_guard_release(&qword_25411F850);
  }
  return &qword_25411F870;
}

void re::initInfo_RenderGraphProfilerOverlayNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x88E0128837D64CE2;
  v14[1] = "RenderGraphProfilerOverlayNode";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F858);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F858);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F860 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "profilerMaterialAsset";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F868 = v12;
      __cxa_guard_release(&qword_25411F858);
    }
  }
  *((_QWORD *)this + 2) = 0x1A000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411F860;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphProfilerOverlayNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphProfilerOverlayNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphProfilerOverlayNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphProfilerOverlayNode>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

double re::internal::defaultConstruct<re::RenderGraphProfilerOverlayNode>(int a1, int a2, re::RenderGraphProfilerOverlayNode *this)
{
  double result;

  *(_QWORD *)&result = re::RenderGraphProfilerOverlayNode::RenderGraphProfilerOverlayNode(this).n128_u64[0];
  return result;
}

void re::internal::defaultDestruct<re::RenderGraphProfilerOverlayNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 264));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a3);
}

void re::internal::defaultDestructV2<re::RenderGraphProfilerOverlayNode>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 264));
  re::RenderGraphNode::~RenderGraphNode((re::RenderGraphNode *)a1);
}

uint64_t re::introspect_RenderGraphProfilerOverlayNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphProfilerOverlayNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphProfilerOverlayNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphProfilerOverlayNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphProfilerOverlayNode>, this);
}

void re::ProfilerOverlayRenderGraphProvider::~ProfilerOverlayRenderGraphProvider(re::ProfilerOverlayRenderGraphProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphProfilerOverlayNode::~RenderGraphProfilerOverlayNode(re::RenderGraphProfilerOverlayNode *this)
{
  re::AssetHandle::~AssetHandle((re::RenderGraphProfilerOverlayNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  re::AssetHandle::~AssetHandle((re::RenderGraphProfilerOverlayNode *)((char *)this + 264));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::ProfilerMiniHudStatistics::copy(uint64_t a1, uint64_t a2)
{
  re::DynamicString *result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 56), (re::DynamicString *)(a2 + 56));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 88), (re::DynamicString *)(a2 + 88));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 120), (re::DynamicString *)(a2 + 120));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 152), (re::DynamicString *)(a2 + 152));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 184), (re::DynamicString *)(a2 + 184));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 216), (re::DynamicString *)(a2 + 216));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 248), (re::DynamicString *)(a2 + 248));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 280), (re::DynamicString *)(a2 + 280));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 312), (re::DynamicString *)(a2 + 312));
  re::DynamicString::operator=((re::DynamicString *)(a1 + 344), (re::DynamicString *)(a2 + 344));
  result = re::DynamicString::operator=((re::DynamicString *)(a1 + 376), (re::DynamicString *)(a2 + 376));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t *std::vector<re::RenderText>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_QWORD *)(v2 + v5 - 128);
      *(_QWORD *)(v6 - 128) = *(_QWORD *)(v4 + v5 - 128) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
      *(_QWORD *)(v6 - 128) = *(_QWORD *)(v2 + v5 - 128) & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
      *(_QWORD *)(v6 - 120) = *(_QWORD *)(v2 + v5 - 120);
      *(_QWORD *)(v7 - 128) = 0;
      *(_QWORD *)(v7 - 120) = &str_110;
      v9 = *(_QWORD *)(v2 + v5 - 16);
      v10 = *(_OWORD *)(v2 + v5 - 64);
      v11 = *(_OWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 32) = v11;
      *(_OWORD *)(v6 - 64) = v10;
      v13 = *(_OWORD *)(v2 + v5 - 96);
      v12 = *(_OWORD *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_OWORD *)(v6 - 96) = v13;
      *(_OWORD *)(v6 - 80) = v12;
      *(_QWORD *)(v6 - 16) = v9;
      v5 -= 128;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v14 = *result;
  *result = v4;
  a2[1] = v14;
  v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::RenderText>>(unint64_t a1)
{
  if (a1 >> 57)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(a1 << 7);
}

uint64_t std::__split_buffer<re::RenderText>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 128;
    re::StringID::destroyString((re::StringID *)(i - 128));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 re::RenderGraphProfilerOverlayNode::RenderGraphProfilerOverlayNode(re::RenderGraphProfilerOverlayNode *this)
{
  re::RenderGraphNode *v1;
  __n128 result;

  v1 = re::RenderGraphNode::RenderGraphNode(this);
  *((_DWORD *)v1 + 64) = 1;
  *(_QWORD *)v1 = &off_24ED831A0;
  *(_OWORD *)((char *)v1 + 264) = 0u;
  *(_OWORD *)((char *)v1 + 280) = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  *((__n128 *)v1 + 19) = result;
  *((_OWORD *)v1 + 20) = xmmword_226195820;
  *((_QWORD *)v1 + 42) = 0x3F33333341A00000;
  *((_DWORD *)v1 + 86) = 1061997773;
  *((_OWORD *)v1 + 22) = xmmword_22611CBB0;
  *((_OWORD *)v1 + 23) = xmmword_226195830;
  *((__n128 *)v1 + 24) = result;
  *((_DWORD *)v1 + 100) = 1050253722;
  return result;
}

uint64_t *re::allocInfo_BtStencilPrepassNode(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_445);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_445))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F908, 0);
    *(uint64_t *)((char *)&qword_25411F918 + 6) = 0;
    qword_25411F918 = 0;
    qword_25411F928 = 0;
    qword_25411F930 = 0xFFFFFFFFLL;
    qword_25411F908 = (uint64_t)&off_24ED7DAA8;
    qword_25411F938 = (uint64_t)"BtStencilPrepassNode";
    dword_25411F940 = 0;
    xmmword_25411F948 = 0u;
    unk_25411F958 = 0u;
    xmmword_25411F968 = 0u;
    qword_25411F978 = 0;
    __cxa_guard_release(&_MergedGlobals_445);
  }
  return &qword_25411F908;
}

void re::initInfo_BtStencilPrepassNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x6343F9729E3C5C18;
  v14[1] = "BtStencilPrepassNode";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F8F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F8F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F8F8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "debugPass";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F900 = v12;
      __cxa_guard_release(&qword_25411F8F0);
    }
  }
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25411F8F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::BtStencilPrepassNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::BtStencilPrepassNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::BtStencilPrepassNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::BtStencilPrepassNode>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::BtStencilPrepassNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED28F50;
  *((_BYTE *)result + 256) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::BtStencilPrepassNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::BtStencilPrepassNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED28F50;
  *((_BYTE *)result + 256) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::BtStencilPrepassNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_BtStencilPrepassNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BtStencilPrepassNode", (uint64_t (*)(re::internal *))re::allocInfo_BtStencilPrepassNode, (re::IntrospectionBase *(*)(void))re::initInfo_BtStencilPrepassNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::BtStencilPrepassNode>, this);
}

void re::ProjectiveShadowBuilder::MutableState::~MutableState(re::ProjectiveShadowBuilder::MutableState *this)
{
  uint64_t v2;

  if (*(_QWORD *)this)
  {

    *(_QWORD *)this = 0;
  }
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {

    *((_QWORD *)this + 1) = 0;
    if (*(_QWORD *)this)
    {

      *(_QWORD *)this = 0;
    }
  }
}

void re::ProjectiveShadowBuilder::build(re::RenderManager *this@<X2>, uint64_t a2@<X1>, unint64_t a3@<X3>, uint32x2_t *a4@<X8>)
{
  _BYTE *v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *i;
  re *v14;
  uint64_t v15;
  uint64_t *v16;
  re::MaterialParameterBlock *v17;
  re::MaterialParameterBlock *v18;
  uint64_t *v19;
  re::MaterialParameterBlock *v20;
  re::MaterialParameterBlock *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  NSObject *v40;
  const char *v41;
  unsigned int v42;
  unsigned int v43;
  uint32x2_t v44;
  unsigned int v46;
  int v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t j;
  uint64_t v60;
  float32x2_t v61;
  uint64_t v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float v65;
  float v66;
  BOOL v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  float v72;
  float v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t k;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint32x2_t v88;
  float32x4_t v89;
  unint64_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint32x2_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  signed int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _anonymous_namespace_ *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  int32x2_t v125;
  unint64_t v126;
  re::MaterialParameterTableBuilder *v127;
  unint64_t v128;
  int v129;
  float32x2_t v130;
  float32x2_t v131;
  unint64_t v132;
  uint64_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  int32x2_t v139;
  float v140;
  __n128 v141;
  int32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  __n128 v145;
  unint64_t v146;
  uint64_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  float32x4_t v152;
  int8x16_t v153;
  int32x4_t v154;
  float32x4_t v155;
  int8x16_t v156;
  float32x4_t v157;
  int8x16_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  float32x4_t v163;
  float v164;
  float v165;
  float32x4_t v166;
  uint64_t v167;
  int8x16_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float v174;
  float v175;
  float32x4_t v177;
  float v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  re::MaterialParameterBlock *v183;
  float32x2_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  float32x2_t v188;
  uint64_t v189;
  float v190;
  float v191;
  unsigned int v192;
  unsigned int v193;
  unint64_t v194;
  unsigned int v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t m;
  float v201;
  re::MaterialParameterTableBuilder *v202;
  void *v203;
  unsigned int v204;
  unint64_t v205;
  uint64_t ii;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t n;
  float32x4_t v216;
  re::MaterialParameterBlock *v217;
  float32x2_t *v218;
  __int128 v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  float32x4_t v223;
  int32x2_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  _QWORD *v230;
  _QWORD *v231;
  int8x16_t v232;
  float32x4_t v233;
  _QWORD *v234;
  uint64_t *v235;
  uint64_t v236;
  BOOL v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  float32x2_t v251;
  unint64_t v252;
  uint64_t *v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t *v256;
  float32x4_t v258;
  float32x4_t v259;
  uint32x2_t *v260;
  uint64_t *v261;
  __n128 v262;
  int32x4_t v263;
  uint64_t v264;
  _QWORD *v265;
  unsigned int *v266;
  float v267;
  _DWORD *v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  float32x4_t v273;
  uint64_t v274;
  int v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x2_t *v284;
  float32x4_t v285;
  int32x4_t v286;
  float32x4_t v287;
  int32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float v291;
  _anonymous_namespace_ *v292;
  float v293;
  float32x4_t v294;
  __n128 v295;
  uint64_t v296;
  float32x4_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  float v307;
  float32x4_t *v308;
  float32x4_t v309;
  float v310;
  uint64_t v311;
  unsigned int v312;
  float32x4_t v313;
  uint32x2_t v314;
  unsigned int v315;
  float v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  unsigned int v320;
  float32x4_t v321;
  float32x4_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328[4];
  uint64_t v329[4];
  uint64_t v330[4];
  _OWORD v331[4];
  uint64_t v332[4];
  uint64_t v333[4];
  uint64_t v334[4];
  uint64_t v335[4];
  uint64_t v336[4];
  _QWORD v337[3];
  int v338;
  uint64_t v339;
  _QWORD v340[3];
  int v341;
  uint64_t v342;
  _QWORD v343[3];
  int v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  uint8_t buf[96];
  float32x4_t v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  char v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  _QWORD v362[4];
  char v363;
  char v364;
  __int128 v365;
  uint64_t v366;
  float32x2_t v367;
  int v368;
  __int128 v369;
  _BYTE v370[19];
  unint64_t v371;
  int32x4_t v372;
  __int128 v373;
  uint64_t v374;
  char v375;
  uint64_t v376;
  char v377;
  uint64_t v378;
  _BYTE v379[48];
  float32x4_t v380;
  uint64_t v381;

  v381 = *MEMORY[0x24BDAC8D0];
  v8 = re::RenderManager::perFrameAllocator(this);
  v298 = a2;
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)buf = v8;
  memset(&buf[8], 0, 52);
  *(_QWORD *)&buf[60] = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&buf[24], v8, 3);
  *(_OWORD *)a4->i8 = 0u;
  *(_OWORD *)a4[2].i8 = 0u;
  v264 = v8;
  a4[1] = (uint32x2_t)v8;
  a4[2] = (uint32x2_t)v9;
  v260 = a4;
  if (v9)
  {
    if (v9 >= 0x38E38E38E38E38FLL)
    {
LABEL_241:
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 72, v9);
      _os_crash();
      __break(1u);
LABEL_242:
      re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_243:
      *(_QWORD *)&v331[0] = 0;
      memset(buf, 0, 80);
      v90 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v379 = 136315906;
      *(_QWORD *)(v4 + 4) = "operator[]";
      *(_WORD *)&v379[12] = 1024;
      *(_DWORD *)(v4 + 14) = 468;
      *(_WORD *)&v379[18] = 2048;
      *(_QWORD *)(v4 + 20) = a3;
      *(_WORD *)&v379[28] = 2048;
      *(_QWORD *)(v4 + 30) = a4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_244:
      *(_QWORD *)&v331[0] = 0;
      memset(buf, 0, 80);
      v250 = v90;
      v104 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v379 = 136315906;
      *(_QWORD *)(v4 + 4) = "operator[]";
      *(_WORD *)&v379[12] = 1024;
      *(_DWORD *)(v4 + 14) = 468;
      *(_WORD *)&v379[18] = 2048;
      *(_QWORD *)(v4 + 20) = v250;
      *(_WORD *)&v379[28] = 2048;
      *(_QWORD *)(v4 + 30) = a4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_245:
      re::internal::assertLog((re::internal *)6, v105, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 96, v104);
      _os_crash();
      __break(1u);
LABEL_246:
      re::internal::assertLog((re::internal *)4, v107, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_247:
      re::internal::assertLog((re::internal *)6, v111, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v104);
      _os_crash();
      __break(1u);
LABEL_248:
      re::internal::assertLog((re::internal *)4, v113, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_249:
      re::internal::assertLog((re::internal *)4, v124, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      _os_crash();
      __break(1u);
    }
    v11 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 72 * v9, 8);
    a4[3] = (uint32x2_t)v11;
    if (!v11)
      goto LABEL_242;
    for (i = (uint64_t *)v11; --v9; i += 9)
    {
      re::FixedArray<re::PlanarReceiverData::Bucket>::FixedArray(i, (uint64_t *)buf);
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable((uint64_t)(i + 3), (uint64_t)&buf[24]);
    }
    re::FixedArray<re::PlanarReceiverData::Bucket>::FixedArray(i, (uint64_t *)buf);
    re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable((uint64_t)(i + 3), (uint64_t)&buf[24]);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&buf[24]);
  v14 = (re *)re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(buf);
  v15 = a2;
  if (!*(_BYTE *)(a2 + 32))
    return;
  if (!*(_QWORD *)(a2 + 48))
  {
    v40 = *re::graphicsLogObjects(v14);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v41 = "ProjectiveShadowBuilder::build: Missing projective shadow material";
    goto LABEL_37;
  }
  if (!*(_QWORD *)(a2 + 56))
  {
    v40 = *re::graphicsLogObjects(v14);
    if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v41 = "ProjectiveShadowBuilder::build: Missing projective shadow receiver material";
LABEL_37:
    _os_log_impl(&dword_224FE9000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, 2u);
    return;
  }
  if (!*(_QWORD *)a3)
  {
    v16 = re::globalAllocators(v14);
    v17 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 1008, 8);
    v14 = re::MaterialParameterBlock::MaterialParameterBlock(v17, this);
    v15 = a2;
    v18 = *(re::MaterialParameterBlock **)a3;
    *(_QWORD *)a3 = v14;
    if (v18)
    {

      v15 = a2;
    }
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    v19 = re::globalAllocators(v14);
    v20 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 1008, 8);
    v21 = re::MaterialParameterBlock::MaterialParameterBlock(v20, this);
    v15 = a2;
    v22 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v21;
    if (v22)
    {

      v15 = a2;
    }
  }
  v4 = v379;
  v23 = *(_QWORD *)(v15 + 8);
  v24 = *(_QWORD *)(v15 + 16);
  v25 = v24 + 56 * v23;
  if (v23)
  {
    v26 = 0;
    v27 = 0;
    v28 = *(_QWORD *)(v15 + 16);
    while (1)
    {
      v29 = *(_QWORD *)(v28 + 40);
      if (v29)
        break;
LABEL_31:
      v28 += 56;
      if (v28 == v25)
        goto LABEL_39;
    }
    v30 = 0;
    v31 = *(_QWORD *)(v28 + 8);
    while (1)
    {
      v32 = v30 >> 2;
      if (v31 <= v30 >> 2)
        break;
      v33 = v28 + 24;
      if ((*(_BYTE *)(v28 + 16) & 1) == 0)
        v33 = *(_QWORD *)(v28 + 32);
      v34 = *(_QWORD *)(v33 + 8 * v32) + 120 * (v30 & 3);
      v35 = *(_QWORD *)(v34 + 56);
      if (v35)
      {
        v36 = *(_QWORD *)(v34 + 72);
        v37 = 96 * v35;
        v38 = (float *)(v36 + 12);
        do
        {
          v39 = *v38;
          v38 += 24;
          if (v39 < *(float *)(v15 + 268))
            ++v26;
          else
            ++v27;
          v37 -= 96;
        }
        while (v37);
      }
      if (++v30 == v29)
        goto LABEL_31;
    }
    *(_QWORD *)&v331[0] = 0;
    memset(buf, 0, 80);
    v24 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v379 = 136315906;
    *(_QWORD *)&v379[4] = "operator[]";
    *(_WORD *)&v379[12] = 1024;
    *(_DWORD *)&v379[14] = 866;
    *(_WORD *)&v379[18] = 2048;
    *(_QWORD *)&v379[20] = v32;
    *(_WORD *)&v379[28] = 2048;
    *(_QWORD *)&v379[30] = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_50;
  }
  v27 = 0;
  v26 = 0;
LABEL_39:
  v42 = 4 * v27;
  v43 = v26 + 4 * v27;
  v44 = *(uint32x2_t *)(v15 + 260);
  if (v44.i32[0])
    _ZF = HIDWORD(*(_QWORD *)(v15 + 260)) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
    if (v43 >= 5)
    {
      if (v43 > 0x10)
      {
LABEL_50:
        v44 = (uint32x2_t)0x40000000200;
        goto LABEL_51;
      }
      v46 = 512;
      v47 = 4;
    }
    else
    {
      v46 = 256;
      v47 = 2;
    }
    *(_DWORD *)(a3 + 16) = v47;
    v44 = (uint32x2_t)vdup_n_s32(v46);
  }
LABEL_51:
  v314 = v44;
  v251 = vcvt_f32_u32(v44);
  v48 = vdiv_f32((float32x2_t)vdup_lane_s32((int32x2_t)v251, 1), v251).f32[0];
  v49 = (int)((float)(sqrtf((float)v43 / v48) + 0.5) + 0.5);
  if ((v49 & 0xFFFFFFFE)
     * (float)((float)((float)((float)v49 * v48) * 0.5) + (float)((float)((float)v49 * v48) * 0.5)) < v42)
    ++v49;
  if (*(_DWORD *)(a3 + 16) <= v49)
    v50 = v49;
  else
    v50 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v50;
  *(_QWORD *)&buf[32] = 0;
  memset(buf, 0, 28);
  __asm { FMOV            V10.2S, #1.0 }
  v278 = a3;
  if (v23)
  {
    v55 = 0;
    v56 = 2 * v50;
    v310 = (float)(float)(v48 * (float)v50);
    *(float *)&v57 = (float)v50;
    *((float *)&v57 + 1) = v310;
    v318 = (float32x4_t)vdupq_lane_s64(v57, 0);
    do
    {
      v58 = *(_QWORD *)(v24 + 40);
      if (v58)
      {
        for (j = 0; j != v58; ++j)
        {
          v60 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v24, j);
          v62 = *(_QWORD *)(v60 + 56);
          if (v62)
          {
            v63 = *(float32x4_t **)(v60 + 72);
            v64 = &v63[6 * v62];
            v15 = v298;
            do
            {
              v65 = v63->f32[3];
              v66 = *(float *)(v15 + 268);
              if (v65 >= v66)
              {
                if (v55 % v56)
                  v67 = v55 % v56 + 4 > v56;
                else
                  v67 = 0;
                if (v67)
                {
                  do
                  {
                    *(_DWORD *)v379 = v55;
                    LODWORD(v55) = v55 + 1;
                    re::DynamicArray<int>::add(buf, v379);
                  }
                  while (v55 % v56);
                  v65 = v63->f32[3];
                  v15 = v298;
                  v66 = *(float *)(v298 + 268);
                }
                v68 = (v55 + 4);
                v69 = (v55 >> 1) % v50;
                v70 = v55 & 1 | (2 * (v55 / v56));
                v71 = v65 - v66;
                v72 = *(float *)(v15 + 272);
                if (v72 < 0.000001)
                  v72 = 0.000001;
                v73 = 1.0 - (float)(v71 / v72);
                if (v73 > 1.0)
                  v73 = 1.0;
                v61.f32[0] = v73 * 0.5;
                if (v73 < 0.0)
                  v61.f32[0] = 0.0;
                v74 = vcvt_f32_u32((uint32x2_t)__PAIR64__(v70, v69));
                v61 = (float32x2_t)vdupq_lane_s32((int32x2_t)v61, 0).u64[0];
                v75 = vsub_f32(vadd_f32(v74, (float32x2_t)0x4000000040000000), v61);
                *(float32x2_t *)v76.f32 = vadd_f32(v74, v61);
                *(float32x2_t *)&v76.u32[2] = v75;
                v61.i32[1] = v318.i32[1];
                v63[1] = vdivq_f32(v76, v318);
                v55 = v68;
              }
              v63 += 6;
            }
            while (v63 != v64);
          }
          else
          {
            v15 = v298;
          }
        }
      }
      v24 += 56;
    }
    while (v24 != v25);
    v77 = *(_QWORD *)(v15 + 8);
    v4 = v379;
    if (v77)
    {
      v78 = *(_QWORD *)(v15 + 16);
      v79 = v78 + 56 * v77;
      v319 = (float32x4_t)vdupq_lane_s64(__SPAIR64__(LODWORD(v310), (float)v50), 0);
      do
      {
        v80 = *(_QWORD *)(v78 + 40);
        if (v80)
        {
          for (k = 0; k != v80; ++k)
          {
            v82 = re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v78, k);
            v83 = *(_QWORD *)(v82 + 56);
            if (v83)
            {
              v84 = (float32x4_t *)(*(_QWORD *)(v82 + 72) + 16);
              v85 = 96 * v83;
              v15 = v298;
              do
              {
                if (v84[-1].f32[3] < *(float *)(v298 + 268))
                {
                  if (*(_QWORD *)&buf[16])
                  {
                    v86 = *(_DWORD *)(*(_QWORD *)&buf[32] + 4 * (*(_QWORD *)&buf[16] - 1));
                    v87 = v55;
                    --*(_QWORD *)&buf[16];
                    ++*(_DWORD *)&buf[24];
                    LODWORD(v55) = v86;
                  }
                  else
                  {
                    v87 = (v55 + 1);
                  }
                  v88.i32[0] = (v55 >> 1) % v50;
                  v88.i32[1] = v55 & 1 | (2 * (v55 / v56));
                  *(float32x2_t *)v89.f32 = vcvt_f32_u32(v88);
                  *(float32x2_t *)&v89.u32[2] = vadd_f32(*(float32x2_t *)v89.f32, _D10);
                  *v84 = vdivq_f32(v89, v319);
                  v55 = v87;
                }
                v84 += 6;
                v85 -= 96;
              }
              while (v85);
            }
            else
            {
              v15 = v298;
            }
          }
        }
        v78 += 56;
      }
      while (v78 != v79);
    }
    if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[32]);
      v15 = v298;
    }
  }
  *v260 = v314;
  if (*(_QWORD *)(v15 + 8))
  {
    v90 = 0;
    v91 = vrsqrte_f32((float32x2_t)1065353216);
    v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v91, v91)));
    v93 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, vmul_f32(v92, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v92, v92))).f32[0]);
    v258 = vnegq_f32(v93);
    v259 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v93, (int32x4_t)v93), (int8x16_t)v93, 0xCuLL);
    v267 = fabsf(v93.f32[2]);
    v273 = v93;
    v263 = (int32x4_t)COERCE_UNSIGNED_INT(-v93.f32[1]);
    v93.i32[0] = 0;
    v93.f32[1] = -v93.f32[2];
    v262 = (__n128)v93.u64[0];
    while (1)
    {
      a4 = (uint32x2_t *)v260[2];
      if ((unint64_t)a4 <= v90)
        goto LABEL_244;
      v94 = *(_QWORD *)(v15 + 16);
      v95 = v94 + 56 * v90;
      v96 = *(_QWORD *)(v95 + 40);
      v256 = (uint64_t *)(v95 + 40);
      if (v96)
      {
        v97 = v260[3];
        memset(buf, 0, 24);
        re::FixedArray<re::FixedArray<unsigned int>>::init<>((uint64_t *)buf, v264, v96);
        v253 = (uint64_t *)(*(_QWORD *)&v97 + 72 * v90);
        re::FixedArray<float>::operator=(v253, (uint64_t *)buf);
        re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(buf);
        v98 = *v256;
        if (*v256)
        {
          v99 = v90;
          v100 = 0;
          v101 = 0;
          v254 = v99;
          v9 = v94 + 56 * v99;
          do
            v100 += *(_DWORD *)(re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v9, v101++)+ 16);
          while (v98 != v101);
          if (v100)
            re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(*(_QWORD *)&v97 + 72 * v254 + 24, v100);
          v90 = v254;
          if (*v256)
            break;
        }
      }
LABEL_235:
      ++v90;
      v15 = v298;
      if (v90 >= *(_QWORD *)(v298 + 8))
        return;
    }
    v102 = 0;
    v103 = *(_QWORD *)&v97 + 72 * v254;
    v272 = v103 + 24;
    v265 = (_QWORD *)(v103 + 32);
    v266 = (unsigned int *)(v103 + 48);
    v261 = (uint64_t *)(v103 + 40);
    v268 = (_DWORD *)(v103 + 64);
    v252 = v9;
    while (1)
    {
      v271 = (_QWORD *)re::BucketArray<re::ProjectiveShadowBuilder::Input::PerSceneData,4ul>::operator[](v9, v102);
      v104 = v271[12];
      memset(&buf[8], 0, 20);
      *(_QWORD *)&buf[32] = 0;
      *(_QWORD *)buf = v264;
      re::DynamicArray<re::MeshScene>::setCapacity(buf, 0);
      memset(&buf[40], 0, 56);
      ++*(_DWORD *)&buf[24];
      *(_DWORD *)&buf[84] = 0x7FFFFFFF;
      v325 = 0;
      v323 = v264;
      v324 = v104;
      if (v104)
      {
        if (v104 >= 0x2AAAAAAAAAAAAABLL)
          goto LABEL_245;
        v106 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v264 + 32))(v264, 96 * v104, 8);
        v325 = v106;
        if (!v106)
          goto LABEL_246;
        v108 = v104 - 1;
        if (v104 != 1)
        {
          v109 = v106 + 48;
          v9 = 3;
          do
          {
            re::DynamicArray<re::MeshScene>::DynamicArray(v109 - 48, (uint64_t *)buf);
            *(_QWORD *)(v109 - 8) = *(_QWORD *)&buf[40];
            *(_OWORD *)v109 = 0u;
            *(_OWORD *)(v109 + 16) = 0u;
            *(_DWORD *)(v109 + 32) = 0;
            *(_QWORD *)(v109 + 36) = 0x7FFFFFFFLL;
            if (*(_QWORD *)&buf[48])
            {
              if (*(_DWORD *)&buf[76] <= 3u)
                v110 = 3;
              else
                v110 = *(_DWORD *)&buf[76];
              re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v109, *(uint64_t *)&buf[48], v110);
              re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v109, (uint64_t)&buf[48]);
            }
            v109 += 96;
            --v108;
          }
          while (v108);
          v106 = v109 - 48;
        }
        *(_QWORD *)(v106 + 32) = 0;
        *(_QWORD *)v106 = 0;
        *(_OWORD *)(v106 + 8) = 0u;
        *(_DWORD *)(v106 + 24) = 0;
        *(_QWORD *)v106 = *(_QWORD *)buf;
        *(_QWORD *)buf = 0;
        *(_QWORD *)(v106 + 8) = *(_QWORD *)&buf[8];
        *(_QWORD *)(v106 + 16) = *(_QWORD *)&buf[16];
        *(_OWORD *)&buf[8] = 0u;
        *(_QWORD *)(v106 + 32) = *(_QWORD *)&buf[32];
        *(_QWORD *)&buf[32] = 0;
        ++*(_DWORD *)&buf[24];
        ++*(_DWORD *)(v106 + 24);
        *(_QWORD *)(v106 + 40) = *(_QWORD *)&buf[40];
        *(_DWORD *)(v106 + 80) = 0;
        *(_OWORD *)(v106 + 48) = 0u;
        *(_OWORD *)(v106 + 64) = 0u;
        *(_QWORD *)(v106 + 84) = 0x7FFFFFFFLL;
        *(_QWORD *)(v106 + 48) = *(_QWORD *)&buf[48];
        *(_QWORD *)(v106 + 56) = *(_QWORD *)&buf[56];
        *(_OWORD *)&buf[48] = 0u;
        *(_QWORD *)(v106 + 64) = *(_QWORD *)&buf[64];
        *(_QWORD *)&buf[64] = 0;
        *(_DWORD *)(v106 + 72) = *(_DWORD *)&buf[72];
        *(_DWORD *)(v106 + 76) = *(_DWORD *)&buf[76];
        *(_DWORD *)(v106 + 80) = *(_DWORD *)&buf[80];
        *(_DWORD *)(v106 + 84) = *(_DWORD *)&buf[84];
        *(_OWORD *)&buf[72] = xmmword_2260F5A80;
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&buf[48]);
      re::DynamicArray<re::MeshScene>::deinit((uint64_t)buf);
      v104 = v271[12];
      v255 = v102;
      v276 = v104;
      if (v104)
      {
        if (v104 >= 0x666666666666667)
          goto LABEL_247;
        v112 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v264 + 32))(v264, 40 * v104, 8);
        if (!v112)
          goto LABEL_248;
        v114 = v112;
        v115 = v112;
        v116 = v104 - 1;
        if (v104 != 1)
        {
          v115 = v112;
          do
          {
            *(_QWORD *)(v115 + 32) = 0;
            *(_QWORD *)(v115 + 8) = 0;
            *(_QWORD *)(v115 + 16) = 0;
            *(_QWORD *)v115 = 0;
            *(_DWORD *)(v115 + 24) = 0;
            v115 += 40;
            --v116;
          }
          while (v116);
        }
        *(_QWORD *)(v115 + 32) = 0;
        *(_QWORD *)(v115 + 8) = 0;
        *(_QWORD *)(v115 + 16) = 0;
        *(_QWORD *)v115 = 0;
        *(_DWORD *)(v115 + 24) = 0;
      }
      else
      {
        v114 = 0;
      }
      a3 = v278;
      v117 = v298;
      v118 = v271[7];
      if (v118)
      {
        v119 = v271[9];
        v9 = 96 * v118;
        do
        {
          a4 = (uint32x2_t *)*(unsigned int *)(v119 + 32);
          if (v276 <= (unint64_t)a4)
            goto LABEL_238;
          v120 = (_anonymous_namespace_ *)(v114 + 40 * a4);
          v121 = v114;
          re::DynamicArray<re::ShadowClusterInfo>::add(v120, v119);
          v114 = v121;
          v117 = v298;
          v119 += 96;
          v9 -= 96;
        }
        while (v9);
      }
      v269 = *(_QWORD *)(v117 + 48);
      v270 = v114;
      v279 = *(_QWORD *)(v117 + 56);
      v291 = *(float *)(v117 + 256);
      v122 = *(_DWORD *)(v117 + 276);
      v123 = re::RenderManager::perFrameAllocator(this);
      v125.i32[1] = 925353388;
      v346 = xmmword_2261958F0;
      v347 = xmmword_226195900;
      v126 = v324;
      if (v324)
      {
        v127 = (re::MaterialParameterTableBuilder *)v123;
        v128 = 0;
        v129 = 0;
        *(float *)v125.i32 = (float)v122;
        v130 = vdiv_f32((float32x2_t)vdup_lane_s32(v125, 0), v251);
        v131 = vadd_f32(v130, v130);
        while (1)
        {
          v275 = v129;
          v277 = v128;
          v274 = v325;
          v292 = (_anonymous_namespace_ *)(v325 + 96 * v128);
          v311 = (uint64_t)v292 + 48;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v292 + 48, (uint64_t)v127, 3);
          v343[1] = 0;
          v343[2] = 0;
          v344 = 0;
          v345 = 0;
          v343[0] = v127;
          re::DynamicArray<float *>::setCapacity(v343, 0);
          ++v344;
          v340[1] = 0;
          v340[2] = 0;
          v341 = 0;
          v342 = 0;
          v340[0] = v127;
          re::DynamicArray<re::Event<re::NetworkSystem,unsigned long long,RESyncPendingCommitAction *>::Subscription>::setCapacity(v340);
          ++v341;
          v337[1] = 0;
          v337[2] = 0;
          v338 = 0;
          v339 = 0;
          v337[0] = v127;
          re::DynamicArray<re::AABB>::setCapacity(v337, 0);
          v132 = v277;
          ++v338;
          a4 = (uint32x2_t *)v271[12];
          if ((unint64_t)a4 <= v277)
            goto LABEL_239;
          v133 = v271[14] + 48 * v277;
          v134 = vmulq_f32(*(float32x4_t *)v133, *(float32x4_t *)v133);
          LODWORD(v293) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).u32[0];
          v297 = *(float32x4_t *)v133;
          v135 = *(float32x4_t *)v133;
          if (fabsf(v293) >= 1.0e-10)
          {
            v136 = vrsqrte_f32((float32x2_t)LODWORD(v293));
            v137 = vmul_f32(v136, vrsqrts_f32((float32x2_t)LODWORD(v293), vmul_f32(v136, v136)));
            v135 = vmulq_n_f32(v297, vmul_f32(v137, vrsqrts_f32((float32x2_t)LODWORD(v293), vmul_f32(v137, v137))).f32[0]);
          }
          v138 = vmulq_f32(v273, v135);
          v139 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).u64[0];
          if (*(float *)v139.i32 == -1.0
            || (v140 = (float)((float)(fabsf(*(float *)v139.i32) + 1.0) + 1.0) * 0.00001,
                *(float *)v139.i32 = *(float *)v139.i32 + 1.0,
                fabsf(*(float *)v139.i32) < v140))
          {
            if (v267 >= 0.00001)
            {
              v141 = v262;
              v141.n128_u32[2] = v273.u32[1];
            }
            else
            {
              v141 = (__n128)vtrn1q_s32(v263, (int32x4_t)v273);
            }
            v142 = (int32x4_t)vmulq_f32((float32x4_t)v141, (float32x4_t)v141);
            v142.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v142, 2), vadd_f32(*(float32x2_t *)v142.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v142.i8, 1))).u32[0];
            v143 = vrsqrte_f32((float32x2_t)v142.u32[0]);
            v144 = vmul_f32(v143, vrsqrts_f32((float32x2_t)v142.u32[0], vmul_f32(v143, v143)));
            v145 = (__n128)vmulq_n_f32((float32x4_t)v141, vmul_f32(v144, vrsqrts_f32((float32x2_t)v142.u32[0], vmul_f32(v144, v144))).f32[0]);
            v141.n128_u32[0] = 0;
          }
          else
          {
            v232 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), (int8x16_t)v135, 0xCuLL), v258), v135, v259);
            v141 = (__n128)vuzp1q_s32((int32x4_t)v232, (int32x4_t)v232);
            v233 = (float32x4_t)vextq_s8((int8x16_t)v141, v232, 0xCuLL);
            *(float *)v139.i32 = sqrtf(*(float *)v139.i32 + *(float *)v139.i32);
            v141.n128_f32[0] = *(float *)v139.i32 * 0.5;
            v145 = (__n128)vdivq_f32(v233, (float32x4_t)vdupq_lane_s32(v139, 0));
          }
          a4 = (uint32x2_t *)v277;
          if (v276 <= v277)
            goto LABEL_240;
          v146 = v270 + 40 * v277;
          v147 = *(_QWORD *)(v146 + 16);
          if (v147)
            break;
LABEL_198:
          *(_QWORD *)(v274 + 96 * v277 + 40) = v269;
          if (v337[0])
          {
            v124 = v339;
            if (v339)
              (*(void (**)(__n128, __n128))(*(_QWORD *)v337[0] + 40))(v141, v145);
          }
          if (v340[0])
          {
            v124 = v342;
            if (v342)
              (*(void (**)(__n128, __n128))(*(_QWORD *)v340[0] + 40))(v141, v145);
          }
          if (v343[0])
          {
            v124 = v345;
            if (v345)
              (*(void (**)(__n128, __n128))(*(_QWORD *)v343[0] + 40))(v141, v145);
          }
          v128 = (v275 + 1);
          v126 = v324;
          v129 = v275 + 1;
          if (v324 <= v128)
            goto LABEL_210;
        }
        v294 = *(float32x4_t *)(v133 + 16);
        v148 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v145, (int32x4_t)v145), (int8x16_t)v145, 0xCuLL);
        v149 = vnegq_f32((float32x4_t)v145);
        v150 = vmlaq_f32(vmulq_f32((float32x4_t)v145, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F10, v148);
        v151 = (int8x16_t)vaddq_f32(v150, v150);
        v152 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v151, (int32x4_t)v151), v151, 0xCuLL);
        v153 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v152, (int32x4_t)v152), (int8x16_t)v152, 0xCuLL), v149), v152, v148);
        v154 = (int32x4_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v152, v141.n128_f32[0]), (float32x4_t)xmmword_2260E5F10), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v153, (int32x4_t)v153), v153, 0xCuLL));
        v155 = vmlaq_f32(vmulq_f32((float32x4_t)v145, (float32x4_t)xmmword_2261176C0), (float32x4_t)xmmword_226108EE0, v148);
        v156 = (int8x16_t)vaddq_f32(v155, v155);
        v157 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v156, (int32x4_t)v156), v156, 0xCuLL);
        v158 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v157, (int32x4_t)v157), (int8x16_t)v157, 0xCuLL), v149), v157, v148);
        v159 = (int32x4_t)vaddq_f32(vaddq_f32(vmulq_n_f32(v157, v141.n128_f32[0]), (float32x4_t)xmmword_226108EE0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v158, (int32x4_t)v158), v158, 0xCuLL));
        v160 = vzip1q_s32(v154, (int32x4_t)v297);
        v161 = vzip1q_s32(v154, v159);
        v161.i32[2] = *(_OWORD *)v133;
        v290 = (float32x4_t)v161;
        v162 = vzip2q_s32(v154, v159);
        v162.i32[2] = *(_QWORD *)(v133 + 8);
        v289 = (float32x4_t)v162;
        v162.i32[3] = 0;
        v162.i64[0] = __PAIR64__(v159.u32[1], v154.u32[1]);
        v163.i64[0] = __PAIR64__(v159.u32[2], v154.u32[2]);
        v154.i32[1] = v159.i32[0];
        v154.i64[1] = v297.u32[0];
        v162.i32[2] = HIDWORD(*(_QWORD *)v133);
        v285 = (float32x4_t)vzip2q_s32(v160, vdupq_lane_s32(*(int32x2_t *)v159.i8, 1));
        v286 = v154;
        v163.i64[1] = *(_QWORD *)(v133 + 8);
        v287 = v163;
        v288 = v162;
        a4 = *(uint32x2_t **)(v146 + 32);
        v284 = (float32x2_t *)&a4[12 * v147];
        *(float *)v159.i32 = v145.n128_f32[0] + v145.n128_f32[0];
        v157.f32[0] = (float)(v145.n128_f32[0] + v145.n128_f32[0]) * v145.n128_f32[0];
        *(float *)v162.i32 = vmuls_lane_f32(v145.n128_f32[1] + v145.n128_f32[1], (float32x2_t)v145.n128_u64[0], 1);
        v163.f32[0] = vmuls_lane_f32(v145.n128_f32[2] + v145.n128_f32[2], (float32x4_t)v145, 2);
        v164 = vmuls_lane_f32(v145.n128_f32[0] + v145.n128_f32[0], (float32x2_t)v145.n128_u64[0], 1);
        v165 = vmuls_lane_f32(v145.n128_f32[0] + v145.n128_f32[0], (float32x4_t)v145, 2);
        v145.n128_f32[0] = vmuls_lane_f32(v145.n128_f32[1] + v145.n128_f32[1], (float32x4_t)v145, 2);
        *(float *)v159.i32 = v141.n128_f32[0] * *(float *)v159.i32;
        *(float *)v160.i32 = v141.n128_f32[0] * (float)(v145.n128_f32[1] + v145.n128_f32[1]);
        v141.n128_f32[0] = v141.n128_f32[0] * (float)(v145.n128_f32[2] + v145.n128_f32[2]);
        v166.i32[3] = 0;
        v166.f32[0] = 1.0 - (float)(*(float *)v162.i32 + v163.f32[0]);
        v166.f32[1] = v164 + v141.n128_f32[0];
        v166.f32[2] = v165 - *(float *)v160.i32;
        *(float *)v154.i32 = 1.0 - (float)(v157.f32[0] + v163.f32[0]);
        v163.i32[3] = 0;
        v163.f32[0] = v164 - v141.n128_f32[0];
        v163.i32[1] = v154.i32[0];
        v163.f32[2] = v145.n128_f32[0] + *(float *)v159.i32;
        v282 = v163;
        v283 = v166;
        v160.i32[3] = 0;
        *(float *)v160.i32 = v165 + *(float *)v160.i32;
        *(float *)&v160.i32[1] = v145.n128_f32[0] - *(float *)v159.i32;
        *(float *)&v160.i32[2] = 1.0 - (float)(v157.f32[0] + *(float *)v162.i32);
        v280 = vmulq_n_f32(v297, v291);
        v281 = (float32x4_t)v160;
        v141.n128_u32[3] = 1065353216;
        while (1)
        {
          v167 = 0;
          v169 = *(float32x4_t *)a4->i8;
          v168 = *(int8x16_t *)a4[2].i8;
          v170 = vnegq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v290, COERCE_FLOAT(*(_OWORD *)a4->i8)), v285, (float32x2_t)*a4, 1), v289, *(float32x4_t *)a4->i8, 2));
          v170.i32[3] = v141.n128_i32[3];
          v171 = (float32x2_t)vextq_s8(v168, v168, 8uLL).u64[0];
          v172 = vsub_f32(v171, *(float32x2_t *)v168.i8);
          v173 = vminnm_f32(vmaxnm_f32(vadd_f32(v131, vmul_f32(vmul_n_f32(v172, *(float *)&a4[5].i32[1]), (float32x2_t)vdup_n_s32(0xBE15F61A))), 0), _D10);
          LODWORD(v174) = HIDWORD(*(_OWORD *)a4->i8);
          v175 = (float)(1.0 / v174) * 0.5;
          v296 = v168.i64[0];
          __asm { FMOV            V1.2S, #-1.0 }
          *(float32x2_t *)v181.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v168.i8, v171), _D1);
          *(float32x2_t *)v168.i8 = vmul_n_f32(vsub_f32(v172, v173), 1.0 / v174);
          v177 = vmulq_f32(v297, vsubq_f32(*(float32x4_t *)a4->i8, v294));
          v178 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v177, 2), vaddq_f32(v177, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v177.f32, 1))).f32[0];
          v179 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, *(float *)v168.i32);
          v180 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, *(float *)vshrq_n_u64((uint64x2_t)v168, 0x20uLL).i32);
          v181.f32[2] = v175 * v178;
          v181.i32[3] = 1.0;
          *(int32x4_t *)v379 = v286;
          *(int32x4_t *)&v379[16] = v288;
          v307 = v175;
          v182 = vmulq_n_f32((float32x4_t)xmmword_2260E5F40, v175);
          *(float32x4_t *)&v379[32] = v287;
          v380 = v170;
          v295 = (__n128)v170;
          do
          {
            *(float32x4_t *)&buf[v167] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v179, COERCE_FLOAT(*(_OWORD *)&v379[v167])), v180, *(float32x2_t *)&v379[v167], 1), v182, *(float32x4_t *)&v379[v167], 2), v181, *(float32x4_t *)&v379[v167], 3);
            v167 += 16;
          }
          while (v167 != 64);
          v305 = *(_OWORD *)&buf[16];
          v306 = *(_OWORD *)buf;
          v303 = *(_OWORD *)&buf[48];
          v304 = *(_OWORD *)&buf[32];
          v183 = *(re::MaterialParameterBlock **)a3;
          memset(v379, 0, 36);
          *(_QWORD *)&v379[36] = 0x7FFFFFFFLL;
          v184 = (float32x2_t)a4[8];
          if (v184)
          {
            v299 = 0;
            v185 = 0;
            v301 = 0;
            v300 = 0;
            v186 = 0;
            v187 = 0;
            v315 = 0;
            v312 = 0;
            v320 = 0;
            v308 = (float32x4_t *)a4;
            v188 = (float32x2_t)a4[10];
            v189 = *(_QWORD *)&v188 + 24 * *(_QWORD *)&v184;
            v190 = (float)(v175 * v178) + -0.5;
            v302 = v189;
            do
            {
              if (*(_BYTE *)(*(_QWORD *)&v188 + 20))
              {
                v191 = *(float *)(*(_QWORD *)&v188 + 8);
                v192 = 73244475
                     * ((73244475 * (LODWORD(v191) ^ HIWORD(LODWORD(v191)))) ^ ((73244475
                                                                                             * (LODWORD(v191) ^ HIWORD(LODWORD(v191)))) >> 16));
                v193 = 73244475 * (*(_DWORD *)(*(_QWORD *)&v188 + 12) ^ HIWORD(*(_DWORD *)(*(_QWORD *)&v188 + 12)));
                v194 = (73244475 * (v193 ^ HIWORD(v193))) ^ ((73244475 * (v193 ^ HIWORD(v193))) >> 16);
                v195 = 73244475 * (*(_DWORD *)(*(_QWORD *)&v188 + 16) ^ HIWORD(*(_DWORD *)(*(_QWORD *)&v188 + 16)));
                v196 = (((unint64_t)(v192 ^ HIWORD(v192)) << 6)
                      - 0x61C8864680B583E9
                      + ((unint64_t)(v192 ^ HIWORD(v192)) >> 2)
                      + ((((73244475 * (v195 ^ HIWORD(v195))) ^ ((73244475 * (v195 ^ HIWORD(v195))) >> 16))
                        - 0x61C8864680B583E9
                        + (v194 << 6)
                        + (v194 >> 2)) ^ v194)) ^ v192 ^ HIWORD(v192);
                v197 = *(_QWORD *)v379;
                v198 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v196 ^ (v196 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v196 ^ (v196 >> 30))) >> 27));
                v199 = v198 ^ (v198 >> 31);
                if (*(_QWORD *)v379)
                {
                  for (m = *(unsigned int *)(v185 + 4 * (v199 % v320));
                        (_DWORD)m != 0x7FFFFFFF;
                        m = *(_DWORD *)(v187 + 32 * m + 8) & 0x7FFFFFFF)
                  {
                    if (*(_QWORD *)(v187 + 32 * m + 16) == v196)
                    {
                      v213 = *(unsigned int *)(v185 + 4 * (v199 % v312));
                      if ((_DWORD)v213 == 0x7FFFFFFF)
                      {
                        v213 = 0x7FFFFFFFLL;
                      }
                      else
                      {
                        v214 = *(_QWORD *)(v187 + 32 * v213 + 16);
                        for (n = *(unsigned int *)(v185 + 4 * (v199 % v312)); v214 != v196; v213 = n)
                        {
                          n = *(_DWORD *)(v187 + 32 * n + 8) & 0x7FFFFFFF;
                          v213 = 0x7FFFFFFFLL;
                          if (n == 0x7FFFFFFF)
                            break;
                          v214 = *(_QWORD *)(v187 + 32 * n + 16);
                        }
                      }
                      re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::MaterialParameterTable*&>(v311, *(uint64_t **)&v188, (_QWORD *)(v187 + 32 * v213 + 24));
                      v320 = v312;
                      goto LABEL_181;
                    }
                  }
                }
                re::MaterialParameterBlock::setFloat(v183, "intensity", v191, (uint64_t)v336);
                v336[0] = 0;
                re::MaterialParameterBlock::setFloat(v183, "objectDecayRate", *(float *)(*(_QWORD *)&v188 + 12), (uint64_t)v335);
                v335[0] = 0;
                v201 = expf(-(float)(*(float *)(*(_QWORD *)&v188 + 16) * (float)(v307 * v308[2].f32[1])));
                if (v201 > 1.0)
                  v201 = 1.0;
                re::MaterialParameterBlock::setFloat(v183, "decayToGround", v201, (uint64_t)v334);
                v334[0] = 0;
                re::MaterialParameterBlock::setFloat(v183, "radialDistanceToGround", v190, (uint64_t)v333);
                v333[0] = 0;
                v331[0] = v306;
                v331[1] = v305;
                v331[2] = v304;
                v331[3] = v303;
                re::MaterialParameterBlock::setMatrix4x4F(v183, "planeSurfaceViewMatrix", v331, (uint64_t)v332);
                v332[0] = 0;
                v202 = v127;
                v203 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v183, v127);
                *(_QWORD *)buf = v203;
                if (v197)
                {
                  v204 = v315;
                  v205 = v199 % v315;
                  for (ii = *(unsigned int *)(v185 + 4 * v205); ; ii = *(_DWORD *)(v187 + 32 * ii + 8) & 0x7FFFFFFF)
                  {
                    if ((_DWORD)ii == 0x7FFFFFFF)
                    {
                      v312 = v315;
                      v320 = v315;
                      goto LABEL_170;
                    }
                    if (*(_QWORD *)(v187 + 32 * ii + 16) == v196)
                      break;
                  }
                  v312 = v315;
                  v320 = v315;
                }
                else
                {
                  v205 = 0;
                  v204 = v315;
LABEL_170:
                  v207 = *(unsigned int *)&v379[36];
                  if (*(_DWORD *)&v379[36] == 0x7FFFFFFF)
                  {
                    v208 = v186;
                    v209 = v300;
                    if ((_DWORD)v186 == (_DWORD)v300)
                    {
                      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v379, 2 * v301);
                      v209 = *(unsigned int *)&v379[24];
                      v208 = *(_DWORD *)&v379[32];
                      v205 = v199 % *(unsigned int *)&v379[24];
                      v187 = *(_QWORD *)&v379[16];
                      v299 = *(_QWORD *)&v379[8];
                    }
                    v210 = (v208 + 1);
                    *(_DWORD *)&v379[32] = v210;
                    v207 = v186;
                    v211 = *(_DWORD *)(v187 + 32 * v186 + 8);
                    v185 = v299;
                    v204 = v209;
                    v312 = v209;
                    v300 = v209;
                    v320 = v209;
                  }
                  else
                  {
                    v211 = *(_DWORD *)(v187 + 32 * *(unsigned int *)&v379[36] + 8);
                    *(_DWORD *)&v379[36] = v211 & 0x7FFFFFFF;
                    v210 = v186;
                    LODWORD(v186) = v207;
                  }
                  v315 = v204;
                  *(_DWORD *)(v187 + 32 * v207 + 8) = v211 | 0x80000000;
                  v187 = *(_QWORD *)&v379[16];
                  v212 = *(_QWORD *)&v379[16] + 32 * v207;
                  *(_DWORD *)(v212 + 8) = *(_DWORD *)(v212 + 8) & 0x80000000 | *(_DWORD *)(v185 + 4 * v205);
                  *(_QWORD *)v212 = v199;
                  *(_QWORD *)(v212 + 16) = v196;
                  *(_QWORD *)(v212 + 24) = v203;
                  *(_DWORD *)(v185 + 4 * v205) = v186;
                  v301 = ++*(_DWORD *)&v379[28];
                  ++*(_DWORD *)&v379[40];
                  v186 = v210;
                }
                re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::MaterialParameterTable*&>(v311, *(uint64_t **)&v188, buf);
                v127 = v202;
                v189 = v302;
              }
LABEL_181:
              *(_QWORD *)&v188 += 24;
            }
            while (*(_QWORD *)&v188 != v189);
            a4 = (uint32x2_t *)v308;
            v169 = *v308;
            v216 = vmulq_f32(v297, vsubq_f32(*v308, v294));
            LODWORD(v178) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v216, 2), vaddq_f32(v216, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v216.f32, 1))).u32[0];
            LODWORD(v174) = HIDWORD(*(unsigned __int128 *)v308);
            v4 = v379;
            a3 = v278;
          }
          v316 = v178;
          v321 = v169;
          v217 = *(re::MaterialParameterBlock **)(a3 + 8);
          *(_QWORD *)buf = v296;
          v326 = 0x18FB5CC241;
          re::MaterialParameterBlock::setConstant(v217, &v326, 8uLL, buf, 32, (uint64_t)v330);
          v330[0] = 0;
          *(float32x2_t *)buf = v172;
          v326 = 0x18FB550729;
          re::MaterialParameterBlock::setConstant(v217, &v326, 8uLL, buf, 32, (uint64_t)v329);
          v329[0] = 0;
          *(float *)&v326 = v291;
          *(_QWORD *)buf = 0x2817DD560165845ALL;
          re::MaterialParameterBlock::setConstant(v217, (uint64_t *)buf, 4uLL, &v326, 1, (uint64_t)v328);
          v328[0] = 0;
          v363 = 0;
          v364 = 0;
          v365 = 0u;
          memset(buf, 0, 40);
          memset(&buf[48], 0, 48);
          v349 = 0u;
          v350 = 0u;
          v351 = 0u;
          v352 = 0u;
          v353 = 0u;
          v354 = 0;
          v355 = 0u;
          v356 = 0u;
          v357 = 0u;
          v358 = 0u;
          v359 = 0u;
          v360 = 0u;
          v361 = 0u;
          memset(v362, 0, 28);
          v218 = (float32x2_t *)a4;
          if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
            dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
          v366 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
          v367 = _D10;
          v368 = 1065353216;
          v369 = 0u;
          memset(v370, 0, sizeof(v370));
          v371 = 0xFFFFFFFF00000001;
          *(_QWORD *)&v219 = 0x7F0000007FLL;
          *((_QWORD *)&v219 + 1) = 0x7F0000007FLL;
          v372 = vdupq_n_s32(0x7F800000u);
          v373 = v219;
          v374 = 0;
          v375 = 0;
          v376 = 0;
          v377 = 0;
          v378 = 0x10100010001;
          v220 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v127
                                                                                                  + 32))(v127, 24, 8);
          *(_QWORD *)v220 = v127;
          *(_OWORD *)(v220 + 8) = xmmword_2260E7FA0;
          v221 = (_QWORD *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v127 + 32))(v127, 8, 8);
          *(_QWORD *)(v220 + 16) = v221;
          if (!v221)
            break;
          v223 = vaddq_f32(v280, vsubq_f32(v321, vmulq_n_f32(v297, v316 / v293)));
          v224 = (int32x2_t)vdiv_f32(v173, v172);
          *(float *)v224.i32 = (float)(1.0 / (float)(1.0 - fmaxf(*(float *)v224.i32, *(float *)&v224.i32[1])))
                             * (float)(v174 + v174);
          v317 = vmulq_n_f32(v282, *(float *)vshrq_n_u64((uint64x2_t)vdupq_lane_s32(v224, 0), 0x20uLL).i32);
          v322 = vmulq_n_f32(v283, *(float *)v224.i32);
          v313 = vmulq_n_f32(v281, *(float *)v224.i32);
          v223.i32[3] = 1.0;
          v309 = v223;
          *v221 = *(_QWORD *)(v298 + 288);
          v225 = *(_QWORD *)(v220 + 8);
          *(_QWORD *)buf = *(_QWORD *)(v220 + 16);
          *(_QWORD *)&buf[8] = v225;
          v9 = (unint64_t)&v346;
          v326 = (uint64_t)&v346;
          v327 = 1;
          v226 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v127
                                                                                                  + 32))(v127, 72, 8);
          *(_QWORD *)&buf[24] = re::MeshBoundingBoxes::MeshBoundingBoxes(v226, (uint64_t)v127, (const void **)&v326, 1);
          v326 = (uint64_t)&v346;
          v327 = 1;
          v227 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v127
                                                                                                  + 32))(v127, 72, 8);
          v228 = re::MeshBoundingBoxes::MeshBoundingBoxes(v227, (uint64_t)v127, (const void **)&v326, 1);
          v372 = (int32x4_t)v346;
          v373 = v347;
          *(_QWORD *)&buf[32] = v228;
          v374 = v228;
          v229 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v217, v127);
          v230 = (_QWORD *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v127 + 32))(v127, 8, 8);
          *v230 = v229;
          *(_QWORD *)&v356 = v230;
          *((_QWORD *)&v356 + 1) = 1;
          v231 = (_QWORD *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v127 + 32))(v127, 8, 8);
          *v231 = v279;
          *(_QWORD *)&v350 = v231;
          *((_QWORD *)&v350 + 1) = 1;
          *(float32x4_t *)&buf[48] = v322;
          *(float32x4_t *)&buf[64] = v317;
          *(float32x4_t *)&buf[80] = v313;
          v349 = v309;
          if (*(_QWORD *)v292)
            re::DynamicArray<re::MeshScene>::add(v292, (__int128 *)buf);
          if (v362[2])
          {
            if ((_QWORD)v360)
              *(_QWORD *)&v360 = 0;
            if (*((_QWORD *)&v359 + 1))
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v362[2] + 40))(v362[2], *((_QWORD *)&v359 + 1));
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v379);
          a4 += 12;
          v141 = v295;
          if (&v218[12] == v284)
            goto LABEL_198;
        }
        re::internal::assertLog((re::internal *)4, v222, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
LABEL_238:
        *(_QWORD *)&v331[0] = 0;
        memset(buf, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v379 = 136315906;
        *(_QWORD *)&v379[4] = "operator[]";
        *(_WORD *)&v379[12] = 1024;
        *(_DWORD *)&v379[14] = 468;
        *(_WORD *)&v379[18] = 2048;
        *(_QWORD *)&v379[20] = a4;
        *(_WORD *)&v379[28] = 2048;
        *(_QWORD *)&v379[30] = v276;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_239:
        v326 = 0;
        memset(buf, 0, 80);
        v9 = v132;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v379 = 136315906;
        *(_QWORD *)&v379[4] = "operator[]";
        *(_WORD *)&v379[12] = 1024;
        *(_DWORD *)&v379[14] = 797;
        *(_WORD *)&v379[18] = 2048;
        *(_QWORD *)&v379[20] = v9;
        *(_WORD *)&v379[28] = 2048;
        *(_QWORD *)&v379[30] = a4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_240:
        v326 = 0;
        memset(buf, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v379 = 136315906;
        *(_QWORD *)&v379[4] = "operator[]";
        *(_WORD *)&v379[12] = 1024;
        *(_DWORD *)&v379[14] = 476;
        *(_WORD *)&v379[18] = 2048;
        *(_QWORD *)&v379[20] = a4;
        *(_WORD *)&v379[28] = 2048;
        *(_QWORD *)&v379[30] = v276;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_241;
      }
LABEL_210:
      a4 = (uint32x2_t *)v253[1];
      a3 = v255;
      v9 = v252;
      v234 = (_QWORD *)v272;
      if ((unint64_t)a4 <= v255)
        goto LABEL_243;
      v235 = (uint64_t *)(v253[2] + 24 * v255);
      if (v235 != &v323)
      {
        v236 = *v235;
        if (*v235)
          v237 = v236 == v323;
        else
          v237 = 1;
        if (!v237)
          goto LABEL_249;
        *v235 = v323;
        v323 = v236;
        v238 = v235[1];
        v235[1] = v126;
        v324 = v238;
        v239 = v235[2];
        v235[2] = v325;
        v325 = v239;
      }
      v240 = v271[2];
      if (v240)
        break;
LABEL_229:
      if (v264 && v276)
      {
        v249 = 0;
        do
        {
          re::DynamicArray<re::ShadowClusterInfo>::deinit(v270 + v249);
          v249 += 40;
        }
        while (40 * v276 != v249);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v264 + 40))(v264, v270);
      }
      re::FixedArray<re::PlanarReceiverInfo>::deinit(&v323);
      v102 = v255 + 1;
      v90 = v254;
      if (v255 + 1 >= *v256)
        goto LABEL_235;
    }
    v241 = v271[4];
    v242 = v241 + 16 * v240;
    while (1)
    {
      v243 = *(_DWORD *)(v241 + 8);
      *(_DWORD *)buf = v255;
      *(_DWORD *)&buf[4] = v243;
      v244 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v241 ^ (*(_QWORD *)v241 >> 30));
      v245 = (0x94D049BB133111EBLL * (v244 ^ (v244 >> 27))) ^ ((0x94D049BB133111EBLL * (v244 ^ (v244 >> 27))) >> 31);
      if (*v234)
      {
        v246 = v245 % *v266;
        v247 = *(unsigned int *)(*v265 + 4 * v246);
        if ((_DWORD)v247 != 0x7FFFFFFF)
        {
          v248 = *v261;
          while (*(_QWORD *)(v248 + 32 * v247 + 16) != *(_QWORD *)v241)
          {
            v247 = *(_DWORD *)(v248 + 32 * v247 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v247 == 0x7FFFFFFF)
              goto LABEL_227;
          }
          goto LABEL_228;
        }
      }
      else
      {
        LODWORD(v246) = 0;
      }
LABEL_227:
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(v272, v246, v245, (_QWORD *)v241, buf);
      v234 = (_QWORD *)v272;
      ++*v268;
LABEL_228:
      v241 += 16;
      if (v241 == v242)
        goto LABEL_229;
    }
  }
}

void re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace<re::MaterialParameterTable*&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v15 + 32 * v10 + 16) == v6)
      {
LABEL_12:
        *(_QWORD *)(v15 + 32 * v10 + 24) = *a3;
        goto LABEL_13;
      }
      while (1)
      {
        v10 = *(_DWORD *)(v15 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v15 + 32 * v10 + 16) == v6)
          goto LABEL_12;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 16) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
LABEL_13:
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::FixedArray<re::PlanarReceiverData::Bucket>::FixedArray(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  signed int v23;
  uint64_t result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  if (!v3)
    return (uint64_t)a1;
  v4 = (unint64_t)a1;
  re::FixedArray<re::FixedArray<unsigned int>>::init<>(a1, v3, a2[1]);
  v6 = a2[1];
  if (a1[1] != v6)
    goto LABEL_44;
  if (!v6)
    return (uint64_t)a1;
  v7 = (uint64_t *)a2[2];
  v8 = &v7[3 * v6];
  for (i = (uint64_t *)a1[2]; ; i += 3)
  {
    if (i == v7)
      goto LABEL_39;
    v10 = *v7;
    if (!*i)
      break;
    if (v10)
      goto LABEL_16;
LABEL_39:
    v7 += 3;
    if (v7 == v8)
      return (uint64_t)a1;
  }
  if (!v10)
    goto LABEL_39;
  v4 = v7[1];
  *i = v10;
  i[1] = v4;
  if (v4)
  {
    if (v4 >= 0x2AAAAAAAAAAAAABLL)
      goto LABEL_42;
    v11 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 96 * v4, 8);
    i[2] = v11;
    if (!v11)
      goto LABEL_43;
    v12 = v4 - 1;
    if (v4 != 1)
    {
      do
      {
        *(_QWORD *)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 24) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_OWORD *)(v11 + 32) = 0uLL;
        *(_OWORD *)(v11 + 48) = 0uLL;
        *(_OWORD *)(v11 + 64) = 0uLL;
        *(_OWORD *)(v11 + 80) = 0uLL;
        *(_DWORD *)(v11 + 84) = 0x7FFFFFFF;
        v11 += 96;
        --v12;
      }
      while (v12);
    }
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_OWORD *)(v11 + 32) = 0uLL;
    *(_OWORD *)(v11 + 48) = 0uLL;
    *(_OWORD *)(v11 + 64) = 0uLL;
    *(_OWORD *)(v11 + 80) = 0uLL;
    *(_DWORD *)(v11 + 84) = 0x7FFFFFFF;
  }
LABEL_16:
  v13 = v7[1];
  if (i[1] == v13)
  {
    if (v13)
    {
      v14 = v7[2];
      v4 = v14 + 96 * v13;
      v15 = i[2];
      do
      {
        if (v15 != v14)
        {
          v16 = *(_QWORD *)v14;
          if (*(_QWORD *)v15)
          {
            if (v16)
            {
              re::DynamicArray<re::MeshScene>::copy((_QWORD *)v15, v14);
            }
            else
            {
              v18 = *(_QWORD *)(v15 + 16);
              *(_QWORD *)(v15 + 16) = 0;
              if (v18)
              {
                v19 = 656 * v18;
                v20 = *(_QWORD *)(v15 + 32) + 256;
                do
                {
                  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v20);
                  v20 += 656;
                  v19 -= 656;
                }
                while (v19);
              }
            }
            ++*(_DWORD *)(v15 + 24);
          }
          else if (v16)
          {
            v17 = *(_QWORD *)(v14 + 16);
            *(_QWORD *)v15 = v16;
            re::DynamicArray<re::MeshScene>::setCapacity((_QWORD *)v15, v17);
            ++*(_DWORD *)(v15 + 24);
            re::DynamicArray<re::MeshScene>::copy((_QWORD *)v15, v14);
          }
          v5 = *(_QWORD *)(v14 + 48);
          v21 = *(_QWORD *)(v15 + 48);
          *(_QWORD *)(v15 + 40) = *(_QWORD *)(v14 + 40);
          if (v21)
          {
            v22 = v15 + 48;
            if (v5)
            {
              re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v22, v14 + 48);
              ++*(_DWORD *)(v15 + 88);
            }
            else
            {
              re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v22);
            }
          }
          else if (v5)
          {
            if (*(_DWORD *)(v14 + 76) <= 3u)
              v23 = 3;
            else
              v23 = *(_DWORD *)(v14 + 76);
            re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v15 + 48, v5, v23);
            re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(v15 + 48, v14 + 48);
          }
        }
        v14 += 96;
        v15 += 96;
      }
      while (v14 != v4);
    }
    goto LABEL_39;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  _os_crash();
  __break(1u);
LABEL_42:
  re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 96, v4);
  _os_crash();
  __break(1u);
LABEL_43:
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
  _os_crash();
  __break(1u);
LABEL_44:
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<unsigned long long,re::MaterialParameterTable const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = (unint64_t *)(*(_QWORD *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        v9 = *v8;
        v10 = *(unsigned int *)(a1 + 24);
        v11 = *v8 % v10;
        v12 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v12 == 0x7FFFFFFF)
        {
          v12 = *(unsigned int *)(a1 + 32);
          v13 = v12;
          if ((_DWORD)v12 == (_DWORD)v10)
          {
            re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v11 = v9 % *(unsigned int *)(a1 + 24);
            v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v13 + 1;
          v14 = *(_QWORD *)(a1 + 16);
          v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 16);
          v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v11);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12) = v9;
        v16 = v8[3];
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 16) = v8[2];
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v12 + 24) = v16;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v11) = v12;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
    re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
  }
  return a1;
}

double re::createWarpMatrixForSourceProjection(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, simd_float4 a5, simd_float4 a6, simd_float4 a7, simd_float4 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17, float32x4_t a18, float32x4_t a19, float32x4_t a20,simd_float4 a21,simd_float4 a22,simd_float4 a23,simd_float4 a24)
{
  uint64_t v24;
  uint64_t v25;
  simd_float4x4 v26;
  uint64_t v27;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  simd_float4x4 v33;
  simd_float4x4 v34;
  simd_float4x4 v35;

  v24 = 0;
  v33.columns[0] = a5;
  v33.columns[1] = a6;
  v33.columns[2] = a7;
  v33.columns[3] = a8;
  do
  {
    v34.columns[v24] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, COERCE_FLOAT(*(_OWORD *)&v33.columns[v24])), a2, *(float32x2_t *)v33.columns[v24].f32, 1), a3, (float32x4_t)v33.columns[v24], 2), a4, (float32x4_t)v33.columns[v24], 3);
    ++v24;
  }
  while (v24 != 4);
  v25 = 0;
  v26 = v34;
  v33.columns[0] = a21;
  v33.columns[1] = a22;
  v33.columns[2] = a23;
  v33.columns[3] = a24;
  do
  {
    v34.columns[v25] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a17, COERCE_FLOAT(*(_OWORD *)&v33.columns[v25])), a18, *(float32x2_t *)v33.columns[v25].f32, 1), a19, (float32x4_t)v33.columns[v25], 2), a20, (float32x4_t)v33.columns[v25], 3);
    ++v25;
  }
  while (v25 != 4);
  v31 = (float32x4_t)v34.columns[0];
  v32 = (float32x4_t)v34.columns[1];
  v29 = (float32x4_t)v34.columns[3];
  v30 = (float32x4_t)v34.columns[2];
  v35 = __invert_f4(v26);
  v27 = 0;
  v33 = v35;
  do
  {
    v34.columns[v27] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)&v33.columns[v27])), v32, *(float32x2_t *)v33.columns[v27].f32, 1), v30, (float32x4_t)v33.columns[v27], 2), v29, (float32x4_t)v33.columns[v27], 3);
    ++v27;
  }
  while (v27 != 4);
  return *(double *)v34.columns[0].i64;
}

double re::createViewportToNDCReprojectionMatrix(uint64_t a1, unint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float a6, double a7)
{
  uint64_t v7;
  float32x2_t v8;
  float32x2_t v9;
  __int128 v10;
  _OWORD v12[3];
  __int128 v13;

  v7 = 0;
  v8 = (float32x2_t)vzip1_s32((int32x2_t)a2, (int32x2_t)HIDWORD(a2));
  *((float *)&a7 + 1) = a6;
  v9 = vmul_f32(*(float32x2_t *)&a7, v8);
  *(float *)&a7 = -*(float *)&a7;
  *(float32x2_t *)&v10 = vdiv_f32(vmla_f32((float32x2_t)0xBF8000003F800000, vmla_f32(v8, (float32x2_t)0x4000000040000000, (float32x2_t)a1), *(float32x2_t *)&a7), v9);
  DWORD2(v10) = vextq_s8(*(int8x16_t *)(MEMORY[0x24BDAEDF8] + 32), *(int8x16_t *)(MEMORY[0x24BDAEDF8] + 32), 8uLL).u32[0];
  HIDWORD(v10) = HIDWORD(*(_OWORD *)(MEMORY[0x24BDAEDF8] + 32));
  v12[2] = v10;
  do
  {
    *(__int128 *)((char *)&v13 + v7 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(v12[v7])), a4, *(float32x2_t *)&v12[v7], 1), a5, (float32x4_t)v12[v7], 2);
    ++v7;
  }
  while (v7 != 3);
  return *(double *)&v13;
}

_QWORD *re::DepthStencilCombinerProvider::DepthStencilCombinerProvider(_QWORD *a1, const re::DynamicString *a2)
{
  uint64_t v4;
  char v5;

  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 1), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v4 + 40))();
  *a1 = off_24ED83290;
  a1[5] = 65290051;
  a1[6] = "Color";
  a1[7] = 65919651;
  a1[8] = "Depth";
  a1[9] = 0x11F25A259CLL;
  a1[10] = "Stencil";
  return a1;
}

void re::DepthStencilCombinerProvider::~DepthStencilCombinerProvider(re::DepthStencilCombinerProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::DepthStencilCombinerProvider::prepareFrame(re::DepthStencilCombinerProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  signed int ScopePixelFormat;
  signed int v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t ScopeHash;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21[2];
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v23 = *((_QWORD *)this + 7) & 0x7FFFFFFFFFFFFFFFLL;
  ScopePixelFormat = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v23);
  v22 = *((_QWORD *)this + 9) & 0x7FFFFFFFFFFFFFFFLL;
  v9 = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v22);
  v10 = strlen(a2);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a2, v10, 0, &v24);
    v11 = (v25 - 0x61C8864680B583E9 + (v24 << 6) + (v24 >> 2)) ^ v24;
  }
  else
  {
    v11 = 0;
  }
  v12 = strlen(a3);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)a3, v12, 0, &v24);
    v13 = ((v25 - 0x61C8864680B583E9 + (v24 << 6) + (v24 >> 2)) ^ v24) - 0x61C8864680B583E9;
  }
  else
  {
    v13 = 0x9E3779B97F4A7C17;
  }
  v14 = *(unsigned int *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)a4 + 32, ((v11 >> 2) + (v11 << 6) + v13) ^ v11)+ 484);
  v21[0] = 0x674BDBD52888E1DDLL;
  v21[1] = (unint64_t)"DepthStencilCombinerProvider";
  ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v21, a2, a3);
  v16 = 0xBF58476D1CE4E5B9 * (ScopePixelFormat ^ ((unint64_t)ScopePixelFormat >> 30));
  v17 = (((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) ^ ((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) >> 31))
       - 0x61C8864680B583E9
       + (ScopeHash << 6)
       + (ScopeHash >> 2)) ^ ScopeHash;
  v18 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v9 ^ ((unint64_t)v9 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (v9 ^ ((unint64_t)v9 >> 30))) >> 27));
  v19 = ((v18 ^ (v18 >> 31)) - 0x61C8864680B583E9 + (v17 << 6) + (v17 >> 2)) ^ v17;
  return (v14 - 0x61C8864680B583E9 + (v19 << 6) + (v19 >> 2)) ^ v19;
}

void re::DepthStencilCombinerProvider::provide(re::DepthStencilCombinerProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unsigned int ScopePixelFormat;
  unsigned int v9;
  _BOOL4 v11;
  BOOL v13;
  _BOOL4 v15;
  BOOL v16;
  _BOOL4 v17;
  char v18;
  char v19;
  re::DepthStencilCombinerProvider *v21;
  const char *v22;
  const char *v23;
  re::RenderFrame *v24;
  _BOOL4 v25;
  char *v26;
  const char *v27;
  re::DepthStencilCombinerProvider *v28;
  const char *v29;
  const char *v30;
  re::RenderFrame *v31;
  _BOOL4 v32;
  re::DepthStencilCombinerProvider *v33;
  const char *v34;
  const char *v35;
  re::RenderFrame *v36;
  re::DepthStencilCombinerProvider *v37;
  const char *v38;
  const char *v39;
  re::RenderFrame *v40;
  int v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;

  v47 = *((_QWORD *)this + 7) & 0x7FFFFFFFFFFFFFFFLL;
  ScopePixelFormat = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v47);
  v48 = ScopePixelFormat;
  v45 = *((_QWORD *)this + 9) & 0x7FFFFFFFFFFFFFFFLL;
  v9 = re::RenderFrame::getScopePixelFormat((uint64_t)a4, a3, &v45);
  v46 = v9;
  v11 = ScopePixelFormat != 250 && ScopePixelFormat != 252;
  v13 = ScopePixelFormat != 255 && ScopePixelFormat != 260;
  v15 = v9 != 255 && v9 != 260;
  if (v13 || v15)
  {
    v18 = v9 != 253 || v13;
    if ((v18 & 1) != 0)
    {
      if (v9)
        v13 = 1;
      if (!v13)
      {
        v17 = ScopePixelFormat == 0;
        v43 = 0;
        v44 = ScopePixelFormat;
        goto LABEL_53;
      }
      if (!v11 && !v15)
      {
        v16 = v9 == 0;
        v17 = ScopePixelFormat == 0;
        v43 = 20;
        v44 = v9;
        goto LABEL_22;
      }
      if (ScopePixelFormat)
        LOBYTE(v15) = 1;
      if (!v15)
      {
        v43 = 0;
        v44 = v9;
        v42 = v9 == 0;
        goto LABEL_56;
      }
      v19 = v9 != 253 || v11;
      if ((v19 & 1) != 0)
      {
        if (v11 || v9 != 0)
        {
          if (v9 != 253 || ScopePixelFormat != 0)
          {
            if (ScopePixelFormat != 0 || v9 != 0)
              return;
            if (*(_BYTE *)(*((_QWORD *)a4 + 1) + 308))
            {
              v21 = this;
              v22 = a2;
              v23 = a3;
              v24 = a4;
              v25 = 1;
LABEL_63:
              re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()((uint64_t)v21, v22, v23, v24, (int *)&v48, v25);
              v37 = this;
              v38 = a2;
              v39 = a3;
              v40 = a4;
              v41 = 1;
              goto LABEL_64;
            }
            v43 = 0;
            v44 = 260;
            v42 = 1;
            v26 = "DropDepthDropStencil";
            v27 = "DropDepthDropStencil[MSAA]";
LABEL_57:
            v28 = this;
            v29 = a2;
            v30 = a3;
            v31 = a4;
            v17 = 1;
            goto LABEL_50;
          }
          if (*(_BYTE *)(*((_QWORD *)a4 + 1) + 308))
          {
            v33 = this;
            v34 = a2;
            v35 = a3;
            v36 = a4;
            v32 = 1;
            goto LABEL_60;
          }
          v43 = 20;
          v44 = 260;
          v42 = 0;
LABEL_56:
          v26 = "DropDepthKeepStencil";
          v27 = "DropDepthKeepStencil[MSAA]";
          goto LABEL_57;
        }
        if (*(_BYTE *)(*((_QWORD *)a4 + 1) + 308))
        {
          v25 = ScopePixelFormat == 0;
          v21 = this;
          v22 = a2;
          v23 = a3;
          v24 = a4;
          goto LABEL_63;
        }
        v17 = ScopePixelFormat == 0;
        v43 = 20;
        v44 = 260;
LABEL_53:
        v42 = 1;
        v26 = "KeepDepthDropStencil";
        v27 = "KeepDepthDropStencil[MSAA]";
        goto LABEL_49;
      }
      if (*(_BYTE *)(*((_QWORD *)a4 + 1) + 308))
      {
        v32 = ScopePixelFormat == 0;
        v33 = this;
        v34 = a2;
        v35 = a3;
        v36 = a4;
LABEL_60:
        re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()((uint64_t)v33, v34, v35, v36, (int *)&v48, v32);
        v37 = this;
        v38 = a2;
        v39 = a3;
        v40 = a4;
        v41 = 0;
LABEL_64:
        re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_1::operator()((uint64_t)v37, v38, v39, v40, (int *)&v46, v41);
        return;
      }
      v17 = ScopePixelFormat == 0;
      v44 = 260;
    }
    else
    {
      v17 = ScopePixelFormat == 0;
      v44 = ScopePixelFormat;
    }
    v43 = 20;
    v42 = 0;
    goto LABEL_48;
  }
  v16 = v9 == 0;
  v17 = ScopePixelFormat == 0;
  v43 = 0;
  v44 = ScopePixelFormat;
LABEL_22:
  v42 = v16;
LABEL_48:
  v26 = "KeepDepthKeepStencil";
  v27 = "KeepDepthKeepStencil[MSAA]";
LABEL_49:
  v28 = this;
  v29 = a2;
  v30 = a3;
  v31 = a4;
LABEL_50:
  re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_2::operator()((uint64_t)v28, v29, v30, v31, (int *)&v44, v26, v27, v17, v42, &v43);
}

void re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_2::operator()(uint64_t a1, const char *a2, const char *a3, re::RenderFrame *this, int *a5, char *a6, const char *a7, int a8, char a9, int *a10)
{
  uint64_t v19;
  unint64_t v20;
  int v25;
  size_t v26;
  unint64_t v27;
  size_t v28;
  unsigned int v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  __int128 v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  re::RenderFrame::tryGetInputTarget(this, a6, 0, (double *)&v45);
  if (DWORD2(v45) == -1 || HIDWORD(v45) == -1)
  {
    v44 = 0;
    if (!a8 || (a9 & 1) == 0)
    {
      if (a9)
        v19 = *(_QWORD *)(a1 + 56);
      else
        v19 = *(_QWORD *)(a1 + 72);
      v44 = v19 & 0x7FFFFFFFFFFFFFFFLL;
    }
    v34 = -1;
    v20 = 0x9E3779B97F4A7C17;
    v35 = -1;
    v36 = -1;
    v37 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v38 = _D0;
    v39 = xmmword_226135530;
    v41 = xmmword_2260FCDC0;
    v42 = xmmword_2260FF4D0;
    v43 = 0;
    v40 = *a10;
    v25 = *a5;
    LODWORD(v32) = 3;
    HIDWORD(v32) = v25;
    v33 = 3;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v32, a6, &v46);
    v45 = v46;
    re::RenderFrame::inheritLaneProperties(this, &v44, (double *)&v45, 0);
    v26 = strlen(a2);
    if (v26)
    {
      MurmurHash3_x64_128((uint64_t)a2, v26, 0, (unint64_t *)&v46);
      v27 = (*((_QWORD *)&v46 + 1) - 0x61C8864680B583E9 + ((_QWORD)v46 << 6) + ((unint64_t)v46 >> 2)) ^ v46;
    }
    else
    {
      v27 = 0;
    }
    v28 = strlen(a3);
    if (v28)
    {
      MurmurHash3_x64_128((uint64_t)a3, v28, 0, (unint64_t *)&v46);
      v20 = ((*((_QWORD *)&v46 + 1) - 0x61C8864680B583E9 + ((_QWORD)v46 << 6) + ((unint64_t)v46 >> 2)) ^ v46)
          - 0x61C8864680B583E9;
    }
    v29 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)this + 32, ((v27 >> 2) + (v27 << 6) + v20) ^ v27)+ 484);
    if (v29 >= 2)
    {
      LODWORD(v35) = v29;
      v33 = 8;
      re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v32, a7, &v46);
      v31 = v45;
      v30 = DWORD2(v46);
      *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)&v31)+ 80) = v30;
      re::RenderFrame::inheritLaneProperties(this, &v44, (double *)&v46, 0);
    }
  }
  v32 = *(_QWORD *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v32, (double *)&v45, 0);
  v32 = *(_QWORD *)(a1 + 72) & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v32, (double *)&v45, 0);
}

void re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_0::operator()(uint64_t a1, const char *a2, const char *a3, re::RenderFrame *this, int *a5, int a6)
{
  _QWORD *v12;
  unint64_t v14;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  size_t v22;
  unint64_t v23;
  size_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v12 = (_QWORD *)(a1 + 56);
  re::RenderFrame::tryGetInputTarget(this, *(const char **)(a1 + 64), 0, (double *)&v41);
  if (DWORD2(v41) == -1 || HIDWORD(v41) == -1)
  {
    v31 = -1;
    v14 = 0x9E3779B97F4A7C17;
    v32 = -1;
    v33 = -1;
    v34 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v35 = _D0;
    v38 = -1;
    v39 = xmmword_2260FF4D0;
    v40 = 0;
    v36 = xmmword_226135530;
    v37 = xmmword_226135540;
    v19 = *a5;
    if (!*a5)
      v19 = 252;
    LODWORD(v29) = 3;
    HIDWORD(v29) = v19;
    v30 = 3;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v29, "Depth", &v42);
    v41 = v42;
    v20 = 56;
    if (a6)
    {
      v20 = 72;
      v21 = (_QWORD *)(a1 + 72);
    }
    else
    {
      v21 = v12;
    }
    *(_QWORD *)&v42 = *(_QWORD *)(a1 + v20) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::inheritLaneProperties(this, (uint64_t *)&v42, (double *)&v41, 0);
    v22 = strlen(a2);
    if (v22)
    {
      MurmurHash3_x64_128((uint64_t)a2, v22, 0, (unint64_t *)&v42);
      v23 = (*((_QWORD *)&v42 + 1) - 0x61C8864680B583E9 + ((_QWORD)v42 << 6) + ((unint64_t)v42 >> 2)) ^ v42;
    }
    else
    {
      v23 = 0;
    }
    v24 = strlen(a3);
    if (v24)
    {
      MurmurHash3_x64_128((uint64_t)a3, v24, 0, (unint64_t *)&v42);
      v14 = ((*((_QWORD *)&v42 + 1) - 0x61C8864680B583E9 + ((_QWORD)v42 << 6) + ((unint64_t)v42 >> 2)) ^ v42)
          - 0x61C8864680B583E9;
    }
    v25 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)this + 32, ((v23 >> 2) + (v23 << 6) + v14) ^ v23)+ 484);
    if (v25 >= 2)
    {
      LODWORD(v32) = v25;
      v30 = 8;
      re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v29, "Depth[MSAA]", &v42);
      v28 = v41;
      v26 = DWORD2(v42);
      *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)&v28)+ 80) = v26;
      v27 = *v21 & 0x7FFFFFFFFFFFFFFFLL;
      re::RenderFrame::inheritLaneProperties(this, &v27, (double *)&v42, 0);
    }
  }
  v29 = *v12 & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v29, (double *)&v41, 0);
}

void re::DepthStencilCombinerProvider::provide(char const*,char const*,re::RenderFrame &)const::$_1::operator()(uint64_t a1, const char *a2, const char *a3, re::RenderFrame *this, int *a5, int a6)
{
  _QWORD *v12;
  unint64_t v14;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  size_t v22;
  unint64_t v23;
  size_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  __int128 v39;
  char v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v12 = (_QWORD *)(a1 + 72);
  re::RenderFrame::tryGetInputTarget(this, *(const char **)(a1 + 80), 0, (double *)&v41);
  if (DWORD2(v41) == -1 || HIDWORD(v41) == -1)
  {
    v31 = -1;
    v14 = 0x9E3779B97F4A7C17;
    v32 = -1;
    v33 = -1;
    v34 = 0;
    __asm { FMOV            V0.2S, #1.0 }
    v35 = _D0;
    v38 = -1;
    v39 = xmmword_2260FF4D0;
    v40 = 0;
    v36 = xmmword_226135530;
    v37 = xmmword_226135540;
    v19 = *a5;
    if (!*a5)
      v19 = 253;
    LODWORD(v29) = 3;
    HIDWORD(v29) = v19;
    v30 = 3;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v29, "Stencil", &v42);
    v41 = v42;
    v20 = 72;
    if (a6)
    {
      v20 = 56;
      v21 = (_QWORD *)(a1 + 56);
    }
    else
    {
      v21 = v12;
    }
    *(_QWORD *)&v42 = *(_QWORD *)(a1 + v20) & 0x7FFFFFFFFFFFFFFFLL;
    re::RenderFrame::inheritLaneProperties(this, (uint64_t *)&v42, (double *)&v41, 0);
    v22 = strlen(a2);
    if (v22)
    {
      MurmurHash3_x64_128((uint64_t)a2, v22, 0, (unint64_t *)&v42);
      v23 = (*((_QWORD *)&v42 + 1) - 0x61C8864680B583E9 + ((_QWORD)v42 << 6) + ((unint64_t)v42 >> 2)) ^ v42;
    }
    else
    {
      v23 = 0;
    }
    v24 = strlen(a3);
    if (v24)
    {
      MurmurHash3_x64_128((uint64_t)a3, v24, 0, (unint64_t *)&v42);
      v14 = ((*((_QWORD *)&v42 + 1) - 0x61C8864680B583E9 + ((_QWORD)v42 << 6) + ((unint64_t)v42 >> 2)) ^ v42)
          - 0x61C8864680B583E9;
    }
    v25 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)this + 32, ((v23 >> 2) + (v23 << 6) + v14) ^ v23)+ 484);
    if (v25 >= 2)
    {
      LODWORD(v32) = v25;
      v30 = 8;
      re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)&v29, "Stencil[MSAA]", &v42);
      v28 = v41;
      v26 = DWORD2(v42);
      *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)&v28)+ 80) = v26;
      v27 = *v21 & 0x7FFFFFFFFFFFFFFFLL;
      re::RenderFrame::inheritLaneProperties(this, &v27, (double *)&v42, 0);
    }
  }
  v29 = *v12 & 0x7FFFFFFFFFFFFFFFLL;
  re::RenderFrame::addTargetOutput(this, &v29, (double *)&v41, 0);
}

re::RenderGraphSimpleForwardEmitter *re::RenderGraphSimpleForwardEmitter::RenderGraphSimpleForwardEmitter(re::RenderGraphSimpleForwardEmitter *this)
{
  re::RealityEmitterBase *v2;

  v2 = re::RealityEmitterBase::RealityEmitterBase(this);
  *(_QWORD *)v2 = &off_24ED832D8;
  *((_QWORD *)v2 + 103) = 0;
  *((_QWORD *)v2 + 105) = 0;
  *((_QWORD *)v2 + 104) = 0;
  *(_OWORD *)((char *)v2 + 744) = 0u;
  *(_OWORD *)((char *)v2 + 760) = 0u;
  *(_OWORD *)((char *)v2 + 776) = 0u;
  *(_OWORD *)((char *)v2 + 792) = 0u;
  *(_OWORD *)((char *)v2 + 801) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)v2 + 848));
  *((_QWORD *)this + 108) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872));
  *((_QWORD *)this + 111) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896));
  *((_QWORD *)this + 114) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920));
  *((_QWORD *)this + 117) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 944));
  *((_QWORD *)this + 120) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968));
  *((_QWORD *)this + 123) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992));
  *((_QWORD *)this + 126) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016));
  *((_QWORD *)this + 129) = 0;
  re::StringID::invalid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040));
  *((_QWORD *)this + 133) = 0;
  *((_QWORD *)this + 132) = 0;
  return this;
}

re::RealityEmitterBase *re::RealityEmitterBase::RealityEmitterBase(re::RealityEmitterBase *this)
{
  *((_BYTE *)this + 8) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_QWORD *)((char *)this + 124) = 0x7FFFFFFFLL;
  *(_QWORD *)this = off_24ED83430;
  *((_BYTE *)this + 136) = 0;
  *(_QWORD *)((char *)this + 140) = 0xFD000000FCLL;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 2;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 256));
  *((_QWORD *)this + 34) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 280));
  *((_QWORD *)this + 37) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 304));
  *((_QWORD *)this + 40) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 328));
  *((_QWORD *)this + 43) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 352));
  *((_QWORD *)this + 46) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 376));
  *((_QWORD *)this + 49) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 400));
  *((_QWORD *)this + 52) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 424));
  *((_QWORD *)this + 55) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 448));
  *((_QWORD *)this + 58) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 472));
  *((_BYTE *)this + 496) = 0;
  *((_QWORD *)this + 61) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 552));
  *((_QWORD *)this + 71) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 576));
  *((_QWORD *)this + 80) = 0;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 37) = 0u;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 648));
  *((_QWORD *)this + 83) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 672));
  *((_QWORD *)this + 86) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 696));
  *((_QWORD *)this + 89) = 0;
  re::StringID::invalid((re::RealityEmitterBase *)((char *)this + 720));
  *((_QWORD *)this + 92) = 0;
  return this;
}

void re::RenderGraphSimpleForwardEmitter::~RenderGraphSimpleForwardEmitter(re::RenderGraphSimpleForwardEmitter *this)
{
  re::RenderGraphManager *v2;

  v2 = (re::RenderGraphManager *)*((_QWORD *)this + 133);
  if (v2)
    re::RenderGraphSimpleForwardEmitter::unregisterProviders(this, v2);
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 944));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872));
  re::StringID::destroyString((re::RenderGraphSimpleForwardEmitter *)((char *)this + 848));
  re::AssetHandle::~AssetHandle((re::RenderGraphSimpleForwardEmitter *)((char *)this + 824));
  re::AssetHandle::~AssetHandle((re::RenderGraphSimpleForwardEmitter *)((char *)this + 792));
  re::AssetHandle::~AssetHandle((re::RenderGraphSimpleForwardEmitter *)((char *)this + 768));
  re::AssetHandle::~AssetHandle((re::RenderGraphSimpleForwardEmitter *)((char *)this + 744));
  re::RealityEmitterBase::~RealityEmitterBase(this);
}

{
  re::RenderGraphSimpleForwardEmitter::~RenderGraphSimpleForwardEmitter(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphSimpleForwardEmitter::unregisterProviders(re::RenderGraphSimpleForwardEmitter *this, re::RenderGraphManager *a2)
{
  _BYTE v4[16];
  uint64_t v5;
  _BYTE v6[16];
  uint64_t v7;
  _BYTE v8[16];
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE v14[16];
  uint64_t v15;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;

  re::RealityEmitterBase::unregisterCommonProviders(this, a2);
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896)))
  {
    re::StringID::StringID((re::StringID *)v20, (const StringID *)this + 56);
    v21 = *((_QWORD *)this + 114);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v20);
    re::StringID::destroyString((re::StringID *)v20);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920)))
  {
    re::StringID::StringID((re::StringID *)v18, (const StringID *)((char *)this + 920));
    v19 = *((_QWORD *)this + 117);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v18);
    re::StringID::destroyString((re::StringID *)v18);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992)))
  {
    re::StringID::StringID((re::StringID *)v16, (const StringID *)this + 62);
    v17 = *((_QWORD *)this + 126);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v16);
    re::StringID::destroyString((re::StringID *)v16);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016)))
  {
    re::StringID::StringID((re::StringID *)v14, (const StringID *)((char *)this + 1016));
    v15 = *((_QWORD *)this + 129);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v14);
    re::StringID::destroyString((re::StringID *)v14);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872)))
  {
    re::StringID::StringID((re::StringID *)v12, (const StringID *)((char *)this + 872));
    v13 = *((_QWORD *)this + 111);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v12);
    re::StringID::destroyString((re::StringID *)v12);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 848)))
  {
    re::StringID::StringID((re::StringID *)v10, (const StringID *)this + 53);
    v11 = *((_QWORD *)this + 108);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v10);
    re::StringID::destroyString((re::StringID *)v10);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 848));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 944)))
  {
    re::StringID::StringID((re::StringID *)v8, (const StringID *)this + 59);
    v9 = *((_QWORD *)this + 120);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v8);
    re::StringID::destroyString((re::StringID *)v8);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 944));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968)))
  {
    re::StringID::StringID((re::StringID *)v6, (const StringID *)((char *)this + 968));
    v7 = *((_QWORD *)this + 123);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v6);
    re::StringID::destroyString((re::StringID *)v6);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968));
  }
  if (re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040)))
  {
    re::StringID::StringID((re::StringID *)v4, (const StringID *)this + 65);
    v5 = *((_QWORD *)this + 132);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v4);
    re::StringID::destroyString((re::StringID *)v4);
    re::ProviderHandle::invalidate((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040));
  }
}

void re::RealityEmitterBase::~RealityEmitterBase(re::RealityEmitterBase *this)
{
  re::ProjectiveShadowBuilder::MutableState *v2;

  *(_QWORD *)this = off_24ED83430;
  v2 = (re::RealityEmitterBase *)((char *)this + 152);
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 720));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 696));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 672));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 648));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 624));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 600));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 576));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 552));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 528));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 504));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 472));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 448));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 424));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 400));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 376));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 352));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 328));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 304));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 280));
  re::StringID::destroyString((re::RealityEmitterBase *)((char *)this + 256));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 224));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 200));
  re::AssetHandle::~AssetHandle((re::RealityEmitterBase *)((char *)this + 176));
  re::ProjectiveShadowBuilder::MutableState::~MutableState(v2);
  re::RenderGraphEmitterBase::~RenderGraphEmitterBase(this);
}

void re::RenderGraphSimpleForwardEmitter::registerProviders(re::RenderGraphSimpleForwardEmitter *this, re::RenderManager **a2, AssetService *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 isValid;
  uint64_t *v18;
  _anonymous_namespace_ *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t *v25;
  _anonymous_namespace_ *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t *v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  unsigned int v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t *v73;
  uint64_t *v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _OWORD v79[2];
  _OWORD v80[2];
  _OWORD v81[2];
  _OWORD v82[2];
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;

  re::RealityEmitterBase::registerCommonProviders(this, a2, a3);
  (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v85, a3, "engine:BuiltinRenderGraphResources/Common/depthClear.rematerial");
  v6 = *((_OWORD *)this + 11);
  *((_OWORD *)this + 11) = v85;
  v85 = v6;
  v7 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = v86;
  v86 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v85);
  re::AssetHandle::loadAsync((re::RenderGraphSimpleForwardEmitter *)((char *)this + 176));
  (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v85, a3, "engine:default.metallib");
  re::AssetHandle::loadAsync((re::AssetHandle *)&v85);
  v8 = *((_QWORD *)this + 97);
  if (v8)
  {
    v9 = atomic_load((unsigned int *)(v8 + 704));
    if (v9 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 97), 0);
    v10 = *((_QWORD *)this + 97);
    if (v10)
    {
      v11 = atomic_load((unsigned int *)(v10 + 704));
      if (v11 == 2 && !re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 896)))
      {
        v12 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphSimpleForwardEmitter *)((char *)this + 768));
        re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)(v12 + 8), 0, 0, (uint64_t)&v83);
        v13 = v83;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = &str_110;
        v14 = *((_QWORD *)this + 112);
        *((_QWORD *)this + 112) = v13;
        v15 = v13 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
        v16 = *((_QWORD *)this + 113);
        *((_QWORD *)this + 113) = *((_QWORD *)&v13 + 1);
        v87 = v15;
        v88 = v16;
        re::StringID::destroyString((re::StringID *)&v87);
        *((_QWORD *)this + 114) = v84;
        re::StringID::destroyString((re::StringID *)&v83);
      }
    }
  }
  isValid = re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 920));
  if (!isValid)
  {
    v18 = re::globalAllocators((re *)isValid);
    v19 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 48, 8);
    re::VFXRenderGraphProvider::VFXRenderGraphProvider((uint64_t)v19, (const re::DynamicString *)v82);
    if (*(_QWORD *)&v82[0])
    {
      if ((BYTE8(v82[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v82[0] + 40))();
      memset(v82, 0, sizeof(v82));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "VFXSimulation", v19, 0, 1, (uint64_t)&v83);
    v20 = v83;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = &str_110;
    v21 = *((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v20;
    v22 = v20 & 0xFFFFFFFFFFFFFFFELL | v21 & 1;
    v23 = *((_QWORD *)this + 116);
    *((_QWORD *)this + 116) = *((_QWORD *)&v20 + 1);
    v87 = v22;
    v88 = v23;
    re::StringID::destroyString((re::StringID *)&v87);
    *((_QWORD *)this + 117) = v84;
    re::StringID::destroyString((re::StringID *)&v83);
  }
  v24 = re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 992));
  if (!v24)
  {
    v25 = re::globalAllocators((re *)v24);
    v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 88, 8);
    re::DepthStencilCombinerProvider::DepthStencilCombinerProvider(v26, (const re::DynamicString *)v81);
    if (*(_QWORD *)&v81[0])
    {
      if ((BYTE8(v81[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v81[0] + 40))();
      memset(v81, 0, sizeof(v81));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", v26, -10, 1, (uint64_t)&v83);
    v27 = v83;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = &str_110;
    v28 = *((_QWORD *)this + 124);
    *((_QWORD *)this + 124) = v27;
    v29 = v27 & 0xFFFFFFFFFFFFFFFELL | v28 & 1;
    v30 = *((_QWORD *)this + 125);
    *((_QWORD *)this + 125) = *((_QWORD *)&v27 + 1);
    v87 = v29;
    v88 = v30;
    re::StringID::destroyString((re::StringID *)&v87);
    *((_QWORD *)this + 126) = v84;
    re::StringID::destroyString((re::StringID *)&v83);
  }
  v31 = re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1016));
  if (!v31)
  {
    v32 = re::globalAllocators((re *)v31);
    v33 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32[2] + 32))(v32[2], 136, 8);
    re::DepthStencilSplitterProvider::DepthStencilSplitterProvider((uint64_t)v33, (const re::DynamicString *)v80);
    if (*(_QWORD *)&v80[0])
    {
      if ((BYTE8(v80[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v80[0] + 40))();
      memset(v80, 0, sizeof(v80));
    }
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v83, a3, "engine:BuiltinRenderGraphResources/Common/separateDepth.rematerial");
    v34 = *(_OWORD *)(v33 + 11);
    *(_OWORD *)(v33 + 11) = v83;
    v83 = v34;
    v35 = v33[13];
    v33[13] = v84;
    v84 = v35;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v83);
    re::AssetHandle::loadAsync((re::AssetHandle *)(v33 + 11));
    re::AssetHandle::operator=((uint64_t *)this + 28, v33 + 11);
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v83, a3, "engine:BuiltinRenderGraphResources/Common/separateStencil.rematerial");
    v36 = *((_OWORD *)v33 + 7);
    *((_OWORD *)v33 + 7) = v83;
    v83 = v36;
    v37 = v33[16];
    v33[16] = v84;
    v84 = v37;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v83);
    re::AssetHandle::loadAsync((re::AssetHandle *)(v33 + 14));
    re::AssetHandle::operator=((uint64_t *)this + 25, v33 + 14);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)v33, 10, 1, (uint64_t)&v83);
    v38 = v83;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = &str_110;
    v39 = *((_QWORD *)this + 127);
    *((_QWORD *)this + 127) = v38;
    v40 = v38 & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
    v41 = *((_QWORD *)this + 128);
    *((_QWORD *)this + 128) = *((_QWORD *)&v38 + 1);
    v87 = v40;
    v88 = v41;
    re::StringID::destroyString((re::StringID *)&v87);
    *((_QWORD *)this + 129) = v84;
    re::StringID::destroyString((re::StringID *)&v83);
  }
  v42 = *((_QWORD *)this + 94);
  if (v42)
  {
    v43 = atomic_load((unsigned int *)(v42 + 704));
    if (v43 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 94), 0);
    v44 = *((_QWORD *)this + 94);
    if (v44)
    {
      v45 = atomic_load((unsigned int *)(v44 + 704));
      if (v45 == 2 && !re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 872)))
      {
        v46 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphSimpleForwardEmitter *)((char *)this + 744));
        re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "SingleGraphShadows", (const re::RenderGraphProviderBase *)(v46 + 8), 0, 0, (uint64_t)&v83);
        v47 = v83;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = &str_110;
        v48 = *((_QWORD *)this + 109);
        *((_QWORD *)this + 109) = v47;
        v49 = v47 & 0xFFFFFFFFFFFFFFFELL | v48 & 1;
        v50 = *((_QWORD *)this + 110);
        *((_QWORD *)this + 110) = *((_QWORD *)&v47 + 1);
        v87 = v49;
        v88 = v50;
        re::StringID::destroyString((re::StringID *)&v87);
        *((_QWORD *)this + 111) = v84;
        re::StringID::destroyString((re::StringID *)&v83);
      }
    }
  }
  v51 = (__int128 *)((char *)this + 824);
  v52 = *((_QWORD *)this + 104);
  if (!v52 || (v53 = atomic_load((unsigned int *)(v52 + 704)), v53 != 2))
  {
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v83, a3, "engine:BuiltinRenderGraphResources/Common/filter.rerendergraph");
    v54 = *v51;
    *v51 = v83;
    v83 = v54;
    v55 = *((_QWORD *)this + 105);
    *((_QWORD *)this + 105) = v84;
    v84 = v55;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v83);
    re::AssetHandle::loadNow(*((_QWORD *)this + 104), 0);
  }
  v56 = *((_QWORD *)this + 104);
  if (v56)
  {
    v57 = atomic_load((unsigned int *)(v56 + 704));
    if (v57 == 2 && !re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 848)))
    {
      v58 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphSimpleForwardEmitter *)((char *)this + 824));
      re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Filter", (const re::RenderGraphProviderBase *)(v58 + 8), 0, 0, (uint64_t)&v83);
      v59 = v83;
      *(_QWORD *)&v83 = 0;
      *((_QWORD *)&v83 + 1) = &str_110;
      v60 = *((_QWORD *)this + 106);
      *((_QWORD *)this + 106) = v59;
      v61 = v59 & 0xFFFFFFFFFFFFFFFELL | v60 & 1;
      v62 = *((_QWORD *)this + 107);
      *((_QWORD *)this + 107) = *((_QWORD *)&v59 + 1);
      v87 = v61;
      v88 = v62;
      re::StringID::destroyString((re::StringID *)&v87);
      *((_QWORD *)this + 108) = v84;
      re::StringID::destroyString((re::StringID *)&v83);
    }
  }
  v63 = *((_QWORD *)this + 100);
  if (v63)
  {
    v64 = atomic_load((unsigned int *)(v63 + 704));
    if (v64 != 2)
      re::AssetHandle::loadNow(*((_QWORD *)this + 100), 0);
    v65 = *((_QWORD *)this + 100);
    if (v65)
    {
      v66 = atomic_load((unsigned int *)(v65 + 704));
      if (v66 == 2 && !re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 968)))
      {
        v67 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphSimpleForwardEmitter *)((char *)this + 792));
        re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "PostProcess", (const re::RenderGraphProviderBase *)(v67 + 8), 0, 0, (uint64_t)&v83);
        v68 = v83;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = &str_110;
        v69 = *((_QWORD *)this + 121);
        *((_QWORD *)this + 121) = v68;
        v70 = v68 & 0xFFFFFFFFFFFFFFFELL | v69 & 1;
        v71 = *((_QWORD *)this + 122);
        *((_QWORD *)this + 122) = *((_QWORD *)&v68 + 1);
        v87 = v70;
        v88 = v71;
        re::StringID::destroyString((re::StringID *)&v87);
        *((_QWORD *)this + 123) = v84;
        re::StringID::destroyString((re::StringID *)&v83);
      }
    }
  }
  v72 = re::FontID::isValid((re::RenderGraphSimpleForwardEmitter *)((char *)this + 1040));
  if (!v72)
  {
    v73 = re::globalAllocators((re *)v72);
    v74 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73[2] + 32))(v73[2], 112, 8);
    re::VRRUnwarpProvider::VRRUnwarpProvider(v74, (const re::DynamicString *)v79);
    if (*(_QWORD *)&v79[0])
    {
      if ((BYTE8(v79[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v79[0] + 40))();
      memset(v79, 0, sizeof(v79));
    }
    re::AssetHandle::operator=(v74 + 5, (uint64_t *)&v85);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Camera", (const re::RenderGraphProviderBase *)v74, 50, 1, (uint64_t)&v83);
    v75 = v83;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = &str_110;
    v76 = *((_QWORD *)this + 130);
    *((_QWORD *)this + 130) = v75;
    v77 = v75 & 0xFFFFFFFFFFFFFFFELL | v76 & 1;
    v78 = *((_QWORD *)this + 131);
    *((_QWORD *)this + 131) = *((_QWORD *)&v75 + 1);
    v87 = v77;
    v88 = v78;
    re::StringID::destroyString((re::StringID *)&v87);
    *((_QWORD *)this + 132) = v84;
    re::StringID::destroyString((re::StringID *)&v83);
  }
  *((_QWORD *)this + 133) = a2;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v85);
}

void re::RenderGraphSimpleForwardEmitter::afterCameraViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, re::RenderFrame *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const char *v11;
  unsigned __int8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  re *v18;
  const char *v19;
  unint64_t v20[12];

  v20[11] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a7 + 8) & 1) != 0)
    v11 = *(const char **)(a7 + 16);
  else
    v11 = (const char *)(a7 + 9);
  if (!*(_BYTE *)(a7 + 348) && *(_QWORD *)(a1 + 800))
  {
    v13 = atomic_load((unsigned __int8 *)&qword_25411F988);
    if ((v13 & 1) == 0)
    {
      v18 = (re *)__cxa_guard_acquire(&qword_25411F988);
      if ((_DWORD)v18)
      {
        _MergedGlobals_446 = re::hashString(v18, v19);
        __cxa_guard_release(&qword_25411F988);
      }
    }
    v14 = 0x9E3779B97F4A7C17;
    v15 = _MergedGlobals_446;
    v16 = strlen(v11);
    if (v16)
    {
      MurmurHash3_x64_128((uint64_t)v11, v16, 0, v20);
      v14 = ((v20[1] - 0x61C8864680B583E9 + (v20[0] << 6) + (v20[0] >> 2)) ^ v20[0]) - 0x61C8864680B583E9;
    }
    re::CameraView::makeViewportPercentData((re::CameraView *)a7, v17, (uint64_t)v20);
    re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a5, ((v15 >> 2) + (v15 << 6) + v14) ^ v15, (uint64_t)v20);
    re::RenderFrame::emitGraph(a4, "PostProcess", v11);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 104) + 1648) + 16) = 0;
  }
  re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(a1, a3, (uint64_t)a4, (_QWORD *)a7);
}

void re::RenderGraphSimpleForwardEmitter::afterCameraMultiViewHandler(uint64_t a1, uint64_t a2, uint64_t a3, re::RenderFrame *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const char *v7;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  re *v16;
  const char *v17;
  unint64_t v18[12];

  v18[11] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a7 + 8) & 1) != 0)
    v7 = *(const char **)(a7 + 16);
  else
    v7 = (const char *)(a7 + 9);
  if (!*(_BYTE *)(a7 + 348) && *(_QWORD *)(a1 + 800))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_25411F998);
    if ((v11 & 1) == 0)
    {
      v16 = (re *)__cxa_guard_acquire(&qword_25411F998);
      if ((_DWORD)v16)
      {
        qword_25411F990 = re::hashString(v16, v17);
        __cxa_guard_release(&qword_25411F998);
      }
    }
    v12 = 0x9E3779B97F4A7C17;
    v13 = qword_25411F990;
    v14 = strlen(v7);
    if (v14)
    {
      MurmurHash3_x64_128((uint64_t)v7, v14, 0, v18);
      v12 = ((v18[1] - 0x61C8864680B583E9 + (v18[0] << 6) + (v18[0] >> 2)) ^ v18[0]) - 0x61C8864680B583E9;
    }
    re::CameraMultiView::makeViewportPercentDataInstancedMode((re::CameraMultiView *)a7, v15, (uint64_t)v18);
    re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a5, ((v13 >> 2) + (v13 << 6) + v12) ^ v13, (uint64_t)v18);
    re::RenderFrame::emitGraph(a4, "PostProcess", v7);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 104) + 1648) + 16) = 0;
  }
}

uint64_t re::RenderGraphSimpleForwardEmitter::emitFrameContext(re::RealityEmitterBase *a1, _QWORD *a2, re::RenderFrame *this, re *a4)
{
  double v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::Allocator **v15;
  uint64_t v16;
  uint64_t v17;
  re::Allocator **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;

  re::RenderFrame::emitGraph(this, "UploadMultiSceneConstants", "RenderFrame");
  v9 = a2[2];
  if (v9)
  {
    v10 = (_QWORD *)a2[3];
    v11 = 464 * v9;
    do
    {
      re::RealityEmitterBase::emitDeformerGraph((uint64_t)a1, (uint64_t)v10, this, (uint64_t)a4);
      re::RealityEmitterBase::emitVFXSimulationGraph((uint64_t)a1, v10, this, (uint64_t)a4);
      v10 += 58;
      v11 -= 464;
    }
    while (v11);
  }
  v12 = a2[12];
  if (v12 && *(_QWORD *)(v12 + 16))
    re::RenderFrame::emitGraph(this, "MipmapGenerationContext", "RenderFrame");
  v13 = a2[13];
  if (v13 && *(_QWORD *)(v13 + 16))
    re::RenderFrame::emitGraph(this, "BlurGenerationContext", "RenderFrame");
  re::RealityEmitterBase::emitProbeWriteGraph(a1, this, v8);
  re::RenderFrame::emitGraph(this, "ProjectiveMeshShadow", "RenderFrame");
  re::RealityEmitterBase::emitPlanarProjectiveShadowGraph((uint64_t)a1, a2, this, (uint64_t)a4);
  v28 = 0;
  v14 = a2[2];
  if (v14)
  {
    v15 = (re::Allocator **)a2[3];
    v16 = 464 * v14;
    do
    {
      re::RealityEmitterBase::emitSingleGraphShadows((uint64_t)a1, v15, (uint64_t)this, (uint64_t)a4, &v28);
      v15 += 58;
      v16 -= 464;
    }
    while (v16);
    v17 = a2[2];
    if (v17)
    {
      v18 = (re::Allocator **)a2[3];
      v19 = 464 * v17;
      do
      {
        re::RealityEmitterBase::emitFilterMapGraph((uint64_t)a1, v18, (uint64_t)this, (uint64_t)a4);
        v18 += 58;
        v19 -= 464;
      }
      while (v19);
      v20 = a2[2];
      if (v20)
      {
        v21 = a2[3];
        v22 = 464 * v20;
        do
        {
          re::RealityEmitterBase::emitVisualProxyHighFidelityGraph((uint64_t)a1, v21, this, a4);
          v21 += 464;
          v22 -= 464;
        }
        while (v22);
        v24 = a2[2];
        if (v24)
        {
          v25 = a2[3];
          v26 = 464 * v24;
          do
          {
            re::RealityEmitterBase::emitCameraGraphs(a1, a2, v25, (uint64_t)this, (uint64_t)a4, 0, v23);
            v25 += 464;
            v26 -= 464;
          }
          while (v26);
        }
      }
    }
  }
  return re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(a1, this, a4);
}

void re::RenderGraphSimpleForwardEmitter::afterPrepareSceneContextHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  re::RenderGraphAsset *v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  re::RenderGraphFile *v14;
  char v15;
  unint64_t v16;
  const char *v17;

  v4 = *(_BYTE **)(a4 + 336);
  if (!v4)
    return;
  v7 = (re::RenderGraphAsset *)(a1 + 768);
  if (!re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)(a1 + 768)))
    return;
  if (*v4)
  {
    v8 = v4[5];
    v9 = v8 ^ 1;
    if (!v4[6])
      goto LABEL_10;
LABEL_8:
    v10 = 2 * (v8 != 0);
    goto LABEL_11;
  }
  if (v4[6])
  {
    v8 = v4[5];
    v9 = v8 ^ 1;
    goto LABEL_8;
  }
  v9 = 0;
LABEL_10:
  v10 = 0;
LABEL_11:
  if ((*(_BYTE *)(a3 + 120) & 0x3F) != (v10 | v9))
  {
    v11 = *(_QWORD *)(a1 + 776);
    if (v11)
    {
      v12 = atomic_load((unsigned int *)(v11 + 704));
      if (v12 == 2)
      {
        ++*(_DWORD *)(*(_QWORD *)(a1 + 776) + 260);
        v13 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>(v7);
        if (v13)
        {
          v14 = (re::RenderGraphFile *)(v13 + 8);
          v16 = 0x9AB5F11FB4FA0048;
          v17 = "SceneUnderstandingOcclusionAndShadowNode";
          v15 = v9;
          re::RenderGraphFile::setRuntimeNodeSetting<BOOL>((re::RenderGraphFile *)(v13 + 8), (const re::StringID *)&v16, "Enabled", &v15);
          re::StringID::destroyString((re::StringID *)&v16);
          v16 = 0xF5A2D353F87D6B9CLL;
          v17 = "MeshShadowProjectedPatchReceiverNode";
          v15 = v10 >> 1;
          re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v14, (const re::StringID *)&v16, "Enabled", &v15);
          re::StringID::destroyString((re::StringID *)&v16);
          v16 = 0xF7F248B7F1C26F4;
          v17 = "PatchShadowReceiverDepthOnlyNode";
          v15 = v10 >> 1;
          re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(v14, (const re::StringID *)&v16, "Enabled", &v15);
          re::StringID::destroyString((re::StringID *)&v16);
        }
      }
    }
  }
  *(_BYTE *)(a3 + 120) = v10 | v9;
}

uint64_t *re::allocInfo_RenderGraphSimpleForwardEmitter(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25411F9A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411F9A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411F9D8, 0);
    *(uint64_t *)((char *)&qword_25411F9E8 + 6) = 0;
    qword_25411F9E8 = 0;
    qword_25411F9F8 = 0;
    qword_25411FA00 = 0xFFFFFFFFLL;
    qword_25411F9D8 = (uint64_t)&off_24ED7DAA8;
    qword_25411FA08 = (uint64_t)"RenderGraphSimpleForwardEmitter";
    dword_25411FA10 = 0;
    unk_25411FA18 = 0u;
    unk_25411FA28 = 0u;
    unk_25411FA38 = 0u;
    qword_25411FA48 = 0;
    __cxa_guard_release(&qword_25411F9A0);
  }
  return &qword_25411F9D8;
}

void re::initInfo_RenderGraphSimpleForwardEmitter(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0x189F6B76760EA926;
  v26[1] = "RenderGraphSimpleForwardEmitter";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_25411F9A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411F9A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RealityEmitterBase((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RealityEmitterBase";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411F9B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "shadowGraph";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2E800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411F9B8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "cameraGraph";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x30000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411F9C0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_AssetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "postProcessGraph";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x31800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411F9C8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_BOOL((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "enableBlurProvider";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x33000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_25411F9D0 = v24;
      __cxa_guard_release(&qword_25411F9A8);
    }
  }
  *((_QWORD *)this + 2) = 0x43000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_25411F9B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphSimpleForwardEmitter>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphSimpleForwardEmitter>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphSimpleForwardEmitter>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphSimpleForwardEmitter>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

re::RenderGraphSimpleForwardEmitter *re::internal::defaultConstruct<re::RenderGraphSimpleForwardEmitter>(int a1, int a2, re::RenderGraphSimpleForwardEmitter *this)
{
  return re::RenderGraphSimpleForwardEmitter::RenderGraphSimpleForwardEmitter(this);
}

void re::internal::defaultDestruct<re::RenderGraphSimpleForwardEmitter>(int a1, int a2, re::RenderGraphSimpleForwardEmitter *this)
{
  re::RenderGraphSimpleForwardEmitter::~RenderGraphSimpleForwardEmitter(this);
}

uint64_t re::introspect_RenderGraphSimpleForwardEmitter(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphSimpleForwardEmitter", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphSimpleForwardEmitter, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphSimpleForwardEmitter, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphSimpleForwardEmitter>, this);
}

uint64_t re::RenderGraphFile::setRuntimeNodeSetting<BOOL>(re::RenderGraphFile *a1, const re::StringID *a2, char *a3, char *a4)
{
  const char *v5;
  unsigned __int8 v6;
  __guard *v7;
  int v9;
  int v10;
  const re::IntrospectionBase *v11;
  char *v13;
  re::RenderGraphFile *v14;

  v5 = a3;
  if ((v6 & 1) == 0)
  {
    v14 = a1;
    v13 = a4;
    v11 = a2;
    a2 = v11;
    v5 = a3;
    a4 = v13;
    v10 = v9;
    a1 = v14;
    if (v10)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v11);
      a1 = v14;
      a2 = v11;
      v5 = a3;
      a4 = v13;
    }
  }
  return re::RenderGraphFile::setRuntimeNodeSetting(a1, a2, (const re::IntrospectionBase *)v7[331], v5, a4);
}

uint64_t re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraView>(uint64_t a1, _QWORD *a2, uint64_t a3, re::RenderFrame *a4, uint64_t a5, char *__s1, const re::CameraView *a7)
{
  _BOOL4 v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v13 = !strcmp(__s1, "Camera") || strcmp(__s1, "Portal") == 0;
  result = *(_QWORD *)(a3 + 24);
  if (result)
    v15 = !v13;
  else
    v15 = 1;
  if (!v15)
  {
    re::PlanarReflectionContext::makeReflectionCameraViews((re::PlanarReflectionContext *)result, a4, a7, (uint64_t)&v33);
    if ((_QWORD)v34)
    {
      v16 = v35;
      v17 = 672 * v34;
      do
      {
        (*(void (**)(uint64_t, _QWORD *, uint64_t, re::RenderFrame *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, a3, a4, a5, "Camera", v16);
        v16 += 672;
        v17 -= 672;
      }
      while (v17);
    }
    result = re::DynamicArray<re::CameraView>::deinit((uint64_t)&v33);
  }
  if (v13)
  {
    v29 = *(_QWORD *)(a3 + 320);
    if (v29)
    {
      v28 = *(_QWORD *)(v29 + 40);
      if (v28)
      {
        v18 = 0;
        v19 = a2 + 4;
        do
        {
          v30 = v18;
          result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v29, v18);
          v20 = *(_QWORD *)(result + 16);
          if (v20)
          {
            v21 = *(_QWORD **)(result + 32);
            v22 = &v21[92 * v20];
            v32 = v22;
            do
            {
              result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v19, *v21 >> 1);
              if (result != -1)
              {
                v23 = *(unsigned int *)(a2[5] + 16 * result + 8);
                if (a2[2] <= v23)
                {
                  v36 = 0u;
                  v37 = 0u;
                  v34 = 0u;
                  v35 = 0u;
                  v33 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                v24 = a2[3] + 464 * v23;
                result = *(_QWORD *)(v24 + 24);
                if (result)
                {
                  v25 = v19;
                  re::PlanarReflectionContext::makeReflectionCameraViews((re::PlanarReflectionContext *)result, a4, a7, (uint64_t)&v33);
                  if ((_QWORD)v34)
                  {
                    v26 = v35;
                    v27 = 672 * v34;
                    do
                    {
                      (*(void (**)(uint64_t, _QWORD *, uint64_t, re::RenderFrame *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, v24, a4, a5, "Camera", v26);
                      v26 += 672;
                      v27 -= 672;
                    }
                    while (v27);
                  }
                  result = re::DynamicArray<re::CameraView>::deinit((uint64_t)&v33);
                  v19 = v25;
                  v22 = v32;
                }
              }
              v21 += 92;
            }
            while (v21 != v22);
          }
          v18 = v30 + 1;
        }
        while (v30 + 1 != v28);
      }
    }
  }
  return result;
}

uint64_t re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraMultiView>(uint64_t a1, _QWORD *a2, uint64_t a3, re::RenderFrame *a4, uint64_t a5, char *__s1, const re::CameraMultiView *a7)
{
  _BOOL4 v13;
  uint64_t result;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v13 = !strcmp(__s1, "Camera") || strcmp(__s1, "Portal") == 0;
  result = *(_QWORD *)(a3 + 24);
  if (result)
    v15 = !v13;
  else
    v15 = 1;
  if (!v15)
  {
    re::PlanarReflectionContext::makeReflectionCameraMultiViews((re::PlanarReflectionContext *)result, a4, a7, (uint64_t)&v33);
    if ((_QWORD)v34)
    {
      v16 = v35;
      v17 = 1360 * v34;
      do
      {
        (*(void (**)(uint64_t, _QWORD *, uint64_t, re::RenderFrame *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, a3, a4, a5, "Camera", v16);
        v16 += 1360;
        v17 -= 1360;
      }
      while (v17);
    }
    result = re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)&v33);
  }
  if (v13)
  {
    v29 = *(_QWORD *)(a3 + 320);
    if (v29)
    {
      v28 = *(_QWORD *)(v29 + 40);
      if (v28)
      {
        v18 = 0;
        v19 = a2 + 4;
        do
        {
          v30 = v18;
          result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v29, v18);
          v20 = *(_QWORD *)(result + 16);
          if (v20)
          {
            v21 = *(_QWORD **)(result + 32);
            v22 = &v21[92 * v20];
            v32 = v22;
            do
            {
              result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v19, *v21 >> 1);
              if (result != -1)
              {
                v23 = *(unsigned int *)(a2[5] + 16 * result + 8);
                if (a2[2] <= v23)
                {
                  v36 = 0u;
                  v37 = 0u;
                  v34 = 0u;
                  v35 = 0u;
                  v33 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                v24 = a2[3] + 464 * v23;
                result = *(_QWORD *)(v24 + 24);
                if (result)
                {
                  v25 = v19;
                  re::PlanarReflectionContext::makeReflectionCameraMultiViews((re::PlanarReflectionContext *)result, a4, a7, (uint64_t)&v33);
                  if ((_QWORD)v34)
                  {
                    v26 = v35;
                    v27 = 1360 * v34;
                    do
                    {
                      (*(void (**)(uint64_t, _QWORD *, uint64_t, re::RenderFrame *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, v24, a4, a5, "Camera", v26);
                      v26 += 1360;
                      v27 -= 1360;
                    }
                    while (v27);
                  }
                  result = re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)&v33);
                  v19 = v25;
                  v22 = v32;
                }
              }
              v21 += 92;
            }
            while (v21 != v22);
          }
          v18 = v30 + 1;
        }
        while (v30 + 1 != v28);
      }
    }
  }
  return result;
}

uint64_t re::RealityEmitterBase::cameraViewHandlerCommon<re::CameraView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  unint64_t v13;
  const char *v14;
  unsigned __int8 v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  size_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  const char *v27;
  const char *v28;
  int v29;
  uint64_t v30;
  int v31[10];
  void (**v32)(re::DefaultDepthFormatData *__hidden);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v13 = 0x9E3779B97F4A7C17;
  re::CameraView::prepareEmitDefault(a7, (uint64_t *)a4, a5, a2, a3, a6);
  if ((*(_BYTE *)(a7 + 8) & 1) != 0)
    v14 = *(const char **)(a7 + 16);
  else
    v14 = (const char *)(a7 + 9);
  if (*(_BYTE *)(a7 + 350))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_25411FA60);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25411FA60))
    {
      qword_25411FA58 = re::hashString((re *)"DynamicFunctionConstants", v27);
      __cxa_guard_release(&qword_25411FA60);
    }
    v16 = qword_25411FA58;
    v17 = strlen(v14);
    v18 = 0x9E3779B97F4A7C17;
    if (v17)
    {
      MurmurHash3_x64_128((uint64_t)v14, v17, 0, (unint64_t *)&v32);
      v18 = ((v33 - 0x61C8864680B583E9 + ((_QWORD)v32 << 6) + ((unint64_t)v32 >> 2)) ^ (unint64_t)v32)
          - 0x61C8864680B583E9;
    }
    v19 = ((v16 >> 2) + (v16 << 6) + v18) ^ v16;
    v20 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a5, v19);
    if (!v20)
    {
      v32 = *(void (***)(re::DefaultDepthFormatData *__hidden))(a4 + 376);
      v31[0] = 2;
      v20 = re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(a5, v19, (uint64_t *)&v32, v31);
    }
    v21 = atomic_load((unsigned __int8 *)&qword_25411FA70);
    if ((v21 & 1) == 0)
    {
      v30 = v20;
      v29 = __cxa_guard_acquire(&qword_25411FA70);
      v20 = v30;
      if (v29)
      {
        qword_25411FA68 = re::hashString((re *)"EnableUserEnvironment", v28);
        __cxa_guard_release(&qword_25411FA70);
        v20 = v30;
      }
    }
    LODWORD(v32) = 1;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v20 + 8), &qword_25411FA68, (int *)&v32);
  }
  v22 = strlen(a6);
  if (v22)
  {
    MurmurHash3_x64_128((uint64_t)a6, v22, 0, (unint64_t *)&v32);
    v23 = (v33 - 0x61C8864680B583E9 + ((_QWORD)v32 << 6) + ((unint64_t)v32 >> 2)) ^ (unint64_t)v32;
  }
  else
  {
    v23 = 0;
  }
  v24 = strlen(v14);
  if (v24)
  {
    MurmurHash3_x64_128((uint64_t)v14, v24, 0, (unint64_t *)&v32);
    v13 = ((v33 - 0x61C8864680B583E9 + ((_QWORD)v32 << 6) + ((unint64_t)v32 >> 2)) ^ (unint64_t)v32)
        - 0x61C8864680B583E9;
  }
  v25 = ((v23 >> 2) + (v23 << 6) + v13) ^ v23;
  if (*(_BYTE *)(a1 + 136))
    *(_BYTE *)(re::RenderGraphDataStore::add<re::TriangleFillModeData>(a5, v25) + 8) = 1;
  v32 = &off_24ED83F38;
  LODWORD(v33) = *(_DWORD *)(a1 + 140);
  re::RenderGraphDataStore::add<re::DefaultDepthFormatData,re::DefaultDepthFormatData&>(a5, v25, (uint64_t)&v32);
  v32 = &off_24ED83F78;
  LODWORD(v33) = *(_DWORD *)(a1 + 144);
  re::RenderGraphDataStore::add<re::DefaultStencilFormatData,re::DefaultStencilFormatData&>(a5, v25, (uint64_t)&v32);
  v36 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v35 = 0;
  if (!*(_BYTE *)(a4 + 424))
  {
    re::CameraView::registerFileProviders(a6, a7, *(re::RenderGraphManager **)a4, a3, (uint64_t)v31);
    re::DynamicArray<re::ProviderHandle>::operator=((uint64_t)&v32, (uint64_t)v31);
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v31);
  }
  re::RenderFrame::emitGraph((re::RenderFrame *)a4, a6, v14);
  re::CameraView::unregisterFileProviders(*(_QWORD *)a4, (uint64_t)&v32);
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v32);
}

unint64_t re::getCombinedScopeHash(unint64_t this, char *__s, const char *a3)
{
  unint64_t v5;
  size_t v6;
  unint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v5 = 0x9E3779B97F4A7C17;
  v6 = strlen(__s);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)__s, v6, 0, v8);
    v5 = ((v8[1] - 0x61C8864680B583E9 + (v8[0] << 6) + (v8[0] >> 2)) ^ v8[0]) - 0x61C8864680B583E9;
  }
  return ((this >> 2) + (this << 6) + v5) ^ this;
}

uint64_t re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v6 = (unint64_t)"N2re28DynamicFunctionConstantsDataE";
  if (((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x8000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((unint64_t)"N2re28DynamicFunctionConstantsDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v8 = 5381;
    do
    {
      v6 = v8;
      v9 = *v7++;
      v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  v16 = (a2 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
  v10 = a1 + 64;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 72, 8);
  v12 = *a3;
  v13 = *a4;
  *(_QWORD *)v11 = &off_24ED83E30;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init((_QWORD *)(v11 + 8), v12, v13);
  v15 = v11;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v10, (unint64_t *)&v16, &v15);
}

uint64_t re::RenderGraphDataStore::add<re::TriangleFillModeData>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  unint64_t v20;
  unint64_t v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v20 = 0;
  if ((v4 & 1) == 0
  {
    re::introspect<re::TriangleFillModeData>(void)::info = (_UNKNOWN *)re::introspect_TriangleFillModeData(0);
  }
  v19 = re::introspect<re::TriangleFillModeData>(void)::info;
  v5 = strlen(*((const char **)re::introspect<re::TriangleFillModeData>(void)::info + 6));
  if (v5)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::TriangleFillModeData>(void)::info + 6), v5, 0, v21);
    v6 = (v21[1] - 0x61C8864680B583E9 + (v21[0] << 6) + (v21[0] >> 2)) ^ v21[0];
  }
  else
  {
    v6 = 0;
  }
  v20 = v6;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v20, &v19);
  v7 = (a2 - 0x61C8864680B583E9 + (v20 << 6) + (v20 >> 2)) ^ v20;
  v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  v8[1] = 0;
  v9 = *(_QWORD *)(a1 + 64);
  *v8 = &off_24ED73530;
  if (v9)
  {
    v9 = v7 % *(unsigned int *)(a1 + 88);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v17 = *(_QWORD *)(a1 + 80);
      if (*(_QWORD *)(v17 + 24 * v10 + 8) == v7)
      {
LABEL_16:
        v16 = v17 + 24 * v10;
        return *(_QWORD *)(v16 + 16);
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v17 + 24 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v17 + 24 * v10 + 8) == v7)
          goto LABEL_16;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 96);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v9) = v7 % *(unsigned int *)(a1 + 88);
      v12 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(_DWORD *)(v13 + 24 * v11);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(_DWORD *)(v13 + 24 * v11);
    *(_DWORD *)(a1 + 100) = v14 & 0x7FFFFFFF;
  }
  v15 = 24 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + v15) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v11) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v11 + 8) = v7;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v11 + 16) = v8;
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 80) + 24 * v11;
  return *(_QWORD *)(v16 + 16);
}

uint64_t re::RenderGraphDataStore::add<re::DefaultDepthFormatData,re::DefaultDepthFormatData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v11;
  unint64_t v12;
  unint64_t v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  if ((v6 & 1) == 0
  {
    re::introspect<re::DefaultDepthFormatData>(void)::info = (_UNKNOWN *)re::introspect_DefaultDepthFormatData(0);
  }
  v11 = re::introspect<re::DefaultDepthFormatData>(void)::info;
  v7 = strlen(*((const char **)re::introspect<re::DefaultDepthFormatData>(void)::info + 6));
  if (v7)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::DefaultDepthFormatData>(void)::info + 6), v7, 0, v13);
    v8 = (v13[1] - 0x61C8864680B583E9 + (v13[0] << 6) + (v13[0] >> 2)) ^ v13[0];
  }
  else
  {
    v8 = 0;
  }
  v12 = v8;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v12, &v11);
  v13[0] = (a2 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  *(_QWORD *)v9 = &off_24ED83F38;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a3 + 8);
  v11 = (void *)v9;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, v13, &v11);
}

uint64_t re::RenderGraphDataStore::add<re::DefaultStencilFormatData,re::DefaultStencilFormatData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v11;
  unint64_t v12;
  unint64_t v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v12 = 0;
  if ((v6 & 1) == 0
  {
    re::introspect<re::DefaultStencilFormatData>(void)::info = (_UNKNOWN *)re::introspect_DefaultStencilFormatData(0);
  }
  v11 = re::introspect<re::DefaultStencilFormatData>(void)::info;
  v7 = strlen(*((const char **)re::introspect<re::DefaultStencilFormatData>(void)::info + 6));
  if (v7)
  {
    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::DefaultStencilFormatData>(void)::info + 6), v7, 0, v13);
    v8 = (v13[1] - 0x61C8864680B583E9 + (v13[0] << 6) + (v13[0] >> 2)) ^ v13[0];
  }
  else
  {
    v8 = 0;
  }
  v12 = v8;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a1 + 176, &v12, &v11);
  v13[0] = (a2 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  *(_QWORD *)v9 = &off_24ED83F78;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a3 + 8);
  v11 = (void *)v9;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a1 + 64, v13, &v11);
}

uint64_t re::DynamicArray<re::ProviderHandle>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::RealityEmitterBase::cameraViewHandlerCommon<re::CameraMultiView>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  unint64_t v13;
  const char *v14;
  unsigned __int8 v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  size_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  const char *v27;
  const char *v28;
  int v29;
  uint64_t v30;
  int v31[10];
  void (**v32)(re::DefaultDepthFormatData *__hidden);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v13 = 0x9E3779B97F4A7C17;
  re::CameraMultiView::prepareEmitDefaultInstancedMode(a7, (uint64_t *)a4, a5, a2, a3, a6);
  if ((*(_BYTE *)(a7 + 8) & 1) != 0)
    v14 = *(const char **)(a7 + 16);
  else
    v14 = (const char *)(a7 + 9);
  if (*(_BYTE *)(a7 + 350))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_25411FA80);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25411FA80))
    {
      qword_25411FA78 = re::hashString((re *)"DynamicFunctionConstants", v27);
      __cxa_guard_release(&qword_25411FA80);
    }
    v16 = qword_25411FA78;
    v17 = strlen(v14);
    v18 = 0x9E3779B97F4A7C17;
    if (v17)
    {
      MurmurHash3_x64_128((uint64_t)v14, v17, 0, (unint64_t *)&v32);
      v18 = ((v33 - 0x61C8864680B583E9 + ((_QWORD)v32 << 6) + ((unint64_t)v32 >> 2)) ^ (unint64_t)v32)
          - 0x61C8864680B583E9;
    }
    v19 = ((v16 >> 2) + (v16 << 6) + v18) ^ v16;
    v20 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a5, v19);
    if (!v20)
    {
      v32 = *(void (***)(re::DefaultDepthFormatData *__hidden))(a4 + 376);
      v31[0] = 2;
      v20 = re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(a5, v19, (uint64_t *)&v32, v31);
    }
    v21 = atomic_load((unsigned __int8 *)&qword_25411FA90);
    if ((v21 & 1) == 0)
    {
      v30 = v20;
      v29 = __cxa_guard_acquire(&qword_25411FA90);
      v20 = v30;
      if (v29)
      {
        qword_25411FA88 = re::hashString((re *)"EnableUserEnvironment", v28);
        __cxa_guard_release(&qword_25411FA90);
        v20 = v30;
      }
    }
    LODWORD(v32) = 1;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v20 + 8), &qword_25411FA88, (int *)&v32);
  }
  v22 = strlen(a6);
  if (v22)
  {
    MurmurHash3_x64_128((uint64_t)a6, v22, 0, (unint64_t *)&v32);
    v23 = (v33 - 0x61C8864680B583E9 + ((_QWORD)v32 << 6) + ((unint64_t)v32 >> 2)) ^ (unint64_t)v32;
  }
  else
  {
    v23 = 0;
  }
  v24 = strlen(v14);
  if (v24)
  {
    MurmurHash3_x64_128((uint64_t)v14, v24, 0, (unint64_t *)&v32);
    v13 = ((v33 - 0x61C8864680B583E9 + ((_QWORD)v32 << 6) + ((unint64_t)v32 >> 2)) ^ (unint64_t)v32)
        - 0x61C8864680B583E9;
  }
  v25 = ((v23 >> 2) + (v23 << 6) + v13) ^ v23;
  if (*(_BYTE *)(a1 + 136))
    *(_BYTE *)(re::RenderGraphDataStore::add<re::TriangleFillModeData>(a5, v25) + 8) = 1;
  v32 = &off_24ED83F38;
  LODWORD(v33) = *(_DWORD *)(a1 + 140);
  re::RenderGraphDataStore::add<re::DefaultDepthFormatData,re::DefaultDepthFormatData&>(a5, v25, (uint64_t)&v32);
  v32 = &off_24ED83F78;
  LODWORD(v33) = *(_DWORD *)(a1 + 144);
  re::RenderGraphDataStore::add<re::DefaultStencilFormatData,re::DefaultStencilFormatData&>(a5, v25, (uint64_t)&v32);
  v36 = 0;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v35 = 0;
  if (!*(_BYTE *)(a4 + 424))
  {
    re::CameraView::registerFileProviders(a6, a7, *(re::RenderGraphManager **)a4, a3, (uint64_t)v31);
    re::DynamicArray<re::ProviderHandle>::operator=((uint64_t)&v32, (uint64_t)v31);
    re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v31);
  }
  re::RenderFrame::emitGraph((re::RenderFrame *)a4, a6, v14);
  re::CameraView::unregisterFileProviders(*(_QWORD *)a4, (uint64_t)&v32);
  return re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)&v32);
}

void re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  const char *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  id *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD **)(a2 + 424);
  if (v4
    && *v4
    && re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet((uint64_t)(v4 + 1), a4 + 48))
  {
    if ((a4[1] & 1) != 0)
      v8 = (const char *)a4[2];
    else
      v8 = (char *)a4 + 9;
    if ((v9 & 1) == 0
    {
      re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(re::RenderSceneContext &,re::RenderFrame &,re::CameraView const&)::kCustomPostProcessTypeScopeHash = re::hashString((re *)"CustomPostProcess", v17);
    }
    v10 = 0x9E3779B97F4A7C17;
    v11 = re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(re::RenderSceneContext &,re::RenderFrame &,re::CameraView const&)::kCustomPostProcessTypeScopeHash;
    v12 = strlen(v8);
    if (v12)
    {
      MurmurHash3_x64_128((uint64_t)v8, v12, 0, (unint64_t *)v18);
      v10 = ((*((_QWORD *)&v18[0] + 1) - 0x61C8864680B583E9 + (*(_QWORD *)&v18[0] << 6) + (*(_QWORD *)&v18[0] >> 2)) ^ *(_QWORD *)&v18[0])
          - 0x61C8864680B583E9;
    }
    v13 = re::RenderGraphDataStore::add<re::CustomPostProcessRenderGraphData>((re *)(a3 + 32), ((v11 >> 2) + (v11 << 6) + v10) ^ v11);
    v14 = *(id **)(a2 + 424);
    re::ObjCObject::operator=((id *)(v13 + 8), v14);
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(v13 + 16, (uint64_t)(v14 + 1));
    re::Projection::computeMatrix4x4F((re::Projection *)(a4 + 8), (uint64_t)v18);
    v15 = v18[1];
    *(_OWORD *)(v13 + 64) = v18[0];
    *(_OWORD *)(v13 + 80) = v15;
    v16 = v18[3];
    *(_OWORD *)(v13 + 96) = v18[2];
    *(_OWORD *)(v13 + 112) = v16;
    re::RenderFrame::emitGraph((re::RenderFrame *)a3, "CustomPostProcess", v8);
  }
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                        % v2));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v7 + 24 * v5 + 16) != v3)
  {
    while (1)
    {
      LODWORD(v5) = *(_DWORD *)(v7 + 24 * v5 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v5 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v7 + 24 * v5 + 16) == v3)
        return v7 + 24 * v5 + 16;
    }
    return 0;
  }
  return v7 + 24 * v5 + 16;
}

void re::RealityEmitterBase::afterCameraViewHandlerRealityRenderer(uint64_t a1, uint64_t a2, re::RenderFrame *a3, uint64_t a4, uint64_t a5)
{
  const char *v9;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17[12];

  v17[11] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a5 + 8) & 1) != 0)
    v9 = *(const char **)(a5 + 16);
  else
    v9 = (const char *)(a5 + 9);
  if (!*(_BYTE *)(a5 + 348))
  {
    v11 = atomic_load((unsigned __int8 *)&qword_25411FCC0);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25411FCC0))
    {
      qword_25411FCB8 = re::hashString((re *)"PostProcess", v16);
      __cxa_guard_release(&qword_25411FCC0);
    }
    v12 = 0x9E3779B97F4A7C17;
    v13 = qword_25411FCB8;
    v14 = strlen(v9);
    if (v14)
    {
      MurmurHash3_x64_128((uint64_t)v9, v14, 0, v17);
      v12 = ((v17[1] - 0x61C8864680B583E9 + (v17[0] << 6) + (v17[0] >> 2)) ^ v17[0]) - 0x61C8864680B583E9;
    }
    re::CameraView::makeViewportPercentData((re::CameraView *)a5, v15, (uint64_t)v17);
    re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a4, ((v13 >> 2) + (v13 << 6) + v12) ^ v13, (uint64_t)v17);
    re::RenderFrame::emitGraph(a3, "PostProcess", v9);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 104) + 1648) + 16) = 0;
  }
  re::RealityEmitterBase::emitCustomPostProcessGraph<re::CameraView>(a1, a2, (uint64_t)a3, (_QWORD *)a5);
}

uint64_t re::RealityEmitterBase::registerCommonProviders(re::RealityEmitterBase *this, re::RenderManager **a2, AssetService *a3)
{
  _BOOL8 isValid;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  _BOOL8 v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  _BOOL8 v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  _BOOL8 v24;
  uint64_t *v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  _BOOL8 v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  _BOOL8 v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  _BOOL8 v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unsigned int v51;
  _BOOL4 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _BOOL4 v57;
  const char *v58;
  __int128 v59;
  uint64_t v60;
  re *v61;
  uint64_t *v62;
  _anonymous_namespace_ *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  re *v69;
  uint64_t *v70;
  _anonymous_namespace_ *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t result;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  void *v83;
  _OWORD v84[2];
  unint64_t v85;
  void *v86;
  uint64_t v87;
  _OWORD v88[2];
  _OWORD v89[2];
  _OWORD v90[2];
  _OWORD v91[2];
  _OWORD v92[2];
  _OWORD v93[2];
  _OWORD v94[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  uint64_t v102;
  _QWORD *v103;
  _QWORD v104[3];
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  isValid = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 304));
  if (!isValid)
  {
    v7 = re::globalAllocators((re *)isValid);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)&v95);
    *(_QWORD *)v8 = off_24ED381E0;
    re::DynamicString::DynamicString((re::DynamicString *)(v8 + 8), (const re::DynamicString *)&v97);
    if ((_QWORD)v97 && (BYTE8(v97) & 1) != 0)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v97 + 40))(v97, v98);
    *(_QWORD *)v8 = off_24ED834E0;
    if ((_QWORD)v95)
    {
      if ((BYTE8(v95) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v95 + 40))(v95, v96);
      v95 = 0u;
      v96 = 0u;
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "UploadMultiSceneConstants", (const re::RenderGraphProviderBase *)v8, 0, 1, (uint64_t)&v97);
    v9 = v97;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = &str_110;
    v10 = *((_QWORD *)this + 38);
    v11 = (void *)*((_QWORD *)this + 39);
    *((_OWORD *)this + 19) = v9;
    v85 = v9 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
    v86 = v11;
    re::StringID::destroyString((re::StringID *)&v85);
    *((_QWORD *)this + 40) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  v12 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 328));
  if (!v12)
  {
    v13 = re::globalAllocators((re *)v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v94);
    *(_QWORD *)v14 = off_24ED381E0;
    re::DynamicString::DynamicString((re::DynamicString *)(v14 + 8), (const re::DynamicString *)&v97);
    if ((_QWORD)v97 && (BYTE8(v97) & 1) != 0)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v97 + 40))(v97, v98);
    *(_QWORD *)v14 = off_24ED83528;
    if (*(_QWORD *)&v94[0])
    {
      if ((BYTE8(v94[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v94[0] + 40))();
      memset(v94, 0, sizeof(v94));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "Deformer", (const re::RenderGraphProviderBase *)v14, 0, 1, (uint64_t)&v97);
    v15 = v97;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = &str_110;
    v16 = *((_QWORD *)this + 41);
    v17 = (void *)*((_QWORD *)this + 42);
    *(_OWORD *)((char *)this + 328) = v15;
    v85 = v15 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
    v86 = v17;
    re::StringID::destroyString((re::StringID *)&v85);
    *((_QWORD *)this + 43) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  v18 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 352));
  if (!v18)
  {
    v19 = re::globalAllocators((re *)v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v93);
    *(_QWORD *)v20 = off_24ED381E0;
    re::DynamicString::DynamicString((re::DynamicString *)(v20 + 8), (const re::DynamicString *)&v97);
    if ((_QWORD)v97 && (BYTE8(v97) & 1) != 0)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v97 + 40))(v97, v98);
    *(_QWORD *)v20 = off_24ED83638;
    if (*(_QWORD *)&v93[0])
    {
      if ((BYTE8(v93[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v93[0] + 40))();
      memset(v93, 0, sizeof(v93));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "MipmapGenerationContext", (const re::RenderGraphProviderBase *)v20, 0, 1, (uint64_t)&v97);
    v21 = v97;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = &str_110;
    v22 = *((_QWORD *)this + 44);
    v23 = (void *)*((_QWORD *)this + 45);
    *((_OWORD *)this + 22) = v21;
    v85 = v21 & 0xFFFFFFFFFFFFFFFELL | v22 & 1;
    v86 = v23;
    re::StringID::destroyString((re::StringID *)&v85);
    *((_QWORD *)this + 46) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  v24 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 376));
  if (!v24)
  {
    v25 = re::globalAllocators((re *)v24);
    v26 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 64, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v92);
    *v26 = off_24ED381E0;
    re::DynamicString::DynamicString((re::DynamicString *)(v26 + 1), (const re::DynamicString *)&v97);
    if ((_QWORD)v97 && (BYTE8(v97) & 1) != 0)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v97 + 40))(v97, v98);
    *v26 = off_24ED83680;
    v26[6] = 0;
    v26[7] = 0;
    v26[5] = 0;
    if (*(_QWORD *)&v92[0])
    {
      if ((BYTE8(v92[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v92[0] + 40))();
      memset(v92, 0, sizeof(v92));
    }
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, "engine:default.metallib");
    v27 = *(_OWORD *)(v26 + 5);
    *(_OWORD *)(v26 + 5) = v97;
    v97 = v27;
    v28 = v26[7];
    v26[7] = v98;
    v98 = v28;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "BlurGenerationContext", (const re::RenderGraphProviderBase *)v26, 0, 1, (uint64_t)&v97);
    v29 = v97;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = &str_110;
    v30 = *((_QWORD *)this + 47);
    v31 = (void *)*((_QWORD *)this + 48);
    *(_OWORD *)((char *)this + 376) = v29;
    v85 = v29 & 0xFFFFFFFFFFFFFFFELL | v30 & 1;
    v86 = v31;
    re::StringID::destroyString((re::StringID *)&v85);
    *((_QWORD *)this + 49) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  v32 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 400));
  if (!v32)
  {
    v33 = re::globalAllocators((re *)v32);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33[2] + 32))(v33[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v91);
    *(_QWORD *)v34 = off_24ED381E0;
    re::DynamicString::DynamicString((re::DynamicString *)(v34 + 8), (const re::DynamicString *)&v97);
    if ((_QWORD)v97 && (BYTE8(v97) & 1) != 0)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v97 + 40))(v97, v98);
    *(_QWORD *)v34 = off_24ED836C8;
    if (*(_QWORD *)&v91[0])
    {
      if ((BYTE8(v91[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v91[0] + 40))();
      memset(v91, 0, sizeof(v91));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "ProbeWriteContext", (const re::RenderGraphProviderBase *)v34, 0, 1, (uint64_t)&v97);
    v35 = v97;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = &str_110;
    v36 = *((_QWORD *)this + 50);
    v37 = (void *)*((_QWORD *)this + 51);
    *((_OWORD *)this + 25) = v35;
    v85 = v35 & 0xFFFFFFFFFFFFFFFELL | v36 & 1;
    v86 = v37;
    re::StringID::destroyString((re::StringID *)&v85);
    *((_QWORD *)this + 52) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  v38 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 448));
  if (!v38)
  {
    v39 = re::globalAllocators((re *)v38);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v90);
    *(_QWORD *)v40 = off_24ED381E0;
    re::DynamicString::DynamicString((re::DynamicString *)(v40 + 8), (const re::DynamicString *)&v97);
    if ((_QWORD)v97 && (BYTE8(v97) & 1) != 0)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v97 + 40))(v97, v98);
    *(_QWORD *)v40 = off_24ED83710;
    if (*(_QWORD *)&v90[0])
    {
      if ((BYTE8(v90[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v90[0] + 40))();
      memset(v90, 0, sizeof(v90));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "CustomPostProcess", (const re::RenderGraphProviderBase *)v40, 0, 1, (uint64_t)&v97);
    v41 = v97;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = &str_110;
    v42 = *((_QWORD *)this + 56);
    v43 = (void *)*((_QWORD *)this + 57);
    *((_OWORD *)this + 28) = v41;
    v85 = v41 & 0xFFFFFFFFFFFFFFFELL | v42 & 1;
    v86 = v43;
    re::StringID::destroyString((re::StringID *)&v85);
    *((_QWORD *)this + 58) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  v44 = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 472));
  if (!v44)
  {
    v45 = re::globalAllocators((re *)v44);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45[2] + 32))(v45[2], 40, 8);
    re::DynamicString::DynamicString((re::DynamicString *)&v97, (const re::DynamicString *)v89);
    *(_QWORD *)v46 = off_24ED381E0;
    re::DynamicString::DynamicString((re::DynamicString *)(v46 + 8), (const re::DynamicString *)&v97);
    if ((_QWORD)v97 && (BYTE8(v97) & 1) != 0)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v97 + 40))(v97, v98);
    *(_QWORD *)v46 = off_24ED83758;
    if (*(_QWORD *)&v89[0])
    {
      if ((BYTE8(v89[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v89[0] + 40))();
      memset(v89, 0, sizeof(v89));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "VisualProxyHighFidelity", (const re::RenderGraphProviderBase *)v46, 0, 1, (uint64_t)&v97);
    v47 = v97;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = &str_110;
    v48 = *((_QWORD *)this + 59);
    v49 = (void *)*((_QWORD *)this + 60);
    *(_OWORD *)((char *)this + 472) = v47;
    v85 = v47 & 0xFFFFFFFFFFFFFFFELL | v48 & 1;
    v86 = v49;
    re::StringID::destroyString((re::StringID *)&v85);
    *((_QWORD *)this + 61) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
  }
  v50 = *((_QWORD *)this + 76);
  if (v50)
  {
    v51 = atomic_load((unsigned int *)(v50 + 704));
    v52 = v51 != 2;
    if (!a3)
      goto LABEL_70;
  }
  else
  {
    v52 = 1;
    if (!a3)
      goto LABEL_70;
  }
  if (v52)
  {
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, "engine:BuiltinRenderGraphResources/Common/realityRendererCamera.rerendergraph");
    v53 = *(_OWORD *)((char *)this + 600);
    *(_OWORD *)((char *)this + 600) = v97;
    v97 = v53;
    v54 = *((_QWORD *)this + 77);
    *((_QWORD *)this + 77) = v98;
    v98 = v54;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
    re::AssetHandle::loadNow(*((_QWORD *)this + 76), 0);
  }
LABEL_70:
  v55 = *((_QWORD *)this + 79);
  if (v55)
  {
    v56 = atomic_load((unsigned int *)(v55 + 704));
    v57 = v56 != 2;
    if (!a3)
      goto LABEL_79;
  }
  else
  {
    v57 = 1;
    if (!a3)
      goto LABEL_79;
  }
  if (v57)
  {
    if (re::RenderManager::isProtoStereoRenderingEnabled(a2[87]))
      v58 = "engine:BuiltinRenderGraphResources/Common/realityRendererPostProcessStereo.rerendergraph";
    else
      v58 = "engine:BuiltinRenderGraphResources/Common/realityRendererPostProcess.rerendergraph";
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, v58);
    v59 = *((_OWORD *)this + 39);
    *((_OWORD *)this + 39) = v97;
    v97 = v59;
    v60 = *((_QWORD *)this + 80);
    *((_QWORD *)this + 80) = v98;
    v98 = v60;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
    re::AssetHandle::loadNow(*((_QWORD *)this + 79), 0);
  }
LABEL_79:
  if (!re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 696)))
  {
    v61 = (re *)(*((_QWORD *(**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, "engine:default.metallib");
    v62 = re::globalAllocators(v61);
    v63 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62[2] + 32))(v62[2], 64, 8);
    re::ProjectiveShadowProvider::ProjectiveShadowProvider(v63, (const re::DynamicString *)v88, (const re::AssetHandle *)&v97);
    if (*(_QWORD *)&v88[0])
    {
      if ((BYTE8(v88[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v88[0] + 40))();
      memset(v88, 0, sizeof(v88));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "ProjectiveShadow", v63, 0, 1, (uint64_t)&v85);
    v64 = v85;
    v65 = v86;
    v85 = 0;
    v86 = &str_110;
    v66 = *((_QWORD *)this + 87);
    *((_QWORD *)this + 87) = v64;
    v67 = v64 & 0xFFFFFFFFFFFFFFFELL | v66 & 1;
    v68 = *((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = v65;
    v99 = v67;
    v100 = v68;
    re::StringID::destroyString((re::StringID *)&v99);
    *((_QWORD *)this + 89) = v87;
    re::StringID::destroyString((re::StringID *)&v85);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
  }
  if (!re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 720)))
  {
    v69 = (re *)(*((_QWORD *(**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v97, a3, "engine:default.metallib");
    v70 = re::globalAllocators(v69);
    v71 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70[2] + 32))(v70[2], 64, 8);
    re::MeshShadowProvider::MeshShadowProvider(v71, (const re::DynamicString *)v84, (const re::AssetHandle *)&v97);
    if (*(_QWORD *)&v84[0])
    {
      if ((BYTE8(v84[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v84[0] + 40))();
      memset(v84, 0, sizeof(v84));
    }
    re::RenderGraphManager::addProviderInternal((re::RenderGraphManager *)a2, "ProjectiveMeshShadow", v71, 0, 1, (uint64_t)&v85);
    v72 = v85;
    v73 = v86;
    v85 = 0;
    v86 = &str_110;
    v74 = *((_QWORD *)this + 90);
    *((_QWORD *)this + 90) = v72;
    v75 = v72 & 0xFFFFFFFFFFFFFFFELL | v74 & 1;
    v76 = *((_QWORD *)this + 91);
    *((_QWORD *)this + 91) = v73;
    v99 = v75;
    v100 = v76;
    re::StringID::destroyString((re::StringID *)&v99);
    *((_QWORD *)this + 92) = v87;
    re::StringID::destroyString((re::StringID *)&v85);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v97);
  }
  result = re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 424));
  if ((result & 1) == 0)
  {
    v78 = re::globalAllocators((re *)result);
    v79 = v78[2];
    v104[0] = &off_24ED837A0;
    v105 = v79;
    v106 = v104;
    v80 = re::globalAllocators((re *)v78)[2];
    v101[0] = &off_24ED837F8;
    v102 = v80;
    v103 = v101;
    re::RenderGraphManager::addProvider((re *)a2, "Camera", (uint64_t)v104, (uint64_t)v101, -100, (uint64_t)&v97);
    v81 = v97;
    *(_QWORD *)&v97 = 0;
    *((_QWORD *)&v97 + 1) = &str_110;
    v82 = *((_QWORD *)this + 53);
    v83 = (void *)*((_QWORD *)this + 54);
    *(_OWORD *)((char *)this + 424) = v81;
    v85 = v81 & 0xFFFFFFFFFFFFFFFELL | v82 & 1;
    v86 = v83;
    re::StringID::destroyString((re::StringID *)&v85);
    *((_QWORD *)this + 55) = v98;
    re::StringID::destroyString((re::StringID *)&v97);
    if (v103)
    {
      (*(void (**)(_QWORD *))*v103)(v103);
      if (v103 != v101)
        (*(void (**)(uint64_t))(*(_QWORD *)v102 + 40))(v102);
      v103 = 0;
    }
    result = (uint64_t)v106;
    if (v106)
    {
      result = (*(uint64_t (**)(_QWORD *))*v106)(v106);
      if (v106 != v104)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 40))(v105);
    }
  }
  *((_QWORD *)this + 31) = a2;
  return result;
}

void re::RealityEmitterBase::unregisterCommonProviders(re::RealityEmitterBase *this, re::RenderGraphManager *a2)
{
  StringID *v4;
  _BYTE v5[16];
  uint64_t v6;
  _BYTE v7[16];
  uint64_t v8;
  _BYTE v9[16];
  uint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  _BYTE v15[16];
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  _BYTE v21[16];
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  _BYTE v25[16];
  uint64_t v26;
  _BYTE v27[16];
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;

  v4 = (StringID *)((char *)this + 256);
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 256)))
  {
    re::StringID::StringID((re::StringID *)v29, v4);
    v30 = *((_QWORD *)this + 34);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v29);
    re::StringID::destroyString((re::StringID *)v29);
    re::ProviderHandle::invalidate((re::ProviderHandle *)v4);
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 280)))
  {
    re::StringID::StringID((re::StringID *)v27, (const StringID *)((char *)this + 280));
    v28 = *((_QWORD *)this + 37);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v27);
    re::StringID::destroyString((re::StringID *)v27);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 280));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 304)))
  {
    re::StringID::StringID((re::StringID *)v25, (const StringID *)this + 19);
    v26 = *((_QWORD *)this + 40);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v25);
    re::StringID::destroyString((re::StringID *)v25);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 304));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 328)))
  {
    re::StringID::StringID((re::StringID *)v23, (const StringID *)((char *)this + 328));
    v24 = *((_QWORD *)this + 43);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v23);
    re::StringID::destroyString((re::StringID *)v23);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 328));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 352)))
  {
    re::StringID::StringID((re::StringID *)v21, (const StringID *)this + 22);
    v22 = *((_QWORD *)this + 46);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v21);
    re::StringID::destroyString((re::StringID *)v21);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 352));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 400)))
  {
    re::StringID::StringID((re::StringID *)v19, (const StringID *)this + 25);
    v20 = *((_QWORD *)this + 52);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v19);
    re::StringID::destroyString((re::StringID *)v19);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 400));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 448)))
  {
    re::StringID::StringID((re::StringID *)v17, (const StringID *)this + 28);
    v18 = *((_QWORD *)this + 58);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v17);
    re::StringID::destroyString((re::StringID *)v17);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 448));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 472)))
  {
    re::StringID::StringID((re::StringID *)v15, (const StringID *)((char *)this + 472));
    v16 = *((_QWORD *)this + 61);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v15);
    re::StringID::destroyString((re::StringID *)v15);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 472));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 552)))
  {
    re::StringID::StringID((re::StringID *)v13, (const StringID *)((char *)this + 552));
    v14 = *((_QWORD *)this + 71);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v13);
    re::StringID::destroyString((re::StringID *)v13);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 552));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 576)))
  {
    re::StringID::StringID((re::StringID *)v11, (const StringID *)this + 36);
    v12 = *((_QWORD *)this + 74);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v11);
    re::StringID::destroyString((re::StringID *)v11);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 576));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 696)))
  {
    re::StringID::StringID((re::StringID *)v9, (const StringID *)((char *)this + 696));
    v10 = *((_QWORD *)this + 89);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v9);
    re::StringID::destroyString((re::StringID *)v9);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 696));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 720)))
  {
    re::StringID::StringID((re::StringID *)v7, (const StringID *)this + 45);
    v8 = *((_QWORD *)this + 92);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v7);
    re::StringID::destroyString((re::StringID *)v7);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 720));
  }
  if (re::FontID::isValid((re::RealityEmitterBase *)((char *)this + 424)))
  {
    re::StringID::StringID((re::StringID *)v5, (const StringID *)((char *)this + 424));
    v6 = *((_QWORD *)this + 55);
    re::RenderGraphManager::removeProvider((uint64_t)a2, (uint64_t)v5);
    re::StringID::destroyString((re::StringID *)v5);
    re::ProviderHandle::invalidate((re::RealityEmitterBase *)((char *)this + 424));
  }
}

uint64_t re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(re::RealityEmitterBase *this, re::RenderFrame *a2, re::RenderGraphDataStore *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  re::RenderFrame *v10;
  uint64_t v11;

  if ((v4 & 1) == 0)
    goto LABEL_8;
  while (1)
  {
    v11 = 0xC1ECEDF69A9CD01;
    v5 = re::RenderFrameData::stream((re::RenderFrame *)((char *)a2 + 264), (const re::WeakStringID *)&v11);
    result = re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v5, &v11);
    if (!result)
      break;
    if (!result)
      break;
    if (*(_QWORD *)(result + 40))
    {
      v8 = re::BucketArray<re::PipelineCompilationData,4ul>::operator[](result, 0);
      return re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData&>((uint64_t)a3, re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(re::RenderFrame &,re::RenderGraphDataStore &)::kPipelineCompilationDataScopeHash, v8);
    }
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
    _os_crash();
    __break(1u);
LABEL_8:
    v10 = a2;
    a2 = v10;
    if (v9)
    {
      re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(re::RenderFrame &,re::RenderGraphDataStore &)::kPipelineCompilationDataScopeHash = re::hashString((re *)"PipelineCompilationData", (const char *)v10);
      a2 = v10;
    }
  }
  return result;
}

uint64_t re::RenderGraphDataStore::add<re::PipelineCompilationData,re::PipelineCompilationData&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v4 = (unint64_t)"N2re23PipelineCompilationDataE";
  if (((unint64_t)"N2re23PipelineCompilationDataE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re23PipelineCompilationDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v12 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = a1 + 64;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  *(_QWORD *)v9 = &off_24ED62290;
  *(_WORD *)(v9 + 8) = *(_WORD *)(a3 + 8);
  v11 = v9;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v12, &v11);
}

void re::RealityEmitterBase::handleRenderFrameData(uint64_t this, re::RenderFrame *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  re::Allocator *v6;
  unsigned __int8 v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  re::Allocator *v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned __int8 v53;
  uint64_t v54;
  re::DrawingManager *v55;
  unsigned __int8 v56;
  unint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unsigned __int8 v63;
  unint64_t v64;
  StringID *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD **v81;
  _QWORD *v82;
  uint64_t v83;
  re::TonemapUserParameters *v84;
  unsigned __int8 v85;
  uint64_t v86;
  re *v87;
  unsigned __int8 v88;
  unint64_t v89;
  unsigned __int8 *v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD **v117;
  char ***v118;
  char *v119;
  uint64_t v120;
  char v121;
  unsigned __int8 *v122;
  int v123;
  unint64_t v124;
  size_t v125;
  uint64_t v126;
  unsigned __int8 v127;
  unint64_t v128;
  unsigned __int8 *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  int v135;
  int v136;
  _BYTE *v138;
  BOOL v139;
  BOOL v140;
  unsigned __int8 v141;
  unint64_t v142;
  unint64_t v143;
  unsigned __int8 *v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  re *v149;
  unint64_t v150;
  _QWORD **v151;
  _QWORD *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  unsigned __int8 v163;
  _QWORD **v164;
  uint64_t v165;
  unint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  unsigned int v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 v184;
  uint64_t v185;
  unint64_t v186;
  unsigned __int8 *v187;
  uint64_t v188;
  unsigned int v189;
  unint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  re *v205;
  unsigned __int8 v206;
  unint64_t v207;
  unsigned __int8 *v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t *v213;
  _QWORD **v214;
  uint64_t v215;
  _QWORD **v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  __int128 v223;
  __int128 v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  BOOL isEmpty;
  _BYTE *v237;
  _QWORD **v238;
  uint64_t v239;
  uint64_t v240;
  BOOL v241;
  _QWORD *v242;
  unsigned __int8 v243;
  unint64_t v244;
  unsigned __int8 *v245;
  uint64_t v246;
  unsigned int v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  _QWORD **v258;
  _QWORD *v259;
  _QWORD *v260;
  _BOOL4 v261;
  _BOOL4 v262;
  unsigned __int8 v263;
  unint64_t v264;
  unsigned __int8 *v265;
  uint64_t v266;
  unsigned int v267;
  unint64_t v268;
  uint64_t *v269;
  _QWORD *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD **v284;
  _QWORD **v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  _DWORD *v290;
  int v291;
  int v292;
  uint64_t v293;
  _QWORD **v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  _QWORD **v303;
  _QWORD *v304;
  uint64_t v305;
  _QWORD *v306;
  const char *v307;
  const char *v308;
  const char *v309;
  const char *v310;
  const char *v311;
  const char *v312;
  const char *v313;
  re::RenderGraphManager *var1;
  uint64_t v315;
  __int128 v316;
  char *v317;
  unint64_t v318;
  uint64_t v319;
  re::RenderGraphManager *v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  re::RealityEmitterBase *v326;
  double v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  re::RealityEmitterBase *v334;
  uint64_t v335;
  re::Allocator **v336;
  uint64_t v337;
  uint64_t v338;
  re::Allocator **v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint8x8_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  const char *v350;
  const char *v351;
  const char *v352;
  unint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  _anonymous_namespace_ *v356;
  uint64_t v357;
  char ***v358;
  uint64_t v359;
  re *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  unint64_t *v367;
  _QWORD **v368;
  unint64_t *v369;
  uint64_t v370;
  _QWORD **v371;
  _BYTE v372[16];
  uint64_t v373;
  _BYTE v374[16];
  char *v375;
  uint64_t v376;
  char v377;
  char v378;
  uint64_t v379;
  unint64_t v380;
  _QWORD **v381;
  _BYTE v382[16];
  unint64_t v383;
  _OWORD v384[3];
  __int128 v385;
  __int128 v386;
  _BYTE v387[57];
  _BYTE v388[18];
  __int16 v389;
  unint64_t v390;
  __int16 v391;
  unint64_t v392;
  uint64_t v393;

  v393 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v382, 5083, *((_QWORD *)a2 + 1));
  re::RenderFrameContextBuilder::build((unint64_t)a2, this + 152, (unint64_t)&v376);
  v4 = atomic_load((unsigned __int8 *)&qword_25411FAA0);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  while (1)
  {
    if (__cxa_guard_acquire(&qword_25411FAA0))
    {
      qword_25411FA98 = re::hashString((re *)"RenderGraphDataPipeData", v350);
      __cxa_guard_release(&qword_25411FAA0);
    }
LABEL_2:
    v5 = atomic_load((unsigned __int8 *)&qword_25411FAB0);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25411FAB0))
    {
      qword_25411FAA8 = re::hashString((re *)"RenderFrame", v351);
      __cxa_guard_release(&qword_25411FAB0);
    }
    v6 = (re::Allocator *)*((_QWORD *)a2 + 47);
    v7 = atomic_load((unsigned __int8 *)&qword_25411FAC0);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25411FAC0))
    {
      qword_25411FAB8 = re::getCombinedScopeHash((re *)"RenderFrameContext", (const char *)qword_25411FAA8);
      __cxa_guard_release(&qword_25411FAC0);
    }
    v8 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x8000000000000000) != 0)
    {
      v9 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x7FFFFFFFFFFFFFFFLL);
      v10 = 5381;
      do
      {
        v8 = v10;
        v11 = *v9++;
        v10 = (33 * v10) ^ v11;
      }
      while (v11);
    }
    v12 = (qword_25411FAB8 + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583E9) ^ v8;
    v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 5) + 32))(*((_QWORD *)a2 + 5), 152, 8);
    *(_QWORD *)&v384[0] = v6;
    *(_OWORD *)&v387[24] = 0u;
    v387[40] = 32;
    v387[56] = 1;
    *(_QWORD *)&v387[48] = 0;
    *(_QWORD *)v13 = &off_24ED83940;
    *(_QWORD *)(v13 + 8) = v6;
    *(_QWORD *)(v13 + 16) = v6;
    *(_QWORD *)(v13 + 24) = 0;
    *(_OWORD *)((char *)v384 + 8) = 0u;
    *(_QWORD *)(v13 + 96) = v6;
    *(_OWORD *)&v387[8] = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)((char *)&v384[1] + 8) = 0u;
    *(_QWORD *)(v13 + 48) = 0;
    *((_QWORD *)&v384[2] + 1) = 0;
    *(_QWORD *)(v13 + 88) = 0;
    *(_QWORD *)v387 = 0;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    v385 = 0u;
    v386 = 0u;
    v14 = *(_OWORD *)&v387[16];
    v15 = *(_OWORD *)&v387[32];
    *(_OWORD *)(v13 + 129) = *(_OWORD *)&v387[41];
    *(_OWORD *)(v13 + 120) = v15;
    *(_OWORD *)(v13 + 104) = v14;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&v384[2]);
    re::FixedArray<re::RenderSceneContext>::deinit((_QWORD *)v384 + 1);
    v17 = *((_QWORD *)a2 + 12);
    v367 = (unint64_t *)((char *)a2 + 96);
    if (v17)
    {
      v17 = v12 % *((unsigned int *)a2 + 30);
      v18 = *(unsigned int *)(*((_QWORD *)a2 + 13) + 4 * v17);
      if ((_DWORD)v18 != 0x7FFFFFFF)
      {
        v25 = *((_QWORD *)a2 + 14);
        if (*(_QWORD *)(v25 + 24 * v18 + 8) == v12)
        {
LABEL_18:
          v24 = v25 + 24 * v18;
          goto LABEL_19;
        }
        while (1)
        {
          LODWORD(v18) = *(_DWORD *)(v25 + 24 * v18) & 0x7FFFFFFF;
          if ((_DWORD)v18 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v25 + 24 * v18 + 8) == v12)
            goto LABEL_18;
        }
      }
    }
    v19 = *((unsigned int *)a2 + 33);
    if ((_DWORD)v19 == 0x7FFFFFFF)
    {
      v19 = *((unsigned int *)a2 + 32);
      v20 = v19;
      if ((_DWORD)v19 == *((_DWORD *)a2 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v367, 2 * *((_DWORD *)a2 + 31));
        LODWORD(v17) = v12 % *((unsigned int *)a2 + 30);
        v20 = *((_DWORD *)a2 + 32);
      }
      *((_DWORD *)a2 + 32) = v20 + 1;
      v21 = *((_QWORD *)a2 + 14);
      v22 = *(_DWORD *)(v21 + 24 * v19);
    }
    else
    {
      v21 = *((_QWORD *)a2 + 14);
      v22 = *(_DWORD *)(v21 + 24 * v19);
      *((_DWORD *)a2 + 33) = v22 & 0x7FFFFFFF;
    }
    v23 = 24 * v19;
    *(_DWORD *)(v21 + v23) = v22 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)a2 + 14) + v23) = *(_DWORD *)(*((_QWORD *)a2 + 14) + 24 * v19) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 13) + 4 * v17);
    *(_QWORD *)(*((_QWORD *)a2 + 14) + 24 * v19 + 8) = v12;
    *(_QWORD *)(*((_QWORD *)a2 + 14) + 24 * v19 + 16) = v13;
    *(_DWORD *)(*((_QWORD *)a2 + 13) + 4 * v17) = v19;
    ++*((_DWORD *)a2 + 31);
    ++*((_DWORD *)a2 + 34);
    v24 = *((_QWORD *)a2 + 14) + 24 * v19;
LABEL_19:
    v26 = *(_QWORD *)(v24 + 16);
    v27 = (_QWORD *)v380;
    *((_QWORD *)&v384[0] + 1) = v380;
    *(_QWORD *)&v384[1] = 0;
    *(_QWORD *)&v384[0] = v6;
    if (v380)
    {
      if (v380 >= 0x8D3DCB08D3DCB1)
        goto LABEL_327;
      v28 = (*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 464 * v380, 8);
      *(_QWORD *)&v384[1] = v28;
      if (!v28)
      {
        re::internal::assertLog((re::internal *)4, v29, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        v28 = _os_crash();
        __break(1u);
        goto LABEL_23;
      }
      while (1)
      {
        v27 = (_QWORD *)((char *)v27 - 1);
        if (!v27)
          break;
LABEL_23:
        v28 = re::RenderSceneContext::RenderSceneContext(v28, v6) + 464;
      }
      re::RenderSceneContext::RenderSceneContext(v28, v6);
      v6 = *(re::Allocator **)&v384[0];
    }
    v30 = *(re::Allocator **)(v26 + 16);
    if (!v30 || v30 == v6)
      break;
LABEL_328:
    re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
    _os_crash();
    __break(1u);
  }
  v355 = this;
  v31 = (re::RenderFrame *)((char *)a2 + 32);
  *(_QWORD *)(v26 + 16) = v6;
  v32 = *(_QWORD *)(v26 + 24);
  v33 = *(_QWORD *)(v26 + 32);
  v34 = *((_QWORD *)&v384[0] + 1);
  v35 = *(_QWORD *)&v384[1];
  *(_QWORD *)&v384[0] = v30;
  *((_QWORD *)&v384[0] + 1) = v32;
  *(_QWORD *)(v26 + 24) = v34;
  *(_QWORD *)(v26 + 32) = v35;
  *(_QWORD *)&v384[1] = v33;
  re::FixedArray<re::RenderSceneContext>::deinit(v384);
  v36 = atomic_load((unsigned __int8 *)&qword_25411FAD0);
  if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_25411FAD0))
  {
    qword_25411FAC8 = (qword_25411FAA8
                     - 0x61C8864680B583E9
                     + (qword_25411FA98 << 6)
                     + ((unint64_t)qword_25411FA98 >> 2)) ^ qword_25411FA98;
    __cxa_guard_release(&qword_25411FAD0);
  }
  v37 = re::RenderGraphDataStore::add<re::RenderGraphDataPipeData>((uint64_t)a2 + 32, qword_25411FAC8);
  v38 = *((_QWORD *)a2 + 40);
  *(_QWORD *)(v37 + 8) = v38;
  *(_QWORD *)(v26 + 136) = v38;
  v365 = v26;
  v366 = (char *)a2 + 32;
  if (v380)
  {
    v39 = 0;
    v40 = 0;
    v41 = 448;
    while (1)
    {
      v42 = *(_QWORD *)(v26 + 24);
      if (v42 <= v40)
        break;
      v43 = (_QWORD **)((char *)v381 + v39);
      v44 = *(_QWORD *)(v26 + 32);
      *(_QWORD *)v388 = *(_QWORD **)((char *)v381 + v39 + 8);
      v45 = re::RenderFrameData::stream((re::RenderFrame *)((char *)a2 + 264), (const re::WeakStringID *)v388);
      this = **v43;
      v46 = qword_25411FA98;
      v47 = strlen((const char *)this);
      v48 = 0x9E3779B97F4A7C17;
      if (v47)
      {
        MurmurHash3_x64_128(this, v47, 0, (unint64_t *)v384);
        v48 = ((*((_QWORD *)&v384[0] + 1)
              - 0x61C8864680B583E9
              + (*(_QWORD *)&v384[0] << 6)
              + (*(_QWORD *)&v384[0] >> 2)) ^ *(_QWORD *)&v384[0])
            - 0x61C8864680B583E9;
      }
      v49 = ((v46 >> 2) + (v46 << 6) + v48) ^ v46;
      v31 = (re::RenderFrame *)((char *)a2 + 32);
      v50 = re::RenderGraphDataStore::add<re::RenderGraphDataPipeData>((uint64_t)v366, v49);
      v51 = *(_QWORD *)(v45 + 48);
      *(_QWORD *)(v50 + 8) = v51;
      *(_QWORD *)(v44 + v41) = v51;
      ++v40;
      v39 += 1488;
      v41 += 464;
      v26 = v365;
      if (v40 >= v380)
        goto LABEL_35;
    }
    v383 = 0;
    v385 = 0u;
    v386 = 0u;
    memset(v384, 0, sizeof(v384));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v388 = 136315906;
    *(_QWORD *)&v388[4] = "operator[]";
    *(_WORD *)&v388[12] = 1024;
    *(_DWORD *)&v388[14] = 468;
    v389 = 2048;
    v390 = v40;
    v391 = 2048;
    v392 = v42;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_323:
    v383 = 0;
    v385 = 0u;
    v386 = 0u;
    memset(v384, 0, sizeof(v384));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v388 = 136315906;
    *(_QWORD *)&v388[4] = "operator[]";
    *(_WORD *)&v388[12] = 1024;
    *(_DWORD *)&v388[14] = 468;
    v389 = 2048;
    v390 = v40;
    v391 = 2048;
    v392 = v39;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_324:
    v383 = 0;
    v385 = 0u;
    v386 = 0u;
    memset(v384, 0, sizeof(v384));
    v27 = (_QWORD *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v388 = 136315906;
    *(_QWORD *)&v388[4] = "operator[]";
    *(_WORD *)&v388[12] = 1024;
    *(_DWORD *)&v388[14] = 468;
    v389 = 2048;
    v390 = v40;
    v391 = 2048;
    v392 = v39;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_325:
    re::internal::assertLog((re::internal *)4, v286, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
    _os_crash();
    __break(1u);
LABEL_326:
    re::internal::assertLog((re::internal *)4, v286, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
    _os_crash();
    __break(1u);
LABEL_327:
    re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 464, v27);
    _os_crash();
    __break(1u);
    goto LABEL_328;
  }
LABEL_35:
  v52 = (_QWORD *)*((_QWORD *)a2 + 1);
  v53 = atomic_load((unsigned __int8 *)&qword_25411FAE0);
  if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_25411FAE0))
  {
    qword_25411FAD8 = re::hashString((re *)"RenderFrame", v352);
    __cxa_guard_release(&qword_25411FAE0);
  }
  v54 = *(_QWORD *)(v26 + 8);
  v55 = (re::DrawingManager *)v52[13];
  if (v55 && re::DrawingManager::shouldRenderProfilerNode(v55))
  {
    v56 = atomic_load((unsigned __int8 *)&qword_25411FAF0);
    if ((v56 & 1) == 0 && __cxa_guard_acquire(&qword_25411FAF0))
    {
      qword_25411FAE8 = re::getCombinedScopeHash((re *)"ProfilerOverlay", (const char *)qword_25411FAD8);
      __cxa_guard_release(&qword_25411FAF0);
    }
    v57 = (unint64_t)"N2re29ProfilerOverlayEnablementDataE";
    if (((unint64_t)"N2re29ProfilerOverlayEnablementDataE" & 0x8000000000000000) != 0)
    {
      v58 = (unsigned __int8 *)((unint64_t)"N2re29ProfilerOverlayEnablementDataE" & 0x7FFFFFFFFFFFFFFFLL);
      v59 = 5381;
      do
      {
        v57 = v59;
        v60 = *v58++;
        v59 = (33 * v59) ^ v60;
      }
      while (v60);
    }
    *(_QWORD *)&v384[0] = (qword_25411FAE8 - 0x61C8864680B583E9 + (v57 << 6) + (v57 >> 2)) ^ v57;
    v61 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 5) + 32))(*((_QWORD *)a2 + 5), 16, 8);
    *(_QWORD *)v61 = &off_24ED839C0;
    *(_BYTE *)(v61 + 8) = 1;
    *(_QWORD *)v388 = v61;
    re::HashBrown<unsigned long,re::RenderGraphBuilderData *,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<re::RenderGraphBuilderData *>,false>::addNew((re::RenderFrame *)((char *)a2 + 144), v384, (uint64_t *)v388);
  }
  if (v377)
    v62 = v378;
  else
    v62 = 1;
  *(_BYTE *)(v26 + 144) = v62;
  v63 = atomic_load((unsigned __int8 *)&qword_25411FB00);
  if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_25411FB00))
  {
    qword_25411FAF8 = re::getCombinedScopeHash((re *)"SceneArray", (const char *)qword_25411FAD8);
    __cxa_guard_release(&qword_25411FB00);
  }
  v64 = (unint64_t)"N2re14SceneArrayDataE";
  v65 = (StringID *)v355;
  if (((unint64_t)"N2re14SceneArrayDataE" & 0x8000000000000000) != 0)
  {
    v66 = (unsigned __int8 *)((unint64_t)"N2re14SceneArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v67 = 5381;
    do
    {
      v64 = v67;
      v68 = *v66++;
      v67 = (33 * v67) ^ v68;
    }
    while (v68);
  }
  v69 = (qword_25411FAF8 - 0x61C8864680B583E9 + (v64 << 6) + (v64 >> 2)) ^ v64;
  v70 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 5) + 32))(*((_QWORD *)a2 + 5), 48, 8);
  *(_QWORD *)v70 = &off_24ED83A08;
  *(_QWORD *)(v70 + 40) = 0;
  *(_QWORD *)(v70 + 16) = 0;
  *(_QWORD *)(v70 + 24) = 0;
  *(_DWORD *)(v70 + 32) = 0;
  *(_QWORD *)(v70 + 8) = v54;
  re::DynamicArray<float *>::setCapacity((_QWORD *)(v70 + 8), 0);
  ++*(_DWORD *)(v70 + 32);
  v71 = *((_QWORD *)a2 + 12);
  if (!v71)
    goto LABEL_52;
  v71 = v69 % *((unsigned int *)a2 + 30);
  v72 = *(unsigned int *)(*((_QWORD *)a2 + 13) + 4 * v71);
  if ((_DWORD)v72 == 0x7FFFFFFF)
    goto LABEL_52;
  v79 = *((_QWORD *)a2 + 14);
  if (*(_QWORD *)(v79 + 24 * v72 + 8) == v69)
  {
LABEL_61:
    v78 = v79 + 24 * v72;
  }
  else
  {
    while (1)
    {
      LODWORD(v72) = *(_DWORD *)(v79 + 24 * v72) & 0x7FFFFFFF;
      if ((_DWORD)v72 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v79 + 24 * v72 + 8) == v69)
        goto LABEL_61;
    }
LABEL_52:
    v73 = *((unsigned int *)a2 + 33);
    if ((_DWORD)v73 == 0x7FFFFFFF)
    {
      v73 = *((unsigned int *)a2 + 32);
      v74 = v73;
      if ((_DWORD)v73 == *((_DWORD *)a2 + 30))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v367, 2 * *((_DWORD *)a2 + 31));
        LODWORD(v71) = v69 % *((unsigned int *)a2 + 30);
        v74 = *((_DWORD *)a2 + 32);
      }
      *((_DWORD *)a2 + 32) = v74 + 1;
      v75 = *((_QWORD *)a2 + 14);
      v76 = *(_DWORD *)(v75 + 24 * v73);
    }
    else
    {
      v75 = *((_QWORD *)a2 + 14);
      v76 = *(_DWORD *)(v75 + 24 * v73);
      *((_DWORD *)a2 + 33) = v76 & 0x7FFFFFFF;
    }
    v77 = 24 * v73;
    *(_DWORD *)(v75 + v77) = v76 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)a2 + 14) + v77) = *(_DWORD *)(*((_QWORD *)a2 + 14) + 24 * v73) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 13) + 4 * v71);
    *(_QWORD *)(*((_QWORD *)a2 + 14) + 24 * v73 + 8) = v69;
    *(_QWORD *)(*((_QWORD *)a2 + 14) + 24 * v73 + 16) = v70;
    *(_DWORD *)(*((_QWORD *)a2 + 13) + 4 * v71) = v73;
    ++*((_DWORD *)a2 + 31);
    ++*((_DWORD *)a2 + 34);
    v78 = *((_QWORD *)a2 + 14) + 24 * v73;
  }
  v80 = (_QWORD *)(v78 + 16);
  if (v380)
  {
    v81 = v381;
    v82 = (_QWORD *)(*v80 + 8);
    v83 = 1488 * v380;
    do
    {
      re::DynamicArray<re::TransitionCondition *>::add(v82, *v81);
      v81 += 186;
      v83 -= 1488;
    }
    while (v83);
  }
  v84 = (re::TonemapUserParameters *)(v52[19] + 88);
  v85 = atomic_load((unsigned __int8 *)&qword_25411FB10);
  if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_25411FB10))
  {
    qword_25411FB08 = re::getCombinedScopeHash((re *)"ToneMapping", (const char *)qword_25411FAD8);
    __cxa_guard_release(&qword_25411FB10);
  }
  v86 = re::RenderGraphDataStore::add<re::TonemapParametersData>((uint64_t)v31, qword_25411FB08);
  re::TonemapUserParameters::computeRenderParameters(v84, (uint64_t)v384);
  *(_OWORD *)(v86 + 88) = *(_OWORD *)v387;
  *(_OWORD *)(v86 + 104) = *(_OWORD *)&v387[16];
  *(_OWORD *)(v86 + 120) = *(_OWORD *)&v387[32];
  *(_DWORD *)(v86 + 136) = *(_DWORD *)&v387[48];
  *(_OWORD *)(v86 + 24) = v384[1];
  *(_OWORD *)(v86 + 40) = v384[2];
  *(_OWORD *)(v86 + 56) = v385;
  *(_OWORD *)(v86 + 72) = v386;
  *(_OWORD *)(v86 + 8) = v384[0];
  re::ColorManager::updateTonemapLUTs(v52[19], (float *)(v86 + 8));
  v88 = atomic_load((unsigned __int8 *)&qword_25411FB20);
  if ((v88 & 1) == 0)
  {
    v87 = (re *)__cxa_guard_acquire(&qword_25411FB20);
    if ((_DWORD)v87)
    {
      qword_25411FB18 = re::getCombinedScopeHash((re *)"CameraTMData", (const char *)qword_25411FAD8);
      __cxa_guard_release(&qword_25411FB20);
    }
  }
  v354 = (_QWORD *)(v26 + 8);
  v89 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE" & 0x8000000000000000) != 0)
  {
    v90 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_12CameraTMDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v91 = 5381;
    do
    {
      v89 = v91;
      v92 = *v90++;
      v91 = (33 * v91) ^ v92;
    }
    while (v92);
  }
  v93 = (qword_25411FB18 - 0x61C8864680B583E9 + (v89 << 6) + (v89 >> 2)) ^ v89;
  v94 = re::globalAllocators(v87);
  v95 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v94[2] + 32))(v94[2], 1048, 8);
  bzero(v95 + 2, 0x408uLL);
  v96 = *((_QWORD *)a2 + 6);
  v369 = (unint64_t *)((char *)a2 + 48);
  *v95 = &off_24ED83A48;
  __asm { FMOV            V0.2S, #1.0 }
  v95[1] = _D0;
  if (v96
    && (v96 = v93 % *((unsigned int *)a2 + 18),
        v101 = *(unsigned int *)(*((_QWORD *)a2 + 7) + 4 * v96),
        (_DWORD)v101 != 0x7FFFFFFF))
  {
    v108 = *((_QWORD *)a2 + 8);
    while (*(_QWORD *)(v108 + 24 * v101 + 8) != v93)
    {
      LODWORD(v101) = *(_DWORD *)(v108 + 24 * v101) & 0x7FFFFFFF;
      if ((_DWORD)v101 == 0x7FFFFFFF)
        goto LABEL_72;
    }
    v107 = v108 + 24 * v101;
  }
  else
  {
LABEL_72:
    v102 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v102 == 0x7FFFFFFF)
    {
      v102 = *((unsigned int *)a2 + 20);
      v103 = v102;
      if ((_DWORD)v102 == *((_DWORD *)a2 + 18))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v369, 2 * *((_DWORD *)a2 + 19));
        LODWORD(v96) = v93 % *((unsigned int *)a2 + 18);
        v103 = *((_DWORD *)a2 + 20);
      }
      *((_DWORD *)a2 + 20) = v103 + 1;
      v104 = *((_QWORD *)a2 + 8);
      v105 = *(_DWORD *)(v104 + 24 * v102);
    }
    else
    {
      v104 = *((_QWORD *)a2 + 8);
      v105 = *(_DWORD *)(v104 + 24 * v102);
      *((_DWORD *)a2 + 21) = v105 & 0x7FFFFFFF;
    }
    v106 = 24 * v102;
    *(_DWORD *)(v104 + v106) = v105 | 0x80000000;
    *(_DWORD *)(*((_QWORD *)a2 + 8) + v106) = *(_DWORD *)(*((_QWORD *)a2 + 8) + 24 * v102) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v96);
    *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v102 + 8) = v93;
    *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v102 + 16) = v95;
    *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v96) = v102;
    ++*((_DWORD *)a2 + 19);
    ++*((_DWORD *)a2 + 22);
    v107 = *((_QWORD *)a2 + 8) + 24 * v102;
  }
  v109 = *(_QWORD *)(v107 + 16);
  v110 = v52[36];
  v111 = (_QWORD *)(v26 + 8);
  if (*(_QWORD *)(v110 + 608))
    *(_BYTE *)(v109 + 16) = 1;
  v112 = (unint64_t *)v52[14];
  if (v112)
  {
    *(float *)(v109 + 8) = (float)v112[232] * 0.0039062;
    v113 = *(_QWORD *)(v110 + 704);
    if (v113)
      (*(void (**)(uint64_t))(*(_QWORD *)v113 + 16))(v113);
    v114 = v52[19];
    v115 = v112[243];
    *(_QWORD *)&v384[0] = v112[244];
    *((_QWORD *)&v384[0] + 1) = v115;
    re::ColorManager::updateISPTonemapLUTAccelerated(v114);
  }
  *(_QWORD *)(v26 + 104) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 136) + 24))(*(_QWORD *)(v26 + 136));
  *(_QWORD *)(v26 + 112) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v26 + 136) + 184))(*(_QWORD *)(v26 + 136));
  *(_QWORD *)(v26 + 120) = v376;
  v353 = v380;
  if (v380)
  {
    v40 = 0;
    v356 = (_anonymous_namespace_ *)(v26 + 40);
    this = 464;
    do
    {
      v39 = *(_QWORD *)(v26 + 24);
      if (v39 <= v40)
        goto LABEL_323;
      v370 = *(_QWORD *)(v26 + 32);
      v116 = v370 + 464 * v40;
      *(_DWORD *)(v116 + 440) = v40;
      v39 = v380;
      if (v380 <= v40)
        goto LABEL_324;
      v117 = v381;
      v118 = (char ***)&v381[186 * v40];
      v119 = **v118;
      if (v119)
      {
        v120 = *v119;
        if (*v119)
        {
          v121 = v119[1];
          if (v121)
          {
            v122 = (unsigned __int8 *)(v119 + 2);
            do
            {
              v120 = 31 * v120 + v121;
              v123 = *v122++;
              v121 = v123;
            }
            while (v123);
          }
          v124 = v120 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v124 = 0;
        }
      }
      else
      {
        v124 = 0x7FFFFFFFFFFFFFFFLL;
      }
      v383 = v124;
      LODWORD(v384[0]) = v40;
      if (re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v356, v124) == -1)
      {
        re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(v356, &v383, v384);
        v119 = **v118;
      }
      v125 = strlen(v119);
      v364 = v119;
      if (v125)
      {
        MurmurHash3_x64_128((uint64_t)v119, v125, 0, (unint64_t *)v384);
        v126 = (*((_QWORD *)&v384[0] + 1)
              - 0x61C8864680B583E9
              + (*(_QWORD *)&v384[0] << 6)
              + (*(_QWORD *)&v384[0] >> 2)) ^ *(_QWORD *)&v384[0];
      }
      else
      {
        v126 = 0;
      }
      v127 = atomic_load((unsigned __int8 *)&qword_25411FB30);
      if ((v127 & 1) == 0 && __cxa_guard_acquire(&qword_25411FB30))
      {
        qword_25411FB28 = re::hashString((re *)"SceneIndex", v307);
        __cxa_guard_release(&qword_25411FB30);
      }
      v128 = (unint64_t)"N2re14SceneIndexDataE";
      if (((unint64_t)"N2re14SceneIndexDataE" & 0x8000000000000000) != 0)
      {
        v129 = (unsigned __int8 *)((unint64_t)"N2re14SceneIndexDataE" & 0x7FFFFFFFFFFFFFFFLL);
        v130 = 5381;
        do
        {
          v128 = v130;
          v131 = *v129++;
          v130 = (33 * v130) ^ v131;
        }
        while (v131);
      }
      v132 = v126 - 0x61C8864680B583E9;
      *(_QWORD *)&v384[0] = (((v126
                             - 0x61C8864680B583E9
                             + (qword_25411FB28 << 6)
                             + ((unint64_t)qword_25411FB28 >> 2)) ^ qword_25411FB28)
                           - 0x61C8864680B583E9
                           + (v128 << 6)
                           + (v128 >> 2)) ^ v128;
      v133 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 5) + 32))(*((_QWORD *)a2 + 5), 16, 8);
      v133[1] = 0xFFFFFFFFLL;
      *v133 = &off_24ED77700;
      *(_QWORD *)v388 = v133;
      *(_DWORD *)(*(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>((uint64_t)v367, (unint64_t *)v384, v388)+ 8) = *(_DWORD *)(v116 + 440);
      v134 = v370 + 464 * v40;
      v135 = *(unsigned __int8 *)(v134 + 444);
      v136 = LOBYTE(v117[186 * v40 + 184]);
      if (*(_BYTE *)(v134 + 444))
        _ZF = 0;
      else
        _ZF = v136 == 0;
      if (!_ZF)
      {
        v138 = (_BYTE *)(v134 + 444);
        if (v135)
          v139 = v136 == 0;
        else
          v139 = 0;
        if (v139)
        {
          *v138 = 0;
        }
        else
        {
          if (v135)
            v140 = 1;
          else
            v140 = v136 == 0;
          if (!v140)
            *v138 = 1;
          *(_BYTE *)(v370 + 464 * v40 + 445) = BYTE1(v117[186 * v40 + 184]);
        }
      }
      v141 = atomic_load((unsigned __int8 *)&qword_25411FB40);
      if ((v141 & 1) == 0 && __cxa_guard_acquire(&qword_25411FB40))
      {
        qword_25411FB38 = re::hashString((re *)"MeshScenes", v308);
        __cxa_guard_release(&qword_25411FB40);
      }
      v142 = qword_25411FB38;
      v143 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE";
      if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE" & 0x8000000000000000) != 0)
      {
        v144 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_15MeshSceneArraysEEE" & 0x7FFFFFFFFFFFFFFFLL);
        v145 = 5381;
        do
        {
          v143 = v145;
          v146 = *v144++;
          v145 = (33 * v145) ^ v146;
        }
        while (v146);
      }
      v371 = v117;
      v147 = (uint64_t)&v117[186 * v40 + 5];
      v148 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 5) + 32))(*((_QWORD *)a2 + 5), 64, 8);
      *(_QWORD *)v148 = &off_24ED83A88;
      *(_QWORD *)(v148 + 16) = 0;
      *(_QWORD *)(v148 + 8) = 0;
      *(_QWORD *)(v148 + 40) = 0;
      *(_QWORD *)(v148 + 48) = 0;
      *(_QWORD *)(v148 + 32) = 0;
      *(_DWORD *)(v148 + 56) = 0;
      *((_QWORD *)&v384[1] + 1) = 0;
      *(_QWORD *)&v384[2] = 0;
      v384[0] = 0uLL;
      *(_DWORD *)(v148 + 24) = 3;
      LODWORD(v384[1]) = 3;
      re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v148 + 8, v147);
      re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v147, (uint64_t)v384);
      v149 = *(re **)&v384[0];
      if (*(_QWORD *)&v384[0] && (v384[1] & 1) == 0)
        v149 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v384[0] + 40))();
      v150 = (((v132 + (v142 << 6) + (v142 >> 2)) ^ v142) - 0x61C8864680B583E9 + (v143 << 6) + (v143 >> 2)) ^ v143;
      v151 = &v371[186 * v40];
      v152 = *(_QWORD **)(v148 + 48);
      *(_QWORD *)(v148 + 48) = v151[10];
      v151[10] = v152;
      ++*(_DWORD *)(v148 + 56);
      ++*((_DWORD *)v151 + 22);
      v153 = *v367;
      if (*v367)
      {
        v153 = v150 % *((unsigned int *)a2 + 30);
        v154 = *(unsigned int *)(*((_QWORD *)a2 + 13) + 4 * v153);
        if ((_DWORD)v154 != 0x7FFFFFFF)
        {
          v155 = *((_QWORD *)a2 + 14);
          v156 = v370;
          if (*(_QWORD *)(v155 + 24 * v154 + 8) == v150)
          {
LABEL_137:
            v157 = (uint64_t *)(v155 + 24 * v154 + 16);
            goto LABEL_144;
          }
          while (1)
          {
            LODWORD(v154) = *(_DWORD *)(v155 + 24 * v154) & 0x7FFFFFFF;
            if ((_DWORD)v154 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v155 + 24 * v154 + 8) == v150)
              goto LABEL_137;
          }
        }
      }
      v158 = *((unsigned int *)a2 + 33);
      if ((_DWORD)v158 == 0x7FFFFFFF)
      {
        v158 = *((unsigned int *)a2 + 32);
        v159 = v158;
        if ((_DWORD)v158 == *((_DWORD *)a2 + 30))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v367, 2 * *((_DWORD *)a2 + 31));
          v153 = v150 % *((unsigned int *)a2 + 30);
          v159 = *((_DWORD *)a2 + 32);
        }
        *((_DWORD *)a2 + 32) = v159 + 1;
        v160 = *((_QWORD *)a2 + 14);
        v161 = *(_DWORD *)(v160 + 24 * v158);
      }
      else
      {
        v160 = *((_QWORD *)a2 + 14);
        v161 = *(_DWORD *)(v160 + 24 * v158);
        *((_DWORD *)a2 + 33) = v161 & 0x7FFFFFFF;
      }
      v162 = 24 * v158;
      *(_DWORD *)(v160 + v162) = v161 | 0x80000000;
      *(_DWORD *)(*((_QWORD *)a2 + 14) + v162) = *(_DWORD *)(*((_QWORD *)a2 + 14) + 24 * v158) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 13) + 4 * v153);
      *(_QWORD *)(*((_QWORD *)a2 + 14) + 24 * v158 + 8) = v150;
      *(_QWORD *)(*((_QWORD *)a2 + 14) + 24 * v158 + 16) = v148;
      *(_DWORD *)(*((_QWORD *)a2 + 13) + 4 * v153) = v158;
      ++*((_DWORD *)a2 + 31);
      ++*((_DWORD *)a2 + 34);
      v157 = (uint64_t *)(*((_QWORD *)a2 + 14) + 24 * v158 + 16);
      v156 = v370;
LABEL_144:
      v363 = *v157;
      v163 = atomic_load((unsigned __int8 *)&qword_25411FB50);
      v164 = v371;
      if ((v163 & 1) == 0)
      {
        v149 = (re *)__cxa_guard_acquire(&qword_25411FB50);
        if ((_DWORD)v149)
        {
          qword_25411FB48 = re::hashString((re *)"MeshDeformations", v309);
          __cxa_guard_release(&qword_25411FB50);
        }
      }
      v165 = (uint64_t)v371[186 * v40 + 12];
      if (v165)
      {
        v166 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_25MeshDeformationCollectionELm4EEEEE";
        if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_25MeshDeformationCollectionELm4EEEEE" & 0x8000000000000000) != 0)
        {
          v167 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_25MeshDefor"
                                                       "mationCollectionELm4EEEEE" & 0x7FFFFFFFFFFFFFFFLL);
          v168 = 5381;
          do
          {
            v166 = v168;
            v169 = *v167++;
            v168 = (33 * v168) ^ v169;
          }
          while (v169);
        }
        v170 = qword_25411FB48;
        v171 = re::globalAllocators(v149);
        v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v171[2] + 32))(v171[2], 64, 8);
        *(_QWORD *)v172 = &off_24ED83AC8;
        *(_QWORD *)(v172 + 16) = 0;
        *(_QWORD *)(v172 + 8) = 0;
        *(_QWORD *)(v172 + 40) = 0;
        *(_QWORD *)(v172 + 48) = 0;
        *(_QWORD *)(v172 + 32) = 0;
        *(_DWORD *)(v172 + 56) = 0;
        *((_QWORD *)&v384[1] + 1) = 0;
        *(_QWORD *)&v384[2] = 0;
        v384[0] = 0uLL;
        *(_DWORD *)(v172 + 24) = 3;
        LODWORD(v384[1]) = 3;
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v172 + 8, v165);
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v165, (uint64_t)v384);
        v149 = *(re **)&v384[0];
        if (*(_QWORD *)&v384[0] && (v384[1] & 1) == 0)
          v149 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v384[0] + 40))();
        v173 = (((v132 + (v170 << 6) + (v170 >> 2)) ^ v170) - 0x61C8864680B583E9 + (v166 << 6) + (v166 >> 2)) ^ v166;
        v174 = *(_QWORD *)(v172 + 48);
        *(_QWORD *)(v172 + 48) = *(_QWORD *)(v165 + 40);
        *(_QWORD *)(v165 + 40) = v174;
        ++*(_DWORD *)(v172 + 56);
        ++*(_DWORD *)(v165 + 48);
        v175 = *v369;
        if (!*v369
          || (v175 = v173 % *((unsigned int *)a2 + 18),
              v176 = *(unsigned int *)(*((_QWORD *)a2 + 7) + 4 * v175),
              (_DWORD)v176 == 0x7FFFFFFF))
        {
LABEL_159:
          v178 = *((unsigned int *)a2 + 21);
          if ((_DWORD)v178 == 0x7FFFFFFF)
          {
            v178 = *((unsigned int *)a2 + 20);
            v179 = v178;
            if ((_DWORD)v178 == *((_DWORD *)a2 + 18))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v369, 2 * *((_DWORD *)a2 + 19));
              v175 = v173 % *((unsigned int *)a2 + 18);
              v179 = *((_DWORD *)a2 + 20);
            }
            *((_DWORD *)a2 + 20) = v179 + 1;
            v180 = *((_QWORD *)a2 + 8);
            v181 = *(_DWORD *)(v180 + 24 * v178);
          }
          else
          {
            v180 = *((_QWORD *)a2 + 8);
            v181 = *(_DWORD *)(v180 + 24 * v178);
            *((_DWORD *)a2 + 21) = v181 & 0x7FFFFFFF;
          }
          v182 = 24 * v178;
          *(_DWORD *)(v180 + v182) = v181 | 0x80000000;
          *(_DWORD *)(*((_QWORD *)a2 + 8) + v182) = *(_DWORD *)(*((_QWORD *)a2 + 8) + 24 * v178) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v175);
          *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v178 + 8) = v173;
          *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v178 + 16) = v172;
          *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v175) = v178;
          ++*((_DWORD *)a2 + 19);
          ++*((_DWORD *)a2 + 22);
          v183 = *((_QWORD *)a2 + 8) + 24 * v178;
        }
        else
        {
          v177 = *((_QWORD *)a2 + 8);
          while (*(_QWORD *)(v177 + 24 * v176 + 8) != v173)
          {
            LODWORD(v176) = *(_DWORD *)(v177 + 24 * v176) & 0x7FFFFFFF;
            if ((_DWORD)v176 == 0x7FFFFFFF)
              goto LABEL_159;
          }
          v183 = v177 + 24 * v176;
        }
        v362 = *(_QWORD *)(v183 + 16) + 8;
        v156 = v370;
        v164 = v371;
      }
      else
      {
        v362 = 0;
      }
      v184 = atomic_load((unsigned __int8 *)&qword_25411FB60);
      if ((v184 & 1) == 0)
      {
        v149 = (re *)__cxa_guard_acquire(&qword_25411FB60);
        if ((_DWORD)v149)
        {
          qword_25411FB58 = re::hashString((re *)"VFXScenes", v310);
          __cxa_guard_release(&qword_25411FB60);
        }
      }
      v185 = (uint64_t)v164[186 * v40 + 13];
      v358 = v118;
      if (v185)
      {
        v186 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayINS_8VFXSceneEEELm4EEEEE";
        if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicArrayINS_8VFXSceneEEELm4EEEEE" & 0x8000000000000000) != 0)
        {
          v187 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_11BucketArrayINS_12DynamicAr"
                                                       "rayINS_8VFXSceneEEELm4EEEEE" & 0x7FFFFFFFFFFFFFFFLL);
          v188 = 5381;
          do
          {
            v186 = v188;
            v189 = *v187++;
            v188 = (33 * v188) ^ v189;
          }
          while (v189);
        }
        v190 = qword_25411FB58;
        v191 = re::globalAllocators(v149);
        v192 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v191[2] + 32))(v191[2], 64, 8);
        *(_QWORD *)v192 = &off_24ED83B08;
        *(_QWORD *)(v192 + 16) = 0;
        *(_QWORD *)(v192 + 8) = 0;
        *(_QWORD *)(v192 + 40) = 0;
        *(_QWORD *)(v192 + 48) = 0;
        *(_QWORD *)(v192 + 32) = 0;
        *(_DWORD *)(v192 + 56) = 0;
        *((_QWORD *)&v384[1] + 1) = 0;
        *(_QWORD *)&v384[2] = 0;
        v384[0] = 0uLL;
        *(_DWORD *)(v192 + 24) = 3;
        LODWORD(v384[1]) = 3;
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v192 + 8, v185);
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(v185, (uint64_t)v384);
        if (*(_QWORD *)&v384[0] && (v384[1] & 1) == 0)
          (*(void (**)(void))(**(_QWORD **)&v384[0] + 40))();
        v193 = (((v132 + (v190 << 6) + (v190 >> 2)) ^ v190) - 0x61C8864680B583E9 + (v186 << 6) + (v186 >> 2)) ^ v186;
        v194 = *(_QWORD *)(v192 + 48);
        *(_QWORD *)(v192 + 48) = *(_QWORD *)(v185 + 40);
        *(_QWORD *)(v185 + 40) = v194;
        ++*(_DWORD *)(v192 + 56);
        ++*(_DWORD *)(v185 + 48);
        v195 = *v369;
        if (!*v369
          || (v195 = v193 % *((unsigned int *)a2 + 18),
              v196 = *(unsigned int *)(*((_QWORD *)a2 + 7) + 4 * v195),
              (_DWORD)v196 == 0x7FFFFFFF))
        {
LABEL_182:
          v198 = *((unsigned int *)a2 + 21);
          if ((_DWORD)v198 == 0x7FFFFFFF)
          {
            v198 = *((unsigned int *)a2 + 20);
            v199 = v198;
            if ((_DWORD)v198 == *((_DWORD *)a2 + 18))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v369, 2 * *((_DWORD *)a2 + 19));
              v195 = v193 % *((unsigned int *)a2 + 18);
              v199 = *((_DWORD *)a2 + 20);
            }
            *((_DWORD *)a2 + 20) = v199 + 1;
            v200 = *((_QWORD *)a2 + 8);
            v201 = *(_DWORD *)(v200 + 24 * v198);
          }
          else
          {
            v200 = *((_QWORD *)a2 + 8);
            v201 = *(_DWORD *)(v200 + 24 * v198);
            *((_DWORD *)a2 + 21) = v201 & 0x7FFFFFFF;
          }
          v202 = 24 * v198;
          *(_DWORD *)(v200 + v202) = v201 | 0x80000000;
          *(_DWORD *)(*((_QWORD *)a2 + 8) + v202) = *(_DWORD *)(*((_QWORD *)a2 + 8) + 24 * v198) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v195);
          *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v198 + 8) = v193;
          *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v198 + 16) = v192;
          *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v195) = v198;
          ++*((_DWORD *)a2 + 19);
          ++*((_DWORD *)a2 + 22);
          v203 = *((_QWORD *)a2 + 8) + 24 * v198;
        }
        else
        {
          v197 = *((_QWORD *)a2 + 8);
          while (*(_QWORD *)(v197 + 24 * v196 + 8) != v193)
          {
            LODWORD(v196) = *(_DWORD *)(v197 + 24 * v196) & 0x7FFFFFFF;
            if ((_DWORD)v196 == 0x7FFFFFFF)
              goto LABEL_182;
          }
          v203 = v197 + 24 * v196;
        }
        v361 = *(_QWORD *)(v203 + 16) + 8;
        v156 = v370;
        v164 = v371;
      }
      else
      {
        v361 = 0;
      }
      v204 = v156 + 464 * v40;
      v205 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v204 + 448) + 952))(*(_QWORD *)(v204 + 448));
      v360 = v205;
      v206 = atomic_load((unsigned __int8 *)&qword_25411FB70);
      if ((v206 & 1) == 0)
      {
        v205 = (re *)__cxa_guard_acquire(&qword_25411FB70);
        if ((_DWORD)v205)
        {
          qword_25411FB68 = re::hashString((re *)"LightContext", v311);
          __cxa_guard_release(&qword_25411FB70);
        }
      }
      v207 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE";
      if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE" & 0x8000000000000000) != 0)
      {
        v208 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_13LightContextsEEE" & 0x7FFFFFFFFFFFFFFFLL);
        v209 = 5381;
        do
        {
          v207 = v209;
          v210 = *v208++;
          v209 = (33 * v209) ^ v210;
        }
        while (v210);
      }
      v211 = (uint64_t)&v164[186 * v40 + 26];
      v212 = (((v132 + (qword_25411FB68 << 6) + ((unint64_t)qword_25411FB68 >> 2)) ^ qword_25411FB68)
            - 0x61C8864680B583E9
            + (v207 << 6)
            + (v207 >> 2)) ^ v207;
      v213 = re::globalAllocators(v205);
      v214 = v164;
      v215 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v213[2] + 32))(v213[2], 304, 8);
      *(_QWORD *)v215 = &off_24ED83B48;
      *(_QWORD *)(v215 + 8) = 0;
      *(_QWORD *)(v215 + 16) = 0;
      *(_DWORD *)(v215 + 24) = 1;
      *(_QWORD *)(v215 + 40) = 0;
      *(_QWORD *)(v215 + 48) = 0;
      *(_QWORD *)(v215 + 32) = 0;
      *(_DWORD *)(v215 + 56) = 0;
      re::BucketArray<RESubscriptionHandle,8ul>::swap(v215 + 8, v211);
      v216 = &v214[186 * v40];
      *(_DWORD *)(v215 + 96) = 0;
      *(_OWORD *)(v215 + 80) = 0u;
      *(_OWORD *)(v215 + 64) = 0u;
      *(_QWORD *)(v215 + 100) = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v215 + 64), (uint64_t *)v216 + 33);
      *(_QWORD *)(v215 + 112) = 0;
      *(_QWORD *)(v215 + 120) = 0;
      *(_QWORD *)(v215 + 128) = 0;
      *(_QWORD *)(v215 + 112) = v216[39];
      v216[39] = 0;
      *(_QWORD *)(v215 + 120) = v216[40];
      v216[40] = 0;
      v217 = *(_QWORD **)(v215 + 128);
      *(_QWORD *)(v215 + 128) = v216[41];
      v216[41] = v217;
      *(_QWORD *)(v215 + 136) = 0;
      *(_QWORD *)(v215 + 144) = 0;
      *(_QWORD *)(v215 + 152) = 0;
      *(_QWORD *)(v215 + 136) = v216[42];
      v216[42] = 0;
      *(_QWORD *)(v215 + 144) = v216[43];
      v216[43] = 0;
      v218 = *(_QWORD **)(v215 + 152);
      *(_QWORD *)(v215 + 152) = v216[44];
      v216[44] = v218;
      *(_QWORD *)(v215 + 160) = 0;
      *(_QWORD *)(v215 + 168) = 0;
      *(_QWORD *)(v215 + 176) = 0;
      *(_QWORD *)(v215 + 160) = v216[45];
      v216[45] = 0;
      *(_QWORD *)(v215 + 168) = v216[46];
      v216[46] = 0;
      v219 = *(_QWORD **)(v215 + 176);
      *(_QWORD *)(v215 + 176) = v216[47];
      v216[47] = v219;
      *(_QWORD *)(v215 + 184) = 0;
      *(_QWORD *)(v215 + 192) = 0;
      *(_QWORD *)(v215 + 200) = 0;
      *(_QWORD *)(v215 + 184) = v216[48];
      v216[48] = 0;
      *(_QWORD *)(v215 + 192) = v216[49];
      v216[49] = 0;
      v220 = *(_QWORD **)(v215 + 200);
      *(_QWORD *)(v215 + 200) = v216[50];
      v216[50] = v220;
      *(_QWORD *)(v215 + 208) = 0;
      *(_QWORD *)(v215 + 216) = 0;
      *(_QWORD *)(v215 + 224) = 0;
      *(_QWORD *)(v215 + 208) = v216[51];
      v216[51] = 0;
      *(_QWORD *)(v215 + 216) = v216[52];
      v216[52] = 0;
      v221 = *(_QWORD **)(v215 + 224);
      *(_QWORD *)(v215 + 224) = v216[53];
      v216[53] = v221;
      *(_QWORD *)(v215 + 232) = 0;
      *(_QWORD *)(v215 + 240) = 0;
      *(_QWORD *)(v215 + 248) = 0;
      *(_QWORD *)(v215 + 232) = v216[54];
      v216[54] = 0;
      *(_QWORD *)(v215 + 240) = v216[55];
      v216[55] = 0;
      v222 = *(_QWORD **)(v215 + 248);
      *(_QWORD *)(v215 + 248) = v216[56];
      v216[56] = v222;
      v223 = *(_OWORD *)(v216 + 57);
      *(_BYTE *)(v215 + 272) = *((_BYTE *)v216 + 472);
      *(_OWORD *)(v215 + 256) = v223;
      v224 = *((_OWORD *)v216 + 30);
      *(_BYTE *)(v215 + 296) = *((_BYTE *)v216 + 496);
      *(_OWORD *)(v215 + 280) = v224;
      v225 = *v369;
      if (*v369)
      {
        v225 = v212 % *((unsigned int *)a2 + 18);
        v226 = *(unsigned int *)(*((_QWORD *)a2 + 7) + 4 * v225);
        if ((_DWORD)v226 != 0x7FFFFFFF)
        {
          v233 = *((_QWORD *)a2 + 8);
          if (*(_QWORD *)(v233 + 24 * v226 + 8) == v212)
          {
LABEL_205:
            v232 = v233 + 24 * v226;
            goto LABEL_206;
          }
          while (1)
          {
            LODWORD(v226) = *(_DWORD *)(v233 + 24 * v226) & 0x7FFFFFFF;
            if ((_DWORD)v226 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v233 + 24 * v226 + 8) == v212)
              goto LABEL_205;
          }
        }
      }
      v227 = *((unsigned int *)a2 + 21);
      if ((_DWORD)v227 == 0x7FFFFFFF)
      {
        v227 = *((unsigned int *)a2 + 20);
        v228 = v227;
        if ((_DWORD)v227 == *((_DWORD *)a2 + 18))
        {
          re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v369, 2 * *((_DWORD *)a2 + 19));
          v225 = v212 % *((unsigned int *)a2 + 18);
          v228 = *((_DWORD *)a2 + 20);
        }
        *((_DWORD *)a2 + 20) = v228 + 1;
        v229 = *((_QWORD *)a2 + 8);
        v230 = *(_DWORD *)(v229 + 24 * v227);
      }
      else
      {
        v229 = *((_QWORD *)a2 + 8);
        v230 = *(_DWORD *)(v229 + 24 * v227);
        *((_DWORD *)a2 + 21) = v230 & 0x7FFFFFFF;
      }
      v231 = 24 * v227;
      *(_DWORD *)(v229 + v231) = v230 | 0x80000000;
      *(_DWORD *)(*((_QWORD *)a2 + 8) + v231) = *(_DWORD *)(*((_QWORD *)a2 + 8) + 24 * v227) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v225);
      *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v227 + 8) = v212;
      *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v227 + 16) = v215;
      *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v225) = v227;
      ++*((_DWORD *)a2 + 19);
      ++*((_DWORD *)a2 + 22);
      v232 = *((_QWORD *)a2 + 8) + 24 * v227;
LABEL_206:
      v234 = (_QWORD *)(v204 + 448);
      v235 = *(_QWORD *)(v232 + 16);
      v359 = v235 + 8;
      isEmpty = re::LightContexts::isEmpty((re::LightContexts *)(v235 + 8));
      v237 = (_BYTE *)(v370 + 464 * v40);
      v237[456] = !isEmpty;
      v237[457] = *(_BYTE *)(v235 + 296);
      v238 = &v371[186 * v40];
      v237[458] = *((_BYTE *)v238 + 1456);
      v368 = v238;
      v237[460] = *((_BYTE *)v238 + 616);
      v239 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v234 + 480))(*v234);
      v240 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v234 + 1112))(*v234);
      v357 = v239;
      if (v240)
        v241 = *(_QWORD *)(v240 + 16) != 0;
      else
        v241 = 0;
      *(_BYTE *)(v370 + 464 * v40 + 459) = v241;
      v242 = v371[186 * v40 + 183];
      if (v242)
      {
        v243 = atomic_load((unsigned __int8 *)&qword_25411FB80);
        if ((v243 & 1) == 0 && __cxa_guard_acquire(&qword_25411FB80))
        {
          qword_25411FB78 = re::hashString((re *)"IBLContextOverride", v312);
          __cxa_guard_release(&qword_25411FB80);
        }
        v244 = (unint64_t)"N2re23IBLContextOverrideScopeE";
        if (((unint64_t)"N2re23IBLContextOverrideScopeE" & 0x8000000000000000) != 0)
        {
          v245 = (unsigned __int8 *)((unint64_t)"N2re23IBLContextOverrideScopeE" & 0x7FFFFFFFFFFFFFFFLL);
          v246 = 5381;
          do
          {
            v244 = v246;
            v247 = *v245++;
            v246 = (33 * v246) ^ v247;
          }
          while (v247);
        }
        v248 = (((v132 + (qword_25411FB78 << 6) + ((unint64_t)qword_25411FB78 >> 2)) ^ qword_25411FB78)
              - 0x61C8864680B583E9
              + (v244 << 6)
              + (v244 >> 2)) ^ v244;
        v240 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a2 + 5) + 32))(*((_QWORD *)a2 + 5), 16, 8);
        v249 = v240;
        *(_QWORD *)v240 = &off_24ED83850;
        *(_QWORD *)(v240 + 8) = v242;
        v250 = *((_QWORD *)a2 + 12);
        if (!v250
          || (v250 = v248 % *((unsigned int *)a2 + 30),
              v251 = *(unsigned int *)(*((_QWORD *)a2 + 13) + 4 * v250),
              (_DWORD)v251 == 0x7FFFFFFF))
        {
LABEL_219:
          v253 = *((unsigned int *)a2 + 33);
          if ((_DWORD)v253 == 0x7FFFFFFF)
          {
            v253 = *((unsigned int *)a2 + 32);
            v254 = v253;
            if ((_DWORD)v253 == *((_DWORD *)a2 + 30))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v367, 2 * *((_DWORD *)a2 + 31));
              v250 = v248 % *((unsigned int *)a2 + 30);
              v254 = *((_DWORD *)a2 + 32);
            }
            *((_DWORD *)a2 + 32) = v254 + 1;
            v255 = *((_QWORD *)a2 + 14);
            v256 = *(_DWORD *)(v255 + 24 * v253);
          }
          else
          {
            v255 = *((_QWORD *)a2 + 14);
            v256 = *(_DWORD *)(v255 + 24 * v253);
            *((_DWORD *)a2 + 33) = v256 & 0x7FFFFFFF;
          }
          v257 = 24 * v253;
          *(_DWORD *)(v255 + v257) = v256 | 0x80000000;
          *(_DWORD *)(*((_QWORD *)a2 + 14) + v257) = *(_DWORD *)(*((_QWORD *)a2 + 14) + 24 * v253) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 13) + 4 * v250);
          *(_QWORD *)(*((_QWORD *)a2 + 14) + 24 * v253 + 8) = v248;
          *(_QWORD *)(*((_QWORD *)a2 + 14) + 24 * v253 + 16) = v249;
          *(_DWORD *)(*((_QWORD *)a2 + 13) + 4 * v250) = v253;
          ++*((_DWORD *)a2 + 31);
          ++*((_DWORD *)a2 + 34);
        }
        else
        {
          v252 = *((_QWORD *)a2 + 14);
          while (*(_QWORD *)(v252 + 24 * v251 + 8) != v248)
          {
            LODWORD(v251) = *(_DWORD *)(v252 + 24 * v251) & 0x7FFFFFFF;
            if ((_DWORD)v251 == 0x7FFFFFFF)
              goto LABEL_219;
          }
        }
      }
      v258 = &v371[186 * v40];
      v259 = v258[88];
      v260 = v258[87];
      if (v259)
      {
        v261 = v259[5] != 0;
        if (!v260)
          goto LABEL_229;
      }
      else
      {
        v261 = 0;
        if (!v260)
        {
LABEL_229:
          v262 = 0;
          goto LABEL_230;
        }
      }
      v262 = v260[5] != 0;
LABEL_230:
      if (v261 || v262)
      {
        v263 = atomic_load((unsigned __int8 *)&qword_25411FB90);
        if ((v263 & 1) == 0)
        {
          v240 = __cxa_guard_acquire(&qword_25411FB90);
          if ((_DWORD)v240)
          {
            qword_25411FB88 = re::hashString((re *)"TextInfo", v313);
            __cxa_guard_release(&qword_25411FB90);
          }
        }
        v264 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE";
        if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE" & 0x8000000000000000) != 0)
        {
          v265 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_8TextInfoEEE" & 0x7FFFFFFFFFFFFFFFLL);
          v266 = 5381;
          do
          {
            v264 = v266;
            v267 = *v265++;
            v266 = (33 * v266) ^ v267;
          }
          while (v267);
        }
        v268 = (((v132 + (qword_25411FB88 << 6) + ((unint64_t)qword_25411FB88 >> 2)) ^ qword_25411FB88)
              - 0x61C8864680B583E9
              + (v264 << 6)
              + (v264 >> 2)) ^ v264;
        v269 = re::globalAllocators((re *)v240);
        v270 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v269[2] + 32))(v269[2], 24, 8);
        v270[1] = 0;
        v270[2] = 0;
        *v270 = &off_24ED83B88;
        v271 = *v369;
        if (!*v369
          || (v271 = v268 % *((unsigned int *)a2 + 18),
              v272 = *(unsigned int *)(*((_QWORD *)a2 + 7) + 4 * v271),
              (_DWORD)v272 == 0x7FFFFFFF))
        {
LABEL_242:
          v275 = *((unsigned int *)a2 + 21);
          if ((_DWORD)v275 == 0x7FFFFFFF)
          {
            v275 = *((unsigned int *)a2 + 20);
            v276 = v275;
            if ((_DWORD)v275 == *((_DWORD *)a2 + 18))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v369, 2 * *((_DWORD *)a2 + 19));
              v271 = v268 % *((unsigned int *)a2 + 18);
              v276 = *((_DWORD *)a2 + 20);
            }
            *((_DWORD *)a2 + 20) = v276 + 1;
            v277 = *((_QWORD *)a2 + 8);
            v278 = *(_DWORD *)(v277 + 24 * v275);
          }
          else
          {
            v277 = *((_QWORD *)a2 + 8);
            v278 = *(_DWORD *)(v277 + 24 * v275);
            *((_DWORD *)a2 + 21) = v278 & 0x7FFFFFFF;
          }
          v279 = 24 * v275;
          *(_DWORD *)(v277 + v279) = v278 | 0x80000000;
          *(_DWORD *)(*((_QWORD *)a2 + 8) + v279) = *(_DWORD *)(*((_QWORD *)a2 + 8) + 24 * v275) & 0x80000000 | *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v271);
          *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v275 + 8) = v268;
          *(_QWORD *)(*((_QWORD *)a2 + 8) + 24 * v275 + 16) = v270;
          *(_DWORD *)(*((_QWORD *)a2 + 7) + 4 * v271) = v275;
          ++*((_DWORD *)a2 + 19);
          ++*((_DWORD *)a2 + 22);
          v280 = *((_QWORD *)a2 + 8) + 24 * v275;
        }
        else
        {
          v273 = *((_QWORD *)a2 + 8);
          while (*(_QWORD *)(v273 + 24 * v272 + 8) != v268)
          {
            LODWORD(v272) = *(_DWORD *)(v273 + 24 * v272) & 0x7FFFFFFF;
            if ((_DWORD)v272 == 0x7FFFFFFF)
              goto LABEL_242;
          }
          v280 = v273 + 24 * v272;
        }
        v281 = *(_QWORD *)(v280 + 16);
        if (v261)
          *(_QWORD *)(v281 + 16) = v259;
        v274 = (_QWORD *)(v281 + 8);
        if (v262)
          *v274 = v260;
      }
      else
      {
        v274 = 0;
      }
      v27 = v368 + 63;
      v282 = (_QWORD *)(v370 + 464 * v40);
      v282[7] = v364;
      v282[1] = v359;
      v282[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v234 + 408))(*v234);
      v282[3] = v360;
      v283 = v282 + 2;
      v283[2] = v363 + 8;
      this = 464;
      v283[3] = v362;
      v283[4] = v361;
      v283[7] = v274;
      v283[9] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v234 + 800))(*v234);
      v284 = v371;
      v285 = &v371[186 * v40];
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v283 + 10), (uint64_t)(v285 + 16));
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)(v283 + 15), (uint64_t)(v285 + 21));
      v283[20] = v285[2];
      *(_OWORD *)(v283 + 21) = *((_OWORD *)v285 + 7);
      v287 = v283 + 23;
      v31 = (re::RenderFrame *)((char *)a2 + 32);
      if (v283 + 23 != v368 + 63)
      {
        v288 = *v287;
        if (*v287 && *v27 && v288 != *v27)
          goto LABEL_325;
        v384[0] = 0uLL;
        LODWORD(v384[1]) = 1;
        v289 = v370 + 464 * v40;
        *((_QWORD *)&v384[1] + 1) = 0;
        *(_QWORD *)&v384[2] = 0;
        v292 = *(_DWORD *)(v289 + 216);
        v290 = (_DWORD *)(v289 + 216);
        v291 = v292;
        if ((v292 & 1) != 0)
        {
          if (*(_QWORD *)(v370 + 464 * v40 + 208))
          {
            re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move((uint64_t)v384, (uint64_t)(v283 + 23));
          }
          else
          {
            *(_QWORD *)&v384[0] = v288;
            *v290 = v291 + 2;
            LODWORD(v384[1]) = 3;
          }
        }
        else
        {
          LODWORD(v384[1]) = 3;
          re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)v384, v283 + 23);
        }
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=((uint64_t)(v283 + 23), (uint64_t)v27);
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=((uint64_t)v27, (uint64_t)v384);
        if (*(_QWORD *)&v384[0] && (v384[1] & 1) == 0)
          (*(void (**)(void))(**(_QWORD **)&v384[0] + 40))();
        v293 = v370 + 464 * v40;
        v284 = v371;
        v294 = &v371[186 * v40];
        v295 = *(_QWORD **)(v293 + 240);
        *(_QWORD *)(v293 + 240) = v294[68];
        v294[68] = v295;
        ++*(_DWORD *)(v293 + 248);
        ++*((_DWORD *)v294 + 138);
      }
      v296 = v370 + 464 * v40;
      v297 = &v284[186 * v40];
      if ((_QWORD **)(v296 + 200) != v297 + 63)
      {
        v298 = (uint64_t *)(v296 + 256);
        v27 = v297 + 70;
        v299 = *(_QWORD *)(v296 + 256);
        if (v299 && *v27 && v299 != *v27)
          goto LABEL_326;
        v384[0] = 0uLL;
        LODWORD(v384[1]) = 1;
        v300 = v370 + 464 * v40;
        *((_QWORD *)&v384[1] + 1) = 0;
        *(_QWORD *)&v384[2] = 0;
        v301 = *(_DWORD *)(v300 + 272);
        if ((v301 & 1) != 0)
        {
          if (*(_QWORD *)(v370 + 464 * v40 + 264))
          {
            re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move((uint64_t)v384, (uint64_t)v298);
          }
          else
          {
            *(_QWORD *)&v384[0] = v299;
            *(_DWORD *)(v300 + 272) = v301 + 2;
            LODWORD(v384[1]) = 3;
          }
        }
        else
        {
          LODWORD(v384[1]) = 3;
          re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)v384, v298);
        }
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=((uint64_t)v298, (uint64_t)v27);
        re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=((uint64_t)v27, (uint64_t)v384);
        if (*(_QWORD *)&v384[0] && (v384[1] & 1) == 0)
          (*(void (**)(void))(**(_QWORD **)&v384[0] + 40))();
        v302 = v370 + 464 * v40;
        v284 = v371;
        v303 = &v371[186 * v40];
        v304 = *(_QWORD **)(v302 + 296);
        *(_QWORD *)(v302 + 296) = v303[75];
        v303[75] = v304;
        ++*(_DWORD *)(v302 + 304);
        ++*((_DWORD *)v303 + 152);
      }
      v305 = v370 + 464 * v40;
      *(_BYTE *)(v305 + 312) = *((_BYTE *)v368 + 616);
      *(_QWORD *)(v305 + 320) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v234 + 840))(*v234);
      v306 = &v284[186 * v40];
      *(_QWORD *)(v305 + 328) = v306[3];
      *(_QWORD *)(v305 + 336) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v234 + 1016))(*v234);
      *(_QWORD *)(v305 + 344) = v306[4];
      re::FixedArray<float>::operator=((uint64_t *)(v305 + 352), v306 + 78);
      re::HashTable<unsigned long long,re::PlanarReceiverEntry,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v305 + 376, v306 + 81);
      *(_QWORD *)(v305 + 424) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v234 + 1048))(*v234);
      *(_QWORD *)(v305 + 432) = v357;
      if (*v283)
        re::IBLContext::updateRenderSceneContextFlags((re::IBLContext *)*v283, (BOOL *)(v370 + 464 * v40 + 461), (BOOL *)(v370 + 464 * v40 + 462));
      v111 = v354;
      v65 = (StringID *)v355;
      (*(void (**)(uint64_t, char ***, _QWORD *, unint64_t, char *))(*(_QWORD *)v355 + 64))(v355, v358, v354, v370 + 464 * v40++, v366);
      v26 = v365;
    }
    while (v40 != v353);
  }
  if (*(_BYTE *)(v26 + 144))
  {
    (*(void (**)(StringID *, _QWORD *, re::RenderFrame *, re *))(*(_QWORD *)&v65->var0 + 72))(v65, v111, a2, v31);
  }
  else
  {
    var1 = (re::RenderGraphManager *)v65[15].var1;
    v315 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v65[37].var1);
    re::RenderGraphManager::addProviderInternal(var1, "Camera", (const re::RenderGraphProviderBase *)(v315 + 8), 0, 0, (uint64_t)v384);
    v316 = v384[0];
    *(_QWORD *)&v384[0] = 0;
    *((_QWORD *)&v384[0] + 1) = &str_110;
    v317 = v65[40].var1;
    v65[40].var1 = (char *)v316;
    v318 = v316 & 0xFFFFFFFFFFFFFFFELL | v317 & 1;
    v319 = *(_QWORD *)&v65[41].var0;
    *(_QWORD *)&v65[41].var0 = *((_QWORD *)&v316 + 1);
    *(_QWORD *)v388 = v318;
    *(_QWORD *)&v388[8] = v319;
    re::StringID::destroyString((re::StringID *)v388);
    v65[41].var1 = *(char **)&v384[1];
    re::StringID::destroyString((re::StringID *)v384);
    v320 = (re::RenderGraphManager *)v65[15].var1;
    v321 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)&v65[39]);
    re::RenderGraphManager::addProviderInternal(v320, "PostProcess", (const re::RenderGraphProviderBase *)(v321 + 8), 0, 0, (uint64_t)v384);
    v322 = v384[0];
    *(_QWORD *)&v384[0] = 0;
    *((_QWORD *)&v384[0] + 1) = &str_110;
    v323 = *(_QWORD *)&v65[42].var0;
    *(_QWORD *)&v65[42].var0 = v322;
    v324 = v322 & 0xFFFFFFFFFFFFFFFELL | v323 & 1;
    v325 = v65[42].var1;
    v65[42].var1 = (char *)*((_QWORD *)&v322 + 1);
    *(_QWORD *)v388 = v324;
    *(_QWORD *)&v388[8] = v325;
    re::StringID::destroyString((re::StringID *)v388);
    *(_QWORD *)&v65[43].var0 = *(_QWORD *)&v384[1];
    re::StringID::destroyString((re::StringID *)v384);
    re::RenderFrame::emitGraph(a2, "UploadMultiSceneConstants", "RenderFrame");
    v328 = *(_QWORD *)(v26 + 24);
    if (v328)
    {
      v329 = *(_QWORD **)(v26 + 32);
      v330 = 464 * v328;
      do
      {
        re::RealityEmitterBase::emitDeformerGraph((uint64_t)v326, (uint64_t)v329, a2, (uint64_t)v31);
        re::RealityEmitterBase::emitVFXSimulationGraph(v331, v329, a2, (uint64_t)v31);
        v329 += 58;
        v330 -= 464;
      }
      while (v330);
    }
    v332 = *(_QWORD *)(v26 + 104);
    if (v332 && *(_QWORD *)(v332 + 16))
      re::RenderFrame::emitGraph(a2, "MipmapGenerationContext", "RenderFrame");
    v333 = *(_QWORD *)(v26 + 112);
    if (v333 && *(_QWORD *)(v333 + 16))
      re::RenderFrame::emitGraph(a2, "BlurGenerationContext", "RenderFrame");
    re::RealityEmitterBase::emitProbeWriteGraph(v326, a2, v327);
    re::RenderFrame::emitGraph(a2, "ProjectiveMeshShadow", "RenderFrame");
    LODWORD(v384[0]) = 0;
    v335 = *(_QWORD *)(v26 + 24);
    if (v335)
    {
      v336 = *(re::Allocator ***)(v26 + 32);
      v337 = 464 * v335;
      do
      {
        re::RealityEmitterBase::emitSingleGraphShadows((uint64_t)v334, v336, (uint64_t)a2, (uint64_t)v31, v384);
        v336 += 58;
        v337 -= 464;
      }
      while (v337);
      v338 = *(_QWORD *)(v26 + 24);
      if (v338)
      {
        v339 = *(re::Allocator ***)(v26 + 32);
        v340 = 464 * v338;
        do
        {
          re::RealityEmitterBase::emitFilterMapGraph((uint64_t)v334, v339, (uint64_t)a2, (uint64_t)v31);
          v339 += 58;
          v340 -= 464;
        }
        while (v340);
        v341 = *(_QWORD *)(v26 + 24);
        if (v341)
        {
          v342 = *(_QWORD *)(v26 + 32);
          v343 = 464 * v341;
          do
          {
            re::RealityEmitterBase::emitVisualProxyHighFidelityGraph((uint64_t)v334, v342, a2, v31);
            v342 += 464;
            v343 -= 464;
          }
          while (v343);
          v345 = *(_QWORD *)(v26 + 24);
          if (v345)
          {
            v346 = *(_QWORD *)(v26 + 32);
            v347 = 464 * v345;
            do
            {
              re::RealityEmitterBase::emitCameraGraphs(v65, v111, v346, (uint64_t)a2, (uint64_t)v31, 1, v344);
              v346 += 464;
              v347 -= 464;
            }
            while (v347);
          }
        }
      }
    }
    re::RealityEmitterBase::pushPipelineCompilationDataToDataStore(v334, a2, v31);
    v348 = (uint64_t)v65[15].var1;
    re::StringID::StringID((re::StringID *)v374, (StringID *)((char *)v65 + 648));
    v375 = v65[41].var1;
    re::RenderGraphManager::removeProvider(v348, (uint64_t)v374);
    re::StringID::destroyString((re::StringID *)v374);
    re::ProviderHandle::invalidate((re::ProviderHandle *)&v65[40].var1);
    v349 = (uint64_t)v65[15].var1;
    re::StringID::StringID((re::StringID *)v372, v65 + 42);
    v373 = *(_QWORD *)&v65[43].var0;
    re::RenderGraphManager::removeProvider(v349, (uint64_t)v372);
    re::StringID::destroyString((re::StringID *)v372);
    re::ProviderHandle::invalidate((re::ProviderHandle *)&v65[42]);
  }
  re::FixedArray<re::RenderFrameContextBuilder::Result::PerSceneData>::deinit(&v379);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v382);
}

unint64_t re::getCombinedScopeHash(re *this, const char *a2)
{
  size_t v4;
  unint64_t v5;
  unint64_t v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v4 = strlen((const char *)this);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)this, v4, 0, v7);
    v5 = (v7[1] - 0x61C8864680B583E9 + (v7[0] << 6) + (v7[0] >> 2)) ^ v7[0];
  }
  else
  {
    v5 = 0;
  }
  return (unint64_t)&a2[64 * v5 - 0x61C8864680B583E9 + (v5 >> 2)] ^ v5;
}

uint64_t re::RenderGraphDataStore::add<re::RenderGraphDataPipeData>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (unint64_t)"N2re23RenderGraphDataPipeDataE";
  if (((unint64_t)"N2re23RenderGraphDataPipeDataE" & 0x8000000000000000) != 0)
  {
    v4 = (unsigned __int8 *)((unint64_t)"N2re23RenderGraphDataPipeDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v5 = 5381;
    do
    {
      v3 = v5;
      v6 = *v4++;
      v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  v7 = (a2 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  v8 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), 16, 8);
  v9 = *(_QWORD *)(a1 + 64);
  *v8 = &off_24ED83980;
  v8[1] = 0;
  if (v9)
  {
    v9 = v7 % *(unsigned int *)(a1 + 88);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v17 = *(_QWORD *)(a1 + 80);
      if (*(_QWORD *)(v17 + 24 * v10 + 8) == v7)
      {
LABEL_15:
        v16 = v17 + 24 * v10;
        return *(_QWORD *)(v16 + 16);
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v17 + 24 * v10) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v17 + 24 * v10 + 8) == v7)
          goto LABEL_15;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 96);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1 + 64, 2 * *(_DWORD *)(a1 + 92));
      LODWORD(v9) = v7 % *(unsigned int *)(a1 + 88);
      v12 = *(_DWORD *)(a1 + 96);
    }
    *(_DWORD *)(a1 + 96) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(_DWORD *)(v13 + 24 * v11);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 80);
    v14 = *(_DWORD *)(v13 + 24 * v11);
    *(_DWORD *)(a1 + 100) = v14 & 0x7FFFFFFF;
  }
  v15 = 24 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 80) + v15) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 24 * v11) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v11 + 8) = v7;
  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 24 * v11 + 16) = v8;
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 92);
  ++*(_DWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 80) + 24 * v11;
  return *(_QWORD *)(v16 + 16);
}

void re::RealityEmitterBase::emitDeformerGraph(uint64_t a1, uint64_t a2, re::RenderFrame *a3, uint64_t a4)
{
  re *v6;
  uint64_t ActiveDeformationData;
  uint64_t v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t k;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t m;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unint64_t n;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unsigned __int8 v62;
  unint64_t v63;
  re *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v6 = *(re **)(*((_QWORD *)a3 + 1) + 40);
  ActiveDeformationData = re::DeformationManager::createActiveDeformationData(v6, *((_QWORD *)a3 + 46), *((_QWORD *)a3 + 47));
  v99 = a2;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(v8 + 40);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v11 = re::BucketArray<re::IBLContext,4ul>::operator[](v8, i);
      re::DeformationManager::addDeformations((re::RenderManager **)v6, v11, ActiveDeformationData);
    }
  }
  v12 = *(_QWORD *)(v99 + 184);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 40);
    if (v13)
    {
      for (j = 0; j != v13; ++j)
      {
        v15 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v12, j);
        v16 = *(_QWORD *)(v15 + 16);
        if (v16)
        {
          v17 = 672 * v16;
          v18 = (__int128 *)(*(_QWORD *)(v15 + 32) + 64);
          do
          {
            v19 = *(v18 - 1);
            v100 = *(v18 - 2);
            v101 = v19;
            v20 = *v18;
            v21 = v18[1];
            v22 = v18[3];
            v104 = v18[2];
            v105 = v22;
            v102 = v20;
            v103 = v21;
            re::DynamicArray<re::DeformationView>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v100);
            v18 += 42;
            v17 -= 672;
          }
          while (v17);
        }
      }
    }
  }
  v23 = *(_QWORD *)(v99 + 192);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 40);
    if (v24)
    {
      for (k = 0; k != v24; ++k)
      {
        v26 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v23, k);
        v27 = *(_QWORD *)(v26 + 16);
        if (v27)
        {
          v28 = *(_OWORD **)(v26 + 32);
          v29 = 1360 * v27;
          do
          {
            v30 = v28[3];
            v100 = v28[2];
            v101 = v30;
            v31 = v28[4];
            v32 = v28[5];
            v33 = v28[7];
            v104 = v28[6];
            v105 = v33;
            v102 = v31;
            v103 = v32;
            re::DynamicArray<re::DeformationView>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v100);
            v34 = v28[45];
            v100 = v28[44];
            v101 = v34;
            v35 = v28[46];
            v36 = v28[47];
            v37 = v28[49];
            v104 = v28[48];
            v105 = v37;
            v102 = v35;
            v103 = v36;
            re::DynamicArray<re::DeformationView>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v100);
            v28 += 85;
            v29 -= 1360;
          }
          while (v29);
        }
      }
    }
  }
  v38 = *(_QWORD *)(v99 + 240);
  if (v38)
  {
    for (m = 0; m != v38; ++m)
    {
      v40 = re::BucketArray<unsigned long,4ul>::operator[](v99 + 200, m);
      v41 = *(_QWORD *)(*(_QWORD *)v40 + 16);
      if (v41)
      {
        v42 = 672 * v41;
        v43 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v40 + 32) + 64);
        do
        {
          v44 = *(v43 - 1);
          v100 = *(v43 - 2);
          v101 = v44;
          v45 = *v43;
          v46 = v43[1];
          v47 = v43[3];
          v104 = v43[2];
          v105 = v47;
          v102 = v45;
          v103 = v46;
          re::DynamicArray<re::DeformationView>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v100);
          v43 += 42;
          v42 -= 672;
        }
        while (v42);
      }
    }
  }
  v48 = *(_QWORD *)(v99 + 296);
  if (v48)
  {
    for (n = 0; n != v48; ++n)
    {
      v50 = re::BucketArray<unsigned long,4ul>::operator[](v99 + 256, n);
      v51 = *(_QWORD *)(*(_QWORD *)v50 + 16);
      if (v51)
      {
        v52 = *(_OWORD **)(*(_QWORD *)v50 + 32);
        v53 = 1360 * v51;
        do
        {
          v54 = v52[3];
          v100 = v52[2];
          v101 = v54;
          v55 = v52[4];
          v56 = v52[5];
          v57 = v52[7];
          v104 = v52[6];
          v105 = v57;
          v102 = v55;
          v103 = v56;
          re::DynamicArray<re::DeformationView>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v100);
          v58 = v52[45];
          v100 = v52[44];
          v101 = v58;
          v59 = v52[46];
          v60 = v52[47];
          v61 = v52[49];
          v104 = v52[48];
          v105 = v61;
          v102 = v59;
          v103 = v60;
          re::DynamicArray<re::DeformationView>::add((_anonymous_namespace_ *)(ActiveDeformationData + 64), (uint64_t)&v100);
          v52 += 85;
          v53 -= 1360;
        }
        while (v53);
      }
    }
  }
  v62 = atomic_load((unsigned __int8 *)&qword_25411FBA0);
  if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_25411FBA0))
  {
    qword_25411FB98 = re::hashString((re *)"Deformer", v97);
    __cxa_guard_release(&qword_25411FBA0);
  }
  v63 = qword_25411FB98;
  v64 = (re *)strlen(*(const char **)(v99 + 56));
  if (v64)
  {
    v64 = (re *)MurmurHash3_x64_128(*(_QWORD *)(v99 + 56), (int)v64, 0, (unint64_t *)&v100);
    v65 = ((*((_QWORD *)&v100 + 1) - 0x61C8864680B583E9 + ((_QWORD)v100 << 6) + ((unint64_t)v100 >> 2)) ^ v100)
        - 0x61C8864680B583E9;
  }
  else
  {
    v65 = 0x9E3779B97F4A7C17;
  }
  v66 = ((v63 >> 2) + (v63 << 6) + v65) ^ v63;
  if (*(_BYTE *)(v99 + 444))
  {
    v67 = (unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE";
    if (((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x8000000000000000) != 0)
    {
      v68 = (unsigned __int8 *)((unint64_t)"N2re36SimplifiedMeshBufferDeformationIndexE" & 0x7FFFFFFFFFFFFFFFLL);
      v69 = 5381;
      do
      {
        v67 = v69;
        v70 = *v68++;
        v69 = (33 * v69) ^ v70;
      }
      while (v70);
    }
    v71 = (v66 - 0x61C8864680B583E9 + (v67 << 6) + (v67 >> 2)) ^ v67;
    v72 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 16, 8);
    v64 = (re *)(a4 + 64);
    v73 = *(_QWORD *)(a4 + 64);
    v74 = *(unsigned __int8 *)(v99 + 445);
    *(_QWORD *)v72 = &off_24ED83BC8;
    *(_DWORD *)(v72 + 8) = v74;
    if (v73)
    {
      v73 = v71 % *(unsigned int *)(a4 + 88);
      v75 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v73);
      if ((_DWORD)v75 != 0x7FFFFFFF)
      {
        v96 = *(_QWORD *)(a4 + 80);
        if (*(_QWORD *)(v96 + 24 * v75 + 8) == v71)
          goto LABEL_46;
        while (1)
        {
          LODWORD(v75) = *(_DWORD *)(v96 + 24 * v75) & 0x7FFFFFFF;
          if ((_DWORD)v75 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v96 + 24 * v75 + 8) == v71)
            goto LABEL_46;
        }
      }
    }
    v76 = *(unsigned int *)(a4 + 100);
    if ((_DWORD)v76 == 0x7FFFFFFF)
    {
      v76 = *(unsigned int *)(a4 + 96);
      v77 = v76;
      if ((_DWORD)v76 == *(_DWORD *)(a4 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v64, 2 * *(_DWORD *)(a4 + 92));
        LODWORD(v73) = v71 % *(unsigned int *)(a4 + 88);
        v77 = *(_DWORD *)(a4 + 96);
      }
      *(_DWORD *)(a4 + 96) = v77 + 1;
      v78 = *(_QWORD *)(a4 + 80);
      v79 = *(_DWORD *)(v78 + 24 * v76);
    }
    else
    {
      v78 = *(_QWORD *)(a4 + 80);
      v79 = *(_DWORD *)(v78 + 24 * v76);
      *(_DWORD *)(a4 + 100) = v79 & 0x7FFFFFFF;
    }
    v80 = 24 * v76;
    *(_DWORD *)(v78 + v80) = v79 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a4 + 80) + v80) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v76) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v73);
    *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v76 + 8) = v71;
    *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v76 + 16) = v72;
    *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v73) = v76;
    ++*(_DWORD *)(a4 + 92);
    ++*(_DWORD *)(a4 + 104);
  }
LABEL_46:
  v81 = (unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE" & 0x8000000000000000) != 0)
  {
    v82 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v83 = 5381;
    do
    {
      v81 = v83;
      v84 = *v82++;
      v83 = (33 * v83) ^ v84;
    }
    while (v84);
  }
  v85 = (v66 - 0x61C8864680B583E9 + (v81 << 6) + (v81 >> 2)) ^ v81;
  v86 = re::globalAllocators(v64);
  v87 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86[2] + 32))(v86[2], 16, 8);
  v88 = *(_QWORD *)(a4 + 16);
  *v87 = &off_24ED83BF0;
  v87[1] = ActiveDeformationData;
  if (v88)
  {
    v88 = v85 % *(unsigned int *)(a4 + 40);
    v89 = *(unsigned int *)(*(_QWORD *)(a4 + 24) + 4 * v88);
    if ((_DWORD)v89 != 0x7FFFFFFF)
    {
      v95 = *(_QWORD *)(a4 + 32);
      if (*(_QWORD *)(v95 + 24 * v89 + 8) == v85)
        goto LABEL_57;
      while (1)
      {
        LODWORD(v89) = *(_DWORD *)(v95 + 24 * v89) & 0x7FFFFFFF;
        if ((_DWORD)v89 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v95 + 24 * v89 + 8) == v85)
          goto LABEL_57;
      }
    }
  }
  v90 = *(unsigned int *)(a4 + 52);
  if ((_DWORD)v90 == 0x7FFFFFFF)
  {
    v90 = *(unsigned int *)(a4 + 48);
    v91 = v90;
    if ((_DWORD)v90 == *(_DWORD *)(a4 + 40))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a4 + 16, 2 * *(_DWORD *)(a4 + 44));
      LODWORD(v88) = v85 % *(unsigned int *)(a4 + 40);
      v91 = *(_DWORD *)(a4 + 48);
    }
    *(_DWORD *)(a4 + 48) = v91 + 1;
    v92 = *(_QWORD *)(a4 + 32);
    v93 = *(_DWORD *)(v92 + 24 * v90);
  }
  else
  {
    v92 = *(_QWORD *)(a4 + 32);
    v93 = *(_DWORD *)(v92 + 24 * v90);
    *(_DWORD *)(a4 + 52) = v93 & 0x7FFFFFFF;
  }
  v94 = 24 * v90;
  *(_DWORD *)(v92 + v94) = v93 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a4 + 32) + v94) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 24 * v90) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 24) + 4 * v88);
  *(_QWORD *)(*(_QWORD *)(a4 + 32) + 24 * v90 + 8) = v85;
  *(_QWORD *)(*(_QWORD *)(a4 + 32) + 24 * v90 + 16) = v87;
  *(_DWORD *)(*(_QWORD *)(a4 + 24) + 4 * v88) = v90;
  ++*(_DWORD *)(a4 + 44);
  ++*(_DWORD *)(a4 + 56);
LABEL_57:
  re::RenderFrame::emitGraph(a3, "Deformer", *(const char **)(v99 + 56));
}

void re::RealityEmitterBase::emitVFXSimulationGraph(uint64_t a1, _QWORD *a2, re::RenderFrame *a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  unsigned __int8 v39;
  unint64_t v40;
  const char *v41;
  size_t v42;
  unint64_t v43;
  uint64_t v44;
  re *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  re::RenderFrame *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  const char *v62;
  re::RenderFrame *v63;
  _QWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  const char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(**((_QWORD **)a3 + 47) + 32))(*((_QWORD **)a3 + 47), 144, 16);
  v63 = a3;
  v7 = (_QWORD *)*((_QWORD *)a3 + 47);
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v8 = (unint64_t *)(v6 + 8);
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = v7;
  re::DynamicArray<float *>::setCapacity((_QWORD *)v6, 0);
  ++*(_DWORD *)(v6 + 24);
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0x3F80000000000000;
  *(_QWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 84) = xmmword_226117740;
  *(_QWORD *)(v6 + 100) = 0xBDCCCCCD3DCCCCCDLL;
  *(_BYTE *)(v6 + 108) = 0;
  *(_OWORD *)(v6 + 112) = xmmword_2260E5F40;
  *(_DWORD *)(v6 + 128) = 1;
  *(_QWORD *)(v6 + 136) = 0;
  v65 = a2;
  v9 = a2[6];
  v10 = *(_QWORD *)(v9 + 40);
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v12 = (_anonymous_namespace_ *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v9, i);
      v13 = *((_QWORD *)v12 + 2);
      if (v13)
      {
        v14 = *((_QWORD *)v12 + 4);
        v15 = *(_QWORD *)(v6 + 16);
        v16 = 800 * v13;
        do
        {
          v17 = *v8;
          if (v15 >= *v8)
          {
            v18 = v15 + 1;
            if (v17 < v15 + 1)
            {
              if (*(_QWORD *)v6)
              {
                v19 = 2 * v17;
                if (!v17)
                  v19 = 8;
                if (v19 <= v18)
                  v20 = v18;
                else
                  v20 = v19;
                v12 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((_QWORD *)v6, v20);
              }
              else
              {
                v12 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((_QWORD *)v6, v18);
                ++*(_DWORD *)(v6 + 24);
              }
            }
            v15 = *(_QWORD *)(v6 + 16);
          }
          *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v15++) = v14;
          *(_QWORD *)(v6 + 16) = v15;
          ++*(_DWORD *)(v6 + 24);
          v14 += 800;
          v16 -= 800;
        }
        while (v16);
      }
    }
  }
  if (*(_QWORD *)(v6 + 16))
  {
    v21 = a2[24];
    if (v21 && (v22 = *(_QWORD *)(v21 + 40)) != 0)
    {
      v23 = 0;
      while (1)
      {
        v24 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v21, v23);
        if (*(_QWORD *)(v24 + 16))
          break;
        if (v22 == ++v23)
          goto LABEL_24;
      }
      v38 = *(_OWORD **)(v24 + 32);
      v66 = v38[2];
      v67 = v38[3];
      v68 = v38[4];
      v71 = v38[7];
      v70 = v38[6];
      v69 = v38[5];
      v26 = a4;
    }
    else
    {
LABEL_24:
      v25 = a2[23];
      v26 = a4;
      if (v25 && (v27 = *(_QWORD *)(v25 + 40)) != 0)
      {
        v28 = 0;
        while (1)
        {
          v29 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v25, v28);
          if (*(_QWORD *)(v29 + 16))
            break;
          if (v27 == ++v28)
            goto LABEL_29;
        }
        v37 = *(_OWORD **)(v29 + 32);
      }
      else
      {
LABEL_29:
        v30 = a2[37];
        if (v30)
        {
          v31 = 0;
          while (1)
          {
            v32 = re::BucketArray<unsigned long,4ul>::operator[]((uint64_t)(a2 + 32), v31);
            v33 = *(_QWORD *)v32;
            if (*(_QWORD *)(*(_QWORD *)v32 + 16))
              break;
            if (v30 == ++v31)
              goto LABEL_33;
          }
        }
        else
        {
LABEL_33:
          v34 = a2[30];
          if (!v34)
            return;
          v35 = 0;
          while (1)
          {
            v36 = re::BucketArray<unsigned long,4ul>::operator[]((uint64_t)(a2 + 25), v35);
            v33 = *(_QWORD *)v36;
            if (*(_QWORD *)(*(_QWORD *)v36 + 16))
              break;
            if (v34 == ++v35)
              return;
          }
        }
        v37 = *(_OWORD **)(v33 + 32);
      }
      v66 = v37[2];
      v67 = v37[3];
      v68 = v37[4];
      v71 = v37[7];
      v70 = v37[6];
      v69 = v37[5];
    }
    *(_OWORD *)(v6 + 80) = v68;
    *(_OWORD *)(v6 + 96) = v69;
    *(_OWORD *)(v6 + 112) = v70;
    *(_OWORD *)(v6 + 128) = v71;
    *(_OWORD *)(v6 + 48) = v66;
    *(_OWORD *)(v6 + 64) = v67;
    v39 = atomic_load((unsigned __int8 *)&qword_25411FBB0);
    if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_25411FBB0))
    {
      qword_25411FBA8 = re::hashString((re *)"VFXSimulation", v62);
      __cxa_guard_release(&qword_25411FBB0);
    }
    v40 = qword_25411FBA8;
    v41 = (const char *)v65[7];
    v42 = strlen(v41);
    if (v42)
    {
      MurmurHash3_x64_128((uint64_t)v41, v42, 0, &v72);
      v43 = ((unint64_t)&v73[64 * v72 - 0x61C8864680B583E9 + (v72 >> 2)] ^ v72) - 0x61C8864680B583E9;
      v41 = (const char *)v65[7];
    }
    else
    {
      v43 = 0x9E3779B97F4A7C17;
    }
    v44 = ((v40 >> 2) + (v40 << 6) + v43) ^ v40;
    v72 = (unint64_t)&off_24ED776C0;
    v73 = v41;
    v45 = (re *)re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(v26, v44, (uint64_t)&v72);
    v46 = (unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE" & 0x8000000000000000) != 0)
    {
      v47 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_23ActiveVFXSimulationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
      v48 = 5381;
      do
      {
        v46 = v48;
        v49 = *v47++;
        v48 = (33 * v48) ^ v49;
      }
      while (v49);
    }
    v50 = (v44 - 0x61C8864680B583E9 + (v46 << 6) + (v46 >> 2)) ^ v46;
    v51 = re::globalAllocators(v45);
    v52 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51[2] + 32))(v51[2], 16, 8);
    v53 = *(_QWORD *)(v26 + 16);
    *v52 = &off_24ED83C30;
    v52[1] = v6;
    if (v53)
    {
      v53 = v50 % *(unsigned int *)(v26 + 40);
      v54 = *(unsigned int *)(*(_QWORD *)(v26 + 24) + 4 * v53);
      v55 = v63;
      if ((_DWORD)v54 != 0x7FFFFFFF)
      {
        v56 = *(_QWORD *)(v26 + 32);
        if (*(_QWORD *)(v56 + 24 * v54 + 8) == v50)
        {
LABEL_62:
          re::RenderFrame::emitGraph(v55, "VFXSimulation", (const char *)v65[7]);
          return;
        }
        while (1)
        {
          LODWORD(v54) = *(_DWORD *)(v56 + 24 * v54) & 0x7FFFFFFF;
          if ((_DWORD)v54 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v56 + 24 * v54 + 8) == v50)
            goto LABEL_62;
        }
      }
    }
    else
    {
      v55 = v63;
    }
    v57 = *(unsigned int *)(v26 + 52);
    if ((_DWORD)v57 == 0x7FFFFFFF)
    {
      v57 = *(unsigned int *)(v26 + 48);
      v58 = v57;
      if ((_DWORD)v57 == *(_DWORD *)(v26 + 40))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v26 + 16, 2 * *(_DWORD *)(v26 + 44));
        LODWORD(v53) = v50 % *(unsigned int *)(v26 + 40);
        v58 = *(_DWORD *)(v26 + 48);
      }
      *(_DWORD *)(v26 + 48) = v58 + 1;
      v59 = *(_QWORD *)(v26 + 32);
      v60 = *(_DWORD *)(v59 + 24 * v57);
    }
    else
    {
      v59 = *(_QWORD *)(v26 + 32);
      v60 = *(_DWORD *)(v59 + 24 * v57);
      *(_DWORD *)(v26 + 52) = v60 & 0x7FFFFFFF;
    }
    v61 = 24 * v57;
    *(_DWORD *)(v59 + v61) = v60 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v26 + 32) + v61) = *(_DWORD *)(*(_QWORD *)(v26 + 32) + 24 * v57) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v26 + 24) + 4 * v53);
    *(_QWORD *)(*(_QWORD *)(v26 + 32) + 24 * v57 + 8) = v50;
    *(_QWORD *)(*(_QWORD *)(v26 + 32) + 24 * v57 + 16) = v52;
    *(_DWORD *)(*(_QWORD *)(v26 + 24) + 4 * v53) = v57;
    ++*(_DWORD *)(v26 + 44);
    ++*(_DWORD *)(v26 + 56);
    goto LABEL_62;
  }
}

void re::RealityEmitterBase::emitProbeWriteGraph(re::RealityEmitterBase *this, re::RenderFrame *a2, double a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  re::ProbeManager *v6;
  const char *v7;
  _BYTE v8[8];
  _QWORD v9[39];

  if ((v4 & 1) == 0
  {
    re::RealityEmitterBase::emitProbeWriteGraph(re::RenderFrame &)::kProbeWriteContextCombinedScopeHash = re::getCombinedScopeHash((re *)"ProbeWriteContext", "RenderFrame", v7);
  }
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 104);
  if (v5)
    v6 = *(re::ProbeManager **)(v5 + 320);
  else
    v6 = 0;
  re::ProbeManager::generateWorkload(v6, v8, a3);
  if (v8[0])
  {
    re::RenderGraphDataStore::add<re::ProbeWriteContext,re::ProbeWriteContext>((re::RenderFrame *)((char *)a2 + 32), re::RealityEmitterBase::emitProbeWriteGraph(re::RenderFrame &)::kProbeWriteContextCombinedScopeHash, (uint64_t)v9);
    re::RenderFrame::emitGraph(a2, "ProbeWriteContext", "RenderFrame");
    if (v8[0])
      (*(void (**)(_QWORD *))v9[0])(v9);
  }
}

void re::RealityEmitterBase::emitSingleGraphShadows(uint64_t a1, re::Allocator **a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  re::Allocator *v5;
  re::Allocator **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  const char *v14;
  unsigned __int8 v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  re::DynamicString **v56;
  unint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 v76;
  size_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 v131;
  size_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  unsigned __int8 *v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  re::Allocator *v159;
  uint64_t v160;
  int v161;
  re::Allocator *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  _QWORD *v171;
  uint64_t v172;
  _OWORD *v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  _BYTE *v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint32x4_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  _OWORD *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  _QWORD *v200;
  const char *v201;
  re::RenderFrame *v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  re::Allocator *v206;
  re::Allocator *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  re::DynamicString *v212;
  re::Allocator **v213;
  uint64_t v214;
  _BYTE v215[12];
  __int16 v216;
  int v217;
  __int16 v218;
  uint64_t v219;
  __int16 v220;
  unint64_t v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  _OWORD v226[4];
  uint64_t v227;
  int v228;
  _BYTE v229[128];
  uint64_t v230;
  int v231;
  _BYTE v232[128];
  __int128 v233;
  __int128 v234;
  _BYTE v235[26];
  unsigned __int8 v236;
  int v237;
  _OWORD v238[3];
  uint64_t v239;

  v239 = *MEMORY[0x24BDAC8D0];
  v5 = a2[14];
  if (!v5)
    return;
  v9 = a2;
  v10 = 0;
  v11 = 0;
  v12 = 320 * (_QWORD)v5;
  v13 = (unsigned __int16 *)((char *)a2[16] + 148);
  do
  {
    if (*v13 != 0xFFFF)
      v10 = ++v11;
    v13 += 160;
    v12 -= 320;
  }
  while (v12);
  v14 = (const char *)a2[7];
  v15 = atomic_load((unsigned __int8 *)&qword_25411FBD0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25411FBD0))
  {
    qword_25411FBC8 = re::hashString((re *)"SingleGraphShadows", v199);
    __cxa_guard_release(&qword_25411FBD0);
  }
  v16 = strlen(v14);
  v201 = v14;
  v210 = qword_25411FBC8;
  if (v16)
  {
    MurmurHash3_x64_128((uint64_t)v14, v16, 0, (unint64_t *)&v222);
    v17 = ((*((_QWORD *)&v222 + 1) - 0x61C8864680B583E9 + ((_QWORD)v222 << 6) + ((unint64_t)v222 >> 2)) ^ v222)
        - 0x61C8864680B583E9;
  }
  else
  {
    v17 = 0x9E3779B97F4A7C17;
  }
  v208 = v17;
  v206 = *v9;
  v18 = (unint64_t)"N2re15CameraArrayDataE";
  if (((unint64_t)"N2re15CameraArrayDataE" & 0x8000000000000000) != 0)
  {
    v19 = (unsigned __int8 *)((unint64_t)"N2re15CameraArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v20 = 5381;
    do
    {
      v18 = v20;
      v21 = *v19++;
      v20 = (33 * v20) ^ v21;
    }
    while (v21);
  }
  v22 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 32, 8);
  *v22 = &off_24ED83C70;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = 0;
  re::CameraData::CameraData((re::CameraData *)&v222, v206);
  v22[1] = v206;
  v22[2] = v10;
  v202 = (re::RenderFrame *)a3;
  v203 = a5;
  v213 = v9;
  if (v10)
  {
    if (v10 >= 0x7C1F07C1F07C20)
      goto LABEL_197;
    v204 = a4;
    v24 = (*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(_QWORD *)v206 + 32))(v206, 528 * v10, 16);
    v22[3] = v24;
    if (!v24)
    {
LABEL_198:
      re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_199;
    }
    v26 = v24;
    v200 = v22;
    v27 = v10 - 1;
    if (v10 != 1)
    {
      do
      {
        *(_QWORD *)v26 = off_24ED735F0;
        re::DynamicString::DynamicString((re::DynamicString *)(v26 + 8), (const re::DynamicString *)((char *)&v222 + 8));
        *(_QWORD *)(v26 + 48) = 0;
        *(_DWORD *)(v26 + 56) = 0;
        v28 = v225;
        memcpy((void *)(v26 + 64), v226, 32 * v225);
        *(_QWORD *)(v26 + 48) = v28;
        *(_QWORD *)(v26 + 128) = 0;
        *(_DWORD *)(v26 + 136) = 0;
        v29 = v227;
        memcpy((void *)(v26 + 144), v229, v227 << 6);
        *(_QWORD *)(v26 + 128) = v29;
        *(_QWORD *)(v26 + 272) = 0;
        *(_DWORD *)(v26 + 280) = 0;
        v30 = v230;
        memcpy((void *)(v26 + 288), v232, v230 << 6);
        *(_QWORD *)(v26 + 272) = v30;
        v32 = v234;
        v31 = *(_OWORD *)v235;
        v33 = v233;
        *(_OWORD *)(v26 + 458) = *(_OWORD *)&v235[10];
        *(_OWORD *)(v26 + 432) = v32;
        *(_OWORD *)(v26 + 448) = v31;
        *(_OWORD *)(v26 + 416) = v33;
        v34 = v236;
        *(_BYTE *)(v26 + 476) = v236;
        if (v34)
          *(_DWORD *)(v26 + 480) = v237;
        v35 = v238[0];
        *(_OWORD *)(v26 + 497) = *(_OWORD *)((char *)v238 + 13);
        *(_OWORD *)(v26 + 484) = v35;
        v26 += 528;
        --v27;
      }
      while (v27);
    }
    *(_QWORD *)v26 = off_24ED735F0;
    re::DynamicString::DynamicString((re::DynamicString *)(v26 + 8), (const re::DynamicString *)((char *)&v222 + 8));
    *(_QWORD *)(v26 + 48) = 0;
    *(_DWORD *)(v26 + 56) = 0;
    v36 = v225;
    memcpy((void *)(v26 + 64), v226, 32 * v225);
    *(_QWORD *)(v26 + 48) = v36;
    *(_QWORD *)(v26 + 128) = 0;
    *(_DWORD *)(v26 + 136) = 0;
    v37 = v227;
    memcpy((void *)(v26 + 144), v229, v227 << 6);
    *(_QWORD *)(v26 + 128) = v37;
    *(_QWORD *)(v26 + 272) = 0;
    *(_DWORD *)(v26 + 280) = 0;
    v38 = v230;
    memcpy((void *)(v26 + 288), v232, v230 << 6);
    *(_QWORD *)(v26 + 272) = v38;
    v40 = v234;
    v39 = *(_OWORD *)v235;
    v41 = v233;
    *(_OWORD *)(v26 + 458) = *(_OWORD *)&v235[10];
    *(_OWORD *)(v26 + 432) = v40;
    *(_OWORD *)(v26 + 448) = v39;
    *(_OWORD *)(v26 + 416) = v41;
    v42 = v236;
    *(_BYTE *)(v26 + 476) = v236;
    v22 = v200;
    if (v42)
      *(_DWORD *)(v26 + 480) = v237;
    v43 = v238[0];
    *(_OWORD *)(v26 + 497) = *(_OWORD *)((char *)v238 + 13);
    *(_OWORD *)(v26 + 484) = v43;
    v9 = v213;
    a4 = v204;
  }
  v205 = ((v210 >> 2) + (v210 << 6) + v208) ^ v210;
  v44 = v205 - 0x61C8864680B583E9;
  ++v231;
  ++v228;
  v45 = (unint64_t *)(a4 + 64);
  v230 = 0;
  v227 = 0;
  *(_QWORD *)&v225 = 0;
  ++DWORD2(v225);
  if (*((_QWORD *)&v222 + 1) && (v223 & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&v222 + 1) + 40))();
  v46 = (v205 - 0x61C8864680B583E9 + (v18 << 6) + (v18 >> 2)) ^ v18;
  v47 = *v45;
  if (*v45)
  {
    v47 = v46 % *(unsigned int *)(a4 + 88);
    v48 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v47);
    if ((_DWORD)v48 != 0x7FFFFFFF)
    {
      v55 = *(_QWORD *)(a4 + 80);
      if (*(_QWORD *)(v55 + 24 * v48 + 8) == v46)
      {
LABEL_37:
        v54 = v55 + 24 * v48;
        goto LABEL_38;
      }
      while (1)
      {
        LODWORD(v48) = *(_DWORD *)(v55 + 24 * v48) & 0x7FFFFFFF;
        if ((_DWORD)v48 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v55 + 24 * v48 + 8) == v46)
          goto LABEL_37;
      }
    }
  }
  v49 = *(unsigned int *)(a4 + 100);
  if ((_DWORD)v49 == 0x7FFFFFFF)
  {
    v49 = *(unsigned int *)(a4 + 96);
    v50 = v49;
    if ((_DWORD)v49 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a4 + 64, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v47) = v46 % *(unsigned int *)(a4 + 88);
      v50 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v50 + 1;
    v51 = *(_QWORD *)(a4 + 80);
    v52 = *(_DWORD *)(v51 + 24 * v49);
  }
  else
  {
    v51 = *(_QWORD *)(a4 + 80);
    v52 = *(_DWORD *)(v51 + 24 * v49);
    *(_DWORD *)(a4 + 100) = v52 & 0x7FFFFFFF;
  }
  v53 = 24 * v49;
  *(_DWORD *)(v51 + v53) = v52 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a4 + 80) + v53) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v49) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v47);
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v49 + 8) = v46;
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v49 + 16) = v22;
  *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v47) = v49;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
  v54 = *(_QWORD *)(a4 + 80) + 24 * v49;
LABEL_38:
  v56 = (re::DynamicString **)(v54 + 16);
  v57 = (unint64_t)"N2re26MultiViewCullModeArrayDataE";
  if (((unint64_t)"N2re26MultiViewCullModeArrayDataE" & 0x8000000000000000) != 0)
  {
    v58 = (unsigned __int8 *)((unint64_t)"N2re26MultiViewCullModeArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v59 = 5381;
    do
    {
      v57 = v59;
      v60 = *v58++;
      v59 = (33 * v59) ^ v60;
    }
    while (v60);
  }
  v212 = *v56;
  v62 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 32, 8);
  *v62 = &off_24ED83CB0;
  v62[1] = v206;
  v62[2] = v10;
  v62[3] = 0;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      v63 = (_BYTE *)(*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(_QWORD *)v206 + 32))(v206, 2 * v10, 1);
      v62[3] = v63;
      if (v63)
      {
        v65 = v10 - 1;
        if (v10 != 1)
        {
          do
          {
            *v63 = 0;
            v63 += 2;
            --v65;
          }
          while (v65);
        }
        *v63 = 0;
        goto LABEL_47;
      }
LABEL_200:
      re::internal::assertLog((re::internal *)4, v64, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_201;
    }
LABEL_199:
    re::internal::assertLog((re::internal *)6, v61, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 2, v10);
    _os_crash();
    __break(1u);
    goto LABEL_200;
  }
LABEL_47:
  v66 = (v44 + (v57 << 6) + (v57 >> 2)) ^ v57;
  v67 = *v45;
  if (*v45)
  {
    v67 = v66 % *(unsigned int *)(a4 + 88);
    v68 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v67);
    if ((_DWORD)v68 != 0x7FFFFFFF)
    {
      v75 = *(_QWORD *)(a4 + 80);
      if (*(_QWORD *)(v75 + 24 * v68 + 8) == v66)
      {
LABEL_58:
        v74 = v75 + 24 * v68;
        goto LABEL_59;
      }
      while (1)
      {
        LODWORD(v68) = *(_DWORD *)(v75 + 24 * v68) & 0x7FFFFFFF;
        if ((_DWORD)v68 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v75 + 24 * v68 + 8) == v66)
          goto LABEL_58;
      }
    }
  }
  v69 = *(unsigned int *)(a4 + 100);
  if ((_DWORD)v69 == 0x7FFFFFFF)
  {
    v69 = *(unsigned int *)(a4 + 96);
    v70 = v69;
    if ((_DWORD)v69 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a4 + 64, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v67) = v66 % *(unsigned int *)(a4 + 88);
      v70 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v70 + 1;
    v71 = *(_QWORD *)(a4 + 80);
    v72 = *(_DWORD *)(v71 + 24 * v69);
  }
  else
  {
    v71 = *(_QWORD *)(a4 + 80);
    v72 = *(_DWORD *)(v71 + 24 * v69);
    *(_DWORD *)(a4 + 100) = v72 & 0x7FFFFFFF;
  }
  v73 = 24 * v69;
  *(_DWORD *)(v71 + v73) = v72 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a4 + 80) + v73) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v69) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v67);
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v69 + 8) = v66;
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v69 + 16) = v62;
  *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v67) = v69;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
  v74 = *(_QWORD *)(a4 + 80) + 24 * v69;
LABEL_59:
  v211 = *(_QWORD *)(v74 + 16);
  v214 = 0;
  *(_QWORD *)v215 = 0;
  v76 = atomic_load((unsigned __int8 *)&qword_25411FD40);
  if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_25411FD40))
  {
    qword_25411FD38 = re::introspect_ShadowMapAtlasData(0);
    __cxa_guard_release(&qword_25411FD40);
  }
  v214 = qword_25411FD38;
  v77 = strlen(*(const char **)(qword_25411FD38 + 48));
  v78 = (unint64_t *)(a4 + 64);
  if (v77)
  {
    MurmurHash3_x64_128(*(_QWORD *)(qword_25411FD38 + 48), v77, 0, (unint64_t *)&v222);
    v79 = (*((_QWORD *)&v222 + 1) - 0x61C8864680B583E9 + ((_QWORD)v222 << 6) + ((unint64_t)v222 >> 2)) ^ v222;
  }
  else
  {
    v79 = 0;
  }
  *(_QWORD *)v215 = v79;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a4 + 176, (unint64_t *)v215, &v214);
  v80 = (v44 + (*(_QWORD *)v215 << 6) + (*(_QWORD *)v215 >> 2)) ^ *(_QWORD *)v215;
  v81 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 24, 8);
  v81[1] = 0;
  v81[2] = 252;
  *v81 = &off_24ED735B0;
  v82 = *(_QWORD *)(a4 + 64);
  if (v82)
  {
    v82 = v80 % *(unsigned int *)(a4 + 88);
    v83 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v82);
    if ((_DWORD)v83 != 0x7FFFFFFF)
    {
      v90 = *(_QWORD *)(a4 + 80);
      if (*(_QWORD *)(v90 + 24 * v83 + 8) == v80)
      {
LABEL_74:
        v89 = v90 + 24 * v83;
        goto LABEL_75;
      }
      while (1)
      {
        LODWORD(v83) = *(_DWORD *)(v90 + 24 * v83) & 0x7FFFFFFF;
        if ((_DWORD)v83 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v90 + 24 * v83 + 8) == v80)
          goto LABEL_74;
      }
    }
  }
  v84 = *(unsigned int *)(a4 + 100);
  if ((_DWORD)v84 == 0x7FFFFFFF)
  {
    v84 = *(unsigned int *)(a4 + 96);
    v85 = v84;
    if ((_DWORD)v84 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v78, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v82) = v80 % *(unsigned int *)(a4 + 88);
      v85 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v85 + 1;
    v86 = *(_QWORD *)(a4 + 80);
    v87 = *(_DWORD *)(v86 + 24 * v84);
  }
  else
  {
    v86 = *(_QWORD *)(a4 + 80);
    v87 = *(_DWORD *)(v86 + 24 * v84);
    *(_DWORD *)(a4 + 100) = v87 & 0x7FFFFFFF;
  }
  v88 = 24 * v84;
  *(_DWORD *)(v86 + v88) = v87 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a4 + 80) + v88) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v84) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v82);
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v84 + 8) = v80;
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v84 + 16) = v81;
  *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v82) = v84;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
  v89 = *(_QWORD *)(a4 + 80) + 24 * v84;
LABEL_75:
  v91 = *(_QWORD *)(v89 + 16);
  *(_QWORD *)(v91 + 8) = *((_QWORD *)v9[1] + 35);
  *(_DWORD *)(v91 + 16) = 252;
  v92 = (unint64_t)"N2re17ViewportArrayDataE";
  if (((unint64_t)"N2re17ViewportArrayDataE" & 0x8000000000000000) != 0)
  {
    v93 = (unsigned __int8 *)((unint64_t)"N2re17ViewportArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v94 = 5381;
    do
    {
      v92 = v94;
      v95 = *v93++;
      v94 = (33 * v94) ^ v95;
    }
    while (v95);
  }
  v97 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 32, 8);
  *v97 = &off_24ED83CF0;
  v97[1] = v206;
  v97[2] = v10;
  v97[3] = 0;
  if (v10)
  {
    if (!(v10 >> 59))
    {
      v98 = (_QWORD *)(*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(_QWORD *)v206 + 32))(v206, 32 * v10, 8);
      v97[3] = v98;
      if (v98)
      {
        v100 = v10 - 1;
        if (v10 != 1)
        {
          do
          {
            *v98 = &off_24ED73450;
            v98[1] = 0;
            v98[2] = 0;
            v98[3] = 0x3F80000000000000;
            v98 += 4;
            --v100;
          }
          while (v100);
        }
        *v98 = &off_24ED73450;
        v98[1] = 0;
        v98[2] = 0;
        v98[3] = 0x3F80000000000000;
        goto LABEL_84;
      }
LABEL_202:
      re::internal::assertLog((re::internal *)4, v99, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      re::internal::assertLog((re::internal *)6, v198, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 160, v10);
      _os_crash();
      __break(1u);
      goto LABEL_203;
    }
LABEL_201:
    re::internal::assertLog((re::internal *)6, v96, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, v10);
    _os_crash();
    __break(1u);
    goto LABEL_202;
  }
LABEL_84:
  v101 = (v44 + (v92 << 6) + (v92 >> 2)) ^ v92;
  v102 = *v78;
  if (*v78)
  {
    v102 = v101 % *(unsigned int *)(a4 + 88);
    v103 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v102);
    if ((_DWORD)v103 != 0x7FFFFFFF)
    {
      v110 = *(_QWORD *)(a4 + 80);
      if (*(_QWORD *)(v110 + 24 * v103 + 8) == v101)
      {
LABEL_95:
        v109 = v110 + 24 * v103;
        goto LABEL_96;
      }
      while (1)
      {
        LODWORD(v103) = *(_DWORD *)(v110 + 24 * v103) & 0x7FFFFFFF;
        if ((_DWORD)v103 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v110 + 24 * v103 + 8) == v101)
          goto LABEL_95;
      }
    }
  }
  v104 = *(unsigned int *)(a4 + 100);
  if ((_DWORD)v104 == 0x7FFFFFFF)
  {
    v104 = *(unsigned int *)(a4 + 96);
    v105 = v104;
    if ((_DWORD)v104 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v78, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v102) = v101 % *(unsigned int *)(a4 + 88);
      v105 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v105 + 1;
    v106 = *(_QWORD *)(a4 + 80);
    v107 = *(_DWORD *)(v106 + 24 * v104);
  }
  else
  {
    v106 = *(_QWORD *)(a4 + 80);
    v107 = *(_DWORD *)(v106 + 24 * v104);
    *(_DWORD *)(a4 + 100) = v107 & 0x7FFFFFFF;
  }
  v108 = 24 * v104;
  *(_DWORD *)(v106 + v108) = v107 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a4 + 80) + v108) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v104) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v102);
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v104 + 8) = v101;
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v104 + 16) = v97;
  *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v102) = v104;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
  v109 = *(_QWORD *)(a4 + 80) + 24 * v104;
LABEL_96:
  v111 = (uint64_t *)(v109 + 16);
  v112 = (unint64_t)"N2re27MeshLodSelectInputArrayDataE";
  if (((unint64_t)"N2re27MeshLodSelectInputArrayDataE" & 0x8000000000000000) != 0)
  {
    v113 = (unsigned __int8 *)((unint64_t)"N2re27MeshLodSelectInputArrayDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v114 = 5381;
    do
    {
      v112 = v114;
      v115 = *v113++;
      v114 = (33 * v114) ^ v115;
    }
    while (v115);
  }
  v209 = *v111;
  v116 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 40) + 32))(*(_QWORD *)(a3 + 40), 32, 8);
  *v116 = &off_24ED83D30;
  v116[1] = v206;
  v116[2] = v10;
  v116[3] = 0;
  if (v10)
  {
    v117 = (*(uint64_t (**)(re::Allocator *, unint64_t, uint64_t))(*(_QWORD *)v206 + 32))(v206, 160 * v10, 16);
    v116[3] = v117;
    if (v117)
    {
      v119 = v10 - 1;
      if (v10 != 1)
      {
        do
        {
          *(_OWORD *)v117 = 0uLL;
          *(_OWORD *)(v117 + 16) = 0uLL;
          *(_OWORD *)(v117 + 96) = 0uLL;
          *(_OWORD *)(v117 + 112) = 0uLL;
          *(_OWORD *)(v117 + 64) = 0uLL;
          *(_OWORD *)(v117 + 80) = 0uLL;
          *(_OWORD *)(v117 + 32) = 0uLL;
          *(_OWORD *)(v117 + 48) = 0uLL;
          *(_QWORD *)v117 = &off_24ED77680;
          *(_BYTE *)(v117 + 16) = 1;
          *(_DWORD *)(v117 + 96) = 0;
          *(_OWORD *)(v117 + 100) = xmmword_226117740;
          *(_QWORD *)(v117 + 116) = 0xBDCCCCCD3DCCCCCDLL;
          *(_OWORD *)(v117 + 128) = xmmword_2260E5F40;
          *(_OWORD *)(v117 + 144) = 0uLL;
          *(_DWORD *)(v117 + 144) = 1;
          v117 += 160;
          --v119;
        }
        while (v119);
      }
      *(_OWORD *)v117 = 0u;
      *(_OWORD *)(v117 + 16) = 0u;
      *(_OWORD *)(v117 + 96) = 0u;
      *(_OWORD *)(v117 + 112) = 0u;
      *(_OWORD *)(v117 + 64) = 0u;
      *(_OWORD *)(v117 + 80) = 0u;
      *(_QWORD *)v117 = &off_24ED77680;
      *(_BYTE *)(v117 + 16) = 1;
      *(_OWORD *)(v117 + 32) = 0u;
      *(_OWORD *)(v117 + 48) = 0u;
      *(_DWORD *)(v117 + 96) = 0;
      *(_OWORD *)(v117 + 100) = xmmword_226117740;
      *(_QWORD *)(v117 + 116) = 0xBDCCCCCD3DCCCCCDLL;
      *(_OWORD *)(v117 + 128) = xmmword_2260E5F40;
      *(_OWORD *)(v117 + 144) = 0u;
      *(_DWORD *)(v117 + 144) = 1;
      goto LABEL_104;
    }
LABEL_203:
    re::internal::assertLog((re::internal *)4, v118, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
LABEL_104:
  v120 = (v44 + (v112 << 6) + (v112 >> 2)) ^ v112;
  v121 = a3 + 96;
  v122 = *(_QWORD *)(a3 + 96);
  if (v122)
  {
    v122 = v120 % *(unsigned int *)(a3 + 120);
    v123 = *(unsigned int *)(*(_QWORD *)(a3 + 104) + 4 * v122);
    if ((_DWORD)v123 != 0x7FFFFFFF)
    {
      v130 = *(_QWORD *)(a3 + 112);
      if (*(_QWORD *)(v130 + 24 * v123 + 8) == v120)
      {
LABEL_115:
        v129 = v130 + 24 * v123;
        goto LABEL_116;
      }
      while (1)
      {
        LODWORD(v123) = *(_DWORD *)(v130 + 24 * v123) & 0x7FFFFFFF;
        if ((_DWORD)v123 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v130 + 24 * v123 + 8) == v120)
          goto LABEL_115;
      }
    }
  }
  v124 = *(unsigned int *)(a3 + 132);
  if ((_DWORD)v124 == 0x7FFFFFFF)
  {
    v124 = *(unsigned int *)(a3 + 128);
    v125 = v124;
    if ((_DWORD)v124 == *(_DWORD *)(a3 + 120))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v121, 2 * *(_DWORD *)(a3 + 124));
      LODWORD(v122) = v120 % *(unsigned int *)(a3 + 120);
      v125 = *(_DWORD *)(a3 + 128);
    }
    *(_DWORD *)(a3 + 128) = v125 + 1;
    v126 = *(_QWORD *)(a3 + 112);
    v127 = *(_DWORD *)(v126 + 24 * v124);
  }
  else
  {
    v126 = *(_QWORD *)(a3 + 112);
    v127 = *(_DWORD *)(v126 + 24 * v124);
    *(_DWORD *)(a3 + 132) = v127 & 0x7FFFFFFF;
  }
  v128 = 24 * v124;
  *(_DWORD *)(v126 + v128) = v127 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a3 + 112) + v128) = *(_DWORD *)(*(_QWORD *)(a3 + 112) + 24 * v124) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a3 + 104) + 4 * v122);
  *(_QWORD *)(*(_QWORD *)(a3 + 112) + 24 * v124 + 8) = v120;
  *(_QWORD *)(*(_QWORD *)(a3 + 112) + 24 * v124 + 16) = v116;
  *(_DWORD *)(*(_QWORD *)(a3 + 104) + 4 * v122) = v124;
  ++*(_DWORD *)(a3 + 124);
  ++*(_DWORD *)(a3 + 136);
  v129 = *(_QWORD *)(a3 + 112) + 24 * v124;
LABEL_116:
  v207 = *(re::Allocator **)(v129 + 16);
  re::RealityEmitterBase::addSceneDataToDataStore(v121, (uint64_t)v9, v205, a4);
  if (*v203)
    goto LABEL_129;
  v214 = 0;
  *(_QWORD *)v215 = 0;
  v131 = atomic_load((unsigned __int8 *)&qword_25411FD50);
  if ((v131 & 1) == 0 && __cxa_guard_acquire(&qword_25411FD50))
  {
    qword_25411FD48 = re::introspect_ForceClearData(0);
    __cxa_guard_release(&qword_25411FD50);
  }
  v214 = qword_25411FD48;
  v132 = strlen(*(const char **)(qword_25411FD48 + 48));
  if (v132)
  {
    MurmurHash3_x64_128(*(_QWORD *)(qword_25411FD48 + 48), v132, 0, (unint64_t *)&v222);
    v133 = (*((_QWORD *)&v222 + 1) - 0x61C8864680B583E9 + ((_QWORD)v222 << 6) + ((unint64_t)v222 >> 2)) ^ v222;
  }
  else
  {
    v133 = 0;
  }
  *(_QWORD *)v215 = v133;
  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a4 + 176, (unint64_t *)v215, &v214);
  v134 = (v44 + (*(_QWORD *)v215 << 6) + (*(_QWORD *)v215 >> 2)) ^ *(_QWORD *)v215;
  v135 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 16, 8);
  *(_QWORD *)v135 = &off_24ED83FB8;
  *(_BYTE *)(v135 + 8) = 1;
  v136 = *(_QWORD *)(a4 + 64);
  if (v136)
  {
    v136 = v134 % *(unsigned int *)(a4 + 88);
    v137 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v136);
    if ((_DWORD)v137 != 0x7FFFFFFF)
    {
      v197 = *(_QWORD *)(a4 + 80);
      if (*(_QWORD *)(v197 + 24 * v137 + 8) == v134)
        goto LABEL_129;
      while (1)
      {
        LODWORD(v137) = *(_DWORD *)(v197 + 24 * v137) & 0x7FFFFFFF;
        if ((_DWORD)v137 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v197 + 24 * v137 + 8) == v134)
          goto LABEL_129;
      }
    }
  }
  v138 = *(unsigned int *)(a4 + 100);
  if ((_DWORD)v138 == 0x7FFFFFFF)
  {
    v138 = *(unsigned int *)(a4 + 96);
    v139 = v138;
    if ((_DWORD)v138 == *(_DWORD *)(a4 + 88))
    {
      re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v78, 2 * *(_DWORD *)(a4 + 92));
      LODWORD(v136) = v134 % *(unsigned int *)(a4 + 88);
      v139 = *(_DWORD *)(a4 + 96);
    }
    *(_DWORD *)(a4 + 96) = v139 + 1;
    v140 = *(_QWORD *)(a4 + 80);
    v141 = *(_DWORD *)(v140 + 24 * v138);
  }
  else
  {
    v140 = *(_QWORD *)(a4 + 80);
    v141 = *(_DWORD *)(v140 + 24 * v138);
    *(_DWORD *)(a4 + 100) = v141 & 0x7FFFFFFF;
  }
  v142 = 24 * v138;
  *(_DWORD *)(v140 + v142) = v141 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a4 + 80) + v142) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v138) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v136);
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v138 + 8) = v134;
  *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v138 + 16) = v135;
  *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v136) = v138;
  ++*(_DWORD *)(a4 + 92);
  ++*(_DWORD *)(a4 + 104);
LABEL_129:
  v143 = (unint64_t)"N2re18MeshNodeFilterDataE";
  if (((unint64_t)"N2re18MeshNodeFilterDataE" & 0x8000000000000000) != 0)
  {
    v144 = (unsigned __int8 *)((unint64_t)"N2re18MeshNodeFilterDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v145 = 5381;
    do
    {
      v143 = v145;
      v146 = *v144++;
      v145 = (33 * v145) ^ v146;
    }
    while (v146);
  }
  v147 = (v44 + (v143 << 6) + (v143 >> 2)) ^ v143;
  v149 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 16, 8);
  *v149 = &off_24ED83D70;
  v149[1] = 0;
  v150 = *(_QWORD *)(a4 + 64);
  if (!v150
    || (v150 = v147 % *(unsigned int *)(a4 + 88),
        v151 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v150),
        (_DWORD)v151 == 0x7FFFFFFF))
  {
LABEL_134:
    v152 = *(unsigned int *)(a4 + 100);
    if ((_DWORD)v152 == 0x7FFFFFFF)
    {
      v152 = *(unsigned int *)(a4 + 96);
      v153 = v152;
      if ((_DWORD)v152 == *(_DWORD *)(a4 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity((uint64_t)v78, 2 * *(_DWORD *)(a4 + 92));
        LODWORD(v150) = v147 % *(unsigned int *)(a4 + 88);
        v153 = *(_DWORD *)(a4 + 96);
      }
      *(_DWORD *)(a4 + 96) = v153 + 1;
      v154 = *(_QWORD *)(a4 + 80);
      v155 = *(_DWORD *)(v154 + 24 * v152);
    }
    else
    {
      v154 = *(_QWORD *)(a4 + 80);
      v155 = *(_DWORD *)(v154 + 24 * v152);
      *(_DWORD *)(a4 + 100) = v155 & 0x7FFFFFFF;
    }
    v156 = 24 * v152;
    *(_DWORD *)(v154 + v156) = v155 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a4 + 80) + v156) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v152) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v150);
    *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v152 + 8) = v147;
    *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v152 + 16) = v149;
    *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v150) = v152;
    ++*(_DWORD *)(a4 + 92);
    ++*(_DWORD *)(a4 + 104);
    v157 = *(_QWORD *)(a4 + 80) + 24 * v152;
    goto LABEL_144;
  }
  v158 = *(_QWORD *)(a4 + 80);
  while (*(_QWORD *)(v158 + 24 * v151 + 8) != v147)
  {
    LODWORD(v151) = *(_DWORD *)(v158 + 24 * v151) & 0x7FFFFFFF;
    if ((_DWORD)v151 == 0x7FFFFFFF)
      goto LABEL_134;
  }
  v157 = v158 + 24 * v151;
LABEL_144:
  *(_QWORD *)(*(_QWORD *)(v157 + 16) + 8) |= 0x1000000010uLL;
  v159 = v9[14];
  if (v159)
  {
    v160 = 0;
    v161 = 0;
    v162 = v213[16];
    v163 = 320 * (_QWORD)v159;
    do
    {
      if (*(__int16 *)((char *)v162 + v160 + 148) != -1)
      {
        v10 = *((_QWORD *)v212 + 2);
        if (v10 <= v161)
        {
          v214 = 0;
          v225 = 0u;
          v226[0] = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v215 = 136315906;
          *(_QWORD *)&v215[4] = "operator[]";
          v216 = 1024;
          v217 = 468;
          v218 = 2048;
          v219 = v161;
          v220 = 2048;
          v221 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_194:
          v214 = 0;
          v225 = 0u;
          v226[0] = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v215 = 136315906;
          *(_QWORD *)&v215[4] = "operator[]";
          v216 = 1024;
          v217 = 468;
          v218 = 2048;
          v219 = v161;
          v220 = 2048;
          v221 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_195:
          v214 = 0;
          v225 = 0u;
          v226[0] = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v215 = 136315906;
          *(_QWORD *)&v215[4] = "operator[]";
          v216 = 1024;
          v217 = 468;
          v218 = 2048;
          v219 = v161;
          v220 = 2048;
          v221 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_196:
          v214 = 0;
          v225 = 0u;
          v226[0] = 0u;
          v223 = 0u;
          v224 = 0u;
          v222 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v215 = 136315906;
          *(_QWORD *)&v215[4] = "operator[]";
          v216 = 1024;
          v217 = 468;
          v218 = 2048;
          v219 = v161;
          v220 = 2048;
          v221 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_197:
          re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 528, v10);
          _os_crash();
          __break(1u);
          goto LABEL_198;
        }
        v164 = *((_QWORD *)v212 + 3);
        v165 = (_QWORD *)(v164 + 528 * v161);
        v165[55] = v213[4];
        v165[56] = v213[6];
        v166 = v165 + 6;
        if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity(v165 + 6, v148))
        {
          v168 = v164 + 528 * v161;
          v169 = v168 + 32 * *v166;
          v170 = *(_OWORD *)((char *)v162 + v160 + 48);
          *(_OWORD *)(v169 + 64) = *(_OWORD *)((char *)v162 + v160 + 32);
          *(_OWORD *)(v169 + 80) = v170;
          ++*v166;
          ++*(_DWORD *)(v168 + 56);
        }
        v171 = (_QWORD *)(v164 + 528 * v161 + 128);
        if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity(v171, v167))
        {
          v172 = v164 + 528 * v161;
          v173 = (_OWORD *)(v172 + (*v171 << 6));
          v175 = *(_OWORD *)((char *)v162 + v160 + 64);
          v174 = *(_OWORD *)((char *)v162 + v160 + 80);
          v176 = *(_OWORD *)((char *)v162 + v160 + 112);
          v173[11] = *(_OWORD *)((char *)v162 + v160 + 96);
          v173[12] = v176;
          v173[9] = v175;
          v173[10] = v174;
          ++*v171;
          ++*(_DWORD *)(v172 + 136);
        }
        v177 = v164 + 528 * v161;
        *(_OWORD *)(v177 + 416) = xmmword_2260E5D70;
        *(_BYTE *)(v177 + 473) = *((_BYTE *)v162 + v160 + 312);
        v178 = *(_DWORD *)((char *)v162 + v160 + 308);
        if (!*(_BYTE *)(v177 + 476))
          *(_BYTE *)(v177 + 476) = 1;
        *(_DWORD *)(v164 + 528 * v161 + 480) = v178;
        v10 = *(_QWORD *)(v211 + 16);
        if (v10 <= v161)
          goto LABEL_194;
        v179 = *(_QWORD *)(v211 + 24);
        v180 = (_BYTE *)(v179 + 2 * v161);
        if (*v180 || *((_BYTE *)v162 + v160 + 304))
        {
          if (!*v180 || *((_BYTE *)v162 + v160 + 304))
          {
            if (*v180 || !*((_BYTE *)v162 + v160 + 304))
            {
              v182 = *((_BYTE *)v162 + v160 + 305);
              v181 = v179 + 2 * v161;
            }
            else
            {
              *v180 = 1;
              v181 = v179 + 2 * v161;
              v182 = *((_BYTE *)v162 + v160 + 305);
            }
            *(_BYTE *)(v181 + 1) = v182;
          }
          else
          {
            *v180 = 0;
          }
        }
        v10 = *(_QWORD *)(v209 + 16);
        if (v10 <= v161)
          goto LABEL_195;
        v183 = (uint64_t)v162 + v160;
        v184.i64[0] = *(_QWORD *)((char *)v162 + v160 + 140);
        v184.i64[1] = *(_QWORD *)((char *)v162 + v160 + 128);
        v185 = *(_QWORD *)(v209 + 24) + 32 * v161;
        *(float32x4_t *)(v185 + 8) = vcvtq_f32_u32(v184);
        *(_QWORD *)(v185 + 24) = 0x3F80000000000000;
        v10 = *((_QWORD *)v207 + 2);
        if (v10 <= v161)
          goto LABEL_196;
        v186 = *((_QWORD *)v207 + 3);
        v187 = v186 + 160 * v161;
        *(_BYTE *)(v187 + 16) = *(_BYTE *)(v183 + 160);
        v188 = v187 + 16;
        v189 = *(unsigned __int8 *)(v183 + 161);
        if (*(_BYTE *)(v188 + 1) || v189)
        {
          if (!*(_BYTE *)(v188 + 1) || v189)
          {
            if (!*(_BYTE *)(v188 + 1) && v189)
              *(_BYTE *)(v188 + 1) = 1;
            *(_BYTE *)(v188 + 2) = *((_BYTE *)v162 + v160 + 162);
          }
          else
          {
            *(_BYTE *)(v188 + 1) = 0;
          }
        }
        if (*(_BYTE *)(v188 + 4) || *((_BYTE *)v162 + v160 + 164))
        {
          if (!*(_BYTE *)(v188 + 4) || *((_BYTE *)v162 + v160 + 164))
          {
            if (!*(_BYTE *)(v188 + 4))
            {
              if (*((_BYTE *)v162 + v160 + 164))
                *(_BYTE *)(v188 + 4) = 1;
            }
            *(_DWORD *)(v188 + 8) = *(_DWORD *)((char *)v162 + v160 + 168);
          }
          else
          {
            *(_BYTE *)(v188 + 4) = 0;
          }
        }
        v190 = (_OWORD *)(v186 + 160 * v161);
        v191 = *(_OWORD *)((char *)v162 + v160 + 176);
        v192 = *(_OWORD *)((char *)v162 + v160 + 192);
        v193 = *(_OWORD *)((char *)v162 + v160 + 224);
        v190[4] = *(_OWORD *)((char *)v162 + v160 + 208);
        v190[5] = v193;
        v190[2] = v191;
        v190[3] = v192;
        v194 = *(_OWORD *)((char *)v162 + v160 + 240);
        v195 = *(_OWORD *)((char *)v162 + v160 + 256);
        v196 = *(_OWORD *)((char *)v162 + v160 + 288);
        v190[8] = *(_OWORD *)((char *)v162 + v160 + 272);
        v190[9] = v196;
        v190[6] = v194;
        v190[7] = v195;
        ++v161;
      }
      v160 += 320;
    }
    while (v163 != v160);
  }
  re::RenderFrame::emitGraph(v202, "SingleGraphShadows", v201);
  ++*v203;
}

void re::RealityEmitterBase::emitFilterMapGraph(uint64_t a1, re::Allocator **a2, uint64_t a3, uint64_t a4)
{
  re::Allocator *v4;
  re::Allocator *v7;
  re::Allocator *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  const char *v12;
  size_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  re::CameraData *v19;
  re *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unsigned __int8 v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  size_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint32x4_t v63;
  unint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  const char *v77;
  size_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  re::Allocator *v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  char v88;
  _BYTE v89[7];
  const char *v90;
  re::CameraData *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v4 = a2[19];
  if (v4)
  {
    v7 = a2[21];
    v8 = *a2;
    v86 = a4 + 176;
    v82 = a4 + 64;
    v83 = (re::Allocator *)((char *)v7 + 352 * (_QWORD)v4);
    v81 = a3 + 96;
    do
    {
      if (*((__int16 *)v7 + 74) != -1)
      {
        if ((*((_BYTE *)v7 + 8) & 1) != 0)
          v9 = *((_QWORD *)v7 + 2);
        else
          v9 = (uint64_t)v7 + 9;
        re::DynamicString::format((re::DynamicString *)"%s_%s", (re::DynamicString *)&v87, v9, "Filter");
        v10 = atomic_load((unsigned __int8 *)&qword_25411FBC0);
        if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25411FBC0))
        {
          qword_25411FBB8 = re::hashString((re *)"Filter", v80);
          __cxa_guard_release(&qword_25411FBC0);
        }
        v11 = qword_25411FBB8;
        if ((v88 & 1) != 0)
          v12 = v90;
        else
          v12 = v89;
        v13 = strlen(v12);
        v14 = 0x9E3779B97F4A7C17;
        if (v13)
        {
          MurmurHash3_x64_128((uint64_t)v12, v13, 0, &v93);
          v14 = ((v94 - 0x61C8864680B583E9 + (v93 << 6) + (v93 >> 2)) ^ v93) - 0x61C8864680B583E9;
        }
        v92 = 0;
        v91 = 0;
        if ((v15 & 1) == 0
        {
          re::introspect<re::CameraData>(void)::info = (_UNKNOWN *)re::introspect_CameraData(0);
        }
        v91 = (re::CameraData *)re::introspect<re::CameraData>(void)::info;
        v16 = strlen(*((const char **)re::introspect<re::CameraData>(void)::info + 6));
        if (v16)
        {
          MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraData>(void)::info + 6), v16, 0, &v93);
          v17 = (v94 - 0x61C8864680B583E9 + (v93 << 6) + (v93 >> 2)) ^ v93;
        }
        else
        {
          v17 = 0;
        }
        v92 = v17;
        re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v86, &v92, &v91);
        v84 = ((v11 >> 2) + (v11 << 6) + v14) ^ v11;
        v18 = v84 - 0x61C8864680B583E9;
        v93 = (v84 - 0x61C8864680B583E9 + (v92 << 6) + (v92 >> 2)) ^ v92;
        v19 = (re::CameraData *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 528, 16);
        v91 = re::CameraData::CameraData(v19, v8);
        v20 = (re *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v82, &v93, &v91);
        v21 = *(_QWORD *)v20;
        re::globalAllocators(v20);
        v22 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 56, 8);
        *(_OWORD *)(v22 + 16) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_QWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_OWORD *)v22 = 0u;
        *(_DWORD *)(v22 + 16) = 1;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        *(_DWORD *)(v22 + 48) = 0;
        v23 = re::globalAllocators((re *)v22)[2];
        v93 = (unint64_t)&off_24ED83890;
        v95 = v23;
        v96 = &v93;
        v24 = (*(uint64_t (**)(re::Allocator *, uint64_t, unint64_t *))(*(_QWORD *)v8 + 16))(v8, v22, &v93);
        if (v96)
        {
          (*(void (**)(unint64_t *))*v96)(v96);
          if (v96 != &v93)
            (*(void (**)(uint64_t))(*(_QWORD *)v95 + 40))(v95);
        }
        v25 = re::BucketArray<re::MeshSceneCollection,16ul>::addUninitialized(v24);
        re::DynamicArray<re::MeshScene>::DynamicArray(v25, (uint64_t *)v7 + 38);
        *(_QWORD *)(v21 + 440) = v24;
        *(_QWORD *)(v21 + 448) = 0;
        if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((_QWORD *)(v21 + 48), v26))
        {
          v28 = v21 + 48 + 32 * *(_QWORD *)(v21 + 48);
          v29 = *((_OWORD *)v7 + 3);
          *(_OWORD *)(v28 + 16) = *((_OWORD *)v7 + 2);
          *(_OWORD *)(v28 + 32) = v29;
          ++*(_QWORD *)(v21 + 48);
          ++*(_DWORD *)(v21 + 56);
        }
        if (re::DynamicInlineArray<re::RenderCamera,2ul>::ensureCapacity((_QWORD *)(v21 + 128), v27))
        {
          v30 = (_OWORD *)(v21 + 128 + (*(_QWORD *)(v21 + 128) << 6));
          v32 = *((_OWORD *)v7 + 4);
          v31 = *((_OWORD *)v7 + 5);
          v33 = *((_OWORD *)v7 + 7);
          v30[3] = *((_OWORD *)v7 + 6);
          v30[4] = v33;
          v30[1] = v32;
          v30[2] = v31;
          ++*(_QWORD *)(v21 + 128);
          ++*(_DWORD *)(v21 + 136);
        }
        *(_OWORD *)(v21 + 416) = xmmword_2260E5D70;
        v92 = 0;
        v91 = 0;
        v34 = atomic_load((unsigned __int8 *)&qword_25411FD30);
        if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_25411FD30))
        {
          qword_25411FD28 = re::introspect_FilterMapAtlasData(0);
          __cxa_guard_release(&qword_25411FD30);
        }
        v91 = (re::CameraData *)qword_25411FD28;
        v35 = strlen(*(const char **)(qword_25411FD28 + 48));
        if (v35)
        {
          MurmurHash3_x64_128(*(_QWORD *)(qword_25411FD28 + 48), v35, 0, &v93);
          v36 = (v94 - 0x61C8864680B583E9 + (v93 << 6) + (v93 >> 2)) ^ v93;
        }
        else
        {
          v36 = 0;
        }
        v92 = v36;
        re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v86, &v92, &v91);
        v37 = (v18 + (v92 << 6) + (v92 >> 2)) ^ v92;
        v38 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 32, 8);
        *(_QWORD *)v38 = &off_24ED73570;
        *(_QWORD *)(v38 + 8) = 0;
        *(_OWORD *)(v38 + 16) = xmmword_2261959B0;
        v39 = *(_QWORD *)(a4 + 64);
        if (!v39
          || (v39 = v37 % *(unsigned int *)(a4 + 88),
              v40 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v39),
              (_DWORD)v40 == 0x7FFFFFFF))
        {
LABEL_33:
          v42 = *(unsigned int *)(a4 + 100);
          if ((_DWORD)v42 == 0x7FFFFFFF)
          {
            v42 = *(unsigned int *)(a4 + 96);
            v43 = v42;
            if ((_DWORD)v42 == *(_DWORD *)(a4 + 88))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v82, 2 * *(_DWORD *)(a4 + 92));
              v39 = v37 % *(unsigned int *)(a4 + 88);
              v43 = *(_DWORD *)(a4 + 96);
            }
            *(_DWORD *)(a4 + 96) = v43 + 1;
            v44 = *(_QWORD *)(a4 + 80);
            v45 = *(_DWORD *)(v44 + 24 * v42);
          }
          else
          {
            v44 = *(_QWORD *)(a4 + 80);
            v45 = *(_DWORD *)(v44 + 24 * v42);
            *(_DWORD *)(a4 + 100) = v45 & 0x7FFFFFFF;
          }
          v46 = 24 * v42;
          *(_DWORD *)(v44 + v46) = v45 | 0x80000000;
          *(_DWORD *)(*(_QWORD *)(a4 + 80) + v46) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v42) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v39);
          *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v42 + 8) = v37;
          *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v42 + 16) = v38;
          *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v39) = v42;
          ++*(_DWORD *)(a4 + 92);
          ++*(_DWORD *)(a4 + 104);
          v47 = (uint64_t *)(*(_QWORD *)(a4 + 80) + 24 * v42 + 16);
        }
        else
        {
          v41 = *(_QWORD *)(a4 + 80);
          while (*(_QWORD *)(v41 + 24 * v40 + 8) != v37)
          {
            LODWORD(v40) = *(_DWORD *)(v41 + 24 * v40) & 0x7FFFFFFF;
            if ((_DWORD)v40 == 0x7FFFFFFF)
              goto LABEL_33;
          }
          v47 = (uint64_t *)(v41 + 24 * v40 + 16);
        }
        v48 = *v47;
        *(_QWORD *)(v48 + 8) = *((_QWORD *)a2[1] + 34);
        *(_DWORD *)(v48 + 16) = 115;
        *(_QWORD *)(v48 + 24) = *(_QWORD *)(a3 + 416);
        v92 = 0;
        v91 = 0;
        if ((v48 & 1) == 0
        {
          re::introspect<re::ViewportData>(void)::info = (_UNKNOWN *)re::introspect_ViewportData(0);
        }
        v91 = (re::CameraData *)re::introspect<re::ViewportData>(void)::info;
        v49 = strlen(*((const char **)re::introspect<re::ViewportData>(void)::info + 6));
        if (v49)
        {
          MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::ViewportData>(void)::info + 6), v49, 0, &v93);
          v50 = (v94 - 0x61C8864680B583E9 + (v93 << 6) + (v93 >> 2)) ^ v93;
        }
        else
        {
          v50 = 0;
        }
        v92 = v50;
        re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(v86, &v92, &v91);
        v51 = (v18 + (v92 << 6) + (v92 >> 2)) ^ v92;
        v52 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 32, 8);
        *v52 = &off_24ED73450;
        v52[1] = 0;
        v52[2] = 0;
        v52[3] = 0x3F80000000000000;
        v53 = *(_QWORD *)(a4 + 64);
        if (!v53
          || (v53 = v51 % *(unsigned int *)(a4 + 88),
              v54 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v53),
              (_DWORD)v54 == 0x7FFFFFFF))
        {
LABEL_49:
          v56 = *(unsigned int *)(a4 + 100);
          if ((_DWORD)v56 == 0x7FFFFFFF)
          {
            v56 = *(unsigned int *)(a4 + 96);
            v57 = v56;
            if ((_DWORD)v56 == *(_DWORD *)(a4 + 88))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v82, 2 * *(_DWORD *)(a4 + 92));
              v53 = v51 % *(unsigned int *)(a4 + 88);
              v57 = *(_DWORD *)(a4 + 96);
            }
            *(_DWORD *)(a4 + 96) = v57 + 1;
            v58 = *(_QWORD *)(a4 + 80);
            v59 = *(_DWORD *)(v58 + 24 * v56);
          }
          else
          {
            v58 = *(_QWORD *)(a4 + 80);
            v59 = *(_DWORD *)(v58 + 24 * v56);
            *(_DWORD *)(a4 + 100) = v59 & 0x7FFFFFFF;
          }
          v60 = 24 * v56;
          *(_DWORD *)(v58 + v60) = v59 | 0x80000000;
          *(_DWORD *)(*(_QWORD *)(a4 + 80) + v60) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v56) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v53);
          *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v56 + 8) = v51;
          *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v56 + 16) = v52;
          *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v53) = v56;
          ++*(_DWORD *)(a4 + 92);
          ++*(_DWORD *)(a4 + 104);
          v61 = *(_QWORD *)(a4 + 80) + 24 * v56;
        }
        else
        {
          v55 = *(_QWORD *)(a4 + 80);
          while (*(_QWORD *)(v55 + 24 * v54 + 8) != v51)
          {
            LODWORD(v54) = *(_DWORD *)(v55 + 24 * v54) & 0x7FFFFFFF;
            if ((_DWORD)v54 == 0x7FFFFFFF)
              goto LABEL_49;
          }
          v61 = v55 + 24 * v54;
        }
        v62 = *(_QWORD *)(v61 + 16);
        v63.i64[0] = *(_QWORD *)((char *)v7 + 140);
        v63.i64[1] = *((_QWORD *)v7 + 16);
        *(float32x4_t *)(v62 + 8) = vcvtq_f32_u32(v63);
        *(_QWORD *)(v62 + 24) = 0x3F80000000000000;
        v64 = (unint64_t)"N2re22MeshLodSelectInputDataE";
        if (((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x8000000000000000) != 0)
        {
          v65 = (unsigned __int8 *)((unint64_t)"N2re22MeshLodSelectInputDataE" & 0x7FFFFFFFFFFFFFFFLL);
          v66 = 5381;
          do
          {
            v64 = v66;
            v67 = *v65++;
            v66 = (33 * v66) ^ v67;
          }
          while (v67);
        }
        v93 = (v18 + (v64 << 6) + (v64 >> 2)) ^ v64;
        v68 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a3 + 40) + 32))(*(_QWORD *)(a3 + 40), 160, 16);
        *(_OWORD *)v68 = 0u;
        *(_OWORD *)(v68 + 16) = 0u;
        *(_OWORD *)(v68 + 96) = 0u;
        *(_OWORD *)(v68 + 112) = 0u;
        *(_OWORD *)(v68 + 32) = 0u;
        *(_OWORD *)(v68 + 48) = 0u;
        *(_OWORD *)(v68 + 64) = 0u;
        *(_OWORD *)(v68 + 80) = 0u;
        *(_QWORD *)v68 = &off_24ED77680;
        *(_BYTE *)(v68 + 16) = 1;
        *(_DWORD *)(v68 + 96) = 0;
        *(_OWORD *)(v68 + 100) = xmmword_226117740;
        *(_QWORD *)(v68 + 116) = 0xBDCCCCCD3DCCCCCDLL;
        *(_OWORD *)(v68 + 128) = xmmword_2260E5F40;
        *(_OWORD *)(v68 + 144) = 0u;
        *(_DWORD *)(v68 + 144) = 1;
        v92 = v68;
        v69 = (uint64_t *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v81, &v93, &v92);
        v70 = *v69;
        *(_BYTE *)(v70 + 16) = *((_BYTE *)v7 + 160);
        if (*(_BYTE *)(v70 + 17) || *((_BYTE *)v7 + 161))
        {
          if (!*(_BYTE *)(v70 + 17) || *((_BYTE *)v7 + 161))
          {
            if (!*(_BYTE *)(v70 + 17) && *((_BYTE *)v7 + 161))
              *(_BYTE *)(v70 + 17) = 1;
            *(_BYTE *)(v70 + 18) = *((_BYTE *)v7 + 162);
          }
          else
          {
            *(_BYTE *)(v70 + 17) = 0;
          }
        }
        if (*(_BYTE *)(v70 + 20) || *((_BYTE *)v7 + 164))
        {
          if (!*(_BYTE *)(v70 + 20) || *((_BYTE *)v7 + 164))
          {
            if (!*(_BYTE *)(v70 + 20) && *((_BYTE *)v7 + 164))
              *(_BYTE *)(v70 + 20) = 1;
            *(_DWORD *)(v70 + 24) = *((_DWORD *)v7 + 42);
          }
          else
          {
            *(_BYTE *)(v70 + 20) = 0;
          }
        }
        v71 = *((_OWORD *)v7 + 11);
        v72 = *((_OWORD *)v7 + 12);
        v73 = *((_OWORD *)v7 + 14);
        *(_OWORD *)(v70 + 64) = *((_OWORD *)v7 + 13);
        *(_OWORD *)(v70 + 80) = v73;
        *(_OWORD *)(v70 + 32) = v71;
        *(_OWORD *)(v70 + 48) = v72;
        v74 = *((_OWORD *)v7 + 15);
        v75 = *((_OWORD *)v7 + 16);
        v76 = *((_OWORD *)v7 + 18);
        *(_OWORD *)(v70 + 128) = *((_OWORD *)v7 + 17);
        *(_OWORD *)(v70 + 144) = v76;
        *(_OWORD *)(v70 + 96) = v74;
        *(_OWORD *)(v70 + 112) = v75;
        re::RealityEmitterBase::addSceneDataToDataStore((uint64_t)v69, (uint64_t)a2, v84, a4);
        if ((v88 & 1) != 0)
          v77 = v90;
        else
          v77 = v89;
        v78 = strlen(v77);
        v79 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*(_QWORD *)(a3 + 3824) + 24), v78 + 1, 0);
        memcpy(v79, v77, v78);
        *((_BYTE *)v79 + v78) = 0;
        re::RenderFrame::emitGraph((re::RenderFrame *)a3, "Filter", (const char *)v79);
        if (v87)
        {
          if ((v88 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v87 + 40))();
        }
      }
      v7 = (re::Allocator *)((char *)v7 + 352);
    }
    while (v7 != v83);
  }
}

void re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(uint64_t a1, uint64_t a2, re::RenderFrame *a3, re *a4)
{
  uint64_t v4;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  const char *v14;
  const char *v15;
  unint64_t v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 176);
  if (v4)
  {
    if ((v8 & 1) == 0
    {
      re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityScopeHash = re::hashString((re *)"VisualProxyHighFidelity", v14);
    }
    if ((v9 & 1) == 0
    {
      re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityCombinedScopeHash = re::getCombinedScopeHash(re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityScopeHash, "RenderFrame", v15);
    }
    v10 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>((uint64_t)a4, re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityCombinedScopeHash);
    if (!v10)
    {
      v11 = 0x9E3779B97F4A7C17;
      v12 = re::RealityEmitterBase::emitVisualProxyHighFidelityGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::kVisualProxyHighFidelityScopeHash;
      v13 = strlen(*(const char **)(a2 + 56));
      if (v13)
      {
        MurmurHash3_x64_128(*(_QWORD *)(a2 + 56), v13, 0, v16);
        v11 = ((v16[1] - 0x61C8864680B583E9 + (v16[0] << 6) + (v16[0] >> 2)) ^ v16[0]) - 0x61C8864680B583E9;
      }
      v10 = re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>(a4, ((v12 >> 2) + (v12 << 6) + v11) ^ v12);
    }
    re::DynamicArray<re::ProviderHandle>::operator=(v10 + 8, v4);
    re::RenderFrame::emitGraph(a3, "VisualProxyHighFidelity", *(const char **)(a2 + 56));
  }
}

void re::RealityEmitterBase::emitCameraGraphs(_BYTE *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint8x8_t a7)
{
  uint64_t v8;
  uint64_t v12;
  _BYTE *v13;
  re::RenderGraphManager *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unint64_t i;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v54;
  const re::CameraView *v55;
  uint64_t v56;
  char v57;
  const char *v58;
  unint64_t v59;
  const char *v60;
  unsigned __int8 v61;
  unint64_t v62;
  size_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _anonymous_namespace_ *v67;
  unint64_t v68;
  size_t v69;
  unsigned __int8 v70;
  size_t v71;
  unint64_t v72;
  const char *v73;
  uint64_t v74;
  int v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const char *v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v95;
  re::RenderFrame *v96;
  _BYTE v97[16];
  uint64_t v98;
  char v99;
  void *v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107[5];
  uint64_t v108[3];
  int v109;
  uint64_t v110;
  unsigned __int8 v111;
  __int128 v112;
  char v113;
  uint64_t v114;

  v8 = a4;
  v114 = *MEMORY[0x24BDAC8D0];
  v99 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 88);
  if (!v12)
  {
    if (!a1[496])
      goto LABEL_9;
    v13 = a1 + 496;
    goto LABEL_7;
  }
  v106 = 0xE32A9F87631BCE4ALL;
  v107[0] = (uint64_t)"overdraw:enable";
  re::DebugSettingsManager::getWithErrorCode<BOOL>(v12, &v106, &v99);
  re::StringID::destroyString((re::StringID *)&v106);
  if (v99 == a1[496])
    goto LABEL_9;
  v13 = a1 + 496;
  if (!v99)
  {
LABEL_7:
    v21 = *((_QWORD *)a1 + 31);
    re::StringID::StringID((re::StringID *)v97, (const StringID *)(a1 + 552));
    v98 = *((_QWORD *)a1 + 71);
    re::RenderGraphManager::removeProvider(v21, (uint64_t)v97);
    re::StringID::destroyString((re::StringID *)v97);
    re::ProviderHandle::invalidate((re::ProviderHandle *)(a1 + 552));
    goto LABEL_8;
  }
  v14 = (re::RenderGraphManager *)*((_QWORD *)a1 + 31);
  v15 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)(a1 + 504));
  re::RenderGraphManager::addProviderInternal(v14, "Camera", (const re::RenderGraphProviderBase *)(v15 + 8), 0, 0, (uint64_t)&v106);
  v16 = v106;
  v17 = v107[0];
  v106 = 0;
  v107[0] = (uint64_t)&str_110;
  v18 = *((_QWORD *)a1 + 69);
  *((_QWORD *)a1 + 69) = v16;
  v19 = v16 & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
  v20 = *((_QWORD *)a1 + 70);
  *((_QWORD *)a1 + 70) = v17;
  *(_QWORD *)&v102 = v19;
  *((_QWORD *)&v102 + 1) = v20;
  re::StringID::destroyString((re::StringID *)&v102);
  *((_QWORD *)a1 + 71) = v107[1];
  re::StringID::destroyString((re::StringID *)&v106);
LABEL_8:
  *v13 = v99;
LABEL_9:
  a7.i32[0] = *(_DWORD *)(a3 + 456);
  if (vmovn_s16((int16x8_t)vmovl_u8(a7)).u32[0])
    v22 = 0;
  else
    v22 = (*(_BYTE *)(a3 + 462) | *(_BYTE *)(a3 + 461)) == 0;
  v23 = v22 && *(_BYTE *)(a3 + 460) == 0;
  v93 = a2;
  v95 = a3;
  v96 = (re::RenderFrame *)v8;
  if (!v23)
  {
    v24 = atomic_load((unsigned __int8 *)&qword_25411FC00);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC00))
    {
      qword_25411FBF8 = re::hashString((re *)"DynamicFunctionConstants", v76);
      __cxa_guard_release(&qword_25411FC00);
    }
    v25 = 0x9E3779B97F4A7C17;
    v26 = qword_25411FBF8;
    v27 = strlen(*(const char **)(a3 + 56));
    if (v27)
    {
      MurmurHash3_x64_128(*(_QWORD *)(a3 + 56), v27, 0, &v106);
      v25 = ((v107[0] - 0x61C8864680B583E9 + (v106 << 6) + (v106 >> 2)) ^ v106) - 0x61C8864680B583E9;
    }
    v28 = re::RenderGraphDataStore::tryGet<re::DynamicFunctionConstantsData>(a5, ((v26 >> 2) + (v26 << 6) + v25) ^ v26);
    if (!v28)
    {
      v106 = *(_QWORD *)(v8 + 376);
      LODWORD(v102) = 7;
      v28 = re::RenderGraphDataStore::add<re::DynamicFunctionConstantsData,re::PerFrameAllocator *,int>(a5, ((v26 >> 2) + (v26 << 6) + v25) ^ v26, (uint64_t *)&v106, (int *)&v102);
    }
    a2 = v93;
    if (*(_BYTE *)(a3 + 456))
    {
      v29 = atomic_load((unsigned __int8 *)&qword_25411FC10);
      if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC10))
      {
        qword_25411FC08 = re::hashString((re *)"EnableDynamicLighting", v77);
        __cxa_guard_release(&qword_25411FC10);
      }
      LODWORD(v106) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC08, (int *)&v106);
    }
    if (*(_BYTE *)(a3 + 457))
    {
      v30 = atomic_load((unsigned __int8 *)&qword_25411FC20);
      if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC20))
      {
        qword_25411FC18 = re::hashString((re *)"EnableShadowedDynamicLight", v78);
        __cxa_guard_release(&qword_25411FC20);
      }
      LODWORD(v106) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC18, (int *)&v106);
    }
    if (*(_BYTE *)(a3 + 458))
    {
      v31 = atomic_load((unsigned __int8 *)&qword_25411FC30);
      if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC30))
      {
        qword_25411FC28 = re::hashString((re *)"EnableAREnvProbe", v79);
        __cxa_guard_release(&qword_25411FC30);
      }
      LODWORD(v106) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC28, (int *)&v106);
      v32 = re::RenderGraphDataStore::tryGet<re::ProbeContext>(a5, (int)"ProbeContext", "RenderFrame");
      v33 = atomic_load((unsigned __int8 *)&qword_25411FC40);
      if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC40))
      {
        qword_25411FC38 = re::hashString((re *)"LocalProbeCount", v80);
        __cxa_guard_release(&qword_25411FC40);
      }
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC38, (_DWORD *)(v32 + 24));
      v34 = atomic_load((unsigned __int8 *)&qword_25411FC50);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC50))
      {
        qword_25411FC48 = re::hashString((re *)"GlobalProbeCount", v81);
        __cxa_guard_release(&qword_25411FC50);
      }
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC48, (_DWORD *)(v32 + 28));
      v35 = atomic_load((unsigned __int8 *)&qword_25411FC60);
      if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC60))
      {
        qword_25411FC58 = re::hashString((re *)"EnableCrossBlending", v82);
        __cxa_guard_release(&qword_25411FC60);
      }
      LODWORD(v106) = *(unsigned __int8 *)(v32 + 32);
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC58, (int *)&v106);
    }
    if (*(_BYTE *)(a3 + 459))
    {
      v36 = atomic_load((unsigned __int8 *)&qword_25411FC70);
      if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC70))
      {
        qword_25411FC68 = re::hashString((re *)"EnableVirtualEnvironmentProbes", v83);
        __cxa_guard_release(&qword_25411FC70);
      }
      LODWORD(v106) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC68, (int *)&v106);
    }
    if (*(_BYTE *)(a3 + 460))
    {
      v37 = atomic_load((unsigned __int8 *)&qword_25411FC80);
      if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC80))
      {
        qword_25411FC78 = re::hashString((re *)"PortalClippingMode", v84);
        __cxa_guard_release(&qword_25411FC80);
      }
      LODWORD(v106) = 1;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC78, (int *)&v106);
    }
    if (*(_BYTE *)(a3 + 461))
    {
      v38 = atomic_load((unsigned __int8 *)&qword_25411FC90);
      if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_25411FC90))
      {
        qword_25411FC88 = re::hashString((re *)"EnableIBLRotation", v85);
        __cxa_guard_release(&qword_25411FC90);
      }
      LODWORD(v106) = *(unsigned __int8 *)(a3 + 461);
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC88, (int *)&v106);
    }
    if (*(_BYTE *)(a3 + 462))
    {
      v39 = atomic_load((unsigned __int8 *)&qword_25411FCA0);
      if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_25411FCA0))
      {
        qword_25411FC98 = re::hashString((re *)"EnableIBLBlending", v86);
        __cxa_guard_release(&qword_25411FCA0);
      }
      LODWORD(v106) = *(unsigned __int8 *)(a3 + 462);
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::addOrReplace((_anonymous_namespace_ *)(v28 + 8), &qword_25411FC98, (int *)&v106);
    }
  }
  v92 = *(_QWORD *)(a3 + 184);
  if (v92)
  {
    v90 = *(_QWORD *)(v92 + 40);
    if (v90)
    {
      for (i = 0; i != v90; ++i)
      {
        v41 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v92, i);
        v42 = *(_QWORD *)(v41 + 16);
        if (v42)
        {
          v43 = *(char **)(v41 + 32);
          v44 = 672 * v42;
          do
          {
            if ((a6 & 1) != 0)
            {
              v45 = v95;
              re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraView>((uint64_t)a1, a2, v95, (re::RenderFrame *)v8, a5, "Camera", (const re::CameraView *)v43);
              (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)a1 + 112))(a1, a2, v95, v8, a5, "Camera", v43);
              re::RealityEmitterBase::afterCameraViewHandlerRealityRenderer((uint64_t)a1, v95, (re::RenderFrame *)v8, a5, (uint64_t)v43);
            }
            else
            {
              v45 = v95;
              (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)a1 + 80))(a1, a2, v95, v8, a5, "Camera", v43);
              (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)a1 + 96))(a1, a2, v95, v8, a5, "Camera", v43);
              if (a1[496])
              {
                if ((*((_QWORD *)v43 + 1) & 1) != 0)
                  v46 = (const char *)*((_QWORD *)v43 + 2);
                else
                  v46 = v43 + 9;
                re::RenderFrame::emitGraph((re::RenderFrame *)v8, "OverdrawHeatmap", v46);
              }
              else
              {
                (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, const char *, char *))(*(_QWORD *)a1 + 120))(a1, a2, v95, v8, a5, "Camera", v43);
              }
            }
            ++*(_WORD *)(v45 + 64);
            v43 += 672;
            v44 -= 672;
          }
          while (v44);
        }
      }
    }
  }
  v47 = v95;
  v88 = *(_QWORD *)(v95 + 192);
  if (v88)
  {
    v87 = *(_QWORD *)(v88 + 40);
    if (v87)
    {
      v48 = 0;
      do
      {
        v89 = v48;
        v49 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v88, v48);
        v50 = *(_QWORD *)(v49 + 16);
        if (v50)
        {
          v51 = *(_QWORD *)(v49 + 32);
          v91 = v51 + 1360 * v50;
          do
          {
            v52 = *(unsigned __int8 *)(v51 + 1344);
            if ((re::RenderManager::isProtoStereoRenderingEnabled(*(re::RenderManager **)(v8 + 8)) | a6 ^ 1) == 1
              && v52 == 1)
            {
              if ((a6 & 1) != 0)
              {
                v59 = 0x9E3779B97F4A7C17;
                re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraMultiView>((uint64_t)a1, v93, v47, (re::RenderFrame *)v8, a5, "Camera", (const re::CameraMultiView *)v51);
                re::RealityEmitterBase::cameraViewHandlerCommon<re::CameraMultiView>((uint64_t)a1, (uint64_t)v93, v47, v8, a5, "Camera", v51);
                if ((*(_BYTE *)(v51 + 8) & 1) != 0)
                  v60 = *(const char **)(v51 + 16);
                else
                  v60 = (const char *)(v51 + 9);
                if (!*(_BYTE *)(v51 + 348))
                {
                  v61 = atomic_load((unsigned __int8 *)&qword_25411FCD0);
                  if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_25411FCD0))
                  {
                    MurmurHash3_x64_128((uint64_t)"PostProcess", 11, 0, &v106);
                    qword_25411FCC8 = (v107[0] - 0x61C8864680B583E9 + (v106 << 6) + (v106 >> 2)) ^ v106;
                    __cxa_guard_release(&qword_25411FCD0);
                  }
                  v62 = qword_25411FCC8;
                  v63 = strlen(v60);
                  v65 = 0x9E3779B97F4A7C17;
                  if (v63)
                  {
                    MurmurHash3_x64_128((uint64_t)v60, v63, 0, &v106);
                    v65 = ((v107[0] - 0x61C8864680B583E9 + (v106 << 6) + (v106 >> 2)) ^ v106) - 0x61C8864680B583E9;
                  }
                  v66 = ((v62 >> 2) + (v62 << 6) + v65) ^ v62;
                  re::CameraMultiView::makeViewportPercentDataInstancedMode((re::CameraMultiView *)v51, v64, (uint64_t)&v106);
                  v67 = (_anonymous_namespace_ *)re::RenderGraphDataStore::add<re::ViewportPercentData,re::ViewportPercentData>(a5, v66, (uint64_t)&v106);
                  v102 = xmmword_2260E5F10;
                  v103 = xmmword_2260E5F20;
                  v104 = xmmword_2260E5F40;
                  v105 = xmmword_2260E5D70;
                  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v108, (uint64_t)&v102);
                  v102 = xmmword_2260E5F10;
                  v103 = xmmword_2260E5F20;
                  v104 = xmmword_2260E5F40;
                  v105 = xmmword_2260E5D70;
                  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v108, (uint64_t)&v102);
                  v102 = xmmword_2260E5F10;
                  v103 = xmmword_2260E5F20;
                  v104 = xmmword_2260E5F40;
                  v105 = xmmword_2260E5D70;
                  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v107, (uint64_t)&v102);
                  v102 = xmmword_2260E5F10;
                  v103 = xmmword_2260E5F20;
                  v104 = xmmword_2260E5F40;
                  v105 = xmmword_2260E5D70;
                  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v107, (uint64_t)&v102);
                  v113 = 2;
                  v68 = qword_25411FCC8;
                  v69 = strlen(v60);
                  if (v69)
                  {
                    MurmurHash3_x64_128((uint64_t)v60, v69, 0, (unint64_t *)&v102);
                    v59 = ((*((_QWORD *)&v102 + 1)
                          - 0x61C8864680B583E9
                          + ((_QWORD)v102 << 6)
                          + ((unint64_t)v102 >> 2)) ^ v102)
                        - 0x61C8864680B583E9;
                  }
                  v100 = 0;
                  v101 = 0;
                  if ((v70 & 1) == 0
                  {
                    re::introspect<re::CameraMatrices>(void)::info = (_UNKNOWN *)re::introspect_CameraMatrices(0);
                  }
                  v100 = re::introspect<re::CameraMatrices>(void)::info;
                  v71 = strlen(*((const char **)re::introspect<re::CameraMatrices>(void)::info + 6));
                  if (v71)
                  {
                    MurmurHash3_x64_128(*((_QWORD *)re::introspect<re::CameraMatrices>(void)::info + 6), v71, 0, (unint64_t *)&v102);
                    v72 = (*((_QWORD *)&v102 + 1)
                         - 0x61C8864680B583E9
                         + ((_QWORD)v102 << 6)
                         + ((unint64_t)v102 >> 2)) ^ v102;
                  }
                  else
                  {
                    v72 = 0;
                  }
                  v101 = v72;
                  re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<re::IntrospectionStructure const*&>(a5 + 176, &v101, &v100);
                  *(_QWORD *)&v102 = ((((v68 >> 2) + (v68 << 6) + v59) ^ v68)
                                    - 0x61C8864680B583E9
                                    + (v101 << 6)
                                    + (v101 >> 2)) ^ v101;
                  v74 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a5 + 8) + 32))(*(_QWORD *)(a5 + 8), 144, 16);
                  *(_QWORD *)v74 = &off_24ED73630;
                  re::DynamicArray<re::Matrix4x4<float>>::DynamicArray(v74 + 8, v107);
                  re::DynamicArray<re::Matrix4x4<float>>::DynamicArray(v74 + 48, v108);
                  v75 = v111;
                  *(_BYTE *)(v74 + 96) = v111;
                  if (v75)
                    *(_OWORD *)(v74 + 112) = v112;
                  *(_BYTE *)(v74 + 128) = v113;
                  v100 = (void *)v74;
                  re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(a5 + 64, (unint64_t *)&v102, &v100);
                  re::RenderFrame::emitGraph(v96, "PostProcess", v60);
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v96 + 1) + 104) + 1648) + 16) = 0;
                  if (v108[0])
                  {
                    if (v110)
                      (*(void (**)(void))(*(_QWORD *)v108[0] + 40))();
                    v110 = 0;
                    memset(v108, 0, sizeof(v108));
                    ++v109;
                  }
                  if (v107[0] && v107[4])
                    (*(void (**)(void))(*(_QWORD *)v107[0] + 40))();
                }
              }
              else
              {
                (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 88))(a1, v93, v47, v8, a5, "Camera", v51);
                (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v93, v47, v8, a5, "Camera", v51);
                if (a1[496])
                {
                  if ((*(_QWORD *)(v51 + 8) & 1) != 0)
                    v73 = *(const char **)(v51 + 16);
                  else
                    v73 = (const char *)(v51 + 9);
                  re::RenderFrame::emitGraph((re::RenderFrame *)v8, "OverdrawHeatmap", v73);
                }
                else
                {
                  (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 128))(a1, v93, v47, v8, a5, "Camera", v51);
                }
              }
            }
            else
            {
              v54 = 0;
              v55 = (const re::CameraView *)v51;
              v56 = 1;
              do
              {
                v57 = v54;
                if ((a6 & 1) != 0)
                {
                  re::RealityEmitterBase::beforeCameraViewHandlerCommon<re::CameraView>((uint64_t)a1, v93, v95, v96, a5, "Camera", v55);
                  (*(void (**)(_BYTE *, _QWORD *, uint64_t, re::RenderFrame *, uint64_t, const char *, const re::CameraView *))(*(_QWORD *)a1 + 112))(a1, v93, v95, v96, a5, "Camera", v55);
                  re::RealityEmitterBase::afterCameraViewHandlerRealityRenderer((uint64_t)a1, v95, v96, a5, (uint64_t)v55);
                }
                else
                {
                  (*(void (**)(_BYTE *, _QWORD *, uint64_t, re::RenderFrame *, uint64_t, const char *, const re::CameraView *))(*(_QWORD *)a1 + 80))(a1, v93, v95, v96, a5, "Camera", v55);
                  (*(void (**)(_BYTE *, _QWORD *, uint64_t, re::RenderFrame *, uint64_t, const char *, const re::CameraView *))(*(_QWORD *)a1 + 96))(a1, v93, v95, v96, a5, "Camera", v55);
                  if (a1[496])
                  {
                    if ((*(_QWORD *)(v51 + 8) & 1) != 0)
                      v58 = *(const char **)(v51 + 16);
                    else
                      v58 = (const char *)(v51 + 9);
                    re::RenderFrame::emitGraph(v96, "OverdrawHeatmap", v58);
                  }
                  else
                  {
                    (*(void (**)(_BYTE *, _QWORD *, uint64_t, re::RenderFrame *, uint64_t, const char *, const re::CameraView *))(*(_QWORD *)a1 + 120))(a1, v93, v95, v96, a5, "Camera", v55);
                  }
                }
                v55 = (const re::CameraView *)(v51 + 672 * v56);
                v54 = 1;
                v56 = 2;
              }
              while ((v57 & 1) == 0);
            }
            v47 = v95;
            v8 = (uint64_t)v96;
            ++*(_WORD *)(v95 + 64);
            v51 += 1360;
          }
          while (v51 != v91);
        }
        v48 = v89 + 1;
      }
      while (v89 + 1 != v87);
    }
  }
}

uint64_t re::RealityEmitterBase::addSceneDataToDataStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void (**v9)(re::SceneIndexData *__hidden);
  int v10;
  _QWORD v11[2];

  v7 = *(_QWORD *)(a2 + 56);
  v11[0] = &off_24ED776C0;
  v11[1] = v7;
  re::RenderGraphDataStore::add<re::SceneScope,re::SceneScope>(a4, a3, (uint64_t)v11);
  v9 = &off_24ED77700;
  v10 = *(_DWORD *)(a2 + 440);
  return re::RenderGraphDataStore::add<re::SceneIndexData,re::SceneIndexData>(a4, a3, (uint64_t)&v9);
}

uint64_t re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unint64_t v7;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v7 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v7);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>>(re *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;

  v2 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_34VisualProxyHighFidelityHandlerDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v11 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  v6 = (uint64_t)a1 + 16;
  v7 = re::globalAllocators(a1);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 48, 8);
  v8[4] = 0;
  v8[5] = 0;
  *v8 = &off_24ED83DB0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  *((_DWORD *)v8 + 8) = 0;
  v10 = v8;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v6, (unint64_t *)&v11, &v10);
}

void re::RealityEmitterBase::emitPlanarProjectiveShadowGraph(uint64_t a1, _QWORD *a2, re::RenderFrame *a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  re::RenderFrame *v55;
  unint64_t v56[3];

  v56[2] = *MEMORY[0x24BDAC8D0];
  v7 = atomic_load((unsigned __int8 *)&qword_25411FBE0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25411FBE0))
  {
    qword_25411FBD8 = re::hashString((re *)"ProjectiveShadow", v52);
    __cxa_guard_release(&qword_25411FBE0);
  }
  v8 = a2[2];
  if (v8)
  {
    v9 = a2[3];
    v10 = v9 + 464 * v8;
    v54 = a4 + 64;
    v11 = 1;
    do
    {
      while (1)
      {
        v12 = *(_QWORD *)(v9 + 360);
        if (!v12)
          break;
        v55 = a3;
        v13 = *(_QWORD *)(v9 + 368);
        v14 = v13 + 24 * v12;
        do
        {
          v15 = *(_QWORD *)(v13 + 8);
          if (v15)
          {
            v16 = *(_QWORD *)(v13 + 16);
            v17 = 96 * v15;
            do
            {
              re::BucketArray<re::MeshSceneCollection,16ul>::add(*(_QWORD *)(v9 + 32), v16);
              v16 += 96;
              v17 -= 96;
            }
            while (v17);
          }
          v13 += 24;
        }
        while (v13 != v14);
        v18 = qword_25411FBD8;
        v19 = strlen(*(const char **)(v9 + 56));
        v20 = 0x9E3779B97F4A7C17;
        if (v19)
        {
          MurmurHash3_x64_128(*(_QWORD *)(v9 + 56), v19, 0, v56);
          v20 = ((v56[1] - 0x61C8864680B583E9 + (v56[0] << 6) + (v56[0] >> 2)) ^ v56[0]) - 0x61C8864680B583E9;
        }
        v21 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE";
        if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE" & 0x8000000000000000) != 0)
        {
          v22 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
          v23 = 5381;
          do
          {
            v21 = v23;
            v24 = *v22++;
            v23 = (33 * v23) ^ v24;
          }
          while (v24);
        }
        v25 = ((((v18 >> 2) + (v18 << 6) + v20) ^ v18) - 0x61C8864680B583E9 + (v21 << 6) + (v21 >> 2)) ^ v21;
        v26 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 80, 8);
        *(_QWORD *)v26 = &off_24ED83DF0;
        *(_QWORD *)(v26 + 8) = 0;
        *(_QWORD *)(v26 + 16) = 0;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 8) = *(_QWORD *)(v9 + 352);
        *(_QWORD *)(v9 + 352) = 0;
        *(_QWORD *)(v26 + 16) = *(_QWORD *)(v9 + 360);
        *(_QWORD *)(v9 + 360) = 0;
        v27 = *(_QWORD *)(v26 + 24);
        *(_QWORD *)(v26 + 24) = *(_QWORD *)(v9 + 368);
        *(_QWORD *)(v9 + 368) = v27;
        *(_OWORD *)(v26 + 48) = 0u;
        *(_DWORD *)(v26 + 64) = 0;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_QWORD *)(v26 + 68) = 0x7FFFFFFFLL;
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v26 + 32), (uint64_t *)(v9 + 376));
        v28 = *(_QWORD *)(a4 + 64);
        if (!v28
          || (v28 = v25 % *(unsigned int *)(a4 + 88),
              v29 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v28),
              (_DWORD)v29 == 0x7FFFFFFF))
        {
LABEL_22:
          v31 = *(unsigned int *)(a4 + 100);
          if ((_DWORD)v31 == 0x7FFFFFFF)
          {
            v31 = *(unsigned int *)(a4 + 96);
            v32 = v31;
            if ((_DWORD)v31 == *(_DWORD *)(a4 + 88))
            {
              re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v54, 2 * *(_DWORD *)(a4 + 92));
              v28 = v25 % *(unsigned int *)(a4 + 88);
              v32 = *(_DWORD *)(a4 + 96);
            }
            *(_DWORD *)(a4 + 96) = v32 + 1;
            v33 = *(_QWORD *)(a4 + 80);
            v34 = *(_DWORD *)(v33 + 24 * v31);
          }
          else
          {
            v33 = *(_QWORD *)(a4 + 80);
            v34 = *(_DWORD *)(v33 + 24 * v31);
            *(_DWORD *)(a4 + 100) = v34 & 0x7FFFFFFF;
          }
          v35 = 24 * v31;
          *(_DWORD *)(v33 + v35) = v34 | 0x80000000;
          *(_DWORD *)(*(_QWORD *)(a4 + 80) + v35) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v31) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v28);
          *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v31 + 8) = v25;
          *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v31 + 16) = v26;
          *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v28) = v31;
          ++*(_DWORD *)(a4 + 92);
          ++*(_DWORD *)(a4 + 104);
        }
        else
        {
          v30 = *(_QWORD *)(a4 + 80);
          while (*(_QWORD *)(v30 + 24 * v29 + 8) != v25)
          {
            LODWORD(v29) = *(_DWORD *)(v30 + 24 * v29) & 0x7FFFFFFF;
            if ((_DWORD)v29 == 0x7FFFFFFF)
              goto LABEL_22;
          }
        }
        v11 = 0;
        v9 += 464;
        a3 = v55;
        if (v9 == v10)
          goto LABEL_31;
      }
      v9 += 464;
    }
    while (v9 != v10);
    if ((v11 & 1) != 0)
      return;
LABEL_31:
    v36 = a2[14];
    v37 = atomic_load((unsigned __int8 *)&qword_25411FBF0);
    if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_25411FBF0))
    {
      qword_25411FBE8 = re::getCombinedScopeHash(qword_25411FBD8, "RenderFrame", v53);
      __cxa_guard_release(&qword_25411FBF0);
    }
    v38 = (unint64_t)"N2re28ProjectiveShadowMapDimensionE";
    if (((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x8000000000000000) != 0)
    {
      v39 = (unsigned __int8 *)((unint64_t)"N2re28ProjectiveShadowMapDimensionE" & 0x7FFFFFFFFFFFFFFFLL);
      v40 = 5381;
      do
      {
        v38 = v40;
        v41 = *v39++;
        v40 = (33 * v40) ^ v41;
      }
      while (v41);
    }
    v42 = (qword_25411FBE8 - 0x61C8864680B583E9 + (v38 << 6) + (v38 >> 2)) ^ v38;
    v43 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 8) + 32))(*(_QWORD *)(a4 + 8), 16, 8);
    *v43 = &off_24ED838E8;
    v43[1] = v36;
    v44 = *(_QWORD *)(a4 + 64);
    if (v44)
    {
      v44 = v42 % *(unsigned int *)(a4 + 88);
      v45 = *(unsigned int *)(*(_QWORD *)(a4 + 72) + 4 * v44);
      if ((_DWORD)v45 != 0x7FFFFFFF)
      {
        v51 = *(_QWORD *)(a4 + 80);
        if (*(_QWORD *)(v51 + 24 * v45 + 8) == v42)
        {
LABEL_43:
          re::RenderFrame::emitGraph(a3, "ProjectiveShadow", "RenderFrame");
          return;
        }
        while (1)
        {
          LODWORD(v45) = *(_DWORD *)(v51 + 24 * v45) & 0x7FFFFFFF;
          if ((_DWORD)v45 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v51 + 24 * v45 + 8) == v42)
            goto LABEL_43;
        }
      }
    }
    v46 = *(unsigned int *)(a4 + 100);
    if ((_DWORD)v46 == 0x7FFFFFFF)
    {
      v46 = *(unsigned int *)(a4 + 96);
      v47 = v46;
      if ((_DWORD)v46 == *(_DWORD *)(a4 + 88))
      {
        re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v54, 2 * *(_DWORD *)(a4 + 92));
        LODWORD(v44) = v42 % *(unsigned int *)(a4 + 88);
        v47 = *(_DWORD *)(a4 + 96);
      }
      *(_DWORD *)(a4 + 96) = v47 + 1;
      v48 = *(_QWORD *)(a4 + 80);
      v49 = *(_DWORD *)(v48 + 24 * v46);
    }
    else
    {
      v48 = *(_QWORD *)(a4 + 80);
      v49 = *(_DWORD *)(v48 + 24 * v46);
      *(_DWORD *)(a4 + 100) = v49 & 0x7FFFFFFF;
    }
    v50 = 24 * v46;
    *(_DWORD *)(v48 + v50) = v49 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a4 + 80) + v50) = *(_DWORD *)(*(_QWORD *)(a4 + 80) + 24 * v46) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v44);
    *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v46 + 8) = v42;
    *(_QWORD *)(*(_QWORD *)(a4 + 80) + 24 * v46 + 16) = v43;
    *(_DWORD *)(*(_QWORD *)(a4 + 72) + 4 * v44) = v46;
    ++*(_DWORD *)(a4 + 92);
    ++*(_DWORD *)(a4 + 104);
    goto LABEL_43;
  }
}

void re::RealityEmitterBase::execute(re::RealityEmitterBase *this, re::RenderManager *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  re::ProfilerConfig *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  re *isStatisticCollectionEnabled;
  uint64_t v29;
  uint64_t v30;
  int64x2_t *v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  const char *v35;
  _BYTE v36[16];
  unint64_t v37;

  v4 = mach_absolute_time();
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36, 5089, (uint64_t)a2);
  (*(void (**)(re::RealityEmitterBase *, re::RenderManager *))(*(_QWORD *)this + 56))(this, a2);
  re::RenderGraphEmitterBase::execute(this, a2);
  v5 = *((_QWORD *)a2 + 13);
  if (v5)
    v6 = re::RenderFrameBox::get(v5 + 344, 0xFFFFFFFFFFFFFFFuLL);
  else
    v6 = 0;
  v7 = atomic_load((unsigned __int8 *)&qword_25411FCB0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25411FCB0))
  {
    qword_25411FCA8 = re::getCombinedScopeHash((re *)"RenderFrameContext", "RenderFrame", v35);
    __cxa_guard_release(&qword_25411FCB0);
  }
  v8 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE";
  v9 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x8000000000000000) != 0)
  {
    v10 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v11 = 5381;
    do
    {
      v9 = v11;
      v12 = *v10++;
      v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  v37 = (qword_25411FCA8 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
  v13 = (re::ProfilerConfig *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v6 + 96, (uint64_t *)&v37);
  if (v13 && *(_QWORD *)v13)
  {
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x8000000000000000) != 0)
    {
      v14 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18RenderFrameContextEEE" & 0x7FFFFFFFFFFFFFFFLL);
      v15 = 5381;
      do
      {
        v8 = v15;
        v16 = *v14++;
        v15 = (33 * v15) ^ v16;
      }
      while (v16);
    }
    v37 = (qword_25411FCA8 - 0x61C8864680B583E9 + (v8 << 6) + (v8 >> 2)) ^ v8;
    v13 = (re::ProfilerConfig *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v6 + 96, (uint64_t *)&v37);
    if (v13)
    {
      if (*(_QWORD *)(v6 + 96))
      {
        v17 = v37 % *(unsigned int *)(v6 + 120);
        v18 = *(_QWORD *)(v6 + 104);
        v19 = *(unsigned int *)(v18 + 4 * v17);
        if ((_DWORD)v19 != 0x7FFFFFFF)
        {
          v20 = *(_QWORD *)(v6 + 112);
          if (*(_QWORD *)(v20 + 24 * v19 + 8) == v37)
          {
            *(_DWORD *)(v18 + 4 * v17) = *(_DWORD *)(v20 + 24 * v19) & 0x7FFFFFFF;
LABEL_21:
            v22 = *(_QWORD *)(v6 + 112);
            v23 = (int *)(v22 + 24 * v19);
            v24 = *v23;
            if (*v23 < 0)
            {
              *v23 = v24 & 0x7FFFFFFF;
              v22 = *(_QWORD *)(v6 + 112);
              v24 = *(_DWORD *)(v22 + 24 * v19);
            }
            *(_DWORD *)(v22 + 24 * v19) = *(_DWORD *)(v6 + 132) | v24 & 0x80000000;
            --*(_DWORD *)(v6 + 124);
            v25 = *(_DWORD *)(v6 + 136) + 1;
            *(_DWORD *)(v6 + 132) = v19;
            *(_DWORD *)(v6 + 136) = v25;
          }
          else
          {
            while (1)
            {
              v21 = v19;
              LODWORD(v19) = *(_DWORD *)(v20 + 24 * v19) & 0x7FFFFFFF;
              if ((_DWORD)v19 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v20 + 24 * v19 + 8) == v37)
              {
                *(_DWORD *)(v20 + 24 * v21) = *(_DWORD *)(v20 + 24 * v21) & 0x80000000 | *(_DWORD *)(v20 + 24 * v19) & 0x7FFFFFFF;
                goto LABEL_21;
              }
            }
          }
        }
      }
    }
  }
  v26 = *((_QWORD *)a2 + 13);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 1648);
    if (v27)
    {
      if (!*(_BYTE *)(v27 + 296))
      {
        isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v13);
        if ((_DWORD)isStatisticCollectionEnabled)
        {
          v29 = re::profilerThreadContext(isStatisticCollectionEnabled);
          v30 = mach_absolute_time();
          v31 = *(int64x2_t **)(v29 + 152);
          if (v31)
          {
            v32 = v31[376].u64[0];
            if (v32 >= v30 - v4)
              v32 = v30 - v4;
            v31[376].i64[0] = v32;
            v33 = v31[376].u64[1];
            if (v33 <= v30 - v4)
              v33 = v30 - v4;
            v31[376].i64[1] = v33;
            v34 = vdupq_n_s64(1uLL);
            v34.i64[0] = v30 - v4;
            v31[377] = vaddq_s64(v31[377], v34);
            *(_BYTE *)(v29 + 184) = 0;
          }
        }
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36);
}

uint64_t `anonymous namespace'::getSourceTable(_anonymous_namespace_ *this, const char *a2, const char *a3, const char *a4, re::RenderFrame *a5)
{
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!strcmp((const char *)this, "global"))
    return re::MaterialManager::findTextureTableByName(*(re::MaterialManager **)(*((_QWORD *)a4 + 1) + 24), (const char *)this);
  v9 = 0x9E3779B97F4A7C17;
  v10 = strlen(a2);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)a2, v10, 0, &v26);
    v11 = (v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26;
  }
  else
  {
    v11 = 0;
  }
  v13 = strlen(a3);
  v14 = 0x9E3779B97F4A7C17;
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)a3, v13, 0, &v26);
    v14 = ((v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26) - 0x61C8864680B583E9;
  }
  v15 = ((v11 >> 2) + (v11 << 6) + v14) ^ v11;
  v16 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>((uint64_t)(a4 + 32), v15);
  if (v16)
    goto LABEL_9;
  v18 = re::RenderGraphDataStore::tryGet<re::SceneScope>((uint64_t)(a4 + 32), v15);
  if (!v18)
    goto LABEL_15;
  v19 = atomic_load((unsigned __int8 *)&qword_25411FD10);
  if ((v19 & 1) == 0)
  {
    v23 = v18;
    v25 = __cxa_guard_acquire(&qword_25411FD10);
    v18 = v23;
    if (v25)
    {
      qword_25411FD08 = re::hashString((re *)"SceneIndex", v24);
      __cxa_guard_release(&qword_25411FD10);
      v18 = v23;
    }
  }
  v20 = qword_25411FD08;
  v21 = *(const char **)(v18 + 8);
  v22 = strlen(v21);
  if (v22)
  {
    MurmurHash3_x64_128((uint64_t)v21, v22, 0, &v26);
    v9 = ((v27 - 0x61C8864680B583E9 + (v26 << 6) + (v26 >> 2)) ^ v26) - 0x61C8864680B583E9;
  }
  v16 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>((uint64_t)(a4 + 32), ((v20 >> 2) + (v20 << 6) + v9) ^ v20);
  if (v16)
LABEL_9:
    v17 = *(unsigned int *)(v16 + 8);
  else
LABEL_15:
    v17 = 0;
  return re::MaterialManager::findPerSceneTextureTableByName(*(re::MaterialManager **)(*((_QWORD *)a4 + 1) + 24), (const char *)this, v17);
}

uint64_t re::RenderGraphUpdateMaterialTextureSource::configure(re::RenderGraphUpdateMaterialTextureSource *this, const char *a2, const char *a3, re::RenderFrame *a4, re::RenderFrame *a5)
{
  _anonymous_namespace_ *v6;
  uint64_t result;

  if ((*((_BYTE *)this + 264) & 1) != 0)
    v6 = (_anonymous_namespace_ *)*((_QWORD *)this + 34);
  else
    v6 = (re::RenderGraphUpdateMaterialTextureSource *)((char *)this + 265);
  *((_BYTE *)this + 336) = result != 0;
  return result;
}

void re::RenderGraphUpdateMaterialTextureSource::setup(re::RenderGraphUpdateMaterialTextureSource *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _BYTE v13[8];
  uint64_t v14;

  if (*((_BYTE *)this + 336))
  {
    v5 = *((unsigned int *)this + 80);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = (int *)(*((_QWORD *)this + 38) + 8);
      while (1)
      {
        v8 = *v7;
        v7 += 16;
        if (v8 < 0)
          break;
        if (v5 == ++v6)
        {
          LODWORD(v6) = *((_DWORD *)this + 80);
          break;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if ((_DWORD)v5 != (_DWORD)v6)
    {
      v9 = v6;
      do
      {
        v10 = *((_QWORD *)this + 38);
        memset(v13, 0, 7);
        v14 = 2;
        re::RenderGraphBuilder::read((uint64_t)a2, v10 + (v9 << 6) + 48, (uint64_t)v13);
        if (*((_DWORD *)this + 80) <= (v6 + 1))
          v11 = v6 + 1;
        else
          v11 = *((_DWORD *)this + 80);
        v12 = v6;
        while (1)
        {
          v9 = (v12 + 1);
          if (v11 - 1 == v12)
            break;
          ++v12;
          LODWORD(v6) = v9;
          if ((*(_DWORD *)(*((_QWORD *)this + 38) + (v9 << 6) + 8) & 0x80000000) != 0)
            goto LABEL_18;
        }
        LODWORD(v6) = v11;
LABEL_18:
        ;
      }
      while ((_DWORD)v5 != (_DWORD)v6);
    }
    *((_BYTE *)a2 + 592) = 1;
  }
}

void re::RenderGraphUpdateMaterialTextureSource::execute(re::RenderGraphUpdateMaterialTextureSource *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  const char *v14;
  size_t v15;
  const char *v16;
  uint64_t TextureTableByName;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  id v33;
  _BYTE v34[16];
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 5044, 0);
  if (*((_BYTE *)this + 336))
  {
    v4 = *((_QWORD *)this + 33);
    v5 = (v4 & 1) != 0 ? (const char *)*((_QWORD *)this + 34) : (char *)this + 265;
    if (!strcmp(v5, "global"))
    {
      v8 = (v4 & 1) != 0 ? (const char *)*((_QWORD *)this + 34) : (char *)this + 265;
      TextureTableByName = re::MaterialManager::findTextureTableByName(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), v8);
    }
    else
    {
      v6 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      if (v6)
        goto LABEL_7;
      v9 = re::RenderGraphDataStore::tryGet<re::SceneScope>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
      if (!v9)
        goto LABEL_15;
      v10 = v9;
      v11 = 0x9E3779B97F4A7C17;
      v12 = atomic_load((unsigned __int8 *)&qword_25411FD20);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25411FD20))
      {
        MurmurHash3_x64_128((uint64_t)"SceneIndex", 10, 0, &v35);
        qword_25411FD18 = (v36 - 0x61C8864680B583E9 + (v35 << 6) + (v35 >> 2)) ^ v35;
        __cxa_guard_release(&qword_25411FD20);
      }
      v13 = qword_25411FD18;
      v14 = *(const char **)(v10 + 8);
      v15 = strlen(v14);
      if (v15)
      {
        MurmurHash3_x64_128((uint64_t)v14, v15, 0, &v35);
        v11 = ((v36 - 0x61C8864680B583E9 + (v35 << 6) + (v35 >> 2)) ^ v35) - 0x61C8864680B583E9;
      }
      v6 = re::RenderGraphDataStore::tryGet<re::SceneIndexData>(*((_QWORD *)a2 + 146), ((v13 >> 2) + (v13 << 6) + v11) ^ v13);
      if (v6)
LABEL_7:
        v7 = *(unsigned int *)(v6 + 8);
      else
LABEL_15:
        v7 = 0;
      v16 = (*((_BYTE *)this + 264) & 1) != 0 ? (const char *)*((_QWORD *)this + 34) : (char *)this + 265;
      TextureTableByName = re::MaterialManager::findPerSceneTextureTableByName(*(re::MaterialManager **)(*((_QWORD *)a2 + 1) + 24), v16, v7);
    }
    v18 = (_QWORD *)TextureTableByName;
    v19 = *((unsigned int *)this + 80);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = (int *)(*((_QWORD *)this + 38) + 8);
      while (1)
      {
        v22 = *v21;
        v21 += 16;
        if (v22 < 0)
          break;
        if (v19 == ++v20)
        {
          LODWORD(v20) = *((_DWORD *)this + 80);
          break;
        }
      }
    }
    else
    {
      LODWORD(v20) = 0;
    }
    if ((_DWORD)v19 != (_DWORD)v20)
    {
      v23 = v20;
      do
      {
        v24 = *((_QWORD *)this + 38) + (v23 << 6);
        v25 = v24 + 48;
        if ((*(_BYTE *)(v24 + 24) & 1) != 0)
        {
          v26 = *(char **)(v24 + 32);
          re::RenderGraphContext::metalTexture((uint64_t)a2, v25, 0, 0, &v33);
          if (!v26)
          {
            v27 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_39;
          }
        }
        else
        {
          v26 = (char *)(v24 + 25);
          re::RenderGraphContext::metalTexture((uint64_t)a2, v25, 0, 0, &v33);
        }
        v27 = *v26;
        if (*v26)
        {
          v28 = v26[1];
          if (v28)
          {
            v29 = (unsigned __int8 *)(v26 + 2);
            do
            {
              v27 = 31 * v27 + v28;
              v30 = *v29++;
              v28 = v30;
            }
            while (v30);
          }
          v27 &= ~0x8000000000000000;
        }
LABEL_39:
        v35 = v27;
        re::TextureTable::setTexture(v18, (uint64_t *)&v35, &v33);
        if (v33)

        if (*((_DWORD *)this + 80) <= (v20 + 1))
          v31 = v20 + 1;
        else
          v31 = *((_DWORD *)this + 80);
        while (1)
        {
          v23 = (v20 + 1);
          if (v31 - 1 == (_DWORD)v20)
            break;
          LODWORD(v20) = v20 + 1;
          v32 = v23;
          if ((*(_DWORD *)(*((_QWORD *)this + 38) + (v23 << 6) + 8) & 0x80000000) != 0)
            goto LABEL_48;
        }
        v32 = v31;
LABEL_48:
        LODWORD(v20) = v32;
      }
      while ((_DWORD)v19 != v32);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
}

uint64_t *re::allocInfo_RealityEmitterBase(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411FCD8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411FCD8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411FDE8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411FDF8 = 0;
    qword_25411FE08 = 0;
    qword_25411FE10 = 0xFFFFFFFFLL;
    qword_25411FDE8 = (uint64_t)&off_24ED7DAA8;
    qword_25411FE18 = (uint64_t)"RealityEmitterBase";
    dword_25411FE20 = 0;
    xmmword_25411FE28 = 0u;
    unk_25411FE38 = 0u;
    xmmword_25411FE48 = 0u;
    qword_25411FE58 = 0;
    __cxa_guard_release(&qword_25411FCD8);
  }
  return &qword_25411FDE8;
}

void re::initInfo_RealityEmitterBase(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0xABD03B7E6DF05E1ELL;
  v22[1] = "RealityEmitterBase";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_25411FCE0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411FCE0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphEmitterBase((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphEmitterBase";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411FD78 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "displayWireframe";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x8800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411FD80 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::mtl::introspect_PixelFormat((re::mtl *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "depthFormat";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x8C00000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25411FD88 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::mtl::introspect_PixelFormat((re::mtl *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "stencilFormat";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x9000000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_25411FD90 = v20;
      __cxa_guard_release(&qword_25411FCE0);
    }
  }
  *((_QWORD *)this + 2) = 0x2E800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25411FD78;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

uint64_t re::introspect_RealityEmitterBase(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RealityEmitterBase", (uint64_t (*)(re::internal *))re::allocInfo_RealityEmitterBase, (re::IntrospectionBase *(*)(void))re::initInfo_RealityEmitterBase, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RealityEmitterBase>, this);
}

uint64_t *re::allocInfo_RenderGraphUpdateMaterialTextureSource(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25411FCE8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25411FCE8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411FE60, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25411FE70 = 0;
    qword_25411FE80 = 0;
    qword_25411FE88 = 0xFFFFFFFFLL;
    qword_25411FE60 = (uint64_t)&off_24ED7DAA8;
    qword_25411FE90 = (uint64_t)"RenderGraphUpdateMaterialTextureSource";
    dword_25411FE98 = 0;
    xmmword_25411FEA0 = 0u;
    xmmword_25411FEB0 = 0u;
    xmmword_25411FEC0 = 0u;
    qword_25411FED0 = 0;
    __cxa_guard_release(&qword_25411FCE8);
  }
  return &qword_25411FE60;
}

void re::initInfo_RenderGraphUpdateMaterialTextureSource(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0x5BE3C778DE9B131CLL;
  v17[1] = "RenderGraphUpdateMaterialTextureSource";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_25411FCF0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25411FCF0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25411FD60 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "sourceName";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25411FD68 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v13, v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "targetsToUpdate";
      *(_QWORD *)(v15 + 16) = &qword_25411FD98;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x12000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_25411FD70 = v15;
      __cxa_guard_release(&qword_25411FCF0);
    }
  }
  *((_QWORD *)this + 2) = 0x15800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25411FD60;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphUpdateMaterialTextureSource>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphUpdateMaterialTextureSource>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphUpdateMaterialTextureSource>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphUpdateMaterialTextureSource>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_25411FD58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25411FD58))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_25411FD98);
    qword_25411FD98 = (uint64_t)&off_24ED83E98;
    __cxa_guard_release(&qword_25411FD58);
  }
  if ((_MergedGlobals_447 & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = re::introspect_RenderGraphTargetHandle((re *)1, v4);
    if ((_MergedGlobals_447 & 1) == 0)
    {
      v6 = (uint64_t)v5;
      _MergedGlobals_447 = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25411FD98, 0);
      qword_25411FDA8 = 0x3000000007;
      dword_25411FDB0 = v7;
      word_25411FDB4 = 0;
      *(_QWORD *)&xmmword_25411FDB8 = 0;
      *((_QWORD *)&xmmword_25411FDB8 + 1) = 0xFFFFFFFFLL;
      qword_25411FDC8 = (uint64_t)v3;
      qword_25411FDD0 = 0;
      qword_25411FDD8 = v6;
      qword_25411FDE0 = 0;
      qword_25411FD98 = (uint64_t)&off_24ED83E98;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_25411FD98, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_25411FDB8 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::RenderGraphUpdateMaterialTextureSource>(int a1, int a2, re::RenderGraphNode *this)
{
  _anonymous_namespace_ *v4;
  double result;

  v4 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)this = off_24ED83388;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 32, 0);
  result = 0.0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 40) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 82) = 0;
  *((_BYTE *)this + 336) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphUpdateMaterialTextureSource>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::RenderGraphUpdateMaterialTextureSource>(uint64_t a1)
{
  re::RenderGraphNode *v2;
  _QWORD *v3;
  double result;

  v2 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)a1);
  *(_QWORD *)v2 = off_24ED83388;
  v3 = (_QWORD *)((char *)v2 + 256);
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  re::DynamicString::setCapacity(v3, 0);
  result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphUpdateMaterialTextureSource>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphUpdateMaterialTextureSource(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphUpdateMaterialTextureSource", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphUpdateMaterialTextureSource, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphUpdateMaterialTextureSource, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphUpdateMaterialTextureSource>, this);
}

void re::RenderGraphUpdateMaterialTextureSource::~RenderGraphUpdateMaterialTextureSource(re::RenderGraphUpdateMaterialTextureSource *this)
{
  double v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED83388;
  v2 = re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36);
  v3 = *((_QWORD *)this + 32);
  if (v3)
  {
    if ((*((_BYTE *)this + 264) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 34), v2);
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  double v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED83388;
  v2 = re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36);
  v3 = *((_QWORD *)this + 32);
  if (v3)
  {
    if ((*((_BYTE *)this + 264) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 34), v2);
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::DefaultDepthFormatData::~DefaultDepthFormatData(re::DefaultDepthFormatData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::DefaultStencilFormatData::~DefaultStencilFormatData(re::DefaultStencilFormatData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::UploadMultiSceneConstantsRenderGraphProvider::~UploadMultiSceneConstantsRenderGraphProvider(re::UploadMultiSceneConstantsRenderGraphProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::UploadMultiSceneConstantsRenderGraphProvider::prepareFrame(re::UploadMultiSceneConstantsRenderGraphProvider *this, char *a2, char *a3, re::RenderFrame *a4)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t v13;
  char v14;
  const char *v15;
  int v16;
  re::RenderGraphPersistentResourceManager *v17;
  uint64_t v18;
  uint64_t jj;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t kk;
  unint64_t ScopeHash;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  unint64_t v32[2];
  unint64_t v33[4];
  unint64_t v34[4];
  unint64_t v35[4];
  unint64_t v36[4];
  unint64_t v37[4];
  unint64_t v38[4];
  uint64_t v39;
  BOOL v40;
  unint64_t v41[4];
  uint64_t v42;
  uint64_t v43[4];
  uint64_t v44;
  const char *v45;
  unint64_t v46;
  const char *v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v44 = 0x5216D4B08B8035A8;
  v45 = "TonemapLUTTexture_Current";
  v46 = 0xF0C3C206081611F8;
  v47 = "TonemapLUTTexture_Previous";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v38, &v44, 2);
  for (i = 16; i != -16; i -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + i));
  v44 = 0x667334BF02C73D6CLL;
  v45 = "TonemapLUTTexture0";
  v46 = 0x667334BF02C73D6ELL;
  v47 = "TonemapLUTTexture1";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v37, &v44, 2);
  for (j = 16; j != -16; j -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + j));
  v44 = 0x273652880D147520;
  v45 = "TonemapInverseLUTTexture_Current";
  v46 = 0xBF93FF1EB909C180;
  v47 = "TonemapInverseLUTTexture_Previous";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v36, &v44, 2);
  for (k = 16; k != -16; k -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + k));
  v44 = 0xC36BD034B306F4F4;
  v45 = "TonemapInverseLUTTexture0";
  v46 = 0xC36BD034B306F4F6;
  v47 = "TonemapInverseLUTTexture1";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v35, &v44, 2);
  for (m = 16; m != -16; m -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + m));
  v44 = 0xBEA741F8351B3A5CLL;
  v45 = "ISPTonemapLUTTexture_Current";
  v46 = 0x1640FDB391DBA3C4;
  v47 = "ISPTonemapLUTTexture_Previous";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v34, &v44, 2);
  for (n = 16; n != -16; n -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + n));
  v44 = 0x8C66F49CEF715B38;
  v45 = "ISPTonemapLUTTexture0";
  v46 = 0x8C66F49CEF715B3ALL;
  v47 = "ISPTonemapLUTTexture1";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v33, &v44, 2);
  for (ii = 16; ii != -16; ii -= 16)
    re::StringID::destroyString((re::StringID *)((char *)&v44 + ii));
  if (a3)
  {
    v13 = *a3;
    if (*a3)
    {
      v14 = a3[1];
      if (v14)
      {
        v15 = a3 + 2;
        do
        {
          v13 = 31 * v13 + v14;
          v16 = *(unsigned __int8 *)v15++;
          v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v42 = v13;
  v17 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a4 + 296);
  LOBYTE(v46) = 0;
  HIDWORD(v46) = 1065353216;
  v48 = xmmword_2260FF4D0;
  v47 = (const char *)0xFFFFFFFF00000000;
  v45 = (const char *)132;
  LODWORD(v44) = 2;
  v18 = *((_QWORD *)a4 + 46);
  v43[0] = 0x57914155EAD10A54;
  v43[1] = (uint64_t)"TonemapParamsBuffer_Current";
  v43[2] = 0x9A96EA0C92DFD2CCLL;
  v43[3] = (uint64_t)"TonemapParamsBuffer_Previous";
  re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(v41, v43, 2);
  for (jj = 2; jj != -2; jj -= 2)
    re::StringID::destroyString((re::StringID *)&v43[jj]);
  v21 = v18 & 1;
  if ((int)v18 < 0)
    v21 = -v21;
  v22 = v21;
  if (v21 >= 2)
  {
    re::internal::assertLog((re::internal *)6, v20, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v21, 2);
    _os_crash();
    __break(1u);
  }
  v43[0] = v41[2 * v21] >> 1;
  v39 = 0x7B89B19BECFC8920;
  re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v17, (const re::WeakStringID *)&v42, (const re::WeakStringID *)v43, (const re::WeakStringID *)&v39, a4, (const re::RenderGraphBufferDescription *)&v44, &v40, 0);
  v43[0] = v41[2 * (1 - v22)] >> 1;
  v39 = 0x7B89B19BECFC8921;
  re::RenderGraphPersistentResourceManager::registerPersistentBuffer(v17, (const re::WeakStringID *)&v42, (const re::WeakStringID *)v43, (const re::WeakStringID *)&v39, a4, (const re::RenderGraphBufferDescription *)&v44, &v40, 0);
  for (kk = 2; kk != -2; kk -= 2)
    re::StringID::destroyString((re::StringID *)&v41[kk]);
  re::UploadMultiSceneConstantsRenderGraphProvider::registerTonemappingLUTTextures(a3, a4, (uint64_t)v38, v37);
  re::UploadMultiSceneConstantsRenderGraphProvider::registerTonemappingLUTTextures(a3, a4, (uint64_t)v36, v35);
  re::UploadMultiSceneConstantsRenderGraphProvider::registerTonemappingLUTTextures(a3, a4, (uint64_t)v34, v33);
  v32[0] = 0x286AE258F5FA4B8ELL;
  v32[1] = (unint64_t)"UploadMultiSceneConstantsRenderGraphProvider";
  ScopeHash = re::RenderGraphProviderBase::generateScopeHash(v32, a2, a3);
  for (mm = 2; mm != -2; mm -= 2)
    re::StringID::destroyString((re::StringID *)&v33[mm]);
  for (nn = 2; nn != -2; nn -= 2)
    re::StringID::destroyString((re::StringID *)&v34[nn]);
  for (i1 = 2; i1 != -2; i1 -= 2)
    re::StringID::destroyString((re::StringID *)&v35[i1]);
  for (i2 = 2; i2 != -2; i2 -= 2)
    re::StringID::destroyString((re::StringID *)&v36[i2]);
  for (i3 = 2; i3 != -2; i3 -= 2)
    re::StringID::destroyString((re::StringID *)&v37[i3]);
  for (i4 = 2; i4 != -2; i4 -= 2)
    re::StringID::destroyString((re::StringID *)&v38[i4]);
  return ScopeHash;
}

uint64_t re::UploadMultiSceneConstantsRenderGraphProvider::provide(re::UploadMultiSceneConstantsRenderGraphProvider *this, const char *a2, char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  uint64_t *v8;
  re::RenderGraphNode *v9;
  re::RenderGraphNode *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  char v16;
  const char *v17;
  int v18;
  uint64_t v19;
  re *v20;
  uint64_t *v21;
  re::RenderGraphNode *v22;
  re::RenderGraphNode *v23;
  StringID v25;
  StringID v26;
  StringID v27;
  _QWORD v28[2];
  char v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "UploadMultiSceneConstants", 1uLL);
  v8 = re::globalAllocators(RenderGraph);
  v9 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 320, 8);
  v10 = re::RenderGraphNode::RenderGraphNode(v9, "UploadTonemapConstants");
  *(_QWORD *)v10 = &off_24ED868E0;
  v11 = (_OWORD *)((char *)v10 + 256);
  *((_QWORD *)v10 + 32) = 0;
  *((_QWORD *)v10 + 33) = -1;
  v12 = (_OWORD *)((char *)v10 + 272);
  *((_QWORD *)v10 + 34) = 0;
  *((_QWORD *)v10 + 35) = -1;
  v13 = (_OWORD *)((char *)v10 + 288);
  *((_QWORD *)v10 + 36) = 0;
  *((_QWORD *)v10 + 37) = -1;
  v14 = (_OWORD *)((char *)v10 + 304);
  *((_QWORD *)v10 + 38) = 0;
  *((_QWORD *)v10 + 39) = -1;
  v28[0] = v10;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v28);
  *((_QWORD *)v9 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v9 + 4) = *((_QWORD *)RenderGraph + 12);
  *((_QWORD *)v9 + 6) = *((_QWORD *)RenderGraph + 13);
  if (a3)
  {
    v15 = *a3;
    if (*a3)
    {
      v16 = a3[1];
      if (v16)
      {
        v17 = a3 + 2;
        do
        {
          v15 = 31 * v15 + v16;
          v18 = *(unsigned __int8 *)v17++;
          v16 = v18;
        }
        while (v18);
      }
      v19 = ((v15 & 0x7FFFFFFFFFFFFFFFLL) - 0x64AE335E693A181FLL) ^ 0x2BC8A0AAF568852ALL;
    }
    else
    {
      v19 = 0xB0996C0B63AD62CBLL;
    }
  }
  else
  {
    v19 = 0x30996C0B63AD62CALL;
  }
  v28[1] = -1;
  v29 = 0;
  v30 = 1065353216;
  v31 = 0xFFFFFFFF00000020;
  LODWORD(v28[0]) = 2;
  *(_QWORD *)&v34 = 0x57914155EAD10A54;
  *((_QWORD *)&v34 + 1) = "TonemapParamsBuffer_Current";
  v32 = -1;
  v33 = v19;
  re::StringID::destroyString((re::StringID *)&v34);
  re::RenderFrame::createBuffer(a4, (const re::RenderGraphBufferDescription *)v28, "TonemapParamsBuffer_Current", &v34);
  *v11 = v34;
  *(_QWORD *)&v27.var0 = 0x5216D4B08B8035A8;
  v27.var1 = "TonemapLUTTexture_Current";
  re::UploadMultiSceneConstantsRenderGraphProvider::createTonemappingLUTTexture(v12, &v27, a3, a4);
  re::StringID::destroyString((re::StringID *)&v27);
  *(_QWORD *)&v26.var0 = 0x273652880D147520;
  v26.var1 = "TonemapInverseLUTTexture_Current";
  re::UploadMultiSceneConstantsRenderGraphProvider::createTonemappingLUTTexture(v13, &v26, a3, a4);
  re::StringID::destroyString((re::StringID *)&v26);
  *(_QWORD *)&v25.var0 = 0xBEA741F8351B3A5CLL;
  v25.var1 = "ISPTonemapLUTTexture_Current";
  re::UploadMultiSceneConstantsRenderGraphProvider::createTonemappingLUTTexture(v14, &v25, a3, a4);
  re::StringID::destroyString((re::StringID *)&v25);
  re::RenderGraphNode::configure(v9, a2, a3, a4);
  v21 = re::globalAllocators(v20);
  v22 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 256, 8);
  v23 = re::RenderGraphNode::RenderGraphNode(v22, "UploadMultiSceneConstants");
  *(_QWORD *)v23 = &off_24ED86838;
  v28[0] = v23;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, v28);
  *((_QWORD *)v22 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v22 + 4) = *((_QWORD *)RenderGraph + 12);
  *((_QWORD *)v22 + 6) = *((_QWORD *)RenderGraph + 13);
  return (*(uint64_t (**)(re::RenderGraphNode *, const char *, char *, re::RenderFrame *))(*(_QWORD *)v22 + 80))(v22, a2, a3, a4);
}

void re::UploadMultiSceneConstantsRenderGraphProvider::registerTonemappingLUTTextures(char *a1, re::RenderFrame *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  int v10;
  __int128 v16;
  int v17;
  int v18;
  re::RenderGraphPersistentResourceManager *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _OWORD v25[2];
  int v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;

  if (a1)
  {
    v7 = *a1;
    if (*a1)
    {
      v8 = a1[1];
      if (v8)
      {
        v9 = (unsigned __int8 *)(a1 + 2);
        do
        {
          v7 = 31 * v7 + v8;
          v10 = *v9++;
          v8 = v10;
        }
        while (v10);
      }
      v7 &= ~0x8000000000000000;
    }
  }
  else
  {
    v7 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v35 = v7;
  v26 = -1;
  v27 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v28 = _D0;
  v31 = -1;
  v34 = 0;
  v29 = xmmword_226135530;
  v30 = xmmword_2261959D0;
  *(_QWORD *)&v16 = 0x100000001;
  *((_QWORD *)&v16 + 1) = 0x100000001;
  v25[0] = xmmword_2261959C0;
  v25[1] = v16;
  if (*((int *)a2 + 92) >= 0)
    v17 = *((_DWORD *)a2 + 92) & 1;
  else
    v17 = -(*((_DWORD *)a2 + 92) & 1);
  v18 = v17;
  v32 = 0;
  v33 = 0;
  if (v17 >= 2)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 242, v17, 2);
    _os_crash();
    __break(1u);
  }
  else
  {
    v19 = *(re::RenderGraphPersistentResourceManager **)(*(_QWORD *)a2 + 296);
    v20 = *(_QWORD *)(a3 + 16 * v17) >> 1;
    v22 = *a4 >> 1;
    v23 = v20;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v19, (const re::WeakStringID *)&v35, (const re::WeakStringID *)&v23, (const re::WeakStringID *)&v22, a2, (const re::RenderGraphTargetDescription *)v25, &v24);
    v21 = *(_QWORD *)(a3 + 16 * (1 - v18)) >> 1;
    v22 = a4[2] >> 1;
    v23 = v21;
    re::RenderGraphPersistentResourceManager::registerPersistentTexture(v19, (const re::WeakStringID *)&v35, (const re::WeakStringID *)&v23, (const re::WeakStringID *)&v22, a2, (const re::RenderGraphTargetDescription *)v25, &v24);
  }
}

unint64_t *re::FixedInlineArray<re::StringID,2ul>::FixedInlineArray(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t *v3;
  __int128 v4;
  uint64_t v6;
  unint64_t *v7;

  v3 = a1;
  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = &str_110;
  *(_OWORD *)a1 = v4;
  *((_OWORD *)a1 + 1) = v4;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      v7 = re::StringID::operator=(a1, a2);
      a2 += 2;
      a1 = v7 + 2;
      v6 -= 16;
    }
    while (v6);
  }
  return v3;
}

double re::UploadMultiSceneConstantsRenderGraphProvider::createTonemappingLUTTexture(_OWORD *a1, StringID *a2, char *a3, re::RenderFrame *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  int v11;
  double result;
  __int128 v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  if (a3)
  {
    v7 = 0x9E3779B97F4A7C17;
    v8 = *a3;
    if (*a3)
    {
      v9 = a3[1];
      if (v9)
      {
        v10 = (unsigned __int8 *)(a3 + 2);
        do
        {
          v8 = 31 * v8 + v9;
          v11 = *v10++;
          v9 = v11;
        }
        while (v11);
      }
      v7 = (v8 & 0x7FFFFFFFFFFFFFFFLL) - 0x61C8864680B583E9;
    }
  }
  else
  {
    v7 = 0x1E3779B97F4A7C16;
  }
  v21 = 2;
  v22 = -1;
  v23 = -1;
  v24 = -1;
  v25 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v26 = _D0;
  v27 = xmmword_226135530;
  v28 = xmmword_226135540;
  v29 = -1;
  v30 = -1;
  v32 = 0;
  v20 = 2;
  re::StringID::StringID((re::StringID *)v19, a2);
  v31 = (v7 + (v19[0] >> 3) + (v19[0] >> 1 << 6)) ^ (v19[0] >> 1);
  re::StringID::destroyString((re::StringID *)v19);
  re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)&v20, a2->var1, &v18);
  result = *(double *)&v18;
  *a1 = v18;
  return result;
}

void re::DeformerRenderGraphProvider::~DeformerRenderGraphProvider(re::DeformerRenderGraphProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::DeformerRenderGraphProvider::prepareFrame(re::DeformerRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5[2];

  v5[0] = 0x6EA8672173185DB7;
  v5[1] = (unint64_t)"DeformerRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

_QWORD *re::DeformerRenderGraphProvider::provide(re::DeformerRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  _QWORD v9[3];
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[3];
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "DeformerGraph", 0);
  v5 = re::globalAllocators(RenderGraph);
  v6 = v5[2];
  v12[0] = &off_24ED83570;
  v13 = v6;
  v14 = v12;
  v7 = re::globalAllocators((re *)v5)[2];
  v9[0] = &off_24ED835C8;
  v10 = v7;
  v11 = v9;
  re::RenderGraph::addNode(RenderGraph, "Run Deformers", (uint64_t)v12, (uint64_t)v9);
  if (v11)
  {
    (*(void (**)(_QWORD *))*v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = 0;
  }
  result = v14;
  if (v14)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))*v14)(v14);
    if (v14 != v12)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  }
  return result;
}

void re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 592) = 1;
}

_QWORD *re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED83570;
  return result;
}

_QWORD *re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED83570;
  return result;
}

uint64_t re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphBuilder &,re::RenderGraphDataStore &)#1},void ()(re::RenderGraphBuilder &,re::RenderGraphDataStore &)>::size()
{
  return 16;
}

void re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  re::DrawingManager *v13;
  uint64_t v14;
  uint64_t ReservedCommandBuffer;
  id v16;
  unsigned __int8 v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  re::ns::String *v24;
  unint64_t v25;

  v3 = a2[146];
  v4 = (unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE";
  if (((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperIPNS_21ActiveDeformationDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v25 = (*(_QWORD *)(a2[5] + 48) + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v3 + 16, (uint64_t *)&v25);
  if (v8)
  {
    if (*(_QWORD *)v8)
    {
      v9 = *(_QWORD **)(*(_QWORD *)v8 + 8);
      if (v9[6])
      {
        v10 = *a2;
        v11 = a2[1];
        v12 = *(_QWORD **)(v11 + 40);
        if (!*(_QWORD *)(*a2 + 64))
        {
          v13 = *(re::DrawingManager **)(v11 + 104);
          v14 = *((_QWORD *)v13 + 219);
          ReservedCommandBuffer = re::DrawingManager::createReservedCommandBuffer(v13, v10);
          v16 = *(id *)(ReservedCommandBuffer + 16);
          v17 = atomic_load((unsigned __int8 *)&qword_25411FD00);
          if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25411FD00))
          {
            v24 = re::ns::String::String((re::ns::String *)&qword_25411FCF8, (re::ns *)"DeformerCommandBuffer");
            __cxa_guard_release((__guard *)v24 + 1);
          }
          v18 = (id)qword_25411FCF8;
          objc_msgSend(v16, "setLabel:", v18);

          v19 = *((_QWORD *)v13 + 206);
          if (v19 && (*(_BYTE *)(v19 + 177) & 0x10) != 0)
            re::DrawingManager::configureForProfiling((uint64_t)v13, ReservedCommandBuffer, 2u);
          objc_storeStrong((id *)(*a2 + 64), *(id *)(ReservedCommandBuffer + 16));
          v10 = *a2;
          if (!v14)
          {
            v20 = *(_QWORD *)(v10 + 88);
            if (v20)
            {
              v21 = 16 * v20;
              v22 = (_QWORD *)(*(_QWORD *)(v10 + 104) + 8);
              do
              {
                v23 = *(v22 - 1);
                if (v23)
                  objc_msgSend(*(id *)(*a2 + 64), "encodeWaitForEvent:value:", v23, *v22);
                v22 += 2;
                v21 -= 16;
              }
              while (v21);
              v10 = *a2;
            }
          }
        }
        re::DeformationManager::deform(v12, v10, v9);
      }
    }
  }
}

_QWORD *re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED835C8;
  return result;
}

_QWORD *re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED835C8;
  return result;
}

uint64_t re::internal::Callable<re::DeformerRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)::{lambda(re::RenderGraphContext &)#1},void ()(re::RenderGraphContext &)>::size()
{
  return 16;
}

void re::MipMapGenerationRenderGraphProvider::~MipMapGenerationRenderGraphProvider(re::MipMapGenerationRenderGraphProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::MipMapGenerationRenderGraphProvider::prepareFrame(re::MipMapGenerationRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5[2];

  v5[0] = 0x20BE0F4953CF4189;
  v5[1] = (unint64_t)"MipMapGenerationRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void re::MipMapGenerationRenderGraphProvider::provide(re::MipMapGenerationRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  uint64_t *v8;
  re::RenderGraphNode *v9;
  re::RenderGraphNode *v10;
  uint64_t v11;
  uint64_t v12;
  re::RenderGraphNode *v13;

  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "MipmapGeneration", 1uLL);
  v8 = re::globalAllocators(RenderGraph);
  v9 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 256, 8);
  v10 = re::RenderGraphNode::RenderGraphNode(v9, "MipmapGeneration");
  *(_QWORD *)v10 = &off_24ED85AD8;
  v13 = v10;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v13);
  v11 = *((_QWORD *)RenderGraph + 12);
  v12 = *((_QWORD *)RenderGraph + 13);
  *((_QWORD *)v9 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v9 + 4) = v11;
  *((_QWORD *)v9 + 6) = v12;
  re::RenderGraphNode::configure(v9, a2, a3, a4);
}

void re::BlurGenerationRenderGraphProvider::~BlurGenerationRenderGraphProvider(re::BlurGenerationRenderGraphProvider *this)
{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::BlurGenerationRenderGraphProvider *)((char *)this + 40));
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  uint64_t v2;

  re::AssetHandle::~AssetHandle((re::BlurGenerationRenderGraphProvider *)((char *)this + 40));
  *(_QWORD *)this = off_24ED381E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::BlurGenerationRenderGraphProvider::prepareFrame(re::BlurGenerationRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5[2];

  v5[0] = 0x171CC058D73313EALL;
  v5[1] = (unint64_t)"BlurGenerationRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void re::BlurGenerationRenderGraphProvider::provide(re::BlurGenerationRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  uint64_t *v9;
  re::RenderGraphNode *v10;
  re::RenderGraphNode *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  re::RenderGraphNode *v15;

  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "BlurGeneration", 1uLL);
  v9 = re::globalAllocators(RenderGraph);
  v10 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 304, 8);
  v11 = re::RenderGraphNode::RenderGraphNode(v10, "BlurGeneration");
  *(_QWORD *)v11 = &off_24ED87DE8;
  v12 = (uint64_t *)((char *)v11 + 256);
  *((_OWORD *)v11 + 16) = 0u;
  *((_OWORD *)v11 + 17) = 0u;
  *((_OWORD *)v11 + 18) = 0u;
  v15 = v11;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v15);
  v13 = *((_QWORD *)RenderGraph + 12);
  v14 = *((_QWORD *)RenderGraph + 13);
  *((_QWORD *)v10 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v10 + 4) = v13;
  *((_QWORD *)v10 + 6) = v14;
  re::AssetHandle::operator=(v12, (uint64_t *)this + 5);
  re::RenderGraphBlurGenerationNode::configure((void **)v10, a2, a3, a4);
}

void re::ProbeWriteRenderGraphProvider::~ProbeWriteRenderGraphProvider(re::ProbeWriteRenderGraphProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::ProbeWriteRenderGraphProvider::prepareFrame(re::ProbeWriteRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5[2];

  v5[0] = 0x18F744CEEF88C8BALL;
  v5[1] = (unint64_t)"ProbeWriteRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

uint64_t re::ProbeWriteRenderGraphProvider::provide(re::ProbeWriteRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  uint64_t *v8;
  re::RenderGraphNode *v9;
  re::RenderGraphNode *v10;
  re *v11;
  uint64_t *v12;
  re::RenderGraphNode *v13;
  re::RenderGraphNode *v14;
  re *v15;
  uint64_t *v16;
  re::RenderGraphNode *v17;
  re::RenderGraphNode *v18;
  re *v19;
  uint64_t *v20;
  re::RenderGraphNode *v21;
  re::RenderGraphNode *v22;
  re *v23;
  uint64_t *v24;
  re::RenderGraphNode *v25;
  re::RenderGraphNode *v26;
  re *v27;
  uint64_t *v28;
  re::RenderGraphNode *v29;
  re::RenderGraphNode *v30;
  re::RenderGraphNode *v32;

  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "ProbeWrite", 1uLL);
  v8 = re::globalAllocators(RenderGraph);
  v9 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 264, 8);
  v10 = re::RenderGraphNode::RenderGraphNode(v9, "ProbeClamp");
  *(_QWORD *)v10 = &off_24ED85430;
  *((_QWORD *)v10 + 32) = 0;
  v32 = v10;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((_QWORD *)v9 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v9 + 4) = *((_QWORD *)RenderGraph + 12);
  *((_QWORD *)v9 + 6) = *((_QWORD *)RenderGraph + 13);
  v11 = (re *)re::RenderGraphProbeArrayClampNode::configure((void **)v9, a2, a3, a4);
  v12 = re::globalAllocators(v11);
  v13 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 256, 8);
  v14 = re::RenderGraphNode::RenderGraphNode(v13, "ProbeMipMaps");
  *(_QWORD *)v14 = &off_24ED854D8;
  v32 = v14;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((_QWORD *)v13 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v13 + 4) = *((_QWORD *)RenderGraph + 12);
  *((_QWORD *)v13 + 6) = *((_QWORD *)RenderGraph + 13);
  re::RenderGraphNode::configure(v13, a2, a3, a4);
  v16 = re::globalAllocators(v15);
  v17 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 264, 8);
  v18 = re::RenderGraphNode::RenderGraphNode(v17, "ProbeDiffuseFilter");
  *(_QWORD *)v18 = &off_24ED85628;
  *((_QWORD *)v18 + 32) = 0;
  v32 = v18;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((_QWORD *)v17 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v17 + 4) = *((_QWORD *)RenderGraph + 12);
  *((_QWORD *)v17 + 6) = *((_QWORD *)RenderGraph + 13);
  v19 = (re *)re::RenderGraphProbeArrayDiffuseFilterNode::configure((void **)v17, a2, a3, a4);
  v20 = re::globalAllocators(v19);
  v21 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 264, 8);
  v22 = re::RenderGraphNode::RenderGraphNode(v21, "ProbeSpecularFilter");
  *(_QWORD *)v22 = &off_24ED85580;
  *((_QWORD *)v22 + 32) = 0;
  v32 = v22;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((_QWORD *)v21 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v21 + 4) = *((_QWORD *)RenderGraph + 12);
  *((_QWORD *)v21 + 6) = *((_QWORD *)RenderGraph + 13);
  v23 = (re *)re::RenderGraphProbeArraySpecularFilterNode::configure((void **)v21, a2, a3, a4);
  v24 = re::globalAllocators(v23);
  v25 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 256, 8);
  v26 = re::RenderGraphNode::RenderGraphNode(v25, "ProbeCopy");
  *(_QWORD *)v26 = &off_24ED856D0;
  v32 = v26;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((_QWORD *)v25 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v25 + 4) = *((_QWORD *)RenderGraph + 12);
  *((_QWORD *)v25 + 6) = *((_QWORD *)RenderGraph + 13);
  re::RenderGraphNode::configure(v25, a2, a3, a4);
  v28 = re::globalAllocators(v27);
  v29 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[2] + 32))(v28[2], 264, 8);
  v30 = re::RenderGraphNode::RenderGraphNode(v29, "ProbeLatLong");
  *(_QWORD *)v30 = &off_24ED85778;
  *((_QWORD *)v30 + 32) = 0;
  v32 = v30;
  re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v32);
  *((_QWORD *)v29 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v29 + 4) = *((_QWORD *)RenderGraph + 12);
  *((_QWORD *)v29 + 6) = *((_QWORD *)RenderGraph + 13);
  return re::RenderGraphProbeArrayLatLongNode::configure((void **)v29, a2, a3, a4);
}

void re::CustomPostProcessRenderGraphProvider::~CustomPostProcessRenderGraphProvider(re::CustomPostProcessRenderGraphProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::CustomPostProcessRenderGraphProvider::prepareFrame(re::CustomPostProcessRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5[2];

  v5[0] = 0x41BAFCC672CF692BLL;
  v5[1] = (unint64_t)"CustomPostProcessRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void re::CustomPostProcessRenderGraphProvider::provide(re::CustomPostProcessRenderGraphProvider *this, const char *a2, char *a3, re::RenderFrame *a4)
{
  re *v6;
  BOOL v8;
  unsigned __int8 v9;
  NSObject *v10;
  re *RenderGraph;
  uint64_t *v12;
  _QWORD *v13;
  re::RenderGraphNode *v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE buf[48];
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  re::RenderFrame::tryGetInputTarget(a4, "Color", a3, (double *)&v23);
  re::RenderFrame::tryGetInputTarget(a4, "Depth", a3, (double *)&v21);
  _ZF = (_DWORD)v24 == -1 || HIDWORD(v24) == -1;
  if (_ZF || ((_DWORD)v22 != -1 ? (v8 = HIDWORD(v22) == -1) : (v8 = 1), v8))
  {
    do
      v9 = __ldaxr(re::CustomPostProcessRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)const::__FILE____LINE___logged);
    while (__stlxr(1u, re::CustomPostProcessRenderGraphProvider::provide(char const*,char const*,re::RenderFrame &)const::__FILE____LINE___logged));
    if ((v9 & 1) == 0)
    {
      v10 = *re::graphicsLogObjects(v6);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "provide";
        _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "%s: required targets for custom post processing aren't available incurrent graph.\n", buf, 0xCu);
      }
    }
  }
  else
  {
    RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "CustomPostProcessGraph", 0);
    v12 = re::globalAllocators(RenderGraph);
    v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 256, 8);
    v14 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v13, "CustomPostProcessNode");
    *(_QWORD *)v14 = &off_24ED7F8F8;
    *(_QWORD *)buf = v14;
    re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, buf);
    v13[3] = *((_QWORD *)RenderGraph + 10);
    v13[4] = *((_QWORD *)RenderGraph + 12);
    v13[6] = *((_QWORD *)RenderGraph + 13);
    *(_QWORD *)buf = 3;
    *(_DWORD *)&buf[8] = 2;
    memset(&buf[12], 255, 24);
    buf[36] = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&buf[40] = _D0;
    v26 = xmmword_226135530;
    v27 = xmmword_226135540;
    v28 = -1;
    v29 = xmmword_2260FF4D0;
    v30 = 0;
    re::RenderFrame::createTarget(a4, (const re::RenderGraphTargetDescription *)buf, "CustomPostTarget", &v19);
    *(_QWORD *)buf = 65290051;
    re::RenderFrame::addTargetOutput(a4, (uint64_t *)buf, (double *)&v19, a3);
    *(_QWORD *)buf = v19;
    *(_QWORD *)&buf[8] = v20;
    *(_QWORD *)&buf[16] = 0x100000000;
    *(_OWORD *)&buf[32] = xmmword_2260E5D70;
    LOWORD(v26) = 0;
    *(_QWORD *)((char *)&v26 + 4) = 0;
    re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v13 + 27), (uint64_t)buf);
    *(_QWORD *)buf = v19;
    *(_QWORD *)&buf[8] = v20;
    *(_QWORD *)&buf[16] = 0x500000000;
    *(_OWORD *)&buf[32] = xmmword_2260E5D70;
    LOWORD(v26) = 0;
    *(_QWORD *)((char *)&v26 + 4) = 0;
    re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(v13 + 27), (uint64_t)buf);
    *(_QWORD *)buf = v23;
    *(_QWORD *)&buf[8] = v24;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)&buf[24] = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v13 + 22), (__n128 *)buf);
    *(_QWORD *)buf = v21;
    *(_QWORD *)&buf[8] = v22;
    *(_QWORD *)&buf[16] = 0;
    *(_QWORD *)&buf[24] = 2;
    re::DynamicArray<re::TargetRead>::add((_anonymous_namespace_ *)(v13 + 22), (__n128 *)buf);
  }
}

void re::VisualProxyHighFidelityGraphProvider::~VisualProxyHighFidelityGraphProvider(re::VisualProxyHighFidelityGraphProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::VisualProxyHighFidelityGraphProvider::prepareFrame(re::VisualProxyHighFidelityGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5[2];

  v5[0] = 0x29D9C6F3AFF97BE9;
  v5[1] = (unint64_t)"VisualProxyHighFidelityGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

_QWORD *re::VisualProxyHighFidelityGraphProvider::provide(re::VisualProxyHighFidelityGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  re::RenderGraphNode *v11;

  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "VisualProxyGraph", 1uLL);
  v5 = re::globalAllocators(RenderGraph);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 256, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, "visualProxyHighFidelity");
  *(_QWORD *)v7 = &off_24ED87618;
  v11 = v7;
  result = re::DynamicArray<re::TransitionCondition *>::add(RenderGraph, &v11);
  v9 = *((_QWORD *)RenderGraph + 12);
  v10 = *((_QWORD *)RenderGraph + 13);
  *((_QWORD *)v6 + 3) = *((_QWORD *)RenderGraph + 10);
  *((_QWORD *)v6 + 4) = v9;
  *((_QWORD *)v6 + 6) = v10;
  return result;
}

void re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::operator()(uint64_t a1, const char **a2, const char **a3, uint64_t a4)
{
  char *v5;
  const char *v6;
  size_t v7;
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = (char *)*a2;
  v6 = *a3;
  v7 = strlen(*a2);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)v5, v7, 0, &v15);
    v8 = (unint64_t)&v16[64 * v15 - 0x61C8864680B583E9 + (v15 >> 2)] ^ v15;
  }
  else
  {
    v8 = 0;
  }
  v9 = strlen(v6);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)v6, v9, 0, &v15);
    v10 = ((unint64_t)&v16[64 * v15 - 0x61C8864680B583E9 + (v15 >> 2)] ^ v15) - 0x61C8864680B583E9;
  }
  else
  {
    v10 = 0x9E3779B97F4A7C17;
  }
  v11 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>(a4 + 32, ((v8 >> 2) + (v8 << 6) + v10) ^ v8) + 484);
  v15 = 0x18EDBD623C4C0C58;
  v16 = "ColorTexture";
  v12 = re::RenderGraphProviderBase::generateScopeHash(&v15, v5, v6);
  v13 = 73244475 * ((73244475 * (v11 ^ HIWORD(v11))) ^ ((73244475 * (v11 ^ HIWORD(v11))) >> 16));
  return ((v12 << 6) - 0x61C8864680B583E9 + (v12 >> 2) + (v13 ^ HIWORD(v13))) ^ v12;
}

_QWORD *re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED837A0;
  return result;
}

_QWORD *re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED837A0;
  return result;
}

uint64_t re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_0,unsigned long long ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

void re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::operator()(int a1, const char **a2, const char **a3, re::RenderFrame *this)
{
  const char *v5;
  const char *v6;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[20];
  __int128 v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *a3;
  re::RenderFrame::tryGetInputTarget(this, "Color", 0, (double *)&v20);
  __asm { FMOV            V8.2S, #1.0 }
  if (_ZF)
  {
    *(_QWORD *)v21 = 3;
    *(_DWORD *)&v21[8] = 2;
    *(_QWORD *)&v21[12] = -1;
    *(_QWORD *)&v22 = -1;
    *((_QWORD *)&v22 + 1) = -1;
    v23 = 0;
    v24 = _D8;
    v25 = xmmword_226135530;
    v26 = xmmword_226135540;
    v27 = -1;
    v28 = xmmword_2260FF4D0;
    v29 = 0;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)v21, "Color0", &v19);
    v20 = v19;
  }
  v12 = 0x9E3779B97F4A7C17;
  v13 = strlen(v5);
  if (v13)
  {
    MurmurHash3_x64_128((uint64_t)v5, v13, 0, (unint64_t *)v21);
    v14 = (*(_QWORD *)&v21[8] - 0x61C8864680B583E9 + (*(_QWORD *)v21 << 6) + (*(_QWORD *)v21 >> 2)) ^ *(_QWORD *)v21;
  }
  else
  {
    v14 = 0;
  }
  v15 = strlen(v6);
  if (v15)
  {
    MurmurHash3_x64_128((uint64_t)v6, v15, 0, (unint64_t *)v21);
    v12 = ((*(_QWORD *)&v21[8] - 0x61C8864680B583E9 + (*(_QWORD *)v21 << 6) + (*(_QWORD *)v21 >> 2)) ^ *(_QWORD *)v21)
        - 0x61C8864680B583E9;
  }
  v16 = *(_DWORD *)(re::RenderGraphDataStore::get<re::CameraData>((uint64_t)this + 32, ((v14 >> 2) + (v14 << 6) + v12) ^ v14)+ 484);
  if (v16 >= 2)
  {
    *(_OWORD *)v21 = xmmword_2261959E0;
    *(_DWORD *)&v21[16] = -1;
    LODWORD(v22) = v16;
    *(_QWORD *)((char *)&v22 + 4) = -1;
    HIDWORD(v22) = -1;
    v23 = 0;
    v24 = _D8;
    v25 = xmmword_226135530;
    v26 = xmmword_226135540;
    v27 = -1;
    v28 = xmmword_2260FF4D0;
    v29 = 0;
    re::RenderFrame::createTarget(this, (const re::RenderGraphTargetDescription *)v21, "Color0[MSAA]", &v19);
    *(_OWORD *)v21 = v20;
    v17 = DWORD2(v19);
    *(_DWORD *)(re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)v21)+ 80) = v17;
    v18 = 65290051;
    re::RenderFrame::addTargetOutput(this, &v18, (double *)&v19, 0);
  }
  *(_QWORD *)&v19 = 65290051;
  re::RenderFrame::addTargetOutput(this, (uint64_t *)&v19, (double *)&v20, 0);
}

_QWORD *re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED837F8;
  return result;
}

_QWORD *re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED837F8;
  return result;
}

uint64_t re::internal::Callable<re::RealityEmitterBase::registerCommonProviders(re::RenderGraphManager &,re::AssetService *)::$_1,void ()(char const*,char const*,re::RenderFrame &)>::size()
{
  return 16;
}

void re::IBLContextOverrideScope::~IBLContextOverrideScope(re::IBLContextOverrideScope *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::DynamicOverflowArray<re::DynamicArray<re::CameraView> const**,2ul>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 != a2)
  {
    if (*(_QWORD *)a1)
    {
      if (*(_QWORD *)a2 && *(_QWORD *)a1 != *(_QWORD *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

void re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  re::BucketArray<re::MeshSceneCollection,16ul>::deinit(*a2);
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
}

_QWORD *re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED83890;
  return result;
}

_QWORD *re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED83890;
  return result;
}

uint64_t re::internal::Callable<re::RealityEmitterBase::emitFilterMapGraph(re::RenderSceneContext &,re::RenderFrame &,re::RenderGraphDataStore &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void re::ForceClearData::~ForceClearData(re::ForceClearData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ProjectiveShadowMapDimension::~ProjectiveShadowMapDimension(re::ProjectiveShadowMapDimension *this)
{
  JUMPOUT(0x2276933B8);
}

double re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 64;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  _OWORD *v4;
  double result;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v2 = v1 & 0x7FFFFFFF;
    v4 = (_OWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v2;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 32));
      result = 0.0;
      *v4 = 0u;
      v4[1] = 0u;
    }
  }
  return result;
}

_QWORD *re::RenderGraphDataStoreWrapper<re::RenderFrameContext>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED83940;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)(a1 + 5));
  re::FixedArray<re::RenderSceneContext>::deinit(a1 + 2);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::RenderFrameContext>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED83940;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)(a1 + 5));
  re::FixedArray<re::RenderSceneContext>::deinit(a1 + 2);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderSceneContext::RenderSceneContext(uint64_t a1, re::Allocator *a2)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 50) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  re::DynamicArray<re::ShadowView>::setCapacity((_QWORD *)(a1 + 96), 0);
  ++*(_DWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = a2;
  re::DynamicArray<re::FilterView>::setCapacity((_QWORD *)(a1 + 136), 0);
  ++*(_DWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 176) = 0;
  re::PortalInfo::PortalInfo((re::PortalInfo *)(a1 + 200), a2);
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = a2;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 412) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 376) = 0u;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1 + 376, (uint64_t)a2, 3);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 437) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 455) = 0;
  return a1;
}

_QWORD *re::FixedArray<re::RenderSceneContext>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 0;
      v5 = result[2];
      v6 = 464 * v2;
      do
      {
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v5 + v4 + 376));
        re::FixedArray<re::PlanarReceiverData::Bucket>::deinit((_QWORD *)(v5 + v4 + 352));
        re::BucketArray<unsigned long,4ul>::deinit(v5 + v4 + 256);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v5 + v4 + 256);
        re::BucketArray<unsigned long,4ul>::deinit(v5 + v4 + 200);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v5 + v4 + 200);
        re::DynamicArray<re::FilterView>::deinit(v5 + v4 + 136);
        re::DynamicArray<re::ShadowView>::deinit(v5 + v4 + 96);
        v4 += 464;
      }
      while (v6 != v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::RenderGraphDataPipeData::~RenderGraphDataPipeData(re::RenderGraphDataPipeData *this)
{
  JUMPOUT(0x2276933B8);
}

void re::ProfilerOverlayEnablementData::~ProfilerOverlayEnablementData(re::ProfilerOverlayEnablementData *this)
{
  JUMPOUT(0x2276933B8);
}

unint64_t re::ProfilerOverlayEnablementData::hash(re::ProfilerOverlayEnablementData *this)
{
  unint64_t v1;

  v1 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 8)) ^ ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 8)) >> 27));
  return v1 ^ (v1 >> 31);
}

void re::SceneArrayData::~SceneArrayData(re::SceneArrayData *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 5) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 8);
  }
}

{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 5) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 8);
  }
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphDataStoreWrapper<re::CameraTMData>::~RenderGraphDataStoreWrapper()
{
  JUMPOUT(0x2276933B8);
}

void re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(_anonymous_namespace_ *a1, unint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::resize((__int128 *)a1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = *a2;
  LODWORD(v14) = *a3;
  v17 = *((_QWORD *)a1 + 1) + 16 * (v13 + 16 * v11);
  *(_QWORD *)v17 = *a2;
  *(_DWORD *)(v17 + 8) = v14;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  v19 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v19 >> 31) ^ v19;
}

void re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::resize(__int128 *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v27[48];

  v3 = *((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 3);
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = *((_QWORD *)a1 + 7);
  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v27[16], 0, 32);
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v26, v7, v8);
  v9 = *((_QWORD *)a1 + 2);
  if (v9 >= 0x10)
  {
    v10 = 0;
    v11 = v9 >> 4;
    while (1)
    {
      v12 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v10)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v13 = (unsigned __int16)~v12;
      if (v12 != 0xFFFF)
        break;
      v10 += 16;
      if (!--v11)
        goto LABEL_12;
    }
    v14 = __clz(__rbit64(v13)) + v10;
    while (v14 != -1)
    {
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,void,false>::internalAdd(&v26, *((_QWORD *)a1 + 1) + 16 * v14, *((_QWORD *)a1 + 1) + 16 * v14 + 8);
      v21 = v14 >> 4;
      v9 = *((_QWORD *)a1 + 2);
      if (v14 >> 4 >= v9 >> 4)
        break;
      v22 = __clz(__rbit64((-2 << (v14 & 0xF)) & v13));
      if (v22 >= 0x40)
      {
        v23 = 16 * v21;
        v24 = ~v21 + (v9 >> 4);
        while (v24)
        {
          v13 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v23 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v25 = __clz(__rbit64(v13));
          v23 += 16;
          --v24;
          if (v25 <= 0x3F)
          {
            v14 = v25 + v23;
            goto LABEL_20;
          }
        }
        break;
      }
      v14 = v22 + (v14 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  v15 = *(_QWORD *)&v27[40];
  *(_QWORD *)&v27[40] = *((_QWORD *)a1 + 7);
  v16 = v26;
  v17 = *(_OWORD *)v27;
  v26 = *a1;
  *(_QWORD *)v27 = v9;
  v18 = *(_OWORD *)&v27[16];
  v19 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v27[32];
  *((_QWORD *)a1 + 7) = v15;
  *(_OWORD *)&v27[24] = v19;
  v20 = *(__int128 *)((char *)a1 + 24);
  *a1 = v16;
  a1[1] = v17;
  a1[2] = v18;
  *(_OWORD *)&v27[8] = v20;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&v26);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED83A88;
  v2 = (uint64_t)(a1 + 1);
  re::BucketArray<re::MeshSceneCollection,16ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24ED83A88;
  v1 = (uint64_t)(a1 + 1);
  re::BucketArray<re::MeshSceneCollection,16ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::BucketArray<re::MeshDeformationCollection,4ul>>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED83AC8;
  v2 = (uint64_t)(a1 + 1);
  re::BucketArray<re::MeshDeformationCollection,4ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::BucketArray<re::MeshDeformationCollection,4ul>>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24ED83AC8;
  v1 = (uint64_t)(a1 + 1);
  re::BucketArray<re::MeshDeformationCollection,4ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED83B08;
  v2 = (uint64_t)(a1 + 1);
  re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24ED83B08;
  v1 = (uint64_t)(a1 + 1);
  re::BucketArray<re::DynamicArray<re::VFXScene>,4ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::LightContexts>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED83B48;
  re::LightContext::~LightContext((re::LightContext *)(a1 + 14));
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(a1 + 8);
  re::BucketArray<re::LightContext,16ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::LightContexts>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED83B48;
  re::LightContext::~LightContext((re::LightContext *)(a1 + 14));
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(a1 + 8);
  re::BucketArray<re::LightContext,16ul>::deinit((uint64_t)(a1 + 1));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphDataStoreWrapper<re::TextInfo>::~RenderGraphDataStoreWrapper()
{
  JUMPOUT(0x2276933B8);
}

void re::SimplifiedMeshBufferDeformationIndex::~SimplifiedMeshBufferDeformationIndex(re::SimplifiedMeshBufferDeformationIndex *this)
{
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphDataStoreWrapper<re::ActiveDeformationData *>::~RenderGraphDataStoreWrapper()
{
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphDataStoreWrapper<re::ActiveVFXSimulationData *>::~RenderGraphDataStoreWrapper()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::add<re::ProbeWriteContext,re::ProbeWriteContext>(re *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = (unint64_t)"N2re17ProbeWriteContextE";
  if (((unint64_t)"N2re17ProbeWriteContextE" & 0x8000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((unint64_t)"N2re17ProbeWriteContextE" & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v13 = (a2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  v8 = (uint64_t)a1 + 16;
  v9 = re::globalAllocators(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 312, 8);
  v12 = re::ProbeWriteContext::ProbeWriteContext(v10, a3);
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v8, (unint64_t *)&v13, &v12);
}

void re::CameraArrayData::~CameraArrayData(re::CameraArrayData *this)
{
  re::FixedArray<re::CameraData>::deinit((_QWORD *)this + 1);
}

{
  re::FixedArray<re::CameraData>::deinit((_QWORD *)this + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::FixedArray<re::CameraData>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 528 * v2;
      v6 = 0uLL;
      do
      {
        v7 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(v4 + 272) = 0;
        ++*(_DWORD *)(v4 + 280);
        *(_QWORD *)(v4 + 128) = 0;
        ++*(_DWORD *)(v4 + 136);
        *(_QWORD *)(v4 + 48) = 0;
        ++*(_DWORD *)(v4 + 56);
        if (v7)
        {
          if ((*(_BYTE *)(v4 + 16) & 1) != 0)
          {
            (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v4 + 24), v6);
            v6 = 0uLL;
          }
          *(__n128 *)(v4 + 8) = v6;
          *(__n128 *)(v4 + 24) = v6;
        }
        v4 += 528;
        v5 -= 528;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)*v1 + 40))(*v1, v1[2], v6);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::MultiViewCullModeArrayData::~MultiViewCullModeArrayData(re::MultiViewCullModeArrayData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::ViewportArrayData::~ViewportArrayData(re::ViewportArrayData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::MeshLodSelectInputArrayData::~MeshLodSelectInputArrayData(re::MeshLodSelectInputArrayData *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::MeshNodeFilterData::~MeshNodeFilterData(re::MeshNodeFilterData *this)
{
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED83DB0;
  re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit((uint64_t)(a1 + 1));
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::VisualProxyHighFidelityHandlerData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED83DB0;
  re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::deinit((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

_QWORD *re::RenderGraphDataStoreWrapper<re::PlanarReceiverData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED83DF0;
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 4);
  re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(a1 + 1);
  return a1;
}

void re::RenderGraphDataStoreWrapper<re::PlanarReceiverData>::~RenderGraphDataStoreWrapper(_QWORD *a1)
{
  *a1 = &off_24ED83DF0;
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 4);
  re::FixedArray<re::PlanarReceiverData::Bucket>::deinit(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::DynamicFunctionConstantsData::~DynamicFunctionConstantsData(re::DynamicFunctionConstantsData *this)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8);
}

{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::add<re::CustomPostProcessRenderGraphData>(re *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = (unint64_t)"N2re32CustomPostProcessRenderGraphDataE";
  if (((unint64_t)"N2re32CustomPostProcessRenderGraphDataE" & 0x8000000000000000) != 0)
  {
    v3 = (unsigned __int8 *)((unint64_t)"N2re32CustomPostProcessRenderGraphDataE" & 0x7FFFFFFFFFFFFFFFLL);
    v4 = 5381;
    do
    {
      v2 = v4;
      v5 = *v3++;
      v4 = (33 * v4) ^ v5;
    }
    while (v5);
  }
  v11 = (a2 + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
  v6 = (uint64_t)a1 + 16;
  v7 = re::globalAllocators(a1);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 128, 16);
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)v8 = &off_24ED83E70;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 36) = 0u;
  *(_DWORD *)(v8 + 52) = 0x7FFFFFFF;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  v10 = v8;
  return *(_QWORD *)re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<re::CameraData *>(v6, (unint64_t *)&v11, &v10);
}

void re::CustomPostProcessRenderGraphData::~CustomPostProcessRenderGraphData(re::CustomPostProcessRenderGraphData *this)
{
  *(_QWORD *)this = &off_24ED83E70;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2);

}

{
  *(_QWORD *)this = &off_24ED83E70;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 2);

  JUMPOUT(0x2276933B8);
}

uint64_t re::DynamicArray<re::Matrix4x4<float>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::Matrix4x4<float>>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = -1;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 16;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + (v10 << 6) + 16, *(_QWORD *)(a2 + 16) + (v10 << 6) + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + (v10 << 6) + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = (_QWORD *)(v7 + 48);
        do
        {
          if ((*(_DWORD *)(v11 - 5) & 0x80000000) != 0)
            re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(v11 - 6) % (unint64_t)*(unsigned int *)(a1 + 24), *(v11 - 6), (re::DynamicString *)(v11 - 4), v11);
          v11 += 8;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 6) + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6)) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 16), a4);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16) + (v10 << 6);
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 48) = *a5;
  *(_QWORD *)(v15 + 56) = -1;
  *(_QWORD *)(v15 + 56) = a5[1];
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 64;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

unint64_t re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char v15;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::DynamicString::operator==(v11 + 16, (uint64_t)a2))
      break;
    v9 = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_OWORD *)(v11 + 48) = *(_OWORD *)a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  return v13 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

unint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  unint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v7 = v6 + (v5 << 6);
    if (re::DynamicString::operator==(v7 + 16, a2))
      break;
    v5 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v7 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + ((unint64_t)v10++ << 6) + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 16;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::RenderGraphTargetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::RenderGraphNodeRegistry::~RenderGraphNodeRegistry(re::RenderGraphNodeRegistry *this)
{
  re::RenderGraphNodeRegistry *v1;
  unsigned __int8 v2;
  _QWORD *v3;
  _DWORD *v4;
  _DWORD **v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v1 = this;
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)this)
    {
      re::introspect<re::RenderGraphNode>(void)::info = (_UNKNOWN *)re::introspect_RenderGraphNode(0);
    }
  }
  v3 = (_QWORD *)*((_QWORD *)re::introspect<re::RenderGraphNode>(void)::info + 8);
  v4 = (_DWORD *)*v3;
  if (*(_DWORD *)*v3 != 2)
  {
    v5 = (_DWORD **)(v3 + 1);
    v6 = *((unsigned int *)re::introspect<re::RenderGraphNode>(void)::info + 14) - 1;
    do
    {
      v7 = *v5++;
      v4 = v7;
      --v6;
    }
    while (*v7 != 2);
  }
  *((_QWORD *)v4 + 1) = 0;
  v8 = *((_QWORD *)v1 + 2);
  if (v8)
  {
    v9 = (uint64_t *)*((_QWORD *)v1 + 4);
    v10 = 40 * v8;
    do
    {
      v11 = *v9;
      if (*v9)
      {
        v12 = re::globalAllocators(this);
        this = (re::RenderGraphNodeRegistry *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12[2] + 40))(v12[2], v11);
      }
      *v9 = 0;
      v9 += 5;
      v10 -= 40;
    }
    while (v10);
  }
  re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)v1);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 11);
  re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v1 + 5);
  re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)v1);
}

void re::RenderGraphNodeRegistry::init(re::RenderGraphNodeRegistry *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = re::globalAllocators(this);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[2] + 32))(v1[2], 160, 8);
  re::RenderGraphNodeRegistry::m_instance = re::RenderGraphNodeRegistry::RenderGraphNodeRegistry(v2);
  re::RenderGraphNodeRegistry::registerAllNodeTypes((re::RenderGraphNodeRegistry *)re::RenderGraphNodeRegistry::m_instance);
}

void re::RenderGraphNodeRegistry::registerAllNodeTypes(re::RenderGraphNodeRegistry *this)
{
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::ARSegmentationDilationNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::DebugClusterAABBNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::GenerateClusterAABBNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphBloomNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphTonemapNode>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>(void)::item);
  re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>(void)::item);
}

re *re::internal::destroyPersistent<re::RenderGraphNodeRegistry>(re *result, uint64_t a2, re::RenderGraphNodeRegistry *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::RenderGraphNodeRegistry::~RenderGraphNodeRegistry(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::RenderGraphNodeRegistry *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::RenderGraphNodeRegistry::registerNode(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  int v12;
  re *v13;
  size_t v14;
  uint64_t *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  re *v25;
  _OWORD *v26;
  uint64_t v27;
  std::__shared_mutex_base *v28;
  uint64_t v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  re *v33;
  std::__shared_mutex_base *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  StringID v43;
  unint64_t v44;
  __int128 v45;
  _QWORD *v46;
  __int128 *v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  v5 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v6 = strlen(v5);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)v5, v6, 0, (unint64_t *)&v45);
    v7 = (*((_QWORD *)&v45 + 1) - 0x61C8864680B583E9 + ((_QWORD)v45 << 6) + ((unint64_t)v45 >> 2)) ^ v45;
  }
  else
  {
    v7 = 0;
  }
  v44 = v7;
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
  v9 = v8 ^ (v8 >> 31);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * (v9 % *(unsigned int *)(a1 + 64)));
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v20 = *(_QWORD *)(a1 + 56);
      if (*(_QWORD *)(v20 + 56 * v10 + 16) == v7)
        goto LABEL_48;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v20 + 56 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v20 + 56 * v10 + 16) == v7)
          goto LABEL_48;
      }
    }
  }
  v11 = v4;
  v42 = (**(uint64_t (***)(uint64_t))a2)(a2);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  v13 = (re *)strlen(v5);
  v14 = (size_t)v13 + 1;
  v15 = re::globalAllocators(v13);
  v16 = (void *)(*(uint64_t (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)v15[2] + 32))(v15[2], v14, 0);
  memcpy(v16, v5, v14);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v45, a2);
  if (!*(_QWORD *)(a1 + 40))
  {
    LODWORD(v17) = 0;
    goto LABEL_17;
  }
  v17 = v9 % *(unsigned int *)(a1 + 64);
  v18 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 4 * v17);
  if ((_DWORD)v18 == 0x7FFFFFFF)
  {
LABEL_17:
    v4 = v11;
    goto LABEL_18;
  }
  v19 = *(_QWORD *)(a1 + 56);
  v4 = v11;
  if (*(_QWORD *)(v19 + 56 * v18 + 16) == v7)
    goto LABEL_19;
  while (1)
  {
    LODWORD(v18) = *(_DWORD *)(v19 + 56 * v18 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v18 == 0x7FFFFFFF)
      break;
    if (*(_QWORD *)(v19 + 56 * v18 + 16) == v7)
      goto LABEL_19;
  }
LABEL_18:
  re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1 + 40, v17, v9, &v44, (uint64_t)&v45);
  ++*(_DWORD *)(a1 + 80);
LABEL_19:
  v21 = v47;
  if (v47 == &v45)
  {
    v22 = 4;
    v21 = &v45;
    goto LABEL_23;
  }
  if (v47)
  {
    v22 = 5;
LABEL_23:
    (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
  }
  v23 = strlen((const char *)v16);
  if (v23)
  {
    MurmurHash3_x64_128((uint64_t)v16, v23, 0, (unint64_t *)&v45);
    v24 = (*((_QWORD *)&v45 + 1) - 0x61C8864680B583E9 + ((_QWORD)v45 << 6) + ((unint64_t)v45 >> 2)) ^ v45;
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)&v45 = v16;
  *((_QWORD *)&v45 + 1) = v42;
  v46 = 0;
  v47 = (__int128 *)v24;
  v48 = v12;
  v25 = (re *)re::DynamicArray<re::IntrospectionPolymorphicType>::add((_QWORD *)a1, (uint64_t)&v45);
  *((_QWORD *)&v45 + 1) = 0;
  v26 = v46;
  if (v46)
  {
    v27 = *v46;
    if (*v46)
    {
      if ((v46[1] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v27 + 40))(*v46, v46[2]);
      *v26 = 0u;
      v26[1] = 0u;
    }
    v25 = (re *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v27 + 40))(v27, v26);
  }
  *(_DWORD *)(a1 + 136) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 32);
  v28 = re::introspectionSharedMutex(v25);
  std::__shared_mutex_base::lock(v28);
  v45 = *(_OWORD *)(v42 + 32);
  if (v5)
  {
    v29 = *v5;
    if (*v5)
    {
      v30 = v5[1];
      if (v30)
      {
        v31 = (unsigned __int8 *)(v5 + 2);
        do
        {
          v29 = 31 * v29 + v30;
          v32 = *v31++;
          v30 = v32;
        }
        while (v32);
      }
    }
  }
  else
  {
    v29 = 0;
  }
  *(_QWORD *)&v43.var0 = 2 * v29;
  v43.var1 = v5;
  re::StringID::destroyString((re::StringID *)&v43);
  v34 = re::introspectionSharedMutex(v33);
  std::__shared_mutex_base::unlock(v34);
  v35 = *(_QWORD *)(a1 + 88);
  if (v35)
  {
    v35 = v9 % *(unsigned int *)(a1 + 112);
    v36 = *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * v35);
    if ((_DWORD)v36 != 0x7FFFFFFF)
    {
      v41 = *(_QWORD *)(a1 + 104);
      if (*(_QWORD *)(v41 + 32 * v36 + 16) == v7)
        goto LABEL_48;
      while (1)
      {
        v36 = *(_DWORD *)(v41 + 32 * v36 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v36 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v41 + 32 * v36 + 16) == v7)
          goto LABEL_48;
      }
    }
  }
  v37 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v37 == 0x7FFFFFFF)
  {
    v37 = *(unsigned int *)(a1 + 120);
    v38 = v37;
    if ((_DWORD)v37 == *(_DWORD *)(a1 + 112))
    {
      re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1 + 88, 2 * *(_DWORD *)(a1 + 116));
      LODWORD(v35) = v9 % *(unsigned int *)(a1 + 112);
      v38 = *(_DWORD *)(a1 + 120);
    }
    *(_DWORD *)(a1 + 120) = v38 + 1;
    v39 = *(_QWORD *)(a1 + 104);
    v40 = *(_DWORD *)(v39 + 32 * v37 + 8);
  }
  else
  {
    v39 = *(_QWORD *)(a1 + 104);
    v40 = *(_DWORD *)(v39 + 32 * v37 + 8);
    *(_DWORD *)(a1 + 124) = v40 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v39 + 32 * v37 + 8) = v40 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 104) + 32 * v37 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 32 * v37 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v35);
  *(_QWORD *)(*(_QWORD *)(a1 + 104) + 32 * v37) = v9;
  *(_QWORD *)(*(_QWORD *)(a1 + 104) + 32 * v37 + 16) = v7;
  *(_QWORD *)(*(_QWORD *)(a1 + 104) + 32 * v37 + 24) = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v35) = v37;
  ++*(_DWORD *)(a1 + 116);
  ++*(_DWORD *)(a1 + 128);
LABEL_48:
  os_unfair_lock_unlock(v4);
}

void re::RenderGraphNodeRegistry::registryItem(os_unfair_lock_s *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  os_unfair_lock_s *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;

  v8 = a2;
  v5 = this + 38;
  os_unfair_lock_lock(this + 38);
  v6 = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&this[22], &v8);
  if (v6)
  {
    *(_QWORD *)(a3 + 8) = *v6;
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)a3 = v7;
  os_unfair_lock_unlock(v5);
}

uint64_t re::RenderGraphNodeRegistry::RenderGraphNodeRegistry(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 60) = 0u;
  *(_QWORD *)(this + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(_DWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 124) = 0x7FFFFFFFLL;
  *(_DWORD *)(this + 136) = 0;
  v1 = this + 136;
  *(_QWORD *)(this + 144) = 0;
  *(_DWORD *)(this + 152) = 0;
  v2 = &unk_255825000;
  if ((v3 & 1) == 0)
  {
    v12 = this + 136;
    v13 = this;
    v2 = (_QWORD *)&unk_255825000;
    v11 = v10;
    v1 = v12;
    this = v13;
    if (v11)
    {
      re::introspect<re::RenderGraphNode>(void)::info = (_UNKNOWN *)re::introspect_RenderGraphNode(0);
      v2 = (_QWORD *)&unk_255825000;
      v1 = v12;
      this = v13;
    }
  }
  v4 = v2[267];
  v5 = *(_QWORD **)(v4 + 64);
  v6 = (_DWORD *)*v5;
  if (*(_DWORD *)*v5 != 2)
  {
    v7 = (_DWORD **)(v5 + 1);
    v8 = *(unsigned int *)(v4 + 56) - 1;
    do
    {
      v9 = *v7++;
      v6 = v9;
      --v8;
    }
    while (*v9 != 2);
  }
  *((_QWORD *)v6 + 1) = v1;
  return this;
}

double re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  double result;

  v2 = *a1;
  if (!v2)
    return result;
  v3 = *((unsigned int *)a1 + 8);
  if (!(_DWORD)v3)
    goto LABEL_12;
  v4 = 0;
  for (i = 0; i < v3; ++i)
  {
    v6 = a1[2] + v4;
    v7 = *(_DWORD *)(v6 + 8);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_10;
    *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
    v8 = *(_QWORD **)(v6 + 48);
    if ((_QWORD *)(v6 + 24) == v8)
    {
      v8 = (_QWORD *)(v6 + 24);
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_10;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
    v3 = *((unsigned int *)a1 + 8);
LABEL_10:
    v4 += 56;
  }
  v2 = *a1;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
  *((_DWORD *)a1 + 8) = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FEE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FEE0))
  {
    _MergedGlobals_448 = re::introspect_ARGuidedFilterOcclusionNode(0);
    __cxa_guard_release(&qword_25411FEE0);
  }
  return _MergedGlobals_448;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::typeName()
{
  return "ARGuidedFilterOcclusionNode";
}

void re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84040;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84040;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84040;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 512, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED87D40;
  *((_QWORD *)v7 + 32) = 0;
  *((_QWORD *)v7 + 33) = -1;
  *((_QWORD *)v7 + 34) = 0;
  *((_QWORD *)v7 + 35) = -1;
  *((_QWORD *)v7 + 36) = 0;
  *((_QWORD *)v7 + 37) = -1;
  *((_QWORD *)v7 + 38) = 0;
  *((_QWORD *)v7 + 39) = -1;
  *((_QWORD *)v7 + 40) = 0;
  *((_QWORD *)v7 + 41) = -1;
  *((_QWORD *)v7 + 42) = 0;
  *((_QWORD *)v7 + 43) = -1;
  *((_QWORD *)v7 + 44) = 0;
  *((_QWORD *)v7 + 45) = -1;
  *((_QWORD *)v7 + 46) = 0;
  *((_QWORD *)v7 + 47) = -1;
  *((_QWORD *)v7 + 48) = 0;
  *((_QWORD *)v7 + 49) = -1;
  *((_QWORD *)v7 + 50) = 0;
  *((_QWORD *)v7 + 51) = -1;
  *((_QWORD *)v7 + 52) = 0;
  *((_QWORD *)v7 + 53) = -1;
  *((_QWORD *)v7 + 54) = 0;
  *((_QWORD *)v7 + 55) = -1;
  *((_QWORD *)v7 + 56) = 0;
  *((_QWORD *)v7 + 57) = -1;
  *((_QWORD *)v7 + 58) = 0;
  *((_QWORD *)v7 + 59) = -1;
  *((_QWORD *)v7 + 60) = 0;
  *((_QWORD *)v7 + 61) = -1;
  *((_QWORD *)v7 + 62) = 0;
  *((_QWORD *)v7 + 63) = -1;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARGuidedFilterOcclusionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FEF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FEF0))
  {
    qword_25411FEE8 = re::introspect_ARSegmentationCompositeNode(0);
    __cxa_guard_release(&qword_25411FEF0);
  }
  return qword_25411FEE8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::typeName()
{
  return "ARSegmentationCompositeNode";
}

void re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84108;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84108;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84108;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphFullscreenNode *v6;
  re::RenderGraphFullscreenNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphFullscreenNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 488, 8);
  v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED82830;
  *((_QWORD *)v7 + 57) = 0;
  *((_QWORD *)v7 + 58) = -1;
  *((_QWORD *)v7 + 59) = 0;
  *((_QWORD *)v7 + 60) = -1;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF00);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF00))
  {
    qword_25411FEF8 = re::introspect_ARSegmentationDilationNode(0);
    __cxa_guard_release(&qword_25411FF00);
  }
  return qword_25411FEF8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::typeName()
{
  return "ARSegmentationDilationNode";
}

void re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED841D0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED841D0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED841D0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 304, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED82638;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_QWORD *)v7 + 36) = -1;
  *((_QWORD *)v7 + 37) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDilationNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF10))
  {
    qword_25411FF08 = re::introspect_ARSegmentationDualGuidedFilterNode(0);
    __cxa_guard_release(&qword_25411FF10);
  }
  return qword_25411FF08;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::typeName()
{
  return "ARSegmentationDualGuidedFilterNode";
}

void re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84298;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84298;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84298;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 304, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED82788;
  *((_QWORD *)v7 + 32) = 0;
  *((_QWORD *)v7 + 33) = -1;
  *((_QWORD *)v7 + 34) = 0;
  *((_QWORD *)v7 + 35) = -1;
  *((_QWORD *)v7 + 36) = 0;
  *((_QWORD *)v7 + 37) = -1;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationDualGuidedFilterNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF20);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF20))
  {
    qword_25411FF18 = re::introspect_ARSegmentationGenerateGuideNode(0);
    __cxa_guard_release(&qword_25411FF20);
  }
  return qword_25411FF18;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::typeName()
{
  return "ARSegmentationGenerateGuideNode";
}

void re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84360;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84360;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84360;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 328, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED826E0;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_QWORD *)v7 + 36) = -1;
  *((_QWORD *)v7 + 37) = 0;
  *((_QWORD *)v7 + 38) = -1;
  *((_QWORD *)v7 + 39) = 0;
  *((_QWORD *)v7 + 40) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ARSegmentationGenerateGuideNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF30))
  {
    qword_25411FF28 = re::introspect_ComputeClusterProbeIntersectionNode(0);
    __cxa_guard_release(&qword_25411FF30);
  }
  return qword_25411FF28;
}

uint64_t re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::typeName()
{
  return "ComputeClusterProbeIntersectionNode";
}

void re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84428;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84428;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84428;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  re::RenderGraphNode *v12;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 320, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = off_24ED7FC20;
  v8 = (_QWORD *)((char *)v7 + 280);
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 18) = 0u;
  *((_QWORD *)v7 + 38) = 0;
  re::DynamicString::setCapacity(v8, 0);
  *((_QWORD *)v6 + 39) = 0;
  v12 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v12);
  v9 = a2[12];
  v10 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v9;
  *((_QWORD *)v6 + 6) = v10;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::ComputeClusterProbeIntersectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF40);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF40))
  {
    qword_25411FF38 = re::introspect_DebugClusterAABBNode(0);
    __cxa_guard_release(&qword_25411FF40);
  }
  return qword_25411FF38;
}

uint64_t re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::typeName()
{
  return "DebugClusterAABBNode";
}

void re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED844F0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED844F0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED844F0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 288, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED7FCC8;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DebugClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF50))
  {
    qword_25411FF48 = re::introspect_GenerateClusterAABBNode(0);
    __cxa_guard_release(&qword_25411FF50);
  }
  return qword_25411FF48;
}

uint64_t re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::typeName()
{
  return "GenerateClusterAABBNode";
}

void re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED845B8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED845B8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED845B8;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  re::RenderGraphNode *v12;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 320, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = off_24ED7FB78;
  v8 = (_QWORD *)((char *)v7 + 280);
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 18) = 0u;
  *((_QWORD *)v7 + 38) = 0;
  re::DynamicString::setCapacity(v8, 0);
  *((_QWORD *)v6 + 39) = 0;
  v12 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v12);
  v9 = a2[12];
  v10 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v9;
  *((_QWORD *)v6 + 6) = v10;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::GenerateClusterAABBNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF60))
  {
    qword_25411FF58 = re::introspect_RenderProjectiveMeshShadowPatchesNode(0);
    __cxa_guard_release(&qword_25411FF60);
  }
  return qword_25411FF58;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::typeName()
{
  return "RenderProjectiveMeshShadowPatches";
}

void re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84680;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84680;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84680;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 264, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED805D8;
  *((_WORD *)v7 + 128) = 0;
  *((_BYTE *)v7 + 258) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderProjectiveMeshShadowPatchesNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF70);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF70))
  {
    qword_25411FF68 = re::introspect_RenderGraphARCombinedPostProcessNode(0);
    __cxa_guard_release(&qword_25411FF70);
  }
  return qword_25411FF68;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::typeName()
{
  return "RenderGraphARCombinedPostProcessNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84748;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84748;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84748;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 448, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED858C8;
  *((_QWORD *)v7 + 32) = 0;
  *((_DWORD *)v7 + 66) = 0;
  *((_QWORD *)v7 + 55) = 0;
  *((_QWORD *)v7 + 52) = 0;
  *((_QWORD *)v7 + 53) = 0;
  *((_QWORD *)v7 + 51) = 0;
  *((_DWORD *)v7 + 108) = 0;
  *(_DWORD *)((char *)v7 + 401) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF80);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF80))
  {
    qword_25411FF78 = re::introspect_RenderGraphARUploadPostParams(0);
    __cxa_guard_release(&qword_25411FF80);
  }
  return qword_25411FF78;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::typeName()
{
  return "RenderGraphARUploadPostParams";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84810;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84810;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84810;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  re::RenderGraphNode *v7;
  uint64_t v13;
  uint64_t v14;
  re::RenderGraphNode *v16;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 320, 8);
  v7 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v6, v4);
  *(_QWORD *)v7 = &off_24ED85820;
  *((_WORD *)v7 + 128) = 0;
  *((_BYTE *)v7 + 258) = 0;
  *(_OWORD *)(v6 + 260) = xmmword_2260F4F30;
  *(_OWORD *)(v6 + 276) = xmmword_2260EDC60;
  *((_BYTE *)v7 + 292) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)v7 + 37) = _D0;
  *((_BYTE *)v7 + 304) = 0;
  *(_QWORD *)(v6 + 308) = 0x3F80000000000000;
  *((_BYTE *)v7 + 316) = 0;
  v16 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v16);
  v13 = a2[12];
  v14 = a2[13];
  *(_QWORD *)(v6 + 24) = a2[10];
  *(_QWORD *)(v6 + 32) = v13;
  *(_QWORD *)(v6 + 48) = v14;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphARUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FF90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FF90))
  {
    qword_25411FF88 = re::introspect_RenderGraphBloomNode(0);
    __cxa_guard_release(&qword_25411FF90);
  }
  return qword_25411FF88;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::typeName()
{
  return "RenderGraphBloomNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED848D8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED848D8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED848D8;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphFullscreenNode *v6;
  re::RenderGraphFullscreenNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphFullscreenNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 456, 8);
  v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED801A0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphBloomNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FFA0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FFA0))
  {
    qword_25411FF98 = re::introspect_RenderGraphCombinedPostProcessNode(0);
    __cxa_guard_release(&qword_25411FFA0);
  }
  return qword_25411FF98;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::typeName()
{
  return "RenderGraphCombinedPostProcessNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED849A0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED849A0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED849A0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 464, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED82A70;
  *((_QWORD *)v7 + 32) = 0;
  *((_DWORD *)v7 + 66) = 0;
  *((_QWORD *)v7 + 52) = 0;
  *((_QWORD *)v7 + 53) = 0;
  *((_QWORD *)v7 + 51) = 0;
  *((_DWORD *)v7 + 108) = 0;
  *((_DWORD *)v7 + 100) = 0;
  *((_BYTE *)v7 + 404) = 0;
  *((_QWORD *)v7 + 55) = 0;
  *((_QWORD *)v7 + 56) = 0;
  *((_QWORD *)v7 + 57) = -1;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCombinedPostProcessNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FFB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FFB0))
  {
    qword_25411FFA8 = re::introspect_RenderGraphDofBokehBlurNode(0);
    __cxa_guard_release(&qword_25411FFB0);
  }
  return qword_25411FFA8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::typeName()
{
  return "RenderGraphDofBokehBlurNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84A68;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84A68;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84A68;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphFullscreenNode *v6;
  re::RenderGraphFullscreenNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphFullscreenNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 456, 8);
  v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED7FE18;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofBokehBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FFC0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FFC0))
  {
    qword_25411FFB8 = re::introspect_RenderGraphDofCompositeNode(0);
    __cxa_guard_release(&qword_25411FFC0);
  }
  return qword_25411FFB8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::typeName()
{
  return "RenderGraphDofCompositeNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84B30;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84B30;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84B30;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphFullscreenNode *v6;
  re::RenderGraphFullscreenNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphFullscreenNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 528, 8);
  v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED7FEC0;
  *((_QWORD *)v7 + 57) = 0;
  *((_QWORD *)v7 + 58) = 0;
  *((_OWORD *)v7 + 30) = 0u;
  *((_OWORD *)v7 + 31) = 0u;
  *((_OWORD *)v7 + 32) = 0u;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofCompositeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FFD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FFD0))
  {
    qword_25411FFC8 = re::introspect_RenderGraphDofSetupNode(0);
    __cxa_guard_release(&qword_25411FFD0);
  }
  return qword_25411FFC8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::typeName()
{
  return "RenderGraphDofSetupNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84BF8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84BF8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84BF8;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphFullscreenNode *v6;
  re::RenderGraphFullscreenNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphFullscreenNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 576, 8);
  v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED7FD70;
  *((_QWORD *)v7 + 58) = 0;
  *((_QWORD *)v7 + 59) = 0;
  *((_QWORD *)v7 + 57) = 0;
  *(_OWORD *)((char *)v7 + 504) = 0u;
  *(_OWORD *)((char *)v7 + 520) = 0u;
  *(_OWORD *)((char *)v7 + 536) = 0u;
  *(_OWORD *)((char *)v7 + 552) = 0u;
  *((_QWORD *)v7 + 71) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDofSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FFE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FFE0))
  {
    qword_25411FFD8 = re::introspect_RenderGraphDownsampleBlur(0);
    __cxa_guard_release(&qword_25411FFE0);
  }
  return qword_25411FFD8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::typeName()
{
  return "RenderGraphDownsampleBlur";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84CC0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84CC0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84CC0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 320, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED800F8;
  *((_QWORD *)v7 + 32) = 0;
  *((_QWORD *)v7 + 33) = -1;
  *((_OWORD *)v7 + 17) = 0u;
  *((_OWORD *)v7 + 18) = 0u;
  *((_QWORD *)v7 + 38) = -1;
  *((_QWORD *)v7 + 39) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleBlur>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25411FFF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25411FFF0))
  {
    qword_25411FFE8 = re::introspect_RenderGraphDownsampleThresholdNode(0);
    __cxa_guard_release(&qword_25411FFF0);
  }
  return qword_25411FFE8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::typeName()
{
  return "RenderGraphDownsampleThresholdNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84D88;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84D88;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84D88;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 288, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED80050;
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDownsampleThresholdNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254120000);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254120000))
  {
    qword_25411FFF8 = re::introspect_RenderGraphMotionBlurNode(0);
    __cxa_guard_release(&qword_254120000);
  }
  return qword_25411FFF8;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::typeName()
{
  return "RenderGraphMotionBlurNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84E50;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84E50;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84E50;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphFullscreenNode *v6;
  re::RenderGraphFullscreenNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphFullscreenNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 600, 8);
  v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED82EE8;
  *(_OWORD *)((char *)v7 + 456) = 0u;
  *(_OWORD *)((char *)v7 + 472) = 0u;
  *((_QWORD *)v7 + 61) = 0x3C3C888F86;
  *(_OWORD *)((char *)v7 + 504) = 0u;
  *(_OWORD *)((char *)v7 + 520) = 0u;
  *(_OWORD *)((char *)v7 + 536) = 0u;
  *(_OWORD *)((char *)v7 + 552) = 0u;
  *(_OWORD *)((char *)v7 + 568) = 0u;
  *(_OWORD *)((char *)v7 + 584) = 0u;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMotionBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254120010);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254120010))
  {
    qword_254120008 = re::introspect_RenderGraphTonemapNode(0);
    __cxa_guard_release(&qword_254120010);
  }
  return qword_254120008;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::typeName()
{
  return "RenderGraphTonemapNode";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84F18;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84F18;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84F18;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  re::RenderGraphFullscreenNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphFullscreenNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 520, 8);
  v7 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode((re::RenderGraphFullscreenNode *)v6, v4);
  *(_QWORD *)v7 = &off_24ED86CD8;
  *(_OWORD *)(v6 + 456) = xmmword_2260F4F30;
  *(_OWORD *)(v6 + 472) = xmmword_2260EDC60;
  *((_BYTE *)v7 + 488) = 0;
  *(_QWORD *)(v6 + 492) = 0x3F8000003F800000;
  *((_BYTE *)v7 + 500) = 0;
  *((_QWORD *)v7 + 63) = 0x3F80000000000000;
  *((_BYTE *)v7 + 512) = 0;
  *((_BYTE *)v7 + 516) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *(_QWORD *)(v6 + 24) = a2[10];
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 48) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTonemapNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254120020);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254120020))
  {
    qword_254120018 = re::introspect_RenderGraphUpdateMaterialTextureSource(0);
    __cxa_guard_release(&qword_254120020);
  }
  return qword_254120018;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::typeName()
{
  return "UpdateMaterialTextureSource";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED84FE0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED84FE0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED84FE0;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  re::RenderGraphNode *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 344, 8);
  v7 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v6, v4);
  *(_QWORD *)v7 = off_24ED83388;
  v8 = (_QWORD *)((char *)v7 + 256);
  *((_OWORD *)v7 + 16) = 0u;
  *((_OWORD *)v7 + 17) = 0u;
  re::DynamicString::setCapacity(v8, 0);
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_QWORD *)(v6 + 320) = 0x7FFFFFFF00000000;
  *(_DWORD *)(v6 + 328) = 0;
  *(_BYTE *)(v6 + 336) = 0;
  v12 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v12);
  v9 = a2[12];
  v10 = a2[13];
  *(_QWORD *)(v6 + 24) = a2[10];
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 48) = v10;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUpdateMaterialTextureSource>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254120030);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254120030))
  {
    qword_254120028 = re::introspect_RenderGraphUploadBloomParams(0);
    __cxa_guard_release(&qword_254120030);
  }
  return qword_254120028;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::typeName()
{
  return "RenderGraphUploadBloomParams";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED850A8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED850A8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED850A8;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 272, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED7FFA8;
  *((_QWORD *)v7 + 32) = 0x3F8000003E800000;
  *((_QWORD *)v7 + 33) = 0x13F800000;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadBloomParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254120040);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254120040))
  {
    qword_254120038 = re::introspect_RenderGraphUploadPostParams(0);
    __cxa_guard_release(&qword_254120040);
  }
  return qword_254120038;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::typeName()
{
  return "RenderGraphUploadPostParams";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED85170;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED85170;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED85170;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  re::RenderGraphNode *v7;
  uint64_t v13;
  uint64_t v14;
  re::RenderGraphNode *v16;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 336, 8);
  v7 = re::RenderGraphNode::RenderGraphNode((re::RenderGraphNode *)v6, v4);
  *(_QWORD *)v7 = &off_24ED829C8;
  *((_DWORD *)v7 + 64) = 0;
  *(_OWORD *)(v6 + 260) = xmmword_2260F4F30;
  *(_OWORD *)(v6 + 276) = xmmword_2260EDC60;
  *((_BYTE *)v7 + 292) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)v7 + 37) = _D0;
  *((_BYTE *)v7 + 304) = 0;
  *(_QWORD *)(v6 + 308) = 0x3F80000000000000;
  *((_BYTE *)v7 + 316) = 0;
  *((_QWORD *)v7 + 40) = 0x3F8000003E800000;
  *((_QWORD *)v7 + 41) = 0x13F800000;
  v16 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v16);
  v13 = a2[12];
  v14 = a2[13];
  *(_QWORD *)(v6 + 24) = a2[10];
  *(_QWORD *)(v6 + 32) = v13;
  *(_QWORD *)(v6 + 48) = v14;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphUploadPostParams>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

void re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v30, v13, v12);
          v15 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v30[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 56;
            }
            while (v21 < v20);
          }
          re::HashTable<unsigned long,std::function<re::RenderGraphNode & ()(re::RenderGraph &,char const*)>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 56 * v9 + 8) = v24 | 0x80000000;
  v26 = a2;
  v27 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(v27 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 16) = *a4;
  v29 = *(_QWORD *)(a5 + 24);
  if (v29)
  {
    if (v29 == a5)
    {
      v28 = *(_QWORD *)(a1 + 16) + 56 * v9 + 24;
      *(_QWORD *)(v28 + 24) = v28;
      (*(void (**)(_QWORD))(**(_QWORD **)(a5 + 24) + 24))(*(_QWORD *)(a5 + 24));
      v27 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 48) = v29;
      *(_QWORD *)(a5 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 48) = 0;
  }
  *(_DWORD *)(v27 + 4 * v26) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::GenerateProjectiveShadowMapNode::execute(const char **this, re::RenderGraphContext *a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  re::Allocator *v8;
  uint64_t v9;
  const char **v10;
  const char *v16;
  size_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  re::RenderGraphContext **v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t PassTechniqueMapping;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  const char *v89;
  const char *v90;
  NSObject *v91;
  uint64_t v92;
  re *v93;
  const char *v94;
  const char *v95;
  const char **v97;
  const char **v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  unsigned int *v103;
  _QWORD *v104;
  re::RenderGraphContext *v105;
  uint64_t v106;
  float32x4_t *v107;
  uint64_t v108;
  uint64_t v109;
  float32x4_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  re::DrawTable *v121;
  re::Allocator *v122;
  _DWORD *v123;
  _DWORD *v124;
  _DWORD *v125;
  float32x4_t *v126;
  re::RenderGraphContext *v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  int v134;
  uint64_t v135[9];
  _BYTE v136[48];
  _BYTE v137[48];
  uint64_t v138;
  char v139;
  _OWORD v140[4];
  uint8_t buf[16];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  _DWORD v152[7];
  __int16 v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"arProjectiveShadowTechnique", 27, 0, (unint64_t *)buf);
  v3 = *(_QWORD *)buf;
  v4 = *(_QWORD *)&buf[8];
  v5 = atomic_load((unsigned __int8 *)&qword_254120050);
  if ((v5 & 1) == 0)
  {
    v93 = (re *)__cxa_guard_acquire(&qword_254120050);
    if ((_DWORD)v93)
    {
      _MergedGlobals_449 = re::getCombinedScopeHash(v93, v94, v95);
      __cxa_guard_release(&qword_254120050);
    }
  }
  v6 = re::RenderGraphDataStore::tryGet<re::SceneArrayData>(*((_QWORD *)a2 + 146), _MergedGlobals_449);
  if (!v6)
  {
    v91 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v91, OS_LOG_TYPE_DEFAULT, "GenerateProjectiveShadowMapNode::execute: Missing SceneArrayData. Skipping node execution.", buf, 2u);
    }
    return;
  }
  v7 = v6;
  v8 = *(re::Allocator **)(*(_QWORD *)a2 + 24);
  v121 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, 328, 8);
  v122 = v8;
  re::DrawTable::DrawTable(v121, v8);
  v9 = *(_QWORD *)(v7 + 24);
  if (!v9)
    goto LABEL_91;
  v10 = *(const char ***)(v7 + 40);
  v97 = &v10[v9];
  v120 = (v4 + (v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9) ^ v3;
  __asm { FMOV            V9.2S, #1.0 }
  v127 = a2;
  do
  {
    v98 = v10;
    v16 = *v10;
    v17 = strlen(*v10);
    if (v17)
    {
      MurmurHash3_x64_128((uint64_t)v16, v17, 0, (unint64_t *)buf);
      v18 = (*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
    }
    else
    {
      v18 = 0;
    }
    v19 = atomic_load((unsigned __int8 *)&qword_254120060);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254120060))
    {
      qword_254120058 = re::hashString((re *)"ProjectiveShadow", v89);
      __cxa_guard_release(&qword_254120060);
    }
    v20 = *((_QWORD *)a2 + 146);
    v21 = (unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE";
    if (((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE" & 0x8000000000000000) != 0)
    {
      v22 = (unsigned __int8 *)((unint64_t)"N2re27RenderGraphDataStoreWrapperINS_18PlanarReceiverDataEEE" & 0x7FFFFFFFFFFFFFFFLL);
      v23 = 5381;
      do
      {
        v21 = v23;
        v24 = *v22++;
        v23 = (33 * v23) ^ v24;
      }
      while (v24);
    }
    v25 = v18 - 0x61C8864680B583E9;
    *(_QWORD *)buf = (((v25 + (qword_254120058 << 6) + ((unint64_t)qword_254120058 >> 2)) ^ qword_254120058)
                    - 0x61C8864680B583E9
                    + (v21 << 6)
                    + (v21 >> 2)) ^ v21;
    v26 = (re::RenderGraphContext **)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v20 + 64, (uint64_t *)buf);
    if (v26)
    {
      a2 = *v26;
      if (*v26)
      {
        v27 = atomic_load((unsigned __int8 *)&qword_254120070);
        if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254120070))
        {
          qword_254120068 = re::hashString((re *)"MeshScenes", v90);
          __cxa_guard_release(&qword_254120070);
        }
        v28 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::MeshSceneArrays>>(*((_QWORD *)v127 + 146), (v25 + (qword_254120068 << 6) + ((unint64_t)qword_254120068 >> 2)) ^ qword_254120068);
        v29 = v28 + 8;
        if (!v28)
          v29 = 0;
        v100 = v29;
        v99 = *(_QWORD *)(v29 + 40);
        if (v99)
        {
          v30 = 0;
          v105 = a2;
          while (1)
          {
            v101 = v30;
            PassTechniqueMapping = re::BucketArray<re::MeshSceneCollection,16ul>::operator[](v100, v30);
            if (*(_QWORD *)(PassTechniqueMapping + 16))
              break;
LABEL_81:
            v30 = v101 + 1;
            if (v101 + 1 == v99)
              goto LABEL_82;
          }
          v32 = PassTechniqueMapping;
          v33 = 0;
          v34 = *(_QWORD *)(*((_QWORD *)v127 + 1) + 32);
          v112 = v34 + 8;
          v113 = v34 + 72;
          v111 = PassTechniqueMapping;
          while (1)
          {
            if (*((_QWORD *)a2 + 4))
            {
              v35 = *(_QWORD *)(v32 + 32);
              v36 = (float32x4_t *)(v35 + 656 * v33);
              v37 = v36[26].u64[0];
              v38 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
              v116 = v38 ^ (v38 >> 31);
              v39 = *(unsigned int *)(*((_QWORD *)a2 + 5) + 4 * (v116 % *((unsigned int *)a2 + 14)));
              if ((_DWORD)v39 != 0x7FFFFFFF)
              {
                v40 = *((_QWORD *)a2 + 6);
                v41 = *(_QWORD *)(v40 + 32 * v39 + 16);
                v42 = *(unsigned int *)(*((_QWORD *)a2 + 5) + 4 * (v116 % *((unsigned int *)a2 + 14)));
                if (v41 == v37)
                {
                  v43 = *(unsigned int *)(*((_QWORD *)a2 + 5) + 4 * (v116 % *((unsigned int *)a2 + 14)));
                }
                else
                {
                  do
                  {
                    v42 = *(_DWORD *)(v40 + 32 * v42 + 8) & 0x7FFFFFFF;
                    if ((_DWORD)v42 == 0x7FFFFFFF)
                      goto LABEL_34;
                  }
                  while (*(_QWORD *)(v40 + 32 * v42 + 16) != v37);
                  while (1)
                  {
                    v43 = v39;
                    if (v41 == v37)
                      break;
                    v39 = *(_DWORD *)(v40 + 32 * v39 + 8) & 0x7FFFFFFF;
                    v43 = 0x7FFFFFFFLL;
                    if (v39 == 0x7FFFFFFF)
                      break;
                    v41 = *(_QWORD *)(v40 + 32 * v39 + 16);
                  }
                }
                v44 = v40 + 32 * v43;
                v47 = *(_DWORD *)(v44 + 24);
                v45 = v44 + 24;
                v46 = v47;
                v48 = *((_QWORD *)a2 + 2);
                if (v48 <= v47)
                {
                  v135[0] = 0;
                  v144 = 0u;
                  v145 = 0u;
                  v142 = 0u;
                  v143 = 0u;
                  *(_OWORD *)buf = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v136 = 136315906;
                  *(_QWORD *)&v136[4] = "operator[]";
                  *(_WORD *)&v136[12] = 1024;
                  *(_DWORD *)&v136[14] = 476;
                  *(_WORD *)&v136[18] = 2048;
                  *(_QWORD *)&v136[20] = v46;
                  *(_WORD *)&v136[28] = 2048;
                  *(_QWORD *)&v136[30] = v48;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_96:
                  v135[0] = 0;
                  v144 = 0u;
                  v145 = 0u;
                  v142 = 0u;
                  v143 = 0u;
                  *(_OWORD *)buf = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v136 = 136315906;
                  *(_QWORD *)&v136[4] = "operator[]";
                  *(_WORD *)&v136[12] = 1024;
                  *(_DWORD *)&v136[14] = 476;
                  *(_WORD *)&v136[18] = 2048;
                  *(_QWORD *)&v136[20] = v48;
                  *(_WORD *)&v136[28] = 2048;
                  *(_QWORD *)&v136[30] = v46;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_97:
                  v135[0] = 0;
                  v144 = 0u;
                  v145 = 0u;
                  v142 = 0u;
                  v143 = 0u;
                  *(_OWORD *)buf = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)v136 = 136315906;
                  *(_QWORD *)&v136[4] = "operator[]";
                  *(_WORD *)&v136[12] = 1024;
                  *(_DWORD *)&v136[14] = 468;
                  *(_WORD *)&v136[18] = 2048;
                  *(_QWORD *)&v136[20] = a2;
                  *(_WORD *)&v136[28] = 2048;
                  *(_QWORD *)&v136[30] = v48;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_98:
                  v92 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), this[2], "arProjectiveShadowTechnique");
                  goto LABEL_93;
                }
                v48 = *(unsigned int *)(v45 + 4);
                v49 = *((_QWORD *)a2 + 3) + 24 * v46;
                v46 = *(_QWORD *)(v49 + 8);
                if (v46 <= v48)
                  goto LABEL_96;
                v50 = *(_QWORD *)(v49 + 16);
                v115 = (_QWORD *)(v50 + 96 * v48 + 48);
                if (!*v115
                  || (v51 = v50 + 96 * v48,
                      v104 = (_QWORD *)(v51 + 56),
                      v103 = (unsigned int *)(v51 + 72),
                      v52 = *(unsigned int *)(*(_QWORD *)(v51 + 56) + 4 * (v116 % *(unsigned int *)(v51 + 72))),
                      (_DWORD)v52 == 0x7FFFFFFF))
                {
LABEL_32:
                  v55 = *re::graphicsLogObjects((re *)PassTechniqueMapping);
                  PassTechniqueMapping = os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG);
                  if ((_DWORD)PassTechniqueMapping)
                  {
                    *(_WORD *)buf = 0;
                    _os_log_debug_impl(&dword_224FE9000, v55, OS_LOG_TYPE_DEBUG, "No material parameters for this entity (probably 0-sized bounding box), skip the shadow rendering!\n", buf, 2u);
                  }
                }
                else
                {
                  v53 = v50 + 96 * v48;
                  v54 = *(_QWORD *)(v53 + 64);
                  v114 = (uint64_t *)(v53 + 64);
                  while (*(_QWORD *)(v54 + 32 * v52 + 16) != v37)
                  {
                    v52 = *(_DWORD *)(v54 + 32 * v52 + 8) & 0x7FFFFFFF;
                    if ((_DWORD)v52 == 0x7FFFFFFF)
                      goto LABEL_32;
                  }
                  if (*(_BYTE *)(v35 + 656 * v33 + 643) && v36->i64[1])
                  {
                    v56 = 0;
                    v110 = v36 + 3;
                    v126 = v36 + 26;
                    v57 = v35 + 656 * v33;
                    v108 = v33;
                    v109 = v57 + 16;
                    v102 = (uint64_t *)(v50 + 96 * v48 + 40);
                    v58 = (unint64_t *)(v57 + 120);
                    v119 = (_QWORD *)(v57 + 112);
                    v125 = (_DWORD *)(v57 + 320);
                    v123 = (_DWORD *)(v57 + 412);
                    v124 = (_DWORD *)(v57 + 408);
                    v106 = v36[26].i64[0];
                    v107 = v36;
                    while (1)
                    {
                      v117 = v56;
                      v59 = re::DataArray<re::MeshInstance>::get(v113, *(_QWORD *)(v36->i64[0] + 8 * v56));
                      PassTechniqueMapping = re::DataArray<re::MeshModel>::get(v112, *(_QWORD *)(v59 + 16));
                      v60 = PassTechniqueMapping;
                      v61 = 0;
                      v62 = *v110;
                      v63 = v110[1];
                      v64 = v110[2];
                      v65 = v110[3];
                      v66 = *(_OWORD *)(v59 + 48);
                      v67 = *(_OWORD *)(v59 + 64);
                      v68 = *(_OWORD *)(v59 + 80);
                      *(_OWORD *)v136 = *(_OWORD *)(v59 + 32);
                      *(_OWORD *)&v136[16] = v66;
                      *(_OWORD *)&v136[32] = v67;
                      *(_OWORD *)v137 = v68;
                      do
                      {
                        *(float32x4_t *)&buf[v61] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)&v136[v61])), v63, *(float32x2_t *)&v136[v61], 1), v64, *(float32x4_t *)&v136[v61], 2), v65, *(float32x4_t *)&v136[v61], 3);
                        v61 += 16;
                      }
                      while (v61 != 64);
                      v131 = v142;
                      v132 = *(_OWORD *)buf;
                      v129 = v144;
                      v130 = v143;
                      if (*(_QWORD *)v109 && (v69 = *(_QWORD *)(*(_QWORD *)v109 + 96)) != 0)
                      {
                        v48 = *(_QWORD *)(v69 + 8);
                        a2 = (re::RenderGraphContext *)v117;
                        if (v48 <= v117)
                          goto LABEL_97;
                        v70 = *(_QWORD *)(v69 + 16) + 24 * v117;
                        a2 = *(re::RenderGraphContext **)(v70 + 8);
                        v118 = *(_QWORD *)(v70 + 16);
                      }
                      else
                      {
                        a2 = 0;
                        v118 = 0;
                      }
                      if (!*v115)
                        break;
                      v71 = *(unsigned int *)(*v104 + 4 * (v116 % *v103));
                      v72 = *v114;
                      if ((_DWORD)v71 == 0x7FFFFFFF)
                        goto LABEL_59;
                      while (*(_QWORD *)(v72 + 32 * v71 + 16) != v37)
                      {
                        v71 = *(_DWORD *)(v72 + 32 * v71 + 8) & 0x7FFFFFFF;
                        if (v71 == 0x7FFFFFFF)
                          goto LABEL_59;
                      }
LABEL_60:
                      if (*(_QWORD *)(PassTechniqueMapping + 56))
                      {
                        v73 = 0;
                        v74 = 0;
                        v75 = *v102;
                        v128 = *(_QWORD *)(v72 + 32 * v71 + 24);
                        do
                        {
                          v76 = *(_QWORD *)(v60 + 64);
                          v77 = *(unsigned __int16 *)(v76 + v73 + 474);
                          if (*v58 > v77)
                          {
                            v78 = *(_QWORD *)(*v119 + 8 * v77);
                            v79 = atomic_load((unsigned __int8 *)&qword_254120080);
                            if ((v79 & 1) == 0)
                            {
                              PassTechniqueMapping = __cxa_guard_acquire(&qword_254120080);
                              if ((_DWORD)PassTechniqueMapping)
                              {
                                MurmurHash3_x64_128((uint64_t)"Occlusion", 9, 0, (unint64_t *)buf);
                                qword_254120078 = (*(_QWORD *)&buf[8]
                                                 - 0x61C8864680B583E9
                                                 + (*(_QWORD *)buf << 6)
                                                 + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
                                __cxa_guard_release(&qword_254120080);
                              }
                            }
                            if (v78)
                            {
                              v80 = qword_254120078;
                              if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
                                dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                              PassTechniqueMapping = re::MaterialParameterTable::tryGetPassTechniqueMapping((re::MaterialParameterTable *)(v78 + 224), v80, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
                              if (PassTechniqueMapping)
                                goto LABEL_75;
                            }
                          }
                          if (v74 >= (unint64_t)a2)
                          {
                            v81 = 0;
                            if (!v75)
                            {
LABEL_73:
                              v87 = *re::graphicsLogObjects((re *)PassTechniqueMapping);
                              PassTechniqueMapping = os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT);
                              if ((_DWORD)PassTechniqueMapping)
                              {
                                v88 = *(_QWORD *)(v76 + v73 + 512);
                                *(_DWORD *)buf = 136315138;
                                *(_QWORD *)&buf[4] = v88;
                                _os_log_impl(&dword_224FE9000, v87, OS_LOG_TYPE_DEFAULT, "Failed to find a planar shadow materialInstance for meshPart: %s.", buf, 0xCu);
                              }
                              goto LABEL_75;
                            }
                          }
                          else
                          {
                            v81 = *(_QWORD *)(v118 + 8 * v74);
                            if (!v75)
                              goto LABEL_73;
                          }
                          v82 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v122 + 32))(v122, 224, 16);
                          *(_OWORD *)(v82 + 32) = 0u;
                          *(_OWORD *)(v82 + 48) = 0u;
                          *(_OWORD *)v82 = 0u;
                          *(_OWORD *)(v82 + 16) = 0u;
                          *(_OWORD *)(v82 + 64) = 0u;
                          *(_OWORD *)(v82 + 80) = 0u;
                          *(_OWORD *)(v82 + 96) = 0u;
                          *(_OWORD *)(v82 + 112) = 0u;
                          *(_OWORD *)(v82 + 128) = 0u;
                          *(_OWORD *)(v82 + 144) = 0u;
                          *(_OWORD *)(v82 + 160) = 0u;
                          *(_OWORD *)(v82 + 176) = 0u;
                          *(_OWORD *)(v82 + 192) = 0u;
                          *(_OWORD *)(v82 + 208) = 0u;
                          *(_QWORD *)(v82 + 152) = _D9;
                          *(_DWORD *)(v82 + 160) = 1065353216;
                          *(_QWORD *)(v82 + 40) = v75;
                          *(_QWORD *)(v82 + 48) = v128;
                          *(_DWORD *)(v82 + 120) = *v125;
                          v83 = (((*(_DWORD *)(v76 + v73 + 544) ^ *(_DWORD *)(v75 + 216)) & ~*(_DWORD *)(v75 + 220) | *(_DWORD *)(v75 + 220) & *(_DWORD *)(v75 + 216)) ^ *v124) & ~*v123 | *v124 & *v123;
                          *(_QWORD *)buf = v126->i64[0];
                          *(_QWORD *)&buf[8] = 0;
                          *(_QWORD *)&v143 = 0;
                          v142 = (unint64_t)(v76 + v73);
                          *((_QWORD *)&v143 + 1) = v81;
                          *(_QWORD *)&v144 = v82;
                          *((_QWORD *)&v144 + 1) = 0xFFFF010000000000;
                          v145 = v132;
                          v146 = v131;
                          v147 = v130;
                          v148 = v129;
                          v150 = 0;
                          v149 = 0;
                          *(_QWORD *)v152 = 0;
                          *(_DWORD *)((char *)&v152[1] + 3) = 0;
                          *(_QWORD *)&v152[3] = 0;
                          *(_QWORD *)&v152[5] = 0;
                          v153 = 0;
                          v151 = -1;
                          v154 = v83;
                          v155 = 0x7FFFFFFF00000000;
                          v156 = 0;
                          v157 = 0xFFFFFFFFLL;
                          v158 = 0;
                          v159 = 0;
                          v84 = (int *)re::MaterialParameterTableLayers::resolveTechniqueIndices((re::MaterialParameterTableLayers *)v82, v120);
                          if (!v85)
                          {
                            re::internal::assertLog((re::internal *)6, 0, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
                            _os_crash();
                            __break(1u);
                            goto LABEL_91;
                          }
                          v151 = *v84;
                          v86 = *(_QWORD *)v127;
                          v133 = 0;
                          v134 = 0;
                          PassTechniqueMapping = re::addDrawCall((uint64_t)v121, (uint64_t)buf, v86, 1u, (uint64_t)&v133);
LABEL_75:
                          ++v74;
                          v73 += 560;
                        }
                        while (v74 < *(_QWORD *)(v60 + 56));
                      }
                      v56 = v117 + 1;
                      v36 = v107;
                      v33 = v108;
                      a2 = v105;
                      v37 = v106;
                      v32 = v111;
                      if (v117 + 1 >= v107->i64[1])
                        goto LABEL_34;
                    }
                    v72 = *v114;
LABEL_59:
                    v71 = 0x7FFFFFFFLL;
                    goto LABEL_60;
                  }
                }
              }
            }
LABEL_34:
            if ((unint64_t)++v33 >= *(_QWORD *)(v32 + 16))
              goto LABEL_81;
          }
        }
      }
    }
LABEL_82:
    v10 = v98 + 1;
    a2 = v127;
  }
  while (v98 + 1 != v97);
LABEL_91:
  if (*((_BYTE *)a2 + 1332))
    goto LABEL_98;
  v92 = 0;
LABEL_93:
  v140[0] = xmmword_2260E5F10;
  v140[1] = xmmword_2260E5F20;
  v140[2] = xmmword_2260E5F40;
  v140[3] = xmmword_2260E5D70;
  re::DrawTableSlice::DrawTableSlice(buf, (uint64_t)v121);
  *(_QWORD *)v136 = "arProjectiveShadowTechnique";
  *(_QWORD *)&v136[8] = buf;
  *(_QWORD *)&v136[16] = v140;
  *(_QWORD *)&v136[24] = v140;
  *(_QWORD *)&v136[32] = 0;
  *(_WORD *)&v136[40] = 513;
  v136[42] = 0;
  *(_WORD *)&v136[44] = 0;
  memset(&v137[15], 0, 33);
  v138 = v92;
  v139 = 1;
  re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a2, v135);
  re::RenderGraphContext::encodeDrawCalls(a2, v135, v136);
}

uint64_t re::DownsampleShadowMapNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  _QWORD v13[4];
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;

  v10[0] = 0;
  v16 = 0;
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 39, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v14);
  result = v13[0];
  if (v13[0])
  {
    if ((v13[1] & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13[0] + 40))();
    memset(v13, 0, sizeof(v13));
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

uint64_t re::DownsampleShadowMapNode::setup(re::DownsampleShadowMapNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  _QWORD v6[2];
  __int128 v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  re::RenderGraphNode::setup(this, a2, a3);
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 256, (uint64_t)v6);
  v6[0] = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 272, (uint64_t)v6);
}

void re::DownsampleShadowMapNode::execute(re::DownsampleShadowMapNode *this, re::RenderGraphContext *a2)
{
  re::RenderGraphContext *v2;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[3];
  _QWORD v12[3];

  v2 = a2;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 256, 0, 0, &v10);
  re::RenderGraphContext::metalTexture((uint64_t)v2, (uint64_t)this + 272, 0, 0, &v9);
  v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)v2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)v2, v4, *((re::RenderGraphNodeBase **)v2 + 5), 0, &v8);
  objc_msgSend(v8, "setComputePipelineState:", *((_QWORD *)this + 39));
  objc_msgSend(v8, "setTexture:atIndex:", v10, 0);
  objc_msgSend(v8, "setTexture:atIndex:", v9, 1);
  LODWORD(v2) = objc_msgSend(*((id *)this + 39), sel_threadExecutionWidth);
  v5 = objc_msgSend(*((id *)this + 39), sel_maxTotalThreadsPerThreadgroup) / v2;
  v6 = (objc_msgSend(v9, sel_width) + v2 - 1) / v2;
  v7 = objc_msgSend(v9, sel_height);
  v12[0] = v6;
  v12[1] = (v5 + v7 - 1) / v5;
  v12[2] = 1;
  v11[0] = v2;
  v11[1] = v5;
  v11[2] = 1;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v12, v11);

  if (v9)
  if (v10)

}

uint64_t re::BlurOnePassNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  _QWORD v13[4];
  _QWORD v14[3];
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;

  v10[0] = 0;
  re::DynamicString::DynamicString((re::DynamicString *)v13, (const re::DynamicString *)(this + 36));
  v16 = 0;
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 43, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v14);
  result = v13[0];
  if (v13[0])
  {
    if ((v13[1] & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13[0] + 40))();
    memset(v13, 0, sizeof(v13));
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

uint64_t re::BlurOnePassNode::setup(re::BlurOnePassNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  _QWORD v6[2];
  __int128 v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  re::RenderGraphNode::setup(this, a2, a3);
  *(_DWORD *)((char *)v6 + 3) = 0;
  LODWORD(v6[0]) = 0;
  v6[1] = 2;
  re::RenderGraphBuilder::read((uint64_t)a2, (uint64_t)this + 272, (uint64_t)v6);
  v6[0] = 0x500000000;
  v7 = xmmword_2260E5D70;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, (uint64_t)this + 256, (uint64_t)v6);
}

void re::BlurOnePassNode::execute(re::BlurOnePassNode *this, re::RenderGraphContext *a2)
{
  re::RenderGraphContext *v2;
  re::BlurOnePassNode *v3;
  id *v4;
  id v5;
  unsigned int v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  int64x2_t v11;
  _QWORD v12[3];

  v2 = a2;
  v3 = this;
  re::RenderGraphContext::metalTexture((uint64_t)a2, (uint64_t)this + 272, 0, 0, &v9);
  re::RenderGraphContext::metalTexture((uint64_t)v2, (uint64_t)v3 + 256, 0, 0, &v8);
  v4 = (id *)re::DrawingManager::currentCommandBuffer(*(re::DrawingManager **)(*((_QWORD *)v2 + 1) + 104));
  re::RenderGraphContext::acquireManagedComputeEncoder((uint64_t)v2, v4, *((re::RenderGraphNodeBase **)v2 + 5), 0, &v7);
  objc_msgSend(v7, "setComputePipelineState:", *((_QWORD *)v3 + 43));
  objc_msgSend(v7, "setTexture:atIndex:", v9, 0);
  objc_msgSend(v7, "setTexture:atIndex:", v8, 1);
  v5 = objc_msgSend(v8, sel_height);
  objc_msgSend(v7, "setThreadgroupMemoryLength:atIndex:", (8 * (_QWORD)v5 + 15) & 0xFFFFFFFFFFFFFFF0, 0);
  LODWORD(v2) = objc_msgSend(v8, sel_height);
  LODWORD(v3) = objc_msgSend(v8, sel_width);
  v6 = objc_msgSend(v8, sel_arrayLength);
  v12[0] = v3;
  v12[1] = v6;
  v12[2] = 1;
  v10 = v2;
  v11 = vdupq_n_s64(1uLL);
  objc_msgSend(v7, "dispatchThreadgroups:threadsPerThreadgroup:", v12, &v10);

  if (v8)
  if (v9)

}

void re::GenerateProjectiveShadowMapNode::~GenerateProjectiveShadowMapNode(re::GenerateProjectiveShadowMapNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::DownsampleShadowMapNode::~DownsampleShadowMapNode(re::DownsampleShadowMapNode *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {

    *((_QWORD *)this + 39) = 0;
  }
  re::AssetHandle::~AssetHandle((re::DownsampleShadowMapNode *)((char *)this + 288));
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 39);
  if (v2)
  {

    *((_QWORD *)this + 39) = 0;
  }
  re::AssetHandle::~AssetHandle((re::DownsampleShadowMapNode *)((char *)this + 288));
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::BlurOnePassNode::~BlurOnePassNode(re::BlurOnePassNode *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED85340;
  v2 = (void *)*((_QWORD *)this + 43);
  if (v2)
  {

    *((_QWORD *)this + 43) = 0;
  }
  re::AssetHandle::~AssetHandle((re::BlurOnePassNode *)((char *)this + 320));
  v3 = *((_QWORD *)this + 36);
  if (v3)
  {
    if ((*((_BYTE *)this + 296) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 38));
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24ED85340;
  v2 = (void *)*((_QWORD *)this + 43);
  if (v2)
  {

    *((_QWORD *)this + 43) = 0;
  }
  re::AssetHandle::~AssetHandle((re::BlurOnePassNode *)((char *)this + 320));
  v3 = *((_QWORD *)this + 36);
  if (v3)
  {
    if ((*((_BYTE *)this + 296) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 38));
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::VFXRenderGraphProvider::VFXRenderGraphProvider(uint64_t a1, const re::DynamicString *a2)
{
  uint64_t v4;
  char v5;

  re::DynamicString::DynamicString((re::DynamicString *)&v4, a2);
  *(_QWORD *)a1 = off_24ED381E0;
  re::DynamicString::DynamicString((re::DynamicString *)(a1 + 8), (const re::DynamicString *)&v4);
  if (v4 && (v5 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v4 + 40))();
  *(_QWORD *)a1 = off_24ED853E8;
  *(_BYTE *)(a1 + 40) = 0;
  return a1;
}

void re::VFXRenderGraphProvider::~VFXRenderGraphProvider(re::VFXRenderGraphProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED381E0;
  v3 = (_OWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 3));
    *v3 = 0u;
    v3[1] = 0u;
  }
  JUMPOUT(0x2276933B8);
}

unint64_t re::VFXRenderGraphProvider::prepareFrame(re::VFXRenderGraphProvider *this, char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v5[2];

  v5[0] = 0x596323A061D6FAA1;
  v5[1] = (unint64_t)"VFXRenderGraphProvider";
  return re::RenderGraphProviderBase::generateScopeHash(v5, a2, a3);
}

void re::VFXRenderGraphProvider::provide(re::VFXRenderGraphProvider *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  re *RenderGraph;
  re::RenderGraphNode *v9;

  RenderGraph = (re *)re::RenderFrame::makeRenderGraph(a4, "VFXSimulation", 1uLL);
  v9 = re::RenderGraph::addNode<re::RenderGraphVFXNode>(RenderGraph, "VFXSimulationNode");
  *((_BYTE *)v9 + 256) = *((_BYTE *)this + 40);
  re::RenderGraphNode::configure(v9, a2, a3, a4);
}

void re::rendergraph_helper::getOcclusionMeshPasses(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v3 = &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
  if ((v2 & 1) == 0)
  {
    v7 = a1;
    v3 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    a1 = v7;
    if (v5)
    {
      re::rendergraph_helper::getOcclusionMeshPasses(void)::passNameHash = re::hashString((re *)"Occlusion", v6);
      v3 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
      a1 = v7;
    }
  }
  v4 = v3[442];
  *(_QWORD *)a1 = "Occlusion";
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = -256;
  *(_BYTE *)(a1 + 18) = 14;
  *(_BYTE *)(a1 + 23) = 0;
}

void re::rendergraph_helper::getOpaqueMeshPasses(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v3 = &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
  if ((v2 & 1) == 0)
  {
    v7 = a1;
    v3 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    a1 = v7;
    if (v5)
    {
      re::rendergraph_helper::getOpaqueMeshPasses(void)::passNameHash = re::hashString((re *)"Opaque", v6);
      v3 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
      a1 = v7;
    }
  }
  v4 = v3[444];
  *(_QWORD *)a1 = "Opaque";
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = -256;
  *(_BYTE *)(a1 + 18) = 14;
  *(_BYTE *)(a1 + 23) = 0;
}

void re::rendergraph_helper::getSkyboxMeshPasses(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v3 = &re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
  if ((v2 & 1) == 0)
  {
    v7 = a1;
    v3 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
    a1 = v7;
    if (v5)
    {
      re::rendergraph_helper::getSkyboxMeshPasses(void)::passNameHash = re::hashString((re *)"Skybox", v6);
      v3 = (_QWORD *)&re::mtl::introspect_SamplerMinMagFilter(BOOL)::info;
      a1 = v7;
    }
  }
  v4 = v3[446];
  *(_QWORD *)a1 = "Skybox";
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = -256;
  *(_BYTE *)(a1 + 18) = 0;
  *(_BYTE *)(a1 + 23) = 0;
}

uint64_t re::rendergraph_helper::getTransparentMeshPasses@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  const char *v16;
  int v17;
  const char *v18;
  int v19;
  const char *v20;
  int v21;
  const char *v22;
  int v23;
  const char *v24;
  int v25;
  const char *v26;
  int v27;
  const char *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD v36[2];
  __int16 v37;
  char v38;
  int v39;
  char v40;
  const char *v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  int v45;
  char v46;
  const char *v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  int v51;
  char v52;
  const char *v53;
  uint64_t v54;
  __int16 v55;
  char v56;
  int v57;
  char v58;
  const char *v59;
  uint64_t v60;
  __int16 v61;
  char v62;
  int v63;
  char v64;
  const char *v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  int v69;
  char v70;
  const char *v71;
  uint64_t v72;
  __int16 v73;
  char v74;
  int v75;
  char v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254120090);
  if ((v2 & 1) == 0)
  {
    v29 = a1;
    v15 = __cxa_guard_acquire(&qword_254120090);
    a1 = v29;
    if (v15)
    {
      _MergedGlobals_450 = re::hashString((re *)"Occlusion", v16);
      __cxa_guard_release(&qword_254120090);
      a1 = v29;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541200A0);
  if ((v3 & 1) == 0)
  {
    v30 = a1;
    v17 = __cxa_guard_acquire(&qword_2541200A0);
    a1 = v30;
    if (v17)
    {
      qword_254120098 = re::hashString((re *)"FadeDepthPrepass", v18);
      __cxa_guard_release(&qword_2541200A0);
      a1 = v30;
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2541200B0);
  if ((v4 & 1) == 0)
  {
    v31 = a1;
    v19 = __cxa_guard_acquire(&qword_2541200B0);
    a1 = v31;
    if (v19)
    {
      qword_2541200A8 = re::hashString((re *)"FadeOpaqueAfterPrepass", v20);
      __cxa_guard_release(&qword_2541200B0);
      a1 = v31;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_2541200C0);
  if ((v5 & 1) == 0)
  {
    v32 = a1;
    v21 = __cxa_guard_acquire(&qword_2541200C0);
    a1 = v32;
    if (v21)
    {
      qword_2541200B8 = re::hashString((re *)"FadeOpaqueNoPrepass", v22);
      __cxa_guard_release(&qword_2541200C0);
      a1 = v32;
    }
  }
  v6 = atomic_load((unsigned __int8 *)&qword_2541200D0);
  if ((v6 & 1) == 0)
  {
    v33 = a1;
    v23 = __cxa_guard_acquire(&qword_2541200D0);
    a1 = v33;
    if (v23)
    {
      qword_2541200C8 = re::hashString((re *)"FadeOpaque", v24);
      __cxa_guard_release(&qword_2541200D0);
      a1 = v33;
    }
  }
  v7 = atomic_load((unsigned __int8 *)&qword_2541200E0);
  if ((v7 & 1) == 0)
  {
    v34 = a1;
    v25 = __cxa_guard_acquire(&qword_2541200E0);
    a1 = v34;
    if (v25)
    {
      qword_2541200D8 = re::hashString((re *)"Opaque", v26);
      __cxa_guard_release(&qword_2541200E0);
      a1 = v34;
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_2541200F0);
  if ((v8 & 1) == 0)
  {
    v35 = a1;
    v27 = __cxa_guard_acquire(&qword_2541200F0);
    a1 = v35;
    if (v27)
    {
      qword_2541200E8 = re::hashString((re *)"Transparent", v28);
      __cxa_guard_release(&qword_2541200F0);
      a1 = v35;
    }
  }
  v9 = 0;
  v36[0] = "Occlusion";
  v36[1] = _MergedGlobals_450;
  v37 = 1536;
  v38 = 8;
  v39 = 16843521;
  v40 = 0;
  v41 = "FadeDepthPrepass";
  v42 = qword_254120098;
  v43 = 1024;
  v44 = 10;
  v45 = 16843009;
  v46 = 1;
  v47 = "FadeOpaqueAfterPrepass";
  v48 = qword_2541200A8;
  v49 = -256;
  v50 = 10;
  v51 = 33686018;
  v52 = 1;
  v53 = "FadeOpaqueNoPrepass";
  v54 = qword_2541200B8;
  v55 = 768;
  v56 = 8;
  result = qword_2541200C8;
  v59 = "FadeOpaque";
  v60 = qword_2541200C8;
  v65 = "Opaque";
  v66 = qword_2541200D8;
  v57 = 50529027;
  v58 = 0;
  v61 = -256;
  v62 = 8;
  v63 = 33686274;
  v64 = 1;
  v67 = 1536;
  v68 = 8;
  v69 = 33686274;
  v70 = 1;
  v71 = "Transparent";
  v72 = qword_2541200E8;
  v73 = -256;
  v74 = 8;
  v75 = 50529027;
  v76 = 0;
  do
  {
    v11 = &a1[v9];
    *v11 = 0;
    v11[1] = 0;
    *((_WORD *)v11 + 8) = -256;
    *((_BYTE *)v11 + 18) = 0;
    v9 += 3;
    *((_BYTE *)v11 + 23) = 0;
  }
  while (v9 != 21);
  for (i = 0; i != 21; i += 3)
  {
    v13 = &a1[i];
    v14 = &v36[i];
    *(_OWORD *)v13 = *(_OWORD *)&v36[i];
    *(_DWORD *)((char *)v13 + 15) = *(_DWORD *)((char *)&v36[i + 1] + 7);
    if (v36 != a1)
      *(_DWORD *)((char *)v13 + 19) = *(_DWORD *)((char *)v14 + 19);
    *((_BYTE *)v13 + 23) = *((_BYTE *)v14 + 23);
  }
  return result;
}

void re::rendergraph_helper::getRenderOnTopMeshPasses(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  const char *v16;
  int v17;
  const char *v18;
  int v19;
  const char *v20;
  int v21;
  const char *v22;
  int v23;
  const char *v24;
  int v25;
  const char *v26;
  int v27;
  const char *v28;
  int v29;
  const char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD v39[2];
  __int16 v40;
  char v41;
  int v42;
  char v43;
  const char *v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  int v48;
  char v49;
  const char *v50;
  uint64_t v51;
  __int16 v52;
  char v53;
  int v54;
  char v55;
  const char *v56;
  uint64_t v57;
  __int16 v58;
  char v59;
  int v60;
  char v61;
  const char *v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  int v66;
  char v67;
  const char *v68;
  uint64_t v69;
  __int16 v70;
  char v71;
  int v72;
  char v73;
  const char *v74;
  uint64_t v75;
  __int16 v76;
  char v77;
  int v78;
  char v79;
  const char *v80;
  uint64_t v81;
  __int16 v82;
  char v83;
  int v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254120100);
  if ((v2 & 1) == 0)
  {
    v31 = a1;
    v15 = __cxa_guard_acquire(&qword_254120100);
    a1 = v31;
    if (v15)
    {
      qword_2541200F8 = re::hashString((re *)"DepthPush", v16);
      __cxa_guard_release(&qword_254120100);
      a1 = v31;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254120110);
  if ((v3 & 1) == 0)
  {
    v32 = a1;
    v17 = __cxa_guard_acquire(&qword_254120110);
    a1 = v32;
    if (v17)
    {
      qword_254120108 = re::hashString((re *)"Occlusion", v18);
      __cxa_guard_release(&qword_254120110);
      a1 = v32;
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254120120);
  if ((v4 & 1) == 0)
  {
    v33 = a1;
    v19 = __cxa_guard_acquire(&qword_254120120);
    a1 = v33;
    if (v19)
    {
      qword_254120118 = re::hashString((re *)"FadeDepthPrepass", v20);
      __cxa_guard_release(&qword_254120120);
      a1 = v33;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_254120130);
  if ((v5 & 1) == 0)
  {
    v34 = a1;
    v21 = __cxa_guard_acquire(&qword_254120130);
    a1 = v34;
    if (v21)
    {
      qword_254120128 = re::hashString((re *)"FadeOpaqueAfterPrepass", v22);
      __cxa_guard_release(&qword_254120130);
      a1 = v34;
    }
  }
  v6 = atomic_load((unsigned __int8 *)&qword_254120140);
  if ((v6 & 1) == 0)
  {
    v35 = a1;
    v23 = __cxa_guard_acquire(&qword_254120140);
    a1 = v35;
    if (v23)
    {
      qword_254120138 = re::hashString((re *)"FadeOpaqueNoPrepass", v24);
      __cxa_guard_release(&qword_254120140);
      a1 = v35;
    }
  }
  v7 = atomic_load((unsigned __int8 *)&qword_254120150);
  if ((v7 & 1) == 0)
  {
    v36 = a1;
    v25 = __cxa_guard_acquire(&qword_254120150);
    a1 = v36;
    if (v25)
    {
      qword_254120148 = re::hashString((re *)"FadeOpaque", v26);
      __cxa_guard_release(&qword_254120150);
      a1 = v36;
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_254120160);
  if ((v8 & 1) == 0)
  {
    v37 = a1;
    v27 = __cxa_guard_acquire(&qword_254120160);
    a1 = v37;
    if (v27)
    {
      qword_254120158 = re::hashString((re *)"Opaque", v28);
      __cxa_guard_release(&qword_254120160);
      a1 = v37;
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254120170);
  if ((v9 & 1) == 0)
  {
    v38 = a1;
    v29 = __cxa_guard_acquire(&qword_254120170);
    a1 = v38;
    if (v29)
    {
      qword_254120168 = re::hashString((re *)"Transparent", v30);
      __cxa_guard_release(&qword_254120170);
      a1 = v38;
    }
  }
  v10 = 0;
  v39[0] = "DepthPush";
  v39[1] = qword_2541200F8;
  v40 = -248;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = "Occlusion";
  v45 = qword_254120108;
  v46 = -248;
  v47 = 0;
  v48 = 16843521;
  v49 = 1;
  v50 = "FadeDepthPrepass";
  v51 = qword_254120118;
  v52 = 1032;
  v53 = 2;
  v54 = 16843009;
  v55 = 1;
  v56 = "FadeOpaqueAfterPrepass";
  v57 = qword_254120128;
  v58 = -248;
  v59 = 2;
  v60 = 33686018;
  v61 = 1;
  v62 = "FadeOpaqueNoPrepass";
  v63 = qword_254120138;
  v64 = 776;
  v65 = 0;
  v68 = "FadeOpaque";
  v69 = qword_254120148;
  v74 = "Opaque";
  v75 = qword_254120158;
  v76 = 1544;
  v66 = 50529027;
  v67 = 0;
  v70 = -248;
  v71 = 0;
  v72 = 33686274;
  v73 = 1;
  v77 = 0;
  v78 = 33686274;
  v79 = 1;
  v80 = "Transparent";
  v81 = qword_254120168;
  v82 = -248;
  v83 = 0;
  v84 = 50529027;
  v85 = 0;
  do
  {
    v11 = &a1[v10];
    *v11 = 0;
    v11[1] = 0;
    *((_WORD *)v11 + 8) = -256;
    *((_BYTE *)v11 + 18) = 0;
    v10 += 3;
    *((_BYTE *)v11 + 23) = 0;
  }
  while (v10 != 24);
  for (i = 0; i != 24; i += 3)
  {
    v13 = &a1[i];
    v14 = &v39[i];
    *(_OWORD *)v13 = *(_OWORD *)&v39[i];
    *(_DWORD *)((char *)v13 + 15) = *(_DWORD *)((char *)&v39[i + 1] + 7);
    if (v39 != a1)
      *(_DWORD *)((char *)v13 + 19) = *(_DWORD *)((char *)v14 + 19);
    *((_BYTE *)v13 + 23) = *((_BYTE *)v14 + 23);
  }
}

void re::RenderGraphProbeArrayClampNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProbeArrayClampNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD v22[2];

  v10[0] = 0;
  v14 = 0uLL;
  *((_QWORD *)&v13 + 1) = 0;
  re::DynamicString::setCapacity(&v13, 0);
  v17 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22[0] = "generateClampedMap";
  v22[1] = 18;
  re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v22);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v15);
  result = v13;
  if ((_QWORD)v13)
  {
    if ((BYTE8(v13) & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
    v13 = 0u;
    v14 = 0u;
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

void re::RenderGraphProbeArrayClampNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;

  v4 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((_QWORD *)a2 + 146), this[4]);
  if (v4)
  {
    v5 = v4;
    if (*(_BYTE *)(v4 + 8))
    {
      re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v13);
      objc_msgSend(v13, "setComputePipelineState:", this[32]);
      objc_msgSend(v13, "setTexture:atIndex:", *(_QWORD *)(v5 + 280), 0);
      objc_msgSend(v13, "setTexture:atIndex:", *(_QWORD *)(v5 + 304), 1);
      v6 = *(_QWORD *)(v5 + 32);
      v7 = *(_QWORD *)(v5 + 20);
      v9 = v7;
      v10 = *(_DWORD *)(v5 + 16);
      v11 = v7;
      v12 = v6;
      objc_msgSend(v13, "setBytes:length:atIndex:", &v10, 24, 0);
      v8 = v9 + 126;
      if (v9 >= -63)
        v8 = v9 + 63;
      v16 = (v8 >> 6);
      v17 = vdupq_n_s64(1uLL);
      v14 = xmmword_226102DF0;
      v15 = 1;
      objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", &v16, &v14);
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v13);

    }
  }
}

void re::RenderGraphProbeArrayMipGenerationNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphProbeArrayMipGenerationNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((_QWORD *)a2 + 146), this[4]);
  if (v3)
  {
    v4 = v3;
    if (*(_BYTE *)(v3 + 40))
    {
      re::RenderGraphContext::makeBlitCommandEncoder(a2, 0, &v5);
      objc_msgSend(v5, "generateMipmapsForTexture:", *(_QWORD *)(v4 + 280));
      re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)a2, &v5);

    }
  }
}

void re::RenderGraphProbeArraySpecularFilterNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProbeArraySpecularFilterNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD v22[2];

  v10[0] = 0;
  v14 = 0uLL;
  *((_QWORD *)&v13 + 1) = 0;
  re::DynamicString::setCapacity(&v13, 0);
  v17 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22[0] = "generatePrefilteredSpecularMapFast";
  v22[1] = 34;
  re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v22);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v15);
  result = v13;
  if ((_QWORD)v13)
  {
    if ((BYTE8(v13) & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
    v13 = 0u;
    v14 = 0u;
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

void re::RenderGraphProbeArraySpecularFilterNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  id v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  int8x16_t v16;
  int64x2_t v17;
  int32x2_t v18;
  int v19;
  unsigned int v20;
  int v21;
  float v22;
  _BYTE v23[256];
  int v24;
  int v25;
  id v26;
  int64x2_t v27;
  uint64_t v28;
  int8x16_t v29;
  uint64_t v30;

  v4 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((_QWORD *)a2 + 146), this[4]);
  if (v4)
  {
    v5 = v4;
    if (*(_QWORD *)(v4 + 128))
    {
      re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v26);
      objc_msgSend(v26, "setComputePipelineState:", this[32]);
      v6 = *(_QWORD *)(v5 + 128);
      if (v6)
      {
        v7 = *(int **)(v5 + 144);
        v8 = &v7[17 * v6];
        v16 = (int8x16_t)vdupq_n_s64(0x1FFFFFFFuLL);
        v17 = vdupq_n_s64(7uLL);
        v15 = vdupq_n_s64(8uLL);
        do
        {
          objc_msgSend(v26, "setTexture:atIndex:", *(_QWORD *)(v5 + 304), 0);
          objc_msgSend(v26, "setTexture:atIndex:", *(_QWORD *)(v5 + 280), 1);
          v9 = objc_msgSend(*(id *)(v5 + 288), sel_newTextureViewWithPixelFormat_textureType_levels_slices_, 115, 3, v7[14], 1, 0, 6);
          objc_msgSend(v26, "setTexture:atIndex:", v9, 2);
          v10 = 0;
          v18 = vmovn_s64(*(int64x2_t *)(v7 + 2));
          v11 = *v7;
          v12 = v7[15];
          v20 = v7[14];
          v21 = v12;
          v25 = re::RenderGraphProbeArraySpecularFilterNode::kTotalSampleCounts[v20];
          v19 = v11;
          v22 = (float)v20 / (float)(v12 - 1);
          v24 = 16;
          v13 = (char *)&re::RenderGraphProbeArraySpecularFilterNode::kGGXSampleDirections + 256 * v20;
          do
          {
            *(_OWORD *)&v23[v10] = *(_OWORD *)&v13[v10];
            v10 += 16;
          }
          while (v10 != 256);
          objc_msgSend(v26, "setBytes:length:atIndex:", &v18, 304, 0);
          v14 = v7[1];
          v29 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(*((int64x2_t *)v7 + 2), v17), 3uLL), v16);
          v30 = v14;
          v27 = v15;
          v28 = 1;
          objc_msgSend(v26, "dispatchThreadgroups:threadsPerThreadgroup:", &v29, &v27);
          if (v9)

          v7 += 17;
        }
        while (v7 != v8);
      }
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v26);

    }
  }
}

void re::RenderGraphProbeArrayDiffuseFilterNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProbeArrayDiffuseFilterNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD v22[2];

  v10[0] = 0;
  v14 = 0uLL;
  *((_QWORD *)&v13 + 1) = 0;
  re::DynamicString::setCapacity(&v13, 0);
  v17 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22[0] = "generatePrefilteredDiffuseMapFast";
  v22[1] = 33;
  re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v22);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v15);
  result = v13;
  if ((_QWORD)v13)
  {
    if ((BYTE8(v13) & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
    v13 = 0u;
    v14 = 0u;
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

void re::RenderGraphProbeArrayDiffuseFilterNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  _BYTE v11[512];
  int v12;
  id v13;
  int64x2_t v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;

  v4 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((_QWORD *)a2 + 146), this[4]);
  if (v4)
  {
    v5 = v4;
    if (*(_BYTE *)(v4 + 48))
    {
      re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v13);
      objc_msgSend(v13, "setComputePipelineState:", this[32]);
      v6 = objc_msgSend(*(id *)(v5 + 296), sel_newTextureViewWithPixelFormat_textureType_levels_slices_, 115, 3, 0, 1, 0, 6);
      objc_msgSend(v13, "setTexture:atIndex:", v6, 1);
      objc_msgSend(v13, "setTexture:atIndex:", *(_QWORD *)(v5 + 304), 0);
      v7 = 0;
      v9 = vmovn_s64(*(int64x2_t *)(v5 + 60));
      LODWORD(v10) = *(_DWORD *)(v5 + 52);
      v12 = 32;
      do
      {
        *(_OWORD *)&v11[v7 * 16] = re::RenderGraphProbeArrayDiffuseFilterNode::kCosSampleDirections[v7];
        ++v7;
      }
      while (v7 != 32);
      objc_msgSend(v13, "setBytes:length:atIndex:", &v9, 544, 0);
      v8 = *(unsigned int *)(v5 + 56);
      v16 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)vaddq_s64(*(int64x2_t *)(v5 + 84), vdupq_n_s64(7uLL)), 3uLL), (int8x16_t)vdupq_n_s64(0x1FFFFFFFuLL));
      v17 = v8;
      v14 = vdupq_n_s64(8uLL);
      v15 = 1;
      objc_msgSend(v13, "dispatchThreadgroups:threadsPerThreadgroup:", &v16, &v14, *(_QWORD *)&v9, v10);
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v13);
      if (v6)

    }
  }
}

void re::RenderGraphProbeArrayCopyNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

void re::RenderGraphProbeArrayCopyNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  id v9;
  id v10;
  void **v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v3 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((_QWORD *)a2 + 146), this[4]);
  if (v3)
  {
    v4 = v3;
    if (*(_QWORD *)(v3 + 168))
    {
      re::RenderGraphContext::makeBlitCommandEncoder(a2, 0, &v15);
      v5 = *(_QWORD *)(v4 + 168);
      if (v5)
      {
        v6 = *(_DWORD **)(v4 + 184);
        v7 = 12 * v5;
        while (1)
        {
          v13 = 0;
          v14 = 0;
          v8 = v6[2];
          if (v8 == 1)
            break;
          v9 = 0;
          v10 = 0;
          if (!v8)
          {
            v12 = objc_msgSend(*(id *)(v4 + 264), sel_newTextureViewWithPixelFormat_textureType_levels_slices_, 115, 5, 0, objc_msgSend(*(id *)(v4 + 264), sel_mipmapLevelCount, 0, 0), (6 * *v6), 6);
            NS::SharedPtr<MTL::Texture>::operator=(&v14, &v12);
            if (v12)

            v11 = (void **)(v4 + 288);
LABEL_13:
            NS::SharedPtr<MTL::Texture>::operator=(&v13, v11);
            v10 = v13;
            v9 = v14;
          }
          objc_msgSend(v15, "copyFromTexture:toTexture:", v10, v9);
          if (v13)

          if (v14)
          v6 += 3;
          v7 -= 12;
          if (!v7)
            goto LABEL_19;
        }
        v12 = objc_msgSend(*(id *)(v4 + 272), sel_newTextureViewWithPixelFormat_textureType_levels_slices_, 115, 5, 0, objc_msgSend(*(id *)(v4 + 272), sel_mipmapLevelCount), (6 * *v6), 6);
        NS::SharedPtr<MTL::Texture>::operator=(&v14, &v12);
        if (v12)

        v11 = (void **)(v4 + 296);
        goto LABEL_13;
      }
LABEL_19:
      re::RenderGraphContext::finishEncoding<re::mtl::BlitCommandEncoder &>((uint64_t)a2, &v15);

    }
  }
}

void re::RenderGraphProbeArrayLatLongNode::setup(re::RenderGraphNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  *((_WORD *)a2 + 296) = 257;
  re::RenderGraphNode::setup(this, a2, a3);
}

uint64_t re::RenderGraphProbeArrayLatLongNode::configure(void **this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  void **ComputePipelineState;
  uint64_t result;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  _QWORD v22[2];

  v10[0] = 0;
  v14 = 0uLL;
  *((_QWORD *)&v13 + 1) = 0;
  re::DynamicString::setCapacity(&v13, 0);
  v17 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22[0] = "generateLatLongMap";
  v22[1] = 18;
  re::DynamicString::operator=((re::DynamicString *)&v13, (uint64_t)v22);
  ComputePipelineState = (void **)re::getOrCreateComputePipelineState(*((_QWORD *)a4 + 1), (uint64_t)v10);
  NS::SharedPtr<MTL::Texture>::operator=(this + 32, ComputePipelineState);
  re::RenderGraphNode::configure((re::RenderGraphNode *)this, a2, a3, a4);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v15);
  result = v13;
  if ((_QWORD)v13)
  {
    if ((BYTE8(v13) & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
    v13 = 0u;
    v14 = 0u;
  }
  if (v10[0])
  {
    result = v11;
    if (v11)
    {
      if ((v12 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
    }
  }
  return result;
}

void re::RenderGraphProbeArrayLatLongNode::execute(const char **this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;

  v4 = re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(*((_QWORD *)a2 + 146), this[4]);
  if (v4)
  {
    v5 = v4;
    if (*(_BYTE *)(v4 + 192))
    {
      re::RenderGraphContext::makeComputeCommandEncoder(a2, 0, &v17);
      objc_msgSend(v17, "setComputePipelineState:", this[32]);
      objc_msgSend(v17, "setTexture:atIndex:", *(_QWORD *)(v5 + 264), 0);
      objc_msgSend(v17, "setTexture:atIndex:", *(_QWORD *)(v5 + 304), 1);
      v10 = *(_OWORD *)(v5 + 200);
      re::FixedArray<unsigned long>::FixedArray(&v11, v5 + 216);
      re::FixedArray<unsigned int>::FixedArray(&v14, v5 + 240);
      v7 = v10;
      v8 = *((_QWORD *)&v10 + 1);
      v9 = v12;
      objc_msgSend(v17, "setBytes:length:atIndex:", &v7, 16, 0);
      objc_msgSend(v17, "setBytes:length:atIndex:", v13, 8 * v9, 1);
      objc_msgSend(v17, "setBytes:length:atIndex:", v16, 4 * v9, 2);
      v6 = HIDWORD(v10) + 126;
      if (SHIDWORD(v10) >= -63)
        v6 = HIDWORD(v10) + 63;
      v19 = 1;
      v20 = (v6 >> 6);
      v21 = vdupq_n_s64(1uLL);
      v18 = xmmword_226102DF0;
      objc_msgSend(v17, "dispatchThreadgroups:threadsPerThreadgroup:", &v20, &v18);
      re::RenderGraphContext::finishEncoding<re::mtl::ComputeCommandEncoder &>((uint64_t)a2, &v17);
      if (v14)
      {
        if (v15)
        {
          (*(void (**)(void))(*(_QWORD *)v14 + 40))();
          v15 = 0;
          v16 = 0;
        }
        v14 = 0;
      }
      if (v11)
      {
        if (v12)
          (*(void (**)(void))(*(_QWORD *)v11 + 40))();
      }

    }
  }
}

void re::RenderGraphProbeArrayClampNode::~RenderGraphProbeArrayClampNode(re::RenderGraphProbeArrayClampNode *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphProbeArrayMipGenerationNode::~RenderGraphProbeArrayMipGenerationNode(re::RenderGraphProbeArrayMipGenerationNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphProbeArraySpecularFilterNode::~RenderGraphProbeArraySpecularFilterNode(re::RenderGraphProbeArraySpecularFilterNode *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphProbeArrayDiffuseFilterNode::~RenderGraphProbeArrayDiffuseFilterNode(re::RenderGraphProbeArrayDiffuseFilterNode *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphProbeArrayCopyNode::~RenderGraphProbeArrayCopyNode(re::RenderGraphProbeArrayCopyNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphProbeArrayLatLongNode::~RenderGraphProbeArrayLatLongNode(re::RenderGraphProbeArrayLatLongNode *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {

    *((_QWORD *)this + 32) = 0;
  }
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphDataStore::tryGet<re::ProbeWriteContext>(uint64_t a1, const char *a2)
{
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)"ProbeWriteContext", 17, 0, &v13);
  v4 = (v14 + (v13 << 6) + (v13 >> 2) - 0x61C8864680B583E9) ^ v13;
  v5 = strlen(a2);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)a2, v5, 0, &v13);
    v6 = ((v14 - 0x61C8864680B583E9 + (v13 << 6) + (v13 >> 2)) ^ v13) - 0x61C8864680B583E9;
  }
  else
  {
    v6 = 0x9E3779B97F4A7C17;
  }
  v7 = ((v4 >> 2) + (v4 << 6) + v6) ^ v4;
  v8 = (unint64_t)"N2re17ProbeWriteContextE";
  if (((unint64_t)"N2re17ProbeWriteContextE" & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((unint64_t)"N2re17ProbeWriteContextE" & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v13 = (v7 - 0x61C8864680B583E9 + (v8 << 6) + (v8 >> 2)) ^ v8;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, (uint64_t *)&v13);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void re::RenderGraphARUploadPostParams::setup(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 592) = 1;
}

void re::RenderGraphARUploadPostParams::execute(re::RenderGraphARUploadPostParams *this, re::RenderGraphContext *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned __int8 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  __int128 *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;

  if (*((_BYTE *)this + 256) && !*((_BYTE *)this + 257))
  {
    v4 = re::RenderGraphDataStore::add<re::TonemapParametersData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    re::TonemapUserParameters::computeRenderParameters((re::RenderGraphARUploadPostParams *)((char *)this + 260), (uint64_t)&v21);
    v5 = v25;
    *(_OWORD *)(v4 + 88) = v26;
    v6 = v28;
    *(_OWORD *)(v4 + 104) = v27;
    *(_OWORD *)(v4 + 120) = v6;
    v7 = v21;
    *(_OWORD *)(v4 + 24) = v22;
    v8 = v24;
    *(_OWORD *)(v4 + 40) = v23;
    *(_OWORD *)(v4 + 56) = v8;
    *(_OWORD *)(v4 + 72) = v5;
    *(_DWORD *)(v4 + 136) = v29;
    *(_OWORD *)(v4 + 8) = v7;
  }
  if (*((_BYTE *)this + 258))
  {
    v9 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v10 = xmmword_2260E5F40;
    v11 = xmmword_2260E5F20;
    v12 = xmmword_2260E5F10;
    if (v9[64] && *v9 != v9[1] && v9[65])
    {
      v12 = *((_OWORD *)v9 + 1);
      v11 = *((_OWORD *)v9 + 2);
      v10 = *((_OWORD *)v9 + 3);
    }
    v17 = v12;
    v18 = v11;
    v19 = v10;
    re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x30uLL, 0x10uLL, (uint64_t)&v21);
    v13 = (void *)v22;
    v20 = *((_QWORD *)&v21 + 1);
    v14 = (__int128 *)(v21 + DWORD2(v21));
    *v14 = v17;
    v14[1] = v18;
    v14[2] = v19;
    v15 = re::RenderGraphDataStore::add<re::RenderGraphDataStoreWrapper<re::ColorExecData>>(*((re **)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    *(_QWORD *)&v21 = v13;
    *((_QWORD *)&v21 + 1) = v20;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v15 + 8), (void **)&v21);
    v16 = (void *)v21;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)&v21 + 1);
    if (v16)

  }
}

uint64_t re::RenderGraphARCombinedPostProcessNode::setup(re::RenderGraphARCombinedPostProcessNode *this, re::RenderGraphBuilder *a2, re::RenderGraphDataStore *a3)
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 24))
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v7 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v7 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::RenderGraphBuilder::read((uint64_t)a2, *((_QWORD *)this + 26), *((_QWORD *)this + 26) + 16);
  if (!*((_QWORD *)this + 29))
    goto LABEL_5;
  v5 = *((_QWORD *)this + 31);
  *(_QWORD *)&v7 = 0x100000000;
  v8 = xmmword_2260E5D70;
  LOWORD(v9) = 0;
  *(_QWORD *)((char *)&v9 + 4) = 0;
  return re::RenderGraphBuilder::write((uint64_t)a2, v5, (uint64_t)&v7);
}

void re::RenderGraphARCombinedPostProcessNode::configure(re::RenderGraphARCombinedPostProcessNode *this, const char *a2, const char *a3, re::RenderFrame *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  re::AssetHandle *v12;
  uint64_t v13;
  unint64_t v14;

  v8 = *((_QWORD *)this + 53);
  if (v8)
  {
    v9 = 0;
    v10 = 8;
    do
    {
      v11 = (uint64_t *)(*((_QWORD *)this + 55) + v10);
      v13 = *v11;
      v12 = (re::AssetHandle *)(v11 - 1);
      if (v13)
      {
        if (v8 <= v9)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        re::AssetHandle::loadAsync(v12);
        v8 = *((_QWORD *)this + 53);
      }
      if (v9 > 0xE)
        break;
      ++v9;
      v10 += 24;
    }
    while (v8 > v9);
  }
  v14 = *((_QWORD *)this + 32);
  if (v14 <= 0xF)
  {
    bzero((char *)this + 8 * v14 + 272, 128 - 8 * v14);
LABEL_11:
    *((_QWORD *)this + 32) = 16;
    ++*((_DWORD *)this + 66);
    goto LABEL_12;
  }
  if (v14 != 16)
    goto LABEL_11;
LABEL_12:
  re::RenderGraphNode::configure(this, a2, a3, a4);
}

void re::RenderGraphARCombinedPostProcessNode::execute(re::RenderGraphARCombinedPostProcessNode *this, re::RenderGraphContext *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  re::BufferTable *v24;
  uint64_t v25;
  re::BufferTable *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  re::MaterialParameterTableLayers *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  re *v48;
  const re::WeakStringID *v49;
  re::BufferTable *v50;
  re::BufferTable *v51;
  re *v52;
  const char *v53;
  const char *v54;
  _QWORD v55[5];
  char v56;
  __int16 v57;
  __int16 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[3];
  int v70;
  uint64_t v71;
  _QWORD v72[3];
  int v73;
  uint64_t v74;
  _BYTE v75[16];
  uint64_t v76[9];
  _BYTE v77[48];
  _BYTE v78[24];
  uint64_t *v79;
  __int128 v80;
  uint64_t *v81;
  __int128 v82;
  uint8_t buf[16];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v75, 5040, 0);
  if (!*((_QWORD *)this + 53))
  {
LABEL_8:
    if (*((_BYTE *)this + 400))
    {
      v12 = atomic_load((unsigned __int8 *)&qword_254120180);
      if ((v12 & 1) == 0)
      {
        v52 = (re *)__cxa_guard_acquire(&qword_254120180);
        if ((_DWORD)v52)
        {
          _MergedGlobals_451 = re::getCombinedScopeHash(v52, v53, v54);
          __cxa_guard_release(&qword_254120180);
        }
      }
      if (*((_BYTE *)this + 401))
      {
        v13 = _MergedGlobals_451;
        v14 = *((_QWORD *)a2 + 146);
      }
      else
      {
        v14 = *((_QWORD *)a2 + 146);
        v13 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 48);
      }
      v2 = re::RenderGraphDataStore::tryGet<re::TonemapParametersData>(v14, v13);
      if (!v2)
      {
        v34 = *re::graphicsLogObjects(0);
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          goto LABEL_57;
        *(_WORD *)buf = 0;
        v35 = "RenderGraphARCombinedPostProcessNode expects TonemapParametersData from the render graph data store but th"
              "ere isn't any. Will skip the execution.";
        goto LABEL_32;
      }
      re::FrameContext::perFrameAlloc(*(re::FrameContext **)a2, 0x84uLL, 4uLL, (uint64_t)buf);
      v15 = v84;
      v16 = *(unsigned int *)&buf[8] | ((unint64_t)*(unsigned int *)&buf[12] << 32);
      v17 = *(_QWORD *)buf + *(unsigned int *)&buf[8];
      *(_OWORD *)v17 = *(_OWORD *)(v2 + 8);
      v18 = *(_OWORD *)(v2 + 24);
      v19 = *(_OWORD *)(v2 + 40);
      v20 = *(_OWORD *)(v2 + 72);
      *(_OWORD *)(v17 + 48) = *(_OWORD *)(v2 + 56);
      *(_OWORD *)(v17 + 64) = v20;
      *(_OWORD *)(v17 + 16) = v18;
      *(_OWORD *)(v17 + 32) = v19;
      v21 = *(_OWORD *)(v2 + 88);
      v22 = *(_OWORD *)(v2 + 104);
      v23 = *(_OWORD *)(v2 + 120);
      *(_DWORD *)(v17 + 128) = *(_DWORD *)(v2 + 136);
      *(_OWORD *)(v17 + 96) = v22;
      *(_OWORD *)(v17 + 112) = v23;
      *(_OWORD *)(v17 + 80) = v21;
      v24 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
      *(_QWORD *)v77 = 0x1C6D7B14F4E32CD0;
      *(_QWORD *)buf = v15;
      *(_QWORD *)&buf[8] = v16;
      re::BufferTable::setBuffer(v24, (const re::WeakStringID *)v77, (const BufferView *)buf);
    }
    if (!*((_BYTE *)this + 404))
      goto LABEL_18;
    v25 = re::RenderGraphDataStore::tryGet<re::RenderGraphDataStoreWrapper<re::ColorExecData>>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
    if (v25)
    {
      v26 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
      *(_QWORD *)buf = 0x775E00AD509B0A76;
      re::BufferTable::setBuffer(v26, (const re::WeakStringID *)buf, v25 + 8);
LABEL_18:
      v7 = 0xA3521511A35B9;
      v27 = *(_QWORD *)a2;
      v76[0] = 0xA3521511A35B9;
      if (*((_QWORD *)this + 24))
      {
        v28 = (_QWORD *)(v27 + 368);
        re::RenderGraphContext::metalTexture((uint64_t)a2, *((_QWORD *)this + 26), 0, 0, (id *)buf);
        re::DynamicTextureTableAdd(v28, v76, (id *)buf);
        if (*(_QWORD *)buf)

        v3 = *((unsigned __int8 *)this + 400) | (2 * *((unsigned __int8 *)this + 402)) | (4
                                                                                          * *((unsigned __int8 *)this
                                                                                            + 403)) | (8 * *((unsigned __int8 *)this + 404));
        if (*((_QWORD *)this + 32) <= v3)
        {
          re::DynamicString::format((re::DynamicString *)"%s: Permutation %du was requested but only %lu materials exist.", (re::DynamicString *)buf, *((_QWORD *)this + 2), (*((_BYTE *)this + 400) | (2 * *((_BYTE *)this + 402)) | (4 * *((_BYTE *)this + 403)) | (8 * *((_BYTE *)this + 404))), *((_QWORD *)this + 32));
          re::RenderGraphExecutable::addError(*((_QWORD *)a2 + 147), (uint64_t)buf);
          v32 = *(_QWORD *)buf;
          if (!*(_QWORD *)buf || (buf[8] & 1) == 0)
            goto LABEL_57;
          v33 = v84;
          goto LABEL_56;
        }
        v2 = *((_QWORD *)this + 53);
        if (v2 <= v3)
          goto LABEL_62;
        v29 = *(_QWORD *)(*((_QWORD *)this + v3 + 34) + 1664);
        v30 = *(_QWORD *)(*((_QWORD *)this + 55) + 24 * v3 + 8);
        if (v30)
          v31 = *(_QWORD *)(v30 + 664);
        else
          v31 = 0;
        v36 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v30 ^ (v30 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v30 ^ (v30 >> 30))) >> 27));
        *(_QWORD *)buf = v31 ^ (v36 >> 31) ^ v36;
        v37 = (uint64_t *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)a2 + 1568, (uint64_t *)buf);
        if (v37)
          v38 = *v37;
        else
          v38 = 0;
        re::RenderGraphContext::makeFullscreenDrawCall(a2, v29, v38, 0, 0, 0, (int32x2_t *)buf);
        v39 = (re::MaterialParameterTableLayers *)v87;
        v2 = (unint64_t)"fullscreen";
        MurmurHash3_x64_128((uint64_t)"fullscreen", 10, 0, (unint64_t *)v77);
        v40 = re::MaterialParameterTableLayers::resolveTechniqueIndices(v39, (*(_QWORD *)&v77[8] + (*(_QWORD *)v77 << 6) + (*(_QWORD *)v77 >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)v77);
        if (!v41)
          goto LABEL_63;
        HIDWORD(v85) = *v40;
        if (HIDWORD(v85) == -1)
          goto LABEL_57;
        v42 = re::RenderGraphDataStore::tryGet<re::CameraData>(*((_QWORD *)a2 + 146), *(_QWORD *)(*((_QWORD *)a2 + 5) + 48));
        v74 = 0;
        v71 = 0;
        memset(v72, 0, sizeof(v72));
        v73 = 0;
        memset(v69, 0, sizeof(v69));
        v70 = 0;
        if (v42)
        {
          v3 = v42;
          if (*(_QWORD *)(v42 + 128))
          {
            v4 = 0;
            v43 = 0;
            while (1)
            {
              re::Projection::computeMatrix4x4F((re::Projection *)(v3 + 144 + (v4 << 6)), (uint64_t)v77);
              re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v72, (uint64_t)v77);
              v45 = *(_QWORD *)(v3 + 48);
              if (v45 <= v4)
                break;
              re::RenderCamera::computeInverseTransform((float32x4_t *)(v3 + 64 + 32 * v4), (uint64_t)v77);
              re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v69, (uint64_t)v77);
              v4 = ++v43;
              if (*(_QWORD *)(v3 + 128) <= (unint64_t)v43)
                goto LABEL_44;
            }
LABEL_60:
            re::internal::assertLog((re::internal *)6, v44, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v4, v45);
            _os_crash();
            __break(1u);
            goto LABEL_61;
          }
LABEL_44:
          v46 = *(_BYTE *)(v3 + 490);
        }
        else
        {
          *(_OWORD *)v77 = xmmword_2260E5F10;
          *(_OWORD *)&v77[16] = xmmword_2260E5F20;
          *(_OWORD *)&v77[32] = xmmword_2260E5F40;
          *(_OWORD *)v78 = xmmword_2260E5D70;
          re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v72, (uint64_t)v77);
          *(_OWORD *)v77 = xmmword_2260E5F10;
          *(_OWORD *)&v77[16] = xmmword_2260E5F20;
          *(_OWORD *)&v77[32] = xmmword_2260E5F40;
          *(_OWORD *)v78 = xmmword_2260E5D70;
          re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)v69, (uint64_t)v77);
          v46 = 1;
        }
        re::DrawCallRef::DrawCallRef(&v64, (const re::DrawCall *)buf);
        v47 = 0;
        *(_QWORD *)v77 = &v64;
        *(_QWORD *)&v77[24] = &v65;
        *(_QWORD *)v78 = &v66;
        v79 = &v67;
        *(int64x2_t *)&v77[8] = vdupq_n_s64(1uLL);
        *(_OWORD *)&v77[32] = *(_OWORD *)&v77[8];
        *(_OWORD *)&v78[8] = *(_OWORD *)&v77[8];
        v80 = *(_OWORD *)&v77[8];
        v81 = &v68;
        v82 = *(_OWORD *)&v77[8];
        v55[0] = "fullscreen";
        v55[1] = v77;
        v55[2] = v71;
        v55[3] = v74;
        v55[4] = 0;
        v56 = v46;
        v57 = 2;
        v58 = 0;
        v59 = 0u;
        v60 = 0u;
        v61 = 0;
        if (!*((_BYTE *)a2 + 1332))
          goto LABEL_47;
        goto LABEL_64;
      }
LABEL_61:
      v55[0] = 0;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v77 = 136315906;
      *(_QWORD *)&v77[4] = "operator[]";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 789;
      *(_WORD *)&v77[18] = 2048;
      *(_QWORD *)&v77[20] = 0;
      *(_WORD *)&v77[28] = 2048;
      *(_QWORD *)&v77[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_62:
      v55[0] = 0;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *(_OWORD *)buf = 0u;
      a2 = (re::RenderGraphContext *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v77 = 136315906;
      *(_QWORD *)&v77[4] = "operator[]";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 789;
      *(_WORD *)&v77[18] = 2048;
      *(_QWORD *)&v77[20] = v3;
      *(_WORD *)&v77[28] = 2048;
      *(_QWORD *)&v77[30] = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_63:
      re::internal::assertLog((re::internal *)6, v41, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
LABEL_64:
      v47 = re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::RenderGraphContext *)((char *)a2 + 1336), *((const char **)this + 2), "fullscreen");
LABEL_47:
      v62 = v47;
      v63 = 0;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs(a2, v76);
      re::RenderGraphContext::encodeDrawCalls(a2, v76, v55);
      v48 = (re *)(*(_QWORD *)a2 + 368);
      v76[0] = v7;
      re::DynamicTextureTableRemove(v48, (re::TextureTable *)v76, v49);
      if (*((_BYTE *)this + 400))
      {
        v50 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
        v76[0] = 0x1C6D7B14F4E32CD0;
        re::BufferTable::removeBuffer(v50, (const re::WeakStringID *)v76);
      }
      if (*((_BYTE *)this + 404))
      {
        v51 = (re::BufferTable *)(*(_QWORD *)a2 + 480);
        v76[0] = 0x775E00AD509B0A76;
        re::BufferTable::removeBuffer(v51, (const re::WeakStringID *)v76);
      }
      if (v69[0] && v71)
        (*(void (**)(void))(*(_QWORD *)v69[0] + 40))();
      v32 = v72[0];
      if (!v72[0])
        goto LABEL_57;
      v33 = v74;
      if (!v74)
        goto LABEL_57;
LABEL_56:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 40))(v32, v33);
      goto LABEL_57;
    }
    v34 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
    *(_WORD *)buf = 0;
    v35 = "RenderGraphARCombinedPostProcessNode expects ColorExecDataWrapper from the render graph data store but there i"
          "sn't any. Will skip the execution. Did you forget to add a upload node?";
LABEL_32:
    _os_log_impl(&dword_224FE9000, v34, OS_LOG_TYPE_DEFAULT, v35, buf, 2u);
    goto LABEL_57;
  }
  v3 = 0;
  v2 = 0;
  v7 = (uint64_t)this + 272;
  while (re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*((_QWORD *)this + 55) + v3)))
  {
    v8 = *((_QWORD *)this + 53);
    if (v8 <= v2)
    {
      v55[0] = 0;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v77 = 136315906;
      *(_QWORD *)&v77[4] = "operator[]";
      *(_WORD *)&v77[12] = 1024;
      *(_DWORD *)&v77[14] = 789;
      *(_WORD *)&v77[18] = 2048;
      *(_QWORD *)&v77[20] = v2;
      *(_WORD *)&v77[28] = 2048;
      *(_QWORD *)&v77[30] = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_59:
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v2, v11);
      _os_crash();
      __break(1u);
      goto LABEL_60;
    }
    v9 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*((_QWORD *)this + 55) + v3));
    v11 = *((_QWORD *)this + 32);
    if (v11 <= v2)
      goto LABEL_59;
    *(_QWORD *)(v7 + 8 * v2) = v9;
    if (v2 <= 0xE)
    {
      ++v2;
      v3 += 24;
      if (*((_QWORD *)this + 53) > v2)
        continue;
    }
    goto LABEL_8;
  }
LABEL_57:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v75);
}

void re::RenderGraphARCombinedPostProcessNode::getMaterialParameterTables(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v6;
  re::MaterialParameterBlock *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE v13[12];
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  _OWORD v20[5];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a1 + 400) | (2 * *(unsigned __int8 *)(a1 + 402)) | (4 * *(unsigned __int8 *)(a1 + 403)) | (8 * *(unsigned __int8 *)(a1 + 404));
  if (*(_QWORD *)(a1 + 424) > v2)
  {
    v4 = *(_QWORD *)(a1 + 440);
    if (*(_QWORD *)(v4 + 24 * v2 + 8))
    {
      v6 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v4 + 24 * v2));
      if (v6)
      {
        v7 = *(re::MaterialParameterBlock **)(v6 + 1672);
        if (v7)
        {
          v8 = *(_QWORD *)(a1 + 424);
          if (v8 <= v2)
          {
            memset(v20, 0, sizeof(v20));
            v12 = v8;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v13 = 136315906;
            *(_QWORD *)&v13[4] = "operator[]";
            v14 = 1024;
            v15 = 797;
            v16 = 2048;
            v17 = v2;
            v18 = 2048;
            v19 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 440) + 24 * v2 + 8);
          if (v9)
            v10 = *(_QWORD *)(v9 + 664);
          else
            v10 = 0;
          v11 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
          *(_QWORD *)&v20[0] = v10 ^ (v11 >> 31) ^ v11;
          re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v7, v13);
          re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a2, (unint64_t *)v20, v13);
          if (*(_QWORD *)v13)

        }
      }
    }
  }
}

uint64_t *re::allocInfo_RenderGraphARUploadPostParams(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254120188);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254120188))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120208, 0);
    *(uint64_t *)((char *)&qword_254120218 + 6) = 0;
    qword_254120218 = 0;
    qword_254120228 = 0;
    qword_254120230 = 0xFFFFFFFFLL;
    qword_254120208 = (uint64_t)&off_24ED7DAA8;
    qword_254120238 = (uint64_t)"RenderGraphARUploadPostParams";
    dword_254120240 = 0;
    xmmword_254120248 = 0u;
    unk_254120258 = 0u;
    xmmword_254120268 = 0u;
    qword_254120278 = 0;
    __cxa_guard_release(&qword_254120188);
  }
  return &qword_254120208;
}

void re::initInfo_RenderGraphARUploadPostParams(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  _QWORD v25[2];
  __int128 v26;

  v25[0] = 0x259D9E6D55C4A960;
  v25[1] = "RenderGraphARUploadPostParams";
  re::StringID::destroyString((re::StringID *)v25);
  *((_OWORD *)this + 2) = v26;
  v4 = atomic_load((unsigned __int8 *)&qword_254120190);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254120190);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541201A8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "tonemappingEnabled";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x10000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541201B0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_TonemapUserParameters((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "tonemapUserParameters";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x10400000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2541201B8 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "tonemappingSharedParamsEnabled";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x10100000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541201C0 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_BOOL((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "colorConvertEnabled";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x10200000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_2541201C8 = v23;
      __cxa_guard_release(&qword_254120190);
    }
  }
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2541201A8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphARUploadPostParams>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphARUploadPostParams>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphARUploadPostParams>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphARUploadPostParams>;
  re::IntrospectionRegistry::add(this, v3);
  v24 = v26;
}

double re::internal::defaultConstruct<re::RenderGraphARUploadPostParams>(int a1, int a2, re::RenderGraphARUploadPostParams *this)
{
  return re::RenderGraphARUploadPostParams::RenderGraphARUploadPostParams(this);
}

uint64_t re::internal::defaultDestruct<re::RenderGraphARUploadPostParams>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphARUploadPostParams>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphARUploadPostParams(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphARUploadPostParams", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphARUploadPostParams, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphARUploadPostParams, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphARUploadPostParams>, this);
}

uint64_t *re::allocInfo_RenderGraphARCombinedPostProcessNode(re *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254120198);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254120198))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254120280, 0);
    *(uint64_t *)((char *)&qword_254120290 + 6) = 0;
    qword_254120290 = 0;
    qword_2541202A0 = 0;
    qword_2541202A8 = 0xFFFFFFFFLL;
    qword_254120280 = (uint64_t)&off_24ED7DAA8;
    qword_2541202B0 = (uint64_t)"RenderGraphARCombinedPostProcessNode";
    dword_2541202B8 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_2541202F0 = 0;
    __cxa_guard_release(&qword_254120198);
  }
  return &qword_254120280;
}

void re::initInfo_RenderGraphARCombinedPostProcessNode(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[2];
  __int128 v35;

  v34[0] = 0x55028F1BAB7A21C6;
  v34[1] = "RenderGraphARCombinedPostProcessNode";
  re::StringID::destroyString((re::StringID *)v34);
  *((_OWORD *)this + 2) = v35;
  v4 = atomic_load((unsigned __int8 *)&qword_2541201A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541201A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_RenderGraphNode((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "RenderGraphNode";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541201D0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "tonemappingEnabled";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x19000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541201D8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "colorCorrectionEnabled";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x19200000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541201E0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_BOOL((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "cameraNoiseEnabled";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x19300000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_2541201E8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "combinedMaterialPermutations";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x19800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_2541201F0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_BOOL((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "tonemappingSharedParamsEnabled";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x19100000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_2541201F8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_BOOL((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "colorConvertEnabled";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x19400000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254120200 = v32;
      __cxa_guard_release(&qword_2541201A0);
    }
  }
  *((_QWORD *)this + 2) = 0x1C000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2541201D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RenderGraphARCombinedPostProcessNode>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RenderGraphARCombinedPostProcessNode>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RenderGraphARCombinedPostProcessNode>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RenderGraphARCombinedPostProcessNode>;
  re::IntrospectionRegistry::add(this, v3);
  v33 = v35;
}

re::RenderGraphNode *re::internal::defaultConstruct<re::RenderGraphARCombinedPostProcessNode>(int a1, int a2, re::RenderGraphNode *this)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)result = &off_24ED858C8;
  *((_QWORD *)result + 32) = 0;
  *((_DWORD *)result + 66) = 0;
  *((_QWORD *)result + 55) = 0;
  *((_QWORD *)result + 52) = 0;
  *((_QWORD *)result + 53) = 0;
  *((_QWORD *)result + 51) = 0;
  *((_DWORD *)result + 108) = 0;
  *(_DWORD *)((char *)result + 401) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::RenderGraphARCombinedPostProcessNode>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::RenderGraphNode *re::internal::defaultConstructV2<re::RenderGraphARCombinedPostProcessNode>(re::RenderGraphNode *a1)
{
  re::RenderGraphNode *result;

  result = re::RenderGraphNode::RenderGraphNode(a1);
  *(_QWORD *)result = &off_24ED858C8;
  *((_QWORD *)result + 32) = 0;
  *((_DWORD *)result + 66) = 0;
  *((_QWORD *)result + 55) = 0;
  *((_QWORD *)result + 52) = 0;
  *((_QWORD *)result + 53) = 0;
  *((_QWORD *)result + 51) = 0;
  *((_DWORD *)result + 108) = 0;
  *(_DWORD *)((char *)result + 401) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::RenderGraphARCombinedPostProcessNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_RenderGraphARCombinedPostProcessNode(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphARCombinedPostProcessNode", (uint64_t (*)(re::internal *))re::allocInfo_RenderGraphARCombinedPostProcessNode, (re::IntrospectionBase *(*)(void))re::initInfo_RenderGraphARCombinedPostProcessNode, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RenderGraphARCombinedPostProcessNode>, this);
}

void re::RenderGraphARUploadPostParams::~RenderGraphARUploadPostParams(re::RenderGraphARUploadPostParams *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

void re::RenderGraphARCombinedPostProcessNode::~RenderGraphARCombinedPostProcessNode(re::RenderGraphARCombinedPostProcessNode *this)
{
  *(_QWORD *)this = &off_24ED858C8;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 408);
  *((_QWORD *)this + 32) = 0;
  ++*((_DWORD *)this + 66);
  re::RenderGraphNode::~RenderGraphNode(this);
}

{
  *(_QWORD *)this = &off_24ED858C8;
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 408);
  *((_QWORD *)this + 32) = 0;
  ++*((_DWORD *)this + 66);
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

double re::RenderGraphARUploadPostParams::RenderGraphARUploadPostParams(re::RenderGraphARUploadPostParams *this)
{
  char *v1;
  re::RenderGraphNode *v2;
  double result;

  v1 = (char *)this + 260;
  v2 = re::RenderGraphNode::RenderGraphNode(this);
  *(_QWORD *)v2 = &off_24ED85820;
  *((_WORD *)v2 + 128) = 0;
  *((_BYTE *)v2 + 258) = 0;
  *(_OWORD *)v1 = xmmword_2260F4F30;
  *((_OWORD *)v1 + 1) = xmmword_2260EDC60;
  *((_BYTE *)v2 + 292) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((double *)v2 + 37) = result;
  *((_BYTE *)v2 + 304) = 0;
  *((_QWORD *)v1 + 6) = 0x3F80000000000000;
  *((_BYTE *)v2 + 316) = 0;
  return result;
}

void re::RenderGraphMeshNodeBase::computeSortDistance(uint64_t a1, float32x4_t *a2, _BYTE *a3, __n128 *a4, float32x2_t *a5, float32x4_t *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  unsigned __int8 v20;
  NSObject *v21;
  float32x4_t v22;
  uint32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float v46;
  float v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  int8x8_t v57;
  int8x8_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t MutableSortingContext;
  __int128 v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  char v66;
  char v67;
  char v68;
  _BYTE *v69;
  const char *v70;
  uint8_t v71;
  __n128 v72;
  __n128 *v73;
  uint8_t buf[16];
  simd_float4x4 v75;
  simd_float4x4 v76;

  v17 = a1;
  v18 = atomic_load((unsigned __int8 *)&qword_254120300);
  if ((v18 & 1) == 0)
  {
    v73 = a4;
    v69 = a3;
    a1 = __cxa_guard_acquire(&qword_254120300);
    a3 = v69;
    a4 = v73;
    if ((_DWORD)a1)
    {
      re::Defaults::BOOLValue((re::Defaults *)"useLegacySortingDistances", v70, (char *)buf);
      if (buf[0])
        v71 = buf[1];
      else
        v71 = 0;
      _MergedGlobals_452 = v71;
      __cxa_guard_release(&qword_254120300);
      a3 = v69;
      a4 = v73;
    }
  }
  v19 = 1;
  switch(*a3)
  {
    case 0:
      goto LABEL_8;
    case 1:
      re::BoundingSphere::BoundingSphere((float32x4_t *)buf, v17, a2);
      a12 = vaddq_f32(*(float32x4_t *)buf, vmulq_n_f32(*a6, *(float *)&buf[12]));
      v19 = 0;
      if (!a7)
        return;
      goto LABEL_46;
    case 2:
      re::BoundingSphere::BoundingSphere((float32x4_t *)buf, v17, a2);
      a12 = vsubq_f32(*(float32x4_t *)buf, vmulq_n_f32(*a6, *(float *)&buf[12]));
      v19 = 0;
      if (!a7)
        return;
      goto LABEL_46;
    case 3:
      v75 = __invert_f4(*(simd_float4x4 *)a2->f32);
      v75.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v75.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v75.columns[0], COERCE_FLOAT(*(_OWORD *)a5->f32)), (float32x4_t)v75.columns[1], *a5, 1), (float32x4_t)v75.columns[2], *(float32x4_t *)a5->f32, 2));
      v27 = vdivq_f32((float32x4_t)v75.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v75.columns[0], 3));
      v29 = *(float32x4_t *)v17;
      v28 = *(float32x4_t *)(v17 + 16);
      v75.columns[3] = (simd_float4)vcgtq_f32(*(float32x4_t *)v17, v28);
      v75.columns[3].i32[3] = v75.columns[3].i32[2];
      if ((vmaxvq_u32((uint32x4_t)v75.columns[3]) & 0x80000000) != 0)
      {
        v31 = 0uLL;
      }
      else
      {
        v30.i64[0] = 0x3F0000003F000000;
        v30.i64[1] = 0x3F0000003F000000;
        v31 = vmulq_f32(vaddq_f32(v29, v28), v30);
      }
      v37 = vsubq_f32(v31, v27);
      __asm { FMOV            V5.4S, #1.0 }
      v43 = vdivq_f32(_Q5, v37);
      v44 = vmulq_f32(vsubq_f32(v29, v27), v43);
      v45 = vmulq_f32(vsubq_f32(v28, v27), v43);
      v46 = v45.f32[1];
      if ((vmovn_s32(vcgtq_f32(v45, v44)).u8[0] & 1) != 0)
        v47 = v45.f32[0];
      else
        v47 = v44.f32[0];
      if (v44.f32[1] >= v45.f32[1])
        v46 = v44.f32[1];
      v48 = (int8x8_t)vdup_laneq_s32((int32x4_t)v45, 2);
      v49 = (int8x8_t)vdup_laneq_s32((int32x4_t)v44, 2);
      *(float *)v48.i32 = v46;
      *(float *)v49.i32 = v47;
      v50 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v48.u32[1], LODWORD(v47)), (float32x2_t)__PAIR64__(v49.u32[1], LODWORD(v46))), v48, v49);
      if (*(float *)v50.i32 > *(float *)&v50.i32[1])
        v50.i32[0] = v50.i32[1];
      goto LABEL_42;
    case 4:
      v76 = __invert_f4(*(simd_float4x4 *)a2->f32);
      v76.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v76.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v76.columns[0], COERCE_FLOAT(*(_OWORD *)a5->f32)), (float32x4_t)v76.columns[1], *a5, 1), (float32x4_t)v76.columns[2], *(float32x4_t *)a5->f32, 2));
      v27 = vdivq_f32((float32x4_t)v76.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v76.columns[0], 3));
      v33 = *(float32x4_t *)v17;
      v32 = *(float32x4_t *)(v17 + 16);
      v76.columns[3] = (simd_float4)vcgtq_f32(*(float32x4_t *)v17, v32);
      v76.columns[3].i32[3] = v76.columns[3].i32[2];
      if ((vmaxvq_u32((uint32x4_t)v76.columns[3]) & 0x80000000) != 0)
      {
        v35 = 0uLL;
      }
      else
      {
        v34.i64[0] = 0x3F0000003F000000;
        v34.i64[1] = 0x3F0000003F000000;
        v35 = vmulq_f32(vaddq_f32(v33, v32), v34);
      }
      v37 = vsubq_f32(v35, v27);
      __asm { FMOV            V5.4S, #1.0 }
      v52 = vdivq_f32(_Q5, v37);
      v53 = vmulq_f32(vsubq_f32(v33, v27), v52);
      v54 = vmulq_f32(vsubq_f32(v32, v27), v52);
      v55 = v54.f32[1];
      if ((vmovn_s32(vcgtq_f32(v53, v54)).u8[0] & 1) != 0)
        v56 = v54.f32[0];
      else
        v56 = v53.f32[0];
      if (v53.f32[1] <= v54.f32[1])
        v55 = v53.f32[1];
      v57 = (int8x8_t)vdup_laneq_s32((int32x4_t)v54, 2);
      v58 = (int8x8_t)vdup_laneq_s32((int32x4_t)v53, 2);
      *(float *)v57.i32 = v55;
      *(float *)v58.i32 = v56;
      v50 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v58.u32[1], LODWORD(v55)), (float32x2_t)__PAIR64__(v57.u32[1], LODWORD(v56))), v57, v58);
      if (*(float *)v50.i32 < *(float *)&v50.i32[1])
        v50.i32[0] = v50.i32[1];
LABEL_42:
      v59 = vaddq_f32(v27, vmulq_n_f32(v37, *(float *)v50.i32));
      v60 = vaddq_f32(a2[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, v59.f32[0]), a2[1], *(float32x2_t *)v59.f32, 1), a2[2], v59, 2));
      a12 = vdivq_f32(v60, (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 3));
      goto LABEL_43;
    case 5:
      a12 = *(float32x4_t *)a4;
      goto LABEL_43;
    case 6:
      goto LABEL_45;
    case 7:
      if (!a7)
        return;
      goto LABEL_46;
    default:
      do
        v20 = __ldaxr(byte_2541202F9);
      while (__stlxr(1u, byte_2541202F9));
      if ((v20 & 1) == 0)
      {
        v21 = *re::graphicsLogObjects((re *)a1);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "An unknown mesh sort point heuristic has been encountered. All unknown heuristics will default to kCentroid.", buf, 2u);
        }
      }
LABEL_8:
      v22 = *(float32x4_t *)(v17 + 16);
      v23 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v17, v22);
      v23.i32[3] = v23.i32[2];
      if ((vmaxvq_u32(v23) & 0x80000000) != 0)
      {
        v26 = 0uLL;
      }
      else
      {
        v24 = vaddq_f32(*(float32x4_t *)v17, v22);
        v25.i64[0] = 0x3F0000003F000000;
        v25.i64[1] = 0x3F0000003F000000;
        v26 = vmulq_f32(v24, v25);
      }
      v36 = vaddq_f32(a2[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, v26.f32[0]), a2[1], *(float32x2_t *)v26.f32, 1), a2[2], v26, 2));
      a12 = vdivq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 3));
LABEL_43:
      if (!_MergedGlobals_452)
      {
        v19 = 0;
        if (!a7)
          return;
        goto LABEL_46;
      }
      v19 = 0;
LABEL_45:
      if (a7)
      {
LABEL_46:
        if (*(_BYTE *)a8)
        {
          v72 = (__n128)a12;
          MutableSortingContext = re::DrawCallRecorderGroup::getMutableSortingContext(a7, *(_DWORD *)(a8 + 4));
          v62 = *(_OWORD *)(v17 + 16);
          *(_OWORD *)(MutableSortingContext + 32) = *(_OWORD *)v17;
          *(_OWORD *)(MutableSortingContext + 48) = v62;
          v64 = a2[2];
          v63 = a2[3];
          v65 = a2[1];
          *(float32x4_t *)(MutableSortingContext + 64) = *a2;
          *(float32x4_t *)(MutableSortingContext + 80) = v65;
          *(float32x4_t *)(MutableSortingContext + 96) = v64;
          *(float32x4_t *)(MutableSortingContext + 112) = v63;
          v66 = *(_BYTE *)(MutableSortingContext + 128) ? 0 : v19;
          if ((v66 & 1) == 0)
          {
            v67 = v19 ^ 1;
            if (!*(_BYTE *)(MutableSortingContext + 128))
              v67 = 1;
            if ((v67 & 1) != 0)
            {
              if (*(_BYTE *)(MutableSortingContext + 128))
                v68 = 1;
              else
                v68 = v19;
              if ((v68 & 1) == 0)
                *(_BYTE *)(MutableSortingContext + 128) = 1;
              *(__n128 *)(MutableSortingContext + 144) = v72;
            }
            else
            {
              *(_BYTE *)(MutableSortingContext + 128) = 0;
            }
          }
        }
      }
      return;
  }
}

uint64_t re::RenderGraphMeshNodeBase::removeTargetWritesWithTypes(uint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *(_QWORD *)(result + 232);
  if (v4)
  {
    v5 = 0;
    do
    {
      if (v4 <= v5)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_25:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, a3);
        _os_crash();
        __break(1u);
      }
      v6 = *(_QWORD *)(result + 248);
      if (a3)
      {
        v7 = 4 * a3;
        v8 = (_DWORD *)a2;
        while (*v8 != *(_DWORD *)(v6 + (v5 << 6) + 20))
        {
          ++v8;
          v7 -= 4;
          if (!v7)
          {
            v8 = (_DWORD *)(a2 + 4 * a3);
            break;
          }
        }
      }
      else
      {
        v8 = (_DWORD *)a2;
      }
      v9 = ((uint64_t)v8 - a2) >> 2;
      if (v9 == a3)
        goto LABEL_21;
      if (a3 <= v9)
        goto LABEL_25;
      v10 = *(_DWORD *)(a2 + 4 * v9);
      v11 = v10 == 6 || v10 == 1;
      if (v11 && *(_DWORD *)(v6 + (v5 << 6) + 16) != a4)
      {
LABEL_21:
        ++v5;
      }
      else
      {
        v12 = v4 - 1;
        if (v4 - 1 > v5)
        {
          v13 = v6 + (v4 << 6);
          v14 = (_OWORD *)(v6 + (v5 << 6));
          v15 = *(_OWORD *)(v13 - 64);
          v16 = *(_OWORD *)(v13 - 48);
          v17 = *(_OWORD *)(v13 - 16);
          v14[2] = *(_OWORD *)(v13 - 32);
          v14[3] = v17;
          *v14 = v15;
          v14[1] = v16;
          v12 = *(_QWORD *)(result + 232) - 1;
        }
        *(_QWORD *)(result + 232) = v12;
        ++*(_DWORD *)(result + 240);
        v4 = v12;
      }
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t re::RenderGraphMeshNodeBase::sortAndDrawMeshPartsInternal(re *a1, float32x4_t *a2, uint64_t a3, re::DrawTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, _BYTE *a9, char a10, const char *a11, uint64_t a12, char a13)
{
  re::DrawTable *v15;
  unint64_t v18;
  const char *v19;
  uint64_t i;
  re::Allocator *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  int v47;
  re *v48;
  NSObject *v49;
  _BOOL8 v50;
  uint64_t v51;
  unint64_t v52;
  re *v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  float *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v73;
  _QWORD v74[5];
  char v75;
  char v76;
  char v78;
  char v79;
  char v80;
  __int128 v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 v91;
  _BYTE buf[66];
  _QWORD v93[3];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  char v101;
  uint64_t v102;

  v15 = a4;
  v18 = (unint64_t)a1;
  v19 = a11;
  v102 = *MEMORY[0x24BDAC8D0];
  v89 = a3;
  v90 = (unint64_t)a4;
  if (a2[83].i8[4])
    goto LABEL_61;
  for (i = 0; ; i = (uint64_t)a1)
  {
    v22 = *(re::Allocator **)(a2->i64[0] + 24);
    v73 = v18;
    v23 = *(unsigned int *)(v18 + 256);
    v93[1] = 0;
    v93[2] = 0;
    v93[0] = a5;
    v94 = *(_OWORD *)a12;
    v95 = 0u;
    v96 = 0u;
    v97 = re::globalAllocators(a1)[2];
    v98 = 0;
    v99 = 0;
    v100 = *(_BYTE *)(a12 + 16);
    v101 = 0;
    re::RenderGraphMeshNodeBase::sortMeshParts(&v86, v23, a3, v15, a2, i, v93, v22);
    v15 = (re::DrawTable *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, 328, 8);
    re::DrawTable::DrawTable(v15, v22, (v87 + 127) >> 7);
    re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(&v89, v88, v87, a2, (uint64_t)v15, *(unsigned __int8 *)(a7 + 64), v24, v25, i);
    if (!*((_QWORD *)v15 + 5))
      break;
    a2[94].i8[8] = 2;
    if (re::GraphicsFeatureFlags::enableDepthPatch(void)::onceToken != -1)
      dispatch_once(&re::GraphicsFeatureFlags::enableDepthPatch(void)::onceToken, &__block_literal_global_8_2);
    if (!re::GraphicsFeatureFlags::enableDepthPatch(void)::gEnableDepthPatch || !v87)
    {
LABEL_31:
      re::DrawTableSlice::DrawTableSlice(v93, (uint64_t)v15);
      v74[0] = a11;
      v74[1] = v93;
      v44 = *(_QWORD *)(a7 + 80);
      v74[2] = *(_QWORD *)(a7 + 40);
      v74[3] = v44;
      v74[4] = a6;
      v75 = *(_BYTE *)(a7 + 128);
      v76 = a8;
      if (*a9)
        v78 = a9[1];
      v79 = a10;
      v80 = 0;
      v81 = 0u;
      v82 = 0u;
      v83 = 0;
      v84 = i;
      v85 = a13;
      re::RenderGraphContext::getDefaultEncodeDrawCallDataStoreArgs((re::RenderGraphContext *)a2, (uint64_t *)buf);
      re::RenderGraphContext::encodeDrawCalls(a2, buf, v74);
      a2[94].i8[8] = 0;
      if (*(_DWORD *)(v73 + 256) != 1)
      {
        v45 = *(_QWORD *)(a2->i64[1] + 88);
        if (v45)
        {
          *(_QWORD *)buf = 0xD6C08CFBFE435984;
          *(_QWORD *)&buf[8] = "meshnode:debugDrawOrder";
          v91 = 0;
          if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v45, buf, &v91))
          {
            re::StringID::destroyString((re::StringID *)buf);
          }
          else
          {
            v47 = v91;
            re::StringID::destroyString((re::StringID *)buf);
            if (v47)
            {
              v49 = *re::graphicsLogObjects(v48);
              v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
              if (v50)
              {
                v51 = *(_QWORD *)(v73 + 16);
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v51;
                _os_log_impl(&dword_224FE9000, v49, OS_LOG_TYPE_DEFAULT, "======================== Start Draw MeshNode[%s] ======================== ", buf, 0xCu);
              }
              if (*((_QWORD *)v15 + 5))
              {
                v52 = 0;
                do
                {
                  v53 = (re *)re::BucketArray<re::DrawCall,128ul>::operator[]((uint64_t)v15, v52);
                  v54 = *re::graphicsLogObjects(v53);
                  v50 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
                  if (v50)
                  {
                    v55 = *((_QWORD *)v53 + 10);
                    *(_DWORD *)buf = 134218240;
                    *(_QWORD *)&buf[4] = v52;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v55;
                    _os_log_impl(&dword_224FE9000, v54, OS_LOG_TYPE_DEFAULT, "Draw MeshPart[%zu]{ identifier:[%llu] }", buf, 0x16u);
                  }
                  ++v52;
                }
                while (v52 < *((_QWORD *)v15 + 5));
              }
              v56 = *re::graphicsLogObjects((re *)v50);
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              {
                v58 = *(_QWORD *)(v73 + 16);
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v58;
                _os_log_impl(&dword_224FE9000, v56, OS_LOG_TYPE_DEFAULT, "======================== Finish Draw MeshNode[%s] ======================== ", buf, 0xCu);
              }
              v59 = *(_QWORD *)(a2->i64[1] + 104);
              if (v59)
              {
                v60 = *(os_unfair_lock_s **)(v59 + 304);
                if (v60 && v87 != 0)
                {
                  v62 = 0;
                  v63 = 0;
                  v65 = v89;
                  v64 = v90;
                  do
                  {
                    if (v64 <= *(unsigned __int8 *)(v88 + v62 + 4))
                    {
                      re::internal::assertLog((re::internal *)6, v57, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v88 + v62 + 4), v64);
                      _os_crash();
                      __break(1u);
                    }
                    v66 = (float32x4_t *)re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(v65 + 24 * *(unsigned __int8 *)(v88 + v62 + 4)), *(unsigned int *)(v88 + v62));
                    v67 = (float *)v66[2].i64[0];
                    DWORD1(v68) = 0;
                    HIDWORD(v68) = 0;
                    *(float *)&v68 = (float)v63 / (float)(v87 - 1);
                    *((float *)&v68 + 2) = 1.0 - *(float *)&v68;
                    *(_OWORD *)buf = v68;
                    re::DebugRenderer::drawBox(v60, v66 + 4, v67, (__int128 *)buf, 1);
                    ++v63;
                    v62 += 12;
                  }
                  while (v63 < v87);
                }
              }
            }
          }
        }
      }
      break;
    }
    v27 = 0;
    a12 = 24;
    v69 = i;
    v70 = a7;
    while (v90 > *(unsigned __int8 *)(v88 + 12 * v27 + 4))
    {
      v28 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(v89 + 24 * *(unsigned __int8 *)(v88 + 12 * v27 + 4)), *(unsigned int *)(v88 + 12 * v27));
      if ((*(_BYTE *)(v28 + 177) & 1) != 0)
      {
        a3 = v28;
        if (*(_QWORD *)(v28 + 32))
        {
          a5 = re::RenderGraphDataStore::tryGet<re::DepthPatchData>(a2[73].i64[0], *(_QWORD *)(a2[2].i64[1] + 48));
          if (!a5)
          {
            v29 = (unint64_t)"N2re14DepthPatchDataE";
            if (((unint64_t)"N2re14DepthPatchDataE" & 0x8000000000000000) != 0)
            {
              v30 = (unsigned __int8 *)((unint64_t)"N2re14DepthPatchDataE" & 0x7FFFFFFFFFFFFFFFLL);
              v31 = 5381;
              do
              {
                v29 = v31;
                v32 = *v30++;
                v31 = (33 * v31) ^ v32;
              }
              while (v32);
            }
            v18 = *(_QWORD *)(a2->i64[0] + 24);
            v33 = a2[73].i64[0];
            v34 = (*(_QWORD *)(a2[2].i64[1] + 48) + (v29 << 6) + (v29 >> 2) - 0x61C8864680B583E9) ^ v29;
            v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v33 + 8) + 32))(*(_QWORD *)(v33 + 8), 88, 8);
            *(_QWORD *)v35 = &off_24ED85AB0;
            *(_QWORD *)(v35 + 16) = 0;
            *(_QWORD *)(v35 + 24) = 0;
            *(_DWORD *)(v35 + 32) = 0;
            *(_QWORD *)(v35 + 80) = 0;
            *(_OWORD *)(v35 + 40) = 0u;
            *(_OWORD *)(v35 + 56) = 0u;
            *(_DWORD *)(v35 + 72) = 0;
            *(_QWORD *)(v35 + 8) = v18;
            re::DynamicArray<re::AABB>::setCapacity((_QWORD *)(v35 + 8), 0);
            ++*(_DWORD *)(v35 + 32);
            *(_QWORD *)(v35 + 48) = v18;
            re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)(v35 + 48), 0);
            v36 = *(_QWORD *)(v33 + 64);
            ++*(_DWORD *)(v35 + 72);
            if (!v36
              || (v36 = v34 % *(unsigned int *)(v33 + 88),
                  v37 = *(unsigned int *)(*(_QWORD *)(v33 + 72) + 4 * v36),
                  (_DWORD)v37 == 0x7FFFFFFF))
            {
LABEL_21:
              v18 = *(unsigned int *)(v33 + 100);
              if ((_DWORD)v18 == 0x7FFFFFFF)
              {
                v18 = *(unsigned int *)(v33 + 96);
                v39 = v18;
                if ((_DWORD)v18 == *(_DWORD *)(v33 + 88))
                {
                  re::HashTable<unsigned long,re::RenderGraphData *,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(v33 + 64, 2 * *(_DWORD *)(v33 + 92));
                  v36 = v34 % *(unsigned int *)(v33 + 88);
                  v39 = *(_DWORD *)(v33 + 96);
                }
                *(_DWORD *)(v33 + 96) = v39 + 1;
                v40 = *(_QWORD *)(v33 + 80);
                v41 = *(_DWORD *)(v40 + 24 * v18);
              }
              else
              {
                v40 = *(_QWORD *)(v33 + 80);
                v41 = *(_DWORD *)(v40 + 24 * v18);
                *(_DWORD *)(v33 + 100) = v41 & 0x7FFFFFFF;
              }
              v42 = 24 * v18;
              *(_DWORD *)(v40 + v42) = v41 | 0x80000000;
              *(_DWORD *)(*(_QWORD *)(v33 + 80) + v42) = *(_DWORD *)(*(_QWORD *)(v33 + 80) + 24 * v18) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v33 + 72) + 4 * v36);
              *(_QWORD *)(*(_QWORD *)(v33 + 80) + 24 * v18 + 8) = v34;
              *(_QWORD *)(*(_QWORD *)(v33 + 80) + 24 * v18 + 16) = v35;
              *(_DWORD *)(*(_QWORD *)(v33 + 72) + 4 * v36) = v18;
              ++*(_DWORD *)(v33 + 92);
              ++*(_DWORD *)(v33 + 104);
              v43 = *(_QWORD *)(v33 + 80) + 24 * v18;
            }
            else
            {
              v38 = *(_QWORD *)(v33 + 80);
              while (*(_QWORD *)(v38 + 24 * v37 + 8) != v34)
              {
                LODWORD(v37) = *(_DWORD *)(v38 + 24 * v37) & 0x7FFFFFFF;
                if ((_DWORD)v37 == 0x7FFFFFFF)
                  goto LABEL_21;
              }
              v43 = v38 + 24 * v37;
            }
            a5 = *(_QWORD *)(v43 + 16);
            i = v69;
            a7 = v70;
          }
          re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)(a5 + 8), *(_QWORD *)(a3 + 32));
          re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a5 + 48), a3 + 64);
        }
      }
      if (++v27 >= v87)
        goto LABEL_31;
    }
    re::internal::assertLog((re::internal *)6, v26, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v88 + 12 * v27 + 4), v90);
    _os_crash();
    __break(1u);
LABEL_61:
    a1 = (re *)re::DrawCallRecorder::allocateDrawCallRecorderGroup((re::DrawCallRecorder *)&a2[83].u32[2], *(const char **)(v18 + 16), v19);
  }
  result = v86;
  if (v86)
  {
    if (v88)
      return (*(uint64_t (**)(void))(*(_QWORD *)v86 + 40))();
  }
  return result;
}

#error "225C3D59C: call analysis failed (funcsize=56)"

uint64_t re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(uint64_t *a1, uint64_t a2, unint64_t a3, float32x4_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned __int8 *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  float32x4_t *v38;
  float32x4_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int *v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  unsigned int *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __n128 *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _OWORD *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  int v90;
  void (*v91)(void);
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  __int32 v102;
  uint64_t result;
  uint64_t v104;
  _BYTE *v105;
  _anonymous_namespace_ *v106;
  uint64_t *v107;
  uint64_t *v108;
  unsigned int *v109;
  __int32 v110;
  uint64_t v111;
  _BYTE *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  float32x4_t *v119;
  char v120;
  unint64_t v121;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  float32x4_t *v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _anonymous_namespace_ *v134;
  char v135;
  _anonymous_namespace_ *v136;
  uint64_t v137;
  __int128 *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int32 v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  re::MaterialParameterTableLayers *v157;
  float32x4_t *v158;
  uint64_t *TechniqueAtIndex;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  uint32x4_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int *v169;
  unsigned int *v170;
  uint64_t v171;
  unint64_t v172;
  int32x4_t v173;
  int32x4_t v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int32x4_t *v181;
  unint64_t v182;
  float32x4_t *v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t v192;
  unsigned int *v193;
  uint64_t v194;
  unsigned int *v195;
  __n128 *v196;
  unsigned int *v197;
  unsigned __int8 v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  unint64_t *v202;
  unint64_t v203;
  unsigned int *v204;
  uint64_t v205;
  uint64_t v207;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  int32x4_t v213;
  char v214[4];
  int v215;
  unsigned __int8 v216;
  char v217[4];
  int v218;
  unsigned int v219;
  float32x4_t v220[2];
  _OWORD v221[2];
  float32x4_t v222;
  float32x4_t v223;
  uint64_t v224[3];
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  char v231;
  char v232;
  _QWORD v233[14];
  _BYTE v234[288];
  _BYTE v235[20];
  _BYTE v236[120];
  uint64_t *v237;
  unint64_t v238;
  int v239;
  unint64_t v240;
  unint64_t *v241;
  _BYTE v242[12];
  __int16 v243;
  int v244;
  __int16 v245;
  unint64_t v246;
  __int16 v247;
  unint64_t v248;
  uint64_t v249;

  LODWORD(v205) = a6;
  v204 = (unsigned int *)a2;
  v249 = *MEMORY[0x24BDAC8D0];
  v203 = a3;
  if (!a3)
    goto LABEL_119;
  v12 = a1;
  v207 = a9;
  v13 = (unint64_t)a4;
  v14 = a3;
  if (!*(_BYTE *)(a4[1].i64[1] + 209))
    goto LABEL_64;
  if (isAutomaticInstancingEnabled(void)::onceToken != -1)
    goto LABEL_276;
  while (1)
  {
    if (!isAutomaticInstancingEnabled(void)::g_enableAutomaticInstancing)
    {
LABEL_64:
      v9 = (unint64_t)v234;
      v10 = (unint64_t)v233;
      v51 = 12 * v14;
      v52 = (unsigned __int8 *)(v204 + 1);
      v14 = 24;
      while (1)
      {
        if (v207)
        {
          v58 = (uint64_t *)re::Slice<re::FilteredMeshPass>::operator[](*v12, v12[1], *v52);
          v59 = (uint64_t *)re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*v58, *((unsigned int *)v52 - 1));
          v60 = v59[2];
          v61 = v60 ? *(_QWORD *)(v60 + 512) : 0;
          v62 = *v59;
          v63 = *(_QWORD *)(a4->i64[0] + 24);
          v53 = 1;
          v217[0] = 1;
          v218 = *((_DWORD *)v52 + 1);
          re::DrawCallMeshPartsDetails::DrawCallMeshPartsDetails((uint64_t)&v225, v63, v62, v61, (uint64_t)v217);
          v64 = re::DrawCallRecorderGroup::recordDrawCallMeshPartsDetails(re::DrawCallMeshPartsDetails const&)::nextIndex++;
          *(_DWORD *)v235 = v64;
          re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(v207 + 112, v235, &v225);
          v11 = *(unsigned int *)v235;
          re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit((uint64_t)&v225 + 8);
          v12 = a1;
        }
        else
        {
          v53 = 0;
        }
        v54 = *v52;
        v55 = v12[1];
        if (v55 <= v54)
          break;
        v56 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(*v12 + 24 * *v52), *((unsigned int *)v52 - 1));
        re::FrameContext::FrameContext((re::FrameContext *)&v225, *(re::Allocator **)(a4->i64[0] + 24));
        v214[0] = v53;
        if (v207)
          v215 = v11;
        v216 = v52[1];
        v57 = re::addDrawCall(a5, v56, (uint64_t)&v225, v205, (uint64_t)v214);
        re::BufferTable::~BufferTable((re::BufferTable *)v234);
        re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::~TextureTableImpl(v233);
        re::DynamicArray<re::BufferSlice>::deinit((uint64_t)&v229 + 8);

        if ((_QWORD)v228)
        {

          *(_QWORD *)&v228 = 0;
        }
        if (*((_QWORD *)&v227 + 1))
        {

          *((_QWORD *)&v227 + 1) = 0;
        }

        if (!*(_BYTE *)(a5 + 320))
        {
          LOBYTE(v225) = *v52;
          (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)(a5 + 280) + 16))(a5 + 280, v57, v56, &v225);
        }
        v52 += 12;
        v51 -= 12;
        v12 = a1;
        if (!v51)
          goto LABEL_119;
      }
LABEL_264:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v54, v55);
      _os_crash();
      __break(1u);
LABEL_265:
      re::internal::assertLog((re::internal *)6, v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v155, v156);
      _os_crash();
      __break(1u);
LABEL_266:
      re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive <= size()", "range", 241, v51, v9);
      _os_crash();
      __break(1u);
LABEL_267:
      re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 242, v51, v9);
      _os_crash();
      __break(1u);
LABEL_268:
      re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v73, v74);
      _os_crash();
      __break(1u);
      goto LABEL_269;
    }
    if (v14 >= 0x1555555555555556)
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 12, v14);
      _os_crash();
      __break(1u);
LABEL_278:
      re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_279:
      re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v65, v14);
      _os_crash();
      __break(1u);
      goto LABEL_280;
    }
    v192 = *(_QWORD *)(*(_QWORD *)v13 + 24);
    v15 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v192 + 32))(v192, 12 * v14, 4);
    if (!v15)
      goto LABEL_278;
    v17 = v15;
    v18 = a1;
    v193 = (unsigned int *)v15;
    if (v14 == 1)
      break;
    v19 = 1;
    v20 = v15;
    do
    {
      *(_BYTE *)(v20 + 8) = 0;
      *(_QWORD *)v20 = 0;
      v20 += 12;
      ++v19;
    }
    while (v14 != v19);
    v9 = 0;
    v21 = 0;
    *(_BYTE *)(v20 + 8) = 0;
    *(_QWORD *)v20 = 0;
    if (v14 < 2)
      goto LABEL_83;
    v21 = 0;
    v9 = 0;
    v10 = 2;
    v13 = 1;
    while (1)
    {
      v11 = v9;
      if (v14 <= v9)
        break;
      if (!v204)
        goto LABEL_41;
      v22 = LOBYTE(v204[3 * v13 + 1]);
      v23 = &v204[3 * v9];
      v25 = *((unsigned __int8 *)v23 + 4);
      v24 = (unsigned __int8 *)(v23 + 1);
      if ((_DWORD)v22 != v25)
        goto LABEL_41;
      v26 = v18[1];
      if (v26 <= v22)
        goto LABEL_273;
      v27 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(*a1 + 24 * LOBYTE(v204[3 * v13 + 1])), v204[3 * v13]);
      v29 = *v24;
      v30 = a1[1];
      if (v30 <= v29)
        goto LABEL_274;
      v31 = v27;
      v32 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(*a1 + 24 * *v24), v204[3 * v9]);
      v18 = a1;
      v33 = *(_QWORD **)(v31 + 216);
      v17 = (uint64_t)v193;
      if (v33)
      {
        if (*v33)
          goto LABEL_41;
      }
      v34 = *(_QWORD **)(v32 + 216);
      if (v34)
      {
        if (*v34)
          goto LABEL_41;
      }
      v35 = *(_QWORD *)(v31 + 16);
      if (*(int *)(v35 + 540) > 1)
        goto LABEL_41;
      v36 = *(_QWORD *)(v32 + 16);
      v18 = a1;
      if (*(int *)(v36 + 540) > 1)
        goto LABEL_41;
      v18 = a1;
      if (*(_DWORD *)(v31 + 56) != *(_DWORD *)(v32 + 56))
        goto LABEL_41;
      v37 = v35 == v36 && BYTE1(v204[3 * v13 + 1]) == BYTE1(v204[3 * v9 + 1]);
      v18 = a1;
      if (!v37)
        goto LABEL_41;
      if (*(_DWORD *)(v31 + 180) != *(_DWORD *)(v32 + 180))
        goto LABEL_41;
      if (*(_QWORD *)(v31 + 40) != *(_QWORD *)(v32 + 40))
        goto LABEL_41;
      v16 = *(unsigned int *)(v31 + 144);
      if ((_DWORD)v16 != *(_DWORD *)(v32 + 144))
        goto LABEL_41;
      v18 = a1;
      if (((*(unsigned __int8 *)(v31 + 60) << 24) | (*(unsigned __int8 *)(v31 + 61) << 16) | *(unsigned __int16 *)(v31 + 62)) != ((*(unsigned __int8 *)(v32 + 60) << 24) | (*(unsigned __int8 *)(v32 + 61) << 16) | *(unsigned __int16 *)(v32 + 62)))
        goto LABEL_41;
      if ((_DWORD)v16 == -1)
        goto LABEL_41;
      v38 = *(float32x4_t **)(v31 + 48);
      v39 = *(float32x4_t **)(v32 + 48);
      v40 = re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::operator[](v38[2].i64[1] + 72, v16);
      v18 = a1;
      if (!*(_QWORD *)v40)
        goto LABEL_41;
      if (!*(_QWORD *)(**(_QWORD **)v40 + 2704))
        goto LABEL_41;
      if (v38[2].i64[1] != v39[2].i64[1])
        goto LABEL_41;
      if (v38[3].i64[0] != v39[3].i64[0])
        goto LABEL_41;
      if (v38[3].i64[1] != v39[3].i64[1])
        goto LABEL_41;
      if (v38[4].i64[1] != v39[4].i64[1])
        goto LABEL_41;
      if (v38[4].i64[0] != v39[4].i64[0])
        goto LABEL_41;
      if (v38[9].f32[2] != v39[9].f32[2])
        goto LABEL_41;
      if (v38[9].f32[3] != v39[9].f32[3])
        goto LABEL_41;
      if (v38[10].f32[0] != v39[10].f32[0])
        goto LABEL_41;
      LOBYTE(v225) = 0;
      v44 = re::CombinedDynamicFunctionConstants::hash(&v38[5].u8[8], (unsigned __int8 *)&v225);
      v235[0] = 0;
      v45 = re::CombinedDynamicFunctionConstants::hash(&v39[5].u8[8], v235);
      v18 = a1;
      if (v44 != v45)
        goto LABEL_41;
      if (v38[7].u16[4] != v39[7].u16[4])
        goto LABEL_41;
      if (v38[7].u16[5] != v39[7].u16[5])
        goto LABEL_41;
      v46 = re::Optional<re::PortalPlane>::operator==(v38 + 11, v39 + 11);
      v18 = a1;
      if (!v46)
        goto LABEL_41;
      v47 = v38[5].i64[0];
      v48 = v39[5].i64[0];
      if (v47 != v48)
      {
        if (!v47)
          goto LABEL_41;
        if (!v48)
          goto LABEL_41;
        v18 = a1;
        if (((*(_QWORD *)(v47 + 248)
             + (*(_QWORD *)(v47 + 72) << 6)
             + (*(_QWORD *)(v47 + 72) >> 2)
             - 0x61C8864680B583E9) ^ *(_QWORD *)(v47 + 72)) != ((*(_QWORD *)(v48 + 248)
                                                                 + (*(_QWORD *)(v48 + 72) << 6)
                                                                 + (*(_QWORD *)(v48 + 72) >> 2)
                                                                 - 0x61C8864680B583E9) ^ *(_QWORD *)(v48 + 72)))
          goto LABEL_41;
      }
      v49 = v38[8].i8[0] ? v38[8].i64[1] : 0;
      v50 = v39[8].i8[0] ? v39[8].i64[1] : 0;
      v18 = a1;
      v17 = (uint64_t)v193;
      if (v49 != v50)
      {
LABEL_41:
        v14 = v21;
        if (v203 <= v21)
          goto LABEL_270;
        v41 = v204[3 * v9 + 1];
        v42 = v17 + 12 * v21;
        *(_DWORD *)v42 = v9;
        v9 = (v10 - 1);
        ++v21;
        *(_DWORD *)(v42 + 4) = v9;
        *(_BYTE *)(v42 + 8) = v41;
      }
      v13 = v10;
      v14 = v203;
      v43 = v203 > v10;
      v10 = (v10 + 1);
      if (!v43)
        goto LABEL_83;
    }
LABEL_269:
    re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v14);
    _os_crash();
    __break(1u);
LABEL_270:
    v237 = 0;
    v228 = 0u;
    v229 = 0u;
    v226 = 0u;
    v227 = 0u;
    v225 = 0u;
    v13 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v235 = 136315906;
    *(_QWORD *)&v235[4] = "operator[]";
    *(_WORD *)&v235[12] = 1024;
    *(_DWORD *)&v235[14] = 468;
    *(_WORD *)&v235[18] = 2048;
    *(_QWORD *)v236 = v14;
    *(_WORD *)&v236[8] = 2048;
    *(_QWORD *)&v236[10] = v203;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_271:
    re::internal::assertLog((re::internal *)6, v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v13, v166);
    _os_crash();
    __break(1u);
LABEL_272:
    re::internal::assertLog((re::internal *)6, v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389, v13, v167);
    _os_crash();
    __break(1u);
LABEL_273:
    re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v22, v26);
    _os_crash();
    __break(1u);
LABEL_274:
    re::internal::assertLog((re::internal *)6, v28, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v29, v30);
    _os_crash();
    __break(1u);
LABEL_275:
    re::internal::assertLog((re::internal *)6, v151, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v13, v168);
    _os_crash();
    __break(1u);
LABEL_276:
    dispatch_once(&isAutomaticInstancingEnabled(void)::onceToken, &__block_literal_global_42);
    v12 = a1;
  }
  v9 = 0;
  v21 = 0;
  *(_BYTE *)(v15 + 8) = 0;
  *(_QWORD *)v15 = 0;
LABEL_83:
  v65 = v9;
  if (v14 <= v9)
    goto LABEL_279;
  v10 = v14;
  v14 = v21;
  v66 = v204;
  if (v10 <= v21)
  {
LABEL_280:
    v237 = 0;
    v228 = 0u;
    v229 = 0u;
    v226 = 0u;
    v227 = 0u;
    v225 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v235 = 136315906;
    *(_QWORD *)&v235[4] = "operator[]";
    *(_WORD *)&v235[12] = 1024;
    *(_DWORD *)&v235[14] = 468;
    *(_WORD *)&v235[18] = 2048;
    *(_QWORD *)v236 = v14;
    *(_WORD *)&v236[8] = 2048;
    *(_QWORD *)&v236[10] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_281;
  }
  v67 = v204[3 * v9 + 1];
  v68 = v17 + 12 * v21;
  *(_DWORD *)v68 = v9;
  *(_DWORD *)(v68 + 4) = v10;
  *(_BYTE *)(v68 + 8) = v67;
  if (v10 == -1)
  {
LABEL_281:
    v237 = 0;
    v228 = 0u;
    v229 = 0u;
    v226 = 0u;
    v227 = 0u;
    v225 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v235 = 136315906;
    *(_QWORD *)&v235[4] = "slice";
    *(_WORD *)&v235[12] = 1024;
    *(_DWORD *)&v235[14] = 502;
    *(_WORD *)&v235[18] = 2048;
    *(_QWORD *)v236 = 0;
    *(_WORD *)&v236[8] = 2048;
    *(_QWORD *)&v236[10] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_282;
  }
  v9 = v10;
  v69 = v21 + 1;
  if (v10 < v69)
  {
LABEL_282:
    re::internal::assertLog((re::internal *)7, v16, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 512, 0, v69, v9);
    _os_crash();
    __break(1u);
    goto LABEL_283;
  }
  if (v21 != -1)
  {
    v70 = v193;
    v71 = &v193[3 * v69];
    v194 = a5 + 280;
    v195 = v71;
    v14 = a5 + 168;
    v10 = a5 + 224;
    do
    {
      v51 = *v70;
      if (v9 < v51)
        goto LABEL_266;
      v72 = v70[1];
      if (v9 < v72)
        goto LABEL_267;
      v9 = (unint64_t)&v66[3 * v51];
      v73 = *(unsigned __int8 *)(v9 + 4);
      v74 = a1[1];
      if (v74 <= v73)
        goto LABEL_268;
      v11 = (unint64_t)v66;
      v198 = *(_BYTE *)(v9 + 4);
      v199 = *(_QWORD *)(*a1 + 24 * v198);
      v201 = v70;
      v75 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](v199, *(unsigned int *)v9);
      v76 = (__n128 *)v75;
      if (v207)
      {
        v212 = v72 - v51;
        v196 = (__n128 *)v75;
        v197 = &v66[3 * v51];
        v79 = a5 + 56;
        *((_QWORD *)&v227 + 1) = 0;
        v226 = 0uLL;
        LODWORD(v227) = 0;
        *(_QWORD *)&v225 = v192;
        *((_QWORD *)&v225 + 1) = v192;
        re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::setCapacity((__n128 *)((char *)&v225 + 8), 0);
        LODWORD(v227) = v227 + 1;
        if ((_DWORD)v72 != (_DWORD)v51)
        {
          v93 = 12 * v72 - 12 * v51;
          v94 = &v204[3 * v51 + 2];
          while (1)
          {
            v95 = *((unsigned __int8 *)v94 - 4);
            v96 = a1[1];
            if (v96 <= v95)
              break;
            v11 = *v94;
            v97 = (uint64_t *)re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(*a1 + 24 * *((unsigned __int8 *)v94 - 4)), *(v94 - 2));
            v98 = v97[2];
            if (v98)
              v99 = *(_QWORD *)(v98 + 512);
            else
              v99 = 0;
            v100 = *v97;
            v242[0] = 1;
            *(_DWORD *)&v242[4] = v11;
            re::DrawCallMeshPartsDetails::appendPerMeshPartDetails((uint64_t)&v225, v100, v99, (uint64_t)v242);
            v94 += 3;
            v93 -= 12;
            if (!v93)
              goto LABEL_115;
          }
LABEL_283:
          re::internal::assertLog((re::internal *)6, v92, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v95, v96);
          _os_crash();
          __break(1u);
        }
LABEL_115:
        v101 = re::DrawCallRecorderGroup::recordDrawCallMeshPartsDetails(re::DrawCallMeshPartsDetails const&)::nextIndex++;
        v222.i32[0] = v101;
        re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::add(v207 + 112, &v222, &v225);
        v102 = v222.i32[0];
        re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit((uint64_t)&v225 + 8);
        v77 = a4->i64[0];
        v78 = v212;
        if (v212 > 1)
        {
          v235[0] = 1;
          *(_DWORD *)&v235[4] = v102;
          v76 = v196;
          goto LABEL_95;
        }
        LOBYTE(v237) = 1;
        HIDWORD(v237) = v102;
        v71 = v195;
        v76 = v196;
      }
      else
      {
        v77 = a4->i64[0];
        if (v72 - v51 > 1)
        {
          v78 = v72 - v51;
          v197 = &v66[3 * v51];
          v79 = a5 + 56;
          v235[0] = 0;
LABEL_95:
          v235[8] = BYTE1(v66[3 * v51 + 1]);
          v211 = v78;
          v80 = 0;
          v210 = *(unsigned int *)(re::addInstancedDrawCall((re::DrawTable *)a5, v76, v77, v205, v78, (uint64_t)v235) + 76);
          LODWORD(v11) = 1;
          do
          {
            v81 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](v199, v197[3 * v80]);
            v82 = v80 + v210;
            v83 = (_OWORD *)re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](v79, v82);
            v84 = *(_OWORD *)(v81 + 112);
            v86 = *(_OWORD *)(v81 + 64);
            v85 = *(_OWORD *)(v81 + 80);
            v83[2] = *(_OWORD *)(v81 + 96);
            v83[3] = v84;
            *v83 = v86;
            v83[1] = v85;
            v87 = *(_QWORD *)(*(_QWORD *)(v81 + 48) + 80);
            if (v87)
              v88 = v87 + 152;
            else
              v88 = 0;
            *(_QWORD *)re::BucketArray<re::ConstantTable const*,128ul>::operator[](a5 + 112, v82) = v88;
            v89 = *(float *)(v81 + 192) * (float)*(int *)(v81 + 184);
            *(float *)re::BucketArray<unsigned int,128ul>::operator[](v14, v82) = v89;
            v90 = *(_DWORD *)(v81 + 200);
            *(_DWORD *)re::BucketArray<unsigned int,128ul>::operator[](v10, v82) = v90;
            v80 = v11;
            v43 = v211 > v11;
            v11 = (v11 + 1);
          }
          while (v43);
          v9 = v203;
          v66 = v204;
          v71 = v195;
          if (*(_BYTE *)(a5 + 320))
            goto LABEL_106;
          LOBYTE(v225) = v198;
          v91 = *(void (**)(void))(*(_QWORD *)v194 + 16);
LABEL_105:
          v91();
          goto LABEL_106;
        }
        LOBYTE(v237) = 0;
      }
      LOBYTE(v238) = BYTE1(v66[3 * v51 + 1]);
      re::addDrawCall(a5, (uint64_t)v76, v77, v205, (uint64_t)&v237);
      v9 = v203;
      if (!*(_BYTE *)(a5 + 320))
      {
        LOBYTE(v225) = v198;
        v91 = *(void (**)(void))(*(_QWORD *)v194 + 16);
        goto LABEL_105;
      }
LABEL_106:
      v70 = v201 + 3;
    }
    while (v201 + 3 != v71);
  }
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v192 + 40))(v192, v193);
LABEL_119:
  result = re::RenderGraphDataStore::tryGet<re::CameraData>(a4[73].i64[0], *(_QWORD *)(a4[2].i64[1] + 48));
  if (!result)
    return result;
  v104 = re::RenderGraphDataStore::get<re::CameraData>(a4[73].i64[0], *(_QWORD *)(a4[2].i64[1] + 48));
  v237 = 0;
  v238 = 0;
  v239 = 1;
  v240 = 0;
  v241 = 0;
  *(_QWORD *)&v235[8] = 0;
  *(_QWORD *)v235 = 0;
  *(_DWORD *)&v235[16] = 1;
  v105 = &v236[4];
  *(_QWORD *)&v236[12] = 0;
  *(_QWORD *)&v236[4] = 0;
  re::RenderGraphContext::rtAttachmentHandles((uint64_t)a4, a4[2].u64[1], (uint64_t)v235);
  if ((v235[16] & 1) != 0)
    v107 = (uint64_t *)&v236[4];
  else
    v107 = *(uint64_t **)&v236[12];
  if (*(_QWORD *)&v235[8])
  {
    LODWORD(v51) = 0;
    v108 = &v107[2 * *(_QWORD *)&v235[8]];
    v109 = v204;
    do
    {
      v224[0] = *v107;
      v224[1] = v107[1];
      v106 = (_anonymous_namespace_ *)re::RenderGraphResourceDescriptions::targetDescription(*(re **)(a4[73].i64[1] + 136), v224);
      v51 = (*((_BYTE *)v106 + 104) != 0) | v51;
      v107 += 2;
    }
    while (v107 != v108);
  }
  else
  {
    v51 = 0;
    v109 = v204;
  }
  if (a4[65].i32[3] || (v110 = a4[7].i32[0]) != 0)
  {
    v111 = v104;
    if ((v235[16] & 1) == 0)
      v105 = *(_BYTE **)&v236[12];
    if (*(_QWORD *)&v235[8])
    {
      v112 = &v105[16 * *(_QWORD *)&v235[8]];
      do
      {
        v113 = *((unsigned int *)v105 + 2);
        if (a4[65].i32[3])
        {
          if (a4[64].i64[0])
          {
            v114 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v113 ^ (v113 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v113 ^ (v113 >> 30))) >> 27));
            v115 = *(unsigned int *)(a4[64].i64[1] + 4 * ((v114 ^ (v114 >> 31)) % a4[65].u32[2]));
            if ((_DWORD)v115 != 0x7FFFFFFF)
            {
              v116 = a4[65].i64[0];
              while (*(_DWORD *)(v116 + 112 * v115 + 4) != (_DWORD)v113)
              {
                LODWORD(v115) = *(_DWORD *)(v116 + 112 * v115) & 0x7FFFFFFF;
                if ((_DWORD)v115 == 0x7FFFFFFF)
                  goto LABEL_163;
              }
              goto LABEL_146;
            }
          }
        }
        else
        {
          v117 = a4[7].i64[0];
          if (v117)
          {
            v118 = 112 * v117;
            v119 = a4 + 8;
            while (v119->i32[0] != (_DWORD)v113)
            {
              v119 += 7;
              v118 -= 112;
              if (!v118)
                goto LABEL_163;
            }
LABEL_146:
            if (v237)
            {
              v120 = v239;
              if ((v239 & 1) != 0)
              {
                if (v238 - 8 < 0xFFFFFFFFFFFFFFF7)
                {
                  v121 = v238 + 1;
                  v123 = 16;
LABEL_156:
                  if (v123 <= v121)
                    v124 = v121;
                  else
                    v124 = v123;
                  v106 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(&v237, v124);
                  v120 = v239;
                }
              }
              else
              {
                v121 = v238 + 1;
                if (v238 >= v240 && v240 < v121)
                {
                  v123 = 2 * v240;
                  goto LABEL_156;
                }
              }
            }
            else
            {
              v106 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(&v237, v238 + 1);
              v120 = v239 + 2;
              v239 += 2;
            }
            v37 = (v120 & 1) == 0;
            v125 = v241;
            v126 = v238;
            if (!v37)
              v125 = &v240;
            *((_DWORD *)v125 + v238) = v113;
            v238 = v126 + 1;
            v239 += 2;
          }
        }
LABEL_163:
        v105 += 16;
      }
      while (v105 != v112);
    }
    v110 = v238 != 0;
    v109 = v204;
    v104 = v111;
  }
  LODWORD(a5) = v110;
  if (((v110 | v51) & 1) == 0)
    goto LABEL_256;
  v127 = a4;
  v128 = *(const char **)(a4[2].i64[1] + 24);
  v10 = *(_QWORD *)(v104 + 48);
  v129 = re::Hash<re::DynamicString>::operator()((uint64_t)v242, (uint64_t)&v225);
  v131 = 0x7FFFFFFFLL;
  if (a4[67].i64[0])
  {
    v132 = *(unsigned int *)(a4[67].i64[1] + 4 * (v129 % a4[68].u32[2]));
    if ((_DWORD)v132 != 0x7FFFFFFF)
    {
      v133 = a4[68].i64[0];
      v131 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v133 + 224 * v132 + 16, (uint64_t)&v225))
      {
        v132 = *(_DWORD *)(v133 + 224 * v132 + 8) & 0x7FFFFFFF;
        if (v132 == 0x7FFFFFFF)
          goto LABEL_173;
      }
      v131 = v132;
    }
  }
LABEL_173:
  v134 = (_anonymous_namespace_ *)v225;
  if ((_QWORD)v225 && (BYTE8(v225) & 1) != 0)
    v134 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v225 + 40))();
  v9 = (unint64_t)&a4[67];
  if (v131 != 0x7FFFFFFF)
    goto LABEL_194;
  v135 = *(_BYTE *)(v104 + 512);
  v226 = 0u;
  v227 = 0u;
  v228 = 0u;
  v229 = 0u;
  v230 = 0x1600000017;
  v231 = v135;
  v232 = 0;
  *(_QWORD *)&v225 = 1;
  DWORD2(v225) = 1;
  v136 = (_anonymous_namespace_ *)re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(1uLL, v130);
  v137 = v225;
  v138 = &v226 + 5 * v225;
  *v138 = 0u;
  v138[1] = 0u;
  v138[2] = 0u;
  v138[3] = 0u;
  *((_QWORD *)v138 + 8) = 0x1600000017;
  *((_BYTE *)v138 + 72) = v135;
  *((_BYTE *)v138 + 73) = 0;
  *(_QWORD *)&v225 = v137 + 1;
  ++DWORD2(v225);
  v139 = re::Hash<re::DynamicString>::operator()((uint64_t)&v222, (uint64_t)v242);
  v140 = v139;
  v207 = v104;
  if (!*(_QWORD *)v9)
  {
    LODWORD(v141) = 0;
    goto LABEL_184;
  }
  v141 = v139 % a4[68].u32[2];
  v142 = *(unsigned int *)(a4[67].i64[1] + 4 * v141);
  if ((_DWORD)v142 == 0x7FFFFFFF)
  {
LABEL_184:
    v144 = v127[69].u32[1];
    if ((_DWORD)v144 == 0x7FFFFFFF)
    {
      v144 = v127[69].u32[0];
      v145 = v144;
      if ((_DWORD)v144 == v127[68].i32[2])
      {
        re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(v9, 2 * v127[68].i32[3]);
        LODWORD(v141) = v140 % v127[68].u32[2];
        v145 = v127[69].i32[0];
      }
      v127[69].i32[0] = v145 + 1;
      v146 = v127[68].i64[0];
      v147 = *(_DWORD *)(v146 + 224 * v144 + 8);
    }
    else
    {
      v146 = v127[68].i64[0];
      v147 = *(_DWORD *)(v146 + 224 * v144 + 8);
      v127[69].i32[1] = v147 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v146 + 224 * v144 + 8) = v147 | 0x80000000;
    *(_DWORD *)(v127[68].i64[0] + 224 * v144 + 8) = *(_DWORD *)(v127[68].i64[0] + 224 * v144 + 8) & 0x80000000 | *(_DWORD *)(v127[67].i64[1] + 4 * v141);
    *(_QWORD *)(v127[68].i64[0] + 224 * v144) = v140;
    re::DynamicString::DynamicString((re::DynamicString *)(v127[68].i64[0] + 224 * v144 + 16), (const re::DynamicString *)v242);
    v148 = v127[68].i64[0];
    *(_QWORD *)(v148 + 224 * v144 + 48) = 0;
    v149 = v148 + 224 * v144 + 48;
    *(_DWORD *)(v149 + 8) = 0;
    re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::copy((_QWORD *)v149, (uint64_t *)&v225);
    *(_DWORD *)(v127[67].i64[1] + 4 * v141) = v144;
    ++v127[68].i32[3];
    ++v127[69].i32[2];
    goto LABEL_190;
  }
  v143 = a4[68].i64[0];
  while (!re::DynamicString::operator==(v143 + 224 * v142 + 16, (uint64_t)v242))
  {
    v142 = *(_DWORD *)(v143 + 224 * v142 + 8) & 0x7FFFFFFF;
    if (v142 == 0x7FFFFFFF)
    {
      v127 = a4;
      goto LABEL_184;
    }
  }
LABEL_190:
  v134 = *(_anonymous_namespace_ **)v242;
  if (*(_QWORD *)v242 && (v242[8] & 1) != 0)
    v134 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v242 + 40))();
  v127 = a4;
  v109 = v204;
LABEL_194:
  v150 = re::Hash<re::DynamicString>::operator()((uint64_t)v242, (uint64_t)&v225);
  v152 = 0x7FFFFFFFLL;
  if (*(_QWORD *)v9)
  {
    v153 = *(unsigned int *)(v127[67].i64[1] + 4 * (v150 % v127[68].u32[2]));
    if ((_DWORD)v153 != 0x7FFFFFFF)
    {
      v9 = v127[68].u64[0];
      v152 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v9 + 224 * v153 + 16, (uint64_t)&v225))
      {
        v153 = *(_DWORD *)(v9 + 224 * v153 + 8) & 0x7FFFFFFF;
        if (v153 == 0x7FFFFFFF)
          goto LABEL_201;
      }
      v152 = v153;
    }
  }
LABEL_201:
  v154 = v127[68].i64[0];
  if ((_QWORD)v225 && (BYTE8(v225) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v225 + 40))();
  if (v203)
  {
    v11 = (unint64_t)&v109[3 * v203];
    v205 = v104 + 64;
    v202 = (unint64_t *)(v154 + 224 * v152 + 48);
    v203 = v104 + 144;
    v200 = v154 + 224 * v152 + 64;
    v14 = 24;
    v213 = vdupq_n_s32(0x7F800000u);
    do
    {
      v155 = *((unsigned __int8 *)v109 + 4);
      v156 = a1[1];
      if (v156 <= v155)
        goto LABEL_265;
      v9 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(*a1 + 24 * *((unsigned __int8 *)v109 + 4)), *v109);
      v157 = *(re::MaterialParameterTableLayers **)(v9 + 48);
      if (v157)
      {
        v151 = *(unsigned int *)(v9 + 144);
        if ((_DWORD)v151 != -1)
        {
          v158 = *(float32x4_t **)(v9 + 32);
          TechniqueAtIndex = (uint64_t *)re::MaterialParameterTableLayers::getTechniqueAtIndex(v157, v151);
          if (TechniqueAtIndex)
          {
            v160 = *TechniqueAtIndex;
            if (*TechniqueAtIndex)
            {
              if ((*(_BYTE *)(v9 + 177) & 2) == 0)
              {
                v161 = *(_QWORD *)(v160 + 2480);
                v162 = (v161 & 1) != 0 ? v161 >> 1 : v161 >> 1;
                v163 = *(_DWORD *)(v160 + 108);
                if (v162 && v163 != 0)
                {
                  if (re::MeshPart::computeTriangleCount(*(re::MeshPart **)(v9 + 16)))
                  {
                    v165 = (uint32x4_t)vcgtq_f32(*v158, v158[1]);
                    v165.i32[3] = v165.i32[2];
                    if ((vmaxvq_u32(v165) & 0x80000000) == 0)
                    {
                      re::AABB::transform(v158, (float32x4_t *)(v9 + 64), (uint64_t)&v222);
                      if (v10)
                      {
                        v13 = 0;
                        v204 = v109;
                        v207 = v104;
                        while (1)
                        {
                          v166 = *(_QWORD *)(v104 + 48);
                          if (v166 <= v13)
                            goto LABEL_271;
                          v220[0] = v222;
                          v220[1] = v223;
                          v167 = *(_QWORD *)(v104 + 128);
                          if (v167 <= v13)
                            goto LABEL_272;
                          re::RenderCamera::transformWorldBoundsToScreen((float32x4_t *)(v205 + 32 * v13), v220, (const re::Projection *)(v203 + (v13 << 6)), (uint64_t)v221);
                          if ((v51 & 1) != 0)
                          {
                            v168 = *v202;
                            if (*v202 <= v13)
                              goto LABEL_275;
                            re::FixedOccupancyGrid::setOccupied(v200 + 80 * v13, (uint64_t *)v221, (*(_DWORD *)(v9 + 180) >> 17) & 3);
                          }
                          if ((_DWORD)a5)
                          {
                            v169 = (unsigned int *)((v239 & 1) != 0 ? &v240 : v241);
                            if (v238)
                              break;
                          }
LABEL_253:
                          ++v13;
                          v109 = v204;
                          v104 = v207;
                          v14 = 24;
                          if (v13 == v10)
                            goto LABEL_254;
                        }
                        v170 = &v169[v238];
                        while (2)
                        {
                          v219 = 0;
                          v219 = *v169;
                          v171 = re::SmallHashTable<unsigned int,re::DynamicOverflowArray<re::AABB,2ul>,8ul,re::Hash<unsigned int>,re::EqualTo<unsigned int>,false>::tryGet((uint64_t)&a4[6], &v219);
                          v14 = v171;
                          v172 = *(_QWORD *)(v171 + 8);
                          v173 = v213;
                          v174.i64[0] = 0x7F0000007FLL;
                          v174.i64[1] = 0x7F0000007FLL;
                          if (v172 < v10)
                          {
                            if (*(_QWORD *)v171)
                            {
                              if ((*(_DWORD *)(v171 + 16) & 1) == 0)
                                goto LABEL_237;
LABEL_239:
                              v175 = 2;
                            }
                            else
                            {
                              re::DynamicOverflowArray<re::AABB,2ul>::setCapacity((_QWORD *)v14, v10);
                              v174.i64[0] = 0x7F0000007FLL;
                              v174.i64[1] = 0x7F0000007FLL;
                              v173 = v213;
                              v176 = *(_DWORD *)(v14 + 16) + 2;
                              *(_DWORD *)(v14 + 16) = v176;
                              if ((v176 & 1) != 0)
                                goto LABEL_239;
LABEL_237:
                              v175 = *(_QWORD *)(v14 + 32);
                            }
                            if (v175 < v10)
                            {
                              re::DynamicOverflowArray<re::AABB,2ul>::setCapacity((_QWORD *)v14, v10);
                              v174.i64[0] = 0x7F0000007FLL;
                              v174.i64[1] = 0x7F0000007FLL;
                              v173 = v213;
                            }
                            v177 = *(_QWORD *)(v14 + 8);
                            v178 = v10 - v177;
                            if (v10 > v177)
                            {
                              v179 = 32 * v177;
                              do
                              {
                                v180 = v14 + 32;
                                if ((*(_BYTE *)(v14 + 16) & 1) == 0)
                                  v180 = *(_QWORD *)(v14 + 40);
                                v181 = (int32x4_t *)(v180 + v179);
                                *v181 = v173;
                                v181[1] = v174;
                                v179 += 32;
                                --v178;
                              }
                              while (v178);
                            }
                            *(_QWORD *)(v14 + 8) = v10;
                            *(_DWORD *)(v14 + 16) += 2;
                            v172 = v10;
                          }
                          if (v172 <= v13)
                          {
                            v224[2] = 0;
                            v228 = 0u;
                            v229 = 0u;
                            v226 = 0u;
                            v227 = 0u;
                            v225 = 0u;
                            v51 = MEMORY[0x24BDACB70];
                            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                            *(_DWORD *)v242 = 136315906;
                            *(_QWORD *)&v242[4] = "operator[]";
                            v243 = 1024;
                            v244 = 858;
                            v245 = 2048;
                            v246 = v13;
                            v247 = 2048;
                            v248 = v172;
                            _os_log_send_and_compose_impl();
                            _os_crash_msg();
                            __break(1u);
                            goto LABEL_264;
                          }
                          if ((*(_BYTE *)(v14 + 16) & 1) != 0)
                            v182 = v14 + 32;
                          else
                            v182 = *(_QWORD *)(v14 + 40);
                          v183 = (float32x4_t *)(v182 + 32 * v13);
                          v184 = (float32x4_t)v221[0];
                          v185 = *v183;
                          v186 = v183[1];
                          v185.i32[3] = 0;
                          v184.i32[3] = 0;
                          *v183 = vminnmq_f32(v185, v184);
                          v187 = (float32x4_t)v221[1];
                          v186.i32[3] = 0;
                          v187.i32[3] = 0;
                          v183[1] = vmaxnmq_f32(v186, v187);
                          if (++v169 == v170)
                            goto LABEL_253;
                          continue;
                        }
                      }
LABEL_254:
                      v188 = a4[4];
                      v189 = a4[5];
                      v188.i32[3] = 0;
                      v190 = v222;
                      v191 = v223;
                      v190.i32[3] = 0;
                      v189.i32[3] = 0;
                      v191.i32[3] = 0;
                      a4[4] = vminnmq_f32(v188, v190);
                      a4[5] = vmaxnmq_f32(v189, v191);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v109 += 3;
    }
    while (v109 != (unsigned int *)v11);
  }
LABEL_256:
  if (*(_QWORD *)v235 && (v235[16] & 1) == 0)
    (*(void (**)(void))(**(_QWORD **)v235 + 40))();
  result = (uint64_t)v237;
  if (v237)
  {
    if ((v239 & 1) == 0)
      return (*(uint64_t (**)(void))(*v237 + 40))();
  }
  return result;
}

uint64_t re::Slice<re::FilteredMeshPass>::operator[](uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a2 > a3)
    return a1 + 24 * a3;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, a2, v3, v4);
  result = _os_crash();
  __break(1u);
  return result;
}

double re::RenderGraphMeshNodeBase::setColorAttachment(uint64_t a1, int a2, uint64_t *a3, __int128 *a4, char a5, uint64_t a6)
{
  __int128 v12;
  double result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  char v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v15 = 0x600000001;
  re::RenderGraphMeshNodeBase::removeTargetWritesWithTypes(a1, (uint64_t)&v15, 2uLL, a2);
  v12 = *a4;
  v15 = *a3;
  v16 = a3[1];
  v17 = a2;
  v18 = 1;
  v14 = v12;
  v19 = v12;
  v20 = a5;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  *(_QWORD *)&result = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(a1 + 216), (uint64_t)&v15).n128_u64[0];
  if (*(_BYTE *)a6)
  {
    v15 = *(_QWORD *)(a6 + 8);
    v16 = *(_QWORD *)(a6 + 16);
    v17 = a2;
    v18 = 6;
    v19 = v14;
    v20 = a5;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    *(_QWORD *)&result = re::DynamicArray<re::TargetWrite>::add((_anonymous_namespace_ *)(a1 + 216), (uint64_t)&v15).n128_u64[0];
  }
  return result;
}

double re::RenderGraphMeshNodeBase::setDepthOnlyAttachment(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, float a5)
{
  __int128 v9;
  _anonymous_namespace_ *v10;
  double result;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  char v19;
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v14 = 0x700000002;
  re::RenderGraphMeshNodeBase::removeTargetWritesWithTypes(a1, (uint64_t)&v14, 2uLL, 0);
  *(_QWORD *)&v9 = LODWORD(a5);
  DWORD2(v9) = 0;
  HIDWORD(v9) = 1.0;
  v10 = (_anonymous_namespace_ *)(a1 + 216);
  v14 = *a2;
  v15 = a2[1];
  v16 = 0x200000000;
  v13 = v9;
  v17 = v9;
  v18 = a3;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  *(_QWORD *)&result = re::DynamicArray<re::TargetWrite>::add(v10, (uint64_t)&v14).n128_u64[0];
  if (*(_BYTE *)a4)
  {
    v14 = *(_QWORD *)(a4 + 8);
    v15 = *(_QWORD *)(a4 + 16);
    v16 = 0x700000000;
    v17 = v13;
    v18 = a3;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    *(_QWORD *)&result = re::DynamicArray<re::TargetWrite>::add(v10, (uint64_t)&v14).n128_u64[0];
  }
  return result;
}

uint64_t *re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t i;
  uint64_t j;
  int v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  char v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  char v58;
  char v59;
  unsigned int v60;
  char v61;
  unsigned int v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  _BYTE v69[14];
  __int16 v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v65 = 0;
  v63 = 0u;
  v64 = 0u;
  v66 = 0x7FFFFFFFLL;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)&v63, a3, 3);
  v58 = 0;
  v53 = 0;
  if (!a1[29])
  {
    v38 = HIDWORD(v64);
    goto LABEL_104;
  }
  v7 = 0;
  LODWORD(v3) = 0;
  while (2)
  {
    v8 = a1[31] + (v7 << 6);
    v9 = (unsigned int *)(v8 + 16);
    switch(*(_DWORD *)(v8 + 20))
    {
      case 1:
        v10 = *v9;
        if (!re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)&v63, *v9))
        {
          LOBYTE(v74) = 1;
          DWORD1(v74) = v3;
          BYTE8(v74) = 0;
          goto LABEL_54;
        }
        v11 = v63;
        if ((_QWORD)v63)
        {
          v12 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
          v13 = v64;
          v14 = *(unsigned int *)(*((_QWORD *)&v63 + 1) + 4 * ((v12 ^ (v12 >> 31)) % DWORD2(v64)));
          if ((_DWORD)v14 != 0x7FFFFFFF)
          {
            do
            {
              if (*(_DWORD *)(v64 + 32 * v14 + 12) == (_DWORD)v10)
                goto LABEL_64;
              v14 = *(_DWORD *)(v64 + 32 * v14 + 8) & 0x7FFFFFFF;
            }
            while (v14 != 0x7FFFFFFF);
          }
        }
        else
        {
          v13 = v64;
        }
        v14 = 0x7FFFFFFFLL;
LABEL_64:
        if (*(_BYTE *)(v13 + 32 * v14 + 16))
        {
          v25 = a1[2];
          v51 = 0;
          v52 = -1;
          v51 = *(_QWORD *)v8;
          v52 = *(_QWORD *)(v8 + 8);
          re::RenderGraphCompiled::targetName(a2, (uint64_t)&v51, (re::StringID *)&v68);
          re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one color target to attachmentIndex %u. Using target %s.", (re::DynamicString *)&v74, v25, v10, *(_QWORD *)&v69[4]);
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
          if ((_QWORD)v74)
          {
            if ((BYTE8(v74) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v74 + 40))();
            v74 = 0u;
            v75 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v68);
          LODWORD(v10) = *v9;
        }
        if (v11
          && (v26 = 0xBF58476D1CE4E5B9 * (v10 ^ ((unint64_t)v10 >> 30)),
              v27 = *(unsigned int *)(*((_QWORD *)&v63 + 1)
                                    + 4
                                    * (((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                       * (v26 ^ (v26 >> 27))) >> 31))
                                     % DWORD2(v64))),
              (_DWORD)v27 != 0x7FFFFFFF))
        {
          for (i = v27; *(_DWORD *)(v13 + 32 * i + 12) != (_DWORD)v10; v27 = i)
          {
            i = *(_DWORD *)(v13 + 32 * i + 8) & 0x7FFFFFFF;
            v27 = 0x7FFFFFFFLL;
            if (i == 0x7FFFFFFF)
              break;
          }
        }
        else
        {
          v27 = 0x7FFFFFFFLL;
        }
        v28 = v13 + 32 * v27;
        v30 = *(unsigned __int8 *)(v28 + 16);
        v29 = v28 + 16;
        if (!v30)
          *(_BYTE *)v29 = 1;
        *(_DWORD *)(v29 + 4) = v3;
        goto LABEL_90;
      case 2:
        if (!v58)
        {
          LOBYTE(v74) = 1;
          BYTE4(v74) = 1;
          DWORD2(v74) = v3;
          BYTE12(v74) = 0;
          goto LABEL_58;
        }
        if (!v59)
          goto LABEL_17;
        v15 = a1[2];
        v47 = 0;
        v48 = -1;
        v47 = *(_QWORD *)v8;
        v48 = *(_QWORD *)(v8 + 8);
        re::RenderGraphCompiled::targetName(a2, (uint64_t)&v47, (re::StringID *)&v68);
        re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one depth target. Using target %s.", (re::DynamicString *)&v74, v15, *(_QWORD *)&v69[4]);
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
        if ((_QWORD)v74)
        {
          if ((BYTE8(v74) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v74 + 40))();
          v74 = 0u;
          v75 = 0u;
        }
        re::StringID::destroyString((re::StringID *)&v68);
        if (!v59)
LABEL_17:
          v59 = 1;
        v60 = v3;
        goto LABEL_90;
      case 3:
        if (!v53)
        {
          LOBYTE(v74) = 1;
          BYTE4(v74) = 1;
          DWORD2(v74) = v3;
          BYTE12(v74) = 0;
          goto LABEL_60;
        }
        if (!v54)
          goto LABEL_26;
        v16 = a1[2];
        v43 = 0;
        v44 = -1;
        v43 = *(_QWORD *)v8;
        v44 = *(_QWORD *)(v8 + 8);
        re::RenderGraphCompiled::targetName(a2, (uint64_t)&v43, (re::StringID *)&v68);
        re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one stencil target. Using target %s.", (re::DynamicString *)&v74, v16, *(_QWORD *)&v69[4]);
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
        if ((_QWORD)v74)
        {
          if ((BYTE8(v74) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v74 + 40))();
          v74 = 0u;
          v75 = 0u;
        }
        re::StringID::destroyString((re::StringID *)&v68);
        if (!v54)
LABEL_26:
          v54 = 1;
        v55 = v3;
        goto LABEL_90;
      case 6:
        v17 = *v9;
        if (re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)&v63, *v9))
        {
          v18 = v63;
          if ((_QWORD)v63)
          {
            v19 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
            v20 = v64;
            v21 = *(unsigned int *)(*((_QWORD *)&v63 + 1) + 4 * ((v19 ^ (v19 >> 31)) % DWORD2(v64)));
            if ((_DWORD)v21 != 0x7FFFFFFF)
            {
              while (*(_DWORD *)(v64 + 32 * v21 + 12) != (_DWORD)v17)
              {
                v21 = *(_DWORD *)(v64 + 32 * v21 + 8) & 0x7FFFFFFF;
                if (v21 == 0x7FFFFFFF)
                  goto LABEL_77;
              }
LABEL_78:
              if (*(_BYTE *)(v20 + 32 * v21 + 24))
              {
                v31 = a1[2];
                v49 = 0;
                v50 = -1;
                v49 = *(_QWORD *)v8;
                v50 = *(_QWORD *)(v8 + 8);
                re::RenderGraphCompiled::targetName(a2, (uint64_t)&v49, (re::StringID *)&v68);
                re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one color resolve target to attachmentIndex %u. Using target %s.", (re::DynamicString *)&v74, v31, v17, *(_QWORD *)&v69[4]);
                re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
                if ((_QWORD)v74)
                {
                  if ((BYTE8(v74) & 1) != 0)
                    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
                  v74 = 0u;
                  v75 = 0u;
                }
                re::StringID::destroyString((re::StringID *)&v68);
                LODWORD(v17) = *v9;
              }
              if (v18
                && (v32 = 0xBF58476D1CE4E5B9 * (v17 ^ ((unint64_t)v17 >> 30)),
                    v33 = *(unsigned int *)(*((_QWORD *)&v63 + 1)
                                          + 4
                                          * (((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                             * (v32 ^ (v32 >> 27))) >> 31))
                                           % DWORD2(v64))),
                    (_DWORD)v33 != 0x7FFFFFFF))
              {
                for (j = v33; *(_DWORD *)(v20 + 32 * j + 12) != (_DWORD)v17; v33 = j)
                {
                  j = *(_DWORD *)(v20 + 32 * j + 8) & 0x7FFFFFFF;
                  v33 = 0x7FFFFFFFLL;
                  if (j == 0x7FFFFFFF)
                    break;
                }
              }
              else
              {
                v33 = 0x7FFFFFFFLL;
              }
              v34 = v20 + 32 * v33;
              if (!*(_BYTE *)(v34 + 24))
                *(_BYTE *)(v34 + 24) = 1;
              *(_DWORD *)(v34 + 28) = v3;
              goto LABEL_90;
            }
          }
          else
          {
            v20 = v64;
          }
LABEL_77:
          v21 = 0x7FFFFFFFLL;
          goto LABEL_78;
        }
        LOBYTE(v74) = 0;
        BYTE8(v74) = 1;
        HIDWORD(v74) = v3;
LABEL_54:
        re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addNew((uint64_t)&v63, (_DWORD *)(v8 + 16), (unsigned __int8 *)&v74);
LABEL_90:
        v7 = (v3 + 1);
        v35 = a1[29];
        v3 = v7;
        if (v35 > v7)
          continue;
        v38 = v53;
        if (!HIDWORD(v64))
        {
          if (v58)
          {
            if (!v53)
              return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v63);
LABEL_113:
            v39 = v60;
            if (v35 <= v60)
            {
              v67 = 0;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v74 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v68 = 136315906;
              *(_QWORD *)v69 = "operator[]";
              *(_WORD *)&v69[8] = 1024;
              *(_DWORD *)&v69[10] = 797;
              v70 = 2048;
              v71 = v39;
              v72 = 2048;
              v73 = v35;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            else
            {
              v3 = v55;
              if (v35 > v55)
              {
                if (*(_DWORD *)(a1[31] + ((unint64_t)v60 << 6) + 8) != *(_DWORD *)(a1[31]
                                                                                         + ((unint64_t)v55 << 6)
                                                                                         + 8))
                {
                  re::DynamicString::format((re::DynamicString *)"(%s): Depth and stencil attachment, if both bound, must use the same target", (re::DynamicString *)&v74, a1[2]);
                  re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
                  if ((_QWORD)v74)
                  {
                    if ((BYTE8(v74) & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v74 + 40))();
                  }
                }
                if (v61)
                {
                  if (v56)
                    goto LABEL_127;
                }
                else if (!v56)
                {
                  return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v63);
                }
                re::DynamicString::format((re::DynamicString *)"(%s): Depth and stencil either both use the same resolve target, or don't use resolve target at all.", (re::DynamicString *)&v74, a1[2]);
                re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
                if ((_QWORD)v74 && (BYTE8(v74) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v74 + 40))();
                if (!v61)
                  return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v63);
LABEL_127:
                v39 = v62;
                v35 = a1[29];
                if (v35 > v62)
                {
                  v3 = v57;
                  if (v35 > v57)
                  {
                    if (*(_DWORD *)(a1[31] + ((unint64_t)v62 << 6) + 8) != *(_DWORD *)(a1[31]
                                                                                             + ((unint64_t)v57 << 6)
                                                                                             + 8))
                    {
                      re::DynamicString::format((re::DynamicString *)"(%s): Depth and stencil either both use the same resolve target, or don't use resolve target at all.", (re::DynamicString *)&v74, a1[2]);
                      re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
                      if ((_QWORD)v74)
                      {
                        if ((BYTE8(v74) & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v74 + 40))();
                      }
                    }
                    return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v63);
                  }
LABEL_137:
                  v67 = 0;
                  v77 = 0u;
                  v78 = 0u;
                  v75 = 0u;
                  v76 = 0u;
                  v74 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v68 = 136315906;
                  *(_QWORD *)v69 = "operator[]";
                  *(_WORD *)&v69[8] = 1024;
                  *(_DWORD *)&v69[10] = 797;
                  v70 = 2048;
                  v71 = v3;
                  v72 = 2048;
                  v73 = v35;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_138:
                  re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Invalid RenderGraphResourceOperationType for RenderGraphMeshNode.", "!\"Unreachable code\"", "validateAttachmentsDuringGraphBuild", 885);
                  _os_crash();
                  __break(1u);
                }
LABEL_136:
                v67 = 0;
                v77 = 0u;
                v78 = 0u;
                v75 = 0u;
                v76 = 0u;
                v74 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v68 = 136315906;
                *(_QWORD *)v69 = "operator[]";
                *(_WORD *)&v69[8] = 1024;
                *(_DWORD *)&v69[10] = 797;
                v70 = 2048;
                v71 = v39;
                v72 = 2048;
                v73 = v35;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_137;
              }
            }
            v67 = 0;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v74 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v68 = 136315906;
            *(_QWORD *)v69 = "operator[]";
            *(_WORD *)&v69[8] = 1024;
            *(_DWORD *)&v69[10] = 797;
            v70 = 2048;
            v71 = v3;
            v72 = 2048;
            v73 = v35;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_136;
          }
LABEL_104:
          if (!v38)
          {
            re::DynamicString::format((re::DynamicString *)"(%s): No attachments are bound.", (re::DynamicString *)&v74, a1[2]);
            re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
            if ((_QWORD)v74 && (BYTE8(v74) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v74 + 40))();
            v38 = v53;
            if (v58)
              goto LABEL_109;
          }
          return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v63);
        }
        if (!v58)
          return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v63);
LABEL_109:
        if (v38)
        {
          v35 = a1[29];
          goto LABEL_113;
        }
        return re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)&v63);
      case 7:
        if (v58)
        {
          if (!v61)
            goto LABEL_41;
          v22 = a1[2];
          v45 = 0;
          v46 = -1;
          v45 = *(_QWORD *)v8;
          v46 = *(_QWORD *)(v8 + 8);
          re::RenderGraphCompiled::targetName(a2, (uint64_t)&v45, (re::StringID *)&v68);
          re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one depth resolve target. Using target %s.", (re::DynamicString *)&v74, v22, *(_QWORD *)&v69[4]);
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
          if ((_QWORD)v74)
          {
            if ((BYTE8(v74) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            v74 = 0u;
            v75 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v68);
          if (!v61)
LABEL_41:
            v61 = 1;
          v62 = v3;
          goto LABEL_90;
        }
        LOBYTE(v74) = 1;
        BYTE4(v74) = 0;
        BYTE12(v74) = 1;
        LODWORD(v75) = v3;
LABEL_58:
        v24 = (unsigned __int8 *)&v58;
        goto LABEL_61;
      case 8:
        if (v53)
        {
          if (!v56)
            goto LABEL_50;
          v23 = a1[2];
          v41 = 0;
          v42 = -1;
          v41 = *(_QWORD *)v8;
          v42 = *(_QWORD *)(v8 + 8);
          re::RenderGraphCompiled::targetName(a2, (uint64_t)&v41, (re::StringID *)&v68);
          re::DynamicString::format((re::DynamicString *)"(%s): Cannot bind more than one stencil resolve target. Using target %s.", (re::DynamicString *)&v74, v23, *(_QWORD *)&v69[4]);
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v74);
          if ((_QWORD)v74)
          {
            if ((BYTE8(v74) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v74 + 40))(v74, v75);
            v74 = 0u;
            v75 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v68);
          if (!v56)
LABEL_50:
            v56 = 1;
          v57 = v3;
        }
        else
        {
          LOBYTE(v74) = 1;
          BYTE4(v74) = 0;
          BYTE12(v74) = 1;
          LODWORD(v75) = v3;
LABEL_60:
          v24 = &v53;
LABEL_61:
          re::Optional<re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair>::operator=((uint64_t)v24, (unsigned __int8 *)&v74);
        }
        goto LABEL_90;
      default:
        goto LABEL_138;
    }
  }
}

BOOL re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v5 + 32 * v3 + 12) == a2)
    return 1;
  do
  {
    v3 = *(_DWORD *)(v5 + 32 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_DWORD *)(v5 + 32 * v3 + 12) != a2);
  return result;
}

void re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addNew(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (*(_DWORD *)(v11 + 32 * v10 + 12) == (_DWORD)v6)
        return;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_DWORD *)(v11 + 32 * v10 + 12) == (_DWORD)v6)
          return;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, v9, v8, a2, a3);
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::Optional<re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair>::operator=(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  int v6;
  int v7;

  v2 = *a2;
  if (*(_BYTE *)result)
    v3 = 0;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    if (*(_BYTE *)result)
      v4 = v2 == 0;
    else
      v4 = 0;
    if (v4)
    {
      *(_BYTE *)result = 0;
      return result;
    }
    if (*(_BYTE *)result)
      v5 = 1;
    else
      v5 = v2 == 0;
    if (v5)
    {
      if (*(_BYTE *)(result + 4) || a2[4])
      {
        if (!*(_BYTE *)(result + 4) || a2[4])
        {
          if (!*(_BYTE *)(result + 4) && a2[4])
            *(_BYTE *)(result + 4) = 1;
          *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
        }
        else
        {
          *(_BYTE *)(result + 4) = 0;
        }
      }
      if (*(_BYTE *)(result + 12) || a2[12])
      {
        if (!*(_BYTE *)(result + 12) || a2[12])
        {
          if (!*(_BYTE *)(result + 12) && a2[12])
            *(_BYTE *)(result + 12) = 1;
          goto LABEL_23;
        }
        *(_BYTE *)(result + 12) = 0;
      }
    }
    else
    {
      *(_BYTE *)result = 1;
      v6 = a2[4];
      *(_BYTE *)(result + 4) = v6;
      if (v6)
        *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
      v7 = a2[12];
      *(_BYTE *)(result + 12) = v7;
      if (v7)
LABEL_23:
        *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
    }
  }
  return result;
}

uint64_t *re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 32 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 32;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

uint64_t re::RenderGraphMeshNodeBase::validateAttachmentsPerFrame(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD v40[2];
  _OWORD v41[2];
  uint64_t v42;
  int v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(result + 232);
  if (!v2)
    return result;
  v4 = (_QWORD *)result;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v35 = 0;
  memset(v41, 0, sizeof(v41));
  v37 = 0xFFFFFFFFLL;
  v39 = 0xFFFFFFFFLL;
  v36 = 0xFFFFFFFFLL;
  v38 = -1;
  while (1)
  {
    v10 = v4[31];
    v11 = v10 + v5;
    if (*(_DWORD *)(v10 + v5 + 8) == -1 || *(_DWORD *)(v11 + 12) == -1)
      goto LABEL_77;
    if (v2 <= v6)
    {
      v40[0] = 0;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v43 = 136315906;
      v44 = "operator[]";
      v45 = 1024;
      v46 = 797;
      v47 = 2048;
      v48 = v6;
      v49 = 2048;
      v50 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_90:
      v42 = 0;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v43 = 136315906;
      v44 = "operator[]";
      v45 = 1024;
      v46 = 797;
      v47 = 2048;
      v48 = v6;
      v49 = 2048;
      v50 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_91:
      v42 = 0;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v43 = 136315906;
      v44 = "operator[]";
      v45 = 1024;
      v46 = 797;
      v47 = 2048;
      v48 = v6;
      v49 = 2048;
      v50 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = v10 + v5;
    v13 = *(_DWORD *)(v12 + 20);
    if (v13 == 5)
      goto LABEL_77;
    v14 = *(unsigned int *)(v12 + 16);
    re::RenderGraphResourceDescriptions::targetDescriptionSource(*(_QWORD *)(a2 + 136), v11, (uint64_t)v40);
    result = re::RenderGraphExecutable::targetDescription(a2, (uint64_t)v40);
    v15 = (unsigned int *)result;
    if ((v8 & 1) != 0)
    {
      v16 = v39;
      if (*(_DWORD *)(result + 12) != (_DWORD)v36)
      {
        re::DynamicString::format((re::DynamicString *)"(%s): Multiple render targets don't have the same width: AttachmentIndex %d: %d, expected %d.", (re::DynamicString *)&v51, v4[2], v14, v36, *(unsigned int *)(result + 12));
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        result = v51;
        if ((_QWORD)v51)
        {
          if ((BYTE8(v51) & 1) != 0)
            result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
        }
      }
      if (v15[4] != (_DWORD)v37)
      {
        re::DynamicString::format((re::DynamicString *)"(%s): Multiple render targets don't have the same height: AttachmentIndex %d: %d, expected %d.", (re::DynamicString *)&v51, v4[2], v14, v37, v15[4]);
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        result = v51;
        if ((_QWORD)v51)
        {
          if ((BYTE8(v51) & 1) != 0)
            result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
        }
      }
      v17 = v15[6];
      if ((_DWORD)v17 != (_DWORD)v39)
      {
        re::DynamicString::format((re::DynamicString *)"(%s): Multiple render targets don't have the same arrayLength: AttachmentIndex %d: %d, expected %d.", (re::DynamicString *)&v51, v4[2], v14, v39, v17);
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        result = v51;
        if ((_QWORD)v51)
        {
          if ((BYTE8(v51) & 1) != 0)
            result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
        }
      }
    }
    else
    {
      v16 = *(unsigned int *)(result + 24);
      v36 = *(unsigned int *)(result + 12);
      v37 = *(unsigned int *)(result + 16);
    }
    v39 = v16;
    if (v13 > 8)
    {
LABEL_37:
      LODWORD(v20) = v38;
      goto LABEL_60;
    }
    v18 = 1 << v13;
    if (((1 << v13) & 0x42) == 0)
    {
      if ((v18 & 0x84) == 0)
      {
        if ((v18 & 0x108) == 0)
          goto LABEL_37;
        v8 = v4[29];
        if (v8 <= v6)
          goto LABEL_90;
        v19 = v15[1];
        if (*(_BYTE *)(v4[31] + v5 + 49))
        {
          LODWORD(v20) = v38;
          if ((v19 - 250) > 0xA)
            goto LABEL_82;
          v21 = 1 << (v19 + 6);
          v22 = 1069;
        }
        else
        {
          LODWORD(v20) = v38;
          if ((v19 - 253) > 9)
            goto LABEL_82;
          v21 = 1 << (v19 + 3);
          v22 = 901;
        }
        if ((v21 & v22) != 0)
        {
LABEL_41:
          v28 = v15[1];
          if (v9)
            v29 = v9;
          else
            v29 = v28;
          if (v28 != (_DWORD)v29)
          {
            v9 = v29;
            re::DynamicString::format((re::DynamicString *)"(%s): Stencil target format and resolve target format don't match (%d vs %d)", (re::DynamicString *)&v51, v4[2], v15[1], v29, v34);
            goto LABEL_56;
          }
          v9 = v15[1];
          goto LABEL_60;
        }
LABEL_82:
        re::DynamicString::format((re::DynamicString *)"(%s): Invalid stencil target format: %d", (re::DynamicString *)&v51, v4[2], v19);
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        result = v51;
        if ((_QWORD)v51 && (BYTE8(v51) & 1) != 0)
          result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
        goto LABEL_41;
      }
      v8 = v4[29];
      if (v8 <= v6)
        goto LABEL_91;
      v25 = v15[1];
      if (*(_BYTE *)(v4[31] + v5 + 49))
      {
        LODWORD(v20) = v38;
        if ((v25 - 250) > 0xA)
          goto LABEL_79;
        v26 = 1 << (v25 + 6);
        v27 = 1069;
      }
      else
      {
        LODWORD(v20) = v38;
        if ((v25 - 250) > 0xA)
          goto LABEL_79;
        v26 = 1 << (v25 + 6);
        v27 = 1061;
      }
      if ((v26 & v27) != 0)
      {
LABEL_50:
        v30 = v15[1];
        if (v7)
          v31 = v7;
        else
          v31 = v30;
        if (v30 != (_DWORD)v31)
        {
          v7 = v31;
          re::DynamicString::format((re::DynamicString *)"(%s): Depth target format and resolve target format don't match (%d vs %d)", (re::DynamicString *)&v51, v4[2], v15[1], v31, v34);
          goto LABEL_56;
        }
        v7 = v15[1];
        goto LABEL_60;
      }
LABEL_79:
      re::DynamicString::format((re::DynamicString *)"(%s): Invalid depth target format: %d", (re::DynamicString *)&v51, v4[2], v25);
      re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
      result = v51;
      if ((_QWORD)v51 && (BYTE8(v51) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
      goto LABEL_50;
    }
    LODWORD(v20) = v38;
    if (v14 > 7)
      break;
    v23 = *((unsigned int *)v41 + v14);
    v24 = v15[1];
    if ((_DWORD)v23)
    {
      if (v24 != (_DWORD)v23)
      {
        re::DynamicString::format((re::DynamicString *)"(%s): Attachment Index (%d) target format and resolve target format don't match (%d vs %d)", (re::DynamicString *)&v51, v4[2], v14, v15[1], v23);
LABEL_56:
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        result = v51;
        if ((_QWORD)v51 && (BYTE8(v51) & 1) != 0)
          result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
      }
    }
    else
    {
      *((_DWORD *)v41 + v14) = v24;
    }
LABEL_60:
    if (v13 - 1 > 2)
    {
      if (v13 - 6 <= 2)
      {
        v33 = v15[5];
        if ((_DWORD)v33 != 1 || v15[20] == -1)
        {
          re::DynamicString::format((re::DynamicString *)"(%s): Attachment Index (%d) has resolve target with sample count (%d) > 1, or the resolve target is not pointing at its corresponding MSAA target.", (re::DynamicString *)&v51, v4[2], v14, v33);
          re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
          result = v51;
          if ((_QWORD)v51)
          {
            if ((BYTE8(v51) & 1) != 0)
              result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
          }
        }
      }
    }
    else
    {
      v32 = v15[5];
      if (v35)
        v20 = v20;
      else
        v20 = v32;
      if (v32 == (_DWORD)v20)
      {
        v35 = 1;
        v38 = v15[5];
      }
      else
      {
        v34 = v20;
        re::DynamicString::format((re::DynamicString *)"(%s): Attachment Index (%d) has a sample count (%d) that does not match other attachments (%d).", (re::DynamicString *)&v51, v4[2], v14, v15[5]);
        re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
        result = v51;
        if ((_QWORD)v51)
        {
          if ((BYTE8(v51) & 1) != 0)
            result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
        }
        v38 = v20;
        v35 = 1;
      }
    }
    v2 = v4[29];
    v8 = 1;
LABEL_77:
    ++v6;
    v5 += 64;
    if (v2 <= v6)
      return result;
  }
  re::DynamicString::format((re::DynamicString *)"(%s): Attachment index %d is greater than pixelFormats array fixed size (%d).", (re::DynamicString *)&v51, v4[2], v14, 8);
  re::RenderGraphExecutable::addError(a2, (uint64_t)&v51);
  result = v51;
  if ((_QWORD)v51 && (BYTE8(v51) & 1) != 0)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v51 + 40))(v51, v52);
  return result;
}

void *re::RenderGraphMeshNodeBase::depthSort(re *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,unint64_t a30,int a31,__int128 *a32,unsigned int a33,float a34,float a35,unsigned int a36,float a37,int a38,__int16 a39,char a40,char a41,char a42,char a43,char a44,char a45,char a46,char a47,char a48,char a49,char a50,int a51,char a52,unsigned __int8 a53,char a54,char a55,char a56,int a57,__int128 a58,float32x4_t a59,uint64_t a60,uint64_t (**a61)(),float a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t (***a65)();
  __int128 a66;
  float32x4_t a67;
  float32x4_t a68;
  uint64_t a74;
  int v70;
  float v71;
  unsigned int *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  int32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t v88;
  unsigned int *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  float32x4_t v95;
  uint64_t v96;
  float32x4_t v97;
  uint32x4_t v98;
  float v99;
  float v100;
  unsigned int v101;
  float v102;
  float v103;
  _QWORD *v104;
  float32x4_t *v105;
  float32x4_t v106;
  uint32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  char v115;
  int v116;
  float v117;
  unsigned __int8 v118;
  uint64_t v119;
  int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  char v129;
  char v130;
  char v131;
  char v132;
  uint64_t v133;
  int v134;
  int v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  int SortingDebugContextAndReturnIndex;
  float32x4_t v140;
  uint64_t v141;
  __int128 *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  void *result;
  unint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  float32x4_t vars0;
  unsigned int *v160;
  _QWORD *v161;
  int v162;
  int v163;
  unsigned int v164;
  __int16 v166;
  char v167;
  int v168;
  char v169;
  char v170;
  char v171;

  a74 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a1 == 2)
    v70 = -1;
  else
    v70 = 1;
  v71 = (float)v70;
  v72 = *(unsigned int **)(a4 + 32);
  v73 = *(_QWORD *)(a4 + 16);
  v74 = re::globalAllocators(a1)[2];
  a61 = &off_24ED859C8;
  a62 = v71;
  a64 = v74;
  a65 = &a61;
  a32 = 0;
  a29 = 0;
  a30 = 0;
  a31 = 0;
  a28 = a7;
  re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(&a28, v73);
  ++a31;
  v75 = re::RenderGraphDataStore::get<re::CameraData>(*(_QWORD *)(a3 + 1168), *(_QWORD *)(*(_QWORD *)(a3 + 40) + 48));
  if (!*(_QWORD *)(v75 + 48))
  {
LABEL_90:
    v153 = 0uLL;
    re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389);
    _os_crash();
    __break(1u);
LABEL_91:
    a66 = a58;
    a67 = a59;
    if (!*(_BYTE *)(a5 + 208))
      *(_BYTE *)(a5 + 208) = 1;
    v140 = a67;
    *(_OWORD *)(a5 + 224) = a66;
    *(float32x4_t *)(a5 + 240) = v140;
    if (v73)
      goto LABEL_7;
    goto LABEL_94;
  }
  v77 = v75;
  re::RenderCamera::computeLocalTransform((re::RenderCamera *)(v75 + 64), (uint64_t)&a66);
  v83 = (int32x4_t)vmulq_f32(a68, a68);
  v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
  v84 = vrsqrte_f32((float32x2_t)v83.u32[0]);
  v85 = vmul_f32(v84, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v84, v84)));
  a59 = vnegq_f32(vmulq_n_f32(a68, vmul_f32(v85, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v85, v85))).f32[0]));
  v87 = *(_QWORD *)(v77 + 64);
  v86 = *(_QWORD *)(v77 + 72);
  *(_QWORD *)&a58 = v87;
  *((_QWORD *)&a58 + 1) = v86;
  if (a5)
    goto LABEL_91;
  if (v73)
  {
LABEL_7:
    v88.i64[0] = v87;
    v88.i64[1] = v86;
    vars0 = v88;
    v89 = &v72[3 * v73];
    v160 = v89;
    v161 = a2;
    while (1)
    {
      v90 = *((unsigned __int8 *)v72 + 4);
      v91 = a2[1];
      if (v91 <= v90)
      {
        re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *((unsigned __int8 *)v72 + 4), v91);
        _os_crash();
        __break(1u);
        goto LABEL_90;
      }
      v92 = *a2;
      v93 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(*a2 + 24 * *((unsigned __int8 *)v72 + 4)), *v72);
      v73 = v93;
      v96 = *(_QWORD *)(v93 + 32);
      if (*(_DWORD *)(v93 + 144) != -1 || (v104 = *(_QWORD **)(v93 + 216)) != 0 && *v104)
      {
        a56 = 0;
        if (a5)
        {
          SortingDebugContextAndReturnIndex = re::DrawCallRecorderGroup::allocateSortingDebugContextAndReturnIndex((re::DrawCallRecorderGroup *)a5);
          a56 = 1;
          a57 = SortingDebugContextAndReturnIndex;
        }
        v97 = *(float32x4_t *)(v96 + 16);
        v98 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v96, v97);
        v98.i32[3] = v98.i32[2];
        v98.i32[0] = vmaxvq_u32(v98);
        if ((v98.i32[0] & 0x80000000) == 0)
          break;
      }
LABEL_87:
      v72 += 3;
      if (v72 == v89)
        goto LABEL_94;
    }
    re::RenderGraphMeshNodeBase::computeSortDistance(v96, (float32x4_t *)(v73 + 64), (_BYTE *)(v73 + 152), (__n128 *)(v73 + 128), (float32x2_t *)&a58, &a59, a5, (uint64_t)&a56, *(double *)v98.i64, *(double *)v97.i64, v94, v95);
    v100 = v99;
    v101 = *(unsigned __int8 *)(v73 + 153);
    if ((v101 & 5) != 0)
      v102 = *(float *)(v73 + 164);
    else
      v102 = v99;
    if ((v101 & 8) != 0)
      v103 = *(float *)(v73 + 160);
    else
      v103 = v102;
    if (*(_BYTE *)(v73 + 157) || (v105 = *(float32x4_t **)(v73 + 168)) == 0)
    {
      v170 = 0;
    }
    else
    {
      v106 = *(float32x4_t *)(v96 + 16);
      v107 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v96, v106);
      v107.i32[3] = v107.i32[2];
      if ((vmaxvq_u32(v107) & 0x80000000) != 0)
      {
        v110 = 0uLL;
      }
      else
      {
        v108 = vaddq_f32(*(float32x4_t *)v96, v106);
        v109.i64[0] = 0x3F0000003F000000;
        v109.i64[1] = 0x3F0000003F000000;
        v110 = vmulq_f32(v108, v109);
      }
      v111 = v105[1];
      v112 = vmulq_f32(vsubq_f32(vars0, v111), *v105);
      v113 = vaddq_f32(*(float32x4_t *)(v73 + 112), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v73 + 64), v110.f32[0]), *(float32x4_t *)(v73 + 80), *(float32x2_t *)v110.f32, 1), *(float32x4_t *)(v73 + 96), v110, 2));
      v114 = vmulq_f32(*v105, vsubq_f32(vdivq_f32(v113, (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 3)), v111));
      if (((vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).u32[0] ^ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).u32[0]) & 0x80000000) != 0)v115 = 1;
      else
        v115 = -1;
      v170 = v115;
    }
    v116 = *(_DWORD *)(v73 + 184);
    v117 = *(float *)(v73 + 192);
    v118 = *(_BYTE *)(v92 + 24 * v90 + 8);
    v162 = *(_DWORD *)(v73 + 188);
    v163 = v101 & (v117 == 0.0);
    if (v118)
    {
      v119 = 0;
      v118 = 0;
      if ((v101 & (v117 == 0.0)) != 0)
        v120 = 2;
      else
        v120 = 0;
      v121 = (2 * v101) & 4;
      if ((v101 & 0x10) != 0)
        v121 = 4;
      v122 = v121 | (v101 >> 2) & 8 | v120;
      if (v122 <= 1)
        v122 = 1;
      do
      {
        if (((v122 >> v119) & 1) != 0
          && v118 <= *(unsigned __int8 *)(v92 + 24 * v90 + 9 + v119))
        {
          v118 = *(_BYTE *)(v92 + 24 * v90 + 9 + v119);
        }
        ++v119;
      }
      while (v119 != 4);
    }
    if ((v101 & 8) != 0)
    {
      v171 = v118;
      if ((v101 & 2) != 0)
      {
        v123 = *(unsigned __int8 *)(a6 + 89);
        if (v118 > v123)
          LOBYTE(v123) = v118;
        v171 = v123;
      }
    }
    else
    {
      v171 = 0;
    }
    if ((v101 & 1) != 0)
    {
      v164 = *(_DWORD *)(v73 + 184);
      if (*(_BYTE *)(v73 + 158))
      {
LABEL_63:
        v128 = *v72;
        v168 = *(_DWORD *)(v73 + 196);
        v169 = *((_BYTE *)v72 + 4);
        v129 = *((_BYTE *)v72 + 5);
        v130 = *(_BYTE *)(v73 + 150);
        v131 = *(_BYTE *)(v73 + 155);
        v166 = *(_WORD *)(v73 + 148);
        v167 = *(_BYTE *)(v73 + 154);
        v132 = *(_BYTE *)(v73 + 156);
        v133 = a5;
        if (a5)
        {
          LOBYTE(a5) = 1;
          a19 = a57;
        }
        v134 = *(unsigned __int8 *)(a6 + 88);
        if (a53 | v134)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a36 = v164;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a40 = 1;
          a41 = v171;
          a42 = v169;
          a43 = v129;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133)
            a51 = a19;
          if (v163 && (v116 != v162 && !v134 || a54 && !v134))
            a43 = v129 | 1;
          a68.i32[2] = 0;
          a68.i8[12] = 0;
          a66 = 0u;
          a67 = 0u;
          *(uint64_t *)((char *)&a67.i64[1] + 5) = 0;
          *(_QWORD *)&a66 = v133;
          ((void (*)(uint64_t (***)(), __int128 *, unsigned int *, __int128 *, __n128))(*a65)[2])(a65, &a32[4 * a30 - 4], &a33, &a66, v136);
          v135 = *(unsigned __int8 *)(a6 + 88);
        }
        else
        {
          v135 = 0;
        }
        if (a55 && !v135)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a40 = 1;
          a41 = v171;
          a42 = v169;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133)
            a51 = a19;
          a36 = *(_DWORD *)(v73 + 188);
          a43 = v129 | 2;
          a68.i32[2] = 0;
          a68.i8[12] = 0;
          a66 = 0u;
          a67 = 0u;
          *(uint64_t *)((char *)&a67.i64[1] + 5) = 0;
          *(_QWORD *)&a66 = v133;
          ((void (*)(uint64_t (***)(), __int128 *, unsigned int *, __int128 *, __n128))(*a65)[2])(a65, &a32[4 * a30 - 4], &a33, &a66, v137);
          v135 = *(unsigned __int8 *)(a6 + 88);
        }
        if (a54 && !v135)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a36 = v164;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a41 = v171;
          a42 = v169;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133)
            a51 = a19;
          a40 = 0;
          a43 = v129 | 2;
          a68.i32[2] = 0;
          a68.i8[12] = 0;
          a66 = 0u;
          a67 = 0u;
          *(uint64_t *)((char *)&a67.i64[1] + 5) = 0;
          *(_QWORD *)&a66 = v133;
          ((void (*)(uint64_t (***)(), __int128 *, unsigned int *, __int128 *, __n128))(*a65)[2])(a65, &a32[4 * a30 - 4], &a33, &a66, v138);
        }
        a5 = v133;
        v89 = v160;
        a2 = v161;
        goto LABEL_87;
      }
      if (*(_BYTE *)(v92 + 24 * v90 + 16))
        v124 = v117 == 0.0;
      else
        v124 = 1;
      v125 = v101 & 0xA;
      v126 = v124 || v125 == 0;
      v127 = v118 | 0x80000000;
      if (v126)
        v127 = *(_DWORD *)(v73 + 184);
    }
    else
    {
      v127 = v118 & ((int)(v101 << 29) >> 31);
    }
    v164 = v127;
    goto LABEL_63;
  }
LABEL_94:
  v141 = a4;
  if (a65)
  {
    ((void (*)(uint64_t (***)()))**a65)(a65);
    if (a65 != &a61)
      (*(void (**)(uint64_t))(*(_QWORD *)a64 + 40))(a64);
    a65 = 0;
  }
  v142 = a32;
  v143 = a30;
  v144 = 126 - 2 * __clz(a30);
  if (a30)
    v145 = v144;
  else
    v145 = 0;
             vars0.i64[1]);
  *(_QWORD *)(v141 + 16) = 0;
  ++*(_DWORD *)(v141 + 24);
  if (*(_QWORD *)(v141 + 8) >= v143)
  {
    if (!v143)
      goto LABEL_106;
  }
  else
  {
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)v141, v143);
  }
  v147 = v143 << 6;
  v148 = (char *)v142 + 44;
  do
  {
    LODWORD(a66) = *((_DWORD *)v148 - 3);
    BYTE4(a66) = *(v148 - 8);
    BYTE5(a66) = *v148;
    DWORD2(a66) = *((_DWORD *)v148 - 1);
    result = re::DynamicArray<re::MeshLodLevelInfo>::add((_QWORD *)v141, (uint64_t *)&a66);
    v148 += 64;
    v147 -= 64;
  }
  while (v147);
LABEL_106:
  if (v142)
  {
    result = a28;
    if (a28)
      return (void *)(*(uint64_t (**)(void *, __int128 *))(*(_QWORD *)a28 + 40))(a28, v142);
  }
  return result;
}

uint64_t re::RenderGraphMeshNodeBase::focusSort(re *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unint64_t a30,int a31,unint64_t a32,unsigned int a33,float a34,float a35,unsigned int a36,float a37,int a38,__int16 a39,char a40,char a41,char a42,char a43,char a44,char a45,char a46,char a47,char a48,char a49,char a50,int a51,char a52,unsigned __int8 a53,char a54,char a55,char a56,int a57,__int128 a58,float32x4_t a59,uint64_t a60,uint64_t (**a61)(),float a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t (***a65)();
  __int128 a66;
  float32x4_t a67;
  float32x4_t a68;
  int a69;
  uint64_t a74;
  int v70;
  float v71;
  unsigned int *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  int32x4_t v83;
  float32x2_t v84;
  float32x2_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t v88;
  unsigned int *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  float32x4_t v95;
  uint64_t v96;
  float32x4_t v97;
  uint32x4_t v98;
  float v99;
  float v100;
  unsigned int v101;
  float v102;
  float v103;
  _QWORD *v104;
  float32x4_t *v105;
  float32x4_t v106;
  uint32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  char v115;
  int v116;
  float v117;
  unsigned __int8 v118;
  uint64_t v119;
  int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  int v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  char v129;
  char v130;
  char v131;
  char v132;
  uint64_t v133;
  int v134;
  int v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  int SortingDebugContextAndReturnIndex;
  float32x4_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t result;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  float32x4_t vars0;
  unsigned int *v160;
  _QWORD *v161;
  int v162;
  int v163;
  unsigned int v164;
  __int16 v166;
  char v167;
  int v168;
  char v169;
  char v170;
  char v171;

  a74 = *MEMORY[0x24BDAC8D0];
  if ((_DWORD)a1 == 4)
    v70 = -1;
  else
    v70 = 1;
  v71 = (float)v70;
  v72 = *(unsigned int **)(a4 + 32);
  v73 = *(_QWORD *)(a4 + 16);
  v74 = re::globalAllocators(a1)[2];
  a61 = &off_24ED85A30;
  a62 = v71;
  a64 = v74;
  a65 = &a61;
  a32 = 0;
  a29 = 0;
  a30 = 0;
  a31 = 0;
  a28 = a7;
  re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(&a28, v73);
  ++a31;
  v75 = re::RenderGraphDataStore::get<re::CameraData>(*(_QWORD *)(a3 + 1168), *(_QWORD *)(*(_QWORD *)(a3 + 40) + 48));
  if (!*(_QWORD *)(v75 + 48))
  {
LABEL_90:
    v153 = 0uLL;
    re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 389);
    _os_crash();
    __break(1u);
LABEL_91:
    a66 = a58;
    a67 = a59;
    if (!*(_BYTE *)(a5 + 208))
      *(_BYTE *)(a5 + 208) = 1;
    v140 = a67;
    *(_OWORD *)(a5 + 224) = a66;
    *(float32x4_t *)(a5 + 240) = v140;
    if (v73)
      goto LABEL_7;
    goto LABEL_94;
  }
  v77 = v75;
  re::RenderCamera::computeLocalTransform((re::RenderCamera *)(v75 + 64), (uint64_t)&a66);
  v83 = (int32x4_t)vmulq_f32(a68, a68);
  v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
  v84 = vrsqrte_f32((float32x2_t)v83.u32[0]);
  v85 = vmul_f32(v84, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v84, v84)));
  a59 = vnegq_f32(vmulq_n_f32(a68, vmul_f32(v85, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(v85, v85))).f32[0]));
  v87 = *(_QWORD *)(v77 + 64);
  v86 = *(_QWORD *)(v77 + 72);
  *(_QWORD *)&a58 = v87;
  *((_QWORD *)&a58 + 1) = v86;
  if (a5)
    goto LABEL_91;
  if (v73)
  {
LABEL_7:
    v88.i64[0] = v87;
    v88.i64[1] = v86;
    vars0 = v88;
    v89 = &v72[3 * v73];
    v160 = v89;
    v161 = a2;
    while (1)
    {
      v90 = *((unsigned __int8 *)v72 + 4);
      v91 = a2[1];
      if (v91 <= v90)
      {
        re::internal::assertLog((re::internal *)6, v78, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *((unsigned __int8 *)v72 + 4), v91);
        _os_crash();
        __break(1u);
        goto LABEL_90;
      }
      v92 = *a2;
      v93 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(*a2 + 24 * *((unsigned __int8 *)v72 + 4)), *v72);
      v73 = v93;
      v96 = *(_QWORD *)(v93 + 32);
      if (*(_DWORD *)(v93 + 144) != -1 || (v104 = *(_QWORD **)(v93 + 216)) != 0 && *v104)
      {
        a56 = 0;
        if (a5)
        {
          SortingDebugContextAndReturnIndex = re::DrawCallRecorderGroup::allocateSortingDebugContextAndReturnIndex((re::DrawCallRecorderGroup *)a5);
          a56 = 1;
          a57 = SortingDebugContextAndReturnIndex;
        }
        v97 = *(float32x4_t *)(v96 + 16);
        v98 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v96, v97);
        v98.i32[3] = v98.i32[2];
        v98.i32[0] = vmaxvq_u32(v98);
        if ((v98.i32[0] & 0x80000000) == 0)
          break;
      }
LABEL_87:
      v72 += 3;
      if (v72 == v89)
        goto LABEL_94;
    }
    re::RenderGraphMeshNodeBase::computeSortDistance(v96, (float32x4_t *)(v73 + 64), (_BYTE *)(v73 + 152), (__n128 *)(v73 + 128), (float32x2_t *)&a58, &a59, a5, (uint64_t)&a56, *(double *)v98.i64, *(double *)v97.i64, v94, v95);
    v100 = v99;
    v101 = *(unsigned __int8 *)(v73 + 153);
    if ((v101 & 5) != 0)
      v102 = *(float *)(v73 + 164);
    else
      v102 = v99;
    if ((v101 & 8) != 0)
      v103 = *(float *)(v73 + 160);
    else
      v103 = v102;
    if (*(_BYTE *)(v73 + 157) || (v105 = *(float32x4_t **)(v73 + 168)) == 0)
    {
      v170 = 0;
    }
    else
    {
      v106 = *(float32x4_t *)(v96 + 16);
      v107 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v96, v106);
      v107.i32[3] = v107.i32[2];
      if ((vmaxvq_u32(v107) & 0x80000000) != 0)
      {
        v110 = 0uLL;
      }
      else
      {
        v108 = vaddq_f32(*(float32x4_t *)v96, v106);
        v109.i64[0] = 0x3F0000003F000000;
        v109.i64[1] = 0x3F0000003F000000;
        v110 = vmulq_f32(v108, v109);
      }
      v111 = v105[1];
      v112 = vmulq_f32(vsubq_f32(vars0, v111), *v105);
      v113 = vaddq_f32(*(float32x4_t *)(v73 + 112), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v73 + 64), v110.f32[0]), *(float32x4_t *)(v73 + 80), *(float32x2_t *)v110.f32, 1), *(float32x4_t *)(v73 + 96), v110, 2));
      v114 = vmulq_f32(*v105, vsubq_f32(vdivq_f32(v113, (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 3)), v111));
      if (((vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).u32[0] ^ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).u32[0]) & 0x80000000) != 0)v115 = 1;
      else
        v115 = -1;
      v170 = v115;
    }
    v116 = *(_DWORD *)(v73 + 184);
    v117 = *(float *)(v73 + 192);
    v118 = *(_BYTE *)(v92 + 24 * v90 + 8);
    v162 = *(_DWORD *)(v73 + 188);
    v163 = v101 & (v117 == 0.0);
    if (v118)
    {
      v119 = 0;
      v118 = 0;
      if ((v101 & (v117 == 0.0)) != 0)
        v120 = 2;
      else
        v120 = 0;
      v121 = (2 * v101) & 4;
      if ((v101 & 0x10) != 0)
        v121 = 4;
      v122 = v121 | (v101 >> 2) & 8 | v120;
      if (v122 <= 1)
        v122 = 1;
      do
      {
        if (((v122 >> v119) & 1) != 0
          && v118 <= *(unsigned __int8 *)(v92 + 24 * v90 + 9 + v119))
        {
          v118 = *(_BYTE *)(v92 + 24 * v90 + 9 + v119);
        }
        ++v119;
      }
      while (v119 != 4);
    }
    if ((v101 & 8) != 0)
    {
      v171 = v118;
      if ((v101 & 2) != 0)
      {
        v123 = *(unsigned __int8 *)(a6 + 89);
        if (v118 > v123)
          LOBYTE(v123) = v118;
        v171 = v123;
      }
    }
    else
    {
      v171 = 0;
    }
    if ((v101 & 1) != 0)
    {
      v164 = *(_DWORD *)(v73 + 184);
      if (*(_BYTE *)(v73 + 158))
      {
LABEL_63:
        v128 = *v72;
        v168 = *(_DWORD *)(v73 + 196);
        v169 = *((_BYTE *)v72 + 4);
        v129 = *((_BYTE *)v72 + 5);
        v130 = *(_BYTE *)(v73 + 150);
        v131 = *(_BYTE *)(v73 + 155);
        v166 = *(_WORD *)(v73 + 148);
        v167 = *(_BYTE *)(v73 + 154);
        v132 = *(_BYTE *)(v73 + 156);
        v133 = a5;
        if (a5)
        {
          LOBYTE(a5) = 1;
          a19 = a57;
        }
        v134 = *(unsigned __int8 *)(a6 + 88);
        if (a53 | v134)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a36 = v164;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a40 = 1;
          a41 = v171;
          a42 = v169;
          a43 = v129;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133)
            a51 = a19;
          if (v163 && (v116 != v162 && !v134 || a54 && !v134))
            a43 = v129 | 1;
          a69 = 0;
          a66 = 0u;
          a67 = 0u;
          *(float32x4_t *)((char *)&a67 + 14) = 0u;
          *(_QWORD *)&a66 = v133;
          ((void (*)(uint64_t (***)(), unint64_t, unsigned int *, __int128 *, __n128))(*a65)[2])(a65, a32 + (a30 << 6) - 64, &a33, &a66, v136);
          v135 = *(unsigned __int8 *)(a6 + 88);
        }
        else
        {
          v135 = 0;
        }
        if (a55 && !v135)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a40 = 1;
          a41 = v171;
          a42 = v169;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133)
            a51 = a19;
          a36 = *(_DWORD *)(v73 + 188);
          a43 = v129 | 2;
          a69 = 0;
          a66 = 0u;
          a67 = 0u;
          *(float32x4_t *)((char *)&a67 + 14) = 0u;
          *(_QWORD *)&a66 = v133;
          ((void (*)(uint64_t (***)(), unint64_t, unsigned int *, __int128 *, __n128))(*a65)[2])(a65, a32 + (a30 << 6) - 64, &a33, &a66, v137);
          v135 = *(unsigned __int8 *)(a6 + 88);
        }
        if (a54 && !v135)
        {
          a33 = v128;
          a34 = v103;
          a35 = v102;
          a36 = v164;
          a37 = v100;
          a38 = v168;
          a39 = v166;
          a41 = v171;
          a42 = v169;
          a44 = v130;
          a45 = v131;
          a46 = v167;
          a47 = v132;
          a48 = v170;
          a50 = a5;
          if (v133)
            a51 = a19;
          a40 = 0;
          a43 = v129 | 2;
          a69 = 0;
          a66 = 0u;
          a67 = 0u;
          *(float32x4_t *)((char *)&a67 + 14) = 0u;
          *(_QWORD *)&a66 = v133;
          ((void (*)(uint64_t (***)(), unint64_t, unsigned int *, __int128 *, __n128))(*a65)[2])(a65, a32 + (a30 << 6) - 64, &a33, &a66, v138);
        }
        a5 = v133;
        v89 = v160;
        a2 = v161;
        goto LABEL_87;
      }
      if (*(_BYTE *)(v92 + 24 * v90 + 16))
        v124 = v117 == 0.0;
      else
        v124 = 1;
      v125 = v101 & 0xA;
      v126 = v124 || v125 == 0;
      v127 = v118 | 0x80000000;
      if (v126)
        v127 = *(_DWORD *)(v73 + 184);
    }
    else
    {
      v127 = v118 & ((int)(v101 << 29) >> 31);
    }
    v164 = v127;
    goto LABEL_63;
  }
LABEL_94:
  v141 = a4;
  if (a65)
  {
    ((void (*)(uint64_t (***)()))**a65)(a65);
    if (a65 != &a61)
      (*(void (**)(uint64_t))(*(_QWORD *)a64 + 40))(a64);
    a65 = 0;
  }
  v142 = a32;
  v143 = a30;
  v144 = 126 - 2 * __clz(a30);
  if (a30)
    v145 = v144;
  else
    v145 = 0;
  result = std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey *,false>(a32, a32 + (a30 << 6), v145, 1uLL, v79, v80, v81, v82, v149, v150, v151, v152, v153, v154, v155, v156, v157, a4, vars0.i64[0],
             vars0.i64[1]);
  *(_QWORD *)(v141 + 16) = 0;
  ++*(_DWORD *)(v141 + 24);
  if (*(_QWORD *)(v141 + 8) >= v143)
  {
    if (!v143)
      goto LABEL_106;
  }
  else
  {
    re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)v141, v143);
  }
  v147 = v143 << 6;
  v148 = v142 + 45;
  do
  {
    LODWORD(a66) = *(_DWORD *)(v148 - 5);
    WORD2(a66) = *(_WORD *)(v148 - 1);
    DWORD2(a66) = 0;
    result = (uint64_t)re::DynamicArray<re::MeshLodLevelInfo>::add((_QWORD *)v141, (uint64_t *)&a66);
    v148 += 64;
    v147 -= 64;
  }
  while (v147);
LABEL_106:
  if (v142)
  {
    result = a28;
    if (a28)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a28 + 40))(a28, v142);
  }
  return result;
}

uint64_t re::RenderGraphMeshNodeBase::techniqueSort(_QWORD *a1, uint64_t a2, uint64_t a3, re::DrawCallRecorderGroup *a4, uint64_t *a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  re::MaterialTechnique *TechniqueAtIndex;
  _anonymous_namespace_ *TechniqueVariant;
  unsigned __int8 *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  __int128 *v41;
  int v42;
  unsigned int SortingDebugContextAndReturnIndex;
  char v44;
  _BOOL8 v45;
  uint64_t MutableSortingContext;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __n128 v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  __int128 *v63;
  _QWORD *v64;
  int v66;
  unsigned __int8 v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72[2];
  uint64_t v73;
  _OWORD v74[2];
  _QWORD v75[2];
  uint64_t v76;
  int v77;
  uint64_t *v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  __int128 *v83;
  _QWORD v84[7];
  uint64_t v85;

  v62 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
  memset(v84, 0, sizeof(v84));
  v85 = (uint64_t)a5;
  v8 = *(_QWORD *)(a3 + 16);
  v83 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v79 = a5;
  re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(&v79, v8);
  v66 = ++v82;
  v78 = 0;
  v75[1] = 0;
  v76 = 0;
  v77 = 0;
  v75[0] = a5;
  re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v75, 0);
  ++v77;
  if (*(_QWORD *)(a3 + 16))
  {
    v14 = 0;
    v15 = 0;
    v64 = a1;
    while (1)
    {
      v16 = *(_QWORD *)(a3 + 32);
      v17 = (unsigned int *)(v16 + v14);
      v18 = a1[1];
      if (v18 <= *(unsigned __int8 *)(v16 + v14 + 4))
        break;
      v19 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](*(_QWORD *)(*a1 + 24 * *(unsigned __int8 *)(v16 + v14 + 4)), *v17);
      v20 = v19;
      v21 = *(_QWORD *)(v19 + 48);
      v22 = *(_QWORD **)(v19 + 216);
      if (v22 && *v22)
      {
        re::DynamicArray<re::MeshLodLevelInfo>::add(v75, (uint64_t *)(v16 + v14));
      }
      else
      {
        v9 = *(unsigned int *)(v19 + 144);
        if ((_DWORD)v9 != -1)
        {
          TechniqueAtIndex = (re::MaterialTechnique *)re::MaterialParameterTableLayers::getTechniqueAtIndex(*(re::MaterialParameterTableLayers **)(v19 + 48), v9);
          TechniqueVariant = (_anonymous_namespace_ *)re::MaterialTechnique::getOrCreateTechniqueVariant(TechniqueAtIndex, 0, 0);
          v25 = (unsigned __int8 *)TechniqueVariant;
          v26 = (_OWORD *)(v21 + 88);
          if (*(_BYTE *)(v21 + 112) || *(_QWORD *)v26 || *(_QWORD *)(v21 + 96) || *(_QWORD *)(v21 + 104))
          {
            v27 = *(_OWORD *)(v21 + 104);
            v74[0] = *v26;
            v74[1] = v27;
            v28 = *((_BYTE *)TechniqueAtIndex + 40) ? (uint64_t)TechniqueAtIndex + 48 : *(_QWORD *)TechniqueAtIndex + 8;
            if (*(_QWORD *)(v28 + 8))
            {
              v73 = 0;
              v29 = *(_QWORD *)(v28 + 24);
              v72[0] = 0;
              v73 = ((v29 << 6)
                   + (v29 >> 2)
                   + re::CombinedDynamicFunctionConstants::hash((unsigned __int8 *)v74, v72)
                   - 0x61C8864680B583E9) ^ v29;
              v30 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v62 + 336), &v73);
              if (v30 == -1)
              {
                v32 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v84, &v73);
                if (v32 == -1)
                {
                  v71 = 0;
                  v67[0] = 0;
                  re::CombinedDynamicFunctionConstants::combinedMap((uint64_t *)v74, v67, (_anonymous_namespace_ *)&v68);
                  v33 = re::FunctionConstantsEnumerator::enumerateFunctionConstantSet(v28, &v68);
                  if (v70)
                  {
                    if (v69)
                      v69 = 0;
                    if (v68)
                      (*(void (**)(void))(*(_QWORD *)v70 + 40))();
                  }
                  v71 = v33;
                  v31 = (unint64_t *)re::HashBrown<unsigned long,unsigned long long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::addNew((_anonymous_namespace_ *)v84, &v73, &v71);
                }
                else
                {
                  v31 = (unint64_t *)(v84[1] + 16 * v32 + 8);
                }
              }
              else
              {
                v31 = (unint64_t *)(*(_QWORD *)(v62 + 344) + 16 * v30 + 8);
              }
              TechniqueVariant = (_anonymous_namespace_ *)re::MaterialTechnique::getOrCreateTechniqueVariant(TechniqueAtIndex, *v31, 0);
              v25 = (unsigned __int8 *)TechniqueVariant;
            }
          }
          v34 = *(_QWORD *)(v20 + 40);
          if (!v34)
            v34 = *(_QWORD *)(v20 + 16);
          v35 = *(_QWORD *)(v34 + 16);
          if (v81 >= v80)
          {
            v36 = v81 + 1;
            if (v80 < v81 + 1)
            {
              if (v79)
              {
                v37 = 8;
                if (v80)
                  v37 = 2 * v80;
                if (v37 <= v36)
                  v38 = v81 + 1;
                else
                  v38 = v37;
                re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(&v79, v38);
                v39 = v82;
              }
              else
              {
                re::DynamicArray<re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey>::setCapacity(&v79, v36);
                v39 = v82 + 1;
              }
              v66 = v39;
            }
          }
          v40 = v81;
          v63 = v83;
          v41 = &v83[2 * v81];
          *((_QWORD *)v41 + 1) = 0;
          *((_QWORD *)v41 + 2) = 0;
          *(_QWORD *)v41 = 0;
          *(_QWORD *)((char *)v41 + 23) = 0;
          v81 = v40 + 1;
          v82 = ++v66;
          *((_DWORD *)v41 + 6) = *(_DWORD *)(v16 + v14);
          *((_BYTE *)v41 + 28) = *((_BYTE *)v17 + 4);
          *((_BYTE *)v41 + 30) = *(_BYTE *)(v16 + v14 + 5);
          LOBYTE(v74[0]) = 0;
          v42 = *(unsigned __int16 *)(v20 + 148);
          if (*(_WORD *)(v20 + 148))
          {
            re::DrawCallSortKey<3ul,unsigned long long>::appendUInt16((uint64_t)v41, *(unsigned __int16 *)(v20 + 148), v74);
            re::DrawCallSortKey<3ul,unsigned long long>::appendUInt8((uint64_t)v41, *(unsigned __int8 *)(v20 + 150), v74);
            LOBYTE(v74[0]) += 5;
          }
          else
          {
            re::DrawCallSortKey<3ul,unsigned long long>::appendUInt64((uint64_t)v41, *(_QWORD *)(**(_QWORD **)v25 + 2728), v74);
          }
          re::DrawCallSortKey<3ul,unsigned long long>::appendUInt8((uint64_t)v41, v25[18], v74);
          re::DrawCallSortKey<3ul,unsigned long long>::appendUInt64((uint64_t)v41, v35, v74);
          re::DrawCallSortKey<3ul,unsigned long long>::appendBytes((uint64_t)v41, *(_QWORD *)(*(_QWORD *)(v20 + 16) + 504) >> 1, 0, 7uLL, v74);
          if (a4)
          {
            SortingDebugContextAndReturnIndex = re::DrawCallRecorderGroup::allocateSortingDebugContextAndReturnIndex(a4);
            if (SortingDebugContextAndReturnIndex <= 0xFE)
            {
              v44 = SortingDebugContextAndReturnIndex;
              v45 = v42 != 0;
              MutableSortingContext = re::DrawCallRecorderGroup::getMutableSortingContext((uint64_t)a4, SortingDebugContextAndReturnIndex);
              re::DynamicString::format((re::DynamicString *)"Technique Sort - IsGroupedTechnique: %d TechniqueGroupID: %d IndexInTechniqueGroup: %d TechniqueAndMaterialNameHash: %zu HSRFlush: %d DescriptorHash: %zu MeshNameHash: %llu ", (re::DynamicString *)&v68, v45, *(unsigned __int16 *)(v20 + 148), *(unsigned __int8 *)(v20 + 150), *(_QWORD *)(**(_QWORD **)v25 + 2728), v25[18], v35, *(_QWORD *)(*(_QWORD *)(v20 + 16) + 504) >> 1);
              re::DynamicString::operator=((re::DynamicString *)MutableSortingContext, (re::DynamicString *)&v68);
              v47 = *(__int128 **)(v20 + 32);
              if (v47)
              {
                v48 = *v47;
                v49 = v47[1];
              }
              else
              {
                v48 = 0uLL;
                v49 = 0uLL;
              }
              *(_OWORD *)(MutableSortingContext + 32) = v48;
              *(_OWORD *)(MutableSortingContext + 48) = v49;
              v13 = *(__n128 *)(v20 + 64);
              v50 = *(_OWORD *)(v20 + 80);
              v51 = *(_OWORD *)(v20 + 112);
              *(_OWORD *)(MutableSortingContext + 96) = *(_OWORD *)(v20 + 96);
              *(_OWORD *)(MutableSortingContext + 112) = v51;
              *(__n128 *)(MutableSortingContext + 64) = v13;
              *(_OWORD *)(MutableSortingContext + 80) = v50;
              if (*(_BYTE *)(MutableSortingContext + 128))
                *(_BYTE *)(MutableSortingContext + 128) = 0;
              BYTE13(v63[2 * v40 + 1]) = v44;
              if (v68 && (v69 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v68 + 40))();
            }
          }
          a1 = v64;
        }
      }
      ++v15;
      v14 += 12;
      if (v15 >= *(_QWORD *)(a3 + 16))
        goto LABEL_56;
    }
    re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int8 *)(v16 + v14 + 4), v18);
    result = _os_crash();
    __break(1u);
  }
  else
  {
LABEL_56:
    v52 = v83;
    v53 = v81;
    v54 = 126 - 2 * __clz(v81);
    if (v81)
      v55 = v54;
    else
      v55 = 0;
    v56.n128_f64[0] = std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::$_0 &,re::RenderGraphMeshNodeBase::techniqueSort(re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::Allocator *)::TechniqueSortKey *,false>(v83, &v83[2 * v81], v55, 1uLL, v10, v13, v11, v12);
    *(_QWORD *)(a3 + 16) = 0;
    ++*(_DWORD *)(a3 + 24);
    if (v53)
    {
      v57 = 32 * v53;
      v58 = (char *)v52 + 30;
      do
      {
        LODWORD(v68) = *(_DWORD *)(v58 - 6);
        BYTE4(v68) = *(v58 - 2);
        BYTE5(v68) = *v58;
        LODWORD(v69) = *(v58 - 1);
        re::DynamicArray<re::MeshLodLevelInfo>::add((_QWORD *)a3, &v68);
        v58 += 32;
        v57 -= 32;
      }
      while (v57);
    }
    if (v76)
    {
      v59 = v78;
      v60 = 12 * v76;
      do
      {
        re::DynamicArray<re::MeshLodLevelInfo>::add((_QWORD *)a3, v59);
        v59 = (uint64_t *)((char *)v59 + 12);
        v60 -= 12;
      }
      while (v60);
    }
    if (v75[0] && v78)
      (*(void (**)(__n128))(*(_QWORD *)v75[0] + 40))(v56);
    if (v52 && v79)
      (*(void (**)(uint64_t *, __int128 *, __n128))(*v79 + 40))(v79, v52, v56);
    result = v85;
    if (v85)
    {
      if (v84[1])
        v84[1] = 0;
      if (v84[0])
        return (*(uint64_t (**)(__n128))(*(_QWORD *)v85 + 40))(v56);
    }
  }
  return result;
}

uint64_t re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(uint64_t *a1, uint64_t a2, unint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = re::RenderGraphDataStore::get<re::CameraData>(a4[73].i64[0], *(_QWORD *)(a4[2].i64[1] + 48));
  re::RenderGraphDataStore::get<re::CameraMatrices>(a4[73].i64[0], *(_QWORD *)(a4[2].i64[1] + 48));
  return re::RenderGraphMeshNodeBase::makeDrawCallsFromMeshParts(a1, a2, a3, a4, a5, *(unsigned __int8 *)(v12 + 490), v13, v14, a6);
}

void ___Z28isAutomaticInstancingEnabledv_block_invoke(uint64_t a1, const char *a2)
{
  re *v2;
  NSObject *v3;
  uint8_t v4[14];
  char v5;
  char v6;

  re::Defaults::BOOLValue((re::Defaults *)"enableAutomaticInstancing", a2, &v5);
  if (v5)
  {
    isAutomaticInstancingEnabled(void)::g_enableAutomaticInstancing = v6;
    if (v6)
      return;
  }
  else if (isAutomaticInstancingEnabled(void)::g_enableAutomaticInstancing)
  {
    return;
  }
  v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "Automatic instancing of draw calls has been disabled.", v4, 2u);
  }
}

double re::RenderGraphMeshNodeBase::drawDebugSortPoints(re::RenderGraphMeshNodeBase *this, const re::RenderGraphContext *a2, const re::MeshSortingCollection *a3, double result)
{
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int *v20;
  int v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int8x16_t v27;
  float *v28;
  int8x16_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  __int128 v39;
  __int128 v40;
  int8x16_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  uint64_t v50;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 88);
  if (v4)
  {
    v37.i64[0] = 0x5960C87A30814232;
    v37.i64[1] = (uint64_t)"meshsorting:visualizeRPGSortPoints";
    LOBYTE(v47) = 0;
    if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v4, &v37, &v47))
    {
      re::StringID::destroyString((re::StringID *)&v37);
    }
    else
    {
      v7 = v47;
      re::StringID::destroyString((re::StringID *)&v37);
      if (a3)
      {
        if (v7)
        {
          v8 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 104);
          if (v8)
          {
            if (*(_QWORD *)(v8 + 304))
            {
              v49 = 0;
              v47 = 0u;
              v48 = 0u;
              v50 = 0x7FFFFFFFLL;
              v9 = *((unsigned int *)a3 + 20);
              if ((_DWORD)v9)
              {
                v10 = 0;
                v11 = (int *)(*((_QWORD *)a3 + 8) + 8);
                while (1)
                {
                  v12 = *v11;
                  v11 += 10;
                  if (v12 < 0)
                    break;
                  if (v9 == ++v10)
                  {
                    LODWORD(v10) = *((_DWORD *)a3 + 20);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v10) = 0;
              }
              if ((_DWORD)v9 == (_DWORD)v10)
              {
                v13 = 0;
                LODWORD(v14) = 0;
                v46 = 0;
                v43 = 0;
                v44 = 0;
                v42 = 0;
                v45 = 0;
              }
              else
              {
                v15 = v10;
                v16 = *((_DWORD *)a3 + 20);
                do
                {
                  v17 = *((_QWORD *)a3 + 8);
                  v37.i64[0] = 0;
                  v37.i64[0] = *(_QWORD *)(v17 + 40 * v15 + 24);
                  if (v37.i64[0])
                  {
                    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)&v47, (uint64_t *)&v37);
                    v16 = *((_DWORD *)a3 + 20);
                  }
                  if (v16 <= (int)v10 + 1)
                    v18 = v10 + 1;
                  else
                    v18 = v16;
                  while (1)
                  {
                    v15 = (v10 + 1);
                    if (v18 - 1 == (_DWORD)v10)
                      break;
                    LODWORD(v10) = v10 + 1;
                    v19 = v15;
                    if ((*(_DWORD *)(*((_QWORD *)a3 + 8) + 40 * v15 + 8) & 0x80000000) != 0)
                      goto LABEL_27;
                  }
                  v19 = v18;
LABEL_27:
                  LODWORD(v10) = v19;
                }
                while ((_DWORD)v9 != v19);
                v13 = v49;
                v46 = 0;
                v43 = 0;
                v44 = 0;
                v42 = 0;
                v45 = 0;
                v14 = 0;
                if (v49)
                {
                  v20 = (int *)(v48 + 8);
                  while (1)
                  {
                    v21 = *v20;
                    v20 += 6;
                    if (v21 < 0)
                      break;
                    if (v49 == ++v14)
                    {
                      LODWORD(v14) = v49;
                      break;
                    }
                  }
                }
              }
              if (v13 != (_DWORD)v14)
              {
                v22 = v14;
                v23 = (char *)a3 + 144;
                v24 = v13;
                v25 = v48;
                do
                {
                  v26 = re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v23, *(_QWORD *)(v25 + 24 * v22 + 16));
                  if (v26)
                  {
                    v28 = (float *)v26;
                    v27.i32[0] = 0;
                    v36 = *(float32x4_t *)(v26 + 48);
                    v29 = (int8x16_t)v36;
                    v29.i8[0] = *(_BYTE *)(v26 + 32);
                    v41 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v29, v27), 0), (int8x16_t)xmmword_2261997A0, (int8x16_t)xmmword_226199790);
                    v30 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 104);
                    if (v30)
                      v31 = *(os_unfair_lock_s **)(v30 + 304);
                    else
                      v31 = 0;
                    v37 = (float32x4_t)xmmword_2260E5F10;
                    v38 = (float32x4_t)xmmword_2260E5F20;
                    v39 = xmmword_2260E5F40;
                    v40 = xmmword_2260E5D70;
                    re::DebugRenderer::drawBox(v31, &v37, v28, (__int128 *)v41.i8, 1);
                    v37 = vaddq_f32(v36, (float32x4_t)xmmword_2261997B0);
                    v38 = vaddq_f32(v36, (float32x4_t)xmmword_2261997C0);
                    v39 = (__int128)v41;
                    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v42, (uint64_t)&v37);
                    v37 = vaddq_f32(v36, (float32x4_t)xmmword_2261997D0);
                    v38 = vaddq_f32(v36, (float32x4_t)xmmword_2261997E0);
                    v39 = (__int128)v41;
                    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v42, (uint64_t)&v37);
                    v37 = vaddq_f32(v36, (float32x4_t)xmmword_2261997F0);
                    v38 = vaddq_f32(v36, (float32x4_t)xmmword_226199800);
                    v39 = (__int128)v41;
                    re::DynamicArray<re::Pair<re::AABB,unsigned int,true>>::add((uint64_t)&v42, (uint64_t)&v37);
                    v24 = v49;
                    v25 = v48;
                  }
                  if (v24 <= (int)v14 + 1)
                    v32 = v14 + 1;
                  else
                    v32 = v24;
                  while (1)
                  {
                    v22 = (v14 + 1);
                    if (v32 - 1 == (_DWORD)v14)
                      break;
                    LODWORD(v14) = v14 + 1;
                    v33 = v22;
                    if ((*(_DWORD *)(v25 + 24 * v22 + 8) & 0x80000000) != 0)
                      goto LABEL_47;
                  }
                  v33 = v32;
LABEL_47:
                  LODWORD(v14) = v33;
                }
                while (v13 != v33);
              }
              v34 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 104);
              if (v34)
                v35 = *(os_unfair_lock_s **)(v34 + 304);
              else
                v35 = 0;
              v37.i64[0] = v46;
              v37.i64[1] = v44;
              re::DebugRenderer::drawLines(v35, (uint64_t)&v37, 0);
              if (v42)
              {
                if (v46)
                  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
                v46 = 0;
              }
              return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v47);
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *`anonymous namespace'::filterMeshPartContextsInternal@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  _QWORD *v17;
  _BYTE *v18;
  int v19;
  BOOL v20;
  _QWORD *v21;
  unsigned int v22;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  _BOOL4 v31;
  _QWORD *v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *TechniqueAtIndex;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  _QWORD *v53;
  _BOOL4 v54;
  unsigned __int8 *v55;
  uint64_t v56;
  int v57;

  if (a2)
  {
    v8 = a1;
    v9 = 0;
    v10 = 24 * a2;
    v11 = a1;
    do
    {
      v12 = *v11;
      v11 += 3;
      v9 += *(_QWORD *)(v12 + 40);
      v10 -= 24;
    }
    while (v10);
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_DWORD *)(a5 + 24) = 0;
    *(_QWORD *)a5 = a4;
    result = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a5, v9);
    v14 = 0;
    v15 = 0;
    ++*(_DWORD *)(a5 + 24);
    v52 = a2;
    v53 = v8;
    while (1)
    {
      if (*(_QWORD *)(a3 + 32) | *(_QWORD *)(a3 + 16))
        v16 = 1;
      else
        v16 = *(_DWORD *)(a3 + 4) != 0;
      v17 = &v8[3 * v14];
      v19 = *((unsigned __int8 *)v17 + 15);
      v18 = (char *)v17 + 15;
      v20 = 1;
      if (!v19 && *(v18 - 1) == 255)
        v20 = BYTE5(v8[3 * v14 + 1]) != 0;
      v21 = &v8[3 * v14];
      if (!v16)
      {
        if (*(_QWORD *)(a3 + 80))
          v20 = 1;
        if (!v20 && !*(_BYTE *)(a3 + 92))
        {
          if (*(_QWORD *)(*v21 + 40))
          {
            v22 = 1;
            do
            {
              LODWORD(v56) = v22 - 1;
              WORD2(v56) = v15;
              v57 = 0;
              result = re::DynamicArray<re::MeshLodLevelInfo>::add((_QWORD *)a5, &v56);
            }
            while (*(_QWORD *)(*v21 + 40) > (unint64_t)v22++);
          }
          goto LABEL_71;
        }
      }
      v54 = v16;
      result = (_QWORD *)*v21;
      if (*(_QWORD *)(*v21 + 40))
        break;
LABEL_71:
      v14 = ++v15;
      v8 = v53;
      if (v52 <= v15)
        return result;
    }
    v24 = 0;
    v25 = 0;
    v55 = (unsigned __int8 *)&v53[3 * v14 + 1] + 5;
    while (1)
    {
      v26 = re::BucketArray<re::MeshPartDrawContext,128ul>::operator[]((uint64_t)result, v24);
      v27 = v26;
      if (*(_DWORD *)(v26 + 144) != -1 || (v32 = *(_QWORD **)(v26 + 216)) != 0 && *v32)
      {
        v28 = *(unsigned __int8 *)(v26 + 153);
        v29 = (2 * v28) & 4;
        if ((v28 & 0x10) != 0)
          v29 = 4;
        v30 = v29 | (v28 >> 2) & 8 | (2 * v28) & (2 * (*(float *)(v26 + 192) == 0.0));
        if (v30 <= 1)
          v30 = 1;
        v31 = (v30 & *v18) == 0 && (*(v18 - 1) & v30) != 0 && (*v55 & ~v30) == 0;
        if (((*(_DWORD *)a3 ^ *(_DWORD *)(v26 + 180)) & *(_DWORD *)(a3 + 4)) == 0 && v31)
        {
          v34 = *(_QWORD *)(a3 + 80);
          if ((!v34 || (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v27))
            && (!*(_BYTE *)(a3 + 92)
             || (*(_BYTE *)(v27 + 153) & 8) != 0
             && *(float *)(v27 + 160) == *(float *)(a3 + 96)
             && *(unsigned __int8 *)(v27 + 154) == *(unsigned __int8 *)(a3 + 100)
             && *(unsigned __int8 *)(v27 + 156) == *(unsigned __int8 *)(a3 + 101)))
          {
            v35 = *(_QWORD **)(v27 + 216);
            if (v35)
            {
              if (*v35)
                goto LABEL_69;
            }
            if (!v54)
              goto LABEL_69;
            TechniqueAtIndex = (uint64_t *)re::MaterialParameterTableLayers::getTechniqueAtIndex(*(re::MaterialParameterTableLayers **)(v27 + 48), *(_DWORD *)(v27 + 144));
            v37 = *TechniqueAtIndex;
            v38 = *(_QWORD *)(a3 + 16);
            if (v38)
            {
              v50 = *TechniqueAtIndex;
              v39 = v37 + 2648;
              v40 = (_QWORD *)(*(_QWORD *)(a3 + 8) + 24);
              v41 = 32 * v38;
              while (1)
              {
                v42 = (_QWORD *)re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v39, *(v40 - 3) >> 1);
                if (v42)
                {
                  v43 = *(v40 - 1);
                  if (v43 <= 1 && *v40 && !*(_BYTE *)*v40)
                    break;
                  if (*v42 == v43 >> 1)
                    break;
                }
                v40 += 4;
                v41 -= 32;
                if (!v41)
                {
                  v51 = 1;
                  goto LABEL_59;
                }
              }
              v51 = 0;
LABEL_59:
              v37 = v50;
            }
            else
            {
              v51 = 0;
            }
            v44 = *(_QWORD *)(a3 + 32);
            if (v44)
            {
              v45 = v37 + 2648;
              v46 = (_QWORD *)(*(_QWORD *)(a3 + 24) + 24);
              v47 = 32 * v44;
              do
              {
                v48 = (_QWORD *)re::HashTable<re::WeakStringID,re::RenderFrameContextBuilder::Result::PerSceneData *,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v45, *(v46 - 3) >> 1);
                if (v48)
                {
                  v49 = *(v46 - 1);
                  if (v49 <= 1 && *v46 && !*(_BYTE *)*v46)
                    goto LABEL_70;
                  if (*v48 == v49 >> 1)
                    goto LABEL_70;
                }
                v46 += 4;
                v47 -= 32;
              }
              while (v47);
            }
            if ((v51 & 1) == 0)
            {
LABEL_69:
              LODWORD(v56) = v25;
              WORD2(v56) = v15;
              v57 = 0;
              re::DynamicArray<re::MeshLodLevelInfo>::add((_QWORD *)a5, &v56);
            }
          }
        }
      }
LABEL_70:
      result = (_QWORD *)*v21;
      v24 = ++v25;
      if (*(_QWORD *)(*v21 + 40) <= (unint64_t)v25)
        goto LABEL_71;
    }
  }
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 24) = 0;
  *(_QWORD *)a5 = a4;
  result = re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)a5, 0);
  ++*(_DWORD *)(a5 + 24);
  return result;
}

void *re::introspect_MeshSortMode(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  re *v19;
  uint64_t *v20;
  re *v21;
  uint64_t *v22;
  uint64_t v23;
  re::IntrospectionBasic *v24;
  uint64_t v25[2];
  __int128 v26;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "None";
      re::introspect_MeshSortMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "TechniqueSort";
      qword_25582AE08 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 3;
      *((_QWORD *)v17 + 2) = "FrontToBack";
      qword_25582AE10 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = 2;
      *((_QWORD *)v19 + 2) = "BackToFront";
      qword_25582AE18 = (uint64_t)v19;
      v20 = re::introspectionAllocator(v19);
      v21 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 24, 8);
      *(_DWORD *)v21 = 1;
      *((_QWORD *)v21 + 1) = 5;
      *((_QWORD *)v21 + 2) = "FocusFrontToBack";
      qword_25582AE20 = (uint64_t)v21;
      v22 = re::introspectionAllocator(v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 24, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = 4;
      *(_QWORD *)(v23 + 16) = "FocusBackToFront";
      qword_25582AE28 = v23;
    }
  }
  {
    v24 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_MeshSortMode(BOOL)::info, "MeshSortMode", 4, 4, 1, 1);
    *(_QWORD *)v24 = &off_24ED7D9E8;
    *((_QWORD *)v24 + 8) = &re::introspect_MeshSortMode(BOOL)::enumTable;
    *((_DWORD *)v24 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_MeshSortMode(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_MeshSortMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v26);
    v5 = re::introspect_MeshSortMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v26);
    if ((v5 & 1) != 0)
      return &re::introspect_MeshSortMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_MeshSortMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_MeshSortMode(BOOL)::info;
    }
  }
  re::introspect_MeshSortMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_MeshSortMode(BOOL)::info, a2);
  v25[0] = 0x38AFE39ADCB26B1CLL;
  v25[1] = (uint64_t)"MeshSortMode";
  xmmword_25582AE58 = v26;
  re::StringID::destroyString((re::StringID *)v25);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_MeshSortMode(BOOL)::info;
}

void re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(`anonymous namespace'::DepthSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(`anonymous namespace'::DepthSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  float v7;
  uint64_t result;
  re::DynamicString *MutableSortingContext;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v6 = *a4;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)a3;
  *(_BYTE *)(a2 + 36) = *(_BYTE *)(a3 + 28);
  *(_BYTE *)(a2 + 44) = *(_BYTE *)(a3 + 29);
  v7 = *(float *)(a1 + 8);
  v13 = 0;
  re::DrawCallSortKey<4ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 4));
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 32), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 33), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 27), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendInt8(a2, (int)(float)(v7 * (float)*(char *)(a3 + 34)), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 8));
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 31), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendInt32(a2, *(unsigned int *)(a3 + 12), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 16));
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt16(a2, *(unsigned __int16 *)(a3 + 24), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 30), &v13);
  re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(a2, *(unsigned int *)(a3 + 20), &v13);
  result = re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 26), &v13);
  if (v6)
  {
    re::DynamicString::format((re::DynamicString *)"Depth Sort - OuterGroupDistance: %f OuterGroupTiebreaker: %d OuterGroupSuborder: %d OuterOrder: %d InnerGroupCameraInsideOutsideOrder: %d InnerGroupDistance: %f InnerGroupTiebreaker: %d InnerOrder: %d MeshDistance: %f TechniqueGroupID: %d IndexInTechniqueGroup: %d CreationOrder: %d DepthPrepassPriority: %d ", (re::DynamicString *)&v10, *(float *)(a3 + 4), *(unsigned __int8 *)(a3 + 32), *(unsigned __int8 *)(a3 + 33), *(unsigned __int8 *)(a3 + 27), *(char *)(a3 + 34), *(float *)(a3 + 8), *(unsigned __int8 *)(a3 + 31), *(unsigned int *)(a3 + 12), *(float *)(a3 + 16), *(unsigned __int16 *)(a3 + 24), *(unsigned __int8 *)(a3 + 30), *(unsigned int *)(a3 + 20), *(unsigned __int8 *)(a3 + 26));
    if (*(_BYTE *)(a3 + 36))
    {
      MutableSortingContext = (re::DynamicString *)re::DrawCallRecorderGroup::getMutableSortingContext(v6, *(_DWORD *)(a3 + 40));
      re::DynamicString::operator=(MutableSortingContext, (re::DynamicString *)&v10);
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
    }
    result = v10;
    if (v10)
    {
      if ((v11 & 1) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v12);
    }
  }
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(`anonymous namespace'::DepthSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED859C8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(`anonymous namespace'::DepthSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED859C8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(`anonymous namespace'::DepthSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::size()
{
  return 16;
}

void re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  float v7;
  uint64_t result;
  re::DynamicString *MutableSortingContext;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  v6 = *a4;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)a3;
  *(_WORD *)(a2 + 44) = *(_WORD *)(a3 + 28);
  v7 = *(float *)(a1 + 8);
  v13 = 0;
  re::DrawCallSortKey<5ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 4));
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 32), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 33), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 27), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendInt8(a2, (int)(float)(v7 * (float)*(char *)(a3 + 34)), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 8));
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 31), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendInt32(a2, *(unsigned int *)(a3 + 12), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendFloat(a2, &v13, v7 * *(float *)(a3 + 16));
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt16(a2, *(unsigned __int16 *)(a3 + 24), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 30), &v13);
  re::DrawCallSortKey<5ul,unsigned long long>::appendUInt32(a2, *(unsigned int *)(a3 + 20), &v13);
  result = re::DrawCallSortKey<5ul,unsigned long long>::appendUInt8(a2, *(unsigned __int8 *)(a3 + 26), &v13);
  if (v6)
  {
    re::DynamicString::format((re::DynamicString *)"Depth Sort - OuterGroupDistance: %f OuterGroupTiebreaker: %d OuterGroupSuborder: %d OuterOrder: %d InnerGroupCameraInsideOutsideOrder: %d InnerGroupDistance: %f InnerGroupTiebreaker: %d InnerOrder: %d MeshDistance: %f TechniqueGroupID: %d IndexInTechniqueGroup: %d CreationOrder: %d DepthPrepassPriority: %d ", (re::DynamicString *)&v10, *(float *)(a3 + 4), *(unsigned __int8 *)(a3 + 32), *(unsigned __int8 *)(a3 + 33), *(unsigned __int8 *)(a3 + 27), *(char *)(a3 + 34), *(float *)(a3 + 8), *(unsigned __int8 *)(a3 + 31), *(unsigned int *)(a3 + 12), *(float *)(a3 + 16), *(unsigned __int16 *)(a3 + 24), *(unsigned __int8 *)(a3 + 30), *(unsigned int *)(a3 + 20), *(unsigned __int8 *)(a3 + 26));
    if (*(_BYTE *)(a3 + 36))
    {
      MutableSortingContext = (re::DynamicString *)re::DrawCallRecorderGroup::getMutableSortingContext(v6, *(_DWORD *)(a3 + 40));
      re::DynamicString::operator=(MutableSortingContext, (re::DynamicString *)&v10);
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 40);
    }
    result = v10;
    if (v10)
    {
      if ((v11 & 1) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v12);
    }
  }
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED85A30;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED85A30;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_0,void ()(re::RenderGraphMeshNodeBase::focusSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::FocusSortKey &,`anonymous namespace'::CommonSortKeyArgs const&,re::DrawCallRecorderGroup *)>::size()
{
  return 16;
}

uint64_t re::FixedArray<std::unique_ptr<re::MaterialTechnique,std::function<void ()(re::MaterialTechnique*)>>>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 40 * a2;
}

BOOL re::Optional<re::PortalPlane>::operator==(float32x4_t *a1, float32x4_t *a2)
{
  int v2;
  _BOOL8 v3;
  BOOL v4;
  uint32x4_t v5;
  uint32x4_t v6;

  v2 = a2->u8[0];
  v3 = (v2 | a1->u8[0]) == 0;
  if (a1->i8[0])
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = (uint32x4_t)vceqq_f32(a1[1], a2[1]);
    v5.i32[3] = v5.i32[2];
    if ((vminvq_u32(v5) & 0x80000000) != 0)
    {
      v6 = (uint32x4_t)vceqq_f32(a1[2], a2[2]);
      v6.i32[3] = v6.i32[2];
      return vminvq_u32(v6) >> 31;
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, unsigned __int8 *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v31, v13, v12);
          v15 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v31[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21 - 4, v21);
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned int,re::RenderGraphMeshNodeBase::validateAttachmentsDuringGraphBuild(re::RenderGraphCompiled &,re::PerFrameAllocator &)::AttachmentPair,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)v31);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + 8) = v23 | 0x80000000;
  v25 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v25 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 12) = *a4;
  v26 = *(_QWORD *)(a1 + 16);
  v27 = *a5;
  v28 = v26 + 32 * v9;
  *(_BYTE *)(v28 + 16) = v27;
  v29 = v28 + 16;
  if (v27)
    *(_DWORD *)(v29 + 4) = *((_DWORD *)a5 + 1);
  v30 = a5[8];
  *(_BYTE *)(v26 + 32 * v9 + 24) = v30;
  if (v30)
    *(_DWORD *)(v26 + 32 * v9 + 28) = *((_DWORD *)a5 + 3);
  *(_DWORD *)(v25 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t `anonymous namespace'::getColorDepthDrawFlags(char *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  re::MaterialParameterTableLayers *v9;
  uint64_t TechniqueAtIndex;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  unsigned __int8 v21;
  uint64_t result;
  BOOL v23;
  int v24;
  BOOL v25;
  char v26;
  re *v27;
  const char *v28;

  v4 = *(_QWORD **)(a2 + 216);
  if (v4 && *v4)
  {
    v5 = *(unsigned __int8 *)(a2 + 210);
    v6 = *(unsigned __int8 *)(a2 + 211);
    v7 = *(_BYTE *)(a2 + 209) != 0;
    v8 = *(_BYTE *)(a2 + 208) != 0;
  }
  else
  {
    v9 = *(re::MaterialParameterTableLayers **)(a2 + 48);
    TechniqueAtIndex = re::MaterialParameterTableLayers::getTechniqueAtIndex(v9, *(_DWORD *)(a2 + 144));
    v11 = *(_QWORD *)TechniqueAtIndex;
    v12 = *(_QWORD *)(*(_QWORD *)TechniqueAtIndex + 2480);
    if ((v12 & 1) != 0)
      v13 = v12 >> 1;
    else
      v13 = v12 >> 1;
    v8 = v13 != 0;
    v14 = *(_BYTE *)(a2 + 177);
    v7 = (v14 & 2) == 0 && *(_DWORD *)(v11 + 108) != 0;
    v5 = *(_BYTE *)(v11 + 74) & ~v14 & 1;
    v6 = *(unsigned __int8 *)(v11 + 80);
    v15 = *((_QWORD *)v9 + 6);
    if (v15 && *(_BYTE *)(v15 + 1080)
      || (v15 = *((_QWORD *)v9 + 7)) != 0 && *(_BYTE *)(v15 + 1080)
      || (v15 = *((_QWORD *)v9 + 9)) != 0 && *(_BYTE *)(v15 + 1080))
    {
      v6 |= (HIDWORD(*(_QWORD *)(v15 + 1081)) | ((unsigned __int16)WORD2(*(_QWORD *)(v15 + 1081)) >> 8));
    }
  }
  v16 = *(_DWORD *)(a2 + 184);
  v17 = *(_DWORD *)(a2 + 188);
  v18 = *(_BYTE *)(a2 + 153) & (*(float *)(a2 + 192) == 0.0);
  if (v16 == v17)
    v19 = 0;
  else
    v19 = *(_BYTE *)(a2 + 153) & (*(float *)(a2 + 192) == 0.0);
  v20 = v8 && v7;
  if (v6)
    v20 = 1;
  if (v19 != 1)
    v20 = 1;
  *a1 = v20;
  v21 = atomic_load((unsigned __int8 *)&qword_254120310);
  if ((v21 & 1) == 0)
  {
    v27 = (re *)__cxa_guard_acquire(&qword_254120310);
    if ((_DWORD)v27)
    {
      qword_254120308 = re::hashString(v27, v28);
      __cxa_guard_release(&qword_254120310);
    }
  }
  result = re::MaterialParameterTableLayers::getPrioritizedPassTechniqueMapping(*(re::MaterialParameterTableLayers **)(a2 + 48), qword_254120308);
  if (v18)
    v23 = v16 == v17;
  else
    v23 = 0;
  if (v23)
    v24 = (result != 0) & (*(unsigned __int8 *)(a2 + 153) >> 1);
  else
    LOBYTE(v24) = 0;
  a1[1] = v24;
  if (v5 | v6)
    v25 = *(_DWORD *)(a2 + 184) == *(_DWORD *)(a2 + 188);
  else
    v25 = 1;
  if (v25)
    v26 = 0;
  else
    v26 = v19;
  a1[2] = v26;
  return result;
}

__n128 re::DynamicArray<`anonymous namespace'::DepthSortKey>::add(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v13 = 2 * v4;
      v14 = v4 == 0;
      v15 = 8;
      if (!v14)
        v15 = v13;
      if (v15 <= v6)
        v16 = v6;
      else
        v16 = v15;
      re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity((_QWORD *)a1, v16);
    }
    else
    {
      re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity((_QWORD *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = *(_QWORD *)(a1 + 32) + (*(_QWORD *)(a1 + 16) << 6);
  result = (__n128)a2[2];
  v10 = a2[3];
  v12 = *a2;
  v11 = a2[1];
  *(__n128 *)(v8 + 32) = result;
  *(_OWORD *)(v8 + 48) = v10;
  *(_OWORD *)v8 = v12;
  *(_OWORD *)(v8 + 16) = v11;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

__int128 *std::__introsort<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,`anonymous namespace'::DepthSortKey *,false>(__int128 *result, __int128 *a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char v20;
  unint64_t v21;
  __int128 *v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 *v53;
  uint64_t v54;
  __int128 *v55;
  unint64_t v56;
  unint64_t v57;
  __int128 *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 *v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __int128 *v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  BOOL v81;
  __int128 *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int128 *v89;
  __int128 *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __int128 *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  __int128 *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  __int128 *v116;
  __int128 *v117;
  __int128 *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int128 *v122;
  BOOL v124;
  __int128 *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 *v131;
  __int128 *v132;
  __int128 v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  int64_t v139;
  __int128 *v140;
  __int128 *v141;
  int64_t v142;
  int64_t v143;
  uint64_t v144;
  __int128 *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 *v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  __int128 *v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  __int128 *v165;
  __int128 *v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  unint64_t v178;
  __int128 *v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v186;
  __int128 v187;
  __int128 *v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 *v216;
  __int128 *v217;
  uint64_t v218;
  __int128 *v219;
  __int128 v220;
  unint64_t v221;
  unint64_t v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  unint64_t v241;
  unint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 *v248;
  __int128 v249;
  _BYTE vars0[29];

  v20 = a4;
  v21 = a3;
  v23 = result;
  a20 = *MEMORY[0x24BDAC8D0];
  v24 = (unint64_t)&v249 | 0x18;
LABEL_2:
  v248 = a2 - 4;
  v25 = v23;
  while (2)
  {
    v23 = v25;
    v26 = (char *)a2 - (char *)v25;
    v27 = ((char *)a2 - (char *)v25) >> 6;
    switch(v27)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v113 = 0;
        while (1)
        {
          v114 = *(_QWORD *)((char *)a2 + v113 - 40);
          v115 = *(_QWORD *)((char *)v25 + v113 + 24);
          if (v114 != v115)
            break;
          v113 -= 8;
          if (v113 == -32)
            return result;
        }
        if (v114 < v115)
        {
          v196 = v25[1];
          v197 = v25[3];
          a15 = v25[2];
          a16 = v197;
          a14 = v196;
          a13 = *v25;
          v198 = *(__int128 *)((char *)a2 - 35);
          v199 = *(a2 - 3);
          *v25 = *v248;
          v25[1] = v199;
          *(__int128 *)((char *)v25 + 29) = v198;
          v201 = a13;
          v200 = a14;
          *(__int128 *)((char *)a2 - 35) = *(__int128 *)((char *)&a14 + 13);
          *v248 = v201;
          *(a2 - 3) = v200;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v116 = v25 + 4;
        v117 = v25 + 8;
        v118 = v25 + 12;
        v119 = 0;
        while (1)
        {
          v120 = *(_QWORD *)((char *)a2 + v119 - 40);
          v121 = *(_QWORD *)((char *)v25 + v119 + 216);
          if (v120 != v121)
            break;
          v119 -= 8;
          if (v119 == -32)
            return result;
        }
        if (v120 < v121)
        {
          v202 = 0;
          v203 = v25[15];
          a15 = v25[14];
          a16 = v203;
          v205 = v25[13];
          a13 = *v118;
          v204 = a13;
          a14 = v205;
          v206 = *v248;
          v207 = *(a2 - 3);
          *(__int128 *)((char *)v25 + 221) = *(__int128 *)((char *)a2 - 35);
          *v118 = v206;
          v25[13] = v207;
          v208 = *(__int128 *)((char *)&a14 + 13);
          *v248 = v204;
          *(a2 - 3) = v205;
          *(__int128 *)((char *)a2 - 35) = v208;
          while (1)
          {
            v209 = *(_QWORD *)((char *)v25 + v202 + 216);
            v210 = *(_QWORD *)((char *)v25 + v202 + 152);
            if (v209 != v210)
              break;
            v202 -= 8;
            if (v202 == -32)
              return result;
          }
          if (v209 < v210)
          {
            v225 = 0;
            v226 = v25[10];
            v228 = *v117;
            a14 = v25[9];
            v227 = a14;
            a15 = v226;
            v229 = *v118;
            v230 = v25[13];
            v231 = *(__int128 *)((char *)v25 + 221);
            *v118 = v228;
            v25[13] = v227;
            *(__int128 *)((char *)v25 + 221) = *(__int128 *)((char *)&a14 + 13);
            *v117 = v229;
            v25[9] = v230;
            *(__int128 *)((char *)v25 + 157) = v231;
            while (1)
            {
              v232 = *(_QWORD *)((char *)v25 + v225 + 152);
              v233 = *(_QWORD *)((char *)v25 + v225 + 88);
              if (v232 != v233)
                break;
              v225 -= 8;
              if (v225 == -32)
                return result;
            }
            if (v232 < v233)
            {
              v234 = 0;
              v235 = v25[6];
              v237 = *v116;
              a14 = v25[5];
              v236 = a14;
              a15 = v235;
              v238 = *v117;
              v239 = v25[9];
              v240 = *(__int128 *)((char *)v25 + 157);
              *v117 = v237;
              v25[9] = v236;
              *(__int128 *)((char *)v25 + 157) = *(__int128 *)((char *)&a14 + 13);
              *v116 = v238;
              v25[5] = v239;
              *(__int128 *)((char *)v25 + 93) = v240;
              while (1)
              {
                v241 = *(_QWORD *)((char *)v25 + v234 + 88);
                v242 = *(_QWORD *)((char *)v25 + v234 + 24);
                if (v241 != v242)
                  break;
                v234 -= 8;
                if (v234 == -32)
                  return result;
              }
              if (v241 < v242)
              {
                v243 = v25[1];
                v244 = v25[3];
                a15 = v25[2];
                a16 = v244;
                a14 = v243;
                a13 = *v25;
                *(__int128 *)((char *)v25 + 29) = *(__int128 *)((char *)v25 + 93);
                v245 = v25[5];
                *v25 = *v116;
                v25[1] = v245;
                v246 = a13;
                v247 = a14;
                *(__int128 *)((char *)v25 + 93) = *(__int128 *)((char *)&a14 + 13);
                *v116 = v246;
                v25[5] = v247;
              }
            }
          }
        }
        return result;
      default:
        if (v26 <= 1535)
        {
          v122 = v25 + 4;
          v124 = v25 == a2 || v122 == a2;
          if ((v20 & 1) != 0)
          {
            if (!v124)
            {
              v125 = v25;
              do
              {
                v126 = 0;
                while (1)
                {
                  v127 = *(_QWORD *)((char *)v125 + v126 + 88);
                  v128 = *(_QWORD *)((char *)v125 + v126 + 24);
                  if (v127 != v128)
                    break;
                  v126 -= 8;
                  if (v126 == -32)
                    goto LABEL_147;
                }
                if (v127 < v128)
                {
                  v130 = v122[2];
                  v129 = v122[3];
                  a14 = v122[1];
                  a15 = v130;
                  a16 = v129;
                  a13 = *v122;
                  v131 = v125;
                  v132 = v122;
                  while (1)
                  {
                    v133 = v131[1];
                    *v132 = *v131;
                    v132[1] = v133;
                    *(__int128 *)((char *)v132 + 29) = *(__int128 *)((char *)v131 + 29);
                    if (v131 == v25)
                      break;
                    v132 = v131;
                    v134 = 0;
                    v131 -= 4;
                    while (1)
                    {
                      v135 = *(_QWORD *)(((unint64_t)&a13 | 0x18) + v134);
                      v136 = *(_QWORD *)((char *)v132 + v134 - 40);
                      if (v135 != v136)
                        break;
                      v134 -= 8;
                      if (v134 == -32)
                        goto LABEL_146;
                    }
                    if (v135 >= v136)
                      goto LABEL_146;
                  }
                  v132 = v25;
LABEL_146:
                  v137 = *(__int128 *)((char *)&a14 + 13);
                  v132[1] = a14;
                  v138 = a13;
                  *(__int128 *)((char *)v132 + 29) = v137;
                  *v132 = v138;
                }
LABEL_147:
                v122 += 4;
                v125 += 4;
              }
              while (v122 != a2);
            }
          }
          else if (!v124)
          {
            do
            {
              v211 = 0;
              while (1)
              {
                v212 = *(_QWORD *)((char *)v23 + v211 + 88);
                v213 = *(_QWORD *)((char *)v23 + v211 + 24);
                if (v212 != v213)
                  break;
                v211 -= 8;
                if (v211 == -32)
                  goto LABEL_238;
              }
              if (v212 < v213)
              {
                v215 = v122[2];
                v214 = v122[3];
                a14 = v122[1];
                a15 = v215;
                a16 = v214;
                a13 = *v122;
                v216 = v23;
                v217 = v122;
                do
                {
                  v218 = 0;
                  v219 = v217;
                  v217 = v216;
                  v220 = v216[1];
                  *v219 = *v216;
                  v219[1] = v220;
                  *(__int128 *)((char *)v219 + 29) = *(__int128 *)((char *)v216 + 29);
                  v216 -= 4;
                  while (1)
                  {
                    v221 = *(_QWORD *)((char *)&a14 + v218 + 8);
                    v222 = *(_QWORD *)((char *)v217 + v218 - 40);
                    if (v221 != v222)
                      break;
                    v218 -= 8;
                    if (v218 == -32)
                      goto LABEL_237;
                  }
                }
                while (v221 < v222);
LABEL_237:
                v223 = *(__int128 *)((char *)&a14 + 13);
                v217[1] = a14;
                v224 = a13;
                *(__int128 *)((char *)v217 + 29) = v223;
                *v217 = v224;
              }
LABEL_238:
              v122 += 4;
              v23 += 4;
            }
            while (v122 != a2);
          }
          return result;
        }
        if (!v21)
        {
          if (v25 != a2)
          {
            v139 = (v27 - 2) >> 1;
            v140 = &v25[8 * v139];
            v141 = &v25[4 * v139];
            v142 = v139;
            do
            {
              v143 = v142;
              if (v139 >= v142)
              {
                v144 = (2 * v142) | 1;
                v145 = &v25[4 * v144];
                if (2 * v143 + 2 < (uint64_t)v27)
                {
                  v146 = 0;
                  while (1)
                  {
                    v147 = *(_QWORD *)((char *)v140 + v146 + 88);
                    a4 = *(_QWORD *)((char *)v140 + v146 + 152);
                    if (v147 != a4)
                      break;
                    v146 -= 8;
                    if (v146 == -32)
                      goto LABEL_158;
                  }
                  LOBYTE(a5) = v147 < a4;
LABEL_158:
                  if (((v147 != a4) & a5) != 0)
                  {
                    v145 += 4;
                    v144 = 2 * v143 + 2;
                  }
                }
                result = &v25[4 * v143];
                v148 = 24;
                while (1)
                {
                  v149 = *(_QWORD *)((char *)v145 + v148);
                  a3 = *(_QWORD *)((char *)v141 + v148);
                  if (v149 != a3)
                    break;
                  v148 -= 8;
                  if (v148 == -8)
                    goto LABEL_165;
                }
                if (v149 < a3)
                  goto LABEL_185;
LABEL_165:
                v151 = result[2];
                v150 = result[3];
                a14 = result[1];
                a15 = v151;
                a16 = v150;
                a13 = *result;
                while (1)
                {
                  v152 = v145;
                  v153 = *(__int128 *)((char *)v145 + 29);
                  result[1] = v145[1];
                  v154 = *v145;
                  *(__int128 *)((char *)result + 29) = v153;
                  *result = v154;
                  if (v139 < v144)
                    break;
                  v155 = (2 * v144) | 1;
                  v145 = &v25[4 * v155];
                  v156 = 2 * v144 + 2;
                  if (v156 >= (uint64_t)v27)
                  {
                    v144 = (2 * v144) | 1;
                  }
                  else
                  {
                    a4 = 0;
                    v157 = &v25[8 * v144];
                    while (1)
                    {
                      a5 = *(_QWORD *)((char *)v157 + a4 + 88);
                      v158 = *(_QWORD *)((char *)v157 + a4 + 152);
                      if (a5 != v158)
                        break;
                      a4 -= 8;
                      if (a4 == -32)
                        goto LABEL_174;
                    }
                    a7 = a5 < v158;
LABEL_174:
                    if (a5 != v158 && a7)
                    {
                      v145 += 4;
                      v144 = v156;
                    }
                    else
                    {
                      v144 = v155;
                    }
                  }
                  v159 = 24;
                  while (1)
                  {
                    v160 = *(_QWORD *)((char *)v145 + v159);
                    a3 = *(_QWORD *)((char *)&a13 + v159);
                    if (v160 != a3)
                      break;
                    v159 -= 8;
                    if (v159 == -8)
                      goto LABEL_182;
                  }
                  LOBYTE(a4) = v160 < a3;
LABEL_182:
                  result = v152;
                  if (v160 != a3)
                  {
                    result = v152;
                    if ((a4 & 1) != 0)
                      break;
                  }
                }
                v161 = *(__int128 *)((char *)&a14 + 13);
                v152[1] = a14;
                v162 = a13;
                *(__int128 *)((char *)v152 + 29) = v161;
                *v152 = v162;
              }
LABEL_185:
              v142 = v143 - 1;
              v140 -= 8;
              v141 -= 4;
            }
            while (v143);
            v163 = (unint64_t)v26 >> 6;
            do
            {
              v164 = 0;
              *(_OWORD *)vars0 = v25[1];
              v249 = *v25;
              v165 = v25;
              do
              {
                v166 = &v165[4 * v164];
                v167 = v166 + 4;
                v168 = (2 * v164) | 1;
                v164 = 2 * v164 + 2;
                if (v164 >= v163)
                {
                  v164 = v168;
                }
                else
                {
                  v169 = 0;
                  while (1)
                  {
                    result = *(__int128 **)((char *)v166 + v169 + 88);
                    v170 = *(__int128 **)((char *)v166 + v169 + 152);
                    if (result != v170)
                      break;
                    v169 -= 8;
                    if (v169 == -32)
                      goto LABEL_195;
                  }
                  LOBYTE(a3) = result < v170;
LABEL_195:
                  if (((result != v170) & a3) != 0)
                    v167 = v166 + 8;
                  else
                    v164 = v168;
                }
                v171 = *(__int128 *)((char *)v167 + 29);
                v165[1] = v167[1];
                v172 = *v167;
                *(__int128 *)((char *)v165 + 29) = v171;
                *v165 = v172;
                v165 = v167;
              }
              while (v164 <= (uint64_t)((unint64_t)(v163 - 2) >> 1));
              a2 -= 4;
              if (v167 == a2)
              {
                v183 = *(_OWORD *)&vars0[13];
                v167[1] = *(_OWORD *)vars0;
                v184 = v249;
                *(__int128 *)((char *)v167 + 29) = v183;
                *v167 = v184;
              }
              else
              {
                v173 = *(__int128 *)((char *)a2 + 29);
                v167[1] = a2[1];
                v174 = *a2;
                *(__int128 *)((char *)v167 + 29) = v173;
                *v167 = v174;
                v176 = v249;
                v175 = *(_OWORD *)vars0;
                *(__int128 *)((char *)a2 + 29) = *(_OWORD *)&vars0[13];
                *a2 = v176;
                a2[1] = v175;
                v177 = (char *)v167 - (char *)v25 + 64;
                if (v177 >= 65)
                {
                  v178 = (((unint64_t)v177 >> 6) - 2) >> 1;
                  v179 = &v25[4 * v178];
                  v180 = 24;
                  while (1)
                  {
                    v181 = *(_QWORD *)((char *)v179 + v180);
                    v182 = *(_QWORD *)((char *)v167 + v180);
                    if (v181 != v182)
                      break;
                    v180 -= 8;
                    if (v180 == -8)
                      goto LABEL_206;
                  }
                  if (v181 < v182)
                  {
                    v187 = v167[2];
                    v186 = v167[3];
                    a14 = v167[1];
                    a15 = v187;
                    a16 = v186;
                    a13 = *v167;
                    do
                    {
                      v188 = v179;
                      v189 = *(__int128 *)((char *)v179 + 29);
                      v167[1] = v179[1];
                      v190 = *v179;
                      *(__int128 *)((char *)v167 + 29) = v189;
                      *v167 = v190;
                      if (!v178)
                        break;
                      v178 = (v178 - 1) >> 1;
                      v179 = &v25[4 * v178];
                      v191 = 24;
                      while (1)
                      {
                        v192 = *(_QWORD *)((char *)v179 + v191);
                        v193 = *(_QWORD *)((char *)&a13 + v191);
                        if (v192 != v193)
                          break;
                        v191 -= 8;
                        if (v191 == -8)
                          goto LABEL_217;
                      }
                      v167 = v188;
                    }
                    while (v192 < v193);
LABEL_217:
                    v194 = *(__int128 *)((char *)&a14 + 13);
                    v188[1] = a14;
                    v195 = a13;
                    *(__int128 *)((char *)v188 + 29) = v194;
                    *v188 = v195;
                  }
                }
              }
LABEL_206:
              ;
            }
            while (v163-- > 2);
          }
          return result;
        }
        v28 = v27 >> 1;
        v29 = &v25[4 * (v27 >> 1)];
        if ((unint64_t)v26 <= 0x2000)
        {
        }
        else
        {
          v34 = v23[1];
          v35 = v23[3];
          a15 = v23[2];
          a16 = v35;
          a14 = v34;
          a13 = *v23;
          v36 = *(__int128 *)((char *)v29 + 29);
          v37 = v29[1];
          *v23 = *v29;
          v23[1] = v37;
          *(__int128 *)((char *)v23 + 29) = v36;
          v39 = a13;
          v38 = a14;
          *(__int128 *)((char *)v29 + 29) = *(__int128 *)((char *)&a14 + 13);
          *v29 = v39;
          v29[1] = v38;
        }
        --v21;
        if ((v20 & 1) == 0)
        {
          v40 = 0;
          while (1)
          {
            v41 = *(_QWORD *)((char *)v23 + v40 - 40);
            v42 = *(_QWORD *)((char *)v23 + v40 + 24);
            if (v41 != v42)
              break;
            v40 -= 8;
            if (v40 == -32)
              goto LABEL_13;
          }
          if (v41 >= v42)
          {
LABEL_13:
            v43 = 0;
            *(_OWORD *)vars0 = v23[1];
            v249 = *v23;
            while (1)
            {
              v44 = *(_QWORD *)&vars0[v43 + 8];
              v45 = *(_QWORD *)((char *)a2 + v43 - 40);
              v46 = v44 >= v45;
              if (v44 != v45)
                break;
              v43 -= 8;
              if (v43 == -32)
              {
                v47 = v23;
                while (1)
                {
LABEL_75:
                  v25 = v47 + 4;
                  if (v47 + 4 >= a2)
                    goto LABEL_83;
                  v86 = 0;
                  while (1)
                  {
                    v87 = *(_QWORD *)(v24 + v86);
                    v88 = *(_QWORD *)((char *)v47 + v86 + 88);
                    if (v87 != v88)
                      break;
                    v86 -= 8;
                    if (v86 == -32)
                      goto LABEL_81;
                  }
                  v30 = v87 < v88;
LABEL_81:
                  v47 += 4;
                  if (v87 != v88)
                  {
                    v47 = v25;
                    if (v30)
                      goto LABEL_83;
                  }
                }
              }
            }
            v82 = v23;
            v47 = v23;
            if (v46)
              goto LABEL_75;
            while (1)
            {
              v83 = 0;
              v25 = v82 + 4;
              while (1)
              {
                v84 = *(_QWORD *)(v24 + v83);
                v85 = *(_QWORD *)((char *)v82 + v83 + 88);
                if (v84 != v85)
                  break;
                v83 -= 8;
                if (v83 == -32)
                  goto LABEL_72;
              }
              v30 = v84 < v85;
LABEL_72:
              v82 += 4;
              if (v84 != v85)
              {
                v82 = v25;
                if (v30)
                  break;
              }
            }
LABEL_83:
            v89 = a2;
            if (v25 < a2)
            {
              v90 = a2;
              do
              {
                v91 = 0;
                v89 = v90 - 4;
                while (1)
                {
                  v92 = *(_QWORD *)(v24 + v91);
                  v93 = *(_QWORD *)((char *)v90 + v91 - 40);
                  if (v92 != v93)
                    break;
                  v91 -= 8;
                  if (v91 == -32)
                    goto LABEL_105;
                }
                v90 -= 4;
              }
              while (v92 < v93);
            }
LABEL_105:
            while (v25 < v89)
            {
              v94 = v25[1];
              v95 = v25[3];
              a15 = v25[2];
              a16 = v95;
              a14 = v94;
              a13 = *v25;
              v96 = *(__int128 *)((char *)v89 + 29);
              v97 = v89[1];
              *v25 = *v89;
              v25[1] = v97;
              *(__int128 *)((char *)v25 + 29) = v96;
              v99 = a13;
              v98 = a14;
              *(__int128 *)((char *)v89 + 29) = *(__int128 *)((char *)&a14 + 13);
              *v89 = v99;
              v89[1] = v98;
              v100 = v25;
              while (1)
              {
                v101 = 0;
                v25 = v100 + 4;
                while (1)
                {
                  v102 = *(_QWORD *)(v24 + v101);
                  v103 = *(_QWORD *)((char *)v100 + v101 + 88);
                  if (v102 != v103)
                    break;
                  v101 -= 8;
                  if (v101 == -32)
                    goto LABEL_97;
                }
                v31 = v102 < v103;
LABEL_97:
                v100 += 4;
                if (v102 != v103)
                {
                  v100 = v25;
                  if (v31)
                    break;
                }
              }
              v104 = v89;
              do
              {
                v105 = 0;
                v89 = v104 - 4;
                while (1)
                {
                  v106 = *(_QWORD *)(v24 + v105);
                  v107 = *(_QWORD *)((char *)v104 + v105 - 40);
                  if (v106 != v107)
                    break;
                  v105 -= 8;
                  if (v105 == -32)
                    goto LABEL_105;
                }
                v104 -= 4;
              }
              while (v106 < v107);
            }
            v108 = v25 - 4;
            if (v25 - 4 != v23)
            {
              v109 = *(__int128 *)((char *)v25 - 35);
              v23[1] = *(v25 - 3);
              v110 = *v108;
              *(__int128 *)((char *)v23 + 29) = v109;
              *v23 = v110;
            }
            v20 = 0;
            v111 = *(_OWORD *)&vars0[13];
            *(v25 - 3) = *(_OWORD *)vars0;
            v112 = v249;
            *(__int128 *)((char *)v25 - 35) = v111;
            *v108 = v112;
            continue;
          }
        }
        *(_OWORD *)vars0 = v23[1];
        v249 = *v23;
        v48 = v23;
        do
        {
          v49 = 0;
          v50 = v48;
          v48 += 4;
          while (1)
          {
            v51 = *(_QWORD *)((char *)v50 + v49 + 88);
            v52 = *(_QWORD *)&vars0[v49 + 8];
            if (v51 != v52)
              break;
            v49 -= 8;
            if (v49 == -32)
              goto LABEL_24;
          }
        }
        while (v51 < v52);
LABEL_24:
        v53 = a2;
        if (v50 == v23)
        {
          v58 = a2;
          while (v48 < v58)
          {
            v59 = 0;
            v55 = v58 - 4;
            while (1)
            {
              v60 = *(_QWORD *)((char *)v58 + v59 - 40);
              v61 = *(_QWORD *)(v24 + v59);
              if (v60 != v61)
                break;
              v59 -= 8;
              if (v59 == -32)
                goto LABEL_40;
            }
            v32 = v60 < v61;
LABEL_40:
            v58 -= 4;
            if (v60 != v61)
            {
              v58 = v55;
              if (v32)
                goto LABEL_44;
            }
          }
          v55 = v58;
        }
        else
        {
          while (1)
          {
            v54 = 0;
            v55 = v53 - 4;
            while (1)
            {
              v56 = *(_QWORD *)((char *)v53 + v54 - 40);
              v57 = *(_QWORD *)(v24 + v54);
              if (v56 != v57)
                break;
              v54 -= 8;
              if (v54 == -32)
                goto LABEL_30;
            }
            v32 = v56 < v57;
LABEL_30:
            v53 -= 4;
            if (v56 != v57)
            {
              v53 = v55;
              if (v32)
                break;
            }
          }
        }
LABEL_44:
        if (v48 < v55)
        {
          v62 = v48;
          v63 = v55;
          do
          {
            v64 = v62[3];
            a15 = v62[2];
            a16 = v64;
            v66 = v62[1];
            a13 = *v62;
            v65 = a13;
            a14 = v66;
            v67 = *v63;
            v68 = v63[1];
            *(__int128 *)((char *)v62 + 29) = *(__int128 *)((char *)v63 + 29);
            *v62 = v67;
            v62[1] = v68;
            v69 = *(__int128 *)((char *)&a14 + 13);
            *v63 = v65;
            v63[1] = v66;
            *(__int128 *)((char *)v63 + 29) = v69;
            do
            {
              v70 = 0;
              v50 = v62;
              v62 += 4;
              while (1)
              {
                v71 = *(_QWORD *)((char *)v50 + v70 + 88);
                v72 = *(_QWORD *)(v24 + v70);
                if (v71 != v72)
                  break;
                v70 -= 8;
                if (v70 == -32)
                  goto LABEL_52;
              }
            }
            while (v71 < v72);
            while (1)
            {
LABEL_52:
              v73 = 0;
              v74 = v63 - 4;
              while (1)
              {
                v75 = *(_QWORD *)((char *)v63 + v73 - 40);
                v76 = *(_QWORD *)(v24 + v73);
                if (v75 != v76)
                  break;
                v73 -= 8;
                if (v73 == -32)
                  goto LABEL_57;
              }
              v33 = v75 < v76;
LABEL_57:
              v63 -= 4;
              if (v75 != v76)
              {
                v63 = v74;
                if (v33)
                  break;
              }
            }
            v63 = v74;
          }
          while (v62 < v74);
        }
        if (v50 != v23)
        {
          v77 = *(__int128 *)((char *)v50 + 29);
          v23[1] = v50[1];
          v78 = *v50;
          *(__int128 *)((char *)v23 + 29) = v77;
          *v23 = v78;
        }
        v79 = *(_OWORD *)&vars0[13];
        v50[1] = *(_OWORD *)vars0;
        v80 = v249;
        *(__int128 *)((char *)v50 + 29) = v79;
        *v50 = v80;
        if (v48 < v55)
        {
LABEL_65:
          v20 = 0;
          v25 = v50 + 4;
          continue;
        }
        v25 = v50 + 4;
        if (!(_DWORD)result)
        {
          if (v81)
            continue;
          goto LABEL_65;
        }
        a2 = v50;
        if (!v81)
          goto LABEL_2;
        return result;
    }
  }
}

__int128 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,`anonymous namespace'::DepthSortKey *>(__int128 *result, __int128 *a2, __int128 *a3)
{
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[32];
  _BYTE v34[32];
  _BYTE v35[32];
  _BYTE v36[20];

  v5 = 24;
  while (1)
  {
    v6 = *(_QWORD *)((char *)a2 + v5);
    v7 = *(_QWORD *)((char *)result + v5);
    if (v6 != v7)
      break;
    v5 -= 8;
    if (v5 == -8)
      goto LABEL_6;
  }
  v3 = v6 < v7;
LABEL_6:
  v8 = v6 != v7 && v3;
  v9 = 24;
  while (1)
  {
    v10 = *(_QWORD *)((char *)a3 + v9);
    v11 = *(_QWORD *)((char *)a2 + v9);
    if (v10 != v11)
      break;
    v9 -= 8;
    if (v9 == -8)
      goto LABEL_11;
  }
  v4 = v10 < v11;
LABEL_11:
  if (v8)
  {
    if (v10 != v11 && v4)
    {
      v12 = result[1];
      v13 = *result;
      *(_DWORD *)v36 = HIDWORD(v12);
      *(_OWORD *)&v36[4] = result[2];
      v15 = *a3;
      v14 = a3[1];
      *(__int128 *)((char *)result + 29) = *(__int128 *)((char *)a3 + 29);
      *result = v15;
      result[1] = v14;
LABEL_27:
      *a3 = v13;
      a3[1] = v12;
      *(__int128 *)((char *)a3 + 29) = *(_OWORD *)&v36[1];
      return result;
    }
    v22 = *result;
    *(_OWORD *)v34 = result[1];
    *(_OWORD *)&v34[16] = result[2];
    v24 = *a2;
    v23 = a2[1];
    *(__int128 *)((char *)result + 29) = *(__int128 *)((char *)a2 + 29);
    *result = v24;
    result[1] = v23;
    *a2 = v22;
    a2[1] = *(_OWORD *)v34;
    *(__int128 *)((char *)a2 + 29) = *(_OWORD *)&v34[13];
    v25 = 24;
    while (1)
    {
      v26 = *(_QWORD *)((char *)a3 + v25);
      v27 = *(_QWORD *)((char *)a2 + v25);
      if (v26 != v27)
        break;
      v25 -= 8;
      if (v25 == -8)
        return result;
    }
    if (v26 < v27)
    {
      v12 = a2[1];
      v13 = *a2;
      *(_DWORD *)v36 = HIDWORD(v12);
      *(_OWORD *)&v36[4] = a2[2];
      v32 = *a3;
      v31 = a3[1];
      *(__int128 *)((char *)a2 + 29) = *(__int128 *)((char *)a3 + 29);
      *a2 = v32;
      a2[1] = v31;
      goto LABEL_27;
    }
  }
  else if (v10 != v11 && v4)
  {
    v16 = *a2;
    *(_OWORD *)v33 = a2[1];
    *(_OWORD *)&v33[16] = a2[2];
    v18 = *a3;
    v17 = a3[1];
    *(__int128 *)((char *)a2 + 29) = *(__int128 *)((char *)a3 + 29);
    *a2 = v18;
    a2[1] = v17;
    *a3 = v16;
    a3[1] = *(_OWORD *)v33;
    *(__int128 *)((char *)a3 + 29) = *(_OWORD *)&v33[13];
    v19 = 24;
    while (1)
    {
      v20 = *(_QWORD *)((char *)a2 + v19);
      v21 = *(_QWORD *)((char *)result + v19);
      if (v20 != v21)
        break;
      v19 -= 8;
      if (v19 == -8)
        return result;
    }
    if (v20 < v21)
    {
      v28 = *result;
      *(_OWORD *)v35 = result[1];
      *(_OWORD *)&v35[16] = result[2];
      v30 = *a2;
      v29 = a2[1];
      *(__int128 *)((char *)result + 29) = *(__int128 *)((char *)a2 + 29);
      *result = v30;
      result[1] = v29;
      *a2 = v28;
      a2[1] = *(_OWORD *)v35;
      *(__int128 *)((char *)a2 + 29) = *(_OWORD *)&v35[13];
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::RenderGraphMeshNodeBase::depthSort(re::MeshSortMode,re::Slice<re::FilteredMeshPass> const&,re::RenderGraphContext &,re::DynamicArray<re::MeshPartSortResult> &,re::DrawCallRecorderGroup *,re::SortMeshPartsArgs const&,re::Allocator *)::$_1 &,`anonymous namespace'::DepthSortKey *>(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _BYTE v71[32];
  __int128 vars0;

  v4 = ((char *)a2 - (char *)a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = 0;
      v7 = a2 - 4;
      while (1)
      {
        v8 = *(_QWORD *)((char *)a2 + v6 - 40);
        v9 = *(_QWORD *)((char *)a1 + v6 + 24);
        if (v8 != v9)
          break;
        v6 -= 8;
        if (v6 == -32)
          return 1;
      }
      if (v8 < v9)
      {
        v35 = a1[2];
        v37 = *a1;
        *(_OWORD *)v71 = a1[1];
        v36 = *(_OWORD *)v71;
        *(_OWORD *)&v71[16] = v35;
        v39 = *v7;
        v38 = *(a2 - 3);
        *(__int128 *)((char *)a1 + 29) = *(__int128 *)((char *)a2 - 35);
        *a1 = v39;
        a1[1] = v38;
        *v7 = v37;
        *(a2 - 3) = v36;
        *(__int128 *)((char *)a2 - 35) = *(_OWORD *)&v71[13];
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v28 = a1 + 4;
      v29 = a1 + 8;
      v30 = a1 + 12;
      v31 = a2 - 4;
      v32 = 0;
      while (1)
      {
        v33 = *(_QWORD *)((char *)a2 + v32 - 40);
        v34 = *(_QWORD *)((char *)a1 + v32 + 216);
        if (v33 != v34)
          break;
        v32 -= 8;
        if (v32 == -32)
          return 1;
      }
      if (v33 < v34)
      {
        v40 = 0;
        v41 = a1[14];
        v43 = *v30;
        *(_OWORD *)v71 = a1[13];
        v42 = *(_OWORD *)v71;
        *(_OWORD *)&v71[16] = v41;
        v45 = *v31;
        v44 = *(a2 - 3);
        *(__int128 *)((char *)a1 + 221) = *(__int128 *)((char *)a2 - 35);
        *v30 = v45;
        a1[13] = v44;
        *v31 = v43;
        *(a2 - 3) = v42;
        *(__int128 *)((char *)a2 - 35) = *(_OWORD *)&v71[13];
        result = 1;
        while (1)
        {
          v46 = *(_QWORD *)((char *)a1 + v40 + 216);
          v47 = *(_QWORD *)((char *)a1 + v40 + 152);
          if (v46 != v47)
            break;
          v40 -= 8;
          if (v40 == -32)
            return result;
        }
        if (v46 < v47)
        {
          v48 = 0;
          v49 = a1[10];
          v51 = *v29;
          *(_OWORD *)v71 = a1[9];
          v50 = *(_OWORD *)v71;
          *(_OWORD *)&v71[16] = v49;
          v52 = *v30;
          v53 = a1[13];
          v54 = *(__int128 *)((char *)a1 + 221);
          *v30 = v51;
          a1[13] = v50;
          *(__int128 *)((char *)a1 + 221) = *(_OWORD *)&v71[13];
          *v29 = v52;
          a1[9] = v53;
          *(__int128 *)((char *)a1 + 157) = v54;
          result = 1;
          while (1)
          {
            v55 = *(_QWORD *)((char *)a1 + v48 + 152);
            v56 = *(_QWORD *)((char *)a1 + v48 + 88);
            if (v55 != v56)
              break;
            v48 -= 8;
            if (v48 == -32)
              return result;
          }
          if (v55 < v56)
          {
            v57 = 0;
            v58 = a1[6];
            v60 = *v28;
            *(_OWORD *)v71 = a1[5];
            v59 = *(_OWORD *)v71;
            *(_OWORD *)&v71[16] = v58;
            v61 = *v29;
            v62 = a1[9];
            v63 = *(__int128 *)((char *)a1 + 157);
            *v29 = v60;
            a1[9] = v59;
            *(__int128 *)((char *)a1 + 157) = *(_OWORD *)&v71[13];
            *v28 = v61;
            a1[5] = v62;
            *(__int128 *)((char *)a1 + 93) = v63;
            result = 1;
            while (1)
            {
              v64 = *(_QWORD *)((char *)a1 + v57 + 88);
              v65 = *(_QWORD *)((char *)a1 + v57 + 24);
              if (v64 != v65)
                break;
              v57 -= 8;
              if (v57 == -32)
                return result;
            }
            if (v64 < v65)
            {
              v66 = a1[2];
              v68 = *a1;
              *(_OWORD *)v71 = a1[1];
              v67 = *(_OWORD *)v71;
              *(_OWORD *)&v71[16] = v66;
              v69 = a1[5];
              *a1 = *v28;
              a1[1] = v69;
              *(__int128 *)((char *)a1 + 29) = *(__int128 *)((char *)a1 + 93);
              *v28 = v68;
              a1[5] = v67;
              *(__int128 *)((char *)a1 + 93) = *(_OWORD *)&v71[13];
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 8;
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = (char *)a1 + 88;
      v14 = a1;
      break;
  }
  while (2)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)((char *)v14 + v15 + 216);
      v17 = *(_QWORD *)((char *)v14 + v15 + 152);
      if (v16 != v17)
        break;
      v15 -= 8;
      if (v15 == -32)
        goto LABEL_23;
    }
    if (v16 < v17)
    {
      v18 = v11[1];
      v70 = *v11;
      *(_OWORD *)v71 = v18;
      v19 = v11[3];
      *(_OWORD *)&v71[16] = v11[2];
      vars0 = v19;
      v20 = v13;
      v21 = v11;
      while (1)
      {
        v22 = v10[1];
        *v21 = *v10;
        v21[1] = v22;
        *(__int128 *)((char *)v21 + 29) = *(__int128 *)((char *)v10 + 29);
        if (v10 == a1)
          break;
        v21 = v10;
        v23 = 0;
        v10 -= 4;
        while (1)
        {
          v24 = *(_QWORD *)(((unint64_t)&v70 | 0x18) + v23);
          v25 = *(_QWORD *)&v20[v23];
          if (v24 != v25)
            break;
          v23 -= 8;
          if (v23 == -32)
            goto LABEL_22;
        }
        v20 -= 64;
        if (v24 >= v25)
          goto LABEL_22;
      }
      v21 = a1;
LABEL_22:
      v26 = *(_OWORD *)&v71[13];
      v21[1] = *(_OWORD *)v71;
      v27 = v70;
      *(__int128 *)((char *)v21 + 29) = v26;
      *v21 = v27;
      if (++v12 == 8)
        return v11 + 4 == a2;
    }
LABEL_23:
    v10 = v11;
    v14 += 4;
    v13 += 64;
    v11 += 4;
    if (v11 != a2)
      continue;
    return 1;
  }
}

