void re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::ecs2::VFXSceneComponent::startFetchingParameter(re::ecs2::VFXSceneComponent *this, NSString *a2)
{
  NSString *v3;
  const char *v4;
  size_t v5;
  unint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t *v9;
  re *v10;
  __n128 *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 buf;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = objc_retainAutorelease(a2);
  v4 = -[NSString UTF8String](v3, "UTF8String");
  v5 = strlen(v4);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)v4, v5, 0, (unint64_t *)&buf);
    v6 = (*((_QWORD *)&buf + 1) + ((_QWORD)buf << 6) + ((unint64_t)buf >> 2) - 0x61C8864680B583E9) ^ buf;
  }
  else
  {
    v6 = 0;
  }
  v18 = v6;
  v7 = (re *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 64, (uint64_t *)&v18);
  if (!v7)
  {
    v16 = *re::ecsComponentsLogObjects(0);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v3;
    v13 = "Unable to fetch parameter named %@";
    goto LABEL_16;
  }
  v8 = *((_QWORD *)this + 2);
  if (!v8
    || (v9 = (uint64_t *)v7,
        (v7 = (re *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) == 0))
  {
    v12 = *re::ecsComponentsLogObjects(v7);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    LOWORD(buf) = 0;
    v13 = "Unable to get VFXSceneReadbackComponent";
    v14 = v12;
    v15 = 2;
LABEL_17:
    _os_log_debug_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)&buf, v15);
    goto LABEL_12;
  }
  v10 = v7;
  v11 = (__n128 *)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 112, v9);
  if (!v11)
  {
    v16 = *re::ecsComponentsLogObjects(0);
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    v17 = *v9;
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v17;
    v13 = "Missing VFX binding %zu";
LABEL_16:
    v14 = v16;
    v15 = 12;
    goto LABEL_17;
  }
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::ecs2::VFXREBinding&>((uint64_t)v10 + 32, v9, v11);
  *((_BYTE *)this + 212) = 1;
LABEL_12:

}

__n128 re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::ecs2::VFXREBinding&>(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v11 + 88 * v10 + 16) == v6)
        return result;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 88 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 88 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v12 = *(_DWORD *)(a1 + 36);
  if (v12 == 0x7FFFFFFF)
  {
    v12 = *(_DWORD *)(a1 + 32);
    v13 = v12;
    if (v12 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v13 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v13 + 1;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(v14 + 88 * v12 + 8);
    *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
  }
  v16 = 88 * v12;
  *(_DWORD *)(v14 + v16 + 8) = v15 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v16) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v16 + 16) = *a2;
  v17 = *(_QWORD *)(a1 + 16) + v16;
  *(_DWORD *)(v17 + 24) = a3->n128_u32[0];
  re::DynamicArray<BOOL>::DynamicArray(v17 + 32, &a3->n128_i64[1]);
  result = a3[3];
  *(__n128 *)(v17 + 72) = result;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v12;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

void re::ecs2::VFXSceneComponent::stopFetchingParameter(re::ecs2::VFXSceneComponent *this, NSString *a2)
{
  NSString *v3;
  const char *v4;
  size_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  NSObject *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  __int128 buf;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = objc_retainAutorelease(a2);
  v4 = -[NSString UTF8String](v3, "UTF8String");
  v5 = strlen(v4);
  if (v5)
  {
    MurmurHash3_x64_128((uint64_t)v4, v5, 0, (unint64_t *)&buf);
    v6 = (*((_QWORD *)&buf + 1) + ((_QWORD)buf << 6) + ((unint64_t)buf >> 2) - 0x61C8864680B583E9) ^ buf;
  }
  else
  {
    v6 = 0;
  }
  v26 = v6;
  v7 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 64, (uint64_t *)&v26);
  if (!v7)
  {
    v21 = *re::ecsComponentsLogObjects(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      goto LABEL_21;
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v3;
    v18 = "Unable to stop fetching parameter named %@";
    v19 = v21;
    v20 = 12;
    goto LABEL_15;
  }
  v8 = *((_QWORD *)this + 2);
  if (!v8
    || (v9 = (uint64_t *)v7,
        (v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) == 0))
  {
    v17 = *re::ecsComponentsLogObjects((re *)v7);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      goto LABEL_21;
    LOWORD(buf) = 0;
    v18 = "Unable to get VFXSceneReadbackComponent";
    v19 = v17;
    v20 = 2;
LABEL_15:
    _os_log_debug_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEBUG, v18, (uint8_t *)&buf, v20);
    goto LABEL_21;
  }
  v10 = v7;
  if (*(_QWORD *)(v7 + 32))
  {
    v11 = *v9;
    v12 = 0xBF58476D1CE4E5B9 * (*v9 ^ ((unint64_t)*v9 >> 30));
    v13 = ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31))
        % *(unsigned int *)(v7 + 56);
    v14 = *(_QWORD *)(v7 + 40);
    v15 = *(unsigned int *)(v14 + 4 * v13);
    if ((_DWORD)v15 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(v7 + 48);
      if (*(_QWORD *)(v16 + 88 * v15 + 16) == v11)
      {
        *(_DWORD *)(v14 + 4 * v13) = *(_DWORD *)(v16 + 88 * v15 + 8) & 0x7FFFFFFF;
LABEL_19:
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(*(_QWORD *)(v7 + 48) + 88 * v15);
        v24 = *(_QWORD *)(v10 + 48) + 88 * v15;
        *(_DWORD *)(v24 + 8) = *(_DWORD *)(v24 + 8) & 0x80000000 | *(_DWORD *)(v10 + 68);
        --*(_DWORD *)(v10 + 60);
        v25 = *(_DWORD *)(v10 + 72) + 1;
        *(_DWORD *)(v10 + 68) = v15;
        *(_DWORD *)(v10 + 72) = v25;
      }
      else
      {
        while (1)
        {
          v22 = v15;
          v23 = *(_DWORD *)(v16 + 88 * v15 + 8);
          v15 = v23 & 0x7FFFFFFF;
          if ((v23 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v16 + 88 * v15 + 16) == v11)
          {
            *(_DWORD *)(v16 + 88 * v22 + 8) = *(_DWORD *)(v16 + 88 * v22 + 8) & 0x80000000 | *(_DWORD *)(v16 + 88 * v15 + 8) & 0x7FFFFFFF;
            goto LABEL_19;
          }
        }
      }
    }
  }
  *((_BYTE *)this + 212) = *(_DWORD *)(v10 + 60) != 0;
LABEL_21:

}

void re::ecs2::VFXSceneComponent::initializeBindings(re::ecs2::VFXSceneComponent *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  void *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  id v13;
  _anonymous_namespace_ *v14;
  id v15;
  _anonymous_namespace_ *v16;
  id v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  id v22;
  const char *v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  __int128 v28;
  unint64_t v29;
  id v30;
  const char *v31;
  size_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __n128 v44;
  void *v45;
  id obj;
  uint64_t v47;
  _anonymous_namespace_ *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  id v59[4];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[128];
  const char *v80;
  size_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  re::ecs2::VFXSceneComponent::modelScene(this, v59);
  objc_msgSend(v59[0], "scene");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      v4 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    else
      v4 = *((_QWORD *)this + 27);
    objc_msgSend(v2, "bindings");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "count");
    if (*(_QWORD *)(v4 + 40) < v6)
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((_QWORD *)(v4 + 32), v6);

    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v45 = v2;
    objc_msgSend(v2, "bindings");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v7 = (_anonymous_namespace_ *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v79, 16);
    v48 = v7;
    if (v7)
    {
      v47 = *(_QWORD *)v76;
      v49 = (unint64_t *)((char *)this + 64);
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v76 != v47)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v75 + 1) + 8 * (_QWORD)v8);
          v68.n128_u32[0] = -1;
          v72 = 0;
          v69 = 0;
          v70 = 0;
          v68.n128_u64[1] = 0;
          v71 = 0;
          v73 = 0;
          memset(v59, 0, sizeof(v59));
          v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v59, 0);
          v60 = 0u;
          v61 = 0u;
          v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v60, 0);
          v62 = 0u;
          v63 = 0u;
          v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v62, 0);
          v64 = 0u;
          v65 = 0u;
          re::DynamicString::setCapacity(&v64, 0);
          objc_msgSend(v9, "identifier");
          v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v14 = (_anonymous_namespace_ *)objc_msgSend(v13, "UTF8String");

          objc_msgSend(v9, "objectName");
          v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v16 = (_anonymous_namespace_ *)objc_msgSend(v15, "UTF8String");

          objc_msgSend(v9, "bindingName");
          v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v18 = (_anonymous_namespace_ *)objc_msgSend(v17, "UTF8String");

          re::DynamicString::operator=((re::DynamicString *)v59, (re::DynamicString *)&v57);
          re::DynamicString::operator=((re::DynamicString *)&v60, (re::DynamicString *)&v55);
          re::DynamicString::operator=((re::DynamicString *)&v62, (re::DynamicString *)&v53);
          *(_QWORD *)&v66 = objc_msgSend(v9, "type");
          objc_msgSend(v9, "min");
          *(_QWORD *)&v67 = v19;
          v20 = (_anonymous_namespace_ *)objc_msgSend(v9, "max");
          *((_QWORD *)&v67 + 1) = v21;
          objc_msgSend(v9, "userManual");
          v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v23 = (const char *)objc_msgSend(v22, "UTF8String");
          v24 = strlen(v23);
          v80 = v23;
          v81 = v24;
          re::DynamicString::operator=((re::DynamicString *)&v51, (uint64_t)&v80);

          re::DynamicString::operator=((re::DynamicString *)&v64, (re::DynamicString *)&v51);
          v25 = *(_QWORD *)(v4 + 48);
          v26 = v25;
          if (v25 >= *(_QWORD *)(v4 + 40))
          {
            re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::growCapacity((_QWORD *)(v4 + 32), v25 + 1);
            v26 = *(_QWORD *)(v4 + 48);
          }
          v27 = (_OWORD *)(*(_QWORD *)(v4 + 64) + 160 * v26);
          re::DynamicString::DynamicString((re::DynamicString *)v27, (const re::DynamicString *)v59);
          re::DynamicString::DynamicString((re::DynamicString *)(v27 + 2), (const re::DynamicString *)&v60);
          re::DynamicString::DynamicString((re::DynamicString *)(v27 + 4), (const re::DynamicString *)&v62);
          re::DynamicString::DynamicString((re::DynamicString *)(v27 + 6), (const re::DynamicString *)&v64);
          v28 = v67;
          v27[8] = v66;
          v27[9] = v28;
          ++*(_QWORD *)(v4 + 48);
          ++*(_DWORD *)(v4 + 56);
          v68.n128_u32[0] = v25;
          v50 = v29;
          v74 = objc_msgSend(v9, "objectID");
          objc_msgSend(v9, "identifier");
          v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v31 = (const char *)objc_msgSend(v30, "UTF8String");
          v32 = strlen(v31);
          if (v32)
          {
            MurmurHash3_x64_128((uint64_t)v31, v32, 0, (unint64_t *)&v80);
            v33 = (v81 + ((_QWORD)v80 << 6) + ((unint64_t)v80 >> 2) - 0x61C8864680B583E9) ^ (unint64_t)v80;
          }
          else
          {
            v33 = 0;
          }

          v34 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
          v35 = v34 ^ (v34 >> 31);
          v36 = *v49;
          if (!*v49
            || (v36 = v35 % *((unsigned int *)this + 22),
                v37 = *(unsigned int *)(*((_QWORD *)this + 9) + 4 * v36),
                (_DWORD)v37 == 0x7FFFFFFF))
          {
LABEL_22:
            v39 = *((unsigned int *)this + 25);
            if ((_DWORD)v39 == 0x7FFFFFFF)
            {
              v39 = *((unsigned int *)this + 24);
              v40 = v39;
              if ((_DWORD)v39 == *((_DWORD *)this + 22))
              {
                re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)v49, 2 * *((_DWORD *)this + 23));
                v36 = v35 % *((unsigned int *)this + 22);
                v40 = *((_DWORD *)this + 24);
              }
              *((_DWORD *)this + 24) = v40 + 1;
              v41 = *((_QWORD *)this + 10);
              v42 = *(_DWORD *)(v41 + 32 * v39 + 8);
            }
            else
            {
              v41 = *((_QWORD *)this + 10);
              v42 = *(_DWORD *)(v41 + 32 * v39 + 8);
              *((_DWORD *)this + 25) = v42 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v41 + 32 * v39 + 8) = v42 | 0x80000000;
            v43 = *((_QWORD *)this + 9);
            *(_DWORD *)(*((_QWORD *)this + 10) + 32 * v39 + 8) = *(_DWORD *)(*((_QWORD *)this + 10) + 32 * v39 + 8) & 0x80000000 | *(_DWORD *)(v43 + 4 * v36);
            *(_QWORD *)(*((_QWORD *)this + 10) + 32 * v39) = v35;
            *(_QWORD *)(*((_QWORD *)this + 10) + 32 * v39 + 16) = v33;
            *(_QWORD *)(*((_QWORD *)this + 10) + 32 * v39 + 24) = v29;
            *(_DWORD *)(v43 + 4 * v36) = v39;
            ++*((_DWORD *)this + 23);
            ++*((_DWORD *)this + 26);
          }
          else
          {
            v38 = *((_QWORD *)this + 10);
            while (*(_QWORD *)(v38 + 32 * v37 + 16) != v33)
            {
              v37 = *(_DWORD *)(v38 + 32 * v37 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v37 == 0x7FFFFFFF)
                goto LABEL_22;
            }
          }
          v44 = re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add<re::ecs2::VFXREBinding&>((uint64_t)this + 112, (uint64_t *)&v50, &v68);
          if (v51 && (v52 & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v51 + 40))(v44);
          if (v53 && (v54 & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v53 + 40))(v44);
          if (v55 && (v56 & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v55 + 40))(v44);
          if (v57 && (v58 & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v57 + 40))(v44);
          if ((_QWORD)v64)
          {
            if ((BYTE8(v64) & 1) != 0)
              (*(void (**)(__n128))(*(_QWORD *)v64 + 40))(v44);
            v44 = 0uLL;
            v64 = 0u;
            v65 = 0u;
          }
          if ((_QWORD)v62)
          {
            if ((BYTE8(v62) & 1) != 0)
              (*(void (**)(__n128))(*(_QWORD *)v62 + 40))(v44);
            v44 = 0uLL;
            v62 = 0u;
            v63 = 0u;
          }
          if ((_QWORD)v60)
          {
            if ((BYTE8(v60) & 1) != 0)
              (*(void (**)(__n128))(*(_QWORD *)v60 + 40))(v44);
            v44 = 0uLL;
            v60 = 0u;
            v61 = 0u;
          }
          if (v59[0] && ((uint64_t)v59[1] & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v59[0] + 40))(v44);
          v7 = (_anonymous_namespace_ *)v68.n128_u64[1];
          if (v68.n128_u64[1] && v72)
            v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(*(_QWORD *)v68.n128_u64[1] + 40))(v44);
          v8 = (_anonymous_namespace_ *)((char *)v8 + 1);
        }
        while (v8 != v48);
        v7 = (_anonymous_namespace_ *)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v75, v79, 16, v44.n128_f64[0]);
        v48 = v7;
      }
      while (v7);
    }

    re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork((re::ecs2::VFXSceneMetadataComponent *)v4);
    v2 = v45;
  }

}

void re::ecs2::VFXSceneComponent::updateBindingStatesInitialValues(re::ecs2::VFXSceneComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[6];
  id v6;

  if (!*((_QWORD *)this + 4))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
    {
      v3 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (!v3)
        return;
    }
    else
    {
      v3 = *((_QWORD *)this + 27);
      if (!v3)
        return;
    }
    re::ecs2::VFXSceneComponent::modelScene(this, &v6);
    objc_msgSend(v6, "scene");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      v5[0] = MEMORY[0x24BDAC760];
      v5[1] = 3221225472;
      v5[2] = ___ZN2re4ecs217VFXSceneComponent32updateBindingStatesInitialValuesEv_block_invoke;
      v5[3] = &__block_descriptor_48_e5_v8__0l;
      v5[4] = this;
      v5[5] = v3;
      objc_msgSend(v4, "performTransaction:", v5);
    }

  }
}

void ___ZN2re4ecs217VFXSceneComponent32updateBindingStatesInitialValuesEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *Descriptor;
  char *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD aBlock[5];
  id v22;

  v1 = *(_QWORD *)(a1 + 32);
  re::ecs2::VFXSceneComponent::modelScene((re::ecs2::VFXSceneComponent *)v1, &v22);
  objc_msgSend(v22, "effect");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = *(unsigned int *)(v1 + 144);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = (int *)(*(_QWORD *)(v1 + 128) + 8);
      while (1)
      {
        v6 = *v5;
        v5 += 22;
        if (v6 < 0)
          break;
        if (v3 == ++v4)
        {
          LODWORD(v4) = *(_DWORD *)(v1 + 144);
          break;
        }
      }
    }
    else
    {
      LODWORD(v4) = 0;
    }
    if ((_DWORD)v3 != (_DWORD)v4)
    {
      v7 = v4;
      v8 = *(_DWORD *)(v1 + 144);
      do
      {
        v9 = *(_QWORD *)(v1 + 128);
        v10 = v9 + 88 * v7;
        v12 = *(_DWORD *)(v10 + 72);
        v11 = (_DWORD *)(v10 + 72);
        if (!v12)
        {
          v13 = v9 + 88 * v7;
          Descriptor = (_QWORD *)re::ecs2::VFXSceneMetadataComponent::getDescriptor(*(re::ecs2::VFXSceneMetadataComponent **)(a1 + 40), *(_DWORD *)(v13 + 24));
          if ((Descriptor[9] & 1) != 0)
            v15 = (char *)Descriptor[10];
          else
            v15 = (char *)Descriptor + 73;
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 3221225472;
          aBlock[2] = ___ZN2re4ecs217VFXSceneComponent32updateBindingStatesInitialValuesEv_block_invoke_2;
          aBlock[3] = &__block_descriptor_40_e13_v24__0r_v8Q16l;
          aBlock[4] = v13 + 32;
          v17 = _Block_copy(aBlock);
          objc_msgSend(v2, "parameterOf:named:type:with:", *(_QWORD *)(v13 + 80), v16, Descriptor[16], v17);
          *v11 = 1;

          v8 = *(_DWORD *)(v1 + 144);
        }
        if (v8 <= (int)v4 + 1)
          v18 = v4 + 1;
        else
          v18 = v8;
        while (1)
        {
          v7 = (v4 + 1);
          if (v18 - 1 == (_DWORD)v4)
            break;
          LODWORD(v4) = v4 + 1;
          v19 = v7;
          if ((*(_DWORD *)(*(_QWORD *)(v1 + 128) + 88 * v7 + 8) & 0x80000000) != 0)
            goto LABEL_22;
        }
        v19 = v18;
LABEL_22:
        LODWORD(v4) = v19;
      }
      while ((_DWORD)v3 != v19);
    }
  }

}

void ___ZN2re4ecs217VFXSceneComponent22writeBindingsToRuntimeEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Descriptor;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  _QWORD aBlock[5];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned int *)(v2 + 144);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(v2 + 128) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 22;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(v2 + 144);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    v8 = v2 + 160;
    v22 = *(_DWORD *)(v2 + 144);
    do
    {
      v9 = *(_QWORD *)(v2 + 128);
      v10 = v9 + 88 * v7;
      Descriptor = re::ecs2::VFXSceneMetadataComponent::getDescriptor(*(re::ecs2::VFXSceneMetadataComponent **)(a1 + 48), *(_DWORD *)(v10 + 24));
      v12 = re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v8, *(_QWORD *)(v10 + 16));
      if (v12)
      {
        v13 = (_QWORD *)v12;
        v14 = *(unsigned int *)(v9 + 88 * v7 + 72);
        if (*(_QWORD *)(v12 + 8) != v14)
        {
          *(_QWORD *)(v12 + 8) = v14;
          v15 = *(void **)(v12 + 16);
          v3 = v8;
          v16 = v9 + 88 * v7;
          aBlock[0] = MEMORY[0x24BDAC760];
          aBlock[1] = 3221225472;
          aBlock[2] = ___ZN2re4ecs217VFXSceneComponent22writeBindingsToRuntimeEv_block_invoke_2;
          aBlock[3] = &__block_descriptor_40_e12_v24__0_v8Q16l;
          aBlock[4] = v16 + 32;
          v17 = v15;
          v18 = _Block_copy(aBlock);
          v19 = *(_QWORD *)(v16 + 48);
          v8 = v3;
          LODWORD(v3) = v22;
          objc_msgSend(*(id *)(a1 + 32), "setParameterOf:named:type:size:with:", *v13, v17, *(_QWORD *)(Descriptor + 128), v19, v18);

        }
      }
      v20 = *(_DWORD *)(v2 + 144);
      if (v20 <= (int)v4 + 1)
        v20 = v4 + 1;
      while (1)
      {
        v7 = (v4 + 1);
        if (v20 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v21 = v7;
        if ((*(_DWORD *)(*(_QWORD *)(v2 + 128) + 88 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_18;
      }
      v21 = v20;
LABEL_18:
      LODWORD(v4) = v21;
    }
    while ((_DWORD)v3 != v21);
  }
}

void ___ZN2re4ecs217VFXSceneComponent23readBindingsFromRuntimeEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *Descriptor;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  void *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD aBlock[5];

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(v2 + 64);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(v2 + 48) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 22;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(v2 + 64);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)(a1 + 40) + 160;
    do
    {
      v9 = *(_QWORD *)(v2 + 48);
      Descriptor = (unint64_t *)re::ecs2::VFXSceneMetadataComponent::getDescriptor(*(re::ecs2::VFXSceneMetadataComponent **)(a1 + 56), *(_DWORD *)(v9 + 88 * v7 + 24));
      v12 = re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v8, v11);
      if (v12)
      {
        v13 = (_QWORD *)v12;
        v14 = *(void **)(v12 + 16);
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 3221225472;
        aBlock[2] = ___ZN2re4ecs217VFXSceneComponent23readBindingsFromRuntimeEv_block_invoke_2;
        aBlock[3] = &__block_descriptor_40_e13_v24__0r_v8Q16l;
        aBlock[4] = v9 + 88 * v7 + 32;
        v15 = v14;
        v16 = _Block_copy(aBlock);
        objc_msgSend(*(id *)(a1 + 32), "parameterOf:named:type:with:", *v13, v15, Descriptor[16], v16);

      }
      v17 = *(_DWORD *)(v2 + 64);
      if (v17 <= (int)v4 + 1)
        v17 = v4 + 1;
      while (1)
      {
        v7 = (v4 + 1);
        if (v17 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v18 = v7;
        if ((*(_DWORD *)(*(_QWORD *)(v2 + 48) + 88 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      v18 = v17;
LABEL_17:
      LODWORD(v4) = v18;
    }
    while ((_DWORD)v3 != v18);
  }
}

id re::ecs2::VFXSceneComponent::addCollisionPlane(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  id result;

  result = objc_retainAutorelease(*(id *)(a1 + 48));
  if (result)
    return (id)objc_msgSend(result, "addCollisionPlaneWithExtents:transform:", a2, a3, a4, a5, a6);
  return result;
}

id re::ecs2::VFXSceneComponent::updateCollisionPlane(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  id result;

  result = objc_retainAutorelease(*(id *)(a1 + 48));
  if (result)
    return (id)objc_msgSend(result, "updateCollisionPlaneWithId:extents:transform:", a2, a3, a4, a5, a6, a7);
  return result;
}

id re::ecs2::VFXSceneComponent::removeCollisionPlane(id *this, uint64_t a2)
{
  id result;

  result = objc_retainAutorelease(this[6]);
  if (result)
    return (id)objc_msgSend(result, "removeCollisionPlaneWithId:", a2);
  return result;
}

id re::ecs2::VFXSceneComponent::needsCollisionPlanes(id *this)
{
  id result;

  result = objc_retainAutorelease(this[6]);
  if (result)
    return (id)objc_msgSend(result, "needsCollisionPlanes");
  return result;
}

void re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(re::ecs2::VFXSceneComponent *this, NSString *a2, uint64_t a3, NSValue *a4)
{
  NSString *v7;
  NSValue *v8;
  Class VFXMemorySerializationClass;
  Class v10;
  void *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t *v13;
  unsigned __int8 v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t buf[16];

  v7 = a2;
  v8 = a4;
  VFXMemorySerializationClass = re::getVFXMemorySerializationClass((re *)v8);
  if (VFXMemorySerializationClass)
  {
    v10 = VFXMemorySerializationClass;
    v11 = 0;
    switch(a3)
    {
      case 0:
        v19 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_17;
        v13 = &v19;
        goto LABEL_25;
      case 1:
        v35 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke;
        v13 = &v35;
        goto LABEL_25;
      case 2:
        v34 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_2;
        v13 = &v34;
        goto LABEL_25;
      case 3:
        v33 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_3;
        v13 = &v33;
        goto LABEL_25;
      case 4:
        v32 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_4;
        v13 = &v32;
        goto LABEL_25;
      case 5:
        v31 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_5;
        v13 = &v31;
        goto LABEL_25;
      case 6:
        v30 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_6;
        v13 = &v30;
        goto LABEL_25;
      case 7:
        v29 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_7;
        v13 = &v29;
        goto LABEL_25;
      case 8:
        v28 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_8;
        v13 = &v28;
        goto LABEL_25;
      case 9:
        v27 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_9;
        v13 = &v27;
        goto LABEL_25;
      case 10:
        v26 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_10;
        v13 = &v26;
        goto LABEL_25;
      case 11:
      case 12:
        v25 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_11;
        v13 = &v25;
        goto LABEL_25;
      case 13:
      case 18:
        v24 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_12;
        v13 = &v24;
        goto LABEL_25;
      case 14:
      case 19:
        v23 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_13;
        v13 = &v23;
        goto LABEL_25;
      case 15:
      case 20:
        v22 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_14;
        v13 = &v22;
        goto LABEL_25;
      case 16:
      case 21:
        v21 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_15;
        v13 = &v21;
        goto LABEL_25;
      case 17:
      case 22:
        v20 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_16;
        v13 = &v20;
        goto LABEL_25;
      case 24:
      case 25:
        v18 = MEMORY[0x24BDAC760];
        v12 = ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_18;
        v13 = &v18;
LABEL_25:
        v13[1] = 3221225472;
        v13[2] = (uint64_t)v12;
        v13[3] = (uint64_t)&unk_24ED46050;
        v13[5] = (uint64_t)VFXMemorySerializationClass;
        v13[4] = (uint64_t)v8;
        v11 = _Block_copy(v13);

        break;
      default:
        break;
    }
    v16 = -[objc_class VFXSerializedBufferSize:type:](v10, "VFXSerializedBufferSize:type:", -[NSValue pointerValue](v8, "pointerValue", v18), a3);
    re::ecs2::VFXSceneComponent::setParameterValueCopy(this, v7, v17, v16, v11);

  }
  else
  {
    do
      v14 = __ldaxr(re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(NSString *,long,NSValue *)::__FILE____LINE___logged);
    while (__stlxr(1u, re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(NSString *,long,NSValue *)::__FILE____LINE___logged));
    if ((v14 & 1) == 0)
    {
      v15 = *re::ecsComponentsLogObjects(0);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "VFX framework is not loaded", buf, 2u);
      }
    }
  }

}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeBool:to:", *(unsigned __int8 *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeUInt8:to:", *(unsigned __int8 *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeUInt16:to:", *(unsigned __int16 *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeUInt32:to:", *(unsigned int *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_5(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeUInt64:to:", *(_QWORD *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_6(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeInt:to:", *(int *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_7(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeInt8:to:", *(char *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeInt16:to:", *(__int16 *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_9(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeInt32:to:", *(unsigned int *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_10(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeInt64:to:", *(_QWORD *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_11(uint64_t a1, uint64_t a2)
{
  void *v3;
  double v4;

  v3 = *(void **)(a1 + 40);
  LODWORD(v4) = *(_DWORD *)objc_msgSend(*(id *)(a1 + 32), "pointerValue");
  return objc_msgSend(v3, "writeFloat:to:", a2, v4);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_12(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeSIMD2F:to:", a2, *(double *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"));
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_13(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeSIMD3F:to:", a2, *(double *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"));
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_14(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeSIMD4F:to:", a2, *(double *)objc_msgSend(*(id *)(a1 + 32), "pointerValue"));
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_15(uint64_t a1, uint64_t a2)
{
  void *v3;
  double *v4;

  v3 = *(void **)(a1 + 40);
  v4 = (double *)objc_msgSend(*(id *)(a1 + 32), "pointerValue");
  return objc_msgSend(v3, "writeSIMD3x3F:to:", a2, *v4, v4[2], v4[4]);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_16(uint64_t a1, uint64_t a2)
{
  void *v3;
  double *v4;

  v3 = *(void **)(a1 + 40);
  v4 = (double *)objc_msgSend(*(id *)(a1 + 32), "pointerValue");
  return objc_msgSend(v3, "writeSIMD4x4F:to:", a2, *v4, v4[2], v4[4], v4[6]);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_17(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeString:to:", objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t ___ZN2re4ecs217VFXSceneComponent30setParameterValueForIdentifierEP8NSStringlP7NSValue_block_invoke_18(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 40), "writeKeyframeAnimation:to:", objc_msgSend(*(id *)(a1 + 32), "pointerValue"), a2);
}

uint64_t re::MeshBoundingBoxes::boundingBox(re::MeshBoundingBoxes *this, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v6;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = *(_OWORD *)this;
  v3 = *((_QWORD *)this + 3);
  if (v3 <= a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v7 = 136315906;
    v8 = "operator[]";
    v9 = 1024;
    v10 = 866;
    v11 = 2048;
    v12 = a2;
    v13 = 2048;
    v14 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
    v4 = (char *)this + 40;
  else
    v4 = (char *)*((_QWORD *)this + 6);
  return *(_QWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF7 | (8 * (*(_DWORD *)&v4[4 * a2] & 1)))
       + ((16 * *(unsigned int *)&v4[4 * a2]) & 0xFFFFFFFE0);
}

double re::operator*<float>@<D0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[4];
  _OWORD v14[4];

  v3 = 0;
  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v8;
  do
  {
    v14[v3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(v13[v3])), v5, *(float32x2_t *)&v13[v3], 1), v6, (float32x4_t)v13[v3], 2), v7, (float32x4_t)v13[v3], 3);
    ++v3;
  }
  while (v3 != 4);
  result = *(double *)v14;
  v10 = v14[1];
  v11 = v14[2];
  v12 = v14[3];
  *a3 = v14[0];
  a3[1] = v10;
  a3[2] = v11;
  a3[3] = v12;
  return result;
}

uint64_t re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

_QWORD *re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 v5;
  unint64_t v6;
  unint64_t v7;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 160 * v2;
    v4 = (__n128 *)(result[4] + 64);
    v5 = 0uLL;
    do
    {
      v6 = v4[2].n128_u64[0];
      if (v6)
      {
        if ((v4[2].n128_u8[8] & 1) != 0)
        {
          (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v6 + 40))(v6, v4[3].n128_u64[0], v5);
          v5 = 0uLL;
        }
        v4[2] = v5;
        v4[3] = v5;
      }
      if (v4->n128_u64[0])
      {
        if ((v4->n128_u8[8] & 1) != 0)
        {
          (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v4->n128_u64[0] + 40))(v4->n128_u64[0], v4[1].n128_u64[0], v5);
          v5 = 0uLL;
        }
        *v4 = v5;
        v4[1] = v5;
      }
      v7 = v4[-2].n128_u64[0];
      if (v7)
      {
        if ((v4[-2].n128_u8[8] & 1) != 0)
        {
          (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v7 + 40))(v7, v4[-1].n128_u64[0], v5);
          v5 = 0uLL;
        }
        v4[-2] = v5;
        v4[-1] = v5;
      }
      result = (_QWORD *)v4[-4].n128_u64[0];
      if (result)
      {
        if ((v4[-4].n128_u8[8] & 1) != 0)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, __n128))(*result + 40))(result, v4[-3].n128_u64[0], v5);
          v5 = 0uLL;
        }
        v4[-4] = v5;
        v4[-3] = v5;
      }
      v4 += 10;
      v3 -= 160;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void re::ecs2::VFXSystem::~VFXSystem(re::ecs2::VFXSystem *this)
{
  re::AssetHandle::~AssetHandle((re::ecs2::VFXSystem *)((char *)this + 224));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle::~AssetHandle((re::ecs2::VFXSystem *)((char *)this + 224));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::VFXSystem::typeInfo(re::ecs2::VFXSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

_QWORD *re::DynamicArray<re::VFXScene>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::VFXScene>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x320uLL))
        {
          v2 = 800 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 800 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 800, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 800 * v9;
        do
        {
          v12 = v8 + v10;
          v13 = &v7[v10 / 8];
          v14 = *(_OWORD *)(v8 + v10);
          v15 = *(_OWORD *)(v8 + v10 + 16);
          v16 = *(_OWORD *)(v8 + v10 + 48);
          *((_OWORD *)v13 + 2) = *(_OWORD *)(v8 + v10 + 32);
          *((_OWORD *)v13 + 3) = v16;
          *(_OWORD *)v13 = v14;
          *((_OWORD *)v13 + 1) = v15;
          v17 = *(_OWORD *)(v8 + v10 + 64);
          v18 = *(_OWORD *)(v8 + v10 + 80);
          v19 = *(_OWORD *)(v8 + v10 + 112);
          *((_OWORD *)v13 + 6) = *(_OWORD *)(v8 + v10 + 96);
          *((_OWORD *)v13 + 7) = v19;
          *((_OWORD *)v13 + 4) = v17;
          *((_OWORD *)v13 + 5) = v18;
          v20 = *(_OWORD *)(v8 + v10 + 128);
          v21 = *(_OWORD *)(v8 + v10 + 144);
          v22 = *(_OWORD *)(v8 + v10 + 176);
          *((_OWORD *)v13 + 10) = *(_OWORD *)(v8 + v10 + 160);
          *((_OWORD *)v13 + 11) = v22;
          *((_OWORD *)v13 + 8) = v20;
          *((_OWORD *)v13 + 9) = v21;
          v23 = *(_OWORD *)(v8 + v10 + 192);
          v24 = *(_OWORD *)(v8 + v10 + 208);
          v25 = *(_OWORD *)(v8 + v10 + 240);
          *((_OWORD *)v13 + 14) = *(_OWORD *)(v8 + v10 + 224);
          *((_OWORD *)v13 + 15) = v25;
          *((_OWORD *)v13 + 12) = v23;
          *((_OWORD *)v13 + 13) = v24;
          *((_OWORD *)v13 + 18) = 0u;
          *((_OWORD *)v13 + 19) = 0u;
          *((_OWORD *)v13 + 16) = 0u;
          *((_OWORD *)v13 + 17) = 0u;
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(&v7[v10 / 8 + 32], (uint64_t *)(v8 + v10 + 256));
          *((_DWORD *)v13 + 80) = *(_DWORD *)(v8 + v10 + 320);
          v26 = *(unsigned __int8 *)(v8 + v10 + 328);
          *((_BYTE *)v13 + 328) = v26;
          if (v26)
            v13[42] = *(_QWORD *)(v12 + 336);
          *(_OWORD *)&v7[v10 / 8 + 43] = *(_OWORD *)(v12 + 344);
          v27 = *(_OWORD *)(v12 + 360);
          v28 = *(_OWORD *)(v12 + 376);
          v29 = *(_OWORD *)(v12 + 392);
          *(_OWORD *)&v7[v10 / 8 + 51] = *(_OWORD *)(v12 + 408);
          *(_OWORD *)&v7[v10 / 8 + 49] = v29;
          *(_OWORD *)&v7[v10 / 8 + 47] = v28;
          *(_OWORD *)&v7[v10 / 8 + 45] = v27;
          v30 = *(_OWORD *)(v12 + 424);
          v31 = *(_OWORD *)(v12 + 440);
          v32 = *(_OWORD *)(v12 + 456);
          *(_OWORD *)&v7[v10 / 8 + 59] = *(_OWORD *)(v12 + 472);
          *(_OWORD *)&v7[v10 / 8 + 57] = v32;
          *(_OWORD *)&v7[v10 / 8 + 55] = v31;
          *(_OWORD *)&v7[v10 / 8 + 53] = v30;
          v33 = *(unsigned __int8 *)(v12 + 496);
          LOBYTE(v7[v10 / 8 + 62]) = v33;
          if (v33)
          {
            v34 = &v7[v10 / 8];
            v35 = *(_OWORD *)(v8 + v10 + 528);
            *((_OWORD *)v34 + 32) = *(_OWORD *)(v8 + v10 + 512);
            *((_OWORD *)v34 + 33) = v35;
          }
          v36 = v8 + v10;
          v7[v10 / 8 + 68] = *(_QWORD *)(v8 + v10 + 544);
          v37 = *(unsigned __int8 *)(v8 + v10 + 560);
          LOBYTE(v7[v10 / 8 + 70]) = v37;
          if (v37)
          {
            v38 = &v7[v10 / 8];
            v39 = *(_OWORD *)(v36 + 576);
            v40 = *(_OWORD *)(v36 + 592);
            v41 = *(_OWORD *)(v36 + 624);
            v38[38] = *(_OWORD *)(v36 + 608);
            v38[39] = v41;
            v38[36] = v39;
            v38[37] = v40;
          }
          v7[v10 / 8 + 80] = *(_QWORD *)(v36 + 640);
          v7[v10 / 8 + 82] = *(_QWORD *)(v36 + 656);
          v42 = *(_QWORD *)(v36 + 664);
          *(_OWORD *)(v36 + 656) = 0u;
          v7[v10 / 8 + 83] = v42;
          v43 = *(_OWORD *)(v36 + 672);
          v44 = *(_OWORD *)(v36 + 688);
          v45 = *(_OWORD *)(v36 + 720);
          *(_OWORD *)&v7[v10 / 8 + 88] = *(_OWORD *)(v36 + 704);
          *(_OWORD *)&v7[v10 / 8 + 90] = v45;
          *(_OWORD *)&v7[v10 / 8 + 84] = v43;
          *(_OWORD *)&v7[v10 / 8 + 86] = v44;
          v46 = *(_OWORD *)(v36 + 736);
          v47 = *(_OWORD *)(v36 + 752);
          v48 = *(_OWORD *)(v36 + 768);
          *(_OWORD *)((char *)&v7[v10 / 8 + 97] + 4) = *(_OWORD *)(v36 + 780);
          *(_OWORD *)&v7[v10 / 8 + 94] = v47;
          *(_OWORD *)&v7[v10 / 8 + 96] = v48;
          *(_OWORD *)&v7[v10 / 8 + 92] = v46;

          v49 = *(_QWORD *)(v36 + 656);
          if (v49)
          {

            *(_QWORD *)(v36 + 656) = 0;
          }
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v8 + v10 + 256);
          v10 += 800;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::VFXScene>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 800 * v4;
        v6 = (id *)(v3 + 656);
        do
        {

          if (*v6)
          {

            *v6 = 0;
          }
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(v6 - 50));
          v6 += 100;
          v5 -= 800;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::setTexture(_QWORD *a1, _QWORD *a2, id *a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  BOOL v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  id v18[2];
  id v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = (_anonymous_namespace_ *)(a1 + 1);
  v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 1, a2);
  if (v9 == -1)
  {
    v16 = a1 + 9;
    v17 = a1[11];
    v18[0] = *a3;
    LOBYTE(v18[1]) = 0;
    LOBYTE(v19[1]) = 0;
    re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::add(v16, (uint64_t)v18);
    if (LOBYTE(v18[1]) && v19[0])
    {

      v19[0] = 0;
    }
    if (v18[0])

    LOBYTE(v18[0]) = a4;
    BYTE1(v18[0]) = v17;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::addOrReplace(v8, a2, (__int16 *)v18);
  }
  else
  {
    v10 = a1[2] + 16 * v9;
    v11 = *(unsigned __int8 *)(v10 + 9);
    if (a1[11] <= v11)
    {
      v21 = 0u;
      v22 = 0u;
      *(_OWORD *)v19 = 0u;
      v20 = 0u;
      *(_OWORD *)v18 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v12 = *(unsigned __int8 *)(v10 + 8);
    v13 = (void **)(a1[13] + 32 * v11);
    LOBYTE(v18[0]) = 0;
    re::Optional<NS::SharedPtr<MTL::Texture>>::operator=((uint64_t)(v13 + 1), v18);
    if (LOBYTE(v18[0]) && v18[1])

    if (*a3 != *v13)
    {
      if (*a3)
        v14 = *v13 == 0;
      else
        v14 = 1;
      v15 = v14;
      NS::SharedPtr<MTL::Texture>::operator=(v13, a3);
      if (v12 != a4)
      {
        LOBYTE(v18[0]) = a4;
        BYTE1(v18[0]) = v11;
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::replace(v8, a2, v18);
      }
      if (v15)
      {
        v18[0] = a1;
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(v8, (uint64_t)v18);
      }
    }
  }
}

BOOL re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::replace(_QWORD *a1, _QWORD *a2, _WORD *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v6 = v5;
  if (v5 != -1)
  {
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)a1, a1[1] + 16 * v5);
    *(_WORD *)(a1[1] + 16 * v6 + 8) = *a3;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)a1, a1[1] + 16 * v6);
  }
  return v6 != -1;
}

_QWORD *re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4];
  v6 = v5 + 32 * v4;
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v7 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(v6 + 8) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
  }
  v8 = *(unsigned __int8 *)(a2 + 24);
  *(_BYTE *)(v6 + 24) = v8;
  if (v8)
  {
    *(_DWORD *)(v5 + 32 * v4 + 25) = *(_DWORD *)(a2 + 25);
    v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::addOrReplace(_anonymous_namespace_ *a1, _QWORD *a2, __int16 *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd(a1, a2, a3);
  v7 = v6;
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v6);
  *(_WORD *)(*((_QWORD *)a1 + 1) + 16 * v7 + 8) = *a3;
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v7);
  return *((_QWORD *)a1 + 1) + 16 * v7 + 8;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateKvpsHash(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = __rev16(*(unsigned __int16 *)(a2 + 8));
  v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
  *(_QWORD *)(result + 48) ^= v3 ^ ((v3 << 6) + (v3 >> 2) + (v5 ^ (v5 >> 31)) - 0x61C8864680B583E9);
  return result;
}

_QWORD *re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::rehashKeysWith<re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::rehashNames(void)::{lambda(re::IndexAndProtectionOptions)#1}>(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  uint64_t i;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  result[5] = 0;
  v14[0] = result;
  v2 = result[2];
  if (v2 >= 0x10)
  {
    v4 = result;
    v5 = 0;
    v6 = *result;
    v7 = v2 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        return result;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      v10 = *(_QWORD *)(v14[0] + 8) + 16 * v9;
      v11 = (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 8;
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 88);
      if (v12 <= v11)
      {
        v16 = 0;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 789;
        v21 = 2048;
        v22 = v11;
        v23 = 2048;
        v24 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 104) + 32 * v11))
      {
        v13 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v10 ^ (*(_QWORD *)v10 >> 30));
        v4[5] ^= ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27)));
      }
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  void *v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TextureViews<NS::SharedPtr<MTL::Texture>>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_25;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_25:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 32 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          *v12 = *(_QWORD *)(v8 + v10);
          *(_QWORD *)(v8 + v10) = 0;
          v14 = *(unsigned __int8 *)(v8 + v10 + 8);
          *((_BYTE *)v12 + 8) = v14;
          if (v14)
          {
            v12[2] = *(_QWORD *)(v13 + 16);
            *(_QWORD *)(v13 + 16) = 0;
          }
          v15 = *(unsigned __int8 *)(v13 + 24);
          *((_BYTE *)v12 + 24) = v15;
          if (v15)
            *(_DWORD *)((char *)&v7[v10 / 8 + 3] + 1) = *(_DWORD *)(v8 + v10 + 25);
          if (*(_BYTE *)(v13 + 8))
          {
            v16 = *(void **)(v8 + v10 + 16);
            if (v16)
            {

              *(_QWORD *)(v8 + v10 + 16) = 0;
            }
          }
          v17 = *(void **)(v8 + v10);
          if (v17)
          {

            *(_QWORD *)(v8 + v10) = 0;
          }
          v10 += 32;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_25;
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, __int16 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a3;
  v18 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v18 = *a2;
  *(_WORD *)(v18 + 8) = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateHashes((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v16);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

double re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 40) ^= v3;
  v5 = __rev16(*(unsigned __int16 *)(a2 + 8));
  v6 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v5) ^ ((0xBF58476D1CE4E5B9 * v5) >> 27));
  *(_QWORD *)(result + 48) = v4 ^ v3 ^ ((v3 << 6) + (v3 >> 2) + (v6 ^ (v6 >> 31)) - 0x61C8864680B583E9);
  return result;
}

_QWORD *re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    v9 = v3[2];
    if (v9)
    {
      v10 = 0;
      for (i = 0; i < v9; ++i)
      {
        v12 = v3[1] + v10;
        *(_QWORD *)v12 = 0;
        *(_WORD *)(v12 + 8) = 0;
        v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    v9 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

double re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v18[2];
  uint64_t v19;
  _OWORD v20[4];

  v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init(v20, v4, a2);
  v18[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd((_anonymous_namespace_ *)v20, (_QWORD *)(*(_QWORD *)(v18[0] + 8) + 16 * v10), (_WORD *)(*(_QWORD *)(v18[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        v10 = v19;
      }
      while (v19 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v11 = *((_QWORD *)&v20[3] + 1);
  *((_QWORD *)&v20[3] + 1) = a1[7];
  v12 = v20[0];
  v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(_QWORD *)&v20[1] = v5;
  v14 = v20[2];
  v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + 8) = v15;
  v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + 8) = v16;
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v20);
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, _WORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  LOWORD(v14) = *a3;
  v17 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v17 = *a2;
  *(_WORD *)(v17 + 8) = v14;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::updateHashes((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v16);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

_QWORD *re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  re::IntrospectionBase *v8;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;

  v11 = 0u;
  v12 = 0u;
  v10[0] = 0xFFFFFFFFuLL;
  v10[1] = 0uLL;
  LODWORD(v11) = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(a4, a5, (uint64_t)v10);
  if (*((_QWORD *)&v10[0] + 1) && *((_QWORD *)&v11 + 1))
    (*(void (**)(void))(**((_QWORD **)&v10[0] + 1) + 40))();
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 22;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 88 * v10 + 16, *(_QWORD *)(a2 + 16) + 88 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 88 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    v3 = (_QWORD *)(result + 32);
    result = *(_QWORD *)(result + 32);
    *((_DWORD *)v3 - 6) = v1 & 0x7FFFFFFF;
    if (result)
    {
      if (*(_QWORD *)(v2 + 64))
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      *(_QWORD *)(v2 + 64) = 0;
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      ++*(_DWORD *)(v2 + 56);
    }
  }
  return result;
}

void re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 88 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 88 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 88 * v9;
  *(_DWORD *)(v11 + v13 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v13) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v13 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + v13;
  *(_DWORD *)(v14 + 24) = *(_DWORD *)a5;
  *(_QWORD *)(v14 + 64) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v14 + 40) = v15;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v16 = *(_QWORD *)(v14 + 48);
  *(_QWORD *)(v14 + 48) = *(_QWORD *)(a5 + 24);
  *(_QWORD *)(a5 + 24) = v16;
  v17 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = v17;
  ++*(_DWORD *)(a5 + 32);
  ++*(_DWORD *)(v14 + 56);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(a5 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v15 = re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 88 * v15;
    return v14 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 88 * v10 + 16) != v6)
  {
    v12 = *(_DWORD *)(v11 + 88 * v10 + 8);
    v10 = v12 & 0x7FFFFFFF;
    if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v13 = v11 + 88 * v10;
  *(_DWORD *)(v13 + 24) = *(_DWORD *)a3;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v13 + 32, a3 + 8);
  *(_OWORD *)(v13 + 72) = *(_OWORD *)(a3 + 48);
  ++*(_DWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 16) + 88 * v10;
  return v14 + 24;
}

BOOL re::internal::less<unsigned long>(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a1);
  return re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(a1);
    re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, uint64_t *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 88 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 22;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::ecs2::VFXSceneReadbackComponent::~VFXSceneReadbackComponent(re::ecs2::VFXSceneReadbackComponent *this)
{
  *(_QWORD *)this = &off_24ED461E0;
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED461E0;
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  re::IntrospectionBase *v19;
  uint64_t *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[40];

  memset(v29, 0, sizeof(v29));
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v21, 0);
  v24 = 0uLL;
  *(_QWORD *)&v25 = 0;
  v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)&v23 + 1, 0);
  v26 = 0uLL;
  *(_QWORD *)&v27 = 0;
  v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)&v25 + 1, 0);
  v28 = 0uLL;
  *(_QWORD *)v29 = 0;
  re::DynamicString::setCapacity((_QWORD *)&v27 + 1, 0);
  v11 = *(_QWORD *)(a4 + 16);
  if (v11 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::growCapacity((_QWORD *)a4, v11 + 1);
    v11 = *(_QWORD *)(a4 + 16);
  }
  v12 = *(_QWORD *)(a4 + 32) + 160 * v11;
  *(_QWORD *)v12 = v21;
  *(_OWORD *)(v12 + 8) = v22;
  v13 = *((_QWORD *)&v23 + 1);
  *(_QWORD *)(v12 + 24) = v23;
  *(_QWORD *)(v12 + 32) = v13;
  *(_OWORD *)(v12 + 40) = v24;
  v14 = *((_QWORD *)&v25 + 1);
  *(_QWORD *)(v12 + 56) = v25;
  *(_QWORD *)(v12 + 64) = v14;
  v15 = *((_QWORD *)&v26 + 1);
  *(_QWORD *)(v12 + 72) = v26;
  *(_QWORD *)(v12 + 80) = v15;
  v16 = *((_QWORD *)&v27 + 1);
  *(_QWORD *)(v12 + 88) = v27;
  *(_QWORD *)(v12 + 96) = v16;
  *(_QWORD *)(v12 + 120) = *(_QWORD *)v29;
  *(_OWORD *)(v12 + 104) = v28;
  v17 = *(_OWORD *)&v29[24];
  *(_OWORD *)(v12 + 128) = *(_OWORD *)&v29[8];
  *(_OWORD *)(v12 + 144) = v17;
  v18 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v18 + 1;
  ++*(_DWORD *)(a4 + 24);
  v19 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 160 * v18);
  re::introspectionInitElement(a2, a3, a1[6], v19);
  return v19;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::VFXREBindingDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 160 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 160 * a3;
}

uint64_t re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 160 * v4;
        v6 = v3 + 4;
        v7 = 0uLL;
        do
        {
          v8 = v6[2].n128_u64[0];
          if (v8)
          {
            if ((v6[2].n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v8 + 40))(v8, v6[3].n128_u64[0], v7);
              v7 = 0uLL;
            }
            v6[2] = v7;
            v6[3] = v7;
          }
          if (v6->n128_u64[0])
          {
            if ((v6->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v6->n128_u64[0] + 40))(v6->n128_u64[0], v6[1].n128_u64[0], v7);
              v7 = 0uLL;
            }
            *v6 = v7;
            v6[1] = v7;
          }
          v9 = v6[-2].n128_u64[0];
          if (v9)
          {
            if ((v6[-2].n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v9 + 40))(v9, v6[-1].n128_u64[0], v7);
              v7 = 0uLL;
            }
            v6[-2] = v7;
            v6[-1] = v7;
          }
          v10 = v6[-4].n128_u64[0];
          if (v10)
          {
            if ((v6[-4].n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v10 + 40))(v10, v6[-3].n128_u64[0], v7);
              v7 = 0uLL;
            }
            v6[-4] = v7;
            v6[-3] = v7;
          }
          v6 += 10;
          v5 -= 160;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          v2 = 160 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_32;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_32:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 160 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          v14[3] = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          v14[1] = v18;
          v14[2] = v17;
          *((_OWORD *)v13 + 2) = v12;
          *((_OWORD *)v13 + 3) = v12;
          v19 = (_QWORD *)(v8 + v10 + 32);
          v13[4] = *v19;
          *v19 = 0;
          v13[7] = *(_QWORD *)(v8 + v10 + 56);
          v14[7] = 0;
          v21 = v7[v10 / 8 + 5];
          v20 = v7[v10 / 8 + 6];
          v22 = *(_QWORD *)(v8 + v10 + 48);
          v13[5] = *(_QWORD *)(v8 + v10 + 40);
          v13[6] = v22;
          v14[5] = v21;
          v14[6] = v20;
          *((_OWORD *)v13 + 4) = v12;
          *((_OWORD *)v13 + 5) = v12;
          v23 = (_QWORD *)(v8 + v10 + 64);
          v13[8] = *v23;
          *v23 = 0;
          v13[11] = *(_QWORD *)(v8 + v10 + 88);
          v14[11] = 0;
          v25 = v7[v10 / 8 + 9];
          v24 = v7[v10 / 8 + 10];
          v26 = *(_QWORD *)(v8 + v10 + 80);
          v13[9] = *(_QWORD *)(v8 + v10 + 72);
          v13[10] = v26;
          v14[9] = v25;
          v14[10] = v24;
          *((_OWORD *)v13 + 6) = v12;
          *((_OWORD *)v13 + 7) = v12;
          v27 = (_QWORD *)(v8 + v10 + 96);
          v13[12] = *v27;
          *v27 = 0;
          v13[15] = *(_QWORD *)(v8 + v10 + 120);
          v14[15] = 0;
          v29 = v7[v10 / 8 + 13];
          v28 = v7[v10 / 8 + 14];
          v30 = *(_QWORD *)(v8 + v10 + 112);
          v13[13] = *(_QWORD *)(v8 + v10 + 104);
          v13[14] = v30;
          v14[13] = v29;
          v14[14] = v28;
          v31 = *(_OWORD *)(v8 + v10 + 144);
          *((_OWORD *)v13 + 8) = *(_OWORD *)(v8 + v10 + 128);
          *((_OWORD *)v13 + 9) = v31;
          if (*v27)
          {
            if ((v14[13] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v27 + 40))(*v27, v14[14]);
              v12 = 0uLL;
            }
            *(_OWORD *)v27 = v12;
            *(_OWORD *)(v8 + v10 + 112) = v12;
          }
          if (*v23)
          {
            if ((v14[9] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v23 + 40))(*v23, v14[10]);
              v12 = 0uLL;
            }
            *(_OWORD *)v23 = v12;
            *(_OWORD *)(v8 + v10 + 80) = v12;
          }
          if (*v19)
          {
            if ((v14[5] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v19 + 40))(*v19, v14[6]);
              v12 = 0uLL;
            }
            *(_OWORD *)v19 = v12;
            *(_OWORD *)(v8 + v10 + 48) = v12;
          }
          if (*v14)
          {
            if ((v14[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, v14[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v14 + 1) = v12;
          }
          v10 += 160;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_32;
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v11 = 160 * a2 + 64;
    v12 = 0uLL;
    v13 = a2;
    do
    {
      v14 = *((_QWORD *)v3 + 4);
      v15 = (__n128 *)(v14 + v11);
      v16 = *(_QWORD *)(v14 + v11 + 32);
      if (v16)
      {
        if ((v15[2].n128_u8[8] & 1) != 0)
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v16 + 40))(v16, *(_QWORD *)(v14 + v11 + 48), v12);
          v12 = 0uLL;
        }
        *(__n128 *)(v14 + v11 + 32) = v12;
        *(__n128 *)(v14 + v11 + 48) = v12;
      }
      if (v15->n128_u64[0])
      {
        if ((*(_BYTE *)(v14 + v11 + 8) & 1) != 0)
        {
          (*(void (**)(unint64_t, _QWORD, __n128))(*(_QWORD *)v15->n128_u64[0] + 40))(v15->n128_u64[0], *(_QWORD *)(v14 + v11 + 16), v12);
          v12 = 0uLL;
        }
        *v15 = v12;
        v15[1] = v12;
      }
      v17 = *(_QWORD *)(v14 + v11 - 32);
      if (v17)
      {
        if ((*(_BYTE *)(v14 + v11 - 24) & 1) != 0)
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v14 + v11 - 16), v12);
          v12 = 0uLL;
        }
        *(__n128 *)(v14 + v11 - 32) = v12;
        *(__n128 *)(v14 + v11 - 16) = v12;
      }
      result = *(_anonymous_namespace_ **)(v14 + v11 - 64);
      if (result)
      {
        if ((*(_BYTE *)(v14 + v11 - 56) & 1) != 0)
        {
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD, __n128))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v14 + v11 - 48), v12);
          v12 = 0uLL;
        }
        *(__n128 *)(v14 + v11 - 64) = v12;
        *(__n128 *)(v14 + v11 - 48) = v12;
      }
      ++v13;
      v11 += 160;
    }
    while (v13 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 160 * v4 + 128;
      do
      {
        v7 = (_OWORD *)(*((_QWORD *)v3 + 4) + v6);
        *(v7 - 7) = 0u;
        *(v7 - 8) = 0u;
        v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7 - 16, 0);
        *(v7 - 5) = 0u;
        *(v7 - 6) = 0u;
        v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7 - 12, 0);
        *(v7 - 3) = 0u;
        *(v7 - 4) = 0u;
        v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7 - 8, 0);
        *(v7 - 1) = 0u;
        *(v7 - 2) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7 - 4, 0);
        *v7 = 0u;
        v7[1] = 0u;
        v6 += 160;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 160 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 160;
        v11 -= 160;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 160 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 160 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::ecs2::VFXSceneMetadataComponent::~VFXSceneMetadataComponent(re::ecs2::VFXSceneMetadataComponent *this)
{
  char *v2;

  *(_QWORD *)this = &off_24ED462F8;
  v2 = (char *)this + 32;
  re::AssetHandle::~AssetHandle((re::ecs2::VFXSceneMetadataComponent *)((char *)this + 72));
  re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit((uint64_t)v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  char *v2;

  *(_QWORD *)this = &off_24ED462F8;
  v2 = (char *)this + 32;
  re::AssetHandle::~AssetHandle((re::ecs2::VFXSceneMetadataComponent *)((char *)this + 72));
  re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::deinit((uint64_t)v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::VFXSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VFXSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::VFXSystem>(re::ecs2::VFXSystem *,REEventHandlerResult (re::ecs2::VFXSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3);
}

_QWORD *re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 16 * v9;
        v11 = v7;
        do
        {
          v12 = *v8++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<int>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, int *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 80 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 80;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v14 + 24) = 0u;
  v14 += 24;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

__n128 re::HashTable<unsigned long,re::ecs2::VFXSceneComponent::BindingRuntimeData,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __n128 *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  __n128 result;
  _BYTE v27[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v13, v12);
          v15 = *(_OWORD *)v27;
          *(_OWORD *)v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v27[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v27[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long,re::ecs2::VFXSceneComponent::BindingRuntimeData,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v27);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 48 * v9;
  result = *a5;
  *(_QWORD *)(v25 + 40) = a5[1].n128_u64[0];
  *(__n128 *)(v25 + 24) = result;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

_QWORD *re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          v2 = 72 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 72 * v9;
        v11 = (uint64_t)v7;
        do
        {
          v12 = std::pair<unsigned long,re::ecs2::VFXREBinding>::pair[abi:nn180100](v11, v8);
          v13 = *(_QWORD *)(v8 + 16);
          if (v13)
          {
            if (*(_QWORD *)(v8 + 48))
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v13 + 40))(v13, v12);
            *(_QWORD *)(v8 + 48) = 0;
            *(_QWORD *)(v8 + 24) = 0;
            *(_QWORD *)(v8 + 32) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            ++*(_DWORD *)(v8 + 40);
          }
          v8 += 72;
          v11 += 72;
          v10 -= 72;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

__n128 std::pair<unsigned long,re::ecs2::VFXREBinding>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v4;
  ++*(_DWORD *)(a2 + 40);
  ++*(_DWORD *)(a1 + 40);
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 24));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 160 * a1[2], a1[4]);
    v14 = a1[2];
    if (v14 != v4)
    {
      v15 = *(_QWORD *)(a2 + 32);
      v16 = a1[4];
      v17 = 160 * v14;
      v18 = 160 * v4;
      do
      {
        v19 = v16 + v17;
        re::DynamicString::DynamicString((re::DynamicString *)(v16 + v17), (const re::DynamicString *)(v15 + v17));
        re::DynamicString::DynamicString((re::DynamicString *)(v16 + v17 + 32), (const re::DynamicString *)(v15 + v17 + 32));
        re::DynamicString::DynamicString((re::DynamicString *)(v16 + v17 + 64), (const re::DynamicString *)(v15 + v17 + 64));
        re::DynamicString::DynamicString((re::DynamicString *)(v16 + v17 + 96), (const re::DynamicString *)(v15 + v17 + 96));
        v20 = *(_OWORD *)(v15 + v17 + 144);
        *(_OWORD *)(v19 + 128) = *(_OWORD *)(v15 + v17 + 128);
        *(_OWORD *)(v19 + 144) = v20;
        v15 += 160;
        v18 -= 160;
        v16 += 160;
      }
      while (v17 != v18);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 160 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4];
      v7 = 160 * v4;
      v8 = 160 * v5;
      v9 = 0uLL;
      do
      {
        v10 = (__n128 *)(v6 + v7);
        v11 = *(_QWORD *)(v6 + v7 + 96);
        if (v11)
        {
          if ((v10[6].n128_u8[8] & 1) != 0)
          {
            (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v6 + v7 + 112), v9);
            v9 = 0uLL;
          }
          *(__n128 *)(v6 + v7 + 96) = v9;
          *(__n128 *)(v6 + v7 + 112) = v9;
        }
        v12 = v10[4].n128_u64[0];
        if (v12)
        {
          if ((*(_BYTE *)(v6 + v7 + 72) & 1) != 0)
          {
            (*(void (**)(unint64_t, _QWORD, __n128))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v6 + v7 + 80), v9);
            v9 = 0uLL;
          }
          v10[4] = v9;
          v10[5] = v9;
        }
        v13 = *(_QWORD *)(v6 + v7 + 32);
        if (v13)
        {
          if ((*(_BYTE *)(v6 + v7 + 40) & 1) != 0)
          {
            (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v6 + v7 + 48), v9);
            v9 = 0uLL;
          }
          *(__n128 *)(v6 + v7 + 32) = v9;
          *(__n128 *)(v6 + v7 + 48) = v9;
        }
        if (v10->n128_u64[0])
        {
          if ((*(_BYTE *)(v6 + v7 + 8) & 1) != 0)
          {
            (*(void (**)(unint64_t, _QWORD, __n128))(*(_QWORD *)v10->n128_u64[0] + 40))(v10->n128_u64[0], *(_QWORD *)(v6 + v7 + 16), v9);
            v9 = 0uLL;
          }
          *v10 = v9;
          v10[1] = v9;
        }
        v8 -= 160;
        v6 += 160;
      }
      while (v7 != v8);
    }
  }
  a1[2] = v4;
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *,re::ecs2::VFXREBindingDescriptor *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6), (re::DynamicString *)(a1 + v6));
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6 + 32), (re::DynamicString *)(a1 + v6 + 32));
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6 + 64), (re::DynamicString *)(a1 + v6 + 64));
      re::DynamicString::operator=((re::DynamicString *)(a3 + v6 + 96), (re::DynamicString *)(a1 + v6 + 96));
      result = *(__n128 *)(a1 + v6 + 128);
      v9 = *(_OWORD *)(a1 + v6 + 144);
      *(__n128 *)(v7 + 128) = result;
      *(_OWORD *)(v7 + 144) = v9;
      v6 += 160;
    }
    while (a1 + v6 != a2);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_EntityFunctionConstantComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541069A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541069A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106A20, 0);
    *(uint64_t *)((char *)&qword_254106A30 + 6) = 0;
    qword_254106A30 = 0;
    qword_254106A40 = 0;
    qword_254106A48 = 0xFFFFFFFFLL;
    qword_254106A20 = (uint64_t)&off_24ED7DAA8;
    qword_254106A50 = (uint64_t)"EntityFunctionConstantComponent";
    dword_254106A58 = 0;
    unk_254106A60 = 0u;
    unk_254106A70 = 0u;
    unk_254106A80 = 0u;
    qword_254106A90 = 0;
    __cxa_guard_release(&qword_2541069A8);
  }
  return &qword_254106A20;
}

void re::ecs2::initInfo_EntityFunctionConstantComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0xE1861B4742BD63FCLL;
  v13[1] = "EntityFunctionConstantComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_2541069B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541069B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541069C0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get((uint64_t)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "functionConstants";
      *(_QWORD *)(v11 + 16) = &qword_2541069D0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2541069C8 = v11;
      __cxa_guard_release(&qword_2541069B0);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541069C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::EntityFunctionConstantComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::EntityFunctionConstantComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::EntityFunctionConstantComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::EntityFunctionConstantComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

void re::IntrospectionInfo<re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_2541069B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541069B8))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2541069D0);
    qword_2541069D0 = (uint64_t)&off_24ED463A0;
    __cxa_guard_release(&qword_2541069B8);
  }
  if ((_MergedGlobals_143 & 1) == 0)
  {
    v3 = re::introspect_uint64_t((re *)1, a2);
    v5 = re::introspect_int((re *)1, v4);
    if ((_MergedGlobals_143 & 1) == 0)
    {
      v6 = (uint64_t)v5;
      _MergedGlobals_143 = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541069D0, 0);
      qword_2541069E0 = 0x3000000007;
      dword_2541069E8 = v7;
      word_2541069EC = 0;
      *(_QWORD *)&xmmword_2541069F0 = 0;
      *((_QWORD *)&xmmword_2541069F0 + 1) = 0xFFFFFFFFLL;
      qword_254106A00 = (uint64_t)v3;
      unk_254106A08 = 0;
      qword_254106A10 = v6;
      unk_254106A18 = 0;
      qword_2541069D0 = (uint64_t)&off_24ED463A0;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_2541069D0, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_2541069F0 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::EntityFunctionConstantComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED46440;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 68) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::EntityFunctionConstantComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a3 + 4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::EntityFunctionConstantComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED46440;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 68) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::EntityFunctionConstantComponent>(_QWORD *a1)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 4);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_EntityFunctionConstantComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EntityFunctionConstantComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_EntityFunctionConstantComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_EntityFunctionConstantComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::EntityFunctionConstantComponent>, this);
}

_QWORD *re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  re::IntrospectionBase *v8;
  int v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 16, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16);
    v10 = v13;
    return v12 + 32 * v10 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_DWORD *)(v11 + 32 * v10 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16);
  return v12 + 32 * v10 + 24;
}

BOOL re::internal::less<unsigned long long>(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, uint64_t *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::ecs2::EntityFunctionConstantComponent::~EntityFunctionConstantComponent(re::ecs2::EntityFunctionConstantComponent *this)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::BallSocketJointComponent::addToSimulation(re::ecs2::BallSocketJointComponent *this, re::PhysicsSimulation *a2, const re::ecs2::Entity *a3)
{
  char *RigidBody;
  const re::ecs2::Entity *v6;
  char *v7;
  BOOL v8;
  char *v9;
  re::Constraint *v10;

  if (RigidBody)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = v7;
    *((_QWORD *)this + 19) = v10;
    re::PhysicsJointCollection::add((re::PhysicsSimulation *)((char *)a2 + 136), v10);
    objc_storeWeak((id *)this + 20, (char *)a2 + 8);
    re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint((uint64_t)this);
  }
}

char *`anonymous namespace'::getRigidBody(id *this, re::ecs2::EntityHandle *a2, const re::ecs2::Entity *a3)
{
  char *result;

  result = re::ecs2::EntityHandle::resolve(this, (uint64_t)a2);
  if (result)
  {
    result = (char *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
      return (char *)*((_QWORD *)result + 42);
  }
  return result;
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint(uint64_t a1)
{
  char *v2;
  char *v3;

  v2 = re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(_QWORD *)(a1 + 16));
  re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint((uint64_t)v2, *(_QWORD *)(a1 + 16));
  v3 = re::ecs2::EntityHandle::resolve((id *)(a1 + 56), *(_QWORD *)(a1 + 16));
  re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint((uint64_t)v3, *(_QWORD *)(a1 + 16));
}

void re::ecs2::BallSocketJointComponent::removeFromSimulation(id *this)
{
  id *v2;
  _QWORD *WeakRetained;
  void *v4;
  void (***v5)(id);
  char *v6;
  _QWORD *v7;
  id v8;

  if (this[19])
  {
    v2 = this + 20;
    WeakRetained = objc_loadWeakRetained(this + 20);
    if (WeakRetained)
    {
      v4 = WeakRetained;
      v8 = this[19];
      re::DynamicArray<re::Allocator const*>::removeStable(WeakRetained + 18, &v8);
      objc_destroyWeak(v2);
      this[20] = 0;

    }
    v5 = (void (***)(id))this[19];
    if (v5)
    {
      (**v5)(this[19]);
    }
    this[19] = 0;
    v6 = (char *)this[2];
    if (v6)
    {
      v7 = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v7)
        re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::removeConstraintsFromSimulation(v7);
    }
  }
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::removeConstraintsFromSimulation(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *WeakRetained;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if ((int)a1[6] >= 1)
  {
    v2 = (char *)a1[2];
    v3 = (uint64_t)(a1 + 4);
    v4 = a1[6] + 1;
    do
    {
      v5 = (v4 - 2);
      if (a1[6] <= v5)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      WeakRetained = (char *)objc_loadWeakRetained((id *)(a1[8] + 8 * v5));
      if (WeakRetained)
      {
        v7 = WeakRetained;
        v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v8
          || (v9 = v8, re::ecs2::EntityHandle::resolve((id *)(v8 + 32), (uint64_t)v7 - 8) != v2)
          && re::ecs2::EntityHandle::resolve((id *)(v9 + 56), (uint64_t)v7 - 8) != v2)
        {
          re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::removeAt(v3, (v4 - 2));
        }

      }
      else
      {
        re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::removeAt(v3, (v4 - 2));
      }
      --v4;
    }
    while (v4 > 1);
  }
}

BOOL re::ecs2::BallSocketJointComponent::needsUpdate(re::ecs2::BallSocketJointComponent *this)
{
  uint64_t v1;
  char *v3;
  const re::ecs2::Entity *v4;
  uint32x4_t v6;
  char *v7;
  const re::ecs2::Entity *v8;
  uint32x4_t v9;
  float32x4_t v10[2];
  float32x4_t v11[2];

  v1 = *((_QWORD *)this + 19);
  if (!v1)
    return 1;
  v3 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 16))(*(_QWORD *)(v1 + 40));
    return 1;
  (*(void (**)(float32x4_t *__return_ptr))(**((_QWORD **)this + 19) + 40))(v11);
  v6 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v11[0], *((float32x4_t *)this + 5)));
  v6.i32[3] = v6.i32[2];
  if ((vmaxvq_u32(v6) & 0x80000000) != 0)
    return 1;
  if ((vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v11[1], *((float32x4_t *)this + 6)))) & 0x80000000) != 0)
    return 1;
  v7 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 19) + 40) + 24))(*(_QWORD *)(*((_QWORD *)this + 19) + 40));
    return 1;
  (*(void (**)(float32x4_t *__return_ptr))(**((_QWORD **)this + 19) + 48))(v10);
  v9 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v10[0], *((float32x4_t *)this + 7)));
  v9.i32[3] = v9.i32[2];
  return (vmaxvq_u32(v9) & 0x80000000) != 0
      || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v10[1], *((float32x4_t *)this + 8)))) & 0x80000000) != 0
      || *((unsigned __int8 *)this + 144) != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 19)
                                                                                                  + 40)
                                                                                    + 48))(*(_QWORD *)(*((_QWORD *)this + 19) + 40));
}

uint64_t *re::ecs2::allocInfo_BallSocketJointComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_144);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_144))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106AD8, 0);
    *(uint64_t *)((char *)&qword_254106AE8 + 6) = 0;
    qword_254106AE8 = 0;
    qword_254106AF8 = 0;
    qword_254106B00 = 0xFFFFFFFFLL;
    qword_254106AD8 = (uint64_t)&off_24ED7DAA8;
    qword_254106B08 = (uint64_t)"BallSocketJointComponent";
    dword_254106B10 = 0;
    xmmword_254106B18 = 0u;
    unk_254106B28 = 0u;
    xmmword_254106B38 = 0u;
    qword_254106B48 = 0;
    __cxa_guard_release(&_MergedGlobals_144);
  }
  return &qword_254106AD8;
}

void re::ecs2::initInfo_BallSocketJointComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0x8BC71053146C7D4ALL;
  v28[1] = "BallSocketJointComponent";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_254106AA0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254106AA0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254106AA8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "bodyA";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254106AB0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "bodyB";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x3800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254106AB8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "localAnchorPoseA";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x5000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254106AC0 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v21 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "localAnchorPoseB";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x7000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254106AC8 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_BOOL((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "collisionsEnabled";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x9000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254106AD0 = v26;
      __cxa_guard_release(&qword_254106AA0);
    }
  }
  *((_QWORD *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254106AA8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BallSocketJointComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BallSocketJointComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BallSocketJointComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BallSocketJointComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

uint64_t re::internal::defaultConstruct<re::ecs2::BallSocketJointComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::BallSocketJointComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::BallSocketJointComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_destroyWeak((id *)(a3 + 160));
  *(_QWORD *)(a3 + 160) = 0;
  re::ecs2::EntityHandle::reset((id *)(a3 + 56));
  objc_destroyWeak((id *)(a3 + 56));
  *(_QWORD *)(a3 + 56) = 0;
  re::ecs2::EntityHandle::reset((id *)(a3 + 32));
  objc_destroyWeak((id *)(a3 + 32));
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::BallSocketJointComponent>(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 160));
  *(_QWORD *)(a1 + 160) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 56));
  objc_destroyWeak((id *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 32));
  objc_destroyWeak((id *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_BallSocketJointComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BallSocketJointComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BallSocketJointComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BallSocketJointComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BallSocketJointComponent>, this);
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::BallSocketJointComponent>::registerConstraint(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  id location;

  if (a1)
  {
    v3 = (_QWORD *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (a2)
      v4 = (void *)(a2 + 8);
    else
      v4 = 0;
    objc_initWeak(&location, v4);
    v5 = v3[8];
    v6 = v3[6];
    if (v6)
    {
      v7 = 8 * v6;
      v8 = (id *)v3[8];
      while (*v8 != location)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          v8 = (id *)(v5 + 8 * v6);
          break;
        }
      }
    }
    else
    {
      v8 = (id *)v3[8];
    }
    if (v6 == ((uint64_t)v8 - v5) >> 3)
      re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::add((_anonymous_namespace_ *)(v3 + 4), &location);
    objc_destroyWeak(&location);
  }
}

void re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::add(_anonymous_namespace_ *this, id *from)
{
  unint64_t v4;
  id *v5;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = (id *)(*((_QWORD *)this + 4) + 8 * v4);
  *v5 = 0;
  objc_copyWeak(v5, from);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
}

void re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)(*(_QWORD *)(a1 + 32) + 8 * a2), (id *)(*(_QWORD *)(a1 + 32) + 8 * v2 - 8));
    v2 = *(_QWORD *)(a1 + 16);
  }
  v4 = *(_QWORD *)(a1 + 32) + 8 * v2;
  objc_destroyWeak((id *)(v4 - 8));
  *(_QWORD *)(v4 - 8) = 0;
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::BallSocketJointComponent>(uint64_t a1)
{
  id *v2;
  id *v3;
  uint64_t v4;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v2 = (id *)(a1 + 160);
  *(_OWORD *)(a1 + 32) = 0u;
  v3 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED464C0;
  objc_initWeak(v3, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset(v3);
  objc_initWeak((id *)(a1 + 56), 0);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 56));
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  objc_initWeak(v2, 0);
  return a1;
}

void re::ecs2::BallSocketJointComponent::~BallSocketJointComponent(id *this)
{
  objc_destroyWeak(this + 20);
  this[20] = 0;
  re::ecs2::EntityHandle::reset(this + 7);
  objc_destroyWeak(this + 7);
  this[7] = 0;
  re::ecs2::EntityHandle::reset(this + 4);
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  objc_destroyWeak(this + 20);
  this[20] = 0;
  re::ecs2::EntityHandle::reset(this + 7);
  objc_destroyWeak(this + 7);
  this[7] = 0;
  re::ecs2::EntityHandle::reset(this + 4);
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t *re::ecs2::allocInfo_PortalService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_145);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_145))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106B58, 0);
    *(uint64_t *)((char *)&qword_254106B68 + 6) = 0;
    qword_254106B68 = 0;
    qword_254106B78 = 0;
    qword_254106B80 = 0xFFFFFFFFLL;
    qword_254106B58 = (uint64_t)&off_24ED7DAA8;
    qword_254106B88 = (uint64_t)"PortalService";
    dword_254106B90 = 0;
    unk_254106B98 = 0u;
    unk_254106BA8 = 0u;
    unk_254106BB8 = 0u;
    qword_254106BC8 = 0;
    __cxa_guard_release(&_MergedGlobals_145);
  }
  return &qword_254106B58;
}

void re::ecs2::initInfo_PortalService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x25EC7FC57101E912;
  v5[1] = "PortalService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PortalService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_PortalService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalService>, this);
}

uint64_t *re::allocInfo_PbrMaterialConstants(re *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_146);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_146))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106C98, 0);
    *(uint64_t *)((char *)&qword_254106CA8 + 6) = 0;
    qword_254106CA8 = 0;
    qword_254106CB8 = 0;
    qword_254106CC0 = 0xFFFFFFFFLL;
    qword_254106C98 = (uint64_t)&off_24ED7DAA8;
    qword_254106CC8 = (uint64_t)"PbrMaterialConstants";
    dword_254106CD0 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_254106D08 = 0;
    __cxa_guard_release(&_MergedGlobals_146);
  }
  return &qword_254106C98;
}

void re::initInfo_PbrMaterialConstants(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  _QWORD v60[2];
  __int128 v61;

  v60[0] = 0x465F2192D8590650;
  v60[1] = "PbrMaterialConstants";
  re::StringID::destroyString((re::StringID *)v60);
  *((_OWORD *)this + 2) = v61;
  v4 = atomic_load((unsigned __int8 *)&qword_254106BD8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254106BD8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_ColorGamut4F((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "baseColorTint";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254106D10 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "metallicScale";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254106D18 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "specularScale";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254106D20 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_float((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "roughnessScale";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x1C00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254106D28 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v22 = re::introspect_ColorGamut3F((re::IntrospectionBase **)1);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "emissiveColor";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x2000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254106D30 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_float((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "emissiveScale";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x3000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254106D38 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_float((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "opacityThreshold";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x3400000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_254106D40 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::introspect_float((re *)1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "clearcoatScale";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x3800000008;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_254106D48 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::introspect_float((re *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "clearcoatRoughnessScale";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x3C00000009;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_254106D50 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_float((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "anisotropyLevelScale";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0x400000000ALL;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_254106D58 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v45 = re::introspect_ColorGamut3F((re::IntrospectionBase **)1);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = "sheenColorTint";
      *(_QWORD *)(v46 + 16) = v45;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0x480000000BLL;
      *(_DWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = 0;
      *(_QWORD *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_254106D60 = v46;
      v47 = re::introspectionAllocator((re *)v46);
      v48 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "uvTransform0";
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x600000000CLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_254106D68 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      v51 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "uvTransform1";
      *(_QWORD *)(v52 + 16) = v51;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 0x700000000DLL;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_254106D70 = v52;
      v53 = re::introspectionAllocator((re *)v52);
      v54 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v55 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
      *(_DWORD *)v55 = 1;
      *(_QWORD *)(v55 + 8) = "uvOffset0";
      *(_QWORD *)(v55 + 16) = v54;
      *(_QWORD *)(v55 + 24) = 0;
      *(_QWORD *)(v55 + 32) = 0x800000000ELL;
      *(_DWORD *)(v55 + 40) = 0;
      *(_QWORD *)(v55 + 48) = 0;
      *(_QWORD *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_254106D78 = v55;
      v56 = re::introspectionAllocator((re *)v55);
      v57 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v58 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 72, 8);
      *(_DWORD *)v58 = 1;
      *(_QWORD *)(v58 + 8) = "uvOffset1";
      *(_QWORD *)(v58 + 16) = v57;
      *(_QWORD *)(v58 + 24) = 0;
      *(_QWORD *)(v58 + 32) = 0x880000000FLL;
      *(_DWORD *)(v58 + 40) = 0;
      *(_QWORD *)(v58 + 48) = 0;
      *(_QWORD *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_254106D80 = v58;
      __cxa_guard_release(&qword_254106BD8);
    }
  }
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 15;
  *((_QWORD *)this + 8) = &qword_254106D10;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::PbrMaterialConstants>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::PbrMaterialConstants>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::PbrMaterialConstants>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::PbrMaterialConstants>;
  re::IntrospectionRegistry::add(this, v3);
  v59 = v61;
}

double re::internal::defaultConstruct<re::PbrMaterialConstants>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a3 = _Q0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 20) = 0x3F00000000000000;
  *(_DWORD *)(a3 + 28) = 1065353216;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 37) = 0;
  *(_OWORD *)(a3 + 48) = xmmword_226108D30;
  *(_OWORD *)(a3 + 64) = xmmword_226108D40;
  *(_DWORD *)(a3 + 80) = 1025758986;
  *(_BYTE *)(a3 + 84) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a3 + 96) = xmmword_226104350;
  *(_OWORD *)(a3 + 112) = xmmword_226104350;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::PbrMaterialConstants>(uint64_t a1)
{
  double result;

  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 20) = 0x3F00000000000000;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 37) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_226108D30;
  *(_OWORD *)(a1 + 64) = xmmword_226108D40;
  *(_DWORD *)(a1 + 80) = 1025758986;
  *(_BYTE *)(a1 + 84) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a1 + 96) = xmmword_226104350;
  *(_OWORD *)(a1 + 112) = xmmword_226104350;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

uint64_t *re::allocInfo_PbrMaterialTextures(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254106BE8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254106BE8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106D88, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254106D98 = 0;
    qword_254106DA8 = 0;
    qword_254106DB0 = 0xFFFFFFFFLL;
    qword_254106D88 = (uint64_t)&off_24ED7DAA8;
    qword_254106DB8 = (uint64_t)"PbrMaterialTextures";
    dword_254106DC0 = 0;
    xmmword_254106DC8 = 0u;
    unk_254106DD8 = 0u;
    xmmword_254106DE8 = 0u;
    qword_254106DF8 = 0;
    __cxa_guard_release(&qword_254106BE8);
  }
  return &qword_254106D88;
}

void re::initInfo_PbrMaterialTextures(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  const re::IntrospectionBase *v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  _QWORD v63[2];
  __int128 v64;

  v63[0] = 0x4455A71457457B7ELL;
  v63[1] = "PbrMaterialTextures";
  re::StringID::destroyString((re::StringID *)v63);
  *((_OWORD *)this + 2) = v64;
  v4 = atomic_load((unsigned __int8 *)&qword_254106BF0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254106BF0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_AssetHandle((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "baseColorTexture";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254106C28 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_AssetHandle((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "metallicTexture";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x4800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254106C30 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_AssetHandle((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "roughnessTexture";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x6000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254106C38 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_AssetHandle((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "emissiveTexture";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x3000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254106C40 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_AssetHandle((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "specularTexture";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x7800000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254106C48 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::introspect_AssetHandle((re *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "opacityTexture";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0xA800000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254106C50 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::introspect_AssetHandle((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "normalTexture";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x9000000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254106C58 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_AssetHandle((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "clearcoatTexture";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x10800000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_254106C60 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::introspect_AssetHandle((re *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "clearcoatRoughnessTexture";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0xF000000009;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_254106C68 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::introspect_AssetHandle((re *)1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "anisotropyAngleTexture";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0xD80000000ALL;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_254106C70 = v45;
      v46 = re::introspectionAllocator((re *)v45);
      v48 = re::introspect_AssetHandle((re *)1, v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "anisotropyLevelTexture";
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0xC00000000BLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_254106C78 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      v52 = re::introspect_AssetHandle((re *)1, v51);
      v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = "sheenColorTexture";
      *(_QWORD *)(v53 + 16) = v52;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0x1200000000CLL;
      *(_DWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_254106C80 = v53;
      v54 = re::introspectionAllocator((re *)v53);
      v56 = re::introspect_AssetHandle((re *)1, v55);
      v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
      *(_DWORD *)v57 = 1;
      *(_QWORD *)(v57 + 8) = "ambientOcclusionTexture";
      *(_QWORD *)(v57 + 16) = v56;
      *(_QWORD *)(v57 + 24) = 0;
      *(_QWORD *)(v57 + 32) = 0x180000000DLL;
      *(_DWORD *)(v57 + 40) = 0;
      *(_QWORD *)(v57 + 48) = 0;
      *(_QWORD *)(v57 + 56) = 0;
      *(_DWORD *)(v57 + 64) = 0;
      qword_254106C88 = v57;
      v58 = re::introspectionAllocator((re *)v57);
      v60 = re::introspect_AssetHandle((re *)1, v59);
      v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 72, 8);
      *(_DWORD *)v61 = 1;
      *(_QWORD *)(v61 + 8) = "clearcoatNormalTexture";
      *(_QWORD *)(v61 + 16) = v60;
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0x1380000000ELL;
      *(_DWORD *)(v61 + 40) = 0;
      *(_QWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_254106C90 = v61;
      __cxa_guard_release(&qword_254106BF0);
    }
  }
  *((_QWORD *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((_QWORD *)this + 8) = &qword_254106C28;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::PbrMaterialTextures>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::PbrMaterialTextures>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::PbrMaterialTextures>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::PbrMaterialTextures>;
  re::IntrospectionRegistry::add(this, v3);
  v62 = v64;
}

double re::internal::defaultConstruct<re::PbrMaterialTextures>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  double result;

  result = 0.0;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return result;
}

void re::internal::defaultDestruct<re::PbrMaterialTextures>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 312));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 288));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 264));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 240));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 216));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 192));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 168));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 144));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 120));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

double re::internal::defaultConstructV2<re::PbrMaterialTextures>(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void re::internal::defaultDestructV2<re::PbrMaterialTextures>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 312));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 288));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 264));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 240));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 216));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 192));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 168));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 144));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 120));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t *re::allocInfo_PbrMaterialParameters(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254106C00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254106C00))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106E00, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254106E10 = 0;
    qword_254106E20 = 0;
    qword_254106E28 = 0xFFFFFFFFLL;
    qword_254106E00 = (uint64_t)&off_24ED7DAA8;
    qword_254106E30 = (uint64_t)"PbrMaterialParameters";
    dword_254106E38 = 0;
    xmmword_254106E40 = 0u;
    unk_254106E50 = 0u;
    xmmword_254106E60 = 0u;
    qword_254106E70 = 0;
    __cxa_guard_release(&qword_254106C00);
  }
  return &qword_254106E00;
}

void re::initInfo_PbrMaterialParameters(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  re::IntrospectionBase *v9;
  uint64_t v10;
  uint64_t *v11;
  const re::IntrospectionBase *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  re::IntrospectionBase *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x85876C7281FC1662;
  v21[1] = "PbrMaterialParameters";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254106C08);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254106C08);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = v6;
      v8 = (uint64_t *)qword_254106BE0;
      if (!qword_254106BE0)
      {
        v8 = re::allocInfo_PbrMaterialConstants((re *)v6);
        qword_254106BE0 = (uint64_t)v8;
        re::initInfo_PbrMaterialConstants((re *)v8, v9);
      }
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "Constants";
      *(_QWORD *)(v10 + 16) = v8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0x15000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254106C10 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      v13 = re::introspect_uint32_t((re *)1, v12);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "ConstantValid";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1E400000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254106C18 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v16 = v15;
      v17 = (uint64_t *)qword_254106BF8;
      if (!qword_254106BF8)
      {
        v17 = re::allocInfo_PbrMaterialTextures((re *)v15);
        qword_254106BF8 = (uint64_t)v17;
        re::initInfo_PbrMaterialTextures((re *)v17, v18);
      }
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "Textures";
      *(_QWORD *)(v19 + 16) = v17;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 3;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254106C20 = v19;
      __cxa_guard_release(&qword_254106C08);
    }
  }
  *((_QWORD *)this + 2) = 0x1F000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254106C10;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::PbrMaterialParameters>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::PbrMaterialParameters>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::PbrMaterialParameters>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::PbrMaterialParameters>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::PbrMaterialParameters>(int a1, int a2, re::PbrMaterialParameters *this)
{
  return re::PbrMaterialParameters::PbrMaterialParameters(this);
}

void re::internal::defaultDestruct<re::PbrMaterialParameters>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 312));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 288));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 264));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 240));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 216));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 192));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 168));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 144));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 120));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

void re::internal::defaultDestructV2<re::PbrMaterialParameters>(uint64_t a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 312));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 288));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 264));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 240));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 216));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 192));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 168));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 144));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 120));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 96));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 48));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t re::introspect_PbrMaterialParameters(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PbrMaterialParameters", (uint64_t (*)(re::internal *))re::allocInfo_PbrMaterialParameters, (re::IntrospectionBase *(*)(void))re::initInfo_PbrMaterialParameters, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PbrMaterialParameters>, this);
}

__n128 re::PbrMaterialConstants::asPbrConstants@<Q0>(re::PbrMaterialConstants *this@<X0>, const re::RenderManager *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned int v6;
  __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;

  if (a2 && (v5 = (unsigned __int8 *)*((_QWORD *)a2 + 19)) != 0)
    v6 = *v5;
  else
    v6 = 0;
  re::ColorGamut4F::as((uint64_t)this, v6, 1, (uint64_t)&v15);
  *(_OWORD *)a3 = v15;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)((char *)this + 20);
  *(_DWORD *)(a3 + 24) = *((_DWORD *)this + 7);
  *(_QWORD *)&v7 = re::ColorGamut3F::as((uint64_t *)this + 4, v6, 1);
  DWORD2(v7) = v8;
  v9 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = v7;
  *(_OWORD *)(a3 + 48) = v9;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)&v10 = re::ColorGamut3F::as((uint64_t *)this + 9, v6, 1);
  DWORD2(v10) = v11;
  v12 = *((_OWORD *)this + 6);
  v13 = *((_OWORD *)this + 7);
  *(_OWORD *)(a3 + 80) = v10;
  *(_OWORD *)(a3 + 96) = v12;
  result = *((__n128 *)this + 8);
  *(_OWORD *)(a3 + 112) = v13;
  *(__n128 *)(a3 + 128) = result;
  return result;
}

re::TextureHandle *re::PbrMaterial::makeTextureHandle@<X0>(re::PbrMaterial *this@<X0>, re::TextureHandle *a2@<X8>)
{
  re::TextureHandle *result;

  result = (re::TextureHandle *)re::AssetHandle::loadedAsset<re::TextureAsset>(this);
  if (result)
    return re::TextureHandle::TextureHandle(a2, (re::TextureHandle *)((char *)result + 48));
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  return result;
}

void re::PbrMaterial::parameterTable(re::PbrMaterial *this@<X0>, const re::RenderManager *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  re::PbrMaterial *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t i;
  id v17;
  _OWORD v18[9];

  v4 = *((_QWORD *)this + 69);
  if (v4)
  {
    *a3 = v4;
LABEL_8:
    v17 = (id)(v4 + 8);
    return;
  }
  re::make::shared::object<re::PbrParameterTable>(this, (uint64_t *)v18);
  v7 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = *(_QWORD *)&v18[0];
  *(_QWORD *)&v18[0] = v7;
  if (v7)

  v8 = (re::PbrMaterial *)((char *)this + 32);
  re::PbrMaterialConstants::asPbrConstants((re::PbrMaterial *)((char *)this + 368), a2, (uint64_t)v18);
  v9 = (_OWORD *)*((_QWORD *)this + 69);
  v10 = v18[6];
  v9[8] = v18[5];
  v9[9] = v10;
  v11 = v18[8];
  v9[10] = v18[7];
  v9[11] = v11;
  v12 = v18[2];
  v13 = v18[3];
  v14 = v18[0];
  v9[4] = v18[1];
  v9[5] = v12;
  v15 = v18[4];
  v9[6] = v13;
  v9[7] = v15;
  v9[3] = v14;
  *(_DWORD *)(*((_QWORD *)this + 69) + 192) = *((_DWORD *)this + 129);
  for (i = 216; i != 440; i += 16)
  {
    re::PbrMaterial::makeTextureHandle(v8, (re::TextureHandle *)v18);
    re::TextureHandle::operator=((re::TextureHandle *)(*((_QWORD *)this + 69) + i), (re::TextureHandle *)v18);
    re::TextureHandle::invalidate((re::TextureHandle *)v18);
    v8 = (re::PbrMaterial *)((char *)v8 + 24);
  }
  *((_QWORD *)this + 70) = 0xFFFFFFFFFFFFFFFLL;
  v4 = *((_QWORD *)this + 69);
  *a3 = v4;
  if (v4)
    goto LABEL_8;
}

uint64_t re::PbrMaterial::addRenderFrameParameterDelta(re::PbrMaterial *this, re::RenderManager *a2)
{
  re::DrawingManager *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v13;

  v3 = (re::DrawingManager *)*((_QWORD *)a2 + 13);
  if (v3
    && (re::DrawingManager::checkDeltasCanBeEnqueuedOrDropDelta_115383182<re::PbrParameterDelta>(v3, *((_QWORD *)this + 72)) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 17);
    v6 = *(_QWORD *)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 48);
    v8 = v7 & 0xFFFFFFFFFFFFFFFLL;
    v9 = *((_QWORD *)this + 71) & 0xFFFFFFFFFFFFFFFLL;
    if (v9 == 0xFFFFFFFFFFFFFFFLL)
    {
      if (v8 == 0xFFFFFFFFFFFFFFFLL)
        return *((_QWORD *)this + 72);
    }
    else if (v8 != 0xFFFFFFFFFFFFFFFLL && v9 == v8)
    {
      return *((_QWORD *)this + 72);
    }
    *((_QWORD *)this + 71) = v7 & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v6 << 60);
    re::PbrMaterial::parameterTable(this, a2, &v13);
    *((_QWORD *)this + 72) = re::DrawingManager::addRenderFrameDeltaForNextFrame<re::PbrParameterDelta,re::PbrParameterTable>((uint64_t)v3, &v13);
    if (v13)

    return *((_QWORD *)this + 72);
  }
  *((_QWORD *)this + 72) = 0;
  v10 = *((_QWORD *)this + 69);
  if (!v10)
    return 0;

  result = 0;
  *((_QWORD *)this + 69) = 0;
  return result;
}

uint64_t re::DrawingManager::checkDeltasCanBeEnqueuedOrDropDelta_115383182<re::PbrParameterDelta>(re::DrawingManager *a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 CanBeEnqueued;
  int v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[16];

  v4 = re::DrawingManager::didExceedFlywheelThresholdFrameCount_115383182(a1);
  CanBeEnqueued = re::DrawingManager::renderFrameDeltasCanBeEnqueued(a1);
  v6 = !CanBeEnqueued || v4;
  if (v6 == 1)
  {
    if (a2)
      v7 = v4;
    else
      v7 = 0;
    if (v7 && CanBeEnqueued)
    {
      v11 = a2;
      v8 = (uint64_t)a1 + 624;
      re::DynamicOverflowArray<unsigned long long,1ul>::indexOf(v8, &v11, (uint64_t)v12);
      if (v12[0])
      {
        v9 = v11;
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        objc_destroyWeak((id *)(v9 + 8));
        *(_QWORD *)(v9 + 8) = 0;
        re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::remove(v8, &v11);
      }
    }
  }
  return v6 ^ 1u;
}

uint64_t re::DrawingManager::addRenderFrameDeltaForNextFrame<re::PbrParameterDelta,re::PbrParameterTable>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v4 = re::globalAllocators((re *)a1);
  v5 = re::PerFrameAllocatorManager::perFrameAllocator(v4[6], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 48) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 40) << 60));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 400, 16);
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_QWORD *)v6 = &unk_24ED466E8;
  *(_OWORD *)(v6 + 384) = 0u;
  objc_initWeak((id *)(v6 + 8), 0);
  *(_QWORD *)v6 = &off_24ED46540;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v6 + 32) = _Q0;
  *(_QWORD *)(v6 + 48) = 0x3F00000000000000;
  *(_DWORD *)(v6 + 56) = 1065353216;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = xmmword_226108D30;
  *(_QWORD *)(v6 + 96) = 0;
  *(int32x4_t *)(v6 + 112) = vdupq_n_s32(0x3D23D70Au);
  *(_OWORD *)(v6 + 128) = xmmword_226104350;
  *(_OWORD *)(v6 + 144) = xmmword_226104350;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  v12 = *a2;
  *(_WORD *)(v6 + 16) = 0;
  if (v12)
    v13 = (void *)(v12 + 8);
  else
    v13 = 0;
  *(_DWORD *)(v6 + 20) = 0;
  objc_storeWeak((id *)(v6 + 8), v13);
  if (!*(_QWORD *)(a1 + 624))
  {
    *(_QWORD *)(a1 + 624) = v5;
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((_QWORD *)(a1 + 624), 0);
    *(_DWORD *)(a1 + 640) += 2;
  }
  v15 = v6;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(a1 + 624, &v15);
  return v6;
}

uint64_t *re::PbrMaterialTextures::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v4;

  v4 = re::AssetHandle::operator=(a1, a2);
  re::AssetHandle::operator=(v4 + 3, a2 + 3);
  re::AssetHandle::operator=(a1 + 6, a2 + 6);
  re::AssetHandle::operator=(a1 + 9, a2 + 9);
  re::AssetHandle::operator=(a1 + 12, a2 + 12);
  re::AssetHandle::operator=(a1 + 15, a2 + 15);
  re::AssetHandle::operator=(a1 + 18, a2 + 18);
  re::AssetHandle::operator=(a1 + 21, a2 + 21);
  re::AssetHandle::operator=(a1 + 24, a2 + 24);
  re::AssetHandle::operator=(a1 + 27, a2 + 27);
  re::AssetHandle::operator=(a1 + 30, a2 + 30);
  re::AssetHandle::operator=(a1 + 33, a2 + 33);
  re::AssetHandle::operator=(a1 + 36, a2 + 36);
  re::AssetHandle::operator=(a1 + 39, a2 + 39);
  return a1;
}

uint64_t re::PbrParameterDelta::init(uint64_t result)
{
  *(_WORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void re::PbrParameterDelta::applyDeltaChange(id *this)
{
  char *WeakRetained;
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  uint64_t i;

  WeakRetained = (char *)objc_loadWeakRetained(this + 1);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    if (*((_BYTE *)this + 16))
    {
      *((_DWORD *)WeakRetained + 46) = *((_DWORD *)this + 5);
      v4 = *((_OWORD *)this + 5);
      v5 = *((_OWORD *)this + 6);
      v6 = *((_OWORD *)this + 4);
      *(_OWORD *)(WeakRetained + 56) = *((_OWORD *)this + 3);
      *(_OWORD *)(WeakRetained + 104) = v5;
      *(_OWORD *)(WeakRetained + 88) = v4;
      *(_OWORD *)(WeakRetained + 72) = v6;
      v7 = *((_OWORD *)this + 9);
      v8 = *((_OWORD *)this + 10);
      v9 = *((_OWORD *)this + 8);
      *(_OWORD *)(WeakRetained + 120) = *((_OWORD *)this + 7);
      *(_OWORD *)(WeakRetained + 168) = v8;
      *(_OWORD *)(WeakRetained + 152) = v7;
      *(_OWORD *)(WeakRetained + 136) = v9;
      *(_OWORD *)(WeakRetained + 40) = *((_OWORD *)this + 2);
    }
    if (*((_BYTE *)this + 17))
    {
      v10 = (char *)(this + 22);
      if (WeakRetained + 208 != v10)
      {
        for (i = 0; i != 224; i += 16)
          re::TextureHandle::operator=((re::TextureHandle *)&v3[i + 208], (re::TextureHandle *)&v10[i]);
      }
    }

  }
}

double re::PbrMaterialParameters::PbrMaterialParameters(re::PbrMaterialParameters *this)
{
  double result;

  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = _Q1;
  *((_BYTE *)this + 352) = 0;
  *((_DWORD *)this + 89) = 0;
  *((_QWORD *)this + 45) = 0x3F8000003F000000;
  *((_QWORD *)this + 46) = 0;
  *(_QWORD *)((char *)this + 373) = 0;
  *((_OWORD *)this + 24) = xmmword_226108D30;
  *((_OWORD *)this + 25) = xmmword_226108D40;
  *((_DWORD *)this + 104) = 1025758986;
  *((_BYTE *)this + 420) = 0;
  *(_QWORD *)&result = 1065353216;
  *((_OWORD *)this + 27) = xmmword_226104350;
  *((_OWORD *)this + 28) = xmmword_226104350;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_DWORD *)this + 122) = 0;
  return result;
}

int64x2_t re::PbrMaterial::PbrMaterial(uint64_t a1, int a2)
{
  _anonymous_namespace_ *v3;
  int64x2_t result;

  re::PbrMaterialParameters::PbrMaterialParameters(a1 + 32, a2);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED46590;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  result = vdupq_n_s64(0xFFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 560) = result;
  *(_QWORD *)(a1 + 576) = 0;
  return result;
}

double re::PbrMaterialParameters::PbrMaterialParameters(uint64_t a1, int a2)
{
  double result;

  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = _Q1;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 360) = 0x3F8000003F000000;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 373) = 0;
  *(_OWORD *)(a1 + 384) = xmmword_226108D30;
  *(_OWORD *)(a1 + 400) = xmmword_226108D40;
  *(_DWORD *)(a1 + 416) = 1025758986;
  *(_BYTE *)(a1 + 420) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a1 + 432) = xmmword_226104350;
  *(_OWORD *)(a1 + 448) = xmmword_226104350;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = a2;
  *(_QWORD *)(a1 + 484) = 0;
  return result;
}

void re::PbrMaterial::~PbrMaterial(re::PbrMaterial *this)
{
  re::PbrMaterial::~PbrMaterial(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED46590;
  v2 = *((_QWORD *)this + 69);
  if (v2)
  {

    *((_QWORD *)this + 69) = 0;
  }
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 528));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 344));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 320));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 296));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 272));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 248));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 224));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 200));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 176));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 152));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 128));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 104));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 56));
  re::AssetHandle::~AssetHandle((re::PbrMaterial *)((char *)this + 32));
}

double re::make::shared::object<re::PbrParameterTable>@<D0>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  double result;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 448, 16);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(_QWORD *)v4 = &off_24ED46608;
  *(_QWORD *)(v4 + 32) = &off_24ED46650;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v4 + 48) = _Q0;
  *(_QWORD *)(v4 + 64) = 0x3F00000000000000;
  *(_DWORD *)(v4 + 72) = 1065353216;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = xmmword_226108D30;
  *(_QWORD *)(v4 + 112) = 0;
  *(int32x4_t *)(v4 + 128) = vdupq_n_s32(0x3D23D70Au);
  *(_OWORD *)(v4 + 144) = xmmword_226104350;
  *(_OWORD *)(v4 + 160) = xmmword_226104350;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_DWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 208) = &off_24ED46690;
  result = 0.0;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *a2 = v4;
  return result;
}

void re::PbrParameterTable::~PbrParameterTable(re::PbrParameterTable *this)
{
  uint64_t i;

  *(_QWORD *)this = &off_24ED46608;
  *((_QWORD *)this + 26) = &off_24ED46690;
  for (i = 424; i != 200; i -= 16)
    re::TextureHandle::invalidate((re::PbrParameterTable *)((char *)this + i));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t i;

  *(_QWORD *)this = &off_24ED46608;
  *((_QWORD *)this + 26) = &off_24ED46690;
  for (i = 424; i != 200; i -= 16)
    re::TextureHandle::invalidate((re::PbrParameterTable *)((char *)this + i));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::PbrConstantSource::lookup(re::PbrConstantSource *this, const re::WeakStringID *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = re::PbrConstantSource::constantNameMap(this);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v4, a2);
  if (v5 == -1)
    return 0;
  v6 = v4[1] + 16 * v5;
  if (((*((_DWORD *)this + 40) >> *(_BYTE *)(v6 + 12)) & 1) == 0)
    return 0;
  else
    return v6 + 8;
}

unint64_t re::PbrConstantSource::layoutHash(re::PbrConstantSource *this)
{
  unsigned int v1;
  unint64_t v2;

  v1 = 73244475 * (*((_DWORD *)this + 40) ^ HIWORD(*((_DWORD *)this + 40)));
  v2 = (73244475 * (v1 ^ HIWORD(v1))) ^ ((73244475 * (v1 ^ HIWORD(v1))) >> 16);
  return (re::PbrConstantSource::constantNameMap(this)[6] + (v2 << 6) + (v2 >> 2) - 0x61C8864680B583E9) ^ v2;
}

uint64_t re::PbrConstantSource::data(re::PbrConstantSource *this)
{
  return (uint64_t)this + 16;
}

uint64_t re::PbrTextureSource::lookup@<X0>(re::PbrTextureSource *this@<X0>, const re::WeakStringID *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  char *v10;

  v6 = re::PbrTextureSource::textureNameMap(this);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v6, a2);
  if (result != -1
    && (v8 = v6[1] + 16 * result, v9 = *(unsigned __int8 *)(v8 + 9), v9 <= 0xD)
    && (v10 = (char *)this + 16 * v9, *((_QWORD *)v10 + 2))
    && *((_QWORD *)v10 + 1))
  {
    *(_BYTE *)a3 = 1;
    *(_WORD *)(a3 + 1) = *(_WORD *)(v8 + 8);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

unint64_t re::PbrTextureSource::layoutHash(re::PbrTextureSource *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  _BOOL4 v5;
  unsigned int v6;

  v2 = re::PbrTextureSource::textureNameMap(this);
  v3 = 0;
  v4 = 0;
  do
  {
    if (*(_QWORD *)((char *)this + v3 + 16))
      v5 = *(_QWORD *)((char *)this + v3 + 8) != 0;
    else
      v5 = 0;
    v4 = 2 * (v4 | v5);
    v3 += 16;
  }
  while (v3 != 224);
  v6 = 73244475 * ((73244475 * (v4 ^ HIWORD(v4))) ^ ((73244475 * (v4 ^ HIWORD(v4))) >> 16));
  return (v2[6]
        + ((unint64_t)(v6 ^ HIWORD(v6)) << 6)
        + ((unint64_t)(v6 ^ HIWORD(v6)) >> 2)
        - 0x61C8864680B583E9) ^ v6 ^ HIWORD(v6);
}

uint64_t re::PbrTextureSource::size(re::PbrTextureSource *this)
{
  return 14;
}

void re::PbrTextureSource::textureAt(os_unfair_lock_s **this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (a2 > 0xD)
    *a3 = 0;
  else
    re::TextureHandle::metalTexture(&this[2 * a2 + 1], a3);
}

BOOL re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::remove(uint64_t a1, _QWORD *a2)
{
  int v3;
  _BYTE v5[8];
  unint64_t v6;

  re::DynamicOverflowArray<unsigned long long,1ul>::indexOf(a1, a2, (uint64_t)v5);
  v3 = v5[0];
  if (v5[0])
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::removeAt(a1, v6);
  return v3 != 0;
}

uint64_t re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::removeAt(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(result + 8);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    if ((*(_BYTE *)(result + 16) & 1) != 0)
      v3 = result + 24;
    else
      v3 = *(_QWORD *)(result + 32);
    *(_QWORD *)(v3 + 8 * a2) = *(_QWORD *)(v3 + 8 * v2 - 8);
  }
  v4 = *(_DWORD *)(result + 16);
  *(_QWORD *)(result + 8) = v2 - 1;
  *(_DWORD *)(result + 16) = v4 + 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(uint64_t a1, _QWORD *a2)
{
  _anonymous_namespace_ *result;
  uint64_t v5;
  uint64_t v6;

  result = re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v5 = a1 + 24;
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v5 + 8 * v6) = *a2;
  *(_QWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_QWORD *re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 8;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = result;
  if (*(_QWORD *)result)
  {
    v2 = *((_QWORD *)result + 1);
    if ((*((_BYTE *)result + 16) & 1) != 0)
      v3 = 8;
    else
      v3 = *((_QWORD *)result + 3);
    if (v2 >= v3)
      return re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::growCapacity(result, v2 + 1);
  }
  else
  {
    v4 = *((_QWORD *)v1 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2;
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v3 = result;
  if (!*(_QWORD *)result)
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    if (a2 <= 8)
      return result;
    v5 = 16;
  }
  else
  {
    v4 = *((_QWORD *)result + 3);
    if (v4 >= a2)
      return result;
    v5 = 2 * v4;
  }
  if (v5 > a2)
    a2 = v5;
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(result, a2);
}

void re::ecs2::NetworkTransferReporterSystem::willAddSystemToECSService(re::ecs2::NetworkTransferReporterSystem *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[8];
  uint64_t v11;
  uint64_t v12;
  _DWORD *(*v13)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unsigned int);
  void *v14;
  re::ecs2::NetworkTransferReporterSystem *v15;

  v2 = re::globalAllocators(this);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 64, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_DWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 52) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 13) = v3;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::TraceService>(v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v6 = (re *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v5);
  if (v6 && *((_QWORD *)v6 + 320))
  {
    v7 = RESyncTransferReportObserverCreate();
    v8 = MEMORY[0x24BDAC760];
    *((_QWORD *)this + 16) = v7;
    v11 = v8;
    v12 = 0x40000000;
    v13 = ___ZN2re4ecs229NetworkTransferReporterSystem25willAddSystemToECSServiceEv_block_invoke;
    v14 = &__block_descriptor_tmp_8;
    v15 = this;
    RESyncTransferReportObserverOnTransferReportSend();
    RESyncServiceAddTransferReportObserver();
  }
  else
  {
    v9 = *re::ecsComponentsLogObjects(v6);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_224FE9000, v9, OS_LOG_TYPE_FAULT, "[TransferReport] Failed to subscribe to transferReportSendEvent, NetworkSyncService not found.", v10, 2u);
    }
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::TraceService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::TraceService>(void)::info = re::introspect_TraceService(0);
  }
  v3 = re::introspect<re::TraceService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ecs2::NetworkTransferReporterSystem::willRemoveSystemFromECSService(re::ecs2::NetworkTransferReporterSystem *this)
{
  uint64_t v2;
  uint64_t v3;

  re::internal::destroyPersistent<re::TransferReport>((re *)"willRemoveSystemFromECSService", 49, *((_QWORD *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v2);
  if (v3 && *(_QWORD *)(v3 + 2560))
    RESyncServiceRemoveTransferReportObserver();
  return RESyncRelease();
}

re *re::internal::destroyPersistent<re::TransferReport>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    v5 = re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)(a3 + 16));
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v4 + 40))(v4, a3, v5);
  }
  return result;
}

void re::ecs2::NetworkTransferReporterSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double Current;
  double v6;
  double *v7;
  uint64_t v8;
  re *v9;
  double *v10;
  uint64_t v11;
  double v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE v15[16];
  double *v16;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15, 3105, a1);
  if (a3 == 1)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v6 = *(double *)(a1 + 120);
    if (Current - v6 >= 1.0)
    {
      v7 = *(double **)(a1 + 104);
      *v7 = v6;
      v7[1] = Current;
      *(double *)(a1 + 120) = Current;
      v8 = *(_QWORD *)(a1 + 112);
      if (v8)
      {
        v16 = v7;
        v9 = (re *)(*(uint64_t (**)(uint64_t, double **))(*(_QWORD *)v8 + 24))(v8, &v16);
        v10 = v16;
        v16 = 0;
        if (v10)
        {
          v11 = re::globalAllocators(v9)[2];
          v12 = re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v10 + 2);
          v9 = (re *)(*(uint64_t (**)(uint64_t, double *, double))(*(_QWORD *)v11 + 40))(v11, v10, v12);
        }
        v13 = re::globalAllocators(v9);
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 64, 8);
        *(_OWORD *)v14 = 0u;
        *(_OWORD *)(v14 + 32) = 0u;
        *(_DWORD *)(v14 + 48) = 0;
        *(_OWORD *)(v14 + 16) = 0u;
        *(_QWORD *)(v14 + 52) = 0x7FFFFFFFLL;
        *(_QWORD *)(a1 + 104) = v14;
      }
      else
      {
        *v7 = 0.0;
        v7[1] = 0.0;
        re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)(v7 + 2));
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15);
}

uint64_t re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addNew(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 88 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 88 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 88 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 88 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + (v4 << 7) + 16) != v2)
  {
    while (1)
    {
      v4 = *(_DWORD *)(v6 + (v4 << 7) + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + (v4 << 7) + 16) == v2)
        return v6 + (v4 << 7) + 24;
    }
    return 0;
  }
  return v6 + (v4 << 7) + 24;
}

unint64_t re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + ((unint64_t)v13 << 7);
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + (v10 << 7) + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + (v10 << 7) + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + (v10 << 7);
  return v12 + 24;
}

uint64_t *re::ecs2::allocInfo_NetworkTransferReporterSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_147);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_147))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106E80, 0);
    *(uint64_t *)((char *)&qword_254106E90 + 6) = 0;
    qword_254106E90 = 0;
    qword_254106EA0 = 0;
    qword_254106EA8 = 0xFFFFFFFFLL;
    qword_254106E80 = (uint64_t)&off_24ED7DAA8;
    qword_254106EB0 = (uint64_t)"NetworkTransferReporterSystem";
    dword_254106EB8 = 0;
    unk_254106EC0 = 0u;
    unk_254106ED0 = 0u;
    unk_254106EE0 = 0u;
    qword_254106EF0 = 0;
    __cxa_guard_release(&_MergedGlobals_147);
  }
  return &qword_254106E80;
}

void re::ecs2::initInfo_NetworkTransferReporterSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xB7FCF8038E4345D2;
  v5[1] = "NetworkTransferReporterSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_NetworkTransferReporterSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkTransferReporterSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkTransferReporterSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::NetworkTransferReporterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::NetworkTransferReporterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkTransferReporterSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkTransferReporterSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::NetworkTransferReporterSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  re::ecs2::System::System(a3, 2);
  *v3 = &off_24ED46710;
  v3[15] = 0;
  v3[16] = 0;
  v3[14] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::NetworkTransferReporterSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::NetworkTransferReporterSystem>(uint64_t a1)
{
  _QWORD *v1;

  re::ecs2::System::System(a1, 2);
  *v1 = &off_24ED46710;
  v1[15] = 0;
  v1[16] = 0;
  v1[14] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::NetworkTransferReporterSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_NetworkTransferReporterSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkTransferReporterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkTransferReporterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkTransferReporterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkTransferReporterSystem>, this);
}

void re::ecs2::NetworkTransferReporterSystem::~NetworkTransferReporterSystem(re::ecs2::NetworkTransferReporterSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::NetworkTransferReporterSystem::typeInfo(re::ecs2::NetworkTransferReporterSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkTransferReporterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkTransferReporterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkTransferReporterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkTransferReporterSystem>, 0);
}

double re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 128;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  double result;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)(a1 + 80));
    return re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)(a1 + 32));
  }
  return result;
}

double re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(v6 + 40));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 88;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 88 * v10;
  *(_DWORD *)(v12 + v14 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14 + 16) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + v14;
  v16 = *a5;
  v17 = *((_BYTE *)a5 + 8);
  *(_OWORD *)(v15 + 40) = 0u;
  v15 += 40;
  *(_BYTE *)(v15 - 8) = v17;
  *(_QWORD *)(v15 - 16) = v16;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_DWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v15, a5 + 2);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 128;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 7) + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 7) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 7) + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 7) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 7) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 7)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 7) + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + (v10 << 7);
  *(_QWORD *)(v14 + 24) = *a5;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_DWORD *)(v14 + 64) = 0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_QWORD *)(v14 + 68) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v14 + 32), a5 + 1);
  *(_OWORD *)(v14 + 80) = 0u;
  v14 += 80;
  *(_DWORD *)(v14 + 32) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5 + 7);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long long,re::PeerTransferReport,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + (v10 << 7), 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_15, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<unsigned long,re::SessionTransferReport,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_15, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

id re::internal::defaultRetain<re::ecs2::NetworkTransferReporterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::NetworkTransferReporterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_ShadowProxyComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_148);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_148))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106F10, 0);
    *(uint64_t *)((char *)&qword_254106F20 + 6) = 0;
    qword_254106F20 = 0;
    qword_254106F30 = 0;
    qword_254106F38 = 0xFFFFFFFFLL;
    qword_254106F10 = (uint64_t)&off_24ED7DAA8;
    qword_254106F40 = (uint64_t)"ShadowProxyComponent";
    dword_254106F48 = 0;
    *(_OWORD *)&algn_254106F4C[4] = 0u;
    *(_OWORD *)&algn_254106F4C[20] = 0u;
    *(_OWORD *)&algn_254106F4C[36] = 0u;
    qword_254106F80 = 0;
    __cxa_guard_release(&_MergedGlobals_148);
  }
  return &qword_254106F10;
}

void re::ecs2::initInfo_ShadowProxyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x232AB817E529F1ELL;
  v10[1] = "ShadowProxyComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254106F08);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254106F08);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254106F00 = v8;
      __cxa_guard_release(&qword_254106F08);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254106F00;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowProxyComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ShadowProxyComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowProxyComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowProxyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::ecs2::ShadowProxyComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED467B8;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 32) = result;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ShadowProxyComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::ShadowProxyComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED467B8;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 32) = result;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ShadowProxyComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ShadowProxyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowProxyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowProxyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowProxyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowProxyComponent>, this);
}

void re::ecs2::ShadowProxyComponent::~ShadowProxyComponent(re::ecs2::ShadowProxyComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::internal::buildCollisionShapeAssetData(re::internal *this, re::CollisionShape *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _OWORD v6[2];
  int v7;
  uint64_t v8;
  _OWORD v9[2];
  int v10;
  uint64_t v11;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v11 = 0x7FFFFFFFLL;
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v8 = 0x7FFFFFFFLL;
  v3 = re::globalAllocators(this);
  v4 = re::convertToSerializable(this, (uint64_t)v9, (uint64_t)v6, v3[2], v3[2]);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v6);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v9);
  return v4;
}

re **re::internal::buildCollisionShape(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t *v3;
  re::internal *v4;
  re::CollisionShape *v5;
  re *v6;
  uint64_t *v7;
  re **result;
  __n128 v9;

  a2.n128_u64[0] = *(_QWORD *)(a1 + 12);
  a2.n128_u32[2] = *(_DWORD *)(a1 + 20);
  v9 = a2;
  v3 = re::globalAllocators((re *)a1);
  v4 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, __n128 *))(*(_QWORD *)v2 + 32))(v2, v3[2], &v9);
  v6 = (re *)re::internal::buildCollisionShapeAssetData(v4, v5);
  v7 = re::globalAllocators(v6);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 16, 8);
  *result = v6;
  result[1] = v4;
  return result;
}

re **re::internal::buildCollisionShape(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  re::internal *v3;
  re::CollisionShape *v4;
  re *v5;
  uint64_t *v6;
  re **result;
  __int128 v8;

  v8 = *(_OWORD *)(a1 + 20);
  v2 = re::globalAllocators((re *)a1);
  v3 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v1 + 32))(v1, v2[2], &v8);
  v5 = (re *)re::internal::buildCollisionShapeAssetData(v3, v4);
  v6 = re::globalAllocators(v5);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 16, 8);
  *result = v5;
  result[1] = v3;
  return result;
}

re **re::internal::buildCollisionShape(float *a1)
{
  float v1;
  float v2;
  uint64_t v3;
  uint64_t *v4;
  re::internal *v5;
  re::CollisionShape *v6;
  re *v7;
  uint64_t *v8;
  re **result;

  v1 = a1[1];
  v2 = a1[2];
  v4 = re::globalAllocators((re *)a1);
  v5 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)v3 + 120))(v3, v4[2], v1, v2);
  v7 = (re *)re::internal::buildCollisionShapeAssetData(v5, v6);
  v8 = re::globalAllocators(v7);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 16, 8);
  *result = v7;
  result[1] = v5;
  return result;
}

{
  float v1;
  float v2;
  uint64_t v3;
  uint64_t *v4;
  re::internal *v5;
  re::CollisionShape *v6;
  re *v7;
  uint64_t *v8;
  re **result;

  v1 = a1[1];
  v2 = a1[3];
  v4 = re::globalAllocators((re *)a1);
  v5 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)v3 + 128))(v3, v4[2], v1, v2);
  v7 = (re *)re::internal::buildCollisionShapeAssetData(v5, v6);
  v8 = re::globalAllocators(v7);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 16, 8);
  *result = v7;
  result[1] = v5;
  return result;
}

{
  float v1;
  uint64_t v2;
  uint64_t *v3;
  re::internal *v4;
  re::CollisionShape *v5;
  re *v6;
  uint64_t *v7;
  re **result;

  v1 = a1[1];
  v3 = re::globalAllocators((re *)a1);
  v4 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v2 + 112))(v2, v3[2], v1);
  v6 = (re *)re::internal::buildCollisionShapeAssetData(v4, v5);
  v7 = re::globalAllocators(v6);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 16, 8);
  *result = v6;
  result[1] = v4;
  return result;
}

{
  float v1;
  float v2;
  uint64_t v3;
  uint64_t *v4;
  re::internal *v5;
  re::CollisionShape *v6;
  re *v7;
  uint64_t *v8;
  re **result;

  v2 = a1[2];
  v1 = a1[3];
  v4 = re::globalAllocators((re *)a1);
  v5 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(_QWORD *)v3 + 40))(v3, v4[2], v1, v2);
  v7 = (re *)re::internal::buildCollisionShapeAssetData(v5, v6);
  v8 = re::globalAllocators(v7);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 16, 8);
  *result = v7;
  result[1] = v5;
  return result;
}

re **re::internal::buildCollisionShape(re *a1)
{
  __int128 v1;
  uint64_t v2;
  uint64_t *v3;
  re::internal *v4;
  re::CollisionShape *v5;
  re *v6;
  uint64_t *v7;
  re **result;
  __int128 v9;

  v9 = xmmword_2260E5F10;
  switch(*((_DWORD *)a1 + 6))
  {
    case 1:
      v1 = xmmword_2260E5F30;
      goto LABEL_7;
    case 2:
      v1 = xmmword_2260E5F20;
      goto LABEL_7;
    case 3:
      v1 = xmmword_2260E5F50;
      goto LABEL_7;
    case 4:
      v1 = xmmword_2260E5F40;
      goto LABEL_7;
    case 5:
      v1 = xmmword_226108EE0;
LABEL_7:
      v9 = v1;
      break;
    default:
      break;
  }
  v3 = re::globalAllocators(a1);
  v4 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, __int128 *, float))(*(_QWORD *)v2 + 104))(v2, v3[2], &v9, 0.0);
  v6 = (re *)re::internal::buildCollisionShapeAssetData(v4, v5);
  v7 = re::globalAllocators(v6);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 16, 8);
  *result = v6;
  result[1] = v4;
  return result;
}

re **re::internal::buildCollisionShape(re *a1, int32x4_t a2, int32x4_t a3)
{
  double v3;
  __int32 v4;
  float64x2_t v5;
  int32x4_t v6;
  int32x4_t v7;
  __int128 v8;
  float v9;
  uint64_t v10;
  uint64_t *v11;
  re::internal *v12;
  re::CollisionShape *v13;
  re *v14;
  uint64_t *v15;
  re **result;
  _OWORD v17[4];
  int8x16_t v18;
  __int128 v19;
  int8x16_t v20;
  int32x4_t v21;
  __int128 v22;
  int32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  a2.i32[0] = *((_DWORD *)a1 + 1);
  *(float *)a3.i32 = *(float *)a2.i32 * -0.5;
  v3 = *(float *)a2.i32;
  *(float *)&v4 = *(float *)a2.i32 * 0.433013;
  *(float *)a2.i32 = *(float *)a2.i32 * 0.5;
  v5 = vmulq_n_f64((float64x2_t)xmmword_226108EF0, v3);
  *(float32x2_t *)&v5.f64[0] = vcvt_f32_f64(v5);
  v6 = vzip1q_s32(a3, (int32x4_t)v5);
  v6.i32[2] = v4;
  v7 = vzip1q_s32(a2, (int32x4_t)v5);
  v7.i32[2] = v4;
  LODWORD(v8) = 0;
  v9 = v3 * 0.408248;
  *((float *)&v8 + 1) = v9;
  *(float *)&v3 = v3 * 0.144338;
  *((_QWORD *)&v8 + 1) = LODWORD(v3);
  v17[0] = v6;
  v17[1] = v7;
  v17[2] = v8;
  v17[3] = v7;
  v18 = vextq_s8(vextq_s8((int8x16_t)0, (int8x16_t)0, 4uLL), (int8x16_t)v5, 0xCuLL);
  v19 = v8;
  v20 = v18;
  v21 = v6;
  v22 = v8;
  v23 = v7;
  v24 = v6;
  v25 = v18;
  v11 = re::globalAllocators(a1);
  v12 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v10 + 56))(v10, v11[2], v17, 12);
  v14 = (re *)re::internal::buildCollisionShapeAssetData(v12, v13);
  v15 = re::globalAllocators(v14);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 16, 8);
  *result = v14;
  result[1] = v12;
  return result;
}

re **re::internal::buildCollisionShape(uint64_t a1, double a2, double a3, double a4, double a5, __n128 a6)
{
  float32x2_t v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  re::internal *v13;
  re::CollisionShape *v14;
  re *v15;
  uint64_t *v16;
  re **result;
  _OWORD v18[12];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = vmul_f32(*(float32x2_t *)(a1 + 4), (float32x2_t)0x3F0000003F000000);
  a6.n128_u64[0] = (unint64_t)vneg_f32(v6);
  v7 = a6;
  v7.n128_f32[2] = *(float *)(a1 + 12) * 0.5;
  v8 = a6;
  v8.n128_u32[0] = v6.i32[0];
  v9 = v8;
  v9.n128_f32[2] = v7.n128_f32[2];
  v8.n128_f32[2] = -v7.n128_f32[2];
  a6.n128_f32[2] = -v7.n128_f32[2];
  LODWORD(v10) = 0;
  HIDWORD(v10) = v6.i32[1];
  v18[0] = v7;
  v18[1] = v9;
  v18[2] = v10;
  v18[3] = v9;
  v18[4] = v8;
  v18[5] = v10;
  v18[6] = v8;
  v18[7] = a6;
  v18[8] = v10;
  v18[9] = a6;
  v18[10] = v8;
  v18[11] = v7;
  v12 = re::globalAllocators((re *)a1);
  v13 = (re::internal *)(*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v11 + 56))(v11, v12[2], v18, 12);
  v15 = (re *)re::internal::buildCollisionShapeAssetData(v13, v14);
  v16 = re::globalAllocators(v15);
  result = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 16, 8);
  *result = v15;
  result[1] = v13;
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 96 * v10 + 16) == v6)
        return result;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 96 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 96 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add<int>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<int>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

void re::internal::shadows::generateAABBsForCluster(uint64_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __int128 v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  unint64_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  float32x4_t v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t i;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  __int128 v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  uint64_t v94;
  _QWORD **v95;
  _QWORD **v96;
  float32x4_t v97;
  char v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  NSObject *v107;
  re::ecs2::EntityComponentCollection *v108;
  uint64_t v109;
  float32x2_t *v110;
  float32x2_t *v111;
  unint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float v117;
  float32x4_t v118;
  uint32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  uint32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int32x4_t v140;
  __int128 v141;
  float32x4_t v142;
  float v143;
  float v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  __int128 v151;
  __int128 v155;
  __int128 v156;
  float32x4_t v157;
  __int128 v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  __int128 v164;
  float32x4_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  unsigned int v169;
  uint64_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  __int128 v176;
  uint8_t buf[16];
  __int128 v178;
  __int128 v179;
  __int128 v180;

  v169 = 0;
  v167 = 0u;
  v168 = 0u;
  v170 = 0x7FFFFFFFLL;
  v5 = *a1;
  v171.i64[0] = v5;
  if (v5)
  {
    *(_OWORD *)buf = xmmword_2260E5F10;
    v178 = xmmword_2260E5F20;
    v179 = xmmword_2260E5F40;
    v180 = xmmword_2260E5D70;
    re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v167, (uint64_t *)&v171, (__int128 *)buf);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 && (*(_BYTE *)(v6 + 288) & 0x80) != 0)
      v6 = 0;
    v173.i64[0] = v6;
    *(_OWORD *)buf = xmmword_2260E5F10;
    v178 = xmmword_2260E5F20;
    v179 = xmmword_2260E5F40;
    v180 = xmmword_2260E5D70;
    re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v167, (uint64_t *)&v173, (__int128 *)buf);
    v165.i64[1] = 0;
    v163 = 0u;
    v164 = 0u;
    v165.i32[0] = 0;
    *(_QWORD *)buf = v5;
    re::Queue<re::internal::AssetLoadItem *>::enqueue(&v163, buf);
    if ((_QWORD)v164)
    {
      while (1)
      {
        v8 = re::Queue<re::internal::AssetLoadItem *>::dequeue((uint64_t)&v163, v7);
        v9 = v8;
        v10 = *(_QWORD *)(v8 + 24);
        if (v10)
        {
          if ((*(_BYTE *)(v10 + 288) & 0x80) != 0)
            v11 = 0;
          else
            v11 = *(_QWORD *)(v8 + 24);
        }
        else
        {
          v11 = 0;
        }
        v12 = *(_QWORD *)(v8 + 240);
        v13 = v167;
        if ((_QWORD)v167)
        {
          v14 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
          v15 = (v14 ^ (v14 >> 31)) % DWORD2(v168);
          v16 = v168;
          v17 = *(unsigned int *)(*((_QWORD *)&v167 + 1) + 4 * v15);
          if ((_DWORD)v17 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(v168 + 96 * v17 + 16) != v11)
            {
              v17 = *(_DWORD *)(v168 + 96 * v17 + 8) & 0x7FFFFFFF;
              if (v17 == 0x7FFFFFFF)
                goto LABEL_17;
            }
            goto LABEL_18;
          }
        }
        else
        {
          v16 = v168;
        }
LABEL_17:
        LODWORD(v17) = 0x7FFFFFFF;
LABEL_18:
        v19 = (float32x4_t)xmmword_2260E5F20;
        v18 = (float32x4_t)xmmword_2260E5F10;
        v21 = xmmword_2260E5D70;
        v20 = (float32x4_t)xmmword_2260E5F40;
        if (v5 != v8)
        {
          v19 = (float32x4_t)xmmword_2260E5F20;
          v18 = (float32x4_t)xmmword_2260E5F10;
          v21 = xmmword_2260E5D70;
          v20 = (float32x4_t)xmmword_2260E5F40;
          if (v12)
          {
            v22 = *(float *)(v12 + 48);
            v23 = *(float *)(v12 + 52);
            v24 = v22 + v22;
            v25 = v23 + v23;
            v26 = *(float *)(v12 + 56);
            v27 = *(float *)(v12 + 60);
            v28 = v26 + v26;
            v29 = v22 * (float)(v22 + v22);
            v30 = v23 * (float)(v23 + v23);
            v31 = v26 * (float)(v26 + v26);
            v32 = v24 * v23;
            v33 = v24 * v26;
            v34 = v25 * v26;
            v35 = v24 * v27;
            v36 = v25 * v27;
            v37 = v28 * v27;
            v38.i32[3] = 0;
            v38.f32[0] = 1.0 - (float)(v30 + v31);
            v38.f32[1] = v32 + v37;
            v38.f32[2] = v33 - v36;
            v39.i32[3] = 0;
            v39.f32[0] = v32 - v37;
            v39.f32[1] = 1.0 - (float)(v29 + v31);
            v39.f32[2] = v34 + v35;
            v40.i32[3] = 0;
            v40.f32[0] = v33 + v36;
            v40.f32[1] = v34 - v35;
            v40.f32[2] = 1.0 - (float)(v29 + v30);
            v41 = *(float32x4_t *)(v12 + 32);
            v18 = vmulq_n_f32(v38, v41.f32[0]);
            v19 = vmulq_n_f32(v39, *(float *)vshrq_n_u64((uint64x2_t)v41, 0x20uLL).i32);
            v20 = vmulq_laneq_f32(v40, v41, 2);
            v21 = *(_OWORD *)(v12 + 64);
            HIDWORD(v21) = 1.0;
          }
        }
        v42 = 0;
        v43 = (float32x4_t *)(v16 + 96 * v17);
        v44 = v43[2];
        v45 = v43[3];
        v43 += 2;
        v46 = v43[2];
        v47 = v43[3];
        v173 = v18;
        v174 = v19;
        v175 = v20;
        v176 = v21;
        do
        {
          *(float32x4_t *)&buf[v42] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(_OWORD *)((char *)&v173 + v42))), v45, *(float32x2_t *)&v173.f32[v42 / 4], 1), v46, *(float32x4_t *)((char *)&v173 + v42), 2), v47, *(float32x4_t *)((char *)&v173 + v42), 3);
          v42 += 16;
        }
        while (v42 != 64);
        v48 = *(_OWORD *)buf;
        v49 = (float32x4_t)v178;
        v50 = v179;
        v51 = v180;
        v52 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
        v53 = v52 ^ (v52 >> 31);
        if (v13)
        {
          v13 = v53 % DWORD2(v168);
          for (i = *(unsigned int *)(*((_QWORD *)&v167 + 1) + 4 * v13);
                (_DWORD)i != 0x7FFFFFFF;
                LODWORD(i) = *(_DWORD *)(v16 + 96 * i + 8) & 0x7FFFFFFF)
          {
            if (*(_QWORD *)(v16 + 96 * i + 16) == v8)
              goto LABEL_34;
          }
        }
        v55 = v170;
        if ((_DWORD)v170 == 0x7FFFFFFF)
        {
          v55 = v169;
          v56 = v169;
          if (v169 == DWORD2(v168))
          {
            v157 = (float32x4_t)v178;
            v158 = *(_OWORD *)buf;
            v155 = v180;
            v156 = v179;
            re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)&v167, 2 * HIDWORD(v168));
            v51 = v155;
            v50 = v156;
            v49 = v157;
            v48 = v158;
            v56 = v169;
            v13 = v53 % DWORD2(v168);
            v16 = v168;
          }
          v169 = v56 + 1;
          v57 = *(_DWORD *)(v16 + 96 * v55 + 8);
        }
        else
        {
          v57 = *(_DWORD *)(v16 + 96 * v170 + 8);
          LODWORD(v170) = v57 & 0x7FFFFFFF;
        }
        v58 = v16 + 96 * v55;
        *(_DWORD *)(v58 + 8) = v57 | 0x80000000;
        v59 = *((_QWORD *)&v167 + 1);
        *(_DWORD *)(v58 + 8) = *(_DWORD *)(*((_QWORD *)&v167 + 1) + 4 * v13) | 0x80000000;
        *(_QWORD *)v58 = v53;
        *(_QWORD *)(v58 + 16) = v9;
        *(_OWORD *)(v58 + 32) = v48;
        *(float32x4_t *)(v58 + 48) = v49;
        *(_OWORD *)(v58 + 64) = v50;
        *(_OWORD *)(v58 + 80) = v51;
        *(_DWORD *)(v59 + 4 * v13) = v55;
        ++HIDWORD(v168);
        ++HIDWORD(v170);
LABEL_34:
        v60 = *(_QWORD *)(v9 + 328);
        v61 = v164;
        if (v60)
        {
          v62 = *(uint64_t **)(v9 + 344);
          v63 = v163.u64[1];
          v64 = 8 * v60;
          do
          {
            v65 = *v62;
            v7 = v61 + 1;
            if (v61 + 1 >= v63)
            {
              re::Queue<re::internal::AssetLoadItem *>::growCapacity(&v163, v7);
              v63 = v163.u64[1];
              v61 = v164;
              v7 = v164 + 1;
            }
            *(_QWORD *)(v165.i64[1] + 8 * ((*((_QWORD *)&v164 + 1) + v61) % v63)) = v65;
            *(_QWORD *)&v164 = v7;
            ++v165.i32[0];
            ++v62;
            v61 = v7;
            v64 -= 8;
          }
          while (v64);
          if (!v7)
            break;
        }
        else
        {
          v7 = v164;
          if (!(_QWORD)v164)
            break;
        }
      }
    }
    if (v163.i64[0] && v165.i64[1])
      (*(void (**)(void))(*(_QWORD *)v163.i64[0] + 40))();
  }
  else
  {
    v66 = a1[3];
    if (v66)
    {
      v67 = (uint64_t *)a1[5];
      v68 = 8 * v66;
      do
      {
        v173.i64[0] = *v67;
        v69 = *(_QWORD *)(v173.i64[0] + 240);
        v70 = (float32x4_t)xmmword_2260E5F10;
        v71 = (float32x4_t)xmmword_2260E5F20;
        v72 = (float32x4_t)xmmword_2260E5F40;
        v73 = xmmword_2260E5D70;
        if (v69)
        {
          v74 = *(float *)(v69 + 48);
          v75 = *(float *)(v69 + 52);
          v76 = v74 + v74;
          v77 = v75 + v75;
          v78 = *(float *)(v69 + 56);
          v79 = *(float *)(v69 + 60);
          v80 = v78 + v78;
          v81 = v74 * (float)(v74 + v74);
          v82 = v75 * (float)(v75 + v75);
          v83 = v78 * (float)(v78 + v78);
          v84 = v76 * v75;
          v85 = v76 * v78;
          v86 = v77 * v78;
          v87 = v76 * v79;
          v88 = v77 * v79;
          v89 = v80 * v79;
          v90.i32[3] = 0;
          v90.f32[0] = 1.0 - (float)(v82 + v83);
          v90.f32[1] = v84 + v89;
          v90.f32[2] = v85 - v88;
          v91.i32[3] = 0;
          v91.f32[0] = v84 - v89;
          v91.f32[1] = 1.0 - (float)(v81 + v83);
          v91.f32[2] = v86 + v87;
          v92.i32[3] = 0;
          v92.f32[0] = v85 + v88;
          v92.f32[1] = v86 - v87;
          v92.f32[2] = 1.0 - (float)(v81 + v82);
          v93 = *(float32x4_t *)(v69 + 32);
          v70 = vmulq_n_f32(v90, v93.f32[0]);
          v71 = vmulq_n_f32(v91, *(float *)vshrq_n_u64((uint64x2_t)v93, 0x20uLL).i32);
          v72 = vmulq_laneq_f32(v92, v93, 2);
          v73 = *(_OWORD *)(v69 + 64);
          HIDWORD(v73) = 1.0;
        }
        *(float32x4_t *)buf = v70;
        v178 = (__int128)v71;
        v179 = (__int128)v72;
        v180 = v73;
        re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v167, (uint64_t *)&v173, (__int128 *)buf);
        ++v67;
        v68 -= 8;
      }
      while (v68);
    }
  }
  v94 = a1[3];
  if (!v94)
    goto LABEL_81;
  v95 = (_QWORD **)a1[5];
  v96 = &v95[v94];
  v97.i64[0] = 0x7F0000007FLL;
  v97.i64[1] = 0x7F0000007FLL;
  v161 = v97;
  v98 = 1;
  v159 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v160 = v97;
  v162 = v159;
  do
  {
    if ((_QWORD)v167)
    {
      v99 = *v95;
      v100 = 0xBF58476D1CE4E5B9 * ((unint64_t)*v95 ^ ((unint64_t)*v95 >> 30));
      v101 = (0x94D049BB133111EBLL * (v100 ^ (v100 >> 27))) ^ ((0x94D049BB133111EBLL * (v100 ^ (v100 >> 27))) >> 31);
      v102 = *(unsigned int *)(*((_QWORD *)&v167 + 1) + 4 * (v101 % DWORD2(v168)));
      if ((_DWORD)v102 != 0x7FFFFFFF)
      {
        while (*(_QWORD **)(v168 + 96 * v102 + 16) != v99)
        {
          LODWORD(v102) = *(_DWORD *)(v168 + 96 * v102 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v102 == 0x7FFFFFFF)
            goto LABEL_79;
        }
        v103 = v99[22];
        if (v103)
        {
          v104 = *(_QWORD *)(v103 + 40);
          if (v104 && (v105 = atomic_load((unsigned int *)(v104 + 704)), v105 == 2))
          {
            v106 = *(unsigned int *)(*((_QWORD *)&v167 + 1) + 4 * (v101 % DWORD2(v168)));
            if ((_DWORD)v106 == 0x7FFFFFFF)
            {
LABEL_67:
              LODWORD(v106) = 0x7FFFFFFF;
            }
            else
            {
              while (*(_QWORD **)(v168 + 96 * v106 + 16) != v99)
              {
                v106 = *(_DWORD *)(v168 + 96 * v106 + 8) & 0x7FFFFFFF;
                if (v106 == 0x7FFFFFFF)
                  goto LABEL_67;
              }
            }
            v108 = (re::ecs2::EntityComponentCollection *)(v99 + 4);
            v109 = v168 + 96 * v106;
            v163 = *(float32x4_t *)(v109 + 32);
            v164 = *(_OWORD *)(v109 + 48);
            v165 = *(float32x4_t *)(v109 + 64);
            v166 = *(_OWORD *)(v109 + 80);
            re::ecs2::DynamicBoundingBoxComponent::lastKnownBoundsHelper((re::ecs2::DynamicBoundingBoxComponent *)v99, &v171);
            v110 = (float32x2_t *)re::ecs2::EntityComponentCollection::get(v108, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v110)
            {
              v111 = v110;
              v112 = 0;
              v113 = *a3;
              v114 = a3[1];
              v115 = a3[2];
              v116 = a3[3];
              v173 = v163;
              v174 = (float32x4_t)v164;
              v175 = v165;
              v176 = v166;
              do
              {
                *(float32x4_t *)&buf[v112] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v113, COERCE_FLOAT(*(_OWORD *)((char *)&v173 + v112))), v114, *(float32x2_t *)&v173.f32[v112 / 4], 1), v115, *(float32x4_t *)((char *)&v173 + v112), 2), v116, *(float32x4_t *)((char *)&v173 + v112), 3);
                v112 += 16;
              }
              while (v112 != 64);
              v117 = re::internal::shadows::calcShadowProxyThicknessInLocalCoord(v110 + 4, (float32x4_t *)buf);
              v119 = (uint32x4_t)vcgtq_f32(v171, v172);
              v119.i32[3] = v119.i32[2];
              if ((vmaxvq_u32(v119) & 0x80000000) != 0)
              {
                v121 = 0uLL;
                v120.i64[0] = 0x3F0000003F000000;
                v120.i64[1] = 0x3F0000003F000000;
              }
              else
              {
                v120.i64[0] = 0x3F0000003F000000;
                v120.i64[1] = 0x3F0000003F000000;
                v121 = vmulq_f32(vaddq_f32(v171, v172), v120);
              }
              v118.f32[2] = v117;
              *(float32x2_t *)v118.f32 = v111[4];
              v122 = vmulq_f32(v118, v120);
              v171 = vsubq_f32(v121, v122);
              v172 = vaddq_f32(v122, v121);
            }
            re::AABB::transform(&v171, &v163, (uint64_t)buf);
            v123 = (float32x4_t)v178;
            v124 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)buf, (float32x4_t)v178);
            v124.i32[3] = v124.i32[2];
            if ((vmaxvq_u32(v124) & 0x80000000) != 0)
            {
              v126.i64[0] = 0;
              v126.i32[2] = 0;
            }
            else
            {
              v125.i64[0] = 0x3F0000003F000000;
              v125.i64[1] = 0x3F0000003F000000;
              v126 = vmulq_f32(vaddq_f32(*(float32x4_t *)buf, (float32x4_t)v178), v125);
            }
            v127 = v159;
            v127.i32[3] = 0;
            v128 = *(float32x4_t *)buf;
            v128.i32[3] = 0;
            v129 = vminnmq_f32(v127, v128);
            v130 = v160;
            v130.i32[3] = 0;
            v131 = vsubq_f32((float32x4_t)v178, *(float32x4_t *)buf);
            v123.i32[3] = 0;
            v159 = v129;
            v160 = vmaxnmq_f32(v130, v123);
            v131.i32[3] = 0;
            v132 = vmaxnmq_f32(v131, (float32x4_t)0);
            v133 = vmulq_f32(v132, v132);
            v134 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1);
            v133.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2), vaddq_f32(v133, v134)).u32[0];
            v134.f32[0] = sqrtf(v133.f32[0]) * 0.5;
            v126.i32[3] = v134.i32[0];
            v135 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 0);
            v136 = vsubq_f32(v126, v135);
            v137 = vaddq_f32(v126, v135);
            v139 = v161;
            v138 = v162;
            v138.i32[3] = 0;
            v136.i32[3] = 0;
            v139.i32[3] = 0;
            v137.i32[3] = 0;
            v161 = vmaxnmq_f32(v139, v137);
            v162 = vminnmq_f32(v138, v136);
            v98 &= fabsf(v133.f32[0]) < 1.0e-10;
          }
          else
          {
            v107 = *re::ecsComponentsLogObjects((re *)v99);
            if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_224FE9000, v107, OS_LOG_TYPE_ERROR, "MeshShadowSystemHelpers.mm::generateAABBsForCluster(): encountered a null/unloaded mesh", buf, 2u);
            }
          }
        }
      }
    }
LABEL_79:
    ++v95;
  }
  while (v95 != v96);
  if ((v98 & 1) == 0)
  {
    v142 = vabsq_f32(*a2);
    v143 = v142.f32[1];
    v144 = fmaxf(fmaxf(v142.f32[0], v142.f32[2]), v142.f32[1]);
    v146 = v161;
    v145 = v162;
    v147 = vsubq_f32(v159, v162);
    v148 = vaddq_f32(v162, v147);
    v149 = vaddq_f32(v161, v147);
    v150 = vsubq_f32(v149, v160);
    if (v144 == v143)
    {
      v145.i32[1] = v148.i32[1];
      v146.i32[1] = v149.i32[1];
      LODWORD(v151) = 0;
      *((_QWORD *)&v151 + 1) = 0;
      DWORD1(v151) = v150.i32[1];
    }
    else
    {
      v145.i32[2] = v148.i32[2];
      v146.i32[2] = v149.i32[2];
      *(_QWORD *)&v151 = 0;
      *((_QWORD *)&v151 + 1) = v150.u32[2];
    }
    *(float32x4_t *)a4 = v159;
    *(float32x4_t *)(a4 + 16) = v160;
    *(float32x4_t *)(a4 + 32) = v145;
    *(float32x4_t *)(a4 + 48) = v146;
    *(_OWORD *)(a4 + 64) = v151;
  }
  else
  {
LABEL_81:
    v140 = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v141 = 0x7F0000007FLL;
    *((_QWORD *)&v141 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a4 = v140;
    *(_OWORD *)(a4 + 16) = v141;
    *(int32x4_t *)(a4 + 32) = v140;
    *(_OWORD *)(a4 + 48) = v141;
    *(_QWORD *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 72) = 0;
  }
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)&v167);
}

uint64_t re::internal::shadows::isEntityAMeshReceiver(re::internal::shadows *this, re::ecs2::Entity *a2, const re::AssetHandle *a3)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = re::ecs2::EntityComponentCollection::get((re::internal::shadows *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v5)
  {
    if (*(_BYTE *)(v5 + 41) == 1 && (*(_BYTE *)(v5 + 42) & 3) != 0)
      return 1;
  }
  else
  {
    v8 = *((_QWORD *)this + 22);
    v9 = *(_QWORD *)(v8 + 72);
    if (v9)
    {
      v10 = (_QWORD *)(*(_QWORD *)(v8 + 88) + 8);
      v11 = 24 * v9;
      while (*v10 != *((_QWORD *)a2 + 1))
      {
        v10 += 3;
        v11 -= 24;
        if (!v11)
          return 0;
      }
      return 1;
    }
  }
  return 0;
}

double re::internal::shadows::setParamsOnMaterialParameterBlock(uint64_t a1, uint64_t a2, re::RenderManager **this)
{
  re::MaterialParameterBlock *v4;
  uint64_t v5;
  float v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  uint64_t v11;
  _QWORD v12[4];
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;
  _QWORD v16[4];
  uint64_t v17;
  _QWORD v18[4];
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[4];
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25[2];

  v4 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(this, a1);
  v5 = *(_QWORD *)(a2 + 88);
  v25[0] = *(_QWORD *)(a2 + 80);
  v25[1] = v5;
  v24 = 0x1658E0C3A20A4B09;
  re::MaterialParameterBlock::setConstant(v4, &v24, 0x10uLL, v25, 33, (uint64_t)v23);
  v23[0] = 0;
  LODWORD(v24) = *(_DWORD *)(a2 + 16);
  v25[0] = 0x2651C5BB725E4431;
  re::MaterialParameterBlock::setConstant(v4, v25, 4uLL, &v24, 1, (uint64_t)v22);
  v22[0] = 0;
  LODWORD(v24) = *(_DWORD *)(a2 + 12);
  v25[0] = 0x58F744A8543328D7;
  re::MaterialParameterBlock::setConstant(v4, v25, 4uLL, &v24, 1, (uint64_t)v21);
  v21[0] = 0;
  v6 = cos(*(float *)(a2 + 56) * 3.14159265 / 180.0);
  *(float *)&v24 = v6;
  v25[0] = 0x7DDA5D55C0FC4FA9;
  re::MaterialParameterBlock::setConstant(v4, v25, 4uLL, &v24, 1, (uint64_t)v20);
  v20[0] = 0;
  LODWORD(v24) = 0;
  v25[0] = 0x5FE82A114F627B09;
  re::MaterialParameterBlock::setConstant(v4, v25, 4uLL, &v24, 7, (uint64_t)v19);
  v19[0] = 0;
  v17 = 0x568E6F2D267C8FA7;
  re::MaterialParameterBlock::setBinding(v4, &v17, "rendergraph", (uint64_t)"ProjectiveMeshShadowMapTexture", 2, (uint64_t)v18);
  v18[0] = 0;
  v15 = 0xAB2491DDDDEEE62;
  re::MaterialParameterBlock::setBinding(v4, &v15, "rendergraph", (uint64_t)"TiledShadowDepthPrepassDepthAsColorTexture", 2, (uint64_t)v16);
  v16[0] = 0;
  v13 = 0x5FCB768A20041405;
  re::MaterialParameterBlock::setBinding(v4, &v13, "rendergraph", (uint64_t)"compositedSceneUnderstandingShadowsColor", 2, (uint64_t)v14);
  v14[0] = 0;
  v11 = 0x5FCB768A200DAF65;
  re::MaterialParameterBlock::setBinding(v4, &v11, "rendergraph", (uint64_t)"compositedSceneUnderstandingShadowsDepth", 2, (uint64_t)v12);
  v12[0] = 0;
  v9 = 0x49245BDA69D27475;
  re::MaterialParameterBlock::setBinding(v4, &v9, "rendergraph", (uint64_t)"MeshShadowMipDescriptionBuffer", 3, (uint64_t)v10);
  v10[0] = 0;
  LOBYTE(v24) = 1;
  v25[0] = 0x34C6B4FED1749A95;
  return re::MaterialParameterBlock::setConstant(v4, v25, 1uLL, &v24, 2, (uint64_t)&v8);
}

uint64_t re::internal::shadows::removeParamsFromMaterialParameterBlock(uint64_t this, re::MaterialManager *a2, re::MaterialManager *a3)
{
  int v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!re::internal::shadows::g_enablePatchShadows)
  {
    v3 = (int)a3;
    v5 = this;
    this = (uint64_t)re::MaterialManager::getSystemMaterialParameterBlock(a2, this);
    if (this)
    {
      v6 = (uint64_t *)this;
      v12 = 0x1658E0C3A20A4B09;
      re::MaterialParameterBlock::removeConstant((uint64_t *)this, &v12, 16);
      v12 = 0x2651C5BB725E4431;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 4);
      v12 = 0x58F744A8543328D7;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 4);
      v12 = 0x7DDA5D55C0FC4FA9;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 4);
      v12 = 0x5FE82A114F627B09;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 4);
      v11 = 0x568E6F2D267C8FA7;
      re::MaterialParameterBlock::removeBinding(v6, &v11);
      v10 = 0xAB2491DDDDEEE62;
      v11 = 0;
      re::MaterialParameterBlock::removeBinding(v6, &v10);
      v9 = 0x5FCB768A20041405;
      v10 = 0;
      re::MaterialParameterBlock::removeBinding(v6, &v9);
      v8 = 0x5FCB768A200DAF65;
      v9 = 0;
      re::MaterialParameterBlock::removeBinding(v6, &v8);
      v8 = 0;
      v12 = 0x34C6B4FED1749A95;
      re::MaterialParameterBlock::removeConstant(v6, &v12, 1);
      v7 = 0x49245BDA69D27475;
      this = (uint64_t)re::MaterialParameterBlock::removeBinding(v6, &v7);
      v7 = 0;
      if (v3)
      {
        this = re::MaterialParameterBlock::isEmpty((re::MaterialParameterBlock *)v6);
        if ((_DWORD)this)
          return re::MaterialManager::removeSystemMaterialParameterBlock(a2, v5);
      }
    }
  }
  return this;
}

void re::internal::shadows::regenerateShadowProxy(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4, double a5, __n128 a6)
{
  int v8;
  unint64_t v9;
  float32x4_t v10;
  float32x2_t v11;
  __n128 v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  __n128 v21;
  __n128 v22;
  re *MeshAssetDataWithGeomMeshArray;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  int v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  __n128 v44;
  float v45;
  float v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  unint64_t v54;
  uint64_t *v55;
  double v56;
  re::GeomAttribute *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  re::internal *v63;
  const re::GeomAttribute *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  re *v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  unsigned __int32 v80;
  __n128 v81;
  float v82;
  __n128 v83;
  float v84;
  float v85;
  __n128 v86[46];
  char *__s[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  __n128 v99;
  __n128 v100;
  __n128 v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  _BYTE v108[18];
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __n128 v113[5];
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 41))
  {
    v8 = *(_DWORD *)(a1 + 4);
    v84 = *(float *)a1 * 0.5;
    WORD1(v103) = 1;
    LODWORD(v105) = 16843009;
    BYTE4(v105) = 1;
    LOWORD(v103) = *(_DWORD *)(a1 + 8);
    *((float *)&v104 + 1) = v84;
    *(float *)&v104 = v84;
    HIDWORD(v103) = v8;
    re::GeomMesh::GeomMesh((re::GeomMesh *)v86, 0);
    re::buildCylinder((uint64_t)v86, (unsigned __int16 *)&v103);
    v9 = 0;
    v10.i32[0] = 0;
    v10.f32[1] = v84;
    v10.i32[2] = 0;
    v10.i32[3] = 1.0;
    v11 = vrsqrte_f32((float32x2_t)1065353216);
    v12.n128_u64[0] = (unint64_t)vmul_f32(v11, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v11, v11)));
    v13 = vmulq_n_f32((float32x4_t)xmmword_2260E5F40, vmul_f32((float32x2_t)v12.n128_u64[0], vrsqrts_f32((float32x2_t)1065353216, vmul_f32((float32x2_t)v12.n128_u64[0], (float32x2_t)v12.n128_u64[0]))).f32[0]);
    v14 = vmulq_f32(v13, v13).f32[0];
    v15 = vmuls_lane_f32(v13.f32[1], *(float32x2_t *)v13.f32, 1);
    v16 = vmuls_lane_f32(v13.f32[2], v13, 2);
    v17 = vmuls_lane_f32(v13.f32[0], *(float32x2_t *)v13.f32, 1);
    v18 = vmuls_lane_f32(v13.f32[0], v13, 2);
    v19 = vmuls_lane_f32(v13.f32[1], v13, 2);
    *(float *)&v20 = v16 + (float)((float)(1.0 - v16) * -0.000000043711);
    v21.n128_u32[3] = 0;
    v21.n128_f32[0] = v14 + (float)((float)(1.0 - v14) * -0.000000043711);
    v21.n128_f32[1] = v13.f32[2] + v17;
    v21.n128_f32[2] = v18 - v13.f32[1];
    v12.n128_u32[3] = 0;
    v12.n128_f32[0] = v17 - v13.f32[2];
    v12.n128_f32[1] = v15 + (float)((float)(1.0 - v15) * -0.000000043711);
    v12.n128_f32[2] = v13.f32[0] + v19;
    v22.n128_f32[0] = v13.f32[1] + v18;
    v22.n128_f32[1] = v19 - v13.f32[0];
    v22.n128_u64[1] = v20;
    v113[0] = v21;
    v113[1] = v12;
    v113[2] = v22;
    v113[3] = (__n128)xmmword_2260E5D70;
    do
    {
      *(float32x4_t *)&__s[v9 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(_OWORD *)&v113[v9 / 0x10])), (float32x4_t)xmmword_2260E5F20, (float32x2_t)v113[v9 / 0x10].n128_u64[0], 1), (float32x4_t)xmmword_2260E5F40, (float32x4_t)v113[v9 / 0x10], 2), v10, (float32x4_t)v113[v9 / 0x10], 3);
      v9 += 16;
    }
    while (v9 != 64);
    re::transform((re::GeomMesh *)v86, (float32x4_t *)__s);
  }
  else
  {
    v85 = *(float *)(a1 + 32) + -0.5;
    v28 = *(float *)(a1 + 24);
    a6.n128_f32[0] = *(float *)(a1 + 20) * 0.5;
    a4.n128_f32[0] = v28 * 0.5;
    v83 = a4;
    v29 = *(float *)(a1 + 12) * 0.5;
    *(float *)&v80 = *(float *)(a1 + 28) + -0.5;
    v82 = *(float *)(a1 + 16) * 0.5;
    v107 = 0;
    v105 = 0;
    v103 = 0;
    v104 = 0;
    v106 = 0;
    a3.n128_f32[0] = -a6.n128_f32[0];
    a3.n128_u32[1] = v80;
    v30 = a3;
    v30.n128_f32[2] = v29;
    v77 = v29;
    v79 = a6.n128_f32[0];
    a6.n128_u32[1] = v80;
    v86[0] = v30;
    v31 = a6;
    v31.n128_f32[2] = v29;
    *(__n128 *)__s = v31;
    a6.n128_f32[2] = -v29;
    v113[0] = a6;
    a3.n128_f32[2] = -v29;
    *(__n128 *)v108 = a3;
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, v86);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, (__n128 *)__s);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, v113);
    v32 = re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, (__n128 *)v108);
    v32.n128_f32[0] = -(float)(v28 * 0.5);
    v32.n128_f32[1] = v85;
    v33 = v32;
    v33.n128_f32[2] = v82;
    v32.n128_f32[2] = -v82;
    v86[0] = v33;
    *(__n128 *)__s = v32;
    v34 = v83;
    v34.n128_f32[1] = v85;
    v35 = v34;
    v35.n128_f32[2] = -v82;
    v113[0] = v35;
    v34.n128_f32[2] = v82;
    *(__n128 *)v108 = v34;
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, v86);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, (__n128 *)__s);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, v113);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, (__n128 *)v108);
    v36 = *(_DWORD *)(a1 + 8);
    if (v36 >= 1)
    {
      v37 = 0;
      v38 = *(float *)&v80 - v85;
      v39 = v79 - v83.n128_f32[0];
      v40 = v77 - v82;
      do
      {
        v41 = (float)v36;
        v42 = (float)v37 / (float)v36;
        v43 = *(float *)(a1 + 36);
        v78 = v85 + (float)(powf(v42, v43) * v38);
        v44 = v83;
        v44.n128_f32[0] = v83.n128_f32[0] + (float)(v42 * v39);
        v81 = v44;
        v45 = (float)++v37 / v41;
        v46 = powf(v45, v43);
        v47 = v81;
        v48.n128_f32[0] = v83.n128_f32[0] + (float)(v45 * v39);
        v49.n128_f32[0] = -(float)(v83.n128_f32[0] + (float)(v42 * v39));
        v49.n128_f32[1] = v78;
        v50 = v49;
        v50.n128_f32[2] = v82 + (float)(v42 * v40);
        v86[0] = v50;
        v47.n128_f32[1] = v78;
        v51 = v47;
        v51.n128_f32[2] = v82 + (float)(v42 * v40);
        *(__n128 *)__s = v51;
        v49.n128_f32[2] = -v51.n128_f32[2];
        v113[0] = v49;
        v47.n128_f32[2] = -v51.n128_f32[2];
        v49.n128_f32[0] = -v48.n128_f32[0];
        v49.n128_f32[1] = v85 + (float)(v46 * v38);
        *(__n128 *)v108 = v47;
        v52 = v49;
        v52.n128_f32[2] = v82 + (float)(v45 * v40);
        v48.n128_f32[1] = v49.n128_f32[1];
        v102 = v52;
        v53 = v48;
        v53.n128_f32[2] = v52.n128_f32[2];
        v101 = v53;
        v49.n128_f32[2] = -v52.n128_f32[2];
        v100 = v49;
        v48.n128_f32[2] = -v52.n128_f32[2];
        v99 = v48;
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, v86);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, (__n128 *)__s);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, &v101);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, &v102);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, (__n128 *)__s);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, (__n128 *)v108);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, &v99);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, &v101);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, v86);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, &v102);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, &v100);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, v113);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, (__n128 *)v108);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, v113);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, &v100);
        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v103, &v99);
        v36 = *(_DWORD *)(a1 + 8);
      }
      while (v37 < v36);
    }
    bzero(__s, 0x2D0uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&__s[1]);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)((char *)&v90 + 8), "vertexPosition", 1, 7);
    v54 = v105;
    if (LODWORD(__s[1]) > v105 && (_DWORD)v89 && (v89 - 1) > (unint64_t)v89)
    {
      while (1)
        ;
    }
    LODWORD(__s[1]) = v105;
    v91 = v105;
    if (v92)
    {
      v58 = v93;
      v59 = 8 * v92;
      do
      {
        v60 = *v58++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 72))(v60, v91);
        v59 -= 8;
      }
      while (v59);
      v54 = v105;
    }
    if (v89 > (v54 >> 2))
    {
      v61 = v98;
      if (v98)
      {
        v62 = 0;
        do
        {
          v63 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v97, v62);
          re::internal::accessFaceVaryingAttributeSubmesh(v63, v64);
          ++v62;
        }
        while (v61 != v62);
      }
    }
    re::DynamicArray<re::GeomCell4>::resize(&v88, (v54 >> 2));
    v94 = v54 >> 2;
    if (v95)
    {
      v65 = v96;
      v66 = 8 * v95;
      do
      {
        v67 = *v65++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 72))(v67, v94);
        v66 -= 8;
      }
      while (v66);
    }
    if (v105)
    {
      v68 = 4;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, (v68 - 4) >> 2, v68 - 4, v68 - 3, v68 - 2, v68 - 1);
        v69 = v105 > v68;
        v68 += 4;
      }
      while (v69);
    }
    re::GeomMesh::GeomMesh((re::GeomMesh *)v86, 0);
    re::GeomMesh::operator=((uint64_t)v86, &__s[1]);
    v70 = re::GeomMesh::setName((re *)v86, __s[0]);
    v71 = __s[0];
    if (__s[0])
    {
      v72 = re::globalAllocators(v70);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v72[2] + 40))(v72[2], v71);
      __s[0] = 0;
    }
    v73 = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v86);
    if (v105)
    {
      v75 = 0;
      v76 = v74;
      do
      {
        if (v75 == v74)
        {
          v102.n128_u64[0] = 0;
          memset(v113, 0, sizeof(v113));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v108 = 136315906;
          *(_QWORD *)&v108[4] = "operator[]";
          *(_WORD *)&v108[12] = 1024;
          *(_DWORD *)&v108[14] = 609;
          v109 = 2048;
          v110 = v76;
          v111 = 2048;
          v112 = v76;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_OWORD *)(v73 + 16 * v75) = *(_OWORD *)(v107 + 16 * v75);
        ++v75;
      }
      while (v105 > v75);
    }
    re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
    if (v103 && v107)
      (*(void (**)(void))(*(_QWORD *)v103 + 40))();
  }
  v113[0].n128_u8[4] = 1;
  *(unsigned __int32 *)((char *)&v113[0].n128_u32[1] + 1) = 0;
  *(unsigned __int16 *)((char *)&v113[0].n128_u16[4] + 1) = 0;
  v113[0].n128_u32[3] = 1036831949;
  v113[1].n128_u32[0] = 16843008;
  v113[1].n128_u8[4] = 0;
  memset(&v113[1].n128_i8[8], 0, 48);
  v113[3].n128_u32[3] = 0x7FFFFFFF;
  v113[0].n128_u32[0] = 16842752;
  MeshAssetDataWithGeomMeshArray = (re *)re::makeMeshAssetDataWithGeomMeshArray((_anonymous_namespace_ *)v86, 1uLL, 0, 0, (uint64_t)__s);
  v24 = LOBYTE(__s[0]);
  v25 = re::globalAllocators(MeshAssetDataWithGeomMeshArray);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 960, 8);
  v27 = v26;
  if (v24)
  {
    v26 = re::MeshAsset::MeshAsset(v26, (uint64_t)&__s[1]);
  }
  else
  {
    *(_QWORD *)v26 = &off_24ED30A60;
    *(_QWORD *)(v26 + 8) = 0;
    *(_OWORD *)(v26 + 16) = 0u;
    *(_DWORD *)(v26 + 32) = 0;
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_DWORD *)(v26 + 72) = 0;
    *(_OWORD *)(v26 + 80) = 0u;
    *(_OWORD *)(v26 + 96) = 0u;
    *(_DWORD *)(v26 + 112) = 0;
    *(_OWORD *)(v26 + 120) = 0u;
    *(_OWORD *)(v26 + 136) = 0u;
    *(_DWORD *)(v26 + 152) = 0;
    *(_DWORD *)(v26 + 424) = 0;
    *(_OWORD *)(v26 + 392) = 0u;
    *(_OWORD *)(v26 + 408) = 0u;
    *(_OWORD *)(v26 + 484) = 0u;
    *(_OWORD *)(v26 + 472) = 0u;
    *(_OWORD *)(v26 + 456) = 0u;
    *(_DWORD *)(v26 + 192) = 0;
    *(_OWORD *)(v26 + 160) = 0u;
    *(_OWORD *)(v26 + 176) = 0u;
    *(_OWORD *)(v26 + 200) = 0u;
    *(_OWORD *)(v26 + 216) = 0u;
    *(_DWORD *)(v26 + 232) = 0;
    *(_OWORD *)(v26 + 240) = 0u;
    *(_OWORD *)(v26 + 256) = 0u;
    *(_DWORD *)(v26 + 272) = 0;
    *(_OWORD *)(v26 + 280) = 0u;
    *(_OWORD *)(v26 + 296) = 0u;
    *(_OWORD *)(v26 + 312) = 0u;
    *(_OWORD *)(v26 + 328) = 0u;
    *(_OWORD *)(v26 + 344) = 0u;
    *(_OWORD *)(v26 + 360) = 0u;
    *(_OWORD *)(v26 + 372) = 0u;
    *(_DWORD *)(v26 + 448) = 0;
    *(_OWORD *)(v26 + 432) = 0u;
    *(_QWORD *)(v26 + 500) = 0x7FFFFFFFLL;
    *(_DWORD *)(v26 + 544) = 0;
    *(_OWORD *)(v26 + 512) = 0u;
    *(_OWORD *)(v26 + 528) = 0u;
    *(_QWORD *)(v26 + 548) = 0x7FFFFFFFLL;
    *(_OWORD *)(v26 + 905) = 0u;
    *(_OWORD *)(v26 + 880) = 0u;
    *(_OWORD *)(v26 + 896) = 0u;
    *(_OWORD *)(v26 + 848) = 0u;
    *(_OWORD *)(v26 + 864) = 0u;
    *(_OWORD *)(v26 + 816) = 0u;
    *(_OWORD *)(v26 + 832) = 0u;
    *(_OWORD *)(v26 + 784) = 0u;
    *(_OWORD *)(v26 + 800) = 0u;
    *(_OWORD *)(v26 + 752) = 0u;
    *(_OWORD *)(v26 + 768) = 0u;
    *(_OWORD *)(v26 + 720) = 0u;
    *(_OWORD *)(v26 + 736) = 0u;
    *(_OWORD *)(v26 + 688) = 0u;
    *(_OWORD *)(v26 + 704) = 0u;
    *(_OWORD *)(v26 + 656) = 0u;
    *(_OWORD *)(v26 + 672) = 0u;
    *(_OWORD *)(v26 + 624) = 0u;
    *(_OWORD *)(v26 + 640) = 0u;
    *(_OWORD *)(v26 + 592) = 0u;
    *(_OWORD *)(v26 + 608) = 0u;
    *(_OWORD *)(v26 + 560) = 0u;
    *(_OWORD *)(v26 + 576) = 0u;
    *(_BYTE *)(v26 + 952) = 0;
    *(_QWORD *)(v26 + 944) = 0;
    *(_OWORD *)(v26 + 928) = 0u;
  }
  *(_DWORD *)(v27 + 924) = 0;
  v55 = re::MeshAsset::assetType((re::MeshAsset *)v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 416))(a2, v27, v55, 0, 2, 0);
  re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)__s);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v113[1].n128_i64[1], v56);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v86, v57);
}

double re::internal::shadows::calcCylShadowProxyLocalTransform@<D0>(float32x2_t *a1@<X0>, float32x4_t *a2@<X1>, _OWORD *a3@<X8>)
{
  float v5;
  uint64_t v6;
  __int128 v7;
  float32x4_t v8;
  unint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[4];
  _OWORD v15[4];

  v5 = re::internal::shadows::calcShadowProxyThicknessInLocalCoord(a1, a2);
  v6 = 0;
  *(_QWORD *)&v7 = 0;
  v8.i32[0] = 0;
  v8.f32[1] = a1->f32[1] * -0.5;
  v8.i32[2] = 0;
  v8.i32[3] = 1.0;
  LODWORD(v9) = 0;
  *((float *)&v9 + 1) = v5;
  *((_QWORD *)&v7 + 1) = LODWORD(v5);
  v14[0] = a1->u32[0];
  v14[1] = v9;
  v14[2] = v7;
  v14[3] = xmmword_2260E5D70;
  do
  {
    v15[v6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(v14[v6])), (float32x4_t)xmmword_2260E5F20, *(float32x2_t *)&v14[v6], 1), (float32x4_t)xmmword_2260E5F40, (float32x4_t)v14[v6], 2), v8, (float32x4_t)v14[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  result = *(double *)v15;
  v11 = v15[1];
  v12 = v15[2];
  v13 = v15[3];
  *a3 = v15[0];
  a3[1] = v11;
  a3[2] = v12;
  a3[3] = v13;
  return result;
}

float re::internal::shadows::calcShadowProxyThicknessInLocalCoord(float32x2_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  BOOL v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;

  v2 = a2[1];
  v3 = a2[2];
  v4 = vmulq_f32(*a2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v2, (int8x16_t)v2, 0xCuLL), (int8x16_t)v2, 8uLL)));
  v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0] <= 0.0;
  v6 = -1.0;
  if (!v5)
    v6 = 1.0;
  v7 = vmulq_f32(*a2, *a2);
  v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)));
  v9 = vmulq_f32(v2, v2);
  v8.f32[0] = sqrtf(v8.f32[0]);
  v10 = vmulq_f32(v3, v3);
  v8.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  v8.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  v12 = vmulq_n_f32(v8, v6);
  v11 = v12.f32[2];
  *(float32x2_t *)v12.f32 = vmul_f32(*a1, *(float32x2_t *)v12.f32);
  if (v12.f32[0] < v12.f32[1])
    v12.f32[0] = v12.f32[1];
  v12.f32[0] = (float)(v12.f32[0] * 0.0039062) * 27.0;
  if (fabsf(v12.f32[2]) <= 0.00000011921)
    v11 = 1.0;
  return v12.f32[0] / v11;
}

float32x4_t *re::ecs2::DynamicBoundingBoxComponent::lastKnownBoundsHelper@<X0>(re::ecs2::DynamicBoundingBoxComponent *this@<X0>, float32x4_t *a2@<X8>)
{
  re::ecs2::EntityComponentCollection *v5;
  float32x4_t *result;
  float32x4_t v7;
  uint32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::MeshBoundingBoxes *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unint64_t v20;
  float32x4_t *v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  _OWORD v30[2];

  v5 = (re::ecs2::DynamicBoundingBoxComponent *)((char *)this + 32);
  result = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::DynamicBoundingBoxComponent *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (!result
    || (v7 = result[22],
        *a2 = result[21],
        a2[1] = v7,
        v8 = (uint32x4_t)vcgtq_f32(*a2, a2[1]),
        v8.i32[3] = v8.i32[2],
        (vmaxvq_u32(v8) & 0x80000000) != 0))
  {
    v9 = *((_QWORD *)this + 22);
    if (v9
      && (result = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v9 + 32))) != 0
      && (v10 = (uint64_t)result, result[27].i64[1]))
    {
      v11 = result[24].i64[1];
      v12 = result[23].i64[1];
      v13 = re::ecs2::EntityComponentCollection::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v13)
      {
        v11 = *(_QWORD *)(v13 + 208);
        v12 = *(_QWORD *)(v13 + 192);
      }
      result = (float32x4_t *)re::ecs2::MeshComponent::updateStaticBoundingBoxData((_QWORD *)v9, *(const re::ecs2::Entity **)(v9 + 16), 0);
      v15 = *(_QWORD *)(v9 + 288);
      if (v15)
        v16 = (re::MeshBoundingBoxes *)(v15 + 80);
      else
        v16 = 0;
      v17 = *((_QWORD *)v16 + 3);
      v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v19.i64[0] = 0x7F0000007FLL;
      v19.i64[1] = 0x7F0000007FLL;
      *a2 = v18;
      a2[1] = v19;
      if (v17)
      {
        v20 = 0;
        while (v12 != v20)
        {
          v28 = v19;
          v29 = v18;
          v21 = (float32x4_t *)re::DataArray<re::MeshInstance>::get(*(_QWORD *)(v10 + 440) + 72, *(_QWORD *)(v11 + 8 * v20));
          v22 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox(v16, v20);
          result = re::AABB::transform(v22, v21 + 2, (uint64_t)v30);
          v24 = v28;
          v23 = v29;
          v23.i32[3] = 0;
          v25 = (float32x4_t)v30[0];
          v26 = (float32x4_t)v30[1];
          v25.i32[3] = 0;
          v24.i32[3] = 0;
          v26.i32[3] = 0;
          v18 = vminnmq_f32(v23, v25);
          v19 = vmaxnmq_f32(v24, v26);
          *a2 = v18;
          a2[1] = v19;
          if (v17 == ++v20)
            return result;
        }
        re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, v12);
        result = (float32x4_t *)_os_crash();
        __break(1u);
      }
    }
    else
    {
      v27.i64[0] = 0x7F0000007FLL;
      v27.i64[1] = 0x7F0000007FLL;
      *(int32x4_t *)a2 = vdupq_n_s32(0x7F800000u);
      a2[1] = v27;
    }
  }
  return result;
}

float32x4_t *re::BoundingSphere::BoundingSphere(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  float32x4_t v5;
  uint32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  __n128 v17[8];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = *(float32x4_t *)(a2 + 16);
  v6 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)a2, v5);
  v6.i32[3] = v6.i32[2];
  v7 = 0uLL;
  if ((vmaxvq_u32(v6) & 0x80000000) == 0)
  {
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    v7 = vmulq_f32(vaddq_f32(*(float32x4_t *)a2, v5), v8);
  }
  v9 = vaddq_f32(a3[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, v7.f32[0]), a3[1], *(float32x2_t *)v7.f32, 1), a3[2], v7, 2));
  *a1 = vdivq_f32(v9, (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 3));
  memset(v17, 0, sizeof(v17));
  re::AABB::extractCorners(a2, v17, 8uLL, (__n128)0);
  v10 = 0;
  v11 = 0.0;
  do
  {
    v12 = vaddq_f32(a3[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a3, COERCE_FLOAT(*(_OWORD *)&v17[v10])), a3[1], (float32x2_t)v17[v10].n128_u64[0], 1), a3[2], (float32x4_t)v17[v10], 2));
    v13 = vsubq_f32(vdivq_f32(v12, (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3)), *a1);
    v14 = vmulq_f32(v13, v13);
    v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0];
    if (v15 >= v11)
      v11 = v15;
    ++v10;
  }
  while (v10 != 8);
  a1->f32[3] = sqrtf(v11);
  return a1;
}

uint64_t re::AABB::extractCorners(uint64_t result, __n128 *a2, unint64_t a3, __n128 a4)
{
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  a4.n128_u64[0] = *(_QWORD *)result;
  a4.n128_u32[2] = *(_DWORD *)(result + 8);
  *a2 = a4;
  if (a3 == 1)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  a4.n128_u32[0] = *(_DWORD *)(result + 16);
  a4.n128_u32[1] = *(_DWORD *)(result + 4);
  a4.n128_u32[2] = *(_DWORD *)(result + 8);
  a2[1] = a4;
  if (a3 <= 2)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  a4.n128_u64[0] = *(_QWORD *)(result + 16);
  a4.n128_u32[2] = *(_DWORD *)(result + 8);
  a2[2] = a4;
  if (a3 == 3)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  a4.n128_u32[0] = *(_DWORD *)result;
  a4.n128_u32[1] = *(_DWORD *)(result + 20);
  a4.n128_u32[2] = *(_DWORD *)(result + 8);
  a2[3] = a4;
  if (a3 <= 4)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 4, 4);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  a4.n128_u64[0] = *(_QWORD *)result;
  a4.n128_u32[2] = *(_DWORD *)(result + 24);
  a2[4] = a4;
  if (a3 == 5)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 5, 5);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  a4.n128_u32[0] = *(_DWORD *)(result + 16);
  a4.n128_u32[1] = *(_DWORD *)(result + 4);
  a4.n128_u32[2] = *(_DWORD *)(result + 24);
  a2[5] = a4;
  if (a3 <= 6)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 6, 6);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  a4.n128_u64[0] = *(_QWORD *)(result + 16);
  a4.n128_u32[2] = *(_DWORD *)(result + 24);
  a2[6] = a4;
  if (a3 != 7)
  {
    a4.n128_u32[0] = *(_DWORD *)result;
    a4.n128_u32[1] = *(_DWORD *)(result + 20);
    a4.n128_u32[2] = *(_DWORD *)(result + 24);
    a2[7] = a4;
    return result;
  }
LABEL_17:
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 7, 7);
  result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 72 * v4 + 16) == v2)
    return 1;
  do
  {
    LODWORD(v4) = *(_DWORD *)(v6 + 72 * v4 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v4 != 0x7FFFFFFF;
  }
  while ((_DWORD)v4 != 0x7FFFFFFF && *(_QWORD *)(v6 + 72 * v4 + 16) != v2);
  return result;
}

uint64_t re::GeomMeshBuilder::setFaceVertices(uint64_t this, unsigned int a2, int a3, int a4, int a5, int a6)
{
  unint64_t v6;
  unint64_t v7;
  _QWORD *v12;
  int *v13;
  int v14;
  int v15;
  int v17;
  unsigned int i;
  re::internal *v19;
  const re::GeomAttribute *v20;
  _DWORD *v21;

  v6 = a2;
  v7 = *(_QWORD *)(this + 32);
  if (v7 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  v12 = (_QWORD *)this;
  v13 = (int *)(*(_QWORD *)(this + 48) + 16 * a2);
  v14 = *v13;
  v15 = v13[3];
  if (v14 != -1 && v15 != -1)
  {
    v17 = *(_DWORD *)(this + 416);
    if (v17)
    {
      for (i = 0; i != v17; ++i)
      {
        v19 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(v12 + 49), i);
        this = re::internal::accessFaceVaryingAttributeSubmesh(v19, v20);
      }
      v7 = v12[4];
    }
  }
  if (v7 <= v6)
  {
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v21 = (_DWORD *)(v12[6] + 16 * v6);
  *v21 = a3;
  v21[1] = a4;
  v21[2] = a5;
  v21[3] = a6;
  return this;
}

re::internal::GeomBaseMesh *re::internal::GeomBaseMesh::GeomBaseMesh(re::internal::GeomBaseMesh *this)
{
  _QWORD *v2;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  re::DynamicArray<re::BlendNode>::setCapacity(v2, 1uLL);
  ++*((_DWORD *)this + 8);
  re::internal::GeomAttributeManager::GeomAttributeManager((re::internal::GeomBaseMesh *)((char *)this + 48));
  return this;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 16) = *a4;
  v13 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9);
  v14 = *a5;
  v15 = a5[1];
  v16 = a5[3];
  v13[4] = a5[2];
  v13[5] = v16;
  v13[2] = v14;
  v13[3] = v15;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v13[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v11 - 8) & 0x80000000) != 0)
            re::HashTable<re::ecs2::Entity const*,re::Matrix4x4<float>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(_QWORD *)(v11 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v11 - 16), v11, v11 + 16);
          v11 += 96;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<int>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<int>(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

_QWORD *re::DynamicArray<re::MeshShadowCluster>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshShadowCluster>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          v2 = 224 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 224 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v17 = *(_OWORD *)(v8 + v10 + 48);
          v18 = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v12 + 4) = *(_OWORD *)(v8 + v10 + 64);
          *((_OWORD *)v12 + 5) = v18;
          *((_OWORD *)v12 + 3) = v17;
          v19 = *(_OWORD *)(v8 + v10 + 96);
          v20 = *(_OWORD *)(v8 + v10 + 112);
          v21 = *(_OWORD *)(v8 + v10 + 144);
          *((_OWORD *)v12 + 8) = *(_OWORD *)(v8 + v10 + 128);
          *((_OWORD *)v12 + 9) = v21;
          *((_OWORD *)v12 + 6) = v19;
          *((_OWORD *)v12 + 7) = v20;
          v22 = *(_OWORD *)(v8 + v10 + 160);
          v23 = *(_OWORD *)(v8 + v10 + 176);
          v24 = *(_OWORD *)(v8 + v10 + 192);
          v12[26] = *(_QWORD *)(v8 + v10 + 208);
          *((_OWORD *)v12 + 11) = v23;
          *((_OWORD *)v12 + 12) = v24;
          *((_OWORD *)v12 + 10) = v22;
          v25 = *(_QWORD *)(v8 + v10);
          if (v25)
          {
            if (*(_QWORD *)(v13 + 32))
              (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
            *(_QWORD *)(v13 + 32) = 0;
            *(_QWORD *)(v13 + 8) = 0;
            *(_QWORD *)(v13 + 16) = 0;
            *(_QWORD *)v13 = 0;
            ++*(_DWORD *)(v13 + 24);
          }
          v10 += 224;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshShadowCluster>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 224 * v4;
        v6 = (_QWORD *)(v3 + 32);
        do
        {
          v7 = *(v6 - 4);
          if (v7)
          {
            if (*v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *v6 = 0;
            *(v6 - 3) = 0;
            *(v6 - 2) = 0;
            *(v6 - 4) = 0;
            ++*((_DWORD *)v6 - 2);
          }
          v6 += 28;
          v5 -= 224;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshShadowCluster>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshShadowCluster>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshShadowCluster>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

re::ecs2::PhysicsSystem *re::ecs2::PhysicsSystem::PhysicsSystem(re::ecs2::PhysicsSystem *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _anonymous_namespace_ *v17;
  uint64_t *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t *v21;
  uint64_t v22;
  _anonymous_namespace_ *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v35;
  _BYTE v36[18];
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1);
  *(_QWORD *)v2 = &off_24ED46838;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 140) = 0x7FFFFFFFLL;
  *(_BYTE *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  v35 = (uint64_t *)(v2 + 192);
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_QWORD *)(v2 + 208) = 0;
  v3 = re::globalAllocators((re *)v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 256, 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = &off_24ED468C0;
  *(_DWORD *)(v4 + 24) = 1;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_DWORD *)(v4 + 144) = 1;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_QWORD *)(v4 + 184) = 0;
  *(_DWORD *)(v4 + 192) = 1;
  *(_OWORD *)(v4 + 225) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_QWORD *)(v4 + 248) = off_24ED68100;
  v5 = re::globalAllocators((re *)v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 280, 8);
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)v6 = &off_24ED46AA8;
  *(_DWORD *)(v6 + 24) = 1;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(v6 + 144) = 1;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_QWORD *)(v6 + 184) = 0;
  *(_DWORD *)(v6 + 192) = 1;
  *(_OWORD *)(v6 + 225) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_QWORD *)(v6 + 248) = &off_24ED5F7D0;
  *(_QWORD *)(v6 + 256) = 0;
  *(_QWORD *)(v6 + 264) = 0;
  *(_QWORD *)(v6 + 272) = 0;
  *(_QWORD *)&v41 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((_QWORD *)&v41 + 1) = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(_QWORD *)v36 = &v41;
  *(_QWORD *)&v36[8] = 2;
  v7 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v6 + 256), (uint64_t)v36);
  v8 = re::globalAllocators(v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 304, 8);
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_OWORD *)(v9 + 184) = 0u;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(_OWORD *)(v9 + 248) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 264) = 0u;
  *(_OWORD *)(v9 + 280) = 0u;
  *(_DWORD *)(v9 + 24) = 1;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_DWORD *)(v9 + 56) = 0;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 128) = 0u;
  *(_DWORD *)(v9 + 144) = 1;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  *(_QWORD *)(v9 + 184) = 0;
  *(_DWORD *)(v9 + 192) = 1;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 225) = 0u;
  *(_QWORD *)(v9 + 248) = off_24ED47AE8;
  *(_QWORD *)v9 = &off_24ED47B50;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_QWORD *)(v9 + 288) = 0x7FFFFFFF00000000;
  *(_QWORD *)(v9 + 296) = 0;
  v10 = re::globalAllocators((re *)v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 280, 8);
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = &off_24ED46C90;
  *(_DWORD *)(v11 + 24) = 1;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_DWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_DWORD *)(v11 + 144) = 1;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_QWORD *)(v11 + 184) = 0;
  *(_DWORD *)(v11 + 192) = 1;
  *(_OWORD *)(v11 + 225) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_QWORD *)(v11 + 248) = &off_24ED6A740;
  *(_QWORD *)(v11 + 256) = 0;
  *(_QWORD *)(v11 + 264) = 0;
  *(_QWORD *)(v11 + 272) = 0;
  *(_QWORD *)&v41 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((_QWORD *)&v41 + 1) = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(_QWORD *)&v42 = re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(_QWORD *)v36 = &v41;
  *(_QWORD *)&v36[8] = 3;
  v12 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v11 + 256), (uint64_t)v36);
  v13 = re::globalAllocators(v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 256, 8);
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)v14 = &off_24ED46E78;
  *(_DWORD *)(v14 + 24) = 1;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_DWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_DWORD *)(v14 + 144) = 1;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_QWORD *)(v14 + 184) = 0;
  *(_DWORD *)(v14 + 192) = 1;
  *(_OWORD *)(v14 + 225) = 0u;
  *(_OWORD *)(v14 + 216) = 0u;
  *(_OWORD *)(v14 + 200) = 0u;
  *(_QWORD *)(v14 + 248) = off_24ED48790;
  v15 = re::globalAllocators((re *)v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 280, 8);
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 232) = 0u;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)v16 = &off_24ED47060;
  *(_DWORD *)(v16 + 24) = 1;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_DWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 112) = 0u;
  *(_OWORD *)(v16 + 128) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_DWORD *)(v16 + 144) = 1;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_QWORD *)(v16 + 184) = 0;
  *(_DWORD *)(v16 + 192) = 1;
  *(_OWORD *)(v16 + 225) = 0u;
  *(_OWORD *)(v16 + 216) = 0u;
  *(_OWORD *)(v16 + 200) = 0u;
  *(_QWORD *)(v16 + 248) = off_24ED47720;
  *(_QWORD *)(v16 + 256) = 0;
  *(_QWORD *)(v16 + 264) = 0;
  *(_QWORD *)(v16 + 272) = 0;
  *(_QWORD *)&v41 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((_QWORD *)&v41 + 1) = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(_QWORD *)v36 = &v41;
  *(_QWORD *)&v36[8] = 2;
  v17 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v16 + 256), (uint64_t)v36);
  v18 = re::globalAllocators(v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 280, 8);
  *(_OWORD *)(v19 + 24) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(_OWORD *)(v19 + 168) = 0u;
  *(_OWORD *)(v19 + 184) = 0u;
  *(_OWORD *)(v19 + 200) = 0u;
  *(_OWORD *)(v19 + 216) = 0u;
  *(_OWORD *)(v19 + 232) = 0u;
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)v19 = &off_24ED47248;
  *(_DWORD *)(v19 + 24) = 1;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_DWORD *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  *(_OWORD *)(v19 + 112) = 0u;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_DWORD *)(v19 + 144) = 1;
  *(_OWORD *)(v19 + 168) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  *(_QWORD *)(v19 + 184) = 0;
  *(_DWORD *)(v19 + 192) = 1;
  *(_OWORD *)(v19 + 225) = 0u;
  *(_OWORD *)(v19 + 216) = 0u;
  *(_OWORD *)(v19 + 200) = 0u;
  *(_QWORD *)(v19 + 248) = off_24ED47760;
  *(_QWORD *)(v19 + 256) = 0;
  *(_QWORD *)(v19 + 264) = 0;
  *(_QWORD *)(v19 + 272) = 0;
  *(_QWORD *)&v41 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((_QWORD *)&v41 + 1) = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(_QWORD *)v36 = &v41;
  *(_QWORD *)&v36[8] = 2;
  v20 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v19 + 256), (uint64_t)v36);
  v21 = re::globalAllocators(v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 280, 8);
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 88) = 0u;
  *(_OWORD *)(v22 + 104) = 0u;
  *(_OWORD *)(v22 + 120) = 0u;
  *(_OWORD *)(v22 + 136) = 0u;
  *(_OWORD *)(v22 + 152) = 0u;
  *(_OWORD *)(v22 + 168) = 0u;
  *(_OWORD *)(v22 + 184) = 0u;
  *(_OWORD *)(v22 + 200) = 0u;
  *(_OWORD *)(v22 + 216) = 0u;
  *(_OWORD *)(v22 + 232) = 0u;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)v22 = &off_24ED47430;
  *(_DWORD *)(v22 + 24) = 1;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_DWORD *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 48) = 0;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_DWORD *)(v22 + 144) = 1;
  *(_OWORD *)(v22 + 168) = 0u;
  *(_OWORD *)(v22 + 152) = 0u;
  *(_QWORD *)(v22 + 184) = 0;
  *(_DWORD *)(v22 + 192) = 1;
  *(_OWORD *)(v22 + 225) = 0u;
  *(_OWORD *)(v22 + 216) = 0u;
  *(_OWORD *)(v22 + 200) = 0u;
  *(_QWORD *)(v22 + 248) = off_24ED477A0;
  *(_QWORD *)(v22 + 256) = 0;
  *(_QWORD *)(v22 + 264) = 0;
  *(_QWORD *)(v22 + 272) = 0;
  *(_QWORD *)&v41 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *((_QWORD *)&v41 + 1) = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  *(_QWORD *)v36 = &v41;
  *(_QWORD *)&v36[8] = 2;
  v23 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v22 + 256), (uint64_t)v36);
  v24 = re::globalAllocators(v23);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 264, 8);
  v27 = v25;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 72) = 0u;
  *(_OWORD *)(v25 + 88) = 0u;
  *(_OWORD *)(v25 + 104) = 0u;
  *(_OWORD *)(v25 + 120) = 0u;
  *(_OWORD *)(v25 + 136) = 0u;
  *(_OWORD *)(v25 + 152) = 0u;
  *(_OWORD *)(v25 + 168) = 0u;
  *(_OWORD *)(v25 + 184) = 0u;
  *(_OWORD *)(v25 + 200) = 0u;
  *(_OWORD *)(v25 + 216) = 0u;
  *(_OWORD *)(v25 + 232) = 0u;
  *(_DWORD *)(v25 + 24) = 1;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 112) = 0u;
  *(_OWORD *)(v25 + 128) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_DWORD *)(v25 + 144) = 1;
  *(_QWORD *)(v25 + 184) = 0;
  *(_OWORD *)(v25 + 168) = 0u;
  *(_OWORD *)(v25 + 152) = 0u;
  *(_DWORD *)(v25 + 192) = 1;
  *(_OWORD *)(v25 + 225) = 0u;
  *(_OWORD *)(v25 + 200) = 0u;
  *(_OWORD *)(v25 + 216) = 0u;
  *(_QWORD *)v25 = &off_24ED45CF0;
  *(_QWORD *)(v25 + 248) = off_24ED70288;
  *(_QWORD *)(v25 + 256) = 0;
  if (!*((_QWORD *)this + 21))
  {
    *((_QWORD *)this + 22) = 9;
    *((_QWORD *)this + 23) = v25;
    if (!v25)
      goto LABEL_12;
    *(_QWORD *)(v25 + 64) = 0;
    *(_OWORD *)(v25 + 32) = 0u;
    *(_OWORD *)(v25 + 48) = 0u;
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
  }
  if (*((_QWORD *)this + 22) != 9)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)4, v26, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  v28 = (uint64_t *)*((_QWORD *)this + 23);
  *v28 = v4;
  v28[1] = v6;
  v28[2] = v9;
  v28[3] = v11;
  v28[4] = v14;
  v28[5] = v16;
  v28[6] = v19;
  v28[7] = v22;
  v28[8] = v27;
  v29 = *((_QWORD *)this + 22);
  if (*((_QWORD *)this + 22))
  {
    v30 = 0;
    while (1)
    {
      v31 = *(_QWORD *)(*((_QWORD *)this + 23) + 8 * v30);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      v33 = *((_QWORD *)this + 25);
      if (v33 <= v30)
        break;
      *(_QWORD *)(*((_QWORD *)this + 26) + 8 * v30++) = v32;
      if (v30 >= *((_QWORD *)this + 22))
        return this;
    }
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v36 = 136315906;
    *(_QWORD *)&v36[4] = "operator[]";
    *(_WORD *)&v36[12] = 1024;
    *(_DWORD *)&v36[14] = 468;
    v37 = 2048;
    v38 = v30;
    v39 = 2048;
    v40 = v33;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  return this;
}

void re::ecs2::PhysicsSystem::~PhysicsSystem(re::ecs2::PhysicsSystem *this)
{
  re::ecs2::PhysicsSystem *v1;
  uint64_t v2;
  _QWORD *v3;
  void (****v4)(_QWORD);
  uint64_t v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  v3 = (_QWORD *)((char *)this + 176);
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v4 = (void (****)(_QWORD))*((_QWORD *)this + 23);
    v5 = 8 * v2;
    do
    {
      v6 = *v4;
      if (*v4)
      {
        v7 = re::globalAllocators(this)[2];
        (**v6)(v6);
        this = (re::ecs2::PhysicsSystem *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v7 + 40))(v7, v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = *((_QWORD *)v1 + 24);
  if (v8)
  {
    if (*((_QWORD *)v1 + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)v1 + 26));
      *((_QWORD *)v1 + 25) = 0;
      *((_QWORD *)v1 + 26) = 0;
    }
    *((_QWORD *)v1 + 24) = 0;
  }
  v9 = *((_QWORD *)v1 + 21);
  if (v9)
  {
    if (*v3)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)v1 + 23));
      *v3 = 0;
      v3[1] = 0;
    }
    *((_QWORD *)v1 + 21) = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v1 + 13);
  *(_QWORD *)v1 = &off_24ED426B8;
  objc_destructInstance((char *)v1 + 8);
}

{
  re::ecs2::PhysicsSystem::~PhysicsSystem(this);
  JUMPOUT(0x2276933B8);
}

const re::ecs2::Scene *re::ecs2::PhysicsSystem::ensureSimulationUpdatedWithECS(const re::ecs2::Scene *this, const re::ecs2::Scene *a2)
{
  uint64_t v2;
  const re::ecs2::Scene *v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  re::ecs2::PhysicsSystem **v8;
  uint64_t v9;
  uint64_t v10;
  re::ecs2::PhysicsSystem **v11;
  re::ecs2::PhysicsSystem *v12;
  __int128 v13;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = this;
    v4 = (*(uint64_t (**)(_QWORD, const re::ecs2::Scene *))(*(_QWORD *)v2 + 32))(*((_QWORD *)this + 7), a2);
    this = (const re::ecs2::Scene *)re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v4);
    if (this)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 200))(v2);
      if ((v5 & 1) == 0
      {
        re::introspect<re::ecs2::PhysicsSystem>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"PhysicsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSystem>, 0);
      }
      v13 = *((_OWORD *)re::introspect<re::ecs2::PhysicsSystem>(void)::info + 2);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      this = (const re::ecs2::Scene *)re::ecs2::SystemCollection::getSystemsForTypeID(v6, (uint64_t)&v13);
      if (v7)
      {
        v8 = (re::ecs2::PhysicsSystem **)this;
        v9 = 8 * v7;
        v10 = 8 * v7;
        v11 = (re::ecs2::PhysicsSystem **)this;
        while (1)
        {
          v12 = *v11;
          this = (const re::ecs2::Scene *)(*(uint64_t (**)(uint64_t, re::ecs2::PhysicsSystem *))(*(_QWORD *)v2 + 96))(v2, *v11);
          if (this == v3)
            break;
          ++v11;
          v10 -= 8;
          if (!v10)
          {
            while (1)
            {
              v12 = *v8;
              this = (const re::ecs2::Scene *)(*(uint64_t (**)(uint64_t, re::ecs2::PhysicsSystem *))(*(_QWORD *)v2 + 96))(v2, *v8);
              if (!this)
                break;
              ++v8;
              v9 -= 8;
              if (!v9)
                return this;
            }
            break;
          }
        }
        if (*((_QWORD *)v12 + 20))
          return (const re::ecs2::Scene *)re::ecs2::PhysicsSystem::ecsToSim(v12, v3, 0);
      }
    }
  }
  return this;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::PhysicsSimulationService>(void)::info = re::ecs2::introspect_PhysicsSimulationService(0);
  }
  v3 = re::introspect<re::ecs2::PhysicsSimulationService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ecs2::SystemCollection::getSystemsForTypeID(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::tryGet(a1 + 56, a2);
  if (result)
  {
    if ((*(_BYTE *)(result + 16) & 1) != 0)
      result += 24;
    else
      return *(_QWORD *)(result + 32);
  }
  return result;
}

uint64_t re::ecs2::PhysicsSystem::ecsToSim(re::ecs2::PhysicsSystem *this, const re::ecs2::Scene *a2, re::PhysicsSimulation *a3)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20), 1);
  v6 = (*(uint64_t (**)(_QWORD, const re::ecs2::Scene *))(**((_QWORD **)this + 20) + 32))(*((_QWORD *)this + 20), a2);
  if (v6)
  {
    v7 = v6;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v18, v6, 0);
    v8 = v7 == v18 && (unsigned __int16)v19 == 0xFFFFLL;
    if (!v8 || (v19 & 0xFFFF0000) != 4294901760)
    {
      do
      {
        v10 = *(_QWORD *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v18)
                        + 8);
        if (v10)
          re::PhysicsSimulation::deleteConstraintsMarkedForDeletion(v10);
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v18);
      }
      while (v18 != v7 || (unsigned __int16)v19 != 0xFFFF || WORD1(v19) != 0xFFFF);
    }
  }
  v13 = *((_QWORD *)this + 22);
  if (v13)
  {
    v14 = (uint64_t *)*((_QWORD *)this + 23);
    v15 = 8 * v13;
    do
    {
      v16 = *v14++;
      (*(void (**)(uint64_t, const re::ecs2::Scene *, re::PhysicsSimulation *))(*(_QWORD *)v16 + 56))(v16, a2, a3);
      v15 -= 8;
    }
    while (v15);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 20) + 48))(*((_QWORD *)this + 20));
}

void re::ecs2::PhysicsSystem::willAddSystemToECSService(re::ecs2::PhysicsSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  re *v11;
  const char *v12;
  NSObject *v13;
  const char *v14;
  re *v15;
  NSObject *v16;
  _BYTE v17[4];
  int v18;
  char v19[2];
  __int128 buf;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v2);
  *((_QWORD *)this + 20) = v3;
  if (v3)
  {
    v4 = *((_QWORD *)this + 22);
    if (v4)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 23);
      v6 = 8 * v4;
      do
      {
        v7 = *v5++;
        (*(void (**)(uint64_t, re::ecs2::PhysicsSystem *))(*(_QWORD *)v7 + 24))(v7, this);
        v6 -= 8;
      }
      while (v6);
    }
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    v9 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v8);
    if (v9)
    {
      *(_QWORD *)&buf = this;
      *((_QWORD *)&buf + 1) = re::ecs2::PhysicsSystem::onComponentUpdated;
      v21 = 0;
      v22 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::PhysicsSystem>(re::ecs2::PhysicsSystem *,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v9 + 352), (uint64_t)&buf);
    }
    re::Defaults::BOOLValue((re::Defaults *)"disableNonAuthoritativePhysics", v10, v19);
    if (v19[0])
    {
      re::ecs2::PhysicsSystem::s_disableNonAuthoritativePhysics = v19[1];
      v13 = *re::physicsLogObjects(v11);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        if (re::ecs2::PhysicsSystem::s_disableNonAuthoritativePhysics)
          v14 = "true";
        else
          v14 = "false";
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v14;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_INFO, "disableNonAuthoritativePhysics overriden via Defaults (%s)", (uint8_t *)&buf, 0xCu);
      }
    }
    re::Defaults::floatValue((re::Defaults *)"networkPhysicsInterpStep", v12, (uint64_t)v17);
    if (v17[0])
    {
      re::ecs2::PhysicsSystem::s_networkInterpStep = v18;
      v16 = *re::physicsLogObjects(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 134217984;
        *(double *)((char *)&buf + 4) = *(float *)&re::ecs2::PhysicsSystem::s_networkInterpStep;
        _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_INFO, "networkPhysicsInterpStep overriden via Defaults (%f)", (uint8_t *)&buf, 0xCu);
      }
    }
  }
}

uint64_t re::ecs2::PhysicsSystem::onComponentUpdated(re::ecs2::PhysicsSystem *this, re::NetworkSystem *a2, re::ecs2::Component *a3)
{
  uint64_t v4;
  uint64_t v5;
  __guard *v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __guard *v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *i;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v27;
  uint64_t v28;

  if (!*((_QWORD *)a3 + 2))
    return 0;
  v4 = (*(uint64_t (**)(re::ecs2::Component *, re::NetworkSystem *))(*(_QWORD *)a3 + 40))(a3, a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  do
  {
    if ((v7 & 1) == 0)
    {
      v27 = v5;
      v12 = v11;
      v5 = v27;
      if (v12)
      {
        re::introspect<re::ecs2::TransformComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_TransformComponent(0);
        v5 = v27;
      }
    }
    if (v5 == v6[377])
    {
      v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((_QWORD *)a3 + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v22)
      {
        v23 = *((_OWORD *)a3 + 2);
        v24 = *((_OWORD *)a3 + 4);
        *(_OWORD *)(v22 + 48) = *((_OWORD *)a3 + 3);
        *(_OWORD *)(v22 + 64) = v24;
        *(_OWORD *)(v22 + 32) = v23;
LABEL_37:
        re::ecs2::Component::markDirty((_QWORD *)v22);
        return 0;
      }
      v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((_QWORD *)a3 + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!v22)
        return 0;
      v25 = *(_DWORD *)(v22 + 124) + 1;
LABEL_36:
      *(_DWORD *)(v22 + 124) = v25;
      goto LABEL_37;
    }
    v8 = *(unsigned int *)(v5 + 56);
    if (!(_DWORD)v8)
      break;
    v9 = *(_QWORD **)(v5 + 64);
    while (1)
    {
      v10 = (_DWORD *)*v9;
      if (*(_DWORD *)*v9 == 1 && v10[10] == 3)
        break;
      ++v9;
      if (!--v8)
        goto LABEL_15;
    }
    v5 = *((_QWORD *)v10 + 2);
  }
  while (v5);
LABEL_15:
  if (*((_QWORD *)a3 + 2))
  {
    v13 = (*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)a3 + 40))(a3);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
    while (1)
    {
      if ((v16 & 1) == 0)
      {
        v28 = v14;
        v21 = v20;
        v14 = v28;
        if (v21)
        {
          re::introspect<re::ecs2::MotionStateComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_MotionStateComponent(0);
          v14 = v28;
        }
      }
      if (v14 == v15[379])
        break;
      v17 = *(unsigned int *)(v14 + 56);
      if ((_DWORD)v17)
      {
        for (i = *(_QWORD **)(v14 + 64); ; ++i)
        {
          v19 = (_DWORD *)*i;
          if (*(_DWORD *)*i == 1 && v19[10] == 3)
            break;
          if (!--v17)
            return 0;
        }
        v14 = *((_QWORD *)v19 + 2);
        if (v14)
          continue;
      }
      return 0;
    }
    v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((_QWORD *)a3 + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v22)
    {
      v25 = *((unsigned __int8 *)a3 + 80);
      if (*(_DWORD *)(v22 + 124) != v25)
        goto LABEL_36;
    }
  }
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::willAddSceneToECSService(re::ecs2::PhysicsSystem *this, unint64_t a2)
{
  uint64_t result;
  re *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  re::EventBus *v10;
  re *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re *v16;
  re *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  re *v22;
  re *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  re *v28;
  re *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  re *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  re *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  re *v44;
  re *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  _BYTE v62[24];
  uint64_t v63;
  re *v64;
  _BYTE v65[24];
  uint64_t v66;
  re *v67;
  _QWORD v68[2];
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  re *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  result = *((_QWORD *)this + 20);
  if (!result)
    return result;
  v5 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  v6 = *((_QWORD *)this + 22);
  if (v6)
  {
    v7 = (uint64_t *)*((_QWORD *)this + 23);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      v5 = (re *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v9 + 40))(v9, a2);
      v8 -= 8;
    }
    while (v8);
  }
  v61 = a2;
  v55[0] = 0;
  v55[1] = 0;
  v56 = 1;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v60 = 0;
  v10 = *(re::EventBus **)(a2 + 288);
  if (v10)
  {
    v79 = re::globalAllocators(v5)[2];
    v11 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v11 = &off_24ED47618;
    *((_QWORD *)v11 + 1) = this;
    *((_QWORD *)v11 + 2) = re::ecs2::PhysicsSystem::onPhysicsOriginActivated;
    *((_QWORD *)v11 + 3) = 0;
    v80 = v11;
    v12 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v10, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v14 = v13;
    v15 = (_QWORD *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v55);
    *v15 = v12;
    v15[1] = v14;
    v16 = v80;
    if (v80)
    {
      v16 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v16 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v16)[2];
    v17 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v17 = &off_24ED47670;
    *((_QWORD *)v17 + 1) = this;
    *((_QWORD *)v17 + 2) = re::ecs2::PhysicsSystem::onPhysicsOriginDeactivated;
    *((_QWORD *)v17 + 3) = 0;
    v77 = v17;
    v18 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v10, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v20 = v19;
    v21 = (_QWORD *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v55);
    *v21 = v18;
    v21[1] = v20;
    v22 = v77;
    if (v77)
    {
      v22 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v22 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v22)[2];
    v23 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *(_QWORD *)v23 = &off_24ED47670;
    *((_QWORD *)v23 + 1) = this;
    *((_QWORD *)v23 + 2) = re::ecs2::PhysicsSystem::onDeactivatePhysicsSubsystemComponent;
    *((_QWORD *)v23 + 3) = 0;
    v74 = v23;
    v24 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v10, (uint64_t)v72, 0, 0);
    v26 = v25;
    v27 = (_QWORD *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v55);
    *v27 = v24;
    v27[1] = v26;
    v28 = v74;
    if (v74)
    {
      v28 = (re *)(**(uint64_t (***)(re *))v74)(v74);
      if (v74 != (re *)v72)
        v28 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    v70 = re::globalAllocators(v28)[2];
    v29 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
    *(_QWORD *)v29 = &off_24ED476C8;
    *((_QWORD *)v29 + 1) = this;
    *((_QWORD *)v29 + 2) = re::ecs2::PhysicsSystem::onEntityReparented;
    *((_QWORD *)v29 + 3) = 0;
    v71 = v29;
    v30 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v10, 0, (uint64_t)v69, 0, 0);
    v32 = v31;
    v33 = (_QWORD *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v55);
    *v33 = v30;
    v33[1] = v32;
    v34 = v71;
    if (v71)
    {
      v34 = (re *)(**(uint64_t (***)(re *))v71)(v71);
      if (v71 != (re *)v69)
        v34 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
      v71 = 0;
    }
    v35 = 0;
    v36 = 0;
    v68[0] = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    v68[1] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    do
    {
      v37 = v35;
      v38 = v68[v36];
      v66 = re::globalAllocators(v34)[2];
      v67 = 0;
      v39 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v66 + 32))(v66, 32, 0);
      *(_QWORD *)v39 = &off_24ED47618;
      *((_QWORD *)v39 + 1) = this;
      *((_QWORD *)v39 + 2) = re::ecs2::PhysicsSystem::onPhysicsSimulationRootActivationChanged<REComponentDidActivateEvent>;
      *((_QWORD *)v39 + 3) = 0;
      v67 = v39;
      v40 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v10, (uint64_t)v65, v38, 0);
      v42 = v41;
      v43 = (_QWORD *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v55);
      *v43 = v40;
      v43[1] = v42;
      v44 = v67;
      if (v67)
      {
        v44 = (re *)(**(uint64_t (***)(re *))v67)(v67);
        if (v67 != (re *)v65)
          v44 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 40))(v66);
        v67 = 0;
      }
      v63 = re::globalAllocators(v44)[2];
      v64 = 0;
      v45 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 32, 0);
      *(_QWORD *)v45 = &off_24ED47670;
      *((_QWORD *)v45 + 1) = this;
      *((_QWORD *)v45 + 2) = re::ecs2::PhysicsSystem::onPhysicsSimulationRootActivationChanged<REComponentWillDeactivateEvent>;
      *((_QWORD *)v45 + 3) = 0;
      v64 = v45;
      v46 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v10, (uint64_t)v62, v38, 0);
      v48 = v47;
      v49 = (_QWORD *)re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized((uint64_t)v55);
      *v49 = v46;
      v49[1] = v48;
      v34 = v64;
      if (v64)
      {
        v34 = (re *)(**(uint64_t (***)(re *))v64)(v64);
        if (v64 != (re *)v62)
          v34 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
        v64 = 0;
      }
      v35 = 1;
      v36 = 1;
    }
    while ((v37 & 1) == 0);
    v50 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v51 = v50 ^ (v50 >> 31);
    if (*((_QWORD *)this + 13))
    {
      v52 = v51 % *((unsigned int *)this + 32);
      v53 = *(unsigned int *)(*((_QWORD *)this + 14) + 4 * v52);
      if ((_DWORD)v53 != 0x7FFFFFFF)
      {
        v54 = *((_QWORD *)this + 15);
        if (*(_QWORD *)(v54 + 80 * v53 + 16) == a2)
          goto LABEL_40;
        while (1)
        {
          LODWORD(v53) = *(_DWORD *)(v54 + 80 * v53 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v53 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v54 + 80 * v53 + 16) == a2)
            goto LABEL_40;
        }
      }
    }
    else
    {
      LODWORD(v52) = 0;
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove((uint64_t)this + 104, v52, v51, &v61, (uint64_t)v55);
    ++*((_DWORD *)this + 36);
  }
LABEL_40:
  re::BucketArray<RESubscriptionHandle,16ul>::deinit((uint64_t)v55);
  result = v55[0];
  if (v55[0])
  {
    if ((v56 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v55[0] + 40))();
  }
  return result;
}

uint64_t re::ecs2::PhysicsSystem::onPhysicsOriginActivated(re::ecs2::PhysicsSystem *a1, uint64_t a2)
{
  uint64_t v2;

  do
  {
    v2 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  re::ecs2::PhysicsSystem::onPhysicsOriginChanged(a1, *(const re::ecs2::Scene **)(v2 + 16), 0);
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onPhysicsOriginDeactivated(re::ecs2::PhysicsSystem *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const re::ecs2::Scene *v5;
  re::ecs2::PhysicsOriginComponent *v6;

  v3 = a2;
  do
  {
    v4 = v3;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (v3);
  v5 = *(const re::ecs2::Scene **)(v4 + 16);
  v6 = (re::ecs2::PhysicsOriginComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::ecs2::PhysicsSystem::onPhysicsOriginChanged(a1, v5, v6);
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onDeactivatePhysicsSubsystemComponent(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[22];
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      if (a1[25] == v4)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_QWORD *)(a3 + 8) == *(_QWORD *)(a1[26] + 8 * v4))
        break;
      if (v3 == ++v4)
        return 0;
    }
    v5 = *(_QWORD *)(a1[23] + 8 * v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5);
  }
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onEntityReparented(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  re::ecs2::RigidBodyComponent *v5;
  re::ecs2::RigidBodyComponent *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (re::ecs2::RigidBodyComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3[1] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v5)
  {
    v6 = v5;
    re::ecs2::RigidBodyComponent::teleport(v5);
    re::ecs2::Component::markDirty(v6);
  }
  v7 = a1[20];
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, 1);
    v8 = *a3;
    v9 = a3[1];
    v10 = *(_QWORD *)(v9 + 24);
    v11 = re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(a1[20], v8);
    if (v11 != re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(a1[20], v10))
    {
      v12 = a1[22];
      if (v12)
      {
        v13 = (uint64_t *)a1[23];
        v14 = 8 * v12;
        do
        {
          v15 = *v13++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 80))(v15, v9);
          v14 -= 8;
        }
        while (v14);
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onPhysicsSimulationRootActivationChanged<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a2 + 371))
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (v2)
    {
      v4 = *(uint64_t **)(a1 + 184);
      v5 = 8 * v2;
      do
      {
        v6 = *v4++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, a2);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::PhysicsSystem::onPhysicsSimulationRootActivationChanged<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a2 + 371))
  {
    v2 = *(_QWORD *)(a1 + 176);
    if (v2)
    {
      v4 = *(uint64_t **)(a1 + 184);
      v5 = 8 * v2;
      do
      {
        v6 = *v4++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, a2);
        v5 -= 8;
      }
      while (v5);
    }
  }
  return 0;
}

void re::ecs2::PhysicsSystem::willRemoveSystemFromECSService(re::ecs2::PhysicsSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  re::ecs2::PhysicsSystem **v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[8];
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v2);
  if (v3)
  {
    v4 = v3;
    if (*(_QWORD *)(v3 + 368))
    {
      v5 = 0;
      do
      {
        v6 = (re::ecs2::PhysicsSystem **)(*(_QWORD *)(v4 + 384) + 32 * v5);
        if (*v6 == this)
        {
          if (!*(_DWORD *)(v4 + 432))
          {
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)(v4 + 352), v5);
            continue;
          }
          v12[0] = 0;
          v7 = *((_OWORD *)v6 + 1);
          v13 = *(_OWORD *)v6;
          v14 = v7;
          re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)(v4 + 392), (uint64_t)v12);
        }
        ++v5;
      }
      while (v5 < *(_QWORD *)(v4 + 368));
    }
  }
  *((_QWORD *)this + 20) = 0;
  v8 = *((_QWORD *)this + 22);
  if (v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 23);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      v10 -= 8;
    }
    while (v10);
  }
}

uint64_t re::ecs2::PhysicsSystem::willRemoveSceneFromECSService(re::ecs2::PhysicsSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;

  v4 = *((_QWORD *)this + 22);
  if (v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 23);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      (*(void (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)v7 + 48))(v7, a2);
      v6 -= 8;
    }
    while (v6);
  }
  result = *((_QWORD *)this + 20);
  if (result)
    result = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)result + 72))(result, a2);
  if (*((_QWORD *)this + 13))
  {
    v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    v10 = v9 ^ (v9 >> 31);
    v11 = v10 % *((unsigned int *)this + 32);
    v12 = *((_QWORD *)this + 14);
    v13 = *(unsigned int *)(v12 + 4 * v11);
    if ((_DWORD)v13 != 0x7FFFFFFF)
    {
      v14 = *((_QWORD *)this + 15);
      if (*(re::ecs2::Scene **)(v14 + 80 * v13 + 16) == a2)
      {
LABEL_11:
        v15 = *((_QWORD *)a2 + 36);
        if (v15)
        {
          v16 = *(_QWORD *)(v14 + 80 * v13 + 64);
          if (v16)
          {
            v17 = 0;
            v18 = v14 + 80 * v13 + 24;
            do
            {
              v19 = re::BucketArray<RESubscriptionHandle,16ul>::operator[](v18, v17);
              result = re::EventBus::unsubscribe(v15, *(_QWORD *)v19, *(_QWORD *)(v19 + 8));
              ++v17;
            }
            while (v16 != v17);
            if (!*((_QWORD *)this + 13))
              return result;
            v12 = *((_QWORD *)this + 14);
            v11 = v10 % *((unsigned int *)this + 32);
          }
        }
        v20 = *(unsigned int *)(v12 + 4 * v11);
        if ((_DWORD)v20 != 0x7FFFFFFF)
        {
          v21 = *((_QWORD *)this + 15);
          if (*(re::ecs2::Scene **)(v21 + 80 * v20 + 16) == a2)
          {
            *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)(v21 + 80 * v20 + 8) & 0x7FFFFFFF;
LABEL_23:
            result = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(*((_QWORD *)this + 15) + 80 * v20);
            v24 = *((_DWORD *)this + 36);
            *(_DWORD *)(*((_QWORD *)this + 15) + 80 * v20 + 8) = *(_DWORD *)(*((_QWORD *)this + 15) + 80 * v20 + 8) & 0x80000000 | *((_DWORD *)this + 35);
            --*((_DWORD *)this + 33);
            *((_DWORD *)this + 35) = v20;
            *((_DWORD *)this + 36) = v24 + 1;
          }
          else
          {
            while (1)
            {
              v22 = v20;
              v23 = *(_DWORD *)(v21 + 80 * v20 + 8);
              v20 = v23 & 0x7FFFFFFF;
              if ((v23 & 0x7FFFFFFF) == 0x7FFFFFFF)
                break;
              if (*(re::ecs2::Scene **)(v21 + 80 * v20 + 16) == a2)
              {
                *(_DWORD *)(v21 + 80 * v22 + 8) = *(_DWORD *)(v21 + 80 * v22 + 8) & 0x80000000 | *(_DWORD *)(v21 + 80 * v20 + 8) & 0x7FFFFFFF;
                goto LABEL_23;
              }
            }
          }
        }
      }
      else
      {
        while (1)
        {
          LODWORD(v13) = *(_DWORD *)(v14 + 80 * v13 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v13 == 0x7FFFFFFF)
            break;
          if (*(re::ecs2::Scene **)(v14 + 80 * v13 + 16) == a2)
            goto LABEL_11;
        }
      }
    }
  }
  return result;
}

void re::ecs2::PhysicsSystem::onPhysicsOriginChanged(re::ecs2::PhysicsSystem *this, const re::ecs2::Scene *a2, re::ecs2::PhysicsOriginComponent *a3)
{
  uint64_t v5;
  uint64_t v6;
  re::ecs2::PhysicsOriginComponent **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  simd_float4 v15;
  __int128 v16;
  __int128 v17;
  simd_float4 v18;
  simd_float4 v19;
  simd_float4 v20;
  simd_float4 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t i;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  simd_float4 *v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::TransformComponent *v47;
  simd_float4 *v48;
  simd_float4 v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  re::ecs2::TransformComponent *v80;
  simd_float4 *v81;
  simd_float4 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float32x2_t **v86;
  uint64_t v87;
  float32x2_t *v88;
  unint64_t v89;
  uint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v97;
  re::ecs2::PhysicsSystem *v100;
  const re::ecs2::Scene *v101;
  simd_float4 v102;
  simd_float4 v103;
  simd_float4 v104;
  simd_float4 v105;
  uint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  unsigned int v111;
  simd_float4 v112;
  float32x4_t v113[4];
  simd_float4x4 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  uint64_t v118;
  _BYTE v119[120];
  re::ecs2::PhysicsOriginComponent *v120;
  float32x4_t v121;
  simd_float4 v122;
  __int128 v123;
  __int128 v124;
  simd_float4x4 v125;
  simd_float4x4 v126;

  v120 = a3;
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 56))(*((_QWORD *)this + 20), 1);
  v5 = (*(uint64_t (**)(_QWORD, const re::ecs2::Scene *))(**((_QWORD **)this + 20) + 32))(*((_QWORD *)this + 20), a2);
  if (v5)
  {
    v6 = v5;
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v119);
    v117 = 0;
    v115 = 0u;
    v116 = 0u;
    v118 = 0x7FFFFFFFLL;
    if (v120)
      v7 = &v120;
    else
      v7 = 0;
    re::internal::findPhysicsOrigin((uint64_t)a2, v7, v120 != 0, &v125);
    v114 = v125;
    v126 = __invert_f4(v125);
    v109 = (float32x4_t)v126.columns[1];
    v110 = (float32x4_t)v126.columns[0];
    v113[0] = (float32x4_t)v126.columns[0];
    v113[1] = (float32x4_t)v126.columns[1];
    v107 = (float32x4_t)v126.columns[3];
    v108 = (float32x4_t)v126.columns[2];
    v113[2] = (float32x4_t)v126.columns[2];
    v113[3] = (float32x4_t)v126.columns[3];
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v125, v6, 0);
    v112 = v125.columns[0];
    if (v6 != v125.columns[0].i64[0]
      || v125.columns[0].u16[4] != 0xFFFFLL
      || (v125.columns[0].i32[2] & 0xFFFF0000) != 0xFFFF0000)
    {
      v100 = this;
      v101 = a2;
      v106 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v111 = 0;
      do
      {
        v12 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v112);
        if (!re::areAlmostEqual<float>((float *)(v12 + 112), (float *)&v114))
        {
          v13 = v6;
          v14 = 0;
          v15 = *(simd_float4 *)(v12 + 128);
          v16 = *(_OWORD *)(v12 + 144);
          v17 = *(_OWORD *)(v12 + 160);
          v121 = *(float32x4_t *)(v12 + 112);
          v122 = v15;
          v123 = v16;
          v124 = v17;
          do
          {
            v125.columns[v14 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v110, COERCE_FLOAT(*(_OWORD *)((char *)&v121 + v14 * 4))), v109, *(float32x2_t *)&v121.f32[v14], 1), v108, *(float32x4_t *)((char *)&v121 + v14 * 4), 2), v107, *(float32x4_t *)((char *)&v121 + v14 * 4), 3);
            v14 += 4;
          }
          while (v14 != 16);
          v18 = v125.columns[0];
          v19 = v125.columns[1];
          v20 = v125.columns[2];
          v21 = v125.columns[3];
          v22 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) >> 27));
          v23 = v22 ^ (v22 >> 31);
          v24 = v115;
          if ((_QWORD)v115)
          {
            v24 = v23 % v111;
            for (i = *(unsigned int *)(v8 + 4 * v24);
                  (_DWORD)i != 0x7FFFFFFF;
                  LODWORD(i) = *(_DWORD *)(v11 + 96 * i + 8) & 0x7FFFFFFF)
            {
              if (*(_QWORD *)(v11 + 96 * i + 16) == v12)
                goto LABEL_23;
            }
          }
          v26 = v118;
          if ((_DWORD)v118 == 0x7FFFFFFF)
          {
            v27 = v10;
            v111 = DWORD2(v116);
            if ((_DWORD)v10 == DWORD2(v116))
            {
              v104 = v125.columns[1];
              v105 = v125.columns[0];
              v102 = v125.columns[3];
              v103 = v125.columns[2];
              re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::setCapacity((uint64_t)&v115, 2 * v9);
              v21 = v102;
              v20 = v103;
              v19 = v104;
              v18 = v105;
              v27 = v117;
              v111 = DWORD2(v116);
              v24 = v23 % DWORD2(v116);
              v11 = v116;
              v106 = *((_QWORD *)&v115 + 1);
            }
            v28 = (v27 + 1);
            v117 = v28;
            v26 = v10;
            v29 = *(_DWORD *)(v11 + 96 * v10 + 8);
            v8 = v106;
          }
          else
          {
            v29 = *(_DWORD *)(v11 + 96 * v118 + 8);
            LODWORD(v118) = v29 & 0x7FFFFFFF;
            v28 = v10;
            LODWORD(v10) = v26;
          }
          v30 = 3 * v26;
          *(_DWORD *)(v11 + 32 * v30 + 8) = v29 | 0x80000000;
          v11 = v116;
          v31 = (simd_float4 *)(v116 + 32 * v30);
          v31->i32[2] = v31->i32[2] & 0x80000000 | *(_DWORD *)(v8 + 4 * v24);
          v31->i64[0] = v23;
          v31[1].i64[0] = v12;
          v31[2] = v18;
          v31[3] = v19;
          v31[4] = v20;
          v31[5] = v21;
          *(_DWORD *)(v8 + 4 * v24) = v10;
          v9 = ++HIDWORD(v116);
          ++HIDWORD(v118);
          v10 = v28;
LABEL_23:
          v6 = v13;
          re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(v12, &v114);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v112);
      }
      while (v112.i64[0] != v6 || v112.u16[4] != 0xFFFF || v112.u16[5] != 0xFFFF);
      if (v9)
      {
        v34 = *((_QWORD *)v100 + 20);
        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
        v36 = (*(uint64_t (**)(uint64_t, const re::ecs2::Scene *))(*(_QWORD *)v34 + 40))(v34, v101);
        v112.i64[0] = v35;
        v112.i64[1] = v36;
        v37 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        v38 = *((_QWORD *)v101 + 28);
        if (v38 > v37)
        {
          v39 = *(_QWORD *)(*((_QWORD *)v101 + 30) + 8 * v37);
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 24);
            if (v40)
            {
              v41 = *(uint64_t **)(v39 + 40);
              v42 = 8 * v40;
              do
              {
                v43 = *v41;
                v44 = re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity((uint64_t *)&v112, *(_QWORD *)(*v41 + 16));
                if (re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::containsKey((uint64_t)&v115, v44))
                {
                  v45 = *(_QWORD *)(v43 + 96);
                  if (v45)
                  {
                    v46 = *(_QWORD *)(v43 + 16);
                    v47 = *(re::ecs2::TransformComponent **)(v46 + 240);
                    if (!v47)
                      v47 = (re::ecs2::TransformComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v46 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                    re::internal::getPhysicsOriginFromTransformComponent(v47, v113, (uint64_t)&v125);
                    v48 = *(simd_float4 **)(v45 + 16);
                    v121 = (float32x4_t)v125.columns[2];
                    v122 = v125.columns[1];
                    v49 = v125.columns[1];
                    v48[1] = v125.columns[2];
                    v48[2] = v49;
                    (*(void (**)(simd_float4 *, float32x4_t *))(v48->i64[0] + 64))(v48, &v121);
                    v121 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.columns[0].f32, 0);
                    re::CollisionObject::setScale(v45, &v121);
                  }
                }
                ++v41;
                v42 -= 8;
              }
              while (v42);
              v38 = *((_QWORD *)v101 + 28);
            }
          }
        }
        v50 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (v38 > v50)
        {
          v51 = *(_QWORD *)(*((_QWORD *)v101 + 30) + 8 * v50);
          if (v51)
          {
            v52 = *(_QWORD *)(v51 + 24);
            if (v52)
            {
              v53 = *(uint64_t **)(v51 + 40);
              v54 = 8 * v52;
              do
              {
                v55 = *v53;
                v56 = re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity((uint64_t *)&v112, *(_QWORD *)(*v53 + 16));
                v57 = re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::tryGet((uint64_t)&v115, v56);
                if (v57)
                {
                  v58 = *(_QWORD *)(v55 + 336);
                  if (v58)
                  {
                    v59 = v57;
                    v60.i64[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 216))(v58);
                    v60.i64[1] = v61;
                    v62.i64[0] = *(_QWORD *)v59;
                    v63.i64[0] = *(_QWORD *)(v59 + 16);
                    v64.i64[0] = *(_QWORD *)(v59 + 32);
                    v62.i32[2] = *(_DWORD *)(v59 + 8);
                    v63.i32[2] = *(_DWORD *)(v59 + 24);
                    v64.i32[2] = *(_DWORD *)(v59 + 40);
                    v125.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v60.f32[0]), v63, *(float32x2_t *)v60.f32, 1), v64, v60, 2);
                    (*(void (**)(uint64_t, simd_float4x4 *))(*(_QWORD *)v58 + 224))(v58, &v125);
                    v65.i64[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 232))(v58);
                    v65.i64[1] = v66;
                    v67.i64[0] = *(_QWORD *)v59;
                    v68.i64[0] = *(_QWORD *)(v59 + 16);
                    v69.i64[0] = *(_QWORD *)(v59 + 32);
                    v67.i32[2] = *(_DWORD *)(v59 + 8);
                    v68.i32[2] = *(_DWORD *)(v59 + 24);
                    v69.i32[2] = *(_DWORD *)(v59 + 40);
                    v125.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v65.f32[0]), v68, *(float32x2_t *)v65.f32, 1), v69, v65, 2);
                    (*(void (**)(uint64_t, simd_float4x4 *))(*(_QWORD *)v58 + 240))(v58, &v125);
                    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 312))(v58);
                  }
                }
                ++v53;
                v54 -= 8;
              }
              while (v54);
              v38 = *((_QWORD *)v101 + 28);
            }
          }
        }
        v70 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (v38 > v70)
        {
          v71 = *(_QWORD *)(*((_QWORD *)v101 + 30) + 8 * v70);
          if (v71)
          {
            v72 = *(_QWORD *)(v71 + 24);
            if (v72)
            {
              v73 = *(uint64_t **)(v71 + 40);
              v74 = 8 * v72;
              do
              {
                v75 = *v73;
                v76 = re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity((uint64_t *)&v112, *(_QWORD *)(*v73 + 16));
                if (re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::containsKey((uint64_t)&v115, v76))
                {
                  v77 = *(_QWORD *)(v75 + 80);
                  if (v77)
                  {
                    v78 = *(_QWORD *)(v75 + 16);
                    v79 = *(_QWORD *)(v77 + 136);
                    v80 = *(re::ecs2::TransformComponent **)(v78 + 240);
                    if (!v80)
                      v80 = (re::ecs2::TransformComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v78 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                    re::internal::getPhysicsOriginFromTransformComponent(v80, v113, (uint64_t)&v125);
                    v81 = *(simd_float4 **)(v79 + 16);
                    v121 = (float32x4_t)v125.columns[2];
                    v122 = v125.columns[1];
                    v82 = v125.columns[1];
                    v81[1] = v125.columns[2];
                    v81[2] = v82;
                    (*(void (**)(simd_float4 *, float32x4_t *))(v81->i64[0] + 64))(v81, &v121);
                    v121 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.columns[0].f32, 0);
                    re::CollisionObject::setScale(v79, &v121);
                  }
                }
                ++v73;
                v74 -= 8;
              }
              while (v74);
              v38 = *((_QWORD *)v101 + 28);
            }
          }
        }
        v83 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (v38 > v83)
        {
          v84 = *(_QWORD *)(*((_QWORD *)v101 + 30) + 8 * v83);
          if (v84)
          {
            v85 = *(_QWORD *)(v84 + 24);
            if (v85)
            {
              v86 = *(float32x2_t ***)(v84 + 40);
              v87 = 8 * v85;
              do
              {
                v88 = *v86;
                v89 = re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity((uint64_t *)&v112, *(_QWORD *)&(*v86)[2]);
                v90 = re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::tryGet((uint64_t)&v115, v89);
                if (v90)
                {
                  v91.i64[0] = *(_QWORD *)v90;
                  v92.i64[0] = *(_QWORD *)(v90 + 16);
                  v93.i64[0] = *(_QWORD *)(v90 + 32);
                  v91.i32[2] = *(_DWORD *)(v90 + 8);
                  v92.i32[2] = *(_DWORD *)(v90 + 24);
                  v93.i32[2] = *(_DWORD *)(v90 + 40);
                  v94 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*(_OWORD *)v88[16].f32)), v92, v88[16], 1), v93, *(float32x4_t *)v88[16].f32, 2);
                  *(float32x4_t *)v88[16].f32 = v94;
                  v94.i64[0] = *(_QWORD *)v90;
                  v92.i64[0] = *(_QWORD *)(v90 + 16);
                  v93.i64[0] = *(_QWORD *)(v90 + 32);
                  v94.i32[2] = *(_DWORD *)(v90 + 8);
                  v92.i32[2] = *(_DWORD *)(v90 + 24);
                  v93.i32[2] = *(_DWORD *)(v90 + 40);
                  *(float32x4_t *)v88[20].f32 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v94, COERCE_FLOAT(*(_OWORD *)v88[20].f32)), v92, v88[20], 1), v93, *(float32x4_t *)v88[20].f32, 2);
                }
                ++v86;
                v87 -= 8;
              }
              while (v87);
            }
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v125, v6, 0);
        if (v6 != v125.columns[0].i64[0]
          || v125.columns[0].u16[4] != 0xFFFFLL
          || (v125.columns[0].i32[2] & 0xFFFF0000) != 4294901760)
        {
          do
          {
            v97 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v125);
            re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(v97, &v114);
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v125);
          }
          while (v125.columns[0].i64[0] != v6 || v125.columns[0].u16[4] != 0xFFFF || v125.columns[0].u16[5] != 0xFFFF);
        }
      }
    }
    re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)&v115);
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v119);
  }
}

uint64_t re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = a2;
  result = *a1;
  if (result)
  {
    if (a1[1])
    {
      result = re::HashTable<unsigned long,re::AssetMap::ConfigurationEntry,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(result, &v4);
      if (result)
        return re::DataArray<re::ecs2::PhysicsSimulationData>::tryGet(a1[1], *(_QWORD *)(result + 24));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 96 * v3 + 16) == a2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 96 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 96 * v3 + 16) != a2);
  return result;
}

uint64_t re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 96 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 96 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 96 * v3 + 16) == a2)
        return v5 + 96 * v3 + 32;
    }
    return 0;
  }
  return v5 + 96 * v3 + 32;
}

uint64_t re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[2];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v6);
  v10[0] = v7;
  v10[1] = v8;
  return re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v10, a2);
}

_QWORD *re::ecs2::PhysicsSystem::update(_QWORD *result, _BOOL8 *a2, uint64_t a3)
{
  float v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  float v8;
  _QWORD *v9;
  uint64_t v10;
  const re::ecs2::ComponentTypeBase *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  re::PhysicsSimulation *v19;
  uint64_t v20;
  const re::EventBus *v21;
  uint64_t v22;
  BOOL hasCollisionEventSubscriptions;
  uint64_t v24;
  re::ecs2::PhysicsSimulationData *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v49;
  uint64_t v50;
  float v51;
  _BYTE v54[16];
  uint64_t v55[2];
  __int128 v56;
  id v57[2];
  uint64_t v58[2];
  _BYTE v59[16];
  __int128 v60;

  if (a2)
  {
    v3 = *(float *)&a3;
    if ((a3 & 0x100000000) == 0)
    {
      v4 = (uint64_t)result;
      result = (_QWORD *)result[20];
      if (result)
      {
        v6 = (*(uint64_t (**)(_QWORD *))(*result + 16))(result);
        re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v55);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54, 3043, v4);
        v7 = *(_QWORD *)(v4 + 176);
        if (!v7)
        {
LABEL_8:
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 160) + 56))(*(_QWORD *)(v4 + 160), 0);
LABEL_9:
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54);
          return (_QWORD *)re::ProfilerTimeGuard<(re::ProfilerStatistic)121>::end((uint64_t)v55);
        }
        v8 = v3;
        v9 = *(_QWORD **)(v4 + 184);
        v10 = 8 * v7;
        while (1)
        {
          v11 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
          if (*(_QWORD *)(re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 25), v11) + 24))
            break;
          ++v9;
          v10 -= 8;
          if (!v10)
            goto LABEL_8;
        }
        v12 = &physx::gEnablePCMCaching;
        if (physx::shdfnd::g_isLockingEnabled)
          v13 = 1;
        else
          v13 = physx::shdfnd::g_alwaysUseLocking;
        if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && physx::shdfnd::g_isLockingEnabled)
          physx::shdfnd::g_isLockingEnabled = 0;
        re::ecs2::PhysicsSystem::ecsToSim((re::ecs2::PhysicsSystem *)v4, (const re::ecs2::Scene *)a2, 0);
        v14 = (*(uint64_t (**)(_QWORD, _BOOL8 *))(**(_QWORD **)(v4 + 160) + 32))(*(_QWORD *)(v4 + 160), a2);
        v15 = v14;
        if (v6)
        {
          if (v14)
          {
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v56, v14, 0);
            v60 = v56;
            if (v15 != (_QWORD)v56 || WORD4(v56) != 0xFFFFLL || (DWORD2(v56) & 0xFFFF0000) != 4294901760)
            {
              do
              {
                v18 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v60);
                v19 = *(re::PhysicsSimulation **)(v18 + 8);
                if (v19)
                {
                  v20 = v18;
                  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v59, 7000, v4);
                  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v58);
                  v22 = *(_QWORD *)(v20 + 32);
                  if (v22)
                  {
                    *(_QWORD *)&v56 = v4;
                    *((_QWORD *)&v56 + 1) = a2;
                    v57[0] = 0;
                    objc_copyWeak(v57, (id *)(v20 + 48));
                    *(_OWORD *)(v22 + 8) = v56;
                    re::ArcWeakPtr<re::ecs2::Entity>::operator=((id *)(v22 + 24), v57);
                    objc_destroyWeak(v57);
                  }
                  hasCollisionEventSubscriptions = re::CollisionEventDelegate::hasCollisionEventSubscriptions(a2[36], v21);
                  v24 = *((_QWORD *)v19 + 7);
                  LOBYTE(v56) = hasCollisionEventSubscriptions;
                  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 216))(v24, &v56);
                  re::PhysicsSimulation::update(v19, v8);
                  re::ProfilerTimeGuard<(re::ProfilerStatistic)19>::end((uint64_t)v58);
                  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v59);
                }
                re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v60);
              }
              while ((_QWORD)v60 != v15 || WORD4(v60) != 0xFFFF || WORD5(v60) != 0xFFFF);
            }
            v12 = (_BYTE *)&physx::gEnablePCMCaching;
          }
        }
        else if (v14)
        {
          if (*(_DWORD *)(v14 + 40))
          {
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v56, v14, 0);
            v60 = v56;
            v27 = (re::ecs2::PhysicsSimulationData *)re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v60);
            v28 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v27);
            if (v28)
            {
              v29 = *(_QWORD *)(v4 + 176);
              if (!v29)
              {
LABEL_77:
                if (v12[2488] != v13)
                  v12[2488] = v13;
                goto LABEL_9;
              }
              v30 = v28;
              v31 = *(uint64_t **)(v4 + 184);
              v32 = 8 * v29;
              do
              {
                v33 = *v31++;
                (*(void (**)(uint64_t, uint64_t, _BOOL8 *))(*(_QWORD *)v33 + 64))(v33, v30, a2);
                v32 -= 8;
              }
              while (v32);
            }
          }
        }
        v34 = *(_QWORD *)(v4 + 176);
        if (v34)
        {
          v35 = *(uint64_t **)(v4 + 184);
          v36 = 8 * v34;
          do
          {
            v37 = *v35++;
            (*(void (**)(uint64_t, _BOOL8 *))(*(_QWORD *)v37 + 72))(v37, a2);
            v36 -= 8;
          }
          while (v36);
        }
        if (v6)
        {
          v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 80))(*(_QWORD *)(v4 + 40));
          if (v38)
          {
            v39 = *(_QWORD *)(v4 + 96);
            if (v39 != -1)
              re::DynamicBitset<unsigned long long,256ul>::setBit(v38 + 344, v39);
          }
          v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 104))(*(_QWORD *)(v4 + 40));
          v41 = *(_QWORD *)(v40 + 24);
          if (v41)
          {
            v42 = *(_QWORD **)(v40 + 40);
            v43 = &v42[v41];
            v44 = 3.4028e38;
            do
            {
              v45 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 160) + 32))(*(_QWORD *)(v4 + 160), *v42);
              if (v45)
              {
                v46 = v45;
                re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v56, v45, 0);
                v47 = v46 == (_QWORD)v56 && WORD4(v56) == 0xFFFFLL;
                if (!v47 || (DWORD2(v56) & 0xFFFF0000) != 4294901760)
                {
                  do
                  {
                    v49 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v56);
                    v50 = *(_QWORD *)(v49 + 8);
                    if (v50)
                    {
                      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v50 + 104))(*(_QWORD *)(v49 + 8)))
                      {
                        v51 = *(double *)(v50 + 888);
                        if (v44 > (float)(*(float *)(v50 + 68) - v51))
                          v44 = *(float *)(v50 + 68) - v51;
                      }
                    }
                    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v56);
                  }
                  while ((_QWORD)v56 != v46 || WORD4(v56) != 0xFFFF || WORD5(v56) != 0xFFFF);
                }
              }
              ++v42;
            }
            while (v42 != v43);
            if (v44 != 3.4028e38)
              re::ecs2::System::queueToRun((re::ecs2::System *)v4, v44);
          }
        }
        goto LABEL_77;
      }
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_PhysicsSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_149);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_149))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106F90, 0);
    *(uint64_t *)((char *)&qword_254106FA0 + 6) = 0;
    qword_254106FA0 = 0;
    qword_254106FB0 = 0;
    qword_254106FB8 = 0xFFFFFFFFLL;
    qword_254106F90 = (uint64_t)&off_24ED7DAA8;
    qword_254106FC0 = (uint64_t)"PhysicsSystem";
    dword_254106FC8 = 0;
    *(_OWORD *)&algn_254106FCC[4] = 0u;
    *(_OWORD *)&algn_254106FCC[20] = 0u;
    *(_OWORD *)&algn_254106FCC[36] = 0u;
    qword_254107000 = 0;
    __cxa_guard_release(&_MergedGlobals_149);
  }
  return &qword_254106F90;
}

void re::ecs2::initInfo_PhysicsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x21255BB4348EC66CLL;
  v5[1] = "PhysicsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PhysicsSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PhysicsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PhysicsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::PhysicsSystem *re::internal::defaultConstruct<re::ecs2::PhysicsSystem>(int a1, int a2, re::ecs2::PhysicsSystem *this)
{
  return re::ecs2::PhysicsSystem::PhysicsSystem(this);
}

void re::internal::defaultDestruct<re::ecs2::PhysicsSystem>(int a1, int a2, re::ecs2::PhysicsSystem *this)
{
  re::ecs2::PhysicsSystem::~PhysicsSystem(this);
}

uint64_t re::ecs2::introspect_PhysicsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSystem>, this);
}

uint64_t re::ecs2::PhysicsSystem::typeInfo(re::ecs2::PhysicsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSystem>, 0);
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  *a1 = &off_24ED468C0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  *a1 = &off_24ED468C0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v57[0] = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(a1 + 152);
    else
      v8 = *(_QWORD **)(a1 + 160);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + 152);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 160);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = a1 + 176;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v56 = 0;
  v18 = *(_QWORD *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 8), (v17 + 4) >> 2);
    v18 = *(_QWORD *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v19 = a1 + 32;
  else
    v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * (v17 >> 2));
  ++*(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *(_QWORD *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::init(v27, v4, v57[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 168);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *(_QWORD *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v33 = a1 + 152;
    else
      v33 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v33 + 8 * *(_QWORD *)(a1 + 136) - 8) &= v31;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 216);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *(_QWORD *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v39 = a1 + 200;
    else
      v39 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(v39 + 8 * *(_QWORD *)(a1 + 184) - 8) &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(_BYTE *)(a1 + 240))
    return;
  v40 = *(_QWORD *)(a1 + 184);
  v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)(a1 + 200);
    else
      v42 = *(_QWORD **)(a1 + 208);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 200);
    if (!v40)
      return;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 208);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1 + 8;
  v25 = xmmword_2260E7EE0;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v11)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(_BYTE *)(a1 + 240))
    return;
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 200);
    else
      v18 = *(_QWORD **)(a1 + 208);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_27:
    v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 200);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 208);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_27;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1 + 8;
  v8 = a3;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v8);
  v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v6 + 16) + 8, *(_QWORD *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ComponentBucketsBase **v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 3; j != 7; ++j)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsSimulationComponent,re::ecs2::PhysicsSimulationComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  re::ecs2::PhysicsSimulationComponent *v2;

  v2 = (re::ecs2::PhysicsSimulationComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
    re::ecs2::PhysicsSimulationComponent::removeFromSimulation(v2);
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED46948;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED469A0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED469F8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED46A50;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED46948;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED469A0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED469F8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED46A50;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46948;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46948;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED469A0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED469A0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED469F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED469F8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46A50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46A50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED46AA8;
  a1[31] = &off_24ED5F7D0;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED46AA8;
  a1[31] = &off_24ED5F7D0;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v57[0] = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(a1 + 152);
    else
      v8 = *(_QWORD **)(a1 + 160);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + 152);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 160);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = a1 + 176;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v56 = 0;
  v18 = *(_QWORD *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 8), (v17 + 4) >> 2);
    v18 = *(_QWORD *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v19 = a1 + 32;
  else
    v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * (v17 >> 2));
  ++*(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *(_QWORD *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::init(v27, v4, v57[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 168);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *(_QWORD *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v33 = a1 + 152;
    else
      v33 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v33 + 8 * *(_QWORD *)(a1 + 136) - 8) &= v31;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 216);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *(_QWORD *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v39 = a1 + 200;
    else
      v39 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(v39 + 8 * *(_QWORD *)(a1 + 184) - 8) &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(_BYTE *)(a1 + 240))
    return;
  v40 = *(_QWORD *)(a1 + 184);
  v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)(a1 + 200);
    else
      v42 = *(_QWORD **)(a1 + 208);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 200);
    if (!v40)
      return;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 208);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1 + 8;
  v25 = xmmword_2260E7EE0;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v11)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(_BYTE *)(a1 + 240))
    return;
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 200);
    else
      v18 = *(_QWORD **)(a1 + 208);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_27:
    v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 200);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 208);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_27;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1 + 8;
  v8 = a3;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v8);
  v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v6 + 16) + 8, *(_QWORD *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ComponentBucketsBase **v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 3; j != 7; ++j)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ColliderComponent,re::ecs2::ColliderComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  re::ecs2::ColliderComponent *v2;

  v2 = (re::ecs2::ColliderComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
    re::ecs2::ColliderComponent::removeFromSimulation(v2);
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED46B30;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED46B88;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED46BE0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED46C38;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED46B30;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED46B88;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED46BE0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED46C38;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46B30;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46B30;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46B88;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46B88;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46BE0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46BE0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46C38;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46C38;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED46C90;
  a1[31] = &off_24ED6A740;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED46C90;
  a1[31] = &off_24ED6A740;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v57[0] = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(a1 + 152);
    else
      v8 = *(_QWORD **)(a1 + 160);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + 152);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 160);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = a1 + 176;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v56 = 0;
  v18 = *(_QWORD *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 8), (v17 + 4) >> 2);
    v18 = *(_QWORD *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v19 = a1 + 32;
  else
    v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * (v17 >> 2));
  ++*(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *(_QWORD *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::init(v27, v4, v57[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 168);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *(_QWORD *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v33 = a1 + 152;
    else
      v33 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v33 + 8 * *(_QWORD *)(a1 + 136) - 8) &= v31;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 216);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *(_QWORD *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v39 = a1 + 200;
    else
      v39 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(v39 + 8 * *(_QWORD *)(a1 + 184) - 8) &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(_BYTE *)(a1 + 240))
    return;
  v40 = *(_QWORD *)(a1 + 184);
  v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)(a1 + 200);
    else
      v42 = *(_QWORD **)(a1 + 208);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 200);
    if (!v40)
      return;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 208);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1 + 8;
  v25 = xmmword_2260E7EE0;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v11)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(_BYTE *)(a1 + 240))
    return;
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 200);
    else
      v18 = *(_QWORD **)(a1 + 208);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_27:
    v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 200);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 208);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_27;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  v5 = a1 + 8;
  *(_QWORD *)&v10 = a3;
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v10);
  v7 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  v8 = *(_QWORD *)(v7 + 48);
  v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v7 + 16) + 8, v8);
  if (*(_DWORD *)(v9 + 40))
  {
    v10 = xmmword_2260E7EE0;
    re::ecs2::RigidBodyComponentStateImpl::simToECS(a1 + 248, a2, (uint64_t)&v10, v7, v8, v9);
  }
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ComponentBucketsBase **v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 3; j != 7; ++j)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::RigidBodyComponent,re::ecs2::RigidBodyComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  re::ecs2::RigidBodyComponent *v2;

  v2 = (re::ecs2::RigidBodyComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v2)
    re::ecs2::RigidBodyComponent::removeFromSimulation(v2);
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED46D18;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED46D70;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED46DC8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED46E20;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED46D18;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED46D70;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED46DC8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED46E20;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46D18;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46D18;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46D70;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46D70;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46DC8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46DC8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46E20;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46E20;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RigidBodyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  *a1 = &off_24ED46E78;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  *a1 = &off_24ED46E78;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v57[0] = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(a1 + 152);
    else
      v8 = *(_QWORD **)(a1 + 160);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + 152);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 160);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = a1 + 176;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v56 = 0;
  v18 = *(_QWORD *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 8), (v17 + 4) >> 2);
    v18 = *(_QWORD *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v19 = a1 + 32;
  else
    v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * (v17 >> 2));
  ++*(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *(_QWORD *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::init(v27, v4, v57[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 168);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *(_QWORD *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v33 = a1 + 152;
    else
      v33 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v33 + 8 * *(_QWORD *)(a1 + 136) - 8) &= v31;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 216);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *(_QWORD *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v39 = a1 + 200;
    else
      v39 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(v39 + 8 * *(_QWORD *)(a1 + 184) - 8) &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(_BYTE *)(a1 + 240))
    return;
  v40 = *(_QWORD *)(a1 + 184);
  v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)(a1 + 200);
    else
      v42 = *(_QWORD **)(a1 + 208);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 200);
    if (!v40)
      return;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 208);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1 + 8;
  v25 = xmmword_2260E7EE0;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v11)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(_BYTE *)(a1 + 240))
    return;
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 200);
    else
      v18 = *(_QWORD **)(a1 + 208);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_27:
    v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 200);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 208);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_27;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1 + 8;
  v8 = a3;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v8);
  v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v6 + 16) + 8, *(_QWORD *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ComponentBucketsBase **v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 3; j != 7; ++j)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

re *re::ecs2::PhysicsSubsystemImpl<re::ecs2::ForceEffectComponent,re::ecs2::ForceEffectComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  re *result;
  uint64_t v3;
  uint64_t i;

  result = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v3 = (uint64_t)result;
    for (i = *((_QWORD *)result + 18); i; --i)
      result = re::ecs2::ForceEffectComponent::removeDefinitionLast(v3, *(_QWORD *)(v3 + 80));
  }
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED46F00;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED46F58;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED46FB0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED47008;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED46F00;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED46F58;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED46FB0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED47008;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46F00;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46F00;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46F58;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46F58;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED46FB0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED46FB0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47008;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47008;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ForceEffectComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED47060;
  a1[31] = off_24ED47720;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED47060;
  a1[31] = off_24ED47720;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v57[0] = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(a1 + 152);
    else
      v8 = *(_QWORD **)(a1 + 160);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + 152);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 160);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = a1 + 176;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v56 = 0;
  v18 = *(_QWORD *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 8), (v17 + 4) >> 2);
    v18 = *(_QWORD *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v19 = a1 + 32;
  else
    v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * (v17 >> 2));
  ++*(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *(_QWORD *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::init(v27, v4, v57[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 168);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *(_QWORD *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v33 = a1 + 152;
    else
      v33 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v33 + 8 * *(_QWORD *)(a1 + 136) - 8) &= v31;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 216);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *(_QWORD *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v39 = a1 + 200;
    else
      v39 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(v39 + 8 * *(_QWORD *)(a1 + 184) - 8) &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(_BYTE *)(a1 + 240))
    return;
  v40 = *(_QWORD *)(a1 + 184);
  v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)(a1 + 200);
    else
      v42 = *(_QWORD **)(a1 + 208);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 200);
    if (!v40)
      return;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 208);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1 + 8;
  v25 = xmmword_2260E7EE0;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v11)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(_BYTE *)(a1 + 240))
    return;
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 200);
    else
      v18 = *(_QWORD **)(a1 + 208);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_27:
    v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 200);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 208);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_27;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1 + 8;
  v8 = a3;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v8);
  v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v6 + 16) + 8, *(_QWORD *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ComponentBucketsBase **v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 3; j != 7; ++j)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::BallSocketJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = (id *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v2)
    re::ecs2::BallSocketJointComponent::removeFromSimulation(v2);
}

uint64_t re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BallSocketJointComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BallSocketJointComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BallSocketJointComponent>::processUpdatingComponents()
{
  return 0;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED470E8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED47140;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED47198;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED471F0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED470E8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED47140;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED47198;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED471F0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED470E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED470E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47140;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47140;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47198;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47198;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED471F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED471F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BallSocketJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED47248;
  a1[31] = off_24ED47760;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED47248;
  a1[31] = off_24ED47760;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v57[0] = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(a1 + 152);
    else
      v8 = *(_QWORD **)(a1 + 160);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + 152);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 160);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = a1 + 176;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v56 = 0;
  v18 = *(_QWORD *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 8), (v17 + 4) >> 2);
    v18 = *(_QWORD *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v19 = a1 + 32;
  else
    v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * (v17 >> 2));
  ++*(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *(_QWORD *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::init(v27, v4, v57[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 168);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *(_QWORD *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v33 = a1 + 152;
    else
      v33 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v33 + 8 * *(_QWORD *)(a1 + 136) - 8) &= v31;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 216);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *(_QWORD *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v39 = a1 + 200;
    else
      v39 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(v39 + 8 * *(_QWORD *)(a1 + 184) - 8) &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(_BYTE *)(a1 + 240))
    return;
  v40 = *(_QWORD *)(a1 + 184);
  v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)(a1 + 200);
    else
      v42 = *(_QWORD **)(a1 + 208);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 200);
    if (!v40)
      return;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 208);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1 + 8;
  v25 = xmmword_2260E7EE0;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v11)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(_BYTE *)(a1 + 240))
    return;
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 200);
    else
      v18 = *(_QWORD **)(a1 + 208);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_27:
    v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 200);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 208);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_27;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1 + 8;
  v8 = a3;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v8);
  v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v6 + 16) + 8, *(_QWORD *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ComponentBucketsBase **v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 3; j != 7; ++j)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::HingeJointComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  id *v2;

  v2 = (id *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v2)
    re::ecs2::HingeJointComponent::removeFromSimulation(v2);
}

uint64_t re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::HingeJointComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::HingeJointComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::HingeJointComponent>::processUpdatingComponents()
{
  return 0;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED472D0;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED47328;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED47380;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED473D8;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED472D0;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED47328;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED47380;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED473D8;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED472D0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED472D0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47328;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47328;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47380;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47380;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED473D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED473D8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::HingeJointComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED47430;
  a1[31] = off_24ED477A0;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED47430;
  a1[31] = off_24ED477A0;
  v2 = a1[32];
  if (v2)
  {
    if (a1[33])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[34]);
      a1[33] = 0;
      a1[34] = 0;
    }
    a1[32] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v57[0] = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(a1 + 152);
    else
      v8 = *(_QWORD **)(a1 + 160);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + 152);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 160);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = a1 + 176;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v56 = 0;
  v18 = *(_QWORD *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 8), (v17 + 4) >> 2);
    v18 = *(_QWORD *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v19 = a1 + 32;
  else
    v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * (v17 >> 2));
  ++*(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *(_QWORD *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::init(v27, v4, v57[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 168);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *(_QWORD *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v33 = a1 + 152;
    else
      v33 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v33 + 8 * *(_QWORD *)(a1 + 136) - 8) &= v31;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 216);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *(_QWORD *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v39 = a1 + 200;
    else
      v39 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(v39 + 8 * *(_QWORD *)(a1 + 184) - 8) &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(_BYTE *)(a1 + 240))
    return;
  v40 = *(_QWORD *)(a1 + 184);
  v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)(a1 + 200);
    else
      v42 = *(_QWORD **)(a1 + 208);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 200);
    if (!v40)
      return;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 208);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1 + 8;
  v25 = xmmword_2260E7EE0;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, &v25, v7, v9, v10, a3);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v25, v7, v12, v13, a3);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (*(_DWORD *)(v15 + 40))
  {
    if (((v11 | (*(unsigned int (**)(uint64_t, __int128 *, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, &v25, v7, v14, v15, a3)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v11)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 176, v6);
LABEL_9:
  if (!*(_BYTE *)(a1 + 240))
    return;
  v16 = *(_QWORD *)(a1 + 184);
  v17 = *(_DWORD *)(a1 + 192);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 200);
    else
      v18 = *(_QWORD **)(a1 + 208);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_27:
    v24 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 200);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 208);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_27;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1 + 8;
  v8 = a3;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v8);
  v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v6 + 16) + 8, *(_QWORD *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ComponentBucketsBase **v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 3; j != 7; ++j)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

re::ecs2::PhysicsConstraintsComponent *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsConstraintsComponent,re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  re::ecs2::PhysicsConstraintsComponent *result;

  result = (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
    return (re::ecs2::PhysicsConstraintsComponent *)re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays(result, 1);
  return result;
}

uint64_t re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::dependsOnComponents(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::processUpdatingComponents()
{
  return 0;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsSimulationComponent> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED474B8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED47510;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED47568;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED475C0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED474B8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED47510;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED47568;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED475C0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED474B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED474B8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47510;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47510;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47568;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47568;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED475C0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED475C0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsConstraintsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v8, (_QWORD *)a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v6 + 72 * v5 + 16) != *(_QWORD *)a2
       || *(unsigned __int16 *)(v6 + 72 * v5 + 24) != (unsigned __int16)*(_DWORD *)(a2 + 8)
       || *(unsigned __int16 *)(v6 + 72 * v5 + 26) != HIWORD(*(_DWORD *)(a2 + 8))
       || ((*(_DWORD *)(v6 + 72 * v5 + 28) ^ *(_DWORD *)(a2 + 12)) & 0xFFFFFF) != 0)
  {
    v5 = *(_DWORD *)(v6 + 72 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 72 * v5 + 32;
}

void re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47618;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47618;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47670;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47670;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED476C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED476C8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSystem,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

id *re::ArcWeakPtr<re::ecs2::Entity>::operator=(id *location, id *a2)
{
  if (a2 != location)
  {
    objc_destroyWeak(location);
    *location = 0;
    objc_copyWeak(location, a2);
  }
  return location;
}

double re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    v2 = result + 24;
    re::BucketArray<RESubscriptionHandle,16ul>::deinit(result + 24);
    return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  }
  return result;
}

void re::FixedArray<re::ecs2::ComponentTypeBase const*>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::PhysicsSystem>(re::ecs2::PhysicsSystem *,REEventHandlerResult (re::ecs2::PhysicsSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3);
}

uint64_t re::BucketArray<RESubscriptionHandle,16ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<RESubscriptionHandle,16ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<RESubscriptionHandle,16ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 16 * v3)
  {
    re::BucketArray<RESubscriptionHandle,16ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 16) >> 4);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 4)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 4));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 0xF);
}

uint64_t *re::BucketArray<RESubscriptionHandle,16ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 16 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 256, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (uint64_t *)re::BucketArray<RESubscriptionHandle,16ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v31, v13, v12);
          v15 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v31[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16);
  v26 = v25 + 80 * v9;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v26 += 24;
  *(_DWORD *)(v26 + 16) = 1;
  v27 = a2;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::DynamicOverflowArray((uint64_t)v31, v26);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v26, a5);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5, (uint64_t)v31);
  result = *(_QWORD *)v31;
  if (*(_QWORD *)v31 && (v31[16] & 1) == 0)
    result = (*(uint64_t (**)(void))(**(_QWORD **)v31 + 40))();
  v29 = v25 + 80 * v9;
  v30 = *(_QWORD *)(v29 + 64);
  *(_QWORD *)(v29 + 64) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = v30;
  ++*(_DWORD *)(v29 + 72);
  ++*(_DWORD *)(a5 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v27) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,16ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 80 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::BucketArray<RESubscriptionHandle,16ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 4)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 4)) + 16 * (a2 & 0xF);
}

void re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  signed int v25;
  _BYTE v26[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::init((uint64_t)v26, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v26;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)v26 = v5;
      *(_QWORD *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 16);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 96 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 96 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 96 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v17 + 16) = *(_QWORD *)v13;
            v21 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 96 * v17);
            v22 = *(_OWORD *)(v13 + 16);
            v23 = *(_OWORD *)(v13 + 32);
            v24 = *(_OWORD *)(v13 + 64);
            v21[4] = *(_OWORD *)(v13 + 48);
            v21[5] = v24;
            v21[2] = v22;
            v21[3] = v23;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 96;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2)
      v25 = a2;
    else
      v25 = 3;
  }
}

void re::HashTable<re::ecs2::PhysicsSimulationData *,re::Matrix4x4<float>,re::Hash<re::ecs2::PhysicsSimulationData *>,re::EqualTo<re::ecs2::PhysicsSimulationData *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)121>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[488].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[488].i64[0] = v5;
      v6 = v3[488].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[488].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[489] = vaddq_s64(v3[489], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)19>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[80].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[80].i64[0] = v5;
      v6 = v3[80].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[80].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[81] = vaddq_s64(v3[81], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::PhysicsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PhysicsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_AnchoringResourceComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_150);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_150))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107048, 0);
    *(uint64_t *)((char *)&qword_254107058 + 6) = 0;
    qword_254107058 = 0;
    qword_254107068 = 0;
    qword_254107070 = 0xFFFFFFFFLL;
    qword_254107048 = (uint64_t)&off_24ED7DAA8;
    qword_254107078 = (uint64_t)"AnchoringResourceComponent";
    dword_254107080 = 0;
    xmmword_254107088 = 0u;
    unk_254107098 = 0u;
    xmmword_2541070A8 = 0u;
    qword_2541070B8 = 0;
    __cxa_guard_release(&_MergedGlobals_150);
  }
  return &qword_254107048;
}

void re::ecs2::initInfo_AnchoringResourceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[2];
  __int128 v31;

  v30[0] = 0x9BAD4079DE588644;
  v30[1] = "AnchoringResourceComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  v4 = atomic_load((unsigned __int8 *)&qword_254107010);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107010);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107018 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "imageAsset";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254107020 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "imageWidth";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x3800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254107028 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_AssetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "arReferenceObjectAsset";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x4000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254107030 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::IntrospectionInfo<unsigned char [16]>::get(1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "arReferenceObjectIdentifier";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x5800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254107038 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_float((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "imageHeight";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x3C00000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254107040 = v28;
      __cxa_guard_release(&qword_254107010);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254107018;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchoringResourceComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchoringResourceComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchoringResourceComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnchoringResourceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v29 = v31;
}

double re::internal::defaultConstruct<re::ecs2::AnchoringResourceComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED47858;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::AnchoringResourceComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::AnchoringResourceComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED47858;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 96) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::AnchoringResourceComponent>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnchoringResourceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchoringResourceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchoringResourceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchoringResourceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchoringResourceComponent>, this);
}

void re::ecs2::AnchoringResourceComponent::~AnchoringResourceComponent(re::ecs2::AnchoringResourceComponent *this)
{
  re::AssetHandle::~AssetHandle((re::ecs2::AnchoringResourceComponent *)((char *)this + 64));
  re::AssetHandle::~AssetHandle((re::ecs2::AnchoringResourceComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle::~AssetHandle((re::ecs2::AnchoringResourceComponent *)((char *)this + 64));
  re::AssetHandle::~AssetHandle((re::ecs2::AnchoringResourceComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::introspect_BlendingType(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "BlendingOpaque";
      re::introspect_BlendingType(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "BlendingTranslucent";
      qword_2558284B0 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "BlendingCutout";
      qword_2558284B8 = v17;
    }
  }
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_BlendingType(BOOL)::info, "BlendingType", 1, 1, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &re::introspect_BlendingType(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_BlendingType(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_BlendingType(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = re::introspect_BlendingType(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &re::introspect_BlendingType(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_BlendingType(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_BlendingType(BOOL)::info;
    }
  }
  re::introspect_BlendingType(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_BlendingType(BOOL)::info, a2);
  v19[0] = 0x31142575D52B81D6;
  v19[1] = (uint64_t)"BlendingType";
  xmmword_2558284E8 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_BlendingType(BOOL)::info;
}

void loadMatDefAsset(re::AssetHandle *this, const char *a2, AssetService *a3)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 1);
  if (v4)
    goto LABEL_3;
  (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a3->var0 + 1))(&v8, a3, a2);
  v5 = *(_OWORD *)this;
  *(_OWORD *)this = v8;
  v8 = v5;
  v6 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v9;
  v9 = v6;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
LABEL_3:
    if (!atomic_load((unsigned int *)(v4 + 704)))
      re::AssetHandle::loadAsync(this);
  }
}

void re::ecs2::PrimitiveRenderingSystem::willAddSystemToECSService(re::ecs2::PrimitiveRenderingSystem *this)
{
  uint64_t v2;
  AssetService *v3;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v2);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 352), "engine:primitivePoint.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 376), "engine:primitiveLine.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 400), "engine:primitiveShapeWireframe.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 424), "engine:primitiveMeshWireframe.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 448), "engine:primitivePointNoZ.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 472), "engine:primitiveLineNoZ.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 496), "engine:primitiveShapeWireframeNoZ.rematerialdefinition", v3);
  loadMatDefAsset((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 520), "engine:primitiveMeshWireframeNoZ.rematerialdefinition", v3);
}

void tryMakeMaterialAsset(re::AssetHandle *a1, re::AssetHandle *a2, re::RenderManager *a3, AssetService *a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[24];
  __int128 v14;
  uint64_t v15;

  v7 = *((_QWORD *)a1 + 1);
  if (!v7 || (v8 = atomic_load((unsigned int *)(v7 + 704)), v8 != 2))
  {
    v9 = *((_QWORD *)a2 + 1);
    if (v9)
    {
      v10 = atomic_load((unsigned int *)(v9 + 704));
      if (v10 == 2)
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)v13, a2);
        re::MaterialAsset::makeMaterialMemoryAsset((uint64_t)a4, a3, (re::AssetHandle *)v13, 0, 0);
        v11 = *(_OWORD *)a1;
        *(_OWORD *)a1 = v14;
        v14 = v11;
        v12 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = v15;
        v15 = v12;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
      }
    }
  }
}

uint64_t re::ecs2::PrimitiveRenderingSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  re::RenderManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  AssetService *v11;
  re::MaterialParameterTableBuilder *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  re::MaterialAsset *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  re::MaterialAsset *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  re::MaterialAsset *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  re::MaterialAsset *v48;
  uint64_t v49;
  re::ecs2::RenderingSubsystem **v50;
  uint64_t v51;
  re::ecs2::RenderingSubsystem *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  result = re::ServiceLocator::serviceOrNull<re::RenderManager>(v4);
  if (result)
  {
    v6 = (re::RenderManager *)result;
    v7 = *(_QWORD *)(result + 104);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 312);
      if (v8)
      {
        if (*(_BYTE *)v8 && *(_QWORD *)(v8 + 272))
        {
          v9 = re::RenderFrameBox::get(v7 + 344, 0xFFFFFFFFFFFFFFFuLL);
          v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
          v11 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v10);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 160), (re::AssetHandle *)(a1 + 352), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 184), (re::AssetHandle *)(a1 + 376), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 208), (re::AssetHandle *)(a1 + 400), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 232), (re::AssetHandle *)(a1 + 424), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 256), (re::AssetHandle *)(a1 + 448), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 280), (re::AssetHandle *)(a1 + 472), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 304), (re::AssetHandle *)(a1 + 496), v6, v11);
          tryMakeMaterialAsset((re::AssetHandle *)(a1 + 328), (re::AssetHandle *)(a1 + 520), v6, v11);
          v12 = *(re::MaterialParameterTableBuilder **)(v9 + 376);
          v62 = 0;
          v59[1] = 0;
          v60 = 0;
          v61 = 0;
          v59[0] = v12;
          re::DynamicArray<re::MeshScene>::setCapacity(v59, 0);
          ++v61;
          v13 = *(_QWORD *)(v8 + 272);
          if (v13)
          {
            v14 = *(_QWORD *)(v8 + 288);
            v15 = v14 + 1200 * v13;
            do
            {
              v16 = *(_QWORD *)(v14 + 16);
              if (v16 && (v16 << 7) - 128 + *(_QWORD *)(v14 + 520))
              {
                v17 = *(_QWORD *)(v14 + 1096);
                if (v17
                  || (v18 = *(_QWORD *)(a1 + 168)) != 0
                  && (v19 = atomic_load((unsigned int *)(v18 + 704)), v19 == 2)
                  && (v20 = *(_QWORD *)(a1 + 264)) != 0
                  && (v21 = atomic_load((unsigned int *)(v20 + 704)), v21 == 2)
                  && (*(_BYTE *)(v14 + 1128)
                    ? (v22 = (re::MaterialAsset *)(a1 + 160))
                    : (v22 = (re::MaterialAsset *)(a1 + 256)),
                      (v17 = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>(v22) + 1664)) != 0))
                {
                  re::PrimitiveRenderingContext::buildMeshSceneOfPoints((re *)v14, v12, v17, (uint64_t)&v63);
                  if (v59[0])
                    re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)v59, &v63);
                  if (v68)
                  {
                    if (v67)
                      v67 = 0;
                    if (v66)
                      (*(void (**)(void))(*(_QWORD *)v68 + 40))();
                  }
                }
              }
              v23 = *(_QWORD *)(v14 + 136);
              if (v23 && (v23 << 7) - 128 + *(_QWORD *)(v14 + 528))
              {
                v24 = *(_QWORD *)(v14 + 1104);
                if (v24
                  || (v25 = *(_QWORD *)(a1 + 192)) != 0
                  && (v26 = atomic_load((unsigned int *)(v25 + 704)), v26 == 2)
                  && (v27 = *(_QWORD *)(a1 + 288)) != 0
                  && (v28 = atomic_load((unsigned int *)(v27 + 704)), v28 == 2)
                  && (*(_BYTE *)(v14 + 1129)
                    ? (v29 = (re::MaterialAsset *)(a1 + 184))
                    : (v29 = (re::MaterialAsset *)(a1 + 280)),
                      (v24 = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>(v29) + 1664)) != 0))
                {
                  re::PrimitiveRenderingContext::buildMeshSceneOfLines((uint64_t *)v14, v12, v24, (uint64_t)&v63);
                  if (v59[0])
                    re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)v59, &v63);
                  if (v68)
                  {
                    if (v67)
                      v67 = 0;
                    if (v66)
                      (*(void (**)(void))(*(_QWORD *)v68 + 40))();
                  }
                }
              }
              if (*(_QWORD *)(v14 + 1176))
              {
                v30 = 1;
                do
                  v31 = re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>(v14, v30 - 1);
                while (v30++ < *(_QWORD *)(v14 + 1176) && v31 == 0);
                if (v31)
                {
                  v34 = *(_QWORD *)(v14 + 1112);
                  if (v34
                    || (v44 = *(_QWORD *)(a1 + 216)) != 0
                    && (v45 = atomic_load((unsigned int *)(v44 + 704)), v45 == 2)
                    && (v46 = *(_QWORD *)(a1 + 312)) != 0
                    && (v47 = atomic_load((unsigned int *)(v46 + 704)), v47 == 2)
                    && (*(_BYTE *)(v14 + 1130)
                      ? (v48 = (re::MaterialAsset *)(a1 + 208))
                      : (v48 = (re::MaterialAsset *)(a1 + 304)),
                        (v34 = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>(v48) + 1664)) != 0))
                  {
                    re::PrimitiveRenderingContext::buildMeshSceneOfShapes((_QWORD *)v14, v12, v34, (uint64_t)&v63);
                    v35 = v64;
                    if (v64)
                    {
                      v36 = 0;
                      v37 = 0;
                      do
                      {
                        if (v59[0])
                        {
                          re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)v59, (__int128 *)(v65 + v36));
                          v35 = v64;
                        }
                        ++v37;
                        v36 += 656;
                      }
                      while (v35 > v37);
                    }
                    re::DynamicArray<re::MeshScene>::deinit((uint64_t)&v63);
                  }
                }
              }
              if (*(_QWORD *)(v14 + 1072))
              {
                v38 = *(_QWORD *)(v14 + 1120);
                if (v38
                  || (v39 = *(_QWORD *)(a1 + 240)) != 0
                  && (v40 = atomic_load((unsigned int *)(v39 + 704)), v40 == 2)
                  && (v41 = *(_QWORD *)(a1 + 336)) != 0
                  && (v42 = atomic_load((unsigned int *)(v41 + 704)), v42 == 2)
                  && (*(_BYTE *)(v14 + 1131)
                    ? (v43 = (re::MaterialAsset *)(a1 + 232))
                    : (v43 = (re::MaterialAsset *)(a1 + 328)),
                      (v38 = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>(v43) + 1664)) != 0))
                {
                  re::PrimitiveRenderingContext::buildMeshSceneOfMeshes(v14, v12, v38, (unint64_t)&v63);
                  if (v59[0])
                    re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)v59, &v63);
                  if (v68)
                  {
                    if (v67)
                      v67 = 0;
                    if (v66)
                      (*(void (**)(void))(*(_QWORD *)v68 + 40))();
                  }
                }
              }
              v14 += 1200;
            }
            while (v14 != v15);
          }
          if (v60)
          {
            v49 = *(_QWORD *)(a2 + 8);
            if (v49)
            {
              v50 = *(re::ecs2::RenderingSubsystem ***)a2;
              v51 = 8 * v49;
              do
              {
                v52 = *v50++;
                re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v52, 0, (re::DynamicString **)v9, &v63);
                v58 = (unint64_t)v63 >> 1;
                v53 = re::RenderFrameData::stream((re::RenderFrameData *)(v9 + 264), (const re::WeakStringID *)&v58);
                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v53 + 48) + 568))(*(_QWORD *)(v53 + 48), v59);
                re::StringID::destroyString((re::StringID *)&v63);
                v51 -= 8;
              }
              while (v51);
            }
          }
          v54 = *(_QWORD *)(v8 + 272);
          *(_QWORD *)(v8 + 272) = 0;
          if (v54)
          {
            v55 = 1200 * v54;
            v56 = *(_QWORD *)(v8 + 288) + 1056;
            do
            {
              v57 = *(_QWORD *)(v56 + 80);
              if (v57)
              {
                if (*(_QWORD *)(v56 + 112))
                  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 40))(v57);
                *(_QWORD *)(v56 + 112) = 0;
                *(_QWORD *)(v56 + 88) = 0;
                *(_QWORD *)(v56 + 96) = 0;
                *(_QWORD *)(v56 + 80) = 0;
                ++*(_DWORD *)(v56 + 104);
              }
              re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(v56);
              re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)(v56 - 1056));
              v56 += 1200;
              v55 -= 1200;
            }
            while (v55);
          }
          ++*(_DWORD *)(v8 + 280);
          return re::DynamicArray<re::MeshScene>::deinit((uint64_t)v59);
        }
      }
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_PrimitiveRenderingSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_151);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_151))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541070C8, 0);
    *(uint64_t *)((char *)&qword_2541070D8 + 6) = 0;
    qword_2541070D8 = 0;
    qword_2541070E8 = 0;
    qword_2541070F0 = 0xFFFFFFFFLL;
    qword_2541070C8 = (uint64_t)&off_24ED7DAA8;
    qword_2541070F8 = (uint64_t)"PrimitiveRenderingSystem";
    dword_254107100 = 0;
    unk_254107108 = 0u;
    unk_254107118 = 0u;
    unk_254107128 = 0u;
    qword_254107138 = 0;
    __cxa_guard_release(&_MergedGlobals_151);
  }
  return &qword_2541070C8;
}

void re::ecs2::initInfo_PrimitiveRenderingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xCCA9A79D1A5F6028;
  v5[1] = "PrimitiveRenderingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x22000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveRenderingSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveRenderingSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveRenderingSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveRenderingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveRenderingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveRenderingSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveRenderingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveRenderingSystem>(int a1, int a2, char *a3)
{
  double result;

  bzero(a3, 0x220uLL);
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *((_QWORD *)a3 + 19) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_QWORD *)a3 = &off_24ED478D8;
  *((_OWORD *)a3 + 10) = 0u;
  *((_OWORD *)a3 + 11) = 0u;
  *((_OWORD *)a3 + 12) = 0u;
  *((_OWORD *)a3 + 13) = 0u;
  *((_OWORD *)a3 + 14) = 0u;
  *((_OWORD *)a3 + 15) = 0u;
  *((_OWORD *)a3 + 16) = 0u;
  *((_OWORD *)a3 + 17) = 0u;
  *((_OWORD *)a3 + 18) = 0u;
  *((_OWORD *)a3 + 19) = 0u;
  *((_OWORD *)a3 + 20) = 0u;
  *((_OWORD *)a3 + 21) = 0u;
  *((_OWORD *)a3 + 22) = 0u;
  *((_OWORD *)a3 + 23) = 0u;
  *((_OWORD *)a3 + 24) = 0u;
  *((_OWORD *)a3 + 25) = 0u;
  *((_OWORD *)a3 + 26) = 0u;
  *((_OWORD *)a3 + 27) = 0u;
  *((_OWORD *)a3 + 28) = 0u;
  *((_OWORD *)a3 + 29) = 0u;
  *((_OWORD *)a3 + 30) = 0u;
  *((_OWORD *)a3 + 31) = 0u;
  *((_OWORD *)a3 + 32) = 0u;
  *((_OWORD *)a3 + 33) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PrimitiveRenderingSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PrimitiveRenderingSystem>(_QWORD *a1)
{
  double result;

  bzero(a1, 0x220uLL);
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  a1[19] = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *a1 = &off_24ED478D8;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 33) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PrimitiveRenderingSystem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PrimitiveRenderingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveRenderingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveRenderingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveRenderingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveRenderingSystem>, this);
}

void re::ecs2::PrimitiveRenderingSystem::~PrimitiveRenderingSystem(re::ecs2::PrimitiveRenderingSystem *this)
{
  re::ecs2::PrimitiveRenderingSystem::~PrimitiveRenderingSystem(this);
  JUMPOUT(0x2276933B8);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED478D8;
  v2 = (re::ecs2::PrimitiveRenderingSystem *)((char *)this + 160);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 520));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 496));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 472));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 448));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 424));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 400));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 376));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 352));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 328));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 304));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 280));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 256));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 232));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 208));
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveRenderingSystem *)((char *)this + 184));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::PrimitiveRenderingSystem::typeInfo(re::ecs2::PrimitiveRenderingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveRenderingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveRenderingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveRenderingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveRenderingSystem>, 0);
}

uint64_t *re::DynamicArray<re::MeshScene>::add(_anonymous_namespace_ *this, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *result;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MeshScene>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  v6 = v5 + 656 * v4;
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[3];
  *(_OWORD *)(v6 + 32) = a2[2];
  *(_OWORD *)(v6 + 48) = v9;
  *(_OWORD *)v6 = v7;
  *(_OWORD *)(v6 + 16) = v8;
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[7];
  *(_OWORD *)(v6 + 96) = a2[6];
  *(_OWORD *)(v6 + 112) = v12;
  *(_OWORD *)(v6 + 64) = v10;
  *(_OWORD *)(v6 + 80) = v11;
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[11];
  *(_OWORD *)(v6 + 160) = a2[10];
  *(_OWORD *)(v6 + 176) = v15;
  *(_OWORD *)(v6 + 128) = v13;
  *(_OWORD *)(v6 + 144) = v14;
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[15];
  *(_OWORD *)(v6 + 224) = a2[14];
  *(_OWORD *)(v6 + 240) = v18;
  *(_OWORD *)(v6 + 192) = v16;
  *(_OWORD *)(v6 + 208) = v17;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  result = re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(v6 + 256), (uint64_t *)a2 + 32);
  *(_DWORD *)(v6 + 320) = *((_DWORD *)a2 + 80);
  v20 = *((unsigned __int8 *)a2 + 328);
  *(_BYTE *)(v6 + 328) = v20;
  if (v20)
    *(_QWORD *)(v5 + 656 * v4 + 336) = *((_QWORD *)a2 + 42);
  v21 = v5 + 656 * v4;
  *(_OWORD *)(v21 + 344) = *(__int128 *)((char *)a2 + 344);
  v22 = *(__int128 *)((char *)a2 + 360);
  v23 = *(__int128 *)((char *)a2 + 376);
  v24 = *(__int128 *)((char *)a2 + 408);
  *(_OWORD *)(v21 + 392) = *(__int128 *)((char *)a2 + 392);
  *(_OWORD *)(v21 + 408) = v24;
  *(_OWORD *)(v21 + 360) = v22;
  *(_OWORD *)(v21 + 376) = v23;
  v25 = *(__int128 *)((char *)a2 + 424);
  v26 = *(__int128 *)((char *)a2 + 440);
  v27 = *(__int128 *)((char *)a2 + 472);
  *(_OWORD *)(v21 + 456) = *(__int128 *)((char *)a2 + 456);
  *(_OWORD *)(v21 + 472) = v27;
  *(_OWORD *)(v21 + 424) = v25;
  *(_OWORD *)(v21 + 440) = v26;
  v28 = *((unsigned __int8 *)a2 + 496);
  *(_BYTE *)(v21 + 496) = v28;
  if (v28)
  {
    v29 = a2[33];
    v30 = v5 + 656 * v4;
    *(_OWORD *)(v30 + 512) = a2[32];
    *(_OWORD *)(v30 + 528) = v29;
  }
  v31 = v5 + 656 * v4;
  *(_QWORD *)(v31 + 544) = *((_QWORD *)a2 + 68);
  v32 = *((unsigned __int8 *)a2 + 560);
  *(_BYTE *)(v31 + 560) = v32;
  if (v32)
  {
    v33 = (_OWORD *)(v5 + 656 * v4);
    v34 = a2[36];
    v35 = a2[37];
    v36 = a2[39];
    v33[38] = a2[38];
    v33[39] = v36;
    v33[36] = v34;
    v33[37] = v35;
  }
  *(_QWORD *)(v5 + 656 * v4 + 640) = *((_QWORD *)a2 + 80);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::MeshScene>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshScene>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshScene>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::MeshScene>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshScene>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x290uLL))
        {
          v2 = 656 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 656 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 656, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[41 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          v13 = v8[1];
          v14 = v8[3];
          *((_OWORD *)v11 + 2) = v8[2];
          *((_OWORD *)v11 + 3) = v14;
          *(_OWORD *)v11 = v12;
          *((_OWORD *)v11 + 1) = v13;
          v15 = v8[4];
          v16 = v8[5];
          v17 = v8[7];
          *((_OWORD *)v11 + 6) = v8[6];
          *((_OWORD *)v11 + 7) = v17;
          *((_OWORD *)v11 + 4) = v15;
          *((_OWORD *)v11 + 5) = v16;
          v18 = v8[8];
          v19 = v8[9];
          v20 = v8[11];
          *((_OWORD *)v11 + 10) = v8[10];
          *((_OWORD *)v11 + 11) = v20;
          *((_OWORD *)v11 + 8) = v18;
          *((_OWORD *)v11 + 9) = v19;
          v21 = v8[12];
          v22 = v8[13];
          v23 = v8[15];
          *((_OWORD *)v11 + 14) = v8[14];
          *((_OWORD *)v11 + 15) = v23;
          *((_OWORD *)v11 + 12) = v21;
          *((_OWORD *)v11 + 13) = v22;
          *((_OWORD *)v11 + 18) = 0u;
          *((_OWORD *)v11 + 19) = 0u;
          *((_OWORD *)v11 + 16) = 0u;
          *((_OWORD *)v11 + 17) = 0u;
          v24 = v8 + 16;
          re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap(v11 + 32, (uint64_t *)v8 + 32);
          *((_DWORD *)v11 + 80) = *((_DWORD *)v8 + 80);
          v25 = *((unsigned __int8 *)v8 + 328);
          *((_BYTE *)v11 + 328) = v25;
          if (v25)
            v11[42] = *((_QWORD *)v8 + 42);
          *(_OWORD *)(v11 + 43) = *(__int128 *)((char *)v8 + 344);
          v26 = *(__int128 *)((char *)v8 + 360);
          v27 = *(__int128 *)((char *)v8 + 376);
          v28 = *(__int128 *)((char *)v8 + 392);
          *(_OWORD *)(v11 + 51) = *(__int128 *)((char *)v8 + 408);
          *(_OWORD *)(v11 + 49) = v28;
          *(_OWORD *)(v11 + 47) = v27;
          *(_OWORD *)(v11 + 45) = v26;
          v29 = *(__int128 *)((char *)v8 + 424);
          v30 = *(__int128 *)((char *)v8 + 440);
          v31 = *(__int128 *)((char *)v8 + 456);
          *(_OWORD *)(v11 + 59) = *(__int128 *)((char *)v8 + 472);
          *(_OWORD *)(v11 + 57) = v31;
          *(_OWORD *)(v11 + 55) = v30;
          *(_OWORD *)(v11 + 53) = v29;
          v32 = *((unsigned __int8 *)v8 + 496);
          *((_BYTE *)v11 + 496) = v32;
          if (v32)
          {
            v33 = v8[33];
            *((_OWORD *)v11 + 32) = v8[32];
            *((_OWORD *)v11 + 33) = v33;
          }
          v11[68] = *((_QWORD *)v8 + 68);
          v34 = *((unsigned __int8 *)v8 + 560);
          *((_BYTE *)v11 + 560) = v34;
          if (v34)
          {
            v35 = v8[36];
            v36 = v8[37];
            v37 = v8[39];
            *((_OWORD *)v11 + 38) = v8[38];
            *((_OWORD *)v11 + 39) = v37;
            *((_OWORD *)v11 + 36) = v35;
            *((_OWORD *)v11 + 37) = v36;
          }
          v11[80] = *((_QWORD *)v8 + 80);
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(v8 + 16));
          v8 += 41;
          v11 += 82;
        }
        while (v24 + 25 != v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshScene>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 656 * v4;
        v6 = v3 + 256;
        do
        {
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v6);
          v6 += 656;
          v5 -= 656;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 96 * v4;
        do
        {
          re::DynamicArray<re::PrimitiveMeshAttribute>::deinit(v3);
          v3 += 96;
          v5 -= 96;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::PrimitiveMeshAttribute>::deinit(uint64_t a1)
{
  uint64_t result;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::StringID **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 6;
        do
        {
          v6 = (void *)*((_QWORD *)v3 + 3);
          if (v6)
          {

            *((_QWORD *)v3 + 3) = 0;
          }
          re::StringID::destroyString(v3);
          v3 = (re::StringID *)((char *)v3 + 64);
          v5 -= 64;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::StringID **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::StringID *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry(re::PrimitiveRenderingDynamicGeometry *this)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t j;
  _QWORD *v7;
  uint64_t v8;
  uint64_t k;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = *((_QWORD *)this + 127);
  if (v2)
  {
    if (*((_QWORD *)this + 131))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 131) = 0;
    *((_QWORD *)this + 128) = 0;
    *((_QWORD *)this + 129) = 0;
    *((_QWORD *)this + 127) = 0;
    ++*((_DWORD *)this + 260);
  }
  for (i = 0; i != -160; i -= 40)
  {
    v4 = (_QWORD *)((char *)this + i);
    v5 = *(_QWORD *)((char *)this + i + 976);
    if (v5)
    {
      if (v4[126])
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      v4[126] = 0;
      v4[123] = 0;
      v4[124] = 0;
      v4[122] = 0;
      ++*(_DWORD *)((char *)this + i + 1000);
    }
  }
  for (j = 0; j != -160; j -= 40)
  {
    v7 = (_QWORD *)((char *)this + j);
    v8 = *(_QWORD *)((char *)this + j + 816);
    if (v8)
    {
      if (v7[106])
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      v7[106] = 0;
      v7[103] = 0;
      v7[104] = 0;
      v7[102] = 0;
      ++*(_DWORD *)((char *)this + j + 840);
    }
  }
  for (k = 656; k != 496; k -= 40)
    re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)this + k);
  v10 = 280;
  do
  {
    v11 = (char *)this + v10;
    v12 = *(_QWORD *)((char *)this + v10 - 40);
    if (v12)
    {
      if (*((_QWORD *)v11 - 1))
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      *((_QWORD *)v11 - 1) = 0;
      *(_QWORD *)((char *)this + v10 - 32) = 0;
      *(_QWORD *)((char *)this + v10 - 24) = 0;
      *(_QWORD *)((char *)this + v10 - 40) = 0;
      ++*(_DWORD *)((char *)this + v10 - 16);
    }
    v10 -= 40;
  }
  while (v10);
}

id re::internal::defaultRetain<re::ecs2::PrimitiveRenderingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveRenderingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_NetworkEntityState(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_152);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_152))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107178, 0);
    *(uint64_t *)((char *)&qword_254107188 + 6) = 0;
    qword_254107188 = 0;
    qword_254107198 = 0;
    qword_2541071A0 = 0xFFFFFFFFLL;
    qword_254107178 = (uint64_t)&off_24ED7DAA8;
    qword_2541071A8 = (uint64_t)"NetworkEntityState";
    dword_2541071B0 = 0;
    unk_2541071B8 = 0u;
    unk_2541071C8 = 0u;
    unk_2541071D8 = 0u;
    qword_2541071E8 = 0;
    __cxa_guard_release(&_MergedGlobals_152);
  }
  return &qword_254107178;
}

void re::ecs2::initInfo_NetworkEntityState(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0xEC448F177CEECF00;
  v27[1] = "NetworkEntityState";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_254107148);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107148);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254107150 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_uint64_t((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "entityId";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254107158 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint64_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "parentGuid";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x1800000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254107160 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "active";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x2000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254107168 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::ecs2::introspect_NetworkShareMode((re::ecs2 *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "shareMode";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x2100000006;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254107170 = v25;
      __cxa_guard_release(&qword_254107148);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254107150;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkEntityState>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkEntityState>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkEntityState>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkEntityState>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

void re::internal::defaultConstruct<re::ecs2::NetworkEntityState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 512;
}

void re::internal::defaultDestruct<re::ecs2::NetworkEntityState>(int a1, int a2, re::StringID *this)
{
  re::StringID::destroyString(this);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::NetworkEntityState>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = &str_110;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_WORD *)(result + 32) = 512;
  return result;
}

uint64_t re::ecs2::NetworkEntityState::makeSyncInfo(re::ecs2::NetworkEntityState *this)
{
  uint64_t v1;
  unsigned __int8 v2;
  __guard *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetTypeId();
  if ((v2 & 1) == 0)
  {
    if (v5)
    {
      re::introspect<re::ecs2::NetworkEntityState>(void)::info = re::internal::getOrCreateInfo((re::internal *)"NetworkEntityState", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkEntityState, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkEntityState, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkEntityState>, 0);
    }
  }
  re::getPrettyTypeName((re *)v3[390], (const re::IntrospectionBase *)&v6);
  RESyncSyncableTypeInfoSetDebugName();
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  RESyncSyncableTypeInfoSetSupportsOwnershipTransfer();
  RESyncSyncableTypeInfoSetSupportsViews();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadDeltaCb();
  RESyncSyncableTypeInfoSetReadPayloadDeltaCb();
  return v1;
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD v7[2];
  _anonymous_namespace_ *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  v8 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  v9 = 0;
  v10 = 0;
  v11 = a2;
  v12 = _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb_EN3__08__invokeEPvPhm;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  re::DynamicString::setCapacity(&v13, 0);
  v17 = 6;
  v18 = 0;
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v8);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,unsigned long long>((re::snapshot::EncoderOPACK *)&v8, (uint64_t *)(a3 + 16));
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned long long>((re::snapshot::EncoderOPACK *)&v8, (uint64_t *)(a3 + 24));
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,BOOL>((re::snapshot::EncoderOPACK *)&v8, (unsigned __int8 *)(a3 + 32));
  v5 = strlen(*(const char **)(a3 + 8));
  if (v5)
  {
    v7[0] = *(_QWORD *)(a3 + 8);
    v7[1] = v5;
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<5,re::Slice<unsigned char>>((re::snapshot::EncoderOPACK *)&v8, (uint64_t)v7);
  }
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<6,re::ecs2::NetworkShareMode>((re::snapshot::EncoderOPACK *)&v8, (unsigned __int8 *)(a3 + 33));
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v8);
  RESyncBitWriterCloseBuffer();
  if (v13 && (v14 & 1) != 0)
    (*(void (**)(void))(*v13 + 40))();
  return 1;
}

unsigned int *re::snapshot::EncoderOPACK::beginObject(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = this[2];
  if (v2 < this[3])
    goto LABEL_2;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v2 + 1);
  if ((_DWORD)this)
  {
    LODWORD(v2) = v1[2];
LABEL_2:
    v3 = *(_QWORD *)v1;
    v1[2] = v2 + 1;
    *(_BYTE *)(v3 + v2) = -17;
  }
  return this;
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,unsigned long long>(re::snapshot::EncoderOPACK *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 1);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 9;
  }
  return re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, *a2);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned long long>(re::snapshot::EncoderOPACK *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 2);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 10;
  }
  return re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, *a2);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,BOOL>(re::snapshot::EncoderOPACK *this, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 3);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 11;
  }
  return re::snapshot::EncoderOPACK::operator<<((unsigned int *)this, *a2);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<5,re::Slice<unsigned char>>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 5);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 13;
  }
  re::snapshot::EncoderOPACK::beginData((unsigned int *)this, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 8));
  return re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, *(void **)a2, *(_QWORD *)(a2 + 8));
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<6,re::ecs2::NetworkShareMode>(re::snapshot::EncoderOPACK *this, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 6);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 14;
  }
  return re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, *a2);
}

unsigned int *re::snapshot::EncoderOPACK::endObject(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  v2 = this[2];
  if (v2 < this[3])
    goto LABEL_2;
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v2 + 1);
  if ((_DWORD)this)
  {
    LODWORD(v2) = v1[2];
LABEL_2:
    v3 = *(_QWORD *)v1;
    v1[2] = v2 + 1;
    *(_BYTE *)(v3 + v2) = 3;
  }
  return this;
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unsigned int v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  const char *v18;
  size_t v19;
  uint64_t v20[4];
  int v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[2];

  v4 = RESyncBitReaderDataPtr();
  v5 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  v6 = v5;
  v7 = v5;
  v20[0] = v4;
  v20[1] = v7;
  v21 = -1;
  v22 = 0;
  v23 = 0;
  v25 = 0;
  v20[2] = v4;
  v20[3] = v4 + v6;
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v20, 0);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,unsigned long long>((uint64_t)v20, a3 + 2);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v20, a3 + 3);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v20, (_BYTE *)a3 + 32);
  v18 = 0;
  v19 = 0;
  v8 = (_anonymous_namespace_ *)re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v20, (uint64_t *)&v18);
  v9 = v18;
  v10 = v19;
  v16 = 0;
  v17 = &str_110;
  v11 = v16;
  v12 = (uint64_t)v17;
  v16 = 0;
  v17 = &str_110;
  v13 = *a3;
  v14 = a3[1];
  *a3 = v11;
  a3[1] = v12;
  v26[0] = v11 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v26[1] = v14;
  re::StringID::destroyString((re::StringID *)v26);
  re::StringID::destroyString((re::StringID *)&v16);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v20, (_BYTE *)a3 + 33);
  re::snapshot::DecoderOPACK::endObject(v20, 0);
  RESyncBitReaderSkipData();
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,unsigned long long>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  result = re::snapshot::DecoderOPACK::advanceTo<1>(a1);
  if ((_DWORD)result)
  {
    *a2 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24) || (v6 = *v5, v6 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  result = re::snapshot::DecoderOPACK::advanceTo<2>(a1);
  if ((_DWORD)result)
  {
    *a2 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24) || (v6 = *v5, v6 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  result = re::snapshot::DecoderOPACK::advanceTo<3>(a1);
  if ((_DWORD)result)
  {
    re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, a2);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24) || (v6 = *v5, v6 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  __int128 v9;
  unint64_t v10;

  result = re::snapshot::DecoderOPACK::advanceTo<5>(a1);
  if ((_DWORD)result)
  {
    v10 = 0;
    if ((re::snapshot::DecoderOPACK::beginData((re::snapshot::DecoderOPACK *)a1, &v10, 0) & 1) != 0)
    {
      v9 = *(_OWORD *)a1;
      v5 = v10;
      *a2 = re::Slice<unsigned char>::range(&v9, *(_QWORD *)(a1 + 16) - v9, *(_QWORD *)(a1 + 16) - v9 + v10);
      a2[1] = v6;
      v7 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v5);
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v7 = *(unsigned __int8 **)(a1 + 16);
    }
    if ((unint64_t)v7 >= *(_QWORD *)(a1 + 24) || (v8 = *v7, v8 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v8 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v7 + 1;
      result = (v8 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  result = re::snapshot::DecoderOPACK::advanceTo<6>(a1);
  if ((_DWORD)result)
  {
    *a2 = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24) || (v6 = *v5, v6 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

void ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  re *v6;
  NSObject *v7;
  uint8_t v8[16];

  v4 = RESyncBitReaderBytesLeft();
  v5 = RESyncBitReaderDataPtr();
  v6 = (re *)MEMORY[0x227691F24](a3, v5, v4);
  if ((v6 & 1) == 0)
  {
    v7 = *re::ecsNetworkLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "WritePayloadCb: Error copying snapshot to packet", v8, 2u);
    }
  }
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_13(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  re *v6;
  NSObject *v7;
  uint8_t v9[16];

  v4 = RESyncBitReaderBytesLeft();
  v5 = RESyncBitReaderDataPtr();
  v6 = (re *)MEMORY[0x227691F24](a3, v5, v4);
  if ((v6 & 1) == 0)
  {
    v7 = *re::ecsNetworkLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
      _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "ReadPayloadCb: Error copying payload to snapshot", v9, 2u);
    }
  }
  RESyncBitReaderSkipData();
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _anonymous_namespace_ *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  unsigned __int8 v14;
  unsigned __int8 v15;
  char *__s1;
  size_t __n;
  char *__s2;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _anonymous_namespace_ *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t (*v28)();
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[4];
  int v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42[4];
  int v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  v5 = RESyncBitReaderDataPtr();
  v6 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  v7 = v6;
  v8 = v6;
  v42[0] = v5;
  v42[1] = v8;
  v43 = -1;
  v44 = 0;
  v45 = 0;
  v47 = 0;
  v42[2] = v5;
  v42[3] = v5 + v7;
  v9 = RESyncBitReaderDataPtr();
  v10 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  v11 = v10;
  v12 = v10;
  v37 = -1;
  v38 = 0;
  v39 = 0;
  v41 = 0;
  v36[1] = v12;
  v36[2] = v9;
  v36[3] = v9 + v11;
  v35 = 0;
  v36[0] = v9;
  v24 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  v25 = 0;
  v26 = 0;
  v27 = a4;
  v28 = _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb0_EN3__18__invokeEPvPhm;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  re::DynamicString::setCapacity(&v29, 0);
  v33 = 6;
  v34 = 0;
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v42, 0);
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v36, 0);
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v24);
  v23 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v36, &v23);
  v22 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v42, &v22);
  if (v22 != v23)
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned long long>((re::snapshot::EncoderOPACK *)&v24, &v22);
  v21 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v36, &v21);
  v20 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v42, &v20);
  if (v21 != v20)
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,BOOL>((re::snapshot::EncoderOPACK *)&v24, &v20);
  __s2 = 0;
  v19 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v36, (uint64_t *)&__s2);
  __s1 = 0;
  __n = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v42, (uint64_t *)&__s1);
  if (__n != v19 || __n && strncmp(__s1, __s2, __n))
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<5,re::Slice<unsigned char>>((re::snapshot::EncoderOPACK *)&v24, (uint64_t)&__s1);
  v15 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v36, &v15);
  v14 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v42, &v14);
  if (v15 != v14)
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<6,re::ecs2::NetworkShareMode>((re::snapshot::EncoderOPACK *)&v24, &v14);
  re::snapshot::DecoderOPACK::endObject(v42, 0);
  re::snapshot::DecoderOPACK::endObject(v36, 0);
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v24);
  RESyncBitWriterCloseBuffer();
  result = (uint64_t)v29;
  if (v29)
  {
    if ((v30 & 1) != 0)
      return (*(uint64_t (**)(void))(*v29 + 40))();
  }
  return result;
}

uint64_t ___ZN2re4ecs218NetworkEntityState12makeSyncInfoEv_block_invoke_2_21(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _anonymous_namespace_ *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  int IsOverflow;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[4];
  int v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38[4];
  int v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;

  v5 = RESyncBitReaderDataPtr();
  v6 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  v7 = v6;
  v8 = v6;
  v38[0] = v5;
  v38[1] = v8;
  v39 = -1;
  v40 = 0;
  v41 = 0;
  v43 = 0;
  v38[2] = v5;
  v38[3] = v5 + v7;
  v9 = RESyncBitReaderDataPtr();
  v10 = (_anonymous_namespace_ *)RESyncBitReaderBytesLeft();
  LODWORD(v5) = (_DWORD)v10;
  v11 = v10;
  v32[0] = v9;
  v32[1] = v11;
  v33 = -1;
  v34 = 0;
  v35 = 0;
  v37 = 0;
  v32[2] = v9;
  v32[3] = v9 + v5;
  v31 = 0;
  v20 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  v21 = 0;
  v22 = 0;
  v23 = a4;
  v24 = _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb1_EN3__28__invokeEPvPhm;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  re::DynamicString::setCapacity(&v25, 0);
  v29 = 6;
  v30 = 0;
  re::snapshot::EncoderOPACK::beginObject((unsigned int *)&v20);
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v38, 0);
  re::snapshot::DecoderOPACK::beginObject((re::snapshot::DecoderOPACK *)v32, 0);
  v19 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,unsigned long long>((uint64_t)v38, &v19);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,unsigned long long>((re::snapshot::EncoderOPACK *)&v20, &v19);
  v18 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v38, &v18);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,unsigned long long>((uint64_t)v32, &v18);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,unsigned long long>((re::snapshot::EncoderOPACK *)&v20, &v18);
  v17 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v38, &v17);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,BOOL>((uint64_t)v32, &v17);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,BOOL>((re::snapshot::EncoderOPACK *)&v20, &v17);
  v15 = 0;
  v16 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v38, &v15);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<5,re::Slice<unsigned char>>((uint64_t)v32, &v15);
  if (v16)
    re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<5,re::Slice<unsigned char>>((re::snapshot::EncoderOPACK *)&v20, (uint64_t)&v15);
  v14 = 0;
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v38, &v14);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<6,re::ecs2::NetworkShareMode>((uint64_t)v32, &v14);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<6,re::ecs2::NetworkShareMode>((re::snapshot::EncoderOPACK *)&v20, &v14);
  re::snapshot::EncoderOPACK::endObject((unsigned int *)&v20);
  re::snapshot::DecoderOPACK::endObject(v38, 0);
  re::snapshot::DecoderOPACK::endObject(v32, 0);
  RESyncBitWriterCloseBuffer();
  RESyncBitReaderSkipData();
  IsOverflow = RESyncBitReaderIsOverflow();
  if (v25 && (v26 & 1) != 0)
    (*(void (**)(void))(*v25 + 40))();
  return IsOverflow ^ 1u;
}

uint64_t _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb_EN3__08__invokeEPvPhm()
{
  return RESyncBitWriterGrowBuffer();
}

uint64_t re::snapshot::Encoder::grow(re::snapshot::Encoder *this, unint64_t a2)
{
  const void *v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  v4 = (const void *)(*((uint64_t (**)(_QWORD, _QWORD, unint64_t))this + 3))(*((_QWORD *)this + 2), *(_QWORD *)this, a2);
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 3) = v5;
  if (v4)
    v6 = a2 > v5;
  else
    v6 = 1;
  v7 = !v6;
  if (v6)
    re::snapshot::Encoder::error(this, "couldn't grow buffer to %zu bytes (buffer = %p, capacity = %d)", a2, v4, v5);
  return v7;
}

uint64_t _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb0_EN3__18__invokeEPvPhm()
{
  return RESyncBitWriterGrowBuffer();
}

uint64_t _ZZZN2re4ecs218NetworkEntityState12makeSyncInfoEvEUb1_EN3__28__invokeEPvPhm()
{
  return RESyncBitWriterGrowBuffer();
}

unsigned int *re::snapshot::Encoder::writeRaw<true>(unsigned int *this, void *__src, size_t __len)
{
  unsigned int *v5;
  uint64_t v6;

  v5 = this;
  v6 = this[2];
  if (v6 + __len <= this[3])
  {
    if (!__len)
    {
LABEL_4:
      v5[2] = v6 + __len;
      return this;
    }
LABEL_3:
    this = (unsigned int *)memmove((void *)(*(_QWORD *)v5 + v6), __src, __len);
    LODWORD(v6) = v5[2];
    goto LABEL_4;
  }
  this = (unsigned int *)re::snapshot::Encoder::grow((re::snapshot::Encoder *)this, v6 + __len);
  if ((_DWORD)this)
  {
    LODWORD(v6) = v5[2];
    if (!__len)
      goto LABEL_4;
    goto LABEL_3;
  }
  return this;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<1>(uint64_t a1)
{
  int Integer;
  int v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 0)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
      {
        v4 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v5 + 1;
        v4 = *v5;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      v6 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v6 >= *(_QWORD *)(a1 + 24))
        break;
      v3 = *v6;
      if (v3 == 3)
        break;
      if ((v3 - 7) > 0x28)
      {
        Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v6 + 1;
        Integer = v3 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 1)
        return Integer == 1;
    }
    Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 1;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<2>(uint64_t a1)
{
  int Integer;
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  int v6;

  Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 1)
  {
    while (1)
    {
      v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(_QWORD *)(a1 + 24))
      {
        v4 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v3 + 1;
        v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
        break;
      v6 = *v5;
      if (v6 == 3)
        break;
      if ((v6 - 7) > 0x28)
      {
        Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v5 + 1;
        Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 2)
        return Integer == 2;
    }
    Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 2;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<3>(uint64_t a1)
{
  int Integer;
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  int v6;

  Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 2)
  {
    while (1)
    {
      v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(_QWORD *)(a1 + 24))
      {
        v4 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v3 + 1;
        v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
        break;
      v6 = *v5;
      if (v6 == 3)
        break;
      if ((v6 - 7) > 0x28)
      {
        Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v5 + 1;
        Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 3)
        return Integer == 3;
    }
    Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 3;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<5>(uint64_t a1)
{
  int Integer;
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  int v6;

  Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 4)
  {
    while (1)
    {
      v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(_QWORD *)(a1 + 24))
      {
        v4 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v3 + 1;
        v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
        break;
      v6 = *v5;
      if (v6 == 3)
        break;
      if ((v6 - 7) > 0x28)
      {
        Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v5 + 1;
        Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 5)
        return Integer == 5;
    }
    Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 5;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<6>(uint64_t a1)
{
  int Integer;
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  int v6;

  Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 5)
  {
    while (1)
    {
      v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(_QWORD *)(a1 + 24))
      {
        v4 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v3 + 1;
        v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
        break;
      v6 = *v5;
      if (v6 == 3)
        break;
      if ((v6 - 7) > 0x28)
      {
        Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v5 + 1;
        Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 6)
        return Integer == 6;
    }
    Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 6;
}

uint64_t re::internal::CharacterControllerHitCallback::controllerHit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::EventBus *v10;
  uint64_t v11;
  __int128 v12;
  __guard Type;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v4)
    goto LABEL_8;
  v5 = (id)(v4 + 8);
  v6 = v4;
  do
  {
    v7 = v6;
    v6 = *(_QWORD *)(v6 + 24);
  }
  while (v6);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = v4;
    do
    {
      v9 = v8;
      v8 = *(_QWORD *)(v8 + 24);
    }
    while (v8);
    v10 = *(re::EventBus **)(*(_QWORD *)(v9 + 16) + 288);
  }
  else
  {
LABEL_8:
    v10 = 0;
  }
  v11 = *(_QWORD *)(a2 + 8);
  v15[0] = *(_QWORD *)a1;
  v15[1] = v11;
  v12 = *(_OWORD *)(a2 + 32);
  v16 = *(_OWORD *)(a2 + 16);
  v17 = v12;
  v18 = *(_OWORD *)(a2 + 48);
  v19 = *(_DWORD *)(a2 + 64);
  Type = re::EventBus::getTypeId<RECharacterControllerDidHitEvent>();
  re::EventBus::publish(v10, v4, Type, (uint64_t)v15, 0x50uLL, 0);
  if (v4)

  return 0;
}

uint64_t *re::ecs2::allocInfo_CharacterControllerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541071F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541071F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107228, 0);
    *(uint64_t *)((char *)&qword_254107238 + 6) = 0;
    qword_254107238 = 0;
    qword_254107248 = 0;
    qword_254107250 = 0xFFFFFFFFLL;
    qword_254107228 = (uint64_t)&off_24ED7DAA8;
    qword_254107258 = (uint64_t)"CharacterControllerComponent";
    dword_254107260 = 0;
    xmmword_254107268 = 0u;
    unk_254107278 = 0u;
    xmmword_254107288 = 0u;
    qword_254107298 = 0;
    __cxa_guard_release(&qword_2541071F8);
  }
  return &qword_254107228;
}

void re::ecs2::initInfo_CharacterControllerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0xD5FAC35167B7DF0;
  v13[1] = "CharacterControllerComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_153);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_153);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107218 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_CharacterControllerDescription((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_controllerDesc";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254107220 = v11;
      __cxa_guard_release(&_MergedGlobals_153);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254107218;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CharacterControllerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CharacterControllerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CharacterControllerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CharacterControllerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

uint64_t re::internal::defaultConstruct<re::ecs2::CharacterControllerComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::CharacterControllerComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CharacterControllerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CharacterControllerComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CharacterControllerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CharacterControllerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CharacterControllerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CharacterControllerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CharacterControllerComponent>, this);
}

uint64_t *re::ecs2::allocInfo_CharacterControllerStateComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254107210);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107210))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541072A0, 0);
    *(uint64_t *)((char *)&qword_2541072B0 + 6) = 0;
    qword_2541072B0 = 0;
    qword_2541072C0 = 0;
    qword_2541072C8 = 0xFFFFFFFFLL;
    qword_2541072A0 = (uint64_t)&off_24ED7DAA8;
    qword_2541072D0 = (uint64_t)"CharacterControllerStateComponent";
    dword_2541072D8 = 0;
    xmmword_2541072E0 = 0u;
    unk_2541072F0 = 0u;
    xmmword_254107300 = 0u;
    qword_254107310 = 0;
    __cxa_guard_release(&qword_254107210);
  }
  return &qword_2541072A0;
}

void re::ecs2::initInfo_CharacterControllerStateComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x12A2C497EF14DCA2;
  v10[1] = "CharacterControllerStateComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254107208);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107208);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107200 = v8;
      __cxa_guard_release(&qword_254107208);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254107200;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CharacterControllerStateComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CharacterControllerStateComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CharacterControllerStateComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CharacterControllerStateComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::CharacterControllerStateComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED47D38;
}

uint64_t re::internal::defaultDestruct<re::ecs2::CharacterControllerStateComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::CharacterControllerStateComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED47D38;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CharacterControllerStateComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CharacterControllerStateComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CharacterControllerStateComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CharacterControllerStateComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CharacterControllerStateComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CharacterControllerStateComponent>, this);
}

uint64_t *re::ecs2::CharacterControllerComponent::removeFromSimulation(uint64_t *this)
{
  uint64_t *v1;
  id *v2;
  _QWORD *WeakRetained;
  void *v4;
  uint64_t v5;
  re::CollisionObject *v6;
  void (***v7)(uint64_t);
  uint64_t v8;

  if (this[10])
  {
    v1 = this;
    v2 = (id *)(this + 4);
    WeakRetained = objc_loadWeakRetained((id *)this + 4);
    if (WeakRetained)
    {
      v4 = WeakRetained;
      v5 = WeakRetained[6];
      v6 = *(re::CollisionObject **)(v1[10] + 136);
      re::ContactSetCollection::remove(*(_QWORD *)(v5 + 128) + 72, v6);
      (*(void (**)(_QWORD, re::CollisionObject *))(**(_QWORD **)(v5 + 128) + 200))(*(_QWORD *)(v5 + 128), v6);
      *((_QWORD *)v6 + 7) = 0;
      objc_destroyWeak(v2);
      v1[4] = 0;

    }
    this = re::globalAllocators((re *)WeakRetained);
    v7 = (void (***)(uint64_t))v1[10];
    if (v7)
    {
      v8 = this[2];
      (**v7)(v1[10]);
      this = (uint64_t *)(*(uint64_t (**)(uint64_t, void (***)(uint64_t)))(*(_QWORD *)v8 + 40))(v8, v7);
    }
    v1[10] = 0;
  }
  return this;
}

double re::ecs2::CharacterControllerComponent::updateController(re::ecs2::CharacterControllerComponent *this, re::ecs2::PhysicsSimulationData *a2)
{
  uint64_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  uint64_t v21;
  float32x4_t v22;
  BOOL v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  re *v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  int8x16_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  double result;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _anonymous_namespace_ *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v79;
  uint64_t v80;
  float32x4_t *v81;
  uint64_t v82;
  re::ecs2::NetworkComponent *v83;
  uint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  __int128 v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x4_t v109;
  uint64_t v110;
  float32x4_t v111;
  unsigned __int8 v112;
  char v113;
  uint64_t v115;
  _OWORD *v116;
  __int128 v117;
  uint64_t v118;
  _OWORD *v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  __int128 v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  __n128 v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int32x4_t v139;
  float32x4_t v140[2];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  float32x4_t v145;
  float32x4_t v146;
  int8x16_t v147;
  float32x4_t v148;
  _BYTE v149[39];
  uint64_t v150;
  simd_float3x3 v151;
  simd_float3x3 v152;
  simd_float3x3 v153;
  simd_float4x4 v154;

  v150 = *MEMORY[0x24BDAC8D0];
  re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(a2);
  re::ecs2::TransformComponent::parentWorldMatrix4x4F(*((re::ecs2::TransformComponent **)this + 2), (const re::ecs2::Entity *)1, v149);
  re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace((float32x4_t *)a2, (uint64_t)v149, &v141);
  v4 = *((_QWORD *)this + 10);
  if (v4)
  {
    v154 = __invert_f4(*(simd_float4x4 *)(v4 + 272));
    v124 = (float32x4_t)v154.columns[0];
    v125 = (float32x4_t)v154.columns[1];
    v126 = (float32x4_t)v154.columns[2];
    v132 = (float32x4_t)v154.columns[3];
    (*(void (**)(_BYTE *__return_ptr))(**((_QWORD **)this + 10) + 40))(v149);
    v133 = vaddq_f32(v132, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v124, *(float *)v149), v125, *(float32x2_t *)v149, 1), v126, *(float32x4_t *)v149, 2));
    v127 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 3);
    v5 = (int32x4_t)vmulq_f32(v124, v124);
    v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
    v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
    v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
    v151.columns[0] = (simd_float3)vmulq_n_f32(v124, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
    v8 = vmulq_f32(v125, (float32x4_t)v151.columns[0]);
    v9 = vmulq_f32((float32x4_t)v151.columns[0], (float32x4_t)v151.columns[0]);
    v9.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0];
    v10 = vsubq_f32(v125, vmulq_n_f32((float32x4_t)v151.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]/ v9.f32[0]));
    v11 = (int32x4_t)vmulq_f32(v10, v10);
    v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
    v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
    v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
    v11.i32[0] = vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).u32[0];
    v14 = vmulq_f32(v126, (float32x4_t)v151.columns[0]);
    v151.columns[1] = (simd_float3)vmulq_n_f32(v10, *(float *)v11.i32);
    v15 = vsubq_f32(v126, vmulq_n_f32((float32x4_t)v151.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]/ v9.f32[0]));
    v16 = vmulq_f32(v126, (float32x4_t)v151.columns[1]);
    v17 = vmulq_f32((float32x4_t)v151.columns[1], (float32x4_t)v151.columns[1]);
    v18 = vsubq_f32(v15, vmulq_n_f32((float32x4_t)v151.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]));
    v19 = (int32x4_t)vmulq_f32(v18, v18);
    v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
    *(float32x2_t *)v17.f32 = vrsqrte_f32((float32x2_t)v19.u32[0]);
    *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32)));
    v151.columns[2] = (simd_float3)vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32))).f32[0]);
    *(double *)_Q0.i64 = simd_quaternion(v151);
    v72 = vdivq_f32(v133, v127);
    v73 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)&v149[16], *(int32x4_t *)&v149[16]), *(int8x16_t *)&v149[16], 0xCuLL), vnegq_f32(_Q0)), *(float32x4_t *)&v149[16], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    _S2 = *(_DWORD *)&v149[28];
    v79 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), v73, 0xCuLL), *(float32x4_t *)&v149[16], _Q0, 3), _Q0, *(float32x4_t *)&v149[16], 3);
    __asm { FMLA            S1, S2, V0.S[3] }
    v79.i32[3] = _S1;
    v80 = *((_QWORD *)this + 2);
    v81 = *(float32x4_t **)(v80 + 240);
    if (!v81)
    {
      v130 = v79;
      v136 = v72;
      v82 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v80 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v79 = v130;
      v72 = v136;
      v81 = (float32x4_t *)v82;
    }
    v81[3] = v79;
    v81[4] = v72;
    re::ecs2::Component::markDirty(v81);
    v83 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)this + 2) + 200);
    if (v83)
      re::ecs2::NetworkComponent::markDirty(v83, (const re::ecs2::Component *)v81);
LABEL_25:
    v84 = *((_QWORD *)this + 10);
    v85 = *(float32x4_t *)(v84 + 288);
    v145 = *(float32x4_t *)(v84 + 272);
    v146 = v85;
    v86 = *(float32x4_t *)(v84 + 320);
    v147 = *(int8x16_t *)(v84 + 304);
    v148 = v86;
    if (!re::areAlmostEqual<float>(v145.f32, (float *)&v141))
    {
      re::ecs2::TransformComponent::worldMatrix4x4F(*((re::ecs2::TransformComponent ***)this + 2), (const re::ecs2::Entity *)1, v149);
      re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace((float32x4_t *)a2, (uint64_t)v149, &v138);
      v137 = v140[1];
      v87 = vmulq_f32(v138, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v140[0], (int8x16_t)v140[0], 0xCuLL), (int8x16_t)v140[0], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v139, v139), (int8x16_t)v139, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v140[0], (int32x4_t)v140[0]), (int8x16_t)v140[0], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v139, (int8x16_t)v139, 0xCuLL), (int8x16_t)v139, 8uLL)));
      v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).f32[0] <= 0.0;
      v88 = -1.0;
      if (!v23)
        v88 = 1.0;
      v89 = vmulq_f32(v138, v138);
      v90 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1)));
      v90.f32[0] = sqrtf(v90.f32[0]);
      v91 = vmulq_f32((float32x4_t)v139, (float32x4_t)v139);
      v92 = vmulq_f32(v140[0], v140[0]);
      v90.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v91, 2), vaddq_f32(v91, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.f32, 1))).f32[0]);
      v90.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0]);
      v93 = (__int128)vmulq_n_f32(v90, v88);
      v131 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v93, 0);
      v94 = vdivq_f32(v138, v131);
      v95 = vdivq_f32((float32x4_t)v139, (float32x4_t)vdupq_lane_s32((int32x2_t)(v93 >> 32), 0));
      v96 = vdivq_f32(v140[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2));
      v97 = (int32x4_t)vmulq_f32(v94, v94);
      v97.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), vadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1))).u32[0];
      *(float32x2_t *)v90.f32 = vrsqrte_f32((float32x2_t)v97.u32[0]);
      *(float32x2_t *)v90.f32 = vmul_f32(*(float32x2_t *)v90.f32, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32)));
      v153.columns[0] = (simd_float3)vmulq_n_f32(v94, vmul_f32(*(float32x2_t *)v90.f32, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32))).f32[0]);
      v98 = vmulq_f32((float32x4_t)v153.columns[0], v95);
      v99 = vmulq_f32((float32x4_t)v153.columns[0], (float32x4_t)v153.columns[0]);
      v100 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1)));
      v101 = vsubq_f32(v95, vmulq_n_f32((float32x4_t)v153.columns[0], vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))), v100).f32[0]));
      v102 = (int32x4_t)vmulq_f32(v101, v101);
      v102.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v102, 2), vadd_f32(*(float32x2_t *)v102.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1))).u32[0];
      *(float32x2_t *)v91.f32 = vrsqrte_f32((float32x2_t)v102.u32[0]);
      *(float32x2_t *)v91.f32 = vmul_f32(*(float32x2_t *)v91.f32, vrsqrts_f32((float32x2_t)v102.u32[0], vmul_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32)));
      v102.i32[0] = vmul_f32(*(float32x2_t *)v91.f32, vrsqrts_f32((float32x2_t)v102.u32[0], vmul_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32))).u32[0];
      v103 = vmulq_f32((float32x4_t)v153.columns[0], v96);
      v153.columns[1] = (simd_float3)vmulq_n_f32(v101, *(float *)v102.i32);
      v104 = vsubq_f32(v96, vmulq_n_f32((float32x4_t)v153.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v103, 2), vaddq_f32(v103, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 1))).f32[0]/ v100.f32[0]));
      v105 = vmulq_f32(v96, (float32x4_t)v153.columns[1]);
      v106 = vmulq_f32((float32x4_t)v153.columns[1], (float32x4_t)v153.columns[1]);
      v107 = vsubq_f32(v104, vmulq_n_f32((float32x4_t)v153.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), vaddq_f32(v105, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).f32[0]));
      v108 = (int32x4_t)vmulq_f32(v107, v107);
      v108.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v108, 2), vadd_f32(*(float32x2_t *)v108.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1))).u32[0];
      *(float32x2_t *)v106.f32 = vrsqrte_f32((float32x2_t)v108.u32[0]);
      *(float32x2_t *)v106.f32 = vmul_f32(*(float32x2_t *)v106.f32, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32)));
      v153.columns[2] = (simd_float3)vmulq_n_f32(v107, vmul_f32(*(float32x2_t *)v106.f32, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32))).f32[0]);
      *(double *)v109.i64 = simd_quaternion(v153);
      v110 = v109.i64[1];
      v111 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 1);
      v112 = vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v109, v111), (int8x16_t)vcgeq_f32(v111, v109)))).u8[0];
      *(int32x2_t *)v111.f32 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL));
      *(int8x8_t *)v111.f32 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v111.f32), (int8x8_t)vcgez_f32(*(float32x2_t *)v111.f32)));
      v113 = v112 | v111.i8[4] | v111.i8[0];
      _ZF = (v113 & 1) == 0;
      if ((v113 & 1) != 0)
        v115 = 0;
      else
        v115 = v109.i64[0];
      if (!_ZF)
        v110 = 0x3F80000000000000;
      *(float32x4_t *)v149 = v137;
      *(_QWORD *)&v149[16] = v115;
      *(_QWORD *)&v149[24] = v110;
      v116 = (_OWORD *)*((_QWORD *)this + 10);
      v117 = *(_OWORD *)&v149[16];
      v116[1] = v137;
      v116[2] = v117;
      (*(void (**)(_OWORD *, _BYTE *))(*(_QWORD *)v116 + 64))(v116, v149);
      v118 = *(_QWORD *)(*((_QWORD *)this + 10) + 136);
      v138 = v131;
      re::CollisionObject::setScale(v118, &v138);
      v119 = (_OWORD *)*((_QWORD *)this + 10);
      v120 = v142;
      v119[17] = v141;
      v119[18] = v120;
      result = *(double *)&v143;
      v121 = v144;
      v119[19] = v143;
      v119[20] = v121;
    }
    return result;
  }
  v21 = *((_QWORD *)a2 + 1);
  re::ecs2::TransformComponent::worldMatrix4x4F(*((re::ecs2::TransformComponent ***)this + 2), (const re::ecs2::Entity *)1, v149);
  re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace((float32x4_t *)a2, (uint64_t)v149, &v145);
  v134 = v148;
  v22 = vmulq_f32(v145, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v147, v147, 0xCuLL), v147, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v146, (int32x4_t)v146), (int8x16_t)v146, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v147, (int32x4_t)v147), v147, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v146, (int8x16_t)v146, 0xCuLL), (int8x16_t)v146, 8uLL)));
  v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0] <= 0.0;
  v24 = -1.0;
  if (!v23)
    v24 = 1.0;
  v25 = vmulq_f32(v145, v145);
  v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)));
  v26.f32[0] = sqrtf(v26.f32[0]);
  v27 = vmulq_f32(v146, v146);
  v28 = vmulq_f32((float32x4_t)v147, (float32x4_t)v147);
  v26.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
  v26.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
  v128 = (__int128)vmulq_n_f32(v26, v24);
  v29 = vdivq_f32(v145, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v128, 0));
  v30 = vdivq_f32(v146, (float32x4_t)vdupq_lane_s32((int32x2_t)(v128 >> 32), 0));
  v31 = vdivq_f32((float32x4_t)v147, (float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 2));
  v32 = (int32x4_t)vmulq_f32(v29, v29);
  v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
  *(float32x2_t *)v26.f32 = vrsqrte_f32((float32x2_t)v32.u32[0]);
  *(float32x2_t *)v26.f32 = vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32)));
  v152.columns[0] = (simd_float3)vmulq_n_f32(v29, vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32))).f32[0]);
  v33 = vmulq_f32((float32x4_t)v152.columns[0], v30);
  v34 = vmulq_f32((float32x4_t)v152.columns[0], (float32x4_t)v152.columns[0]);
  v35 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)));
  v36 = vsubq_f32(v30, vmulq_n_f32((float32x4_t)v152.columns[0], vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))), v35).f32[0]));
  v37 = (int32x4_t)vmulq_f32(v36, v36);
  v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
  *(float32x2_t *)v27.f32 = vrsqrte_f32((float32x2_t)v37.u32[0]);
  *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32)));
  v37.i32[0] = vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32))).u32[0];
  v38 = vmulq_f32((float32x4_t)v152.columns[0], v31);
  v152.columns[1] = (simd_float3)vmulq_n_f32(v36, *(float *)v37.i32);
  v39 = vsubq_f32(v31, vmulq_n_f32((float32x4_t)v152.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]/ v35.f32[0]));
  v40 = vmulq_f32(v31, (float32x4_t)v152.columns[1]);
  v41 = vmulq_f32((float32x4_t)v152.columns[1], (float32x4_t)v152.columns[1]);
  v42 = vsubq_f32(v39, vmulq_n_f32((float32x4_t)v152.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]));
  v43 = (int32x4_t)vmulq_f32(v42, v42);
  v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
  *(float32x2_t *)v41.f32 = vrsqrte_f32((float32x2_t)v43.u32[0]);
  *(float32x2_t *)v41.f32 = vmul_f32(*(float32x2_t *)v41.f32, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32)));
  v152.columns[2] = (simd_float3)vmulq_n_f32(v42, vmul_f32(*(float32x2_t *)v41.f32, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32))).f32[0]);
  *(double *)v45.i64 = simd_quaternion(v152);
  v46 = v45.i64[1];
  v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1);
  v48 = (int8x16_t)vcgeq_f32(v47, v45);
  v49 = v45.i64[0];
  v50 = vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v45, v47), v48))).u8[0];
  *(int32x2_t *)v45.f32 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL));
  *(int8x8_t *)v45.f32 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v45.f32), (int8x8_t)vcgez_f32(*(float32x2_t *)v45.f32)));
  if (((v50 | (v45.i8[4] | v45.i8[0])) & 1) != 0)
  {
    v49 = 0;
    v46 = 0x3F80000000000000;
  }
  v138 = (float32x4_t)v128;
  v139.i64[0] = v49;
  v139.i64[1] = v46;
  result = *(double *)v134.i64;
  v140[0] = v134;
  if ((v128 & 0x7FFFFFFF) <= 0x7F7FFFFF)
  {
    v48.i32[0] = v128;
    LODWORD(result) = 925353388;
    if (fabsf(*((float *)this + 16) * *(float *)&v128) >= 0.00001
      && fabsf(*((float *)this + 15) * *(float *)&v128) >= 0.00001)
    {
      v52.i64[0] = v49;
      v52.i64[1] = v46;
      v129 = v52;
      v135 = (__n128)v48;
      v54 = re::globalAllocators(v44)[2];
      v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v129, (int32x4_t)v129), (int8x16_t)v129, 0xCuLL);
      v56 = vmlaq_f32(vmulq_f32(v129, (float32x4_t)xmmword_2261027C0), (float32x4_t)xmmword_2260E5F20, v55);
      v57 = (int8x16_t)vaddq_f32(v56, v56);
      v58 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), v57, 0xCuLL);
      v59 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL), vnegq_f32(v129)), v58, v55);
      *(float32x4_t *)v149 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v58, v129, 3), (float32x4_t)xmmword_2260E5F20), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), v59, 0xCuLL));
      v60 = (*(uint64_t (**)(uint64_t, uint64_t, char *, float32x4_t *, _BYTE *, _QWORD, __n128))(*(_QWORD *)v53 + 176))(v53, v54, (char *)this + 40, v140, v149, *(_QWORD *)(v21 + 56), v135);
      v61 = *(_QWORD *)(v60 + 136);
      *(_QWORD *)(v61 + 40) = *((_QWORD *)this + 2);
      *(int32x4_t *)v149 = vdupq_lane_s32((int32x2_t)v135.n128_u64[0], 0);
      re::CollisionObject::setScale(v61, (float32x4_t *)v149);
      v62 = v142;
      *(_OWORD *)(v60 + 272) = v141;
      *(_OWORD *)(v60 + 288) = v62;
      v63 = v144;
      *(_OWORD *)(v60 + 304) = v143;
      *(_OWORD *)(v60 + 320) = v63;
      *((_QWORD *)this + 10) = v60;
      *((float *)this + 16) = (*(float (**)(uint64_t))(*(_QWORD *)v60 + 176))(v60);
      *((float *)this + 15) = (*(float (**)(_QWORD))(**((_QWORD **)this + 10) + 192))(*((_QWORD *)this + 10));
      *((float *)this + 10) = (*(float (**)(_QWORD))(**((_QWORD **)this + 10) + 112))(*((_QWORD *)this + 10));
      *((float *)this + 12) = (*(float (**)(_QWORD))(**((_QWORD **)this + 10) + 144))(*((_QWORD *)this + 10));
      *((float *)this + 11) = (*(float (**)(_QWORD))(**((_QWORD **)this + 10) + 128))(*((_QWORD *)this + 10));
      v64 = *((_QWORD *)this + 10);
      *(_QWORD *)((char *)this + 52) = *(_QWORD *)(*(_QWORD *)(v64 + 136) + 32);
      v145.i64[0] = (uint64_t)this + 88;
      v145.i64[1] = (uint64_t)re::internal::CharacterControllerHitCallback::controllerHit;
      v146.i64[0] = 0;
      v146.i64[1] = (uint64_t)re::Event<re::CharacterControllerHitInfo>::createSubscription<re::internal::CharacterControllerHitCallback>(re::internal::CharacterControllerHitCallback *,REEventHandlerResult (re::internal::CharacterControllerHitCallback::*)(re::CharacterControllerHitInfo*))::{lambda(re::CharacterControllerHitInfo*,re::Event<re::CharacterControllerHitInfo>::Subscription const&)#1}::__invoke;
      v65 = (_anonymous_namespace_ *)re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(v64 + 168, &v145, (uint64_t)v149);
      if (!v149[0])
      {
        if (*(_DWORD *)(v64 + 248))
        {
          *(float32x4_t *)&v149[7] = v145;
          *(float32x4_t *)&v149[23] = v146;
          v66 = *(_QWORD *)(v64 + 216);
          v67 = *(_QWORD *)(v64 + 224);
          if (v67 >= v66)
          {
            v68 = v67 + 1;
            if (v66 < v67 + 1)
            {
              if (*(_QWORD *)(v64 + 208))
              {
                v69 = 2 * v66;
                _ZF = v66 == 0;
                v70 = 8;
                if (!_ZF)
                  v70 = v69;
                if (v70 <= v68)
                  v71 = v68;
                else
                  v71 = v70;
                re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((_QWORD *)(v64 + 208), v71);
              }
              else
              {
                re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity((_QWORD *)(v64 + 208), v68);
                ++*(_DWORD *)(v64 + 232);
              }
            }
            v67 = *(_QWORD *)(v64 + 224);
          }
          v122 = *(_QWORD *)(v64 + 240) + 40 * v67;
          *(_BYTE *)v122 = 1;
          *(_OWORD *)(v122 + 1) = *(_OWORD *)v149;
          *(_OWORD *)(v122 + 17) = *(_OWORD *)&v149[16];
          *(_QWORD *)(v122 + 32) = *(_QWORD *)&v149[31];
          ++*(_QWORD *)(v64 + 224);
          ++*(_DWORD *)(v64 + 232);
        }
        else
        {
          re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)(v64 + 168), (uint64_t)&v145);
        }
      }
      *((_QWORD *)this + 11) = this;
      objc_storeWeak((id *)this + 4, (id)(v21 + 8));
      v123 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 128);
      *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 136) + 56) = v123;
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 192))(v123);
      goto LABEL_25;
    }
  }
  return result;
}

BOOL re::ecs2::CharacterControllerComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::ecs2::PhysicsSimulationData *v19;
  uint64_t v20;
  uint64_t v21;
  char *WeakRetained;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL8 v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33[2];
  _BYTE v34[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v33[0] = v12,
        (v33[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v30, a5, 0);
    v15 = v30;
    v14 = v31;
    v30 = a4;
    v31 = v15;
    v32 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v31);
        v17 = *(_QWORD *)v16;
        v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
        v19 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v33, v18);
        if (v19
          && (v20 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v19), (*(_BYTE *)(v18 + 288) & 1) != 0)
          && (v21 = v20) != 0)
        {
          WeakRetained = (char *)objc_loadWeakRetained((id *)(v17 + 32));
          if (WeakRetained)
          {
            v23 = WeakRetained - 8;

          }
          else
          {
            v23 = 0;
          }
          if (v23 != (char *)v21)
            re::ecs2::CharacterControllerComponent::removeFromSimulation((uint64_t *)v17);
          v26 = v30;
          v27 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v31);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v26, v27, *(_QWORD *)(a3 + 48));
        }
        else
        {
          v24 = v30;
          v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v31);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v24, v25, *(_QWORD *)(a3 + 32));
          re::ecs2::CharacterControllerComponent::removeFromSimulation((uint64_t *)v17);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v31);
      }
      while (v31 != a5 || (unsigned __int16)v32 != 0xFFFF || WORD1(v32) != 0xFFFF);
    }
    v28 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v28 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
  return v28;
}

BOOL re::ecs2::CharacterControllerComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::ecs2::CharacterControllerComponent *v19;
  re::ecs2::PhysicsSimulationData *v20;
  re::ecs2::PhysicsSimulationData *v21;
  _BOOL8 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[2];
  _BYTE v28[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v28, 3047, a1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (v11
    && (v12 = v11,
        v13 = *(_QWORD *)(a3 + 8),
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11),
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v13),
        v27[0] = v14,
        (v27[1] = v15) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v24, a5, 0);
    v17 = v24;
    v16 = v25;
    v24 = a4;
    v25 = v17;
    v26 = v16;
    if (v17 != a5 || (unsigned __int16)v16 != 0xFFFFLL || (v16 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v18 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25);
        v19 = *(re::ecs2::CharacterControllerComponent **)v18;
        v20 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v27, *(_QWORD *)(*(_QWORD *)v18 + 16));
        v21 = v20;
        if (!a6 || re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v20) == a6)
          re::ecs2::CharacterControllerComponent::updateController(v19, v21);
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
      }
      while (v25 != a5 || (unsigned __int16)v26 != 0xFFFF || WORD1(v26) != 0xFFFF);
    }
    v22 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v22 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v28);
  return v22;
}

void re::ecs2::CharacterControllerPhysicsSubsystem::registerScene(re::ecs2::CharacterControllerPhysicsSubsystem *this, re::EventBus **a2)
{
  re *v4;
  re::EventBus *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  re::ecs2::Scene *v9;
  _BYTE v10[24];
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = (re::ecs2::Scene *)a2;
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::addScene((uint64_t)this + 8, (uint64_t)a2);
  v5 = a2[36];
  if (v5)
  {
    v11 = re::globalAllocators(v4)[2];
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 32, 0);
    *v6 = &off_24ED47BF0;
    v6[1] = this;
    v6[2] = re::ecs2::CharacterControllerPhysicsSubsystem::onControllerActivated;
    v6[3] = 0;
    v12 = v6;
    *(_QWORD *)&v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v5, (uint64_t)v10, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    *((_QWORD *)&v8 + 1) = v7;
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 256, (uint64_t *)&v9, &v8);
    if (v12)
    {
      (**(void (***)(_BYTE *))v12)(v12);
      if (v12 != v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    }
  }
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::addScene(a1 + 8, a2);
}

uint64_t re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 40 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 40 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 40 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::CharacterControllerPhysicsSubsystem::onControllerActivated(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  re::ecs2::CharacterControllerComponent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::ecs2::PhysicsSimulationData *v10;

  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v3)
  {
    v4 = (re::ecs2::CharacterControllerComponent *)v3;
    v5 = a2;
    do
    {
      v6 = v5;
      v5 = *(_QWORD *)(v5 + 24);
    }
    while (v5);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v6 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 56));
    v8 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v7);
    if (v8)
    {
      v9 = v8;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 56))(v8, 1);
      v10 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationService::physicsSimulationDataForEntity(v9, a2);
      if (v10)
        re::ecs2::CharacterControllerComponent::updateController(v4, v10);
    }
  }
  return 0;
}

uint64_t re::ecs2::CharacterControllerPhysicsSubsystem::unregisterScene(re::ecs2::CharacterControllerPhysicsSubsystem *this, re::ecs2::Scene *a2)
{
  char *v3;
  uint64_t v4;
  re::ecs2::Scene *v6;

  v6 = a2;
  v3 = (char *)this + 256;
  v4 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 256, (uint64_t *)&v6);
  if (v4)
  {
    if (*((_QWORD *)v6 + 36))
      re::EventBus::unsubscribe(*((_QWORD *)v6 + 36), *(_QWORD *)v4, *(_QWORD *)(v4 + 8));
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v6);
  }
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 8, (uint64_t)v6);
}

uint64_t re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 4 * v4);
  if ((_DWORD)v6 == 0x7FFFFFFF)
    return 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v8 + 40 * v6 + 16) != v2)
  {
    while (1)
    {
      v9 = v6;
      LODWORD(v6) = *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v6 == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v8 + 40 * v6 + 16) == v2)
      {
        *(_DWORD *)(v8 + 40 * v9 + 8) = *(_DWORD *)(v8 + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v8 + 40 * v6 + 8) & 0x7FFFFFFF;
LABEL_9:
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v10 + 40 * v6;
  v14 = *(_DWORD *)(v11 + 8);
  v13 = (int *)(v11 + 8);
  v12 = v14;
  if (v14 < 0)
  {
    *v13 = v12 & 0x7FFFFFFF;
    v10 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v10 + 40 * v6 + 8);
  }
  v15 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v10 + 40 * v6 + 8) = *(_DWORD *)(a1 + 36) | v12 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v15 + 1;
  return 1;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 8, a2);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::CharacterControllerComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::CharacterControllerComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::CharacterControllerComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::CharacterControllerPhysicsSubsystem::~CharacterControllerPhysicsSubsystem(re::ecs2::CharacterControllerPhysicsSubsystem *this)
{
  *(_QWORD *)this = &off_24ED47B50;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 32);
  *(_QWORD *)this = &off_24ED47C48;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = &off_24ED47B50;
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 32);
  *(_QWORD *)this = &off_24ED47C48;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1 + 8;
  v8 = a3;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v8);
  v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v6 + 16) + 8, *(_QWORD *)(v6 + 48));
}

void re::ecs2::CharacterControllerPhysicsSubsystem::afterSimulationUpdate(re::ecs2::CharacterControllerPhysicsSubsystem *this, const re::ecs2::Scene *a2)
{
  __int128 v2;

  v2 = xmmword_2260E7EE0;
  re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene((uint64_t)this + 8, (uint64_t)a2, (uint64_t)&v2, 0);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 24; j != 56; j += 8)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v7 + 16), *(_QWORD *)(v7 + j), v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(v7, v16, v17);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

uint64_t *re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  result = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
    return re::ecs2::CharacterControllerComponent::removeFromSimulation(result);
  return result;
}

void re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47BF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47BF0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CharacterControllerPhysicsSubsystem,REEventHandlerResult (re::ecs2::CharacterControllerPhysicsSubsystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  *a1 = &off_24ED47C48;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  *a1 = &off_24ED47C48;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::CharacterControllerComponent,re::ecs2::CharacterControllerComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  v3 = xmmword_2260E7EE0;
  re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 8, a2, (uint64_t)&v3, a3);
}

__guard re::EventBus::getTypeId<RECharacterControllerDidHitEvent>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const char *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::EventBus::getTypeId<RECharacterControllerDidHitEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32RECharacterControllerDidHitEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
    }
  }
  return v1[394];
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::CharacterControllerComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED47CB8;
  objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 40) = 0x3F490FD83C23D70ALL;
  *(_DWORD *)(a1 + 48) = 1045220557;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000001;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 68) = 0x100000000;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void re::ecs2::CharacterControllerComponent::~CharacterControllerComponent(id *this)
{
  *this = &off_24ED47CB8;
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  *this = &off_24ED47CB8;
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::CharacterControllerStateComponent::~CharacterControllerStateComponent(re::ecs2::CharacterControllerStateComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::Event<re::CharacterControllerHitInfo>::createSubscription<re::internal::CharacterControllerHitCallback>(re::internal::CharacterControllerHitCallback *,REEventHandlerResult (re::internal::CharacterControllerHitCallback::*)(re::CharacterControllerHitInfo*))::{lambda(re::CharacterControllerHitInfo*,re::Event<re::CharacterControllerHitInfo>::Subscription const&)#1}::__invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t (*v3)(_QWORD *, uint64_t);
  uint64_t v4;
  _QWORD *v5;

  v3 = (uint64_t (*)(_QWORD *, uint64_t))a2[1];
  v4 = a2[2];
  v5 = (_QWORD *)(*a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v3);
  return v3(v5, a1);
}

void re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::System *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56[2];
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  _OWORD v65[5];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v56[0] = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v48 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v48);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)&v48);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v48);
    v14 = a1 + 168;
    v15 = v48;
    goto LABEL_49;
  }
LABEL_17:
  v55 = 0u;
  v48 = 0u;
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = -1;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v53 = 1;
  v54 = 0uLL;
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v55 = 0;
  v17 = *(_QWORD *)(a1 + 8);
  DWORD2(v55) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, (v16 + 4) >> 2);
    v17 = *(_QWORD *)(a1 + 8);
  }
  if (v17 <= v16 >> 2)
  {
    v56[1] = 0;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v57 = 136315906;
    v58 = "operator[]";
    v59 = 1024;
    v60 = 858;
    v61 = 2048;
    v62 = v16 >> 2;
    v63 = 2048;
    v64 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v18 + 8 * (v16 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v20 = v19 + 112 * (v16 & 3);
  v21 = v48;
  v22 = v49;
  v23 = v50;
  *(_QWORD *)(v20 + 48) = v51;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v51 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v48);
  v25 = *(_QWORD *)(a1 + 40);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::init(v26, a1, v56[0]);
  *(_QWORD *)&v65[0] = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)v65);
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 160);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 160) = v27;
  *(_QWORD *)&v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v29, &v48);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v32 = a1 + 144;
    else
      v32 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v30;
  }
  v33 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 208);
  if ((v33 & 0x3F) != 0)
    v35 = (v33 >> 6) + 1;
  else
    v35 = v33 >> 6;
  *(_QWORD *)(a1 + 208) = v33;
  *(_QWORD *)&v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v35, &v48);
  if (v33 && v34 > v33)
  {
    v36 = 63;
    v37 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v37 && v37 != 63)
      v36 = ~(-1 << v37);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v38 = a1 + 192;
    else
      v38 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v38 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v36;
  }
  v15 = *(_QWORD *)&v65[0];
  v14 = a1 + 168;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v39 = *(_QWORD *)(a1 + 176);
  v40 = *(_DWORD *)(a1 + 184);
  if (v39 >= 0xB)
  {
    if ((v40 & 1) != 0)
      v41 = (_QWORD *)(a1 + 192);
    else
      v41 = *(_QWORD **)(a1 + 200);
    v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43)
        return;
    }
LABEL_65:
    v47 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v47 + 86))
      re::ecs2::System::queueToRun(v47, 0.0);
    return;
  }
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t *)(a1 + 192);
    if (!v39)
      return;
  }
  else
  {
    v42 = *(uint64_t **)(a1 + 200);
    if (!v39)
      return;
  }
  v44 = 0;
  v45 = 8 * v39;
  do
  {
    v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
    goto LABEL_65;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED47DB8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED47E10;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED47E68;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED47EC0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED47DB8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED47E10;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED47E68;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED47EC0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47DB8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47DB8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47E10;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47E10;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47E68;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47E68;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED47EC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED47EC0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CharacterControllerComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _OWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 16) = *a4;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 56);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 56), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 64) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 120, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::internal::defaultConstruct<re::ecs2::ProbeResource>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0x3F80000000000000;
}

void re::internal::defaultDestruct<re::ecs2::ProbeResource>(int a1, int a2, re::AssetHandle *this)
{
  re::AssetHandle::~AssetHandle(this);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::ProbeResource>(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x3F80000000000000;
  return result;
}

uint64_t *re::ecs2::allocInfo_VirtualEnvironmentProbeComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254107338);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107338))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107438, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254107448 = 0;
    qword_254107458 = 0;
    qword_254107460 = 0xFFFFFFFFLL;
    qword_254107438 = (uint64_t)&off_24ED7DAA8;
    qword_254107468 = (uint64_t)"VirtualEnvironmentProbeComponent";
    dword_254107470 = 0;
    xmmword_254107478 = 0u;
    unk_254107488 = 0u;
    xmmword_254107498 = 0u;
    qword_2541074A8 = 0;
    __cxa_guard_release(&qword_254107338);
  }
  return &qword_254107438;
}

void re::ecs2::initInfo_VirtualEnvironmentProbeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x52C8F478D61A66EALL;
  v12[1] = "VirtualEnvironmentProbeComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_254107340);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107340);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107358 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::ProbeResource>>::get();
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "probeResources";
      *(_QWORD *)(v10 + 16) = &qword_254107380;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254107360 = v10;
      __cxa_guard_release(&qword_254107340);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254107358;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VirtualEnvironmentProbeComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VirtualEnvironmentProbeComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VirtualEnvironmentProbeComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VirtualEnvironmentProbeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::ProbeResource>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27[2];
  __int128 v28;
  const char *v29;
  __int128 v30;

  v0 = atomic_load((unsigned __int8 *)&qword_254107350);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254107350))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254107380);
    qword_254107380 = (uint64_t)&off_24ED48010;
    __cxa_guard_release(&qword_254107350);
  }
  if ((_MergedGlobals_154 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254107330;
    if (qword_254107330)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254107320);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254107320))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541073C0, 0);
      *(uint64_t *)((char *)&qword_2541073D0 + 6) = 0;
      qword_2541073D0 = 0;
      *(_QWORD *)&xmmword_2541073E0 = 0;
      *((_QWORD *)&xmmword_2541073E0 + 1) = 0xFFFFFFFFLL;
      qword_2541073C0 = (uint64_t)&off_24ED7DAA8;
      qword_2541073F0 = (uint64_t)"ProbeResource";
      dword_2541073F8 = 0;
      xmmword_254107400 = 0u;
      *(_OWORD *)&qword_254107410 = 0u;
      xmmword_254107420 = 0u;
      qword_254107430 = 0;
      __cxa_guard_release(&qword_254107320);
    }
    qword_254107330 = (uint64_t)&qword_2541073C0;
    *(_QWORD *)&v30 = 0x27F54796EFB4DF7CLL;
    *((_QWORD *)&v30 + 1) = "ProbeResource";
    re::StringID::destroyString((re::StringID *)&v30);
    xmmword_2541073E0 = v28;
    v4 = atomic_load((unsigned __int8 *)&qword_254107328);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_254107328);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        v15 = re::introspect_AssetHandle((re *)1, v14);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "ibl";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_254107368 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::introspect_float((re *)1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "intensityExponent";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x1800000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_254107370 = v20;
        v21 = re::introspectionAllocator((re *)v20);
        v23 = re::introspect_float((re *)1, v22);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "relativeWeight";
        *(_QWORD *)(v24 + 16) = v23;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x1C00000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_254107378 = v24;
        __cxa_guard_release(&qword_254107328);
      }
    }
    qword_2541073D0 = 0x2000000008;
    v1 = &qword_2541073C0;
    dword_2541073D8 = 8;
    word_2541073DC = 0;
    dword_2541073F8 = 3;
    *(_QWORD *)&xmmword_254107400 = &qword_254107368;
    *((_QWORD *)&xmmword_254107400 + 1) = re::internal::defaultConstruct<re::ecs2::ProbeResource>;
    qword_254107410 = (uint64_t)re::internal::defaultDestruct<re::ecs2::ProbeResource>;
    unk_254107418 = 0;
    *(_QWORD *)&xmmword_254107420 = 0;
    *((_QWORD *)&xmmword_254107420 + 1) = re::internal::defaultConstructV2<re::ecs2::ProbeResource>;
    qword_254107430 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::ProbeResource>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541073C0, v3);
    v30 = v28;
    if ((_MergedGlobals_154 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_154 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107380, 0);
      qword_254107390 = 0x2800000003;
      dword_254107398 = v5;
      word_25410739C = 0;
      *(_QWORD *)&xmmword_2541073A0 = 0;
      *((_QWORD *)&xmmword_2541073A0 + 1) = 0xFFFFFFFFLL;
      qword_2541073B0 = (uint64_t)v1;
      unk_2541073B8 = 0;
      qword_254107380 = (uint64_t)&off_24ED48010;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254107380, (const re::IntrospectionBase *)&v28);
      if ((BYTE8(v28) & 1) != 0)
        v8 = v29;
      else
        v8 = (char *)&v28 + 9;
      if ((_QWORD)v28 && (BYTE8(v28) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v28 + 40))();
      v26 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v27);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v25 + 1) = v10;
      }
      else
      {
        v30 = v26;
        re::TypeBuilder::beginListType((uint64_t)&v28, v27, 1, 0x28uLL, 8uLL, &v30);
        re::TypeBuilder::setConstructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v28, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v28, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v28, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v28, v11);
      }
      xmmword_2541073A0 = v25;
      re::StringID::destroyString((re::StringID *)v27);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::VirtualEnvironmentProbeComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED480A8;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED480A8;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VirtualEnvironmentProbeComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VirtualEnvironmentProbeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VirtualEnvironmentProbeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VirtualEnvironmentProbeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VirtualEnvironmentProbeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VirtualEnvironmentProbeComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VirtualEnvironmentProbeSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254107348);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107348))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541074B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541074C0 = 0;
    qword_2541074D0 = 0;
    qword_2541074D8 = 0xFFFFFFFFLL;
    qword_2541074B0 = (uint64_t)&off_24ED7DAA8;
    qword_2541074E0 = (uint64_t)"VirtualEnvironmentProbeSystem";
    dword_2541074E8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254107520 = 0;
    __cxa_guard_release(&qword_254107348);
  }
  return &qword_2541074B0;
}

void re::ecs2::initInfo_VirtualEnvironmentProbeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x3FCA43CF34C55D6ELL;
  v5[1] = "VirtualEnvironmentProbeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VirtualEnvironmentProbeSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VirtualEnvironmentProbeSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VirtualEnvironmentProbeSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VirtualEnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VirtualEnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VirtualEnvironmentProbeSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VirtualEnvironmentProbeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::VirtualEnvironmentProbeSystem *re::internal::defaultConstruct<re::ecs2::VirtualEnvironmentProbeSystem>(uint64_t a1, uint64_t a2, re::ecs2::VirtualEnvironmentProbeSystem *a3)
{
  return re::ecs2::VirtualEnvironmentProbeSystem::VirtualEnvironmentProbeSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VirtualEnvironmentProbeSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &off_24ED47F18;
  v4 = a3[22];
  if (v4)
  {
    if (a3[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[24]);
      a3[23] = 0;
      a3[24] = 0;
    }
    a3[22] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::VirtualEnvironmentProbeSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &off_24ED47F18;
  v2 = a1[22];
  if (v2)
  {
    if (a1[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[24]);
      a1[23] = 0;
      a1[24] = 0;
    }
    a1[22] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VirtualEnvironmentProbeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VirtualEnvironmentProbeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VirtualEnvironmentProbeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VirtualEnvironmentProbeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VirtualEnvironmentProbeSystem>, this);
}

BOOL re::ecs2::VirtualEnvironmentProbeComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v27[2];

  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v24, a5, 0);
  v9 = v24;
  v10 = v25;
  v24 = a4;
  v25 = v9;
  v26 = v10;
  v11 = (unsigned __int16)v10;
  v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25)
                      + 16);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 8))(v27, v8, v15);
      if ((*(_BYTE *)(v15 + 288) & 1) == 0
        || ((v16 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 376)) == 0 ? (v17 = 1) : (v17 = *(_QWORD *)(v16 + 24)),
            v27[1] ? (v18 = LOBYTE(v27[0]) == 0) : (v18 = 1),
            v18 ? (v19 = v17 == 1) : (v19 = 0),
            v20 = (unint64_t *)(a3 + 40),
            v19))
      {
        v20 = (unint64_t *)(a3 + 32);
      }
      v21 = v24;
      v22 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v25);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v21, v22, *v20);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
    }
    while (v25 != a5 || (unsigned __int16)v26 != 0xFFFF || WORD1(v26) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::VirtualEnvironmentProbeComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  re::AssetHandle *v16;
  re::AssetHandle *v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  v8 = v22;
  v9 = v23;
  v22 = a4;
  v23 = v8;
  v24 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      v15 = *(_QWORD *)(*(_QWORD *)v14 + 48);
      if (!v15)
        goto LABEL_17;
      v16 = *(re::AssetHandle **)(*(_QWORD *)v14 + 64);
      v17 = (re::AssetHandle *)((char *)v16 + 32 * v15);
      v18 = 1;
      do
      {
        while (*((_QWORD *)v16 + 1) && !re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>(v16))
        {
          re::AssetHandle::loadAsync(v16);
          v18 = 0;
          v16 = (re::AssetHandle *)((char *)v16 + 32);
          if (v16 == v17)
            goto LABEL_18;
        }
        v16 = (re::AssetHandle *)((char *)v16 + 32);
      }
      while (v16 != v17);
      if ((v18 & 1) != 0)
      {
LABEL_17:
        v19 = v22;
        v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(_QWORD *)(a3 + 48));
      }
LABEL_18:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>(re::ImageBasedLightAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::ImageBasedLightAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

BOOL re::ecs2::VirtualEnvironmentProbeComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  _anonymous_namespace_ *v12;
  __n128 v13;
  __n128 v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int32 v20;
  void *v21;
  unsigned __int32 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  const re::ecs2::Scene *v32;
  re::ecs2::TransformComponent **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  void **TextureCubeWithFallback;
  void **v43;
  void **v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id *v49;
  uint64_t v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  re::ecs2::RenderingSubsystem *v77;
  re::DynamicString **v78;
  unint64_t v79;
  _BYTE v80[24];
  _BYTE v81[24];
  id v82;
  id v83;
  void *v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __n128 v93;
  uint64_t i;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[120];
  void *v100[2];

  v100[0] = *(id *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 64) + 88);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v99);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  v11 = *(_DWORD *)(v10 + 124);
  if (!v11)
    v11 = *(_DWORD *)(v10 + 16);
  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v95, (uint64_t)v99, (v11 + 1));
  v12 = (_anonymous_namespace_ *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v85, a5, 0);
  v16 = v85;
  v15 = v86;
  v85 = a4;
  v86 = (unint64_t)v16;
  v87 = v15;
  if (v16 != (uint64_t *)a5 || (unsigned __int16)v15 != 0xFFFFLL || (v15 & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      v17 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v86);
      v18 = *(_QWORD *)v17;
      v19 = *(_QWORD *)(*(_QWORD *)v17 + 16);
      (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(&v93, v9, v19);
      v20 = 0;
      if (v93.n128_u8[0])
        v21 = (void *)v93.n128_u64[1];
      else
        v21 = 0;
      v82 = v21;
      do
      {
        v22 = v20;
        v19 = *(_QWORD *)(v19 + 24);
        if (!v19)
          break;
        ++v20;
      }
      while ((*(_BYTE *)(v19 + 288) & 0x80) == 0);
      v23 = re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(&v95, (unint64_t)v21);
      if (v23 == -1 || *(_DWORD *)(*((_QWORD *)&v95 + 1) + 24 * v23 + 16) > v22)
      {
        v93.n128_u64[0] = v18;
        v93.n128_u32[2] = v22;
        v24 = re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(&v95, (unint64_t)v21);
        if (v24 == -1)
          re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd((_anonymous_namespace_ *)&v95, &v82, &v93);
        else
          *(__n128 *)(*((_QWORD *)&v95 + 1) + 24 * v24 + 8) = v93;
      }
      v12 = (_anonymous_namespace_ *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v86);
    }
    while (v86 != a5 || (unsigned __int16)v87 != 0xFFFF || WORD1(v87) != 0xFFFF);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 104);
  if (v25)
  {
    v12 = (_anonymous_namespace_ *)re::RenderFrameBox::get(v25 + 344, 0xFFFFFFFFFFFFFFFuLL);
    v78 = (re::DynamicString **)v12;
  }
  else
  {
    v78 = 0;
  }
  v77 = *(re::ecs2::RenderingSubsystem **)(a3 + 8);
  v93.n128_u64[0] = (unint64_t)&v95;
  if ((unint64_t)v96 >= 0x10)
  {
    v26 = 0;
    v27 = (unint64_t)v96 >> 4;
    v13 = (__n128)xmmword_2260EE390;
    v14.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v28 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v95 + v26)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v93.n128_u64[1] = (unsigned __int16)~v28;
      if (v28 != 0xFFFF)
        break;
      v26 += 16;
      if (!--v27)
        goto LABEL_59;
    }
    v29 = __clz(__rbit64((unsigned __int16)~v28)) + v26;
    for (i = v29; i != -1; v29 = i)
    {
      v30 = *(_QWORD *)(v93.n128_u64[0] + 8) + 24 * v29;
      v32 = *(const re::ecs2::Scene **)v30;
      v31 = *(_QWORD **)(v30 + 8);
      v33 = (re::ecs2::TransformComponent **)v31[2];
      v89 = 0;
      v86 = 0;
      v87 = 0;
      v85 = 0;
      v88 = 0;
      v90 = xmmword_2260E5F10;
      v91 = xmmword_2260E5F20;
      v92 = xmmword_2260E5F40;
      v34 = v31[6];
      re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(&v85, v34);
      ++v88;
      v35 = v31[6];
      if (v35)
      {
        v36 = v31[8];
        v37 = 32 * v35;
        v38 = 0.0;
        do
        {
          v39 = *(float *)(v36 + 28);
          if (v39 > 0.0)
          {
            v82 = 0;
            v83 = 0;
            v84 = 0;
            v40 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)v36);
            if (v40)
            {
              v41 = v40;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v81, (const re::AssetHandle *)(v40 + 24));
              TextureCubeWithFallback = (void **)re::ecs2::getTextureCubeWithFallback((re::TextureAsset *)v81, (uint64_t)v100);
              NS::SharedPtr<MTL::Texture>::operator=(&v83, TextureCubeWithFallback);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v81);
              re::AssetHandle::AssetHandle((re::AssetHandle *)v80, (const re::AssetHandle *)(v41 + 48));
              v43 = (void **)re::ecs2::getTextureCubeWithFallback((re::TextureAsset *)v80, (uint64_t)v100);
              NS::SharedPtr<MTL::Texture>::operator=(&v82, v43);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v80);
            }
            else
            {
              NS::SharedPtr<MTL::Texture>::operator=(&v83, v100);
              v44 = NS::SharedPtr<MTL::Texture>::operator=(&v82, v100);
            }
            v84 = *(void **)(v36 + 24);
            v45 = v87;
            if (v87 >= v86)
            {
              v46 = v87 + 1;
              if (v86 < v87 + 1)
              {
                if (v85)
                {
                  if (v86)
                    v47 = 2 * v86;
                  else
                    v47 = 8;
                  if (v47 <= v46)
                    v48 = v87 + 1;
                  else
                    v48 = v47;
                  re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(&v85, v48);
                }
                else
                {
                  re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(&v85, v46);
                  ++v88;
                }
              }
              v45 = v87;
            }
            v49 = (id *)(v89 + 24 * v45);
            *v49 = v82;
            v82 = 0;
            v49[1] = v83;
            v83 = 0;
            v49[2] = v84;
            ++v87;
            ++v88;
            if (v83)
            {

              v83 = 0;
            }
            if (v82)

            v38 = v38 + v39;
          }
          v36 += 32;
          v37 -= 32;
        }
        while (v37);
        if (v38 > 0.0)
        {
          if (v87)
          {
            v50 = 24 * v87;
            v51 = (float *)(v89 + 20);
            do
            {
              *v51 = *v51 / v38;
              v51 += 6;
              v50 -= 24;
            }
            while (v50);
          }
          re::ecs2::TransformComponent::worldOrientation(v33, (const re::ecs2::Entity *)1);
          v53 = v52;
          v55 = v54;
          v57 = v56;
          v58 = v53 + v53;
          v59 = v55 + v55;
          v60 = v57 + v57;
          v61 = (float)(v53 + v53) * v53;
          v62 = (float)(v55 + v55) * v55;
          v63 = (float)(v57 + v57) * v57;
          v64 = v58 * v54;
          v65 = v58 * v56;
          v66 = v59 * v56;
          v68 = v58 * v67;
          v69 = v59 * v67;
          v70 = v60 * v67;
          *(float *)&v71 = 1.0 - (float)(v62 + v63);
          *(float *)&v72 = v64 + v70;
          *(float *)&v73 = v65 - v69;
          *((float *)&v71 + 1) = v64 - v70;
          *((float *)&v72 + 1) = 1.0 - (float)(v61 + v63);
          *((float *)&v73 + 1) = v68 + v66;
          *((float *)&v90 + 2) = v65 + v69;
          *(_QWORD *)&v90 = v71;
          *((float *)&v91 + 2) = v66 - v68;
          *(_QWORD *)&v91 = v72;
          *((float *)&v92 + 2) = 1.0 - (float)(v61 + v62);
          *(_QWORD *)&v92 = v73;
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v77, v32, v78, &v82);
          v79 = (unint64_t)v82 >> 1;
          v74 = re::RenderFrameData::stream((re::RenderFrameData *)(v78 + 33), (const re::WeakStringID *)&v79);
          (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v74 + 48) + 1104))(*(_QWORD *)(v74 + 48), &v85);
          re::StringID::destroyString((re::StringID *)&v82);
        }
      }
      re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)&v85);
      v12 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v93);
    }
  }
LABEL_59:
  v75 = *(_DWORD *)(a5 + 40);
  if (*((_QWORD *)&v98 + 1))
  {
    if (*((_QWORD *)&v95 + 1))
      *((_QWORD *)&v95 + 1) = 0;
    if ((_QWORD)v95)
      (*(void (**)(__n128, __n128))(**((_QWORD **)&v98 + 1) + 40))(v13, v14);
  }
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v99);
  if (v100[0])

  return v75 != 0;
}

uint64_t re::ecs2::getTextureCubeWithFallback(re::TextureAsset *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  v3 = re::AssetHandle::loadedAsset<re::TextureAsset>(a1);
  if (!v3)
    return a2;
  v4 = v3;
  if (!*(_DWORD *)(v3 + 240))
  {
    v5 = *(void **)(v3 + 160);
    if (!v5)
      return a2;
    if (objc_msgSend(v5, sel_textureType) != (id)5)
      return a2;
    a2 = v4 + 160;
    if (!*(_DWORD *)(v4 + 240))
      return a2;
  }
  v7 = std::__throw_bad_variant_access[abi:nn180100]();
  return re::ecs2::VirtualEnvironmentProbeSystem::updateScenes(v7);
}

void re::ecs2::VirtualEnvironmentProbeSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::System *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;

  v29[0] = a3;
  v29[1] = a4;
  v5 = *(_QWORD *)(a1 + 104);
  if (!v5 || (*(_BYTE *)(v5 + 424) & 0x10) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      v7 = *(uint64_t **)a2;
      v27 = (uint64_t *)(a1 + 392);
      v28 = *(_QWORD *)a2 + 8 * v6;
      while (1)
      {
        v30 = *v7;
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 264)
                       + 16
                       * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 256), &v30)+ 8);
        re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 368, v8);
        v9 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 200, v8);
        v10 = *(_QWORD *)(*v9 + 224);
        v11 = v9[3];
        v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
        if (*(_DWORD *)(v12 + 40))
          v13 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, v29, v9, v11, v12, 0);
        else
          v13 = 0;
        v14 = v9[5];
        v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
        if (*(_DWORD *)(v15 + 40))
          v13 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v29, v9, v14, v15, 0);
        v16 = v9[6];
        v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
        if (*(_DWORD *)(v17 + 40))
          break;
        if (v13)
          goto LABEL_12;
LABEL_13:
        if (*(_BYTE *)(a1 + 432))
        {
          v18 = *(_QWORD *)(a1 + 376);
          v19 = *(_DWORD *)(a1 + 384);
          if (v18 < 0xB)
          {
            v22 = v27;
            if ((v19 & 1) == 0)
              v22 = *(uint64_t **)(a1 + 400);
            if (!v18)
              goto LABEL_31;
            v23 = 0;
            v24 = 8 * v18;
            do
            {
              v25 = *v22++;
              v23 |= v25;
              v24 -= 8;
            }
            while (v24);
            if (!v23)
              goto LABEL_31;
          }
          else
          {
            v20 = v27;
            if ((v19 & 1) == 0)
              v20 = *(uint64_t **)(a1 + 400);
            v21 = 8 * v18;
            while (!*v20)
            {
              ++v20;
              v21 -= 8;
              if (!v21)
                goto LABEL_31;
            }
          }
          v26 = *(re::ecs2::System **)(a1 + 416);
          if (!*((_BYTE *)v26 + 86))
            re::ecs2::System::queueToRun(v26, 0.0);
        }
LABEL_31:
        if (++v7 == (uint64_t *)v28)
          return;
      }
      if (((v13 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, v29, v9, v16, v17, 0)) & 1) == 0)goto LABEL_13;
LABEL_12:
      re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 368, v8);
      goto LABEL_13;
    }
  }
}

void re::ecs2::VirtualEnvironmentProbeSystem::willAddSceneToECSService(re::ecs2::VirtualEnvironmentProbeSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 200;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::VirtualEnvironmentProbeSystem *)((char *)this + 320);
  v6 = *((_QWORD *)this + 41);
  v7 = *((_DWORD *)this + 84);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 344);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 44);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 344);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 44);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 320, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VirtualEnvironmentProbeSystem *)((char *)this + 256), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 368;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 30);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 26);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 25, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 26);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 216) & 1) != 0)
    v19 = (char *)this + 224;
  else
    v19 = (char *)*((_QWORD *)this + 29);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 30);
  ++*((_DWORD *)this + 62);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 30);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 30) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VirtualEnvironmentProbeSystem *)((char *)this + 256), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 30);
  v29 = *((_QWORD *)this + 45);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 45) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 45) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 336) & 1) != 0)
      v33 = (char *)this + 344;
    else
      v33 = (char *)*((_QWORD *)this + 44);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 41) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 30);
  v35 = *((_QWORD *)this + 51);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 51) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::VirtualEnvironmentProbeSystem *)((char *)this + 368), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 51) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 384) & 1) != 0)
      v39 = (char *)this + 392;
    else
      v39 = (char *)*((_QWORD *)this + 50);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 47) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 368;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 432))
    return;
  v40 = *((_QWORD *)this + 47);
  v41 = *((_DWORD *)this + 96);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 392);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 50);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 52);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 392);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::VirtualEnvironmentProbeSystem::willRemoveSceneFromECSService(re::ecs2::VirtualEnvironmentProbeSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 256);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 32, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 33) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 320, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 368, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 200, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t re::ecs2::VirtualEnvironmentProbeComponentStateImpl::dependsOnComponents(re::ecs2::VirtualEnvironmentProbeComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VirtualEnvironmentProbeComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void re::ecs2::VirtualEnvironmentProbeSystem::~VirtualEnvironmentProbeSystem(re::ecs2::VirtualEnvironmentProbeSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED47F18;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED47F18;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::VirtualEnvironmentProbeSystem::typeInfo(re::ecs2::VirtualEnvironmentProbeSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VirtualEnvironmentProbeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VirtualEnvironmentProbeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VirtualEnvironmentProbeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VirtualEnvironmentProbeSystem>, 0);
}

uint64_t re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  void *v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 24 * v4;
        v6 = (id *)(v3 + 8);
        do
        {
          if (*v6)
          {

            *v6 = 0;
          }
          v7 = *(v6 - 1);
          if (v7)
          {

            *(v6 - 1) = 0;
          }
          v6 += 3;
          v5 -= 24;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::ProbeResource>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::ProbeResource>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::ProbeResource>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  HIDWORD(v11) = 1065353216;
  re::DynamicArray<re::ecs2::ProbeResource>::add(this, (uint64_t *)&v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 32 * *((_QWORD *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ProbeResource>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

uint64_t re::DynamicArray<re::ecs2::ProbeResource>::deinit(uint64_t a1)
{
  uint64_t result;
  re::AssetHandle *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::AssetHandle **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 32 * v4;
        do
        {
          re::AssetHandle::~AssetHandle(v3);
          v3 = (re::AssetHandle *)((char *)v3 + 32);
          v5 -= 32;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::AssetHandle **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::AssetHandle *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::ProbeResource>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  re::AssetHandle *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::ProbeResource>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::AssetHandle *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 32 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          v11[1] = 0;
          v11[2] = 0;
          v11[1] = *((_QWORD *)v8 + 1);
          *((_QWORD *)v8 + 1) = 0;
          v12 = *v11;
          *v11 = 0;
          *v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = v12;
          v13 = v11[2];
          v11[2] = *((_QWORD *)v8 + 2);
          *((_QWORD *)v8 + 2) = v13;
          v11[3] = *((_QWORD *)v8 + 3);
          re::AssetHandle::~AssetHandle(v8);
          v8 = (re::AssetHandle *)((char *)v8 + 32);
          v11 += 4;
          v10 -= 32;
        }
        while (v10);
        v8 = (re::AssetHandle *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::AssetHandle *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::ProbeResource>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 32 * a2;
    v9 = a2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 32) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 32 * v4;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v7[3] = 0x3F80000000000000;
        v6 += 32;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::ecs2::ProbeResource>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ecs2::ProbeResource>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = (uint64_t *)(v3[4] + 32 * v4);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  v5[1] = a2[1];
  a2[1] = 0;
  v6 = *v5;
  *v5 = 0;
  *v5 = *a2;
  *a2 = v6;
  v7 = v5[2];
  v5[2] = a2[2];
  a2[2] = v7;
  v5[3] = a2[3];
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::ProbeResource>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::ProbeResource>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::ProbeResource>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::ProbeResource>::clear((re::AssetHandle *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::ProbeResource>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::ProbeResource>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::ProbeResource>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 32 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
  }
}

re::AssetHandle *re::DynamicArray<re::ecs2::ProbeResource>::clear(re::AssetHandle *result)
{
  re::AssetHandle *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::AssetHandle *)*((_QWORD *)result + 4);
    v3 = 32 * v2;
    do
    {
      re::AssetHandle::~AssetHandle(result);
      result = (re::AssetHandle *)(v4 + 32);
      v3 -= 32;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ProbeResource>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::ecs2::VirtualEnvironmentProbeComponent::~VirtualEnvironmentProbeComponent(re::ecs2::VirtualEnvironmentProbeComponent *this)
{
  *(_QWORD *)this = &off_24ED480A8;
  re::DynamicArray<re::ecs2::ProbeResource>::deinit((uint64_t)this + 32);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED480A8;
  re::DynamicArray<re::ecs2::ProbeResource>::deinit((uint64_t)this + 32);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

re::ecs2::VirtualEnvironmentProbeSystem *re::ecs2::VirtualEnvironmentProbeSystem::VirtualEnvironmentProbeSystem(re::ecs2::VirtualEnvironmentProbeSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED47F80;
  *(_QWORD *)(v2 + 160) = &off_24ED47F18;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  v4 = v2 + 200;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_QWORD *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 216) = 1;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_DWORD *)(v2 + 248) = 0;
  v5 = (_QWORD *)(v2 + 256);
  v6 = (_QWORD *)(v2 + 320);
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 336) = 1;
  v7 = (_QWORD *)(v2 + 368);
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_QWORD *)(v2 + 376) = 0;
  *(_DWORD *)(v2 + 384) = 1;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 417) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v6, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 96) += 2;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = this;
  *((_QWORD *)this + 53) = v3;
  *((_BYTE *)this + 432) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::VirtualEnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VirtualEnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v5 = v4 ^ (v4 >> 31);
  v6 = v5 % v3;
  v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v5 % v3;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    if (*(_QWORD *)(a1[1] + 24 * (v12 + v13)) == a2)
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

__n128 re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  __n128 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)a1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  result = *a3;
  v17 = *((_QWORD *)a1 + 1) + 24 * (v13 + 16 * v11);
  *(_QWORD *)v17 = *a2;
  *(__n128 *)(v17 + 8) = result;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  v19 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24 * (v13 + 16 * v11)) ^ (*(_QWORD *)(*((_QWORD *)a1 + 1)
                                                                              + 24 * (v13 + 16 * v11)) >> 30);
  v20 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v19) ^ ((0xBF58476D1CE4E5B9 * v19) >> 27));
  *((_QWORD *)a1 + 5) ^= (v20 >> 31) ^ v20;
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[2];
  uint64_t v27;
  __int128 v28;
  _BYTE v29[48];

  v3 = a1[2];
  v2 = a1[3];
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = a1[7];
  v28 = 0u;
  *(_OWORD *)v29 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v29[16], 0, 32);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v28, v7, v8);
  v26[0] = a1;
  v10 = a1[2];
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = *a1;
    v13 = v10 >> 4;
    v14 = (__n128)xmmword_2260EE390;
    v9.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v26[1] = (unsigned __int16)~v15;
      if (v15 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v13)
        goto LABEL_14;
    }
    v16 = __clz(__rbit64((unsigned __int16)~v15)) + v11;
    v27 = v16;
    if (v16 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,re::ecs2::ProbeHierarchyDepth,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v28, *(_QWORD *)(v26[0] + 8) + 24 * v16, *(_QWORD *)(v26[0] + 8) + 24 * v16 + 8, v14, v9);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v26);
        v16 = v27;
      }
      while (v27 != -1);
      v10 = a1[2];
    }
  }
LABEL_14:
  v18 = *(_QWORD *)&v29[40];
  *(_QWORD *)&v29[40] = a1[7];
  result = *(_QWORD *)&v29[40];
  v19 = v28;
  v20 = *(_OWORD *)v29;
  *(_QWORD *)v29 = v10;
  v21 = *a1;
  v22 = a1[1];
  *(_QWORD *)&v28 = *a1;
  *((_QWORD *)&v28 + 1) = v22;
  v23 = *(_OWORD *)&v29[16];
  v24 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v29[32];
  a1[7] = v18;
  *(_OWORD *)&v29[24] = v24;
  v25 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v19;
  *((_OWORD *)a1 + 1) = v20;
  *((_OWORD *)a1 + 2) = v23;
  *(_OWORD *)&v29[8] = v25;
  if (result)
  {
    if (v22)
      *((_QWORD *)&v28 + 1) = 0;
    if (v21)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::VirtualEnvironmentProbeSource>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 24 * v9;
        v11 = v8 + 8;
        v12 = v7;
        do
        {
          *v12 = *(_QWORD *)(v11 - 8);
          *(_QWORD *)(v11 - 8) = 0;
          v12[1] = *(_QWORD *)v11;
          *(_QWORD *)v11 = 0;
          v12[2] = *(_QWORD *)(v11 + 8);
          if (*(_QWORD *)v11)
          {

            *(_QWORD *)v11 = 0;
          }
          v13 = *(void **)(v11 - 8);
          if (v13)
          {

            *(_QWORD *)(v11 - 8) = 0;
          }
          v11 += 24;
          v12 += 3;
          v10 -= 24;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED48128;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED48180;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED481D8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED48230;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED48128;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED48180;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED481D8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED48230;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48128;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48128;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48180;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48180;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED481D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED481D8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48230;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48230;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VirtualEnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::PhysicsSimulationTracking::updateEnginePreferredUpdateRate(re::ecs2::PhysicsSimulationTracking *this)
{
  uint64_t result;
  float v3;
  float v4;
  BOOL v5;
  float v6;
  float v7;

  result = re::ServiceLocator::serviceOrNull<re::Engine>(*((_QWORD *)this + 37));
  if (result)
  {
    v3 = *(float *)(result + 1160);
    if (v3 > 0.0)
    {
      while (v3 < 59.9)
        v3 = v3 + v3;
    }
  }
  else
  {
    v3 = 0.0;
  }
  v4 = 1.0 / v3;
  v5 = v3 > 0.0;
  v6 = 0.016667;
  if (v5)
    v6 = v4;
  v7 = *((float *)this + 87);
  if (v7 != v6 && vabds_f32(v7, v6) >= (float)((float)((float)(fabsf(v7) + fabsf(v6)) + 1.0) * 0.00001))
  {
    *((float *)this + 87) = v6;
    if (*((float *)this + 86) <= 0.0)
      return re::ecs2::PhysicsSimulationTracking::updateDefaultFixedTimeStepsForPhysicsSimulations((uint64_t)this);
  }
  return result;
}

re *re::ecs2::PhysicsSimulationTracking::registerScene(re::ecs2::PhysicsSimulationTracking *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  re::EventBus *v30;
  re *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  re *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  re *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  re *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  re *result;
  re::EventBus *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  re *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE v77[24];
  uint64_t v78;
  re *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  const char *v86;
  __int16 v87;
  int v88;
  __int16 v89;
  _BYTE v90[20];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v75 = a2;
  *((_QWORD *)&v80 + 1) = 0;
  *(_QWORD *)&v81 = 0;
  DWORD2(v81) = 0;
  v82 = 0uLL;
  LODWORD(v83) = 0;
  *(_QWORD *)((char *)&v83 + 4) = 0x1FFFFFFFFLL;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v80, 0);
  ++DWORD2(v81);
  HIDWORD(v82) = 4;
  re::DataArray<re::ecs2::PhysicsSimulationData>::allocBlock(&v80);
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  if (*((_QWORD *)this + 52))
  {
    v7 = v6 % *((unsigned int *)this + 110);
    v8 = *(unsigned int *)(*((_QWORD *)this + 53) + 4 * v7);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v9 = *((_QWORD *)this + 54);
      if (*(_QWORD *)(v9 + 88 * v8 + 16) == a2)
      {
LABEL_6:
        v10 = v9 + 88 * v8;
        goto LABEL_9;
      }
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v9 + 88 * v8 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v8 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v9 + 88 * v8 + 16) == a2)
          goto LABEL_6;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  v11 = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 416, v7, v6, &v75, &v80);
  ++*((_DWORD *)this + 114);
  v10 = *((_QWORD *)this + 54) + 88 * v11;
LABEL_9:
  v12 = v10 + 24;
  re::DataArray<re::ecs2::PhysicsSimulationData>::~DataArray(&v80);
  v14 = *((float *)this + 86);
  if (v14 <= 0.0)
    v14 = *((float *)this + 87);
  v15 = *((_QWORD *)this + 37);
  v16 = *((unsigned __int8 *)this + 304);
  v17 = *(_DWORD *)(v12 + 56);
  if ((v17 + 1) >> 24)
    v18 = 1;
  else
    v18 = v17 + 1;
  *(_DWORD *)(v12 + 56) = v18;
  v19 = *(unsigned __int16 *)(v12 + 52);
  v20 = *(unsigned __int16 *)(v12 + 54);
  if (v19 == 0xFFFF && (_DWORD)v20 == 0xFFFF)
  {
    if (*(_DWORD *)(v12 + 48) >= *(_DWORD *)(v12 + 44))
      re::DataArray<re::ecs2::PhysicsSimulationData>::allocBlock((_QWORD *)v12);
    v24 = *(_QWORD *)(v12 + 16);
    v20 = (unsigned __int16)(v24 - 1);
    if (!v24)
      goto LABEL_70;
    v19 = *(unsigned int *)(v12 + 48);
    if (v19 >= 0x10000)
      goto LABEL_71;
    v25 = (_QWORD *)(*(_QWORD *)(v12 + 32) + 16 * v20);
    *(_DWORD *)(v12 + 48) = v19 + 1;
    *(_DWORD *)(v25[1] + 4 * v19) = *(_DWORD *)(v12 + 56);
    v23 = (_DWORD *)(*v25 + 272 * v19);
  }
  else
  {
    v2 = *(_QWORD *)(v12 + 16);
    if (v2 <= v20)
    {
LABEL_69:
      v76 = 0;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v85 = 136315906;
      v86 = "operator[]";
      v87 = 1024;
      v88 = 789;
      v89 = 2048;
      *(_QWORD *)v90 = v20;
      *(_WORD *)&v90[8] = 2048;
      *(_QWORD *)&v90[10] = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      v76 = 0;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v85 = 136315906;
      v86 = "operator[]";
      v87 = 1024;
      v88 = 789;
      v89 = 2048;
      *(_QWORD *)v90 = v20;
      *(_WORD *)&v90[8] = 2048;
      *(_QWORD *)&v90[10] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_71:
      re::internal::assertLog((re::internal *)5, v13, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v19);
      _os_crash();
      __break(1u);
    }
    v22 = (_QWORD *)(*(_QWORD *)(v12 + 32) + 16 * v20);
    *(_DWORD *)(v22[1] + 4 * v19) = v18;
    v23 = (_DWORD *)(*v22 + 272 * v19);
    *(_DWORD *)(v12 + 52) = *v23;
  }
  ++*(_DWORD *)(v12 + 40);
  v26 = (_anonymous_namespace_ *)re::ecs2::PhysicsSimulationData::PhysicsSimulationData((uint64_t)v23, v15, 0, (_OWORD *)this + 20, *((_DWORD *)this + 88), v16 == 0, v14);
  *(_QWORD *)&v80 = (v20 << 16) | ((unint64_t)(*(_DWORD *)(v12 + 56) & 0xFFFFFF) << 32) | v19;
  if (*((_QWORD *)this + 58))
  {
    v27 = v6 % *((unsigned int *)this + 122);
    v28 = *(unsigned int *)(*((_QWORD *)this + 59) + 4 * v27);
    if ((_DWORD)v28 != 0x7FFFFFFF)
    {
      v29 = *((_QWORD *)this + 60);
      if (*(_QWORD *)(v29 + 32 * v28 + 16) == a2)
        goto LABEL_33;
      while (1)
      {
        v28 = *(_DWORD *)(v29 + 32 * v28 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v28 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v29 + 32 * v28 + 16) == a2)
          goto LABEL_33;
      }
    }
  }
  else
  {
    LODWORD(v27) = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 464, v27, v6, &v75, &v80);
  ++*((_DWORD *)this + 126);
LABEL_33:
  v76 = a2;
  v30 = *(re::EventBus **)(a2 + 288);
  if (!v30)
  {
    re::internal::assertLog((re::internal *)4, v27, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
    goto LABEL_69;
  }
  v74 = a2;
  v80 = 0uLL;
  LODWORD(v81) = 1;
  v82 = 0uLL;
  *((_QWORD *)&v81 + 1) = 0;
  LODWORD(v83) = 0;
  v31 = (re *)(*(uint64_t (**)(re::ecs2::PhysicsSimulationTracking *))(*(_QWORD *)this + 16))(this);
  if (v32)
  {
    v33 = (uint64_t *)v31;
    v34 = 8 * v32;
    do
    {
      v35 = *v33;
      *(_QWORD *)&v90[4] = re::globalAllocators(v31)[2];
      v36 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v90[4] + 32))(*(_QWORD *)&v90[4], 32, 0);
      *v36 = &off_24ED48338;
      v36[1] = this;
      v36[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      v36[3] = 0;
      *(_QWORD *)&v90[12] = v36;
      v37 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v30, (uint64_t)&v85, v35, 0);
      v39 = v38;
      v40 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v80);
      *v40 = v37;
      v40[1] = v39;
      if (*(_QWORD *)&v90[12])
      {
        (***(void (****)(_QWORD))&v90[12])(*(_QWORD *)&v90[12]);
        if (*(int **)&v90[12] != &v85)
          (*(void (**)(_QWORD))(**(_QWORD **)&v90[4] + 40))(*(_QWORD *)&v90[4]);
      }
      re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(this, v30, (uint64_t)&v80, v35);
      v31 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(this, v30, (uint64_t)&v80, v35);
      ++v33;
      v34 -= 8;
    }
    while (v34);
  }
  v41 = (re *)(*(uint64_t (**)(re::ecs2::PhysicsSimulationTracking *))(*(_QWORD *)this + 24))(this);
  if (v42)
  {
    v43 = (uint64_t *)v41;
    v44 = 8 * v42;
    do
    {
      v45 = *v43++;
      re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(this, v30, (uint64_t)&v80, v45);
      v41 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(this, v30, (uint64_t)&v80, v45);
      v44 -= 8;
    }
    while (v44);
  }
  *(_QWORD *)&v90[4] = re::globalAllocators(v41)[2];
  v46 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v90[4] + 32))(*(_QWORD *)&v90[4], 32, 0);
  *v46 = &off_24ED48440;
  v46[1] = this;
  v46[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  v46[3] = 0;
  *(_QWORD *)&v90[12] = v46;
  v47 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v30, (uint64_t)&v85, 0, 0);
  v49 = v48;
  v50 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v80);
  *v50 = v47;
  v50[1] = v49;
  v51 = *(re **)&v90[12];
  if (*(_QWORD *)&v90[12])
  {
    v51 = (re *)(***(uint64_t (****)(_QWORD))&v90[12])(*(_QWORD *)&v90[12]);
    if (*(int **)&v90[12] != &v85)
      v51 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v90[4] + 40))(*(_QWORD *)&v90[4]);
  }
  *(_QWORD *)&v90[4] = re::globalAllocators(v51)[2];
  v52 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v90[4] + 32))(*(_QWORD *)&v90[4], 32, 0);
  *v52 = &off_24ED48498;
  v52[1] = this;
  v52[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  v52[3] = 0;
  *(_QWORD *)&v90[12] = v52;
  v53 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v30, (uint64_t)&v85, 0, 0);
  v55 = v54;
  v56 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v80);
  *v56 = v53;
  v56[1] = v55;
  v57 = *(re **)&v90[12];
  if (*(_QWORD *)&v90[12])
  {
    v57 = (re *)(***(uint64_t (****)(_QWORD))&v90[12])(*(_QWORD *)&v90[12]);
    if (*(int **)&v90[12] != &v85)
      v57 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v90[4] + 40))(*(_QWORD *)&v90[4]);
  }
  *(_QWORD *)&v90[4] = re::globalAllocators(v57)[2];
  v58 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v90[4] + 32))(*(_QWORD *)&v90[4], 32, 0);
  *v58 = &off_24ED484F0;
  v58[1] = this;
  v58[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  v58[3] = 0;
  *(_QWORD *)&v90[12] = v58;
  v59 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v30, (uint64_t)&v85, 0, 0);
  v61 = v60;
  v62 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v80);
  *v62 = v59;
  v62[1] = v61;
  if (*(_QWORD *)&v90[12])
  {
    (***(void (****)(_QWORD))&v90[12])(*(_QWORD *)&v90[12]);
    if (*(int **)&v90[12] != &v85)
      (*(void (**)(_QWORD))(**(_QWORD **)&v90[4] + 40))(*(_QWORD *)&v90[4]);
  }
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 152, (uint64_t *)&v76, (uint64_t)&v80);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 8, (uint64_t *)&v76);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v80);
  result = (re *)v80;
  if ((_QWORD)v80 && (v81 & 1) == 0)
    result = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v80 + 40))();
  v64 = *(re::EventBus **)(v74 + 288);
  if (v64)
  {
    v65 = 0x7FFFFFFF;
    if (*((_QWORD *)this + 19))
    {
      v66 = *(_DWORD *)(*((_QWORD *)this + 20) + 4 * (v6 % *((unsigned int *)this + 44)));
      if (v66 != 0x7FFFFFFF)
      {
        v67 = *((_QWORD *)this + 21);
        if (*(_QWORD *)(v67 + 80 * v66 + 16) == v74)
        {
          v65 = *(_DWORD *)(*((_QWORD *)this + 20) + 4 * (v6 % *((unsigned int *)this + 44)));
        }
        else
        {
          while (1)
          {
            v65 = *(_DWORD *)(v67
                            + 80 * *(unsigned int *)(*((_QWORD *)this + 20) + 4 * (v6 % *((unsigned int *)this + 44)))
                            + 8) & 0x7FFFFFFF;
            if (v65 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v67 + 80 * v65 + 16) == v74)
              goto LABEL_64;
          }
          v65 = 0x7FFFFFFF;
        }
      }
    }
LABEL_64:
    v68 = *((_QWORD *)this + 21) + 80 * v65 + 24;
    v78 = re::globalAllocators(result)[2];
    v69 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, 32, 0);
    *(_QWORD *)v69 = &off_24ED482E0;
    *((_QWORD *)v69 + 1) = this;
    *((_QWORD *)v69 + 2) = re::ecs2::PhysicsSimulationTracking::clearPhysicsSimulationEventHandler<RESceneEntityWillDeactivateEvent>;
    *((_QWORD *)v69 + 3) = 0;
    v79 = v69;
    v70 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v64, (uint64_t)v77, 0, 0);
    v72 = v71;
    v73 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v68);
    *v73 = v70;
    v73[1] = v72;
    result = v79;
    if (v79)
    {
      result = (re *)(**(uint64_t (***)(re *))v79)(v79);
      if (v79 != (re *)v77)
        return (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 40))(v78);
    }
  }
  return result;
}

uint64_t re::ecs2::PhysicsSimulationTracking::clearPhysicsSimulationEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v4 = a1 + 512;
  v5 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 512, a2);
  if (v5)
  {
    v6 = (uint64_t *)v5;
    v7 = a2;
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 24);
    }
    while (v7);
    v15 = *(_QWORD *)(v8 + 16);
    v9 = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(a1 + 416, &v15);
    if (v9)
    {
      if (re::DataArray<re::ecs2::PhysicsSimulationData>::tryGet(v9, *v6))
      {
        v10 = a1 + 360;
        v11 = v15;
        v12 = *v6;
        v13 = (_QWORD *)re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::addUninitialized(v10);
        *v13 = v11;
        v13[1] = v12;
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(v4, a2);
      }
    }
  }
  return 0;
}

re::ecs2::Scene **re::ecs2::PhysicsSimulationTracking::unregisterScene(re::ecs2::PhysicsSimulationTracking *this, re::ecs2::Scene *a2)
{
  re::ecs2::Scene **result;
  unint64_t v4;
  re::ecs2::Scene *v5;
  re::ecs2::Scene *v6;

  v6 = a2;
  re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::unregisterScene((uint64_t)this, (uint64_t)a2);
  re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)this + 464, (uint64_t *)&v6);
  result = (re::ecs2::Scene **)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::remove((uint64_t)this + 416, (uint64_t *)&v6);
  if (*((_QWORD *)this + 50))
  {
    v4 = 0;
    do
    {
      v5 = v6;
      result = (re::ecs2::Scene **)re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)this + 360, v4);
      if (v5 == *result)
        result = (re::ecs2::Scene **)re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::removeAt((uint64_t)this + 360, v4);
      else
        ++v4;
    }
    while (v4 < *((_QWORD *)this + 50));
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;

  v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 8, &v14);
  v3 = *(_QWORD *)(v14 + 104);
  v4 = *(_QWORD *)(v3 + 328);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 344);
    v6 = 8 * v4;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v5 + 288) & 1) != 0)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = a1 + 152;
  result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(v7, &v14);
  if (result)
  {
    v9 = *(_QWORD *)(v14 + 288);
    if (v9)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 40);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v7, &v14);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v9 + 88 * v7 + 16) != v3)
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 88 * v7 + 8);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v9 + 88 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 88 * v10 + 8) = *(_DWORD *)(v9 + 88 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 88 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 88 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v12 + 88 * v7;
  v16 = *(_DWORD *)(v13 + 8);
  v15 = (int *)(v13 + 8);
  v14 = v16;
  if (v16 < 0)
  {
    *v15 = v14 & 0x7FFFFFFF;
    re::DataArray<re::ecs2::PhysicsSimulationData>::~DataArray((_QWORD *)(v12 + 88 * v7 + 24));
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v12 + 88 * v7 + 8);
  }
  v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 88 * v7 + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

uint64_t re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v5;
  _OWORD *v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 848, a2, v3);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v5 = v3 - 1;
    if (v3 - 1 > a2)
    {
      v6 = (_OWORD *)re::BucketArray<RESubscriptionHandle,8ul>::operator[](a1, v5);
      *(_OWORD *)re::BucketArray<RESubscriptionHandle,8ul>::operator[](a1, a2) = *v6;
      v5 = *(_QWORD *)(a1 + 40) - 1;
    }
    result = re::BucketArray<RESubscriptionHandle,8ul>::operator[](a1, v5);
    --*(_QWORD *)(a1 + 40);
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t re::ecs2::PhysicsSimulationTracking::setDefaultGravity(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  *(_OWORD *)(result + 320) = *a2;
  v4 = *(unsigned int *)(result + 448);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(result + 432) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 22;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(result + 448);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      v9 = *(_QWORD *)(v3 + 432) + 88 * v8 + 24;
      result = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v18, v9, 0);
      if (v9 != v18 || (unsigned __int16)v19 != 0xFFFFLL || (v19 & 0xFFFF0000) != 4294901760)
      {
        do
        {
          v12 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v18);
          if (!*(_BYTE *)(v12 + 64))
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
              (*(void (**)(_QWORD, _OWORD *))(*(_QWORD *)v13 + 80))(*(_QWORD *)(v12 + 8), a2);
            else
              *(_OWORD *)(v12 + 240) = *a2;
          }
          result = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v18);
        }
        while (v18 != v9 || (unsigned __int16)v19 != 0xFFFF || WORD1(v19) != 0xFFFF);
      }
      if (*(_DWORD *)(v3 + 448) <= (v5 + 1))
        v16 = v5 + 1;
      else
        v16 = *(_DWORD *)(v3 + 448);
      while (1)
      {
        v8 = (v5 + 1);
        if (v16 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v17 = v8;
        if ((*(_DWORD *)(*(_QWORD *)(v3 + 432) + 88 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_35;
      }
      v17 = v16;
LABEL_35:
      LODWORD(v5) = v17;
    }
    while ((_DWORD)v4 != v17);
  }
  return result;
}

uint64_t re::ecs2::PhysicsSimulationTracking::updateDefaultFixedTimeStepsForPhysicsSimulations(uint64_t this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v1 = this;
  v2 = *(float *)(this + 344);
  if (v2 <= 0.0)
    v2 = *(float *)(this + 348);
  v3 = *(unsigned int *)(this + 448);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(this + 432) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 22;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(this + 448);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    do
    {
      v8 = *(_QWORD *)(v1 + 432) + 88 * v7 + 24;
      this = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v17, v8, 0);
      if (v8 != v17 || (unsigned __int16)v18 != 0xFFFFLL || (v18 & 0xFFFF0000) != 4294901760)
      {
        do
        {
          v11 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v17);
          if (!*(_BYTE *)(v11 + 96))
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
              *(float *)(v12 + 68) = v2;
            else
              *(float *)(v11 + 256) = v2;
          }
          this = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v17);
        }
        while (v17 != v8 || (unsigned __int16)v18 != 0xFFFF || WORD1(v18) != 0xFFFF);
      }
      if (*(_DWORD *)(v1 + 448) <= (v4 + 1))
        v15 = v4 + 1;
      else
        v15 = *(_DWORD *)(v1 + 448);
      while (1)
      {
        v7 = (v4 + 1);
        if (v15 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v16 = v7;
        if ((*(_DWORD *)(*(_QWORD *)(v1 + 432) + 88 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_37;
      }
      v16 = v15;
LABEL_37:
      LODWORD(v4) = v16;
    }
    while ((_DWORD)v3 != v16);
  }
  return this;
}

uint64_t re::ecs2::PhysicsSimulationTracking::setDefaultMaxSubStepCount(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v3 = this;
  *(_DWORD *)(this + 352) = a2;
  v4 = *(unsigned int *)(this + 448);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(this + 432) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 22;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(this + 448);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      v9 = *(_QWORD *)(v3 + 432) + 88 * v8 + 24;
      this = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, v9, 0);
      if (v9 != v19 || (unsigned __int16)v20 != 0xFFFFLL || (v20 & 0xFFFF0000) != 4294901760)
      {
        do
        {
          v12 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v19);
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
            v14 = (_DWORD *)(v13 + 64);
          else
            v14 = (_DWORD *)(v12 + 260);
          *v14 = a2;
          this = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v19);
        }
        while (v19 != v9 || (unsigned __int16)v20 != 0xFFFF || WORD1(v20) != 0xFFFF);
      }
      if (*(_DWORD *)(v3 + 448) <= (v5 + 1))
        v17 = v5 + 1;
      else
        v17 = *(_DWORD *)(v3 + 448);
      while (1)
      {
        v8 = (v5 + 1);
        if (v17 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v18 = v8;
        if ((*(_DWORD *)(*(_QWORD *)(v3 + 432) + 88 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_34;
      }
      v18 = v17;
LABEL_34:
      LODWORD(v5) = v18;
    }
    while ((_DWORD)v4 != v18);
  }
  return this;
}

uint64_t re::ecs2::PhysicsSimulationTracking::destroyPendingSimulations(re::ecs2::PhysicsSimulationTracking *this)
{
  char *v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  __int128 v7;

  v1 = (char *)this + 360;
  v2 = *((_QWORD *)this + 50);
  if (v2)
  {
    v3 = 0;
    v4 = (char *)this + 416;
    do
    {
      v7 = *(_OWORD *)re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)v1, v3);
      v5 = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v4, (uint64_t *)&v7);
      if (v5)
        re::DataArray<re::ecs2::PhysicsSimulationData>::destroy(v5, *((unint64_t *)&v7 + 1));
      ++v3;
    }
    while (v2 != v3);
  }
  return re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::clear((uint64_t)v1);
}

uint64_t re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t i;

  v1 = result;
  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      result = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v1, i);
  }
  *(_QWORD *)(v1 + 40) = 0;
  ++*(_DWORD *)(v1 + 48);
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::Engine>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::Engine>(void)::info = re::introspect_Engine(0);
  }
  v3 = re::introspect<re::Engine>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

re::ecs2::PhysicsSimulationTracking *re::ecs2::PhysicsSimulationTracking::PhysicsSimulationTracking(re::ecs2::PhysicsSimulationTracking *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  void **v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = off_24ED2B038;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *(_QWORD *)((char *)this + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  v2 = (char *)this + 56;
  *(_QWORD *)((char *)this + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  v3 = (char *)this + 104;
  *(_QWORD *)((char *)this + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  v4 = (char *)this + 152;
  *(_QWORD *)((char *)this + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 58) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  v5 = (char *)this + 200;
  *(_QWORD *)((char *)this + 236) = 0x7FFFFFFFLL;
  *(_QWORD *)this = &off_24ED48288;
  *((_QWORD *)this + 37) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_BYTE *)this + 304) = 1;
  *((_OWORD *)this + 20) = re::PhysicsSimulation::kDefaultGravity;
  *((_OWORD *)this + 21) = xmmword_22610B4F0;
  *((_DWORD *)this + 88) = 4;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_DWORD *)this + 94) = 1;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_DWORD *)this + 102) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_QWORD *)((char *)this + 452) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 124) = 0;
  *(_QWORD *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_DWORD *)this + 136) = 0;
  *(_QWORD *)((char *)this + 548) = 0x7FFFFFFFLL;
  *((_BYTE *)this + 560) = 0;
  v16[0] = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v16[1] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v16[2] = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v13 = (void **)v16;
  v14 = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::PhysicsSimulationTracking *)((char *)this + 272), (uint64_t)&v13);
  v14 = 1;
  v15 = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v13 = &v15;
  v9 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::PhysicsSimulationTracking *)((char *)this + 248), (uint64_t)&v13);
  return this;
}

_anonymous_namespace_ *re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::ecs2::ComponentTypeBase const*>::copy(a1, a2);
  }
  return a1;
}

void re::ecs2::PhysicsSimulationTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, char a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  const __int16 *v49;
  int16x8_t *v50;
  int16x8_t v51;
  int v52;
  int16x8_t *v53;
  uint64_t v54;
  uint16x8_t v55;
  unint64_t *v56;
  uint64_t v57;
  float v58;
  int *v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _DWORD *v65;
  const __int16 *v66;
  int16x8_t v67;
  int v68;
  uint16x8_t v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  int v102;
  uint64_t v103;
  char *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  int *v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  int *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  int v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unint64_t v176;
  int v177;
  unsigned int v178;
  unsigned int v179;
  uint64_t v180;
  _OWORD *v184;
  _DWORD *v185;
  _DWORD *v186;
  _DWORD *v187;
  unsigned __int16 *v188;
  unsigned int v189;
  int *v191;
  _DWORD *v192;
  int v193;
  int v194;
  __int128 v195;
  _QWORD *v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  int v206;
  _BYTE v207[120];
  uint64_t v208;
  _BYTE v209[80];
  _BYTE v210[12];
  __int16 v211;
  int v212;
  __int16 v213;
  unint64_t v214;
  __int16 v215;
  unint64_t v216;
  simd_float4x4 v217;
  __int128 v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a3 + 32);
  v6 = 0;
  if ((_DWORD)v5)
  {
    v7 = (int *)(*(_QWORD *)(a3 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 6;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a3 + 32);
        break;
      }
    }
  }
  if ((_DWORD)v5 != (_DWORD)v6)
  {
    v9 = v6;
    v200 = (unint64_t *)(a1 + 56);
    v10 = (uint64_t)&v204 + 8;
    v201 = a1 + 512;
    v198 = a1 + 360;
    v184 = (_OWORD *)(a1 + 320);
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_DWORD *)(a3 + 32);
    v189 = v12;
    while (1)
    {
      v13 = *(_QWORD *)(v11 + 24 * v9 + 16);
      if (*v200)
      {
        v14 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
        v15 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v14 ^ (v14 >> 31)) % *(unsigned int *)(a1 + 80)));
        if ((_DWORD)v15 != 0x7FFFFFFF)
        {
          v16 = *(_QWORD *)(a1 + 72);
          while (*(_QWORD *)(v16 + 56 * v15 + 16) != v13)
          {
            LODWORD(v15) = *(_DWORD *)(v16 + 56 * v15 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v15 == 0x7FFFFFFF)
              goto LABEL_13;
          }
          goto LABEL_128;
        }
      }
LABEL_13:
      v17 = *(_QWORD *)(v13 + 24);
      if (!v17 || (*(_BYTE *)(v17 + 288) & 0x80) != 0)
        break;
      while (1)
      {
        v18 = v17;
        if (*v200)
        {
          v19 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
          v20 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v19 ^ (v19 >> 31)) % *(unsigned int *)(a1 + 80)));
          if ((_DWORD)v20 != 0x7FFFFFFF)
            break;
        }
LABEL_20:
        v17 = *(_QWORD *)(v18 + 24);
        if (v17)
        {
          v13 = v18;
          if ((*(_BYTE *)(v17 + 288) & 0x80) == 0)
            continue;
        }
        v13 = v18;
        goto LABEL_25;
      }
      v21 = *(_QWORD *)(a1 + 72);
      while (*(_QWORD *)(v21 + 56 * v20 + 16) != v18)
      {
        LODWORD(v20) = *(_DWORD *)(v21 + 56 * v20 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v20 == 0x7FFFFFFF)
          goto LABEL_20;
      }
      v22 = v21 + 56 * v20;
      v23 = *(unsigned int *)(v22 + 24);
      v193 = *(_DWORD *)(v22 + 28);
      if (!(_DWORD)v23)
        break;
      v195 = *(_OWORD *)(v22 + 32);
      v24 = (unint64_t *)(v22 + 48);
LABEL_35:
      v32 = *v24;
      re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v207);
      *(_QWORD *)v209 = 0;
      *(_QWORD *)&v209[8] = 0;
      v33 = 1;
      *(_DWORD *)&v209[16] = 1;
      memset(&v209[24], 0, 28);
      re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v209, (uint64_t)v207, 1uLL);
      v203 = 0uLL;
      LODWORD(v204) = 1;
      v205 = 0uLL;
      *((_QWORD *)&v204 + 1) = 0;
      v206 = 0;
      re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::init((uint64_t)&v203, (uint64_t)v207, 1uLL);
      *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v209) = v13;
      v34 = re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::addUninitialized((uint64_t)&v203);
      *(_DWORD *)v34 = v23;
      *(_DWORD *)(v34 + 4) = v193;
      *(_OWORD *)(v34 + 8) = v195;
      *(_QWORD *)(v34 + 24) = v32;
      do
      {
        v35 = v13;
        v13 = *(_QWORD *)(v13 + 24);
      }
      while (v13);
      if (!*(_QWORD *)(a1 + 416))
      {
        v39 = *(_QWORD *)(a1 + 432);
LABEL_43:
        LODWORD(v40) = 0x7FFFFFFF;
        goto LABEL_44;
      }
      v36 = *(_QWORD *)(v35 + 16);
      v37 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) >> 27));
      v38 = (v37 ^ (v37 >> 31)) % *(unsigned int *)(a1 + 440);
      v39 = *(_QWORD *)(a1 + 432);
      v40 = *(unsigned int *)(*(_QWORD *)(a1 + 424) + 4 * v38);
      if ((_DWORD)v40 == 0x7FFFFFFF)
        goto LABEL_43;
      while (*(_QWORD *)(v39 + 88 * v40 + 16) != v36)
      {
        v40 = *(_DWORD *)(v39 + 88 * v40 + 8) & 0x7FFFFFFF;
        if (v40 == 0x7FFFFFFF)
          goto LABEL_43;
      }
LABEL_44:
      v41 = *(_QWORD *)&v209[40];
      if (*(_QWORD *)&v209[40])
      {
        v196 = (_QWORD *)(v39 + 88 * v40 + 24);
        v42 = v39 + 88 * v40;
        v191 = (int *)(v42 + 80);
        v192 = (_DWORD *)(v42 + 76);
        v186 = (_DWORD *)(v42 + 72);
        v185 = (_DWORD *)(v42 + 68);
        v187 = (_DWORD *)(v42 + 64);
        v188 = (unsigned __int16 *)(v42 + 78);
        while (1)
        {
          v43 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v209, v41 - 1);
          v202 = v43;
          re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v209, *(_QWORD *)&v209[40] - 1);
          --*(_QWORD *)&v209[40];
          ++*(_DWORD *)&v209[48];
          if (!*((_QWORD *)&v205 + 1))
          {
            re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
            _os_crash();
            __break(1u);
LABEL_276:
            re::internal::assertLog((re::internal *)6, v107, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, v32, v164);
            _os_crash();
            __break(1u);
LABEL_277:
            v208 = 0;
            v218 = 0u;
            memset(&v217, 0, sizeof(v217));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v210 = 136315906;
            *(_QWORD *)&v210[4] = "operator[]";
            v211 = 1024;
            v212 = 866;
            v213 = 2048;
            v214 = v23;
            v215 = 2048;
            v216 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_278:
            *(_QWORD *)v210 = 0;
            v218 = 0u;
            memset(&v217, 0, sizeof(v217));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v209 = 136315906;
            *(_QWORD *)&v209[4] = "operator[]";
            *(_WORD *)&v209[12] = 1024;
            *(_DWORD *)&v209[14] = 858;
            *(_WORD *)&v209[18] = 2048;
            *(_QWORD *)&v209[20] = v3;
            *(_WORD *)&v209[28] = 2048;
            *(_QWORD *)&v209[30] = v43;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_279:
            v208 = 0;
            v218 = 0u;
            memset(&v217, 0, sizeof(v217));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v210 = 136315906;
            *(_QWORD *)&v210[4] = "operator[]";
            v211 = 1024;
            v212 = 789;
            v213 = 2048;
            v214 = v32;
            v215 = 2048;
            v216 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_280:
            v208 = 0;
            v218 = 0u;
            memset(&v217, 0, sizeof(v217));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v210 = 136315906;
            *(_QWORD *)&v210[4] = "operator[]";
            v211 = 1024;
            v212 = 789;
            v213 = 2048;
            v214 = v32;
            v215 = 2048;
            v216 = v33;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_281:
            re::internal::assertLog((re::internal *)5, v57, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v10);
            _os_crash();
            __break(1u);
          }
          v3 = *((_QWORD *)&v205 + 1) - 1;
          v45 = (unsigned int *)re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::operator[]((uint64_t)&v203, *((_QWORD *)&v205 + 1) - 1);
          v33 = *v45;
          v46 = v45[1];
          v47 = *((_QWORD *)v45 + 1);
          v23 = *((_QWORD *)v45 + 2);
          v32 = *((_QWORD *)v45 + 3);
          re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::operator[]((uint64_t)&v203, v3);
          *((_QWORD *)&v205 + 1) = v3;
          ++v206;
          if ((*(_BYTE *)(v43 + 288) & 1) != 0)
            break;
LABEL_95:
          v41 = *(_QWORD *)&v209[40];
          v10 = (uint64_t)&v204 + 8;
          if (!*(_QWORD *)&v209[40])
            goto LABEL_111;
        }
        v48 = *(unsigned __int16 *)(v43 + 82);
        if (!*(_WORD *)(v43 + 82))
          goto LABEL_76;
        v49 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v50 = *(int16x8_t **)(v43 + 88);
        v51 = vld1q_dup_s16(v49);
        v52 = 1;
        v53 = v50;
        v54 = *(unsigned __int16 *)(v43 + 82);
        while (1)
        {
          v55 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v51, *v53), (int8x16_t)xmmword_2260F1E80);
          v55.i16[0] = vmaxvq_u16(v55);
          if (v55.i32[0])
            break;
          v52 -= 8;
          ++v53;
          if (!--v54)
            goto LABEL_69;
        }
        if (v55.u16[0] - v52 < *(unsigned __int16 *)(v43 + 80))
        {
          v3 = 3;
          goto LABEL_55;
        }
LABEL_69:
        if (!*(_QWORD *)(v43 + 128))
          goto LABEL_76;
        v66 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v67 = vld1q_dup_s16(v66);
        v68 = 1;
        while (1)
        {
          v69 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v67, *v50), (int8x16_t)xmmword_2260F1E80);
          v69.i16[0] = vmaxvq_u16(v69);
          if (v69.i32[0])
            break;
          v68 -= 8;
          ++v50;
          if (!--v48)
            goto LABEL_76;
        }
        if (v69.u16[0] - v68 >= *(unsigned __int16 *)(v43 + 80)
          || *(_BYTE *)(a1 + 560)
          || (v3 = 2
                 * (*(_DWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v43 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 244) == 1), !(_DWORD)v3))
        {
LABEL_76:
          v70 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v201, v43);
          if (v70)
          {
            v71 = v43;
            do
            {
              v72 = v71;
              v71 = *(_QWORD *)(v71 + 24);
            }
            while (v71);
            v73 = *(_QWORD *)(v72 + 16);
            v74 = *v70;
            v75 = (_QWORD *)re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::addUninitialized(v198);
            *v75 = v73;
            v75[1] = v74;
            re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(v201, v43);
          }
          v3 = v33;
          goto LABEL_81;
        }
LABEL_55:
        if (!*(_BYTE *)(a1 + 304))
          goto LABEL_76;
        v56 = (unint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v201, v43);
        if (!v56)
        {
          v58 = *(float *)(a1 + 344);
          v59 = v191;
          if (v58 <= 0.0)
            v58 = *(float *)(a1 + 348);
          v60 = *(_QWORD *)(a1 + 296);
          if ((*v191 + 1) >> 24)
            v61 = 1;
          else
            v61 = *v191 + 1;
          *v191 = v61;
          v10 = *(unsigned __int16 *)v192;
          v32 = *v188;
          v62 = v196;
          if (v10 == 0xFFFF && (_DWORD)v32 == 0xFFFF)
          {
            if (*v186 >= *v185)
            {
              re::DataArray<re::ecs2::PhysicsSimulationData>::allocBlock(v196);
              v59 = v191;
              v62 = v196;
            }
            v63 = v62[2];
            v32 = (unsigned __int16)(v63 - 1);
            if (!v63)
              goto LABEL_279;
            v10 = *v186;
            if (v10 >= 0x10000)
              goto LABEL_281;
            v64 = (_QWORD *)(v62[4] + 16 * v32);
            *v186 = v10 + 1;
            *(_DWORD *)(v64[1] + 4 * v10) = *v59;
            v65 = (_DWORD *)(*v64 + 272 * v10);
            v43 = v202;
          }
          else
          {
            v33 = v196[2];
            if (v33 <= v32)
              goto LABEL_280;
            v90 = (_QWORD *)(v196[4] + 16 * v32);
            *(_DWORD *)(v90[1] + 4 * v10) = v61;
            v65 = (_DWORD *)(*v90 + 272 * v10);
            *v192 = *v65;
          }
          v91 = v59;
          ++*v187;
          re::ecs2::PhysicsSimulationData::PhysicsSimulationData((uint64_t)v65, v60, v43, v184, *(_DWORD *)(a1 + 352), 0, v58);
          v217.columns[0].i64[0] = (v32 << 16) | ((unint64_t)(*v91 & 0xFFFFFF) << 32) | v10;
          v92 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27));
          v93 = v92 ^ (v92 >> 31);
          if (*(_QWORD *)(a1 + 512))
          {
            v94 = v93 % *(unsigned int *)(a1 + 536);
            v95 = *(unsigned int *)(*(_QWORD *)(a1 + 520) + 4 * v94);
            if ((_DWORD)v95 != 0x7FFFFFFF)
            {
              v96 = *(_QWORD *)(a1 + 528);
              while (*(_QWORD *)(v96 + 32 * v95 + 16) != v43)
              {
                v95 = *(_DWORD *)(v96 + 32 * v95 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v95 == 0x7FFFFFFF)
                  goto LABEL_108;
              }
              v56 = (unint64_t *)(v96 + 32 * v95 + 24);
              goto LABEL_109;
            }
          }
          else
          {
            LODWORD(v94) = 0;
          }
LABEL_108:
          v97 = re::HashTable<re::ecs2::Entity const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(v201, v94, v93, &v202, &v217);
          ++*(_DWORD *)(a1 + 552);
          v56 = (unint64_t *)(*(_QWORD *)(a1 + 528) + 32 * v97 + 24);
        }
LABEL_109:
        v32 = *v56;
        v47 = v43;
LABEL_81:
        v76 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27));
        v33 = v76 ^ (v76 >> 31);
        v77 = *v200;
        if (!*v200
          || (v77 = v33 % *(unsigned int *)(a1 + 80),
              v78 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v77),
              (_DWORD)v78 == 0x7FFFFFFF))
        {
LABEL_86:
          v80 = *(unsigned int *)(a1 + 92);
          if ((_DWORD)v80 == 0x7FFFFFFF)
          {
            v80 = *(unsigned int *)(a1 + 88);
            v81 = v80;
            if ((_DWORD)v80 == *(_DWORD *)(a1 + 80))
            {
              re::HashTable<re::ecs2::Entity const*,re::ecs2::RootPhysicsSimulationData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v200, 2 * *(_DWORD *)(a1 + 84));
              v77 = v33 % *(unsigned int *)(a1 + 80);
              v81 = *(_DWORD *)(a1 + 88);
            }
            *(_DWORD *)(a1 + 88) = v81 + 1;
            v82 = *(_QWORD *)(a1 + 72);
            v83 = *(_DWORD *)(v82 + 56 * v80 + 8);
          }
          else
          {
            v82 = *(_QWORD *)(a1 + 72);
            v83 = *(_DWORD *)(v82 + 56 * v80 + 8);
            *(_DWORD *)(a1 + 92) = v83 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v82 + 56 * v80 + 8) = v83 | 0x80000000;
          *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56 * v80 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56 * v80 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v77);
          *(_QWORD *)(*(_QWORD *)(a1 + 72) + 56 * v80) = v33;
          *(_QWORD *)(*(_QWORD *)(a1 + 72) + 56 * v80 + 16) = v43;
          v84 = *(_QWORD *)(a1 + 72) + 56 * v80;
          *(_DWORD *)(v84 + 24) = v3;
          *(_DWORD *)(v84 + 28) = v46;
          *(_QWORD *)(v84 + 32) = v47;
          *(_QWORD *)(v84 + 40) = v23;
          *(_QWORD *)(v84 + 48) = v32;
          *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v77) = v80;
          ++*(_DWORD *)(a1 + 84);
          ++*(_DWORD *)(a1 + 96);
        }
        else
        {
          v79 = *(_QWORD *)(a1 + 72);
          while (*(_QWORD *)(v79 + 56 * v78 + 16) != v43)
          {
            LODWORD(v78) = *(_DWORD *)(v79 + 56 * v78 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v78 == 0x7FFFFFFF)
              goto LABEL_86;
          }
        }
        v85 = *(_QWORD *)(v43 + 328);
        if (v85)
        {
          v86 = *(unint64_t **)(v43 + 344);
          v87 = 8 * v85;
          do
          {
            v88 = *v86++;
            v33 = v88;
            *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v209) = v88;
            v89 = re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::addUninitialized((uint64_t)&v203);
            *(_DWORD *)v89 = v3;
            *(_DWORD *)(v89 + 4) = v46;
            *(_QWORD *)(v89 + 8) = v47;
            *(_QWORD *)(v89 + 16) = v23;
            *(_QWORD *)(v89 + 24) = v32;
            v87 -= 8;
          }
          while (v87);
        }
        goto LABEL_95;
      }
LABEL_111:
      v98 = *((_QWORD *)&v205 + 1);
      if (*((_QWORD *)&v205 + 1))
      {
        v99 = 0;
        do
          re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::operator[]((uint64_t)&v203, v99++);
        while (v98 != v99);
      }
      v100 = v203;
      if (*((_QWORD *)&v203 + 1))
      {
        v101 = (char *)v205;
        v102 = v204;
        v103 = *((_QWORD *)&v203 + 1) - 1;
        do
        {
          if ((v102 & 1) != 0)
            v104 = (char *)&v204 + 8;
          else
            v104 = v101;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 40))(v100, *(_QWORD *)&v104[8 * v103]);
          v102 += 2;
          LODWORD(v204) = v102;
          --v103;
        }
        while (v103 != -1);
        *((_QWORD *)&v203 + 1) = 0;
LABEL_122:
        if ((v204 & 1) == 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v100 + 40))(v100, v205);
        goto LABEL_124;
      }
      if ((_QWORD)v203)
        goto LABEL_122;
LABEL_124:
      re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v209);
      if (*(_QWORD *)v209 && (v209[16] & 1) == 0)
        (*(void (**)(void))(**(_QWORD **)v209 + 40))();
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v207);
      LODWORD(v5) = v189;
      v12 = *(_DWORD *)(a3 + 32);
      v11 = *(_QWORD *)(a3 + 16);
LABEL_128:
      if (v12 <= (int)v6 + 1)
        v105 = v6 + 1;
      else
        v105 = v12;
      while (1)
      {
        v9 = (v6 + 1);
        if (v105 - 1 == (_DWORD)v6)
          break;
        LODWORD(v6) = v6 + 1;
        v106 = v9;
        if ((*(_DWORD *)(v11 + 24 * v9 + 8) & 0x80000000) != 0)
          goto LABEL_135;
      }
      v106 = v105;
LABEL_135:
      LODWORD(v6) = v106;
      if ((_DWORD)v5 == v106)
        goto LABEL_136;
    }
LABEL_25:
    v25 = v13;
    do
    {
      v26 = v25;
      v25 = *(_QWORD *)(v25 + 24);
    }
    while (v25);
    if (*(_QWORD *)(a1 + 464))
    {
      v27 = *(_QWORD *)(v26 + 16);
      v28 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27));
      v29 = (v28 ^ (v28 >> 31)) % *(unsigned int *)(a1 + 488);
      v30 = *(_QWORD *)(a1 + 480);
      v31 = *(unsigned int *)(*(_QWORD *)(a1 + 472) + 4 * v29);
      if ((_DWORD)v31 != 0x7FFFFFFF)
      {
        while (*(_QWORD *)(v30 + 32 * v31 + 16) != v27)
        {
          v31 = *(_DWORD *)(v30 + 32 * v31 + 8) & 0x7FFFFFFF;
          if (v31 == 0x7FFFFFFF)
            goto LABEL_33;
        }
        goto LABEL_34;
      }
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 480);
    }
LABEL_33:
    v31 = 0x7FFFFFFFLL;
LABEL_34:
    v24 = (unint64_t *)(v30 + 32 * v31 + 24);
    v195 = 0u;
    v23 = 1;
    goto LABEL_35;
  }
LABEL_136:
  if ((a2 & 1) != 0)
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v207);
    LODWORD(v205) = 0;
    v203 = 0u;
    v204 = 0u;
    *(_QWORD *)((char *)&v205 + 4) = 0x7FFFFFFFLL;
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)&v203, (uint64_t)v207, 3);
    v108 = *(unsigned int *)(a1 + 496);
    if ((_DWORD)v108)
    {
      v109 = 0;
      v110 = (int *)(*(_QWORD *)(a1 + 480) + 8);
      while (1)
      {
        v111 = *v110;
        v110 += 8;
        if (v111 < 0)
          break;
        if (v108 == ++v109)
        {
          LODWORD(v109) = *(_DWORD *)(a1 + 496);
          break;
        }
      }
    }
    else
    {
      LODWORD(v109) = 0;
    }
    if ((_DWORD)v108 != (_DWORD)v109)
    {
      v112 = v109;
      v3 = 80;
      do
      {
        v113 = *(_QWORD *)(a1 + 480) + 32 * v112;
        v217.columns[0] = 0uLL;
        v217.columns[1].i32[0] = 1;
        memset(&v217.columns[1].u32[2], 0, 28);
        re::BucketArray<re::ecs2::Entity const*,8ul>::init((uint64_t)&v217, (uint64_t)v207, 1uLL);
        v116 = *(_QWORD *)(v113 + 16);
        v115 = (_QWORD *)(v113 + 16);
        v114 = v116;
        v117 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v116 ^ (v116 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v116 ^ (v116 >> 30))) >> 27));
        v118 = v117 ^ (v117 >> 31);
        if ((_QWORD)v203)
        {
          v119 = v118 % DWORD2(v204);
          v120 = *(unsigned int *)(*((_QWORD *)&v203 + 1) + 4 * v119);
          if ((_DWORD)v120 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(v204 + 80 * v120 + 16) != v114)
            {
              LODWORD(v120) = *(_DWORD *)(v204 + 80 * v120 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v120 == 0x7FFFFFFF)
                goto LABEL_151;
            }
            goto LABEL_152;
          }
        }
        else
        {
          LODWORD(v119) = 0;
        }
LABEL_151:
        re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::Entity const*,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)&v203, v119, v118, v115, (uint64_t)&v217);
        ++DWORD2(v205);
LABEL_152:
        re::BucketArray<re::ecs2::Entity const*,8ul>::deinit((uint64_t)&v217);
        if (v217.columns[0].i64[0] && (v217.columns[1].i8[0] & 1) == 0)
          (*(void (**)(void))(*(_QWORD *)v217.columns[0].i64[0] + 40))();
        if (*(_DWORD *)(a1 + 496) <= (v109 + 1))
          v121 = v109 + 1;
        else
          v121 = *(_DWORD *)(a1 + 496);
        while (1)
        {
          v112 = (v109 + 1);
          if (v121 - 1 == (_DWORD)v109)
            break;
          LODWORD(v109) = v109 + 1;
          v122 = v112;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 480) + 32 * v112 + 8) & 0x80000000) != 0)
            goto LABEL_162;
        }
        v122 = v121;
LABEL_162:
        LODWORD(v109) = v122;
      }
      while ((_DWORD)v108 != v122);
    }
    v123 = *(unsigned int *)(a1 + 544);
    if ((_DWORD)v123)
    {
      v23 = 0;
      v124 = (int *)(*(_QWORD *)(a1 + 528) + 8);
      while (1)
      {
        v125 = *v124;
        v124 += 8;
        if (v125 < 0)
          break;
        if (v123 == ++v23)
        {
          v23 = *(unsigned int *)(a1 + 544);
          break;
        }
      }
    }
    else
    {
      v23 = 0;
    }
    if ((_DWORD)v123 != (_DWORD)v23)
    {
      v126 = v23;
      do
      {
        v127 = *(_QWORD *)(*(_QWORD *)(a1 + 528) + 32 * v126 + 16);
        v128 = v127;
        do
        {
          v129 = v128;
          v128 = *(_QWORD *)(v128 + 24);
        }
        while (v128);
        if ((_QWORD)v203)
        {
          v130 = *(_QWORD *)(v129 + 16);
          v131 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v130 ^ (v130 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v130 ^ (v130 >> 30))) >> 27));
          v32 = v204;
          v10 = *(unsigned int *)(*((_QWORD *)&v203 + 1) + 4 * ((v131 ^ (v131 >> 31)) % DWORD2(v204)));
          if ((_DWORD)v10 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(v204 + 80 * v10 + 16) != v130)
            {
              v10 = *(_DWORD *)(v204 + 80 * v10 + 8) & 0x7FFFFFFF;
              if (v10 == 0x7FFFFFFF)
                goto LABEL_179;
            }
            goto LABEL_180;
          }
        }
        else
        {
          v32 = v204;
        }
LABEL_179:
        v10 = 0x7FFFFFFFLL;
LABEL_180:
        v132 = v32 + 80 * v10;
        v134 = *(_QWORD *)(v132 + 64);
        v33 = v132 + 64;
        v133 = v134;
        v43 = *(_QWORD *)(v33 - 32);
        if (v134 + 1 > 8 * v43)
        {
          v135 = v123;
          v136 = v127;
          re::BucketArray<re::ecs2::Entity const*,8ul>::setBucketsCapacity((uint64_t *)(v33 - 40), (v133 + 8) >> 3);
          v127 = v136;
          v123 = v135;
          v43 = *(_QWORD *)(v33 - 32);
        }
        v3 = v133 >> 3;
        if (v43 <= v133 >> 3)
          goto LABEL_278;
        if ((*(_BYTE *)(v33 - 24) & 1) != 0)
          v137 = v33 - 16;
        else
          v137 = *(_QWORD *)(v33 - 8);
        v138 = *(_QWORD *)(v137 + 8 * v3);
        ++*(_QWORD *)v33;
        ++*(_DWORD *)(v32 + 80 * v10 + 72);
        *(_QWORD *)(v138 + 8 * (v133 & 7)) = v127;
        v139 = *(_DWORD *)(a1 + 544);
        if (v139 <= (int)v23 + 1)
          v140 = (v23 + 1);
        else
          v140 = v139;
        while (1)
        {
          v126 = (v23 + 1);
          if ((_DWORD)v140 - 1 == (_DWORD)v23)
            break;
          LODWORD(v23) = v23 + 1;
          v141 = v126;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 528) + 32 * v126 + 8) & 0x80000000) != 0)
            goto LABEL_193;
        }
        v141 = v140;
LABEL_193:
        v23 = v141;
      }
      while ((_DWORD)v123 != (_DWORD)v141);
    }
    v142 = v205;
    if ((_DWORD)v205)
    {
      v143 = 0;
      v144 = (int *)(v204 + 8);
      while (1)
      {
        v145 = *v144;
        v144 += 20;
        if (v145 < 0)
          break;
        if (v205 == ++v143)
        {
          LODWORD(v143) = v205;
          break;
        }
      }
    }
    else
    {
      LODWORD(v143) = 0;
    }
    if ((_DWORD)v205 == (_DWORD)v143)
    {
LABEL_201:
      re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::Entity const*,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)&v203);
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v207);
      return;
    }
    v146 = v143;
    v147 = v204;
    v197 = v205;
    v194 = v205;
    while (1)
    {
      v148 = v147 + 80 * v146;
      v149 = *(_QWORD *)(v148 + 16);
      v199 = v147;
      if (!*(_QWORD *)(a1 + 416))
        break;
      v150 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v149 ^ (v149 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v149 ^ (v149 >> 30))) >> 27));
      v151 = (v150 ^ (v150 >> 31)) % *(unsigned int *)(a1 + 440);
      v152 = *(_QWORD *)(a1 + 432);
      v153 = *(unsigned int *)(*(_QWORD *)(a1 + 424) + 4 * v151);
      if ((_DWORD)v153 == 0x7FFFFFFF)
        goto LABEL_210;
      while (*(_QWORD *)(v152 + 88 * v153 + 16) != v149)
      {
        v153 = *(_DWORD *)(v152 + 88 * v153 + 8) & 0x7FFFFFFF;
        if (v153 == 0x7FFFFFFF)
          goto LABEL_210;
      }
LABEL_211:
      v43 = v152 + 88 * v153 + 24;
      v209[0] = 0;
      v154 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
             + 8);
      if (*(_QWORD *)(v149 + 224) > v154)
      {
        v155 = *(_QWORD *)(*(_QWORD *)(v149 + 240) + 8 * v154);
        if (v155)
        {
          v156 = *(_QWORD *)(v155 + 24);
          if (v156)
          {
            v157 = *(_QWORD *)(v155 + 40);
            v158 = 8 * v156;
            while (1)
            {
              v159 = *(_QWORD *)(*(_QWORD *)v157 + 16);
              if ((*(_BYTE *)(v159 + 288) & 1) != 0 && !*(_BYTE *)(v159 + 371))
                break;
              v157 += 8;
              v158 -= 8;
              if (!v158)
                goto LABEL_218;
            }
            re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v159, (const re::ecs2::Entity *)1, &v217);
            if (!v209[0])
              v209[0] = 1;
            *(simd_float4x4 *)&v209[16] = v217;
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v217, v43, 0);
            if (v43 != v217.columns[0].i64[0]
              || v217.columns[0].u16[4] != 0xFFFFLL
              || (v217.columns[0].i32[2] & 0xFFFF0000) != 0xFFFF0000)
            {
              do
              {
                v180 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v217);
                re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(v180, (simd_float4x4 *)&v209[16]);
                re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v217);
              }
              while (v217.columns[0].i64[0] != v43
                   || v217.columns[0].u16[4] != 0xFFFF
                   || v217.columns[0].u16[5] != 0xFFFF);
            }
            v197 = v205;
            v147 = v204;
            goto LABEL_252;
          }
        }
      }
LABEL_218:
      v160 = v147 + 80 * v146;
      v162 = *(_QWORD *)(v160 + 64);
      v161 = (unint64_t *)(v160 + 64);
      v10 = v162;
      if (v162)
      {
        v32 = 0;
        v163 = v148 + 24;
        v33 = v148 + 48;
        do
        {
          v164 = *v161;
          if (*v161 <= v32)
            goto LABEL_276;
          v23 = v32 >> 3;
          v3 = *(_QWORD *)(v163 + 8);
          if (v3 <= v32 >> 3)
            goto LABEL_277;
          v165 = v33;
          if ((*(_BYTE *)(v163 + 16) & 1) == 0)
            v165 = *(_QWORD *)(v163 + 32);
          v23 = *(_QWORD *)(*(_QWORD *)(v165 + 8 * v23) + 8 * (v32 & 7));
          re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v23, (const re::ecs2::Entity *)1, &v217);
          if (*(_QWORD *)(a1 + 512))
          {
            v166 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
            v167 = *(unsigned int *)(*(_QWORD *)(a1 + 520) + 4 * ((v166 ^ (v166 >> 31)) % *(unsigned int *)(a1 + 536)));
            v168 = *(_QWORD *)(a1 + 528);
            if ((_DWORD)v167 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v168 + 32 * v167 + 16) != v23)
              {
                v167 = *(_DWORD *)(v168 + 32 * v167 + 8) & 0x7FFFFFFF;
                if (v167 == 0x7FFFFFFF)
                  goto LABEL_230;
              }
              goto LABEL_231;
            }
          }
          else
          {
            v168 = *(_QWORD *)(a1 + 528);
          }
LABEL_230:
          v167 = 0x7FFFFFFFLL;
LABEL_231:
          v169 = re::DataArray<re::ecs2::PhysicsSimulationData>::get(v43, *(_QWORD *)(v168 + 32 * v167 + 24));
          re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(v169, &v217);
          ++v32;
        }
        while (v32 != v10);
      }
      v170 = *(unsigned int *)(a1 + 496);
      if ((_DWORD)v170)
      {
        v23 = 0;
        v171 = (int *)(*(_QWORD *)(a1 + 480) + 8);
        while (1)
        {
          v172 = *v171;
          v171 += 8;
          if (v172 < 0)
            break;
          if (v170 == ++v23)
          {
            v23 = *(unsigned int *)(a1 + 496);
            break;
          }
        }
      }
      else
      {
        v23 = 0;
      }
      if ((_DWORD)v170 == (_DWORD)v23)
      {
        v142 = v194;
      }
      else
      {
        v173 = v23;
        do
        {
          v174 = re::DataArray<re::ecs2::PhysicsSimulationData>::get(v43, *(_QWORD *)(*(_QWORD *)(a1 + 480) + 32 * v173 + 24));
          v217.columns[0] = (simd_float4)xmmword_2260E5F10;
          v217.columns[1] = (simd_float4)xmmword_2260E5F20;
          v217.columns[2] = (simd_float4)xmmword_2260E5F40;
          v217.columns[3] = (simd_float4)xmmword_2260E5D70;
          re::ecs2::PhysicsSimulationData::updatePhysicsOrigin(v174, &v217);
          v175 = *(_DWORD *)(a1 + 496);
          if (v175 <= (int)v23 + 1)
            v176 = (v23 + 1);
          else
            v176 = v175;
          v177 = v23;
          while (1)
          {
            v173 = (v177 + 1);
            if ((_DWORD)v176 - 1 == v177)
              break;
            ++v177;
            v23 = v173;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 480) + 32 * v173 + 8) & 0x80000000) != 0)
              goto LABEL_249;
          }
          v23 = v176;
LABEL_249:
          ;
        }
        while ((_DWORD)v170 != (_DWORD)v23);
        v142 = v194;
      }
      v147 = v199;
LABEL_252:
      if (v197 <= (int)v143 + 1)
        v178 = v143 + 1;
      else
        v178 = v197;
      while (1)
      {
        v146 = (v143 + 1);
        if (v178 - 1 == (_DWORD)v143)
          break;
        LODWORD(v143) = v143 + 1;
        v179 = v146;
        if ((*(_DWORD *)(v147 + 80 * v146 + 8) & 0x80000000) != 0)
          goto LABEL_259;
      }
      v179 = v178;
LABEL_259:
      LODWORD(v143) = v179;
      if (v142 == v179)
        goto LABEL_201;
    }
    v152 = *(_QWORD *)(a1 + 432);
LABEL_210:
    LODWORD(v153) = 0x7FFFFFFF;
    goto LABEL_211;
  }
}

uint64_t re::DataArray<re::ecs2::PhysicsSimulationData>::get(uint64_t a1, int a2)
{
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(a2))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(a2)) + 272 * (unsigned __int16)a2;
}

_QWORD *re::ecs2::PhysicsSimulationManager::init(uint64_t a1, uint64_t a2, char a3)
{
  _anonymous_namespace_ *v5;
  uint64_t v6;
  re *v7;
  uint64_t *v8;
  uint64_t v9;
  re *v10;
  uint64_t *v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 312) = a2;
  *(_BYTE *)(a1 + 320) = a3;
  re::ecs2::PhysicsSimulationTracking::updateEnginePreferredUpdateRate((re::ecs2::PhysicsSimulationTracking *)(a1 + 16));
  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory
                                                                            + 32))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator);
  *(_QWORD *)(a1 + 592) = v5;
  v6 = re::ServiceLocator::serviceOrNull<re::JobService>(a2);
  v8 = re::globalAllocators(v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 48, 16);
  *(_BYTE *)(v9 + 16) = 1;
  *(_QWORD *)v9 = &off_24ED7E090;
  *(_QWORD *)(v9 + 8) = 0;
  *(_OWORD *)(v9 + 32) = xmmword_22610B500;
  *(_QWORD *)(a1 + 600) = v9;
  v10 = (re *)re::ForceEffectCollection::add((re::ForceEffectCollection *)(*(_QWORD *)(a1 + 592) + 248), (re::ForceEffect *)v9);
  v11 = re::globalAllocators(v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 32, 8);
  *(_BYTE *)(v12 + 16) = 1;
  *(_QWORD *)v12 = &off_24ED7EE58;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 20) = 0x3E4CCCCD3CA3D70ALL;
  *(_QWORD *)(a1 + 608) = v12;
  return re::ForceEffectCollection::add((re::ForceEffectCollection *)(*(_QWORD *)(a1 + 592) + 248), (re::ForceEffect *)v12);
}

uint64_t re::ServiceLocator::serviceOrNull<re::JobService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::JobService>(void)::info = re::introspect_JobService(0);
  }
  v3 = re::introspect<re::JobService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

_QWORD *re::ecs2::PhysicsSimulationManager::deinit(_QWORD *this)
{
  _QWORD *v1;
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;

  v1 = this;
  this[39] = 0;
  v2 = (void (***)(_QWORD))this[74];
  if (v2)
  {
    v3 = re::globalAllocators((re *)this)[2];
    (**v2)(v2);
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  v1[74] = 0;
  v4 = v1[75];
  if (v4)
  {
    v5 = re::globalAllocators((re *)this);
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5[2] + 40))(v5[2], v4);
  }
  v1[75] = 0;
  v6 = v1[76];
  if (v6)
  {
    v7 = re::globalAllocators((re *)this);
    this = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7[2] + 40))(v7[2], v6);
  }
  v1[76] = 0;
  return this;
}

uint64_t re::ecs2::PhysicsSimulationTracking::trackedComponents(re::ecs2::PhysicsSimulationTracking *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t re::ecs2::PhysicsSimulationTracking::trackedActivationComponents(re::ecs2::PhysicsSimulationTracking *this)
{
  return *((_QWORD *)this + 36);
}

void re::ecs2::PhysicsSimulationTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  re::ecs2::PhysicsSimulationTracking::buildPerEntityStateForDirtyEntityHierarchies(a1, 1, a2);
}

void re::internal::CallableMemFn<re::ecs2::PhysicsSimulationTracking,REEventHandlerResult (re::ecs2::PhysicsSimulationTracking::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSimulationTracking,REEventHandlerResult (re::ecs2::PhysicsSimulationTracking::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSimulationTracking,REEventHandlerResult (re::ecs2::PhysicsSimulationTracking::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED482E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSimulationTracking,REEventHandlerResult (re::ecs2::PhysicsSimulationTracking::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED482E0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::PhysicsSimulationTracking,REEventHandlerResult (re::ecs2::PhysicsSimulationTracking::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

_anonymous_namespace_ *re::DataArray<re::ecs2::PhysicsSimulationData>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 272 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _BYTE v39[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v39, 0, 36);
          *(_QWORD *)&v39[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v39, v13, v12);
          v15 = *(_OWORD *)v39;
          *(_OWORD *)v39 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v39[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v39[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v39[24];
          *(_OWORD *)&v39[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v39[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 88;
            }
            while (v21 < v20);
          }
          re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v39);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 88 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 88 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 88 * v9;
  *(_DWORD *)(v23 + v26 + 8) = v24 | 0x80000000;
  v27 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26 + 16) = *a4;
  v28 = *(_QWORD *)(a1 + 16);
  v29 = v28 + v26;
  *(_QWORD *)(v28 + v26 + 76) = 0x1FFFFFFFFLL;
  v30 = (int *)(v28 + v26 + 76);
  *(_DWORD *)(v29 + 72) = 0;
  *(_QWORD *)(v29 + 64) = 0;
  *(_OWORD *)v39 = 0u;
  *(_OWORD *)(v29 + 24) = 0u;
  v31 = v28 + v26 + 24;
  *(_QWORD *)&v39[16] = 0;
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)&v39[32] = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_DWORD *)(v31 + 24) = 1;
  *(_DWORD *)&v39[24] = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v31, (uint64_t)a5);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a5, (uint64_t)v39);
  if (*(_QWORD *)v39 && *(_QWORD *)&v39[32])
    (*(void (**)(void))(**(_QWORD **)v39 + 40))();
  v32 = (_DWORD *)(v28 + 88 * v9);
  v33 = v32[16];
  v32[16] = a5[10];
  a5[10] = v33;
  v34 = v32[17];
  v32[17] = a5[11];
  a5[11] = v34;
  v35 = v32[18];
  v32[18] = a5[12];
  a5[12] = v35;
  v36 = *v30;
  *v30 = a5[13];
  a5[13] = v36;
  v37 = v32[20];
  v32[20] = a5[14];
  a5[14] = v37;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v27) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::ecs2::PhysicsSimulationData::PhysicsSimulationData(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, int a5, char a6, float a7)
{
  id *v14;
  void *v15;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v14 = (id *)(a1 + 48);
  *(_OWORD *)a1 = 0u;
  objc_initWeak((id *)(a1 + 48), 0);
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 112) = xmmword_2260E5F10;
  *(_OWORD *)(a1 + 128) = xmmword_2260E5F20;
  *(_OWORD *)(a1 + 144) = xmmword_2260E5F40;
  *(_OWORD *)(a1 + 160) = xmmword_2260E5D70;
  *(_OWORD *)(a1 + 176) = xmmword_2260E5F10;
  *(_OWORD *)(a1 + 192) = xmmword_2260E5F20;
  *(_OWORD *)(a1 + 208) = xmmword_2260E5F40;
  *(_OWORD *)(a1 + 224) = xmmword_2260E5D70;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (a3)
    v15 = (void *)(a3 + 8);
  else
    v15 = 0;
  *(_QWORD *)a1 = a2;
  objc_storeWeak(v14, v15);
  *(_OWORD *)(a1 + 240) = *a4;
  *(float *)(a1 + 256) = a7;
  *(_DWORD *)(a1 + 260) = a5;
  *(_BYTE *)(a1 + 264) = a6;
  return a1;
}

void re::HashTable<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  _BYTE v26[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v13, v12);
          v15 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v26[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v26[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 32;
            }
            while (v21 < v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 32 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED48390;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED483E8;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48338;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48338;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48390;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48390;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED483E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED483E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48440;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48440;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (!*(_BYTE *)(a2 + 371))
  {
    v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48498;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48498;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED484F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED484F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void *re::FixedArray<re::ecs2::ComponentTypeBase const*>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, 8 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1024, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 32 * (a2 & 0x1F);
}

uint64_t re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::RootPhysicsSimulationData,32ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 32) >> 5);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 32 * (v2 & 0x1F);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  _BYTE v27[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v13, v12);
          v15 = *(_OWORD *)v27;
          *(_OWORD *)v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v27[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v27[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Entity const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 32;
            }
            while (v21 < v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 32 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 7);
}

_QWORD *re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 128, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::Pair<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,true>,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::RootPhysicsSimulationData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v14 - 8) & 0x80000000) != 0)
          {
            v15 = *(_QWORD *)(v14 - 16);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::RootPhysicsSimulationData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 56 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v18 + 16) = *(_QWORD *)v14;
            v22 = *(_QWORD *)(a1 + 16) + 56 * v18;
            v23 = *(_OWORD *)(v14 + 8);
            *(_OWORD *)(v22 + 40) = *(_OWORD *)(v14 + 24);
            *(_OWORD *)(v22 + 24) = v23;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 56;
        }
        while (v11 < v10);
      }
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)v25);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

double re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::Entity const*,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = v6 + 24;
          re::BucketArray<re::ecs2::Entity const*,8ul>::deinit(v6 + 24);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v8);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 80;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t *re::BucketArray<re::ecs2::Entity const*,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::Entity const*,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::Entity const*,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::Entity const*,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      if (v3 <= i >> 3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
  else if (!v3)
  {
    goto LABEL_8;
  }
  do
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  while (*(_QWORD *)(a1 + 8));
LABEL_8:
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::Entity const*,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v31, v13, v12);
          v15 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v31[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::Entity const*,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::Entity const*,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16);
  v26 = v25 + 80 * v9;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v26 += 24;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  v27 = a2;
  *(_QWORD *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  *(_QWORD *)&v31[24] = 0;
  *(_QWORD *)&v31[32] = 0;
  *(_OWORD *)v31 = 0uLL;
  *(_DWORD *)(v26 + 16) = 3;
  *(_DWORD *)&v31[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v26, a5);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5, (uint64_t)v31);
  result = *(_QWORD *)v31;
  if (*(_QWORD *)v31 && (v31[16] & 1) == 0)
    result = (*(uint64_t (**)(void))(**(_QWORD **)v31 + 40))();
  v29 = v25 + 80 * v9;
  v30 = *(_QWORD *)(v29 + 64);
  *(_QWORD *)(v29 + 64) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = v30;
  ++*(_DWORD *)(v29 + 72);
  ++*(_DWORD *)(a5 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v27) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t *re::ecs2::allocInfo_GroundPlaneSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_155);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_155))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107530, 0);
    *(uint64_t *)((char *)&qword_254107540 + 6) = 0;
    qword_254107540 = 0;
    qword_254107550 = 0;
    qword_254107558 = 0xFFFFFFFFLL;
    qword_254107530 = (uint64_t)&off_24ED7DAA8;
    qword_254107560 = (uint64_t)"GroundPlaneSystem";
    dword_254107568 = 0;
    unk_254107570 = 0u;
    unk_254107580 = 0u;
    unk_254107590 = 0u;
    qword_2541075A0 = 0;
    __cxa_guard_release(&_MergedGlobals_155);
  }
  return &qword_254107530;
}

void re::ecs2::initInfo_GroundPlaneSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD8D974E6B5794F08;
  v5[1] = "GroundPlaneSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_GroundPlaneSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::GroundPlaneSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::GroundPlaneSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::GroundPlaneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::GroundPlaneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::GroundPlaneSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::GroundPlaneSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::GroundPlaneSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED48548;
}

void *re::internal::defaultDestruct<re::ecs2::GroundPlaneSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::GroundPlaneSystem>(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED48548;
}

void *re::internal::defaultDestructV2<re::ecs2::GroundPlaneSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_GroundPlaneSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GroundPlaneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_GroundPlaneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_GroundPlaneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::GroundPlaneSystem>, this);
}

void re::ecs2::GroundPlaneSystem::update(uint64_t a1, uint64_t a2)
{
  re::ecs2::SceneComponentTable *v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  re::ecs2::Entity *v10;
  int v11;

  v2 = (re::ecs2::SceneComponentTable *)(a2 + 200);
  v3 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = !v3 || !*(_QWORD *)(v3 + 24) || *(_BYTE *)(**(_QWORD **)(v3 + 40) + 31) == 0;
  v5 = re::ecs2::SceneComponentTable::get(v2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 24);
    if (v6)
    {
      v7 = *(uint64_t **)(v5 + 40);
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        v10 = *(re::ecs2::Entity **)(v9 + 16);
        if (*(_BYTE *)(v9 + 25))
          v11 = v4;
        else
          v11 = 1;
        re::ecs2::Entity::setSelfEnabled(v10, v11);
        v8 -= 8;
      }
      while (v8);
    }
  }
}

void re::ecs2::GroundPlaneSystem::~GroundPlaneSystem(re::ecs2::GroundPlaneSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::GroundPlaneSystem::typeInfo(re::ecs2::GroundPlaneSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"GroundPlaneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_GroundPlaneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_GroundPlaneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::GroundPlaneSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::GroundPlaneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::GroundPlaneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void re::StateMachineBlackboardBinding::collectAllGraphParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (****v13)(re::TransitionConditionInt *__hidden, const re::StateParameterBlackboard *);
  uint64_t v14;
  uint64_t (***v15)(re::TransitionConditionInt *__hidden, const re::StateParameterBlackboard *);
  StringID *v16;
  uint64_t (**v17)(re::TransitionConditionInt *__hidden, const re::StateParameterBlackboard *);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2 + 48);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2 + 96);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2 + 144);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD **)(a1 + 32);
    v19 = &v5[v4];
    while (1)
    {
      v20 = v5;
      v6 = *v5;
      v7 = *(_QWORD *)(v6 + 40);
      if (v7)
        break;
LABEL_20:
      v5 = v20 + 1;
      if (v20 + 1 == v19)
        return;
    }
    v8 = *(_QWORD **)(v6 + 56);
    v21 = &v8[v7];
    while (1)
    {
      v22 = v8;
      v9 = *v8;
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
        break;
LABEL_19:
      v8 = v22 + 1;
      if (v22 + 1 == v21)
        goto LABEL_20;
    }
    v11 = *(_QWORD *)(v9 + 40);
    v23 = v11 + 8 * v10;
    while (1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      if (v12)
        break;
LABEL_18:
      v11 += 8;
      if (v11 == v23)
        goto LABEL_19;
    }
    v13 = *(uint64_t (*****)(re::TransitionConditionInt *__hidden, const re::StateParameterBlackboard *))(*(_QWORD *)v11 + 32);
    v14 = 8 * v12;
    while (1)
    {
      v15 = *v13;
      if (*v13)
      {
        v16 = (StringID *)(v15 + 1);
        v17 = *v15;
        v18 = a2;
        if (v17 == &off_24ED1FAA0)
          goto LABEL_16;
        v18 = a2 + 48;
        if (v17 == &off_24ED1FAE8)
          goto LABEL_16;
        if (v17 == &off_24ED1FB58)
        {
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a2 + 144, v16);
          v18 = a2 + 96;
LABEL_16:
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v18, v16);
          goto LABEL_17;
        }
        v18 = a2 + 96;
        if (v17 == &off_24ED1FB20)
          goto LABEL_16;
      }
LABEL_17:
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_18;
    }
  }
}

void re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;

  v4 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  v6 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v6)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v5 % v6;
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v5 % v6));
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v7, v5, (int)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 24 * v11 + 8;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v10 = (_QWORD *)(v9 + 24 * v8 + 8);
    if (re::StringID::operator==(v10, a2))
      return (uint64_t)v10;
    v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::StateMachineBlackboardBinding::removeUnreferencedParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  StringID *v10;
  int v11;
  int v12;
  re::StringID *v13;
  uint64_t v14;
  re::StringID *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  StringID *v24;
  int v25;
  int v26;
  re::StringID *v27;
  uint64_t v28;
  uint64_t v29;
  re::StringID *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  StringID *v38;
  int v39;
  int v40;
  re::StringID *v41;
  uint64_t v42;
  uint64_t v43;
  re::StringID *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  StringID *v53;
  int v54;
  int v55;
  re::StringID *v56;
  uint64_t v57;
  _QWORD v59[2];
  uint64_t v60;
  int v61;
  re::StringID *v62;

  v62 = 0;
  v59[1] = 0;
  v60 = 0;
  v59[0] = 0;
  v61 = 0;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(int **)(a1 + 24);
    while (1)
    {
      v7 = *v6;
      v6 += 8;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 40);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 == (_DWORD)v5)
    goto LABEL_26;
  v8 = v5;
  v9 = *(_QWORD *)(a1 + 24);
  do
  {
    v10 = (StringID *)(v9 + 32 * v8 + 8);
    if (!re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::contains(a2, v10))re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v59, v10);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(a1 + 40) <= (v5 + 1))
      v11 = v5 + 1;
    else
      v11 = *(_DWORD *)(a1 + 40);
    while (1)
    {
      v8 = (v5 + 1);
      if (v11 - 1 == (_DWORD)v5)
        break;
      LODWORD(v5) = v5 + 1;
      v12 = v8;
      if ((*(_DWORD *)(v9 + 32 * v8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v5) = v12;
  }
  while ((_DWORD)v4 != v12);
  if (!v60)
  {
LABEL_26:
    v60 = 0;
  }
  else
  {
    v13 = v62;
    v14 = 16 * v60;
    do
    {
      re::StateParameterBlackboard::removeStateParameterInt((re::StateParameterBlackboard *)a1, v13);
      v13 = (re::StringID *)((char *)v13 + 16);
      v14 -= 16;
    }
    while (v14);
    v15 = v62;
    v16 = v60;
    v60 = 0;
    if (v16)
    {
      v17 = 16 * v16;
      do
      {
        re::StringID::destroyString(v15);
        v15 = (re::StringID *)((char *)v15 + 16);
        v17 -= 16;
      }
      while (v17);
    }
  }
  ++v61;
  v18 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = *(int **)(a1 + 72);
    while (1)
    {
      v21 = *v20;
      v20 += 8;
      if (v21 < 0)
        break;
      if (v18 == ++v19)
      {
        LODWORD(v19) = *(_DWORD *)(a1 + 88);
        break;
      }
    }
  }
  else
  {
    LODWORD(v19) = 0;
  }
  if ((_DWORD)v18 != (_DWORD)v19)
  {
    v22 = v19;
    v23 = *(_QWORD *)(a1 + 72);
    do
    {
      v24 = (StringID *)(v23 + 32 * v22 + 8);
      if (!re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::contains(a2 + 48, v24))re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v59, v24);
      v23 = *(_QWORD *)(a1 + 72);
      if (*(_DWORD *)(a1 + 88) <= (v19 + 1))
        v25 = v19 + 1;
      else
        v25 = *(_DWORD *)(a1 + 88);
      while (1)
      {
        v22 = (v19 + 1);
        if (v25 - 1 == (_DWORD)v19)
          break;
        LODWORD(v19) = v19 + 1;
        v26 = v22;
        if ((*(_DWORD *)(v23 + 32 * v22) & 0x80000000) != 0)
          goto LABEL_44;
      }
      v26 = v25;
LABEL_44:
      LODWORD(v19) = v26;
    }
    while ((_DWORD)v18 != v26);
  }
  if (v60)
  {
    v27 = v62;
    v28 = 16 * v60;
    do
    {
      re::StateParameterBlackboard::removeStateParameterFloat((re::StateParameterBlackboard *)a1, v27);
      v27 = (re::StringID *)((char *)v27 + 16);
      v28 -= 16;
    }
    while (v28);
    v29 = v60;
    v30 = v62;
    v60 = 0;
    if (v29)
    {
      v31 = 16 * v29;
      do
      {
        re::StringID::destroyString(v30);
        v30 = (re::StringID *)((char *)v30 + 16);
        v31 -= 16;
      }
      while (v31);
    }
  }
  else
  {
    v60 = 0;
  }
  ++v61;
  v32 = *(unsigned int *)(a1 + 136);
  if ((_DWORD)v32)
  {
    v33 = 0;
    v34 = *(int **)(a1 + 120);
    while (1)
    {
      v35 = *v34;
      v34 += 8;
      if (v35 < 0)
        break;
      if (v32 == ++v33)
      {
        LODWORD(v33) = *(_DWORD *)(a1 + 136);
        break;
      }
    }
  }
  else
  {
    LODWORD(v33) = 0;
  }
  if ((_DWORD)v32 != (_DWORD)v33)
  {
    v36 = v33;
    v37 = *(_QWORD *)(a1 + 120);
    do
    {
      v38 = (StringID *)(v37 + 32 * v36 + 8);
      if (!re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::contains(a2 + 96, v38))re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v59, v38);
      v37 = *(_QWORD *)(a1 + 120);
      if (*(_DWORD *)(a1 + 136) <= (v33 + 1))
        v39 = v33 + 1;
      else
        v39 = *(_DWORD *)(a1 + 136);
      while (1)
      {
        v36 = (v33 + 1);
        if (v39 - 1 == (_DWORD)v33)
          break;
        LODWORD(v33) = v33 + 1;
        v40 = v36;
        if ((*(_DWORD *)(v37 + 32 * v36) & 0x80000000) != 0)
          goto LABEL_70;
      }
      v40 = v39;
LABEL_70:
      LODWORD(v33) = v40;
    }
    while ((_DWORD)v32 != v40);
  }
  if (v60)
  {
    v41 = v62;
    v42 = 16 * v60;
    do
    {
      re::StateParameterBlackboard::removeStateParameterBool((re::StateParameterBlackboard *)a1, v41);
      v41 = (re::StringID *)((char *)v41 + 16);
      v42 -= 16;
    }
    while (v42);
    v43 = v60;
    v44 = v62;
    v60 = 0;
    if (v43)
    {
      v45 = 16 * v43;
      do
      {
        re::StringID::destroyString(v44);
        v44 = (re::StringID *)((char *)v44 + 16);
        v45 -= 16;
      }
      while (v45);
    }
  }
  else
  {
    v60 = 0;
  }
  ++v61;
  v46 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v46)
  {
    v47 = 0;
    v48 = *(int **)(a1 + 168);
    while (1)
    {
      v49 = *v48;
      v48 += 8;
      if (v49 < 0)
        break;
      if (v46 == ++v47)
      {
        LODWORD(v47) = *(_DWORD *)(a1 + 184);
        break;
      }
    }
  }
  else
  {
    LODWORD(v47) = 0;
  }
  if ((_DWORD)v46 != (_DWORD)v47)
  {
    v50 = v47;
    v51 = a2 + 144;
    v52 = *(_QWORD *)(a1 + 168);
    do
    {
      v53 = (StringID *)(v52 + 32 * v50 + 8);
      if (!re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::contains(v51, v53))re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)v59, v53);
      v52 = *(_QWORD *)(a1 + 168);
      if (*(_DWORD *)(a1 + 184) <= (v47 + 1))
        v54 = v47 + 1;
      else
        v54 = *(_DWORD *)(a1 + 184);
      while (1)
      {
        v50 = (v47 + 1);
        if (v54 - 1 == (_DWORD)v47)
          break;
        LODWORD(v47) = v47 + 1;
        v55 = v50;
        if ((*(_DWORD *)(v52 + 32 * v50) & 0x80000000) != 0)
          goto LABEL_96;
      }
      v55 = v54;
LABEL_96:
      LODWORD(v47) = v55;
    }
    while ((_DWORD)v46 != v55);
  }
  if (v60)
  {
    v56 = v62;
    v57 = 16 * v60;
    do
    {
      re::StateParameterBlackboard::removeStateParameterTrigger((re::StateParameterBlackboard *)a1, v56);
      v56 = (re::StringID *)((char *)v56 + 16);
      v57 -= 16;
    }
    while (v57);
  }
  return re::DynamicArray<re::StringID>::deinit((uint64_t)v59);
}

BOOL re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::contains(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                        % v2));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  do
  {
    result = re::StringID::operator==((_QWORD *)(v7 + 24 * v5 + 8), a2);
    if (result)
      break;
    v5 = *(_DWORD *)(v7 + 24 * v5) & 0x7FFFFFFF;
  }
  while (v5 != 0x7FFFFFFF);
  return result;
}

uint64_t re::StateMachineBlackboardBinding::addMissingParameters(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _anonymous_namespace_ *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  StringID *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _anonymous_namespace_ *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  StringID *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  StringID *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  re::ecs2::EntityComponentCollection *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v65;
  __int128 v66;
  int v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  re::BindNode *v78[6];

  v3 = a2;
  v4 = result;
  v78[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  v61 = *(unsigned int *)(a2 + 32);
  v5 = 0;
  if ((_DWORD)v61)
  {
    v6 = *(int **)(a2 + 16);
    while (1)
    {
      v7 = *v6;
      v6 += 6;
      if (v7 < 0)
        break;
      if (v61 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  if ((_DWORD)v61 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 16);
    v60 = (re::ecs2::EntityComponentCollection *)(a3 + 4);
    do
    {
      if (!*(_QWORD *)(v4 + 8)
        || (v10 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v9 + 24 * v8 + 8) >> 31) ^ (*(_QWORD *)(v9 + 24 * v8 + 8) >> 1)),
            v11 = *(unsigned int *)(*(_QWORD *)(v4 + 16)
                                  + 4
                                  * (((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                     * (v10 ^ (v10 >> 27))) >> 31))
                                   % *(unsigned int *)(v4 + 32))),
            (_DWORD)v11 == 0x7FFFFFFF))
      {
LABEL_13:
        v68 = 0;
        v65 = 0u;
        v66 = 0u;
        v67 = 0;
        v13 = (_QWORD *)a3[21];
        if (!v13)
          v13 = (_QWORD *)re::ecs2::EntityComponentCollection::add(v60, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (!re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v13 + 89), (_QWORD *)(v9 + 24 * v8 + 8)))
        {
          *(_QWORD *)&v69 = 0;
          re::KeyValueStore::addOrReplaceValue<long long>((re::KeyValueStore *)(v13 + 4), (StringID *)(v9 + 24 * v8 + 8), &v69);
          re::ecs2::Component::markDirty(v13);
        }
        re::makeBindNode((re *)a3, (uint64_t)v78);
        re::DynamicString::operator+((re::DynamicString *)&v73, *(const char **)(v9 + 24 * v8 + 16), (re::DynamicString *)&v69);
        re::DynamicString::operator+((re::DynamicString *)&v69, "]", (re::DynamicString *)&v75);
        if ((_QWORD)v69)
        {
          if ((BYTE8(v69) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v69 + 40))();
          v69 = 0u;
          v70 = 0u;
        }
        if (v73 && (v74 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v73 + 40))();
        v15 = v77;
        if ((v76 & 1) == 0)
          v15 = (char *)&v76 + 1;
        v16 = v76 >> 1;
        if ((v76 & 1) != 0)
          v16 = v76 >> 1;
        v73 = v15;
        v74 = v16;
        re::BindNode::bindPoint<long long>(v78, (uint64_t *)&v73, (uint64_t)&v69);
        *(_QWORD *)&v65 = v69;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)&v65 + 8, (uint64_t)&v69 + 8);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69 + 8);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69 + 8);
        v17 = *((_QWORD *)&v66 + 1);
        if (v75 && (v76 & 1) != 0)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v75 + 40))(v75, v77);
        re::BindNode::deinit((re::BindNode *)v78);
        if (v17)
          re::StateParameterBlackboard::addStateParameterInt((re::StateParameterBlackboard *)v4, (StringID *)(v9 + 24 * v8 + 8), (const re::BindPoint *)&v65);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v65 + 8);
        result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v65 + 8);
      }
      else
      {
        v12 = *(_QWORD *)(v4 + 24);
        while (1)
        {
          result = re::StringID::operator==((_QWORD *)(v12 + 32 * v11 + 8), (_QWORD *)(v9 + 24 * v8 + 8));
          if ((result & 1) != 0)
            break;
          v11 = *(_DWORD *)(v12 + 32 * v11) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF)
            goto LABEL_13;
        }
      }
      v3 = a2;
      v18 = *(_DWORD *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 16);
      if (v18 <= (int)v5 + 1)
        v18 = v5 + 1;
      while (1)
      {
        v8 = (v5 + 1);
        if (v18 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v19 = v8;
        if ((*(_DWORD *)(v9 + 24 * v8) & 0x80000000) != 0)
          goto LABEL_40;
      }
      v19 = v18;
LABEL_40:
      LODWORD(v5) = v19;
    }
    while ((_DWORD)v61 != v19);
  }
  v62 = *(unsigned int *)(v3 + 80);
  v20 = 0;
  if ((_DWORD)v62)
  {
    v21 = *(int **)(v3 + 64);
    while (1)
    {
      v22 = *v21;
      v21 += 6;
      if (v22 < 0)
        break;
      if (v62 == ++v20)
      {
        LODWORD(v20) = *(_DWORD *)(v3 + 80);
        break;
      }
    }
  }
  if ((_DWORD)v62 != (_DWORD)v20)
  {
    v23 = v20;
    v24 = *(_QWORD *)(v3 + 64);
    do
    {
      v25 = (StringID *)(v24 + 24 * v23 + 8);
      if (!*(_QWORD *)(v4 + 56)
        || (v26 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&v25->var0 >> 31) ^ (*(_QWORD *)&v25->var0 >> 1)),
            v27 = *(unsigned int *)(*(_QWORD *)(v4 + 64)
                                  + 4
                                  * (((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                     * (v26 ^ (v26 >> 27))) >> 31))
                                   % *(unsigned int *)(v4 + 80))),
            (_DWORD)v27 == 0x7FFFFFFF))
      {
LABEL_53:
        v68 = 0;
        v65 = 0u;
        v66 = 0u;
        v67 = 0;
        v29 = (_QWORD *)a3[21];
        if (!v29)
          v29 = (_QWORD *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a3 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (!re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v29 + 17), (_QWORD *)(v24 + 24 * v23 + 8)))
        {
          LODWORD(v69) = 0;
          re::KeyValueStore::addOrReplaceValue<float>((re::KeyValueStore *)(v29 + 4), (StringID *)(v24 + 24 * v23 + 8), &v69);
          re::ecs2::Component::markDirty(v29);
        }
        re::makeBindNode((re *)a3, (uint64_t)v78);
        re::DynamicString::operator+((re::DynamicString *)&v73, *(const char **)(v24 + 24 * v23 + 16), (re::DynamicString *)&v69);
        re::DynamicString::operator+((re::DynamicString *)&v69, "]", (re::DynamicString *)&v75);
        if ((_QWORD)v69)
        {
          if ((BYTE8(v69) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v69 + 40))();
          v69 = 0u;
          v70 = 0u;
        }
        if (v73 && (v74 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v73 + 40))();
        v31 = v77;
        if ((v76 & 1) == 0)
          v31 = (char *)&v76 + 1;
        v32 = v76 >> 1;
        if ((v76 & 1) != 0)
          v32 = v76 >> 1;
        v73 = v31;
        v74 = v32;
        re::BindNode::bindPoint<float>(v78, (uint64_t *)&v73, (uint64_t)&v69);
        *(_QWORD *)&v65 = v69;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)&v65 + 8, (uint64_t)&v69 + 8);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69 + 8);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69 + 8);
        v33 = *((_QWORD *)&v66 + 1);
        if (v75 && (v76 & 1) != 0)
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v75 + 40))(v75, v77);
        re::BindNode::deinit((re::BindNode *)v78);
        if (v33)
          re::StateParameterBlackboard::addStateParameterFloat((re::StateParameterBlackboard *)v4, v25, (const re::BindPoint *)&v65);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v65 + 8);
        result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v65 + 8);
      }
      else
      {
        v28 = *(_QWORD *)(v4 + 72);
        while (1)
        {
          result = re::StringID::operator==((_QWORD *)(v28 + 32 * v27 + 8), (_QWORD *)(v24 + 24 * v23 + 8));
          if ((result & 1) != 0)
            break;
          v27 = *(_DWORD *)(v28 + 32 * v27) & 0x7FFFFFFF;
          if (v27 == 0x7FFFFFFF)
            goto LABEL_53;
        }
      }
      v3 = a2;
      v34 = *(_DWORD *)(a2 + 80);
      v24 = *(_QWORD *)(a2 + 64);
      if (v34 <= (int)v20 + 1)
        v34 = v20 + 1;
      while (1)
      {
        v23 = (v20 + 1);
        if (v34 - 1 == (_DWORD)v20)
          break;
        LODWORD(v20) = v20 + 1;
        v35 = v23;
        if ((*(_DWORD *)(v24 + 24 * v23) & 0x80000000) != 0)
          goto LABEL_80;
      }
      v35 = v34;
LABEL_80:
      LODWORD(v20) = v35;
    }
    while ((_DWORD)v62 != v35);
  }
  v36 = *(unsigned int *)(v3 + 128);
  if ((_DWORD)v36)
  {
    v37 = 0;
    v38 = *(int **)(v3 + 112);
    while (1)
    {
      v39 = *v38;
      v38 += 6;
      if (v39 < 0)
        break;
      if (v36 == ++v37)
      {
        LODWORD(v37) = *(_DWORD *)(v3 + 128);
        break;
      }
    }
  }
  else
  {
    LODWORD(v37) = 0;
  }
  if ((_DWORD)v36 != (_DWORD)v37)
  {
    v40 = v37;
    v41 = *(_QWORD *)(v3 + 112);
    do
    {
      v42 = (StringID *)(v41 + 24 * v40 + 8);
      if (!*(_QWORD *)(v4 + 104)
        || (v43 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&v42->var0 >> 31) ^ (*(_QWORD *)&v42->var0 >> 1)),
            v44 = *(unsigned int *)(*(_QWORD *)(v4 + 112)
                                  + 4
                                  * (((0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                     * (v43 ^ (v43 >> 27))) >> 31))
                                   % *(unsigned int *)(v4 + 128))),
            (_DWORD)v44 == 0x7FFFFFFF))
      {
LABEL_94:
        v72 = 0;
        v69 = 0u;
        v70 = 0u;
        v71 = 0;
          re::StateParameterBlackboard::addStateParameterBool((re::StateParameterBlackboard *)v4, v42, (const re::BindPoint *)&v69);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69 + 8);
        result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69 + 8);
      }
      else
      {
        v45 = *(_QWORD *)(v4 + 120);
        while (1)
        {
          result = re::StringID::operator==((_QWORD *)(v45 + 32 * v44 + 8), v42);
          if ((result & 1) != 0)
            break;
          v44 = *(_DWORD *)(v45 + 32 * v44) & 0x7FFFFFFF;
          if (v44 == 0x7FFFFFFF)
            goto LABEL_94;
        }
      }
      v41 = *(_QWORD *)(v3 + 112);
      if (*(_DWORD *)(v3 + 128) <= (v37 + 1))
        v46 = v37 + 1;
      else
        v46 = *(_DWORD *)(v3 + 128);
      while (1)
      {
        v40 = (v37 + 1);
        if (v46 - 1 == (_DWORD)v37)
          break;
        LODWORD(v37) = v37 + 1;
        v47 = v40;
        if ((*(_DWORD *)(v41 + 24 * v40) & 0x80000000) != 0)
          goto LABEL_104;
      }
      v47 = v46;
LABEL_104:
      LODWORD(v37) = v47;
    }
    while ((_DWORD)v36 != v47);
  }
  v48 = *(unsigned int *)(v3 + 176);
  if ((_DWORD)v48)
  {
    v49 = 0;
    v50 = *(int **)(v3 + 160);
    while (1)
    {
      v51 = *v50;
      v50 += 6;
      if (v51 < 0)
        break;
      if (v48 == ++v49)
      {
        LODWORD(v49) = *(_DWORD *)(v3 + 176);
        break;
      }
    }
  }
  else
  {
    LODWORD(v49) = 0;
  }
  if ((_DWORD)v48 != (_DWORD)v49)
  {
    v52 = v49;
    v53 = *(_QWORD *)(v3 + 160);
    do
    {
      v54 = (StringID *)(v53 + 24 * v52 + 8);
      if (!*(_QWORD *)(v4 + 152)
        || (v55 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&v54->var0 >> 31) ^ (*(_QWORD *)&v54->var0 >> 1)),
            v56 = *(unsigned int *)(*(_QWORD *)(v4 + 160)
                                  + 4
                                  * (((0x94D049BB133111EBLL * (v55 ^ (v55 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                     * (v55 ^ (v55 >> 27))) >> 31))
                                   % *(unsigned int *)(v4 + 176))),
            (_DWORD)v56 == 0x7FFFFFFF))
      {
LABEL_118:
        v72 = 0;
        v69 = 0u;
        v70 = 0u;
        v71 = 0;
        {
          re::StateParameterBlackboard::addStateParameterBool((re::StateParameterBlackboard *)v4, v54, (const re::BindPoint *)&v69);
          re::StateParameterBlackboard::addStateParameterTrigger((re::StateParameterBlackboard *)v4, v54, (const re::BindPoint *)&v69);
        }
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69 + 8);
        result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v69 + 8);
      }
      else
      {
        v57 = *(_QWORD *)(v4 + 168);
        while (1)
        {
          result = re::StringID::operator==((_QWORD *)(v57 + 32 * v56 + 8), v54);
          if ((result & 1) != 0)
            break;
          v56 = *(_DWORD *)(v57 + 32 * v56) & 0x7FFFFFFF;
          if (v56 == 0x7FFFFFFF)
            goto LABEL_118;
        }
      }
      v53 = *(_QWORD *)(v3 + 160);
      if (*(_DWORD *)(v3 + 176) <= (v49 + 1))
        v58 = v49 + 1;
      else
        v58 = *(_DWORD *)(v3 + 176);
      while (1)
      {
        v52 = (v49 + 1);
        if (v58 - 1 == (_DWORD)v49)
          break;
        LODWORD(v49) = v49 + 1;
        v59 = v52;
        if ((*(_DWORD *)(v53 + 24 * v52) & 0x80000000) != 0)
          goto LABEL_128;
      }
      v59 = v58;
LABEL_128:
      LODWORD(v49) = v59;
    }
    while ((_DWORD)v48 != v59);
  }
  return result;
}

uint64_t re::StateParameterBlackboard::addStateParameterInt(re::StateParameterBlackboard *this, StringID *a2, const re::BindPoint *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v6 = re::globalAllocators(this);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 64, 8);
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = off_24ED485D0;
  v9 = v7;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)a3;
  re::DynamicArray<re::BindPoint::BindPointData>::operator=(v7 + 16, (uint64_t *)a3 + 1);
  return re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::StateParameterInt *&>((uint64_t)this + 8, a2, &v9);
}

uint64_t re::StateParameterBlackboard::addStateParameterFloat(re::StateParameterBlackboard *this, StringID *a2, const re::BindPoint *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v6 = re::globalAllocators(this);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 64, 8);
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = off_24ED48608;
  v9 = v7;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)a3;
  re::DynamicArray<re::BindPoint::BindPointData>::operator=(v7 + 16, (uint64_t *)a3 + 1);
  return re::HashTable<re::StringID,re::StateParameterFloat *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::StateParameterFloat *&>((uint64_t)this + 56, a2, &v9);
}

BOOL `anonymous namespace'::createKeyValueEntryAndBindPoint<BOOL>(StringID *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  _anonymous_namespace_ *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[3];
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  re::BindNode *v17[5];

  v17[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)a2[21];
  if (!v6)
    v6 = (_QWORD *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)(v6 + 11), a1))
  {
    LOBYTE(v12[0]) = 0;
    re::KeyValueStore::addOrReplaceValue<BOOL>((re::KeyValueStore *)(v6 + 4), a1, v12);
    re::ecs2::Component::markDirty(v6);
  }
  re::makeBindNode((re *)a2, (uint64_t)v17);
  re::DynamicString::operator+((re::DynamicString *)&v13, a1->var1, (re::DynamicString *)v12);
  re::DynamicString::operator+((re::DynamicString *)v12, "]", (re::DynamicString *)&v15);
  if (*(_QWORD *)&v12[0])
  {
    if ((BYTE8(v12[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v12[0] + 40))();
    memset(v12, 0, 32);
  }
  if (v13 && (v14 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v13 + 40))();
  v8 = (char *)v16[1];
  if ((v16[0] & 1) == 0)
    v8 = (char *)v16 + 1;
  v9 = LOBYTE(v16[0]) >> 1;
  if ((v16[0] & 1) != 0)
    v9 = v16[0] >> 1;
  v13 = v8;
  v14 = v9;
  re::BindNode::bindPoint<BOOL>(v17, (uint64_t *)&v13, (uint64_t)v12);
  *a3 = *(_QWORD *)&v12[0];
  re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(a3 + 1), (uint64_t)v12 + 8);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v12 + 8);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v12 + 8);
  v10 = a3[3];
  if (v15 && (v16[0] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  re::BindNode::deinit((re::BindNode *)v17);
  return v10 != 0;
}

uint64_t re::StateParameterBlackboard::addStateParameterBool(re::StateParameterBlackboard *this, StringID *a2, const re::BindPoint *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v6 = re::globalAllocators(this);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 64, 8);
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = off_24ED48640;
  v9 = v7;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)a3;
  re::DynamicArray<re::BindPoint::BindPointData>::operator=(v7 + 16, (uint64_t *)a3 + 1);
  return re::HashTable<re::StringID,re::StateParameterBool *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::StateParameterBool *&>((uint64_t)this + 104, a2, &v9);
}

uint64_t re::StateParameterBlackboard::addStateParameterTrigger(re::StateParameterBlackboard *this, StringID *a2, const re::BindPoint *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;

  v6 = re::globalAllocators(this);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 64, 8);
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = off_24ED48678;
  v9 = v7;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)a3;
  re::DynamicArray<re::BindPoint::BindPointData>::operator=(v7 + 16, (uint64_t *)a3 + 1);
  return re::HashTable<re::StringID,re::StateParameterTrigger *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::StateParameterTrigger *&>((uint64_t)this + 152, a2, &v9);
}

uint64_t re::StateMachineBlackboardBinding::populateFromExplicitParameterBinding(re::StateMachineBlackboardBinding *this, re::StateParameterBlackboard *a2, re::StateMachineParameterBinding *a3, re::ecs2::Entity *a4)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  StringID *v9;
  unint64_t v10;
  int v11;
  const char *v12;
  size_t v13;
  const char *v14;
  size_t v15;
  const char *v16;
  size_t v17;
  const char *v19;
  size_t v20;
  _BYTE v21[8];
  _BYTE v22[16];
  uint64_t v23;
  re::BindNode *v24[5];

  v24[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  v6 = *((_DWORD *)a2 + 6);
  if ((a4 & 1) == 0 && v6 == *((_DWORD *)a2 + 10))
    return 1;
  *((_DWORD *)a2 + 10) = v6;
  re::makeBindNode(a3, (uint64_t)v24);
  if (!*((_QWORD *)a2 + 2))
  {
LABEL_16:
    v7 = 1;
    goto LABEL_19;
  }
  v8 = 0;
  while (1)
  {
    v9 = (StringID *)re::StateMachineParameterBinding::name(a2, v8);
    v10 = re::StateMachineParameterBinding::bindTarget(a2, v8);
    v11 = re::StateMachineParameterBinding::type(a2, v8);
    if (v11 == 3)
    {
      v14 = *(const char **)(v10 + 8);
      v15 = strlen(v14);
      v19 = v14;
      v20 = v15;
      re::BindNode::bindPoint<BOOL>(v24, (uint64_t *)&v19, (uint64_t)v21);
      if (!v23)
        goto LABEL_17;
      re::StateParameterBlackboard::addStateParameterBool(this, v9, (const re::BindPoint *)v21);
      re::StateParameterBlackboard::addStateParameterTrigger(this, v9, (const re::BindPoint *)v21);
      goto LABEL_15;
    }
    if (v11 != 2)
      break;
    v16 = *(const char **)(v10 + 8);
    v17 = strlen(v16);
    v19 = v16;
    v20 = v17;
    re::BindNode::bindPoint<float>(v24, (uint64_t *)&v19, (uint64_t)v21);
    if (!v23)
      goto LABEL_17;
    re::StateParameterBlackboard::addStateParameterFloat(this, v9, (const re::BindPoint *)v21);
LABEL_15:
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v22);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v22);
    if (++v8 >= *((_QWORD *)a2 + 2))
      goto LABEL_16;
  }
  if (v11 != 1)
    goto LABEL_18;
  v12 = *(const char **)(v10 + 8);
  v13 = strlen(v12);
  v19 = v12;
  v20 = v13;
  re::BindNode::bindPoint<long long>(v24, (uint64_t *)&v19, (uint64_t)v21);
  if (v23)
  {
    re::StateParameterBlackboard::addStateParameterInt(this, v9, (const re::BindPoint *)v21);
    goto LABEL_15;
  }
LABEL_17:
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v22);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v22);
LABEL_18:
  v7 = 0;
LABEL_19:
  re::BindNode::deinit((re::BindNode *)v24);
  return v7;
}

unint64_t re::StateMachineParameterBinding::name(re::StateMachineParameterBinding *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 4) + 40 * a2;
}

unint64_t re::StateMachineParameterBinding::bindTarget(re::StateMachineParameterBinding *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 4) + 40 * a2 + 24;
}

uint64_t re::StateMachineParameterBinding::type(re::StateMachineParameterBinding *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*((_QWORD *)this + 4) + 40 * a2 + 16);
}

double re::BindNode::bindPoint<long long>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v7;
  const re::IntrospectionBase *v8;
  int v9;
  uint64_t v10;
  re::BindNode **v12;

  v3 = a2;
  if ((v4 & 1) == 0)
  {
    v12 = a1;
    v10 = a3;
    a3 = v10;
    v3 = a2;
    v9 = v7;
    a1 = v12;
    if (v9)
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v8);
      a3 = v10;
      v3 = a2;
      a1 = v12;
    }
  }
  return re::BindNode::bindPoint(a1, v5[402], v3, a3);
}

double re::BindNode::bindPoint<float>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  unsigned __int8 v4;
  __objc2_class_ro **p_info;
  int v7;
  const re::IntrospectionBase *v8;
  int v9;
  uint64_t v10;
  re::BindNode **v12;

  v3 = a2;
  p_info = VideoSpillMapMetalSession.info;
  if ((v4 & 1) == 0)
  {
    v12 = a1;
    v10 = a3;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a3 = v10;
    v3 = a2;
    v9 = v7;
    a1 = v12;
    if (v9)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v8);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a3 = v10;
      v3 = a2;
      a1 = v12;
    }
  }
  return re::BindNode::bindPoint(a1, (uint64_t)p_info[7], v3, a3);
}

double re::BindNode::bindPoint<BOOL>@<D0>(re::BindNode **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v7;
  const re::IntrospectionBase *v8;
  int v9;
  uint64_t v10;
  re::BindNode **v12;

  v3 = a2;
  if ((v4 & 1) == 0)
  {
    v12 = a1;
    v10 = a3;
    a3 = v10;
    v3 = a2;
    v9 = v7;
    a1 = v12;
    if (v9)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v8);
      a3 = v10;
      v3 = a2;
      a1 = v12;
    }
  }
  return re::BindNode::bindPoint(a1, v5[331], v3, a3);
}

uint64_t re::StateMachineBlackboardBinding::updateFromGraphsAndParameterBinding(re::StateMachineBlackboardBinding *this, re::StateParameterBlackboard *a2, const re::AssetHandle *a3, re::StateMachineParameterBinding *a4, re::ecs2::Entity *a5)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[5];
  _OWORD v12[2];
  int v13;
  uint64_t v14;
  _OWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18[4];
  int v19;
  uint64_t v20;
  uint64_t v21[4];
  int v22;
  uint64_t v23;

  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v14 = 0x7FFFFFFFLL;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v17 = 0x7FFFFFFFLL;
  memset(v18, 0, sizeof(v18));
  v20 = 0x7FFFFFFFLL;
  memset(v21, 0, sizeof(v21));
  v19 = 0;
  v22 = 0;
  v23 = 0x7FFFFFFFLL;
  if ((_DWORD)a5)
  {
    v8 = (_QWORD *)re::AssetHandle::asset<re::StateMachineAsset>(a2);
    if (v8)
    {
      re::StateMachineAsset::getAllGraphs(v8, (uint64_t)v11);
      re::StateMachineBlackboardBinding::collectAllGraphParameters((uint64_t)v11, (uint64_t)v12);
      if (v11[0] && v11[4])
        (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
      re::StateMachineBlackboardBinding::removeUnreferencedParameters((uint64_t)this, (uint64_t)v12);
    }
    v9 = 1;
    re::StateMachineBlackboardBinding::populateFromExplicitParameterBinding(this, a3, a4, (re::ecs2::Entity *)1);
    re::StateMachineBlackboardBinding::addMissingParameters((uint64_t)this, (uint64_t)v12, a4);
  }
  else
  {
    v9 = re::StateMachineBlackboardBinding::populateFromExplicitParameterBinding(this, a3, a4, 0);
  }
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v21);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v18);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v12);
  return v9;
}

uint64_t re::AssetHandle::asset<re::StateMachineAsset>(re::StateMachineAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::StateMachineAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::StateParameterInt *&>(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterInt *&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterInt *&>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterInt *&>(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::StateParameterFloat *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::StateParameterFloat *&>(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::StateParameterFloat *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterFloat *&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,re::StateParameterFloat *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterFloat *&>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::StateParameterFloat *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::StateParameterFloat *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::StateParameterFloat *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterFloat *&>(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::StateParameterBool *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::StateParameterBool *&>(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::StateParameterBool *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterBool *&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,re::StateParameterBool *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterBool *&>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::StateParameterBool *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::StateParameterBool *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::StateParameterBool *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterBool *&>(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::StateParameterTrigger *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<re::StateParameterTrigger *&>(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::StateParameterTrigger *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterTrigger *&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::StateParameterTrigger::parameterReset(re::StateParameterTrigger *this)
{
  return re::StateParameterBool::setValue(this, 0);
}

uint64_t re::StateParameterBool::setValue(re::StateParameterBool *this, unsigned __int8 a2)
{
  unsigned __int8 *v2;
  uint64_t result;
  unsigned __int8 v4;

  v4 = a2;
  if (!*((_QWORD *)this + 4))
    return 0;
  v2 = (unsigned __int8 *)this + 8;
  result = re::BindPoint::isAlive((re::StateParameterBool *)((char *)this + 8));
  if ((_DWORD)result)
  {
    re::BindPoint::setValue<BOOL>(v2, &v4);
    return 1;
  }
  return result;
}

unsigned __int8 *re::BindPoint::setValue<BOOL>(unsigned __int8 *result, unsigned __int8 *a2)
{
  uint64_t v2;
  re::BindPoint *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  int v16;
  _QWORD v17[2];
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)result + 3);
  if (v2)
  {
    v4 = (re::BindPoint *)result;
    MEMORY[0x24BDAC7A8](result);
    v6 = (_QWORD *)((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    if (v5 >= 0x200)
      v7 = 512;
    else
      v7 = v5;
    bzero((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    v8 = 0;
    v9 = 0;
    v10 = *((_QWORD *)v4 + 3);
    do
    {
      if (v10 == v9)
      {
        v17[1] = 0;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v18 = 136315906;
        v19 = "operator[]";
        v20 = 1024;
        v21 = 797;
        v22 = 2048;
        v23 = v10;
        v24 = 2048;
        v25 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = (_QWORD *)(*((_QWORD *)v4 + 5) + v8);
      if (!*v11)
        v11 = (_QWORD *)v11[2];
      v6[v9++] = v11;
      v8 += 32;
    }
    while (v2 != v9);
    v12 = v2 - 1;
    v13 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 120))(*v6, 0, v6 + 1, v12);
    if (v13)
    {
      v14 = (_BYTE *)v13;
      result = (unsigned __int8 *)re::BindPoint::isOverridden(v4);
      v15 = *a2;
      if (!(_DWORD)result || *v14 != v15)
      {
        *v14 = v15;
        re::BindPoint::setIsOverridden((uint64_t)v4, 1);
        return (unsigned __int8 *)re::BindPoint::markAsWritten((uint64_t)v4);
      }
    }
    else
    {
      result = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v6 + 88))(*v6, 0, v6 + 1, v12);
      if (result)
      {
        v16 = *a2;
        if (*result != v16)
        {
          *result = v16;
          return (unsigned __int8 *)re::BindPoint::markAsWritten((uint64_t)v4);
        }
      }
    }
  }
  return result;
}

uint64_t re::HashTable<re::StringID,re::StateParameterTrigger *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterTrigger *&>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::StateParameterTrigger *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::StateParameterTrigger *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::StateParameterTrigger *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::StateParameterTrigger *&>(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, int a4, StringID *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8), a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::KeyValueStore::addOrReplaceValue<long long>(re::KeyValueStore *a1, StringID *a2, _QWORD *a3)
{
  uint64_t v6;
  __objc2_class_ro **v7;
  __objc2_class_ro **v8;
  __objc2_class_ro *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const re::IntrospectionBase *v13;
  int v14;
  const re::IntrospectionBase *v15;
  __objc2_class_ro *v16;
  uint64_t v17;

  v6 = (uint64_t)a1 + 8;
  v7 = (__objc2_class_ro **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v16 = *v7;
      v9 = v16;
      if (v14)
      {
        re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v15);
        v9 = v16;
      }
    }
    if (v9 == (__objc2_class_ro *)re::introspect<long long>(void)::info)
      return re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 680, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<long long>(void)::info = (uint64_t)re::introspect_int64_t(0, v13);
    }
  }
  v17 = re::introspect<long long>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v17);
  return re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 680, a2, a3);
}

uint64_t re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::KeyValueStore::addOrReplaceValue<float>(re::KeyValueStore *a1, StringID *a2, _DWORD *a3)
{
  uint64_t v6;
  void **v7;
  __objc2_class_ro **v8;
  void *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  const re::IntrospectionBase *v13;
  int v14;
  const re::IntrospectionBase *v15;
  void *v16;
  void *v17;

  v6 = (uint64_t)a1 + 8;
  v7 = (void **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 8, a2);
  if (v7)
  {
    v8 = (__objc2_class_ro **)v7;
    v9 = *v7;
    if ((v10 & 1) == 0)
    {
      v16 = *v7;
      v9 = v16;
      if (v14)
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v15);
        v9 = v16;
      }
    }
    if (v9 == re::introspect<float>(void)::info)
      return re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1 + 104, a2, a3);
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v6, a2);
    re::KeyValueStore::removeValue(a1, *v8, (const re::StringID *)a2);
  }
  if ((v11 & 1) == 0)
  {
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v13);
    }
  }
  v17 = re::introspect<float>(void)::info;
  re::HashTable<re::StringID,re::IntrospectionBase const*,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v6, a2, &v17);
  return re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)a1 + 104, a2, a3);
}

uint64_t re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_DWORD *)(v11 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

uint64_t re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,float,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

void re::PhysicsDebugRenderer::drawCapsuleLines(uint64_t a1, float32x4_t *a2, __n128 *a3, float a4, float a5)
{
  float v8;
  unint64_t v9;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  __n128 *v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  unint64_t v62;
  float32x4_t v63;
  unint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x4_t v75;
  int8x16_t v76;
  unint64_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  int8x16_t v85;
  unint64_t v86;
  int8x16_t v88;
  float32x4_t v89;
  float v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float32x4_t v105;
  int8x16_t v106;
  unint64_t v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  int8x16_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int8x16_t v114;
  float32x4_t v115;
  int8x16_t v116;
  unint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int32x2_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157[3];
  float32x4_t v158[3];

  v8 = a5 * 0.5;
  LODWORD(v9) = 0;
  *((float *)&v9 + 1) = a5 * 0.5;
  _Q2 = a2[1];
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL);
  v12 = vnegq_f32(_Q2);
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v14 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q2, v13), (float32x4_t)0, v11);
  v15 = vaddq_f32(_Q2, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), (float32x4_t)0, _Q2, 3));
  v16 = vmulq_f32(_Q2, (float32x4_t)0);
  v138 = v15;
  v140 = _Q2.f32[3]
       - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
  v17 = v15;
  v17.f32[3] = v140;
  v18 = v17;
  v142 = v17;
  v19 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), v12), (float32x4_t)v9, v11);
  v20 = (int8x16_t)vaddq_f32(v19, v19);
  v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL);
  v22 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v12), v21, v11);
  v23 = vmulq_f32(*a2, vaddq_f32(vaddq_f32((float32x4_t)v9, vmulq_laneq_f32(v21, _Q2, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL)));
  v24 = a2[2];
  v126 = vaddq_f32(v24, v23);
  v130 = v8;
  v158[0] = *a2;
  v158[1] = v18;
  v158[2] = v126;
  v22.i32[0] = 0;
  *(float *)&v22.i32[1] = 0.0 - v8;
  v25 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q2, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F10, v11);
  v136 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL), (float32x4_t)xmmword_2260E5F10, _Q2, 3), (float32x4_t)vdupq_n_s32(0xB33BBD2E), _Q2);
  _Q3 = vmulq_f32(_Q2, (float32x4_t)xmmword_2260E5F10);
  _Q6 = vaddq_f32(_Q3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q3.f32, 1));
  _Q3.i32[0] = -1287930578;
  __asm { FMLA            S6, S3, V2.S[3] }
  v32 = v136;
  v32.i32[3] = _Q6.i32[0];
  v33 = v32;
  v132 = v32;
  v134 = *(int32x2_t *)_Q6.f32;
  v34 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22.u64[0], (int32x4_t)v22.u64[0]), (int8x16_t)v22.u64[0], 0xCuLL), v12), (float32x4_t)v22.u64[0], v11);
  v35 = (int8x16_t)vaddq_f32(v34, v34);
  v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), v35, 0xCuLL);
  v37 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), v12), v36, v11);
  v147 = v158[0];
  v122 = vaddq_f32(v24, vmulq_f32(v158[0], vaddq_f32(vaddq_f32((float32x4_t)v22.u64[0], vmulq_laneq_f32(v36, _Q2, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), v37, 0xCuLL))));
  v157[0] = v158[0];
  v157[1] = v33;
  v157[2] = v122;
  v38 = a3 + 1;
  drawArc(a1, v158, a3 + 1, 16, 3.1416, a4);
  drawArc(a1, v157, v38, 16, 3.1416, a4);
  v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v138, (int32x4_t)v138), (int8x16_t)v138, 0xCuLL);
  v40 = (int8x16_t)vmlaq_f32(vmulq_f32(v138, (float32x4_t)xmmword_22610BB20), (float32x4_t)xmmword_22610BB30, v39);
  v120 = v39;
  v145 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
  v41 = vmlaq_f32(vmlaq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), v40, 0xCuLL), (float32x4_t)xmmword_22610BB30, v140), v145, v138);
  v42 = vmulq_f32(v142, (float32x4_t)xmmword_22610BB30);
  _S10 = 1060439283;
  v41.f32[3] = -(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]- (float)(v140 * 0.70711));
  v42.i64[0] = 0x8000000080000000;
  v42.i64[1] = 0x8000000080000000;
  v44 = vmlaq_f32(vmulq_f32(v138, v42), (float32x4_t)0, v39);
  v45 = (int8x16_t)vaddq_f32(v44, v44);
  v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL);
  v47 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL), vnegq_f32(v138)), v46, v39);
  v127 = vaddq_f32(v126, vmulq_f32(v147, vaddq_f32(vaddq_f32(vmulq_n_f32(v46, v140), (float32x4_t)0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), v47, 0xCuLL))));
  v154 = v147;
  v155 = v41;
  v156 = v127;
  drawArc(a1, &v154, v38, 16, 3.1416, a4);
  v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v136, (int32x4_t)v136), (int8x16_t)v136, 0xCuLL);
  v49 = (int8x16_t)vmlaq_f32(vmulq_f32(v136, (float32x4_t)xmmword_22610BB20), (float32x4_t)xmmword_22610BB30, v48);
  v50 = vmlaq_f32(vmlaq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL), (float32x4_t)xmmword_22610BB30, *(float *)v134.i32), v145, v136);
  v51 = vmulq_f32(v132, (float32x4_t)xmmword_22610BB30);
  v50.f32[3] = -(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0]- (float)(*(float *)v134.i32 * 0.70711));
  v51.i64[0] = 0x8000000080000000;
  v51.i64[1] = 0x8000000080000000;
  v52 = vmlaq_f32(vmulq_f32(v136, v51), (float32x4_t)0, v48);
  v53 = (int8x16_t)vaddq_f32(v52, v52);
  v54 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), v53, 0xCuLL);
  v118 = v48;
  v55 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL), vnegq_f32(v136)), v54, v48);
  v154 = v147;
  v155 = v50;
  v123 = vaddq_f32(v122, vmulq_f32(v147, vaddq_f32(vaddq_f32(vmulq_n_f32(v54, *(float *)v134.i32), (float32x4_t)0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), v55, 0xCuLL))));
  v156 = v123;
  drawArc(a1, &v154, v38, 16, 3.1416, a4);
  v56 = (int8x16_t)vmlaq_f32(vmulq_f32(v138, (float32x4_t)xmmword_22610BB40), (float32x4_t)xmmword_22610BB50, v120);
  v57 = vmlaq_f32(vmlaq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), v56, 0xCuLL), (float32x4_t)xmmword_22610BB50, v140), v145, v138);
  v58 = vmulq_f32(v142, (float32x4_t)xmmword_22610BB50);
  v57.f32[3] = -(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]- (float)(v140 * 0.70711));
  v154 = v147;
  v155 = v57;
  v156 = v127;
  drawArc(a1, &v154, v38, 16, 6.2832, a4);
  if (a5 != 0.0)
  {
    v59 = (int8x16_t)vmlaq_f32(vmulq_f32(v136, (float32x4_t)xmmword_22610BB40), (float32x4_t)xmmword_22610BB50, v118);
    v60 = vmulq_f32(v132, (float32x4_t)xmmword_22610BB50);
    v61 = vmlaq_f32(vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), v59, 0xCuLL), (float32x4_t)xmmword_22610BB50, (float32x4_t)vdupq_lane_s32(v134, 0)), v145, v136);
    v61.f32[3] = -(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0]- (float)(*(float *)v134.i32 * 0.70711));
    v154 = v147;
    v155 = v61;
    v156 = v123;
    drawArc(a1, &v154, v38, 16, 6.2832, a4);
    v62 = __PAIR64__(LODWORD(v130), LODWORD(a4));
    v63 = (float32x4_t)LODWORD(a4);
    v63.f32[1] = -v130;
    *(float *)&v64 = -a4;
    v65 = (float32x4_t)COERCE_UNSIGNED_INT(-a4);
    v65.f32[1] = v130;
    *((float *)&v64 + 1) = -v130;
    v124 = (float32x4_t)v64;
    v128 = v65;
    v66 = a2[1];
    v133 = vmulq_f32(v63, *a2);
    v151 = *a2;
    v67 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v66, (int32x4_t)v66), (int8x16_t)v66, 0xCuLL);
    v137 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v133, (int32x4_t)v133), (int8x16_t)v133, 0xCuLL);
    v68 = vnegq_f32(v66);
    v69 = vmlaq_f32(vmulq_f32(v137, v68), v133, v67);
    v70 = (int8x16_t)vaddq_f32(v69, v69);
    v71 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), v70, 0xCuLL);
    v141 = v66;
    v143 = v68;
    v139 = v67;
    v72 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), (int8x16_t)v71, 0xCuLL), v68), v71, v67);
    v148 = a2[2];
    v154 = vaddq_f32(v148, vaddq_f32(vaddq_f32(v133, vmulq_laneq_f32(v71, v66, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), v72, 0xCuLL)));
    v131 = vmulq_f32((float32x4_t)v62, v151);
    v135 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), (int8x16_t)v131, 0xCuLL);
    v73 = vmlaq_f32(vmulq_f32(v135, v68), v131, v67);
    v74 = (int8x16_t)vaddq_f32(v73, v73);
    v75 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), v74, 0xCuLL);
    v76 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL), v68), v75, v67);
    v153 = vaddq_f32(v148, vaddq_f32(vaddq_f32(v131, vmulq_laneq_f32(v75, v66, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), v76, 0xCuLL)));
    v77 = re::PrimitiveRenderingContext::addLine(a1, &v154, &v153);
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v77, v38, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    v121 = vmulq_f32(v128, v151);
    v129 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v121, (int32x4_t)v121), (int8x16_t)v121, 0xCuLL);
    v78 = vmlaq_f32(vmulq_f32(v129, v143), v121, v139);
    v79 = (int8x16_t)vaddq_f32(v78, v78);
    v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), v79, 0xCuLL);
    v81 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL), v143), v80, v139);
    v154 = vaddq_f32(v148, vaddq_f32(vaddq_f32(v121, vmulq_laneq_f32(v80, v141, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), v81, 0xCuLL)));
    v119 = vmulq_f32(v124, v151);
    v125 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v119, (int32x4_t)v119), (int8x16_t)v119, 0xCuLL);
    v82 = vmlaq_f32(vmulq_f32(v125, v143), v119, v139);
    v83 = (int8x16_t)vaddq_f32(v82, v82);
    v84 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), v83, 0xCuLL);
    v85 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), (int8x16_t)v84, 0xCuLL), v143), v84, v139);
    v153 = vaddq_f32(v148, vaddq_f32(vaddq_f32(v119, vmulq_laneq_f32(v84, v141, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), v85, 0xCuLL)));
    v86 = re::PrimitiveRenderingContext::addLine(a1, &v154, &v153);
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v86, v38, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    _V3.S[3] = v141.i32[3];
    v88 = (int8x16_t)vmlaq_f32(vmulq_f32(v141, (float32x4_t)xmmword_22610BB20), (float32x4_t)xmmword_22610BB30, v139);
    v89 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), v88, 0xCuLL), (float32x4_t)xmmword_22610BB30, v141, 3), v145, v141);
    __asm { FMLA            S1, S10, V3.S[3] }
    v91 = _S1;
    v92.i64[0] = 0x8000000080000000;
    v92.i64[1] = 0x8000000080000000;
    v93 = vmlaq_f32(vmulq_f32(v141, v92), (float32x4_t)0, v139);
    v94 = (int8x16_t)vaddq_f32(v93, v93);
    v95 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), v94, 0xCuLL);
    v96 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL), v143), v95, v139);
    v97 = vaddq_f32(v148, vmulq_f32(v151, vaddq_f32(vaddq_f32(vmulq_laneq_f32(v95, v141, 3), (float32x4_t)0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), v96, 0xCuLL))));
    v146 = v91;
    v149 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL);
    v144 = vnegq_f32(v89);
    v98 = vmlaq_f32(vmulq_f32(v137, v144), v133, v149);
    v99 = (int8x16_t)vaddq_f32(v98, v98);
    v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), v99, 0xCuLL);
    v101 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), (int8x16_t)v100, 0xCuLL), v144), v100, v149);
    v102 = vaddq_f32(v97, vaddq_f32(vaddq_f32(v133, vmulq_n_f32(v100, v91)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), v101, 0xCuLL)));
    v152 = v97;
    v103 = vmlaq_f32(vmulq_f32(v135, v144), v131, v149);
    v104 = (int8x16_t)vaddq_f32(v103, v103);
    v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), v104, 0xCuLL);
    v106 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), (int8x16_t)v105, 0xCuLL), v144), v105, v149);
    v153 = vaddq_f32(v97, vaddq_f32(vaddq_f32(v131, vmulq_n_f32(v105, v91)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v106, (int32x4_t)v106), v106, 0xCuLL)));
    v154 = v102;
    v107 = re::PrimitiveRenderingContext::addLine(a1, &v154, &v153);
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v107, v38, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    v108 = vmlaq_f32(vmulq_f32(v129, v144), v121, v149);
    v109 = (int8x16_t)vaddq_f32(v108, v108);
    v110 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109), v109, 0xCuLL);
    v111 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL), v144), v110, v149);
    v112 = vaddq_f32(v152, vaddq_f32(vaddq_f32(v121, vmulq_n_f32(v110, v146)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v111, (int32x4_t)v111), v111, 0xCuLL)));
    v113 = vmlaq_f32(vmulq_f32(v125, v144), v119, v149);
    v114 = (int8x16_t)vaddq_f32(v113, v113);
    v115 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), v114, 0xCuLL);
    v116 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v115, (int32x4_t)v115), (int8x16_t)v115, 0xCuLL), v144), v115, v149);
    v153 = vaddq_f32(v152, vaddq_f32(vaddq_f32(v119, vmulq_n_f32(v115, v146)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), v116, 0xCuLL)));
    v154 = v112;
    v117 = re::PrimitiveRenderingContext::addLine(a1, &v154, &v153);
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v117, v38, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  }
}

void drawArc(uint64_t a1, float32x4_t *a2, __n128 *a3, int a4, float a5, float a6)
{
  int v6;
  __float2 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  unint64_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;

  v6 = a4;
  v10 = __sincosf_stret((float)(a5 / (float)a4) * 0.5);
  v11 = (float32x4_t)LODWORD(a6);
  v12.i64[0] = 0;
  v12.i64[1] = LODWORD(v10.__sinval);
  v35 = vnegq_f32(v12);
  do
  {
    v13 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v35), v11, (float32x4_t)LODWORD(v10.__sinval));
    v14 = (int8x16_t)vaddq_f32(v13, v13);
    v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL);
    v16 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v35), v15, (float32x4_t)LODWORD(v10.__sinval));
    v37 = vaddq_f32(vaddq_f32(v11, vmulq_n_f32(v15, v10.__cosval)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL));
    v17 = *a2;
    v18 = a2[1];
    v19 = vmulq_f32(v11, *a2);
    v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL);
    v21 = vnegq_f32(v18);
    v22 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v21), v19, v20);
    v23 = (int8x16_t)vaddq_f32(v22, v22);
    v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL);
    v25 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), v21), v24, v20);
    v26 = vaddq_f32(vaddq_f32(v19, vmulq_laneq_f32(v24, v18, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), v25, 0xCuLL));
    v27 = a2[2];
    v39 = vaddq_f32(v27, v26);
    v28 = vmulq_f32(v17, v37);
    v29 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), v21), v28, v20);
    v30 = (int8x16_t)vaddq_f32(v29, v29);
    v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), v30, 0xCuLL);
    v32 = vaddq_f32(v28, vmulq_laneq_f32(v31, v18, 3));
    v33 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL), v21), v31, v20);
    v38 = vaddq_f32(v27, vaddq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), v33, 0xCuLL)));
    v34 = re::PrimitiveRenderingContext::addLine(a1, &v39, &v38);
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v34, a3, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    v11 = v37;
    --v6;
  }
  while (v6);
}

void re::PhysicsDebugRenderer::drawCapsuleShape(uint64_t a1, float32x4_t *a2, __n128 *a3, int32x2_t a4, __n128 a5)
{
  float32x4_t v9;
  float32x4_t v11;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  unint64_t v25;
  __n128 v26;
  unint64_t v27;
  float32x4_t v30;
  unint64_t v31;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;

  _Q0 = a2[1];
  v9 = a2[2];
  _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_22610BB60), (float32x4_t)xmmword_22610BB70, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
  v33 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
  v11 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)xmmword_22610BB70, _Q0, 3), v33, _Q0);
  _S8 = 1060439283;
  __asm { FMLA            S3, S8, V0.S[3] }
  v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
  v18 = vnegq_f32(v11);
  v19 = vmulq_f32(v11, (float32x4_t)xmmword_22610BB80);
  v11.i32[3] = _Q3.i32[0];
  v39 = v11;
  v20 = vmlaq_f32(v19, (float32x4_t)xmmword_22610BB90, v17);
  v21 = (int8x16_t)vaddq_f32(v20, v20);
  v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL);
  v23 = vaddq_f32(vmulq_n_f32(v22, *(float *)_Q3.i32), (float32x4_t)xmmword_22610BB90);
  v24 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), v18), v22, v17);
  v34 = vmulq_n_f32(vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL)), a5.n128_f32[0]);
  v38 = vsubq_f32(v9, v34);
  v25 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 2u, &v38, &v39);
  v26 = a5;
  v26.n128_u32[1] = a4.i32[0];
  v26.n128_u32[2] = a4.i32[0];
  v38 = (float32x4_t)v26;
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v25, 2u, 2, (__n128 *)&v38);
  re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a1, v25, 2u, 3, ++a3);
  v38 = vaddq_f32(a2[2], v34);
  v27 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 7u, &v38, &v39);
  v36 = vdupq_lane_s32(a4, 0);
  v38 = (float32x4_t)v36;
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v27, 7u, 2, (__n128 *)&v38);
  re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a1, v27, 7u, 3, a3);
  _Q0 = a2[1];
  _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_22610BBA0), (float32x4_t)xmmword_22610BBB0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
  v30 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)xmmword_22610BBB0, _Q0, 3), v33, _Q0);
  __asm { FMLA            S3, S8, V0.S[3] }
  v30.i32[3] = _Q3.i32[0];
  v37 = vsubq_f32(a2[2], v34);
  v38 = v30;
  v31 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 7u, &v37, &v38);
  v37 = (float32x4_t)v36;
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v31, 7u, 2, (__n128 *)&v37);
  re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a1, v31, 7u, 3, a3);
}

void re::PhysicsDebugRenderer::drawContacts(uint64_t a1, float32x4_t *a2, uint64_t a3, __n128 *a4)
{
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  __n128 *v13;
  float32x4_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  float *f32;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;

  v6 = a2->f32[0];
  if (a2->f32[0] < a2->f32[1])
    v6 = a2->f32[1];
  if (v6 >= a2->f32[2])
    v7 = v6;
  else
    v7 = a2->f32[2];
  v8 = *(unsigned int *)(a3 + 104);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *(int **)(a3 + 88);
    while (1)
    {
      v11 = *v10;
      v10 += 36;
      if (v11 < 0)
        break;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a3 + 104);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((_DWORD)v8 != (_DWORD)v9)
  {
    v12 = v9;
    v13 = a4 + 1;
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    v15 = *(_DWORD *)(a3 + 104);
    v44 = v15;
    v45 = a3;
    do
    {
      v16 = *(_QWORD *)(a3 + 88) + 144 * v12;
      v17 = *(_QWORD *)(v16 + 48);
      if (v17)
      {
        v18 = *(float32x4_t **)(v16 + 64);
        v19 = &v18[5 * v17];
        v20 = 80 * v17;
        f32 = v18[4].f32;
        while (*f32 > 0.0)
        {
          v22 = vmulq_f32(*(float32x4_t *)(f32 - 4), *(float32x4_t *)(f32 - 4));
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0] != 0.0)break;
          f32 += 20;
          v20 -= 80;
          if (!v20)
          {
            a3 = v45;
            goto LABEL_22;
          }
        }
        do
        {
          v23 = vmulq_f32(vaddq_f32(*v18, v18[1]), v14);
          v24 = a2[1];
          v25 = vmulq_f32(*a2, v23);
          v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL);
          v27 = vnegq_f32(v24);
          v28 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), v27), v25, v26);
          v29 = (int8x16_t)vaddq_f32(v28, v28);
          v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), v29, 0xCuLL);
          v31 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL), v27), v30, v26);
          v46 = vaddq_f32(a2[2], vaddq_f32(vaddq_f32(v25, vmulq_laneq_f32(v30, v24, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), v31, 0xCuLL)));
          v32 = v18[2];
          v33 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL), v27), v32, v26);
          v34 = (int8x16_t)vaddq_f32(v33, v33);
          v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), v34, 0xCuLL);
          v36 = vaddq_f32(v32, vmulq_laneq_f32(v35, v24, 3));
          v37 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), v27), v35, v26);
          v38 = vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), v37, 0xCuLL));
          v39 = vmulq_f32(v18[3], v18[3]);
          v47 = vaddq_f32(v46, vmulq_n_f32(v38, v7* sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0])));
          v40 = re::PrimitiveRenderingContext::addPoint(a1, &v46);
          re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(1, v40, v13, (_anonymous_namespace_ *)(a1 + 40), (_BYTE *)(a1 + 513), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 520), *(re **)(a1 + 1192));
          v41 = re::PrimitiveRenderingContext::addLine(a1, &v46, &v47);
          re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v41, v13, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
          v14.i64[0] = 0x3F0000003F000000;
          v14.i64[1] = 0x3F0000003F000000;
          v18 += 5;
        }
        while (v18 != v19);
        LODWORD(v8) = v44;
        a3 = v45;
        v15 = *(_DWORD *)(v45 + 104);
      }
LABEL_22:
      if (v15 <= (int)v9 + 1)
        v42 = v9 + 1;
      else
        v42 = v15;
      while (1)
      {
        v12 = (v9 + 1);
        if (v42 - 1 == (_DWORD)v9)
          break;
        LODWORD(v9) = v9 + 1;
        v43 = v12;
        if ((*(_DWORD *)(*(_QWORD *)(a3 + 88) + 144 * v12) & 0x80000000) != 0)
          goto LABEL_29;
      }
      v43 = v42;
LABEL_29:
      LODWORD(v9) = v43;
    }
    while ((_DWORD)v8 != v43);
  }
}

void re::PhysicsDebugRenderer::drawTransformedShape(uint64_t a1, float32x4_t *a2, const void *a3, __n128 *a4)
{
  uint64_t v4;
  re *v8;
  void *v9;
  double v10;
  __n128 v11;
  uint64_t v12;
  float32x4_t *v13;
  void *v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  __n128 *v43;
  uint64_t v44;
  unint64_t v45;
  _anonymous_namespace_ *v46;
  _BYTE *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  unint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  unint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  unint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  unint64_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int8x16_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x16_t v136;
  unint64_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x4_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  unint64_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int8x16_t v162;
  float32x4_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  int8x16_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x16_t v172;
  unint64_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  int8x16_t v180;
  float32x4_t v181;
  int8x16_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int8x16_t v187;
  float32x4_t v188;
  float32x4_t v189;
  int8x16_t v190;
  unint64_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t v198;
  float32x4_t v199;
  int8x16_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  int8x16_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  unint64_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  int8x16_t v216;
  float32x4_t v217;
  int8x16_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  int8x16_t v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  unint64_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  int8x16_t v234;
  float32x4_t v235;
  int8x16_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  void *v240;
  float v241;
  float v242;
  void *v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  __n128 *v247;
  _anonymous_namespace_ *v248;
  _BYTE *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  int8x16_t v260;
  float32x4_t v261;
  float32x4_t v262;
  int8x16_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  int8x16_t v273;
  float32x4_t v274;
  float32x4_t v275;
  int8x16_t v276;
  uint64_t v277;
  uint64_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  int8x16_t v285;
  float32x4_t v286;
  float32x4_t v287;
  int8x16_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  __n128 v293;
  void *v294;
  float32x4_t *v295;
  float32x2_t v296;
  float32x2_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float v301;
  float v302;
  float32x2_t v303;
  float32x2_t v304;
  float32x4_t v305;
  float v306;
  float v307;
  float v308;
  float32x4_t v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  int32x4_t *v313;
  float32x4_t v315;
  float32x4_t v316;
  int8x16_t v317;
  float32x4_t v319;
  float32x4_t v325;
  float32x4_t v326;
  int8x16_t v327;
  float32x4_t v328;
  float32x4_t v329;
  int8x16_t v330;
  float32x4_t v331;
  void *v332;
  float v333;
  __int128 v334;
  unint64_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  int8x16_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  int8x16_t v345;
  float32x4_t v346;
  int8x16_t v347;
  float32x4_t v348;
  unint64_t v349;
  float32x4_t v350;
  int8x16_t v351;
  float32x4_t v352;
  float32x4_t v353;
  int8x16_t v354;
  float32x4_t v355;
  float32x4_t v356;
  int8x16_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v364;
  int8x16_t v365;
  float32x4_t v366;
  int8x16_t v367;
  float32x4_t v368;
  __n128 *v369;
  uint64_t v370;
  unint64_t v371;
  float32x4_t v372;
  unint64_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  int8x16_t v379;
  float32x4_t v380;
  int8x16_t v381;
  float32x4_t v382;
  int8x16_t v383;
  float32x4_t v384;
  int8x16_t v385;
  unint64_t v386;
  float32x4_t v387;
  int8x16_t v388;
  float32x4_t v389;
  int8x16_t v390;
  unint64_t v391;
  float32x4_t v392;
  int8x16_t v393;
  float32x4_t v394;
  int8x16_t v395;
  unint64_t v396;
  unint64_t v397;
  int8x16_t v399;
  float32x4_t v400;
  float v402;
  float32x4_t v403;
  float32x4_t v404;
  int8x16_t v405;
  float32x4_t v406;
  int8x16_t v407;
  float32x4_t v408;
  float32x4_t v409;
  int8x16_t v410;
  float32x4_t v411;
  int8x16_t v412;
  float32x4_t v413;
  int8x16_t v414;
  float32x4_t v415;
  int8x16_t v416;
  unint64_t v417;
  float32x4_t v418;
  int8x16_t v419;
  float32x4_t v420;
  int8x16_t v421;
  unint64_t v422;
  float32x4_t v423;
  int8x16_t v424;
  float32x4_t v425;
  int8x16_t v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  re *v431;
  uint64_t v432;
  __n128 *v433;
  _anonymous_namespace_ *v434;
  _BYTE *v435;
  void *v436;
  __int128 v437;
  float32x4_t v439;
  float32x4_t v440;
  int8x16_t v441;
  float32x4_t v442;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  int8x16_t v449;
  float32x4_t v450;
  float32x4_t v451;
  int8x16_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  int8x16_t v463;
  float32x4_t v464;
  int8x16_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  int8x16_t v470;
  float32x4_t v471;
  float32x4_t v472;
  int8x16_t v473;
  unint64_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  int8x16_t v481;
  float32x4_t v482;
  int8x16_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  int8x16_t v488;
  float32x4_t v489;
  float32x4_t v490;
  int8x16_t v491;
  unint64_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  int8x16_t v499;
  float32x4_t v500;
  int8x16_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  int8x16_t v506;
  float32x4_t v507;
  float32x4_t v508;
  int8x16_t v509;
  unint64_t v510;
  float32x4_t v511;
  float32x4_t v512;
  int8x16_t v513;
  float32x4_t v514;
  int8x16_t v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  int8x16_t v519;
  float32x4_t v520;
  float32x4_t v521;
  int8x16_t v522;
  NSObject *v523;
  int v524;
  uint32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  void *v528;
  float32x2_t *v530;
  uint64_t v531;
  float32x4_t *v532;
  uint64_t v533;
  __n128 v534;
  float32x4_t v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unsigned int v545;
  uint64_t v546;
  uint64_t v547;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  int8x16_t v554;
  float32x4_t v555;
  int8x16_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  int8x16_t v561;
  float32x4_t v562;
  int8x16_t v563;
  unint64_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  int8x16_t v570;
  float32x4_t v571;
  float32x4_t v572;
  int8x16_t v573;
  unint64_t v574;
  float32x4_t v575;
  __n128 *v576;
  uint64_t v577;
  unint64_t v578;
  unsigned int v579;
  float32x4_t v581;
  float32x4_t v583;
  float32x4_t v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  int8x16_t v589;
  float32x4_t v590;
  float32x4_t v591;
  int8x16_t v592;
  unint64_t v593;
  __int128 v594;
  float32x4_t v597;
  unint64_t v599;
  __int128 v600;
  int32x4_t v601;
  float32x2_t v602;
  float32x2_t v603;
  float32x4_t v604;
  float v605;
  float32x4_t *v606;
  float32x4_t v607;
  float32x4_t v609;
  float32x4_t v611;
  int8x16_t v612;
  float32x4_t v613;
  float32x4_t v615;
  int8x16_t v616;
  float32x4_t v617;
  float32x4_t v618;
  int8x16_t v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t i;
  unint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unsigned int v626;
  uint64_t v627;
  uint64_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  int8x16_t v635;
  float32x4_t v636;
  int8x16_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  int8x16_t v642;
  float32x4_t v643;
  int8x16_t v644;
  unint64_t v645;
  int8x16_t v646;
  int8x16_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  __int128 v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  float v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  unsigned int v690;
  float32x4_t v691;
  float32x4_t v692;
  __int128 v693;
  float v694;
  float32x4_t *v695;
  float32x4_t v696;
  float v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  __int128 v703;
  float32x4_t v705;
  unint64_t v706;
  int v707;
  uint64_t v708;
  uint64_t v709;
  _BYTE v710[48];
  _BYTE v711[12];
  __int16 v712;
  int v713;
  __int16 v714;
  uint64_t v715;
  __int16 v716;
  unint64_t v717;
  uint8_t buf[16];
  float32x4_t v719;
  float32x4_t v720;
  __int128 v721;
  __int128 v722;
  uint64_t v723;

  v723 = *MEMORY[0x24BDAC8D0];
  v8 = (re *)(*(uint64_t (**)(const void *))(*(_QWORD *)a3 + 24))(a3);
  v695 = a2;
  switch((int)v8)
  {
    case 1:
      goto LABEL_34;
    case 2:
      (*(void (**)(void *))(*(_QWORD *)v9 + 64))(v9);
      v11.n128_u32[0] = 0;
      v12 = a1;
      v13 = a2;
      goto LABEL_6;
    case 3:
      v17.i64[0] = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 64))(v14);
      v17.i64[1] = v16;
      if (a4->n128_u32[0] == 3)
      {
        v18.i64[0] = 0x3F0000003F000000;
        v18.i64[1] = 0x3F0000003F000000;
        v675 = vmulq_f32(v17, v18);
        v15.f32[0] = -v675.f32[0];
        v19 = v15;
        v19.i32[1] = v675.i32[1];
        v20 = v19;
        v20.f32[2] = -v675.f32[2];
        v21 = v20;
        v661 = v20;
        v22 = v675;
        v22.f32[2] = -v675.f32[2];
        v23 = v22;
        v664 = v22;
        v19.i32[2] = v675.i32[2];
        v689 = v19;
        v24 = v675;
        v24.f32[1] = -v675.f32[1];
        v25 = v24;
        v25.f32[2] = -v675.f32[2];
        v24.i32[2] = v675.i32[2];
        v681 = v24;
        v15.f32[1] = -v675.f32[1];
        v667 = vnegq_f32(v675);
        v669 = v25;
        v15.i32[2] = v675.i32[2];
        v696 = v15;
        v26 = *a2;
        v27 = a2[1];
        v28 = vmulq_f32(v21, *a2);
        v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL);
        v30 = vnegq_f32(v27);
        v31 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), v30), v28, v29);
        v32 = (int8x16_t)vaddq_f32(v31, v31);
        v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), v32, 0xCuLL);
        v34 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL), v30), v33, v29);
        v35 = vaddq_f32(vaddq_f32(v28, vmulq_laneq_f32(v33, v27, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), v34, 0xCuLL));
        v36 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v36, v35);
        v37 = vmulq_f32(v23, v26);
        v38 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), v30), v37, v29);
        v39 = (int8x16_t)vaddq_f32(v38, v38);
        v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), v39, 0xCuLL);
        v41 = vaddq_f32(v37, vmulq_laneq_f32(v40, v27, 3));
        v42 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL), v30), v40, v29);
        *(float32x4_t *)v710 = vaddq_f32(v36, vaddq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), v42, 0xCuLL)));
        v43 = a4 + 1;
        v44 = a1;
        v45 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        v46 = (_anonymous_namespace_ *)(a1 + 200);
        v47 = (_BYTE *)(a1 + 517);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v45, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v48 = *a2;
        v49 = a2[1];
        v50 = vmulq_f32(v664, *a2);
        v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL);
        v52 = vnegq_f32(v49);
        v53 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), v52), v50, v51);
        v54 = (int8x16_t)vaddq_f32(v53, v53);
        v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), v54, 0xCuLL);
        v56 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL), v52), v55, v51);
        v57 = vaddq_f32(vaddq_f32(v50, vmulq_laneq_f32(v55, v49, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), v56, 0xCuLL));
        v58 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v58, v57);
        v59 = vmulq_f32(v675, v48);
        v60 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL), v52), v59, v51);
        v61 = (int8x16_t)vaddq_f32(v60, v60);
        v62 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61), v61, 0xCuLL);
        v63 = vaddq_f32(v59, vmulq_laneq_f32(v62, v49, 3));
        v64 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), (int8x16_t)v62, 0xCuLL), v52), v62, v51);
        *(float32x4_t *)v710 = vaddq_f32(v58, vaddq_f32(v63, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), v64, 0xCuLL)));
        v65 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v65, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v66 = *a2;
        v67 = a2[1];
        v68 = vmulq_f32(v675, *a2);
        v69 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL);
        v70 = vnegq_f32(v67);
        v71 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), v70), v68, v69);
        v72 = (int8x16_t)vaddq_f32(v71, v71);
        v73 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), v72, 0xCuLL);
        v74 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL), v70), v73, v69);
        v75 = vaddq_f32(vaddq_f32(v68, vmulq_laneq_f32(v73, v67, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), v74, 0xCuLL));
        v76 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v76, v75);
        v77 = vmulq_f32(v689, v66);
        v78 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), (int8x16_t)v77, 0xCuLL), v70), v77, v69);
        v79 = (int8x16_t)vaddq_f32(v78, v78);
        v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), v79, 0xCuLL);
        v81 = vaddq_f32(v77, vmulq_laneq_f32(v80, v67, 3));
        v82 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL), v70), v80, v69);
        *(float32x4_t *)v710 = vaddq_f32(v76, vaddq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), v82, 0xCuLL)));
        v83 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v83, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v84 = *a2;
        v85 = a2[1];
        v86 = vmulq_f32(v689, *a2);
        v87 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL);
        v88 = vnegq_f32(v85);
        v89 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL), v88), v86, v87);
        v90 = (int8x16_t)vaddq_f32(v89, v89);
        v91 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), v90, 0xCuLL);
        v92 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v91, (int32x4_t)v91), (int8x16_t)v91, 0xCuLL), v88), v91, v87);
        v93 = vaddq_f32(vaddq_f32(v86, vmulq_laneq_f32(v91, v85, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v92, (int32x4_t)v92), v92, 0xCuLL));
        v94 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v94, v93);
        v95 = vmulq_f32(v661, v84);
        v96 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL), v88), v95, v87);
        v97 = (int8x16_t)vaddq_f32(v96, v96);
        v98 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v97, (int32x4_t)v97), v97, 0xCuLL);
        v99 = vaddq_f32(v95, vmulq_laneq_f32(v98, v85, 3));
        v100 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL), v88), v98, v87);
        *(float32x4_t *)v710 = vaddq_f32(v94, vaddq_f32(v99, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), v100, 0xCuLL)));
        v101 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v101, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v102 = *a2;
        v103 = a2[1];
        v104 = vmulq_f32(*a2, v667);
        v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), (int8x16_t)v103, 0xCuLL);
        v106 = vnegq_f32(v103);
        v107 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL), v106), v104, v105);
        v108 = (int8x16_t)vaddq_f32(v107, v107);
        v109 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), v108, 0xCuLL);
        v110 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109), (int8x16_t)v109, 0xCuLL), v106), v109, v105);
        v111 = vaddq_f32(vaddq_f32(v104, vmulq_laneq_f32(v109, v103, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), v110, 0xCuLL));
        v112 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v112, v111);
        v113 = vmulq_f32(v669, v102);
        v114 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v113, (int32x4_t)v113), (int8x16_t)v113, 0xCuLL), v106), v113, v105);
        v115 = (int8x16_t)vaddq_f32(v114, v114);
        v116 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v115, (int32x4_t)v115), v115, 0xCuLL);
        v117 = vaddq_f32(v113, vmulq_laneq_f32(v116, v103, 3));
        v118 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), (int8x16_t)v116, 0xCuLL), v106), v116, v105);
        *(float32x4_t *)v710 = vaddq_f32(v112, vaddq_f32(v117, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), v118, 0xCuLL)));
        v119 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v119, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v120 = *a2;
        v121 = a2[1];
        v122 = vmulq_f32(v669, *a2);
        v123 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v121, (int32x4_t)v121), (int8x16_t)v121, 0xCuLL);
        v124 = vnegq_f32(v121);
        v125 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v122, (int32x4_t)v122), (int8x16_t)v122, 0xCuLL), v124), v122, v123);
        v126 = (int8x16_t)vaddq_f32(v125, v125);
        v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), v126, 0xCuLL);
        v128 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v127, (int32x4_t)v127), (int8x16_t)v127, 0xCuLL), v124), v127, v123);
        v129 = vaddq_f32(vaddq_f32(v122, vmulq_laneq_f32(v127, v121, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v128, (int32x4_t)v128), v128, 0xCuLL));
        v130 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v130, v129);
        v131 = vmulq_f32(v681, v120);
        v132 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), (int8x16_t)v131, 0xCuLL), v124), v131, v123);
        v133 = (int8x16_t)vaddq_f32(v132, v132);
        v134 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v133, (int32x4_t)v133), v133, 0xCuLL);
        v135 = vaddq_f32(v131, vmulq_laneq_f32(v134, v121, 3));
        v136 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v134, (int32x4_t)v134), (int8x16_t)v134, 0xCuLL), v124), v134, v123);
        *(float32x4_t *)v710 = vaddq_f32(v130, vaddq_f32(v135, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v136, (int32x4_t)v136), v136, 0xCuLL)));
        v137 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v137, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v138 = *a2;
        v139 = a2[1];
        v140 = vmulq_f32(v681, *a2);
        v141 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v139, (int32x4_t)v139), (int8x16_t)v139, 0xCuLL);
        v142 = vnegq_f32(v139);
        v143 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v140, (int32x4_t)v140), (int8x16_t)v140, 0xCuLL), v142), v140, v141);
        v144 = (int8x16_t)vaddq_f32(v143, v143);
        v145 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v144, (int32x4_t)v144), v144, 0xCuLL);
        v146 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v145, (int32x4_t)v145), (int8x16_t)v145, 0xCuLL), v142), v145, v141);
        v147 = vaddq_f32(vaddq_f32(v140, vmulq_laneq_f32(v145, v139, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v146, (int32x4_t)v146), v146, 0xCuLL));
        v148 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v148, v147);
        v149 = vmulq_f32(v696, v138);
        v150 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v149, (int32x4_t)v149), (int8x16_t)v149, 0xCuLL), v142), v149, v141);
        v151 = (int8x16_t)vaddq_f32(v150, v150);
        v152 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v151, (int32x4_t)v151), v151, 0xCuLL);
        v153 = vaddq_f32(v149, vmulq_laneq_f32(v152, v139, 3));
        v154 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v152, (int32x4_t)v152), (int8x16_t)v152, 0xCuLL), v142), v152, v141);
        *(float32x4_t *)v710 = vaddq_f32(v148, vaddq_f32(v153, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v154, (int32x4_t)v154), v154, 0xCuLL)));
        v155 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v155, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v156 = *a2;
        v157 = a2[1];
        v158 = vmulq_f32(v696, *a2);
        v159 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v157, (int32x4_t)v157), (int8x16_t)v157, 0xCuLL);
        v160 = vnegq_f32(v157);
        v161 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v158, (int32x4_t)v158), (int8x16_t)v158, 0xCuLL), v160), v158, v159);
        v162 = (int8x16_t)vaddq_f32(v161, v161);
        v163 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v162, (int32x4_t)v162), v162, 0xCuLL);
        v164 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v163, (int32x4_t)v163), (int8x16_t)v163, 0xCuLL), v160), v163, v159);
        v165 = vaddq_f32(vaddq_f32(v158, vmulq_laneq_f32(v163, v157, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v164, (int32x4_t)v164), v164, 0xCuLL));
        v166 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v166, v165);
        v167 = vmulq_f32(v156, v667);
        v168 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v167, (int32x4_t)v167), (int8x16_t)v167, 0xCuLL), v160), v167, v159);
        v169 = (int8x16_t)vaddq_f32(v168, v168);
        v170 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v169, (int32x4_t)v169), v169, 0xCuLL);
        v171 = vaddq_f32(v167, vmulq_laneq_f32(v170, v157, 3));
        v172 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v170, (int32x4_t)v170), (int8x16_t)v170, 0xCuLL), v160), v170, v159);
        *(float32x4_t *)v710 = vaddq_f32(v166, vaddq_f32(v171, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v172, (int32x4_t)v172), v172, 0xCuLL)));
        v173 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v173, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v174 = *a2;
        v175 = a2[1];
        v176 = vmulq_f32(v661, *a2);
        v177 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v175, (int32x4_t)v175), (int8x16_t)v175, 0xCuLL);
        v178 = vnegq_f32(v175);
        v179 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v176, (int32x4_t)v176), (int8x16_t)v176, 0xCuLL), v178), v176, v177);
        v180 = (int8x16_t)vaddq_f32(v179, v179);
        v181 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v180, (int32x4_t)v180), v180, 0xCuLL);
        v182 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v181, (int32x4_t)v181), (int8x16_t)v181, 0xCuLL), v178), v181, v177);
        v183 = vaddq_f32(vaddq_f32(v176, vmulq_laneq_f32(v181, v175, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v182, (int32x4_t)v182), v182, 0xCuLL));
        v184 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v184, v183);
        v185 = vmulq_f32(v174, v667);
        v186 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v185, (int32x4_t)v185), (int8x16_t)v185, 0xCuLL), v178), v185, v177);
        v187 = (int8x16_t)vaddq_f32(v186, v186);
        v188 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v187, (int32x4_t)v187), v187, 0xCuLL);
        v189 = vaddq_f32(v185, vmulq_laneq_f32(v188, v175, 3));
        v190 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v188, (int32x4_t)v188), (int8x16_t)v188, 0xCuLL), v178), v188, v177);
        *(float32x4_t *)v710 = vaddq_f32(v184, vaddq_f32(v189, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v190, (int32x4_t)v190), v190, 0xCuLL)));
        v191 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v191, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v192 = *a2;
        v193 = a2[1];
        v194 = vmulq_f32(v664, *a2);
        v195 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v193, (int32x4_t)v193), (int8x16_t)v193, 0xCuLL);
        v196 = vnegq_f32(v193);
        v197 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v194, (int32x4_t)v194), (int8x16_t)v194, 0xCuLL), v196), v194, v195);
        v198 = (int8x16_t)vaddq_f32(v197, v197);
        v199 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v198, (int32x4_t)v198), v198, 0xCuLL);
        v200 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v199, (int32x4_t)v199), (int8x16_t)v199, 0xCuLL), v196), v199, v195);
        v201 = vaddq_f32(vaddq_f32(v194, vmulq_laneq_f32(v199, v193, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v200, (int32x4_t)v200), v200, 0xCuLL));
        v202 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v202, v201);
        v203 = vmulq_f32(v669, v192);
        v204 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v203, (int32x4_t)v203), (int8x16_t)v203, 0xCuLL), v196), v203, v195);
        v205 = (int8x16_t)vaddq_f32(v204, v204);
        v206 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v205, (int32x4_t)v205), v205, 0xCuLL);
        v207 = vaddq_f32(v203, vmulq_laneq_f32(v206, v193, 3));
        v208 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v206, (int32x4_t)v206), (int8x16_t)v206, 0xCuLL), v196), v206, v195);
        *(float32x4_t *)v710 = vaddq_f32(v202, vaddq_f32(v207, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v208, (int32x4_t)v208), v208, 0xCuLL)));
        v209 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v209, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v210 = *a2;
        v211 = a2[1];
        v212 = vmulq_f32(v675, *a2);
        v213 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v211, (int32x4_t)v211), (int8x16_t)v211, 0xCuLL);
        v214 = vnegq_f32(v211);
        v215 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v212, (int32x4_t)v212), (int8x16_t)v212, 0xCuLL), v214), v212, v213);
        v216 = (int8x16_t)vaddq_f32(v215, v215);
        v217 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v216, (int32x4_t)v216), v216, 0xCuLL);
        v218 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v217, (int32x4_t)v217), (int8x16_t)v217, 0xCuLL), v214), v217, v213);
        v219 = vaddq_f32(vaddq_f32(v212, vmulq_laneq_f32(v217, v211, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v218, (int32x4_t)v218), v218, 0xCuLL));
        v220 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v220, v219);
        v221 = vmulq_f32(v681, v210);
        v222 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v221, (int32x4_t)v221), (int8x16_t)v221, 0xCuLL), v214), v221, v213);
        v223 = (int8x16_t)vaddq_f32(v222, v222);
        v224 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v223, (int32x4_t)v223), v223, 0xCuLL);
        v225 = vaddq_f32(v221, vmulq_laneq_f32(v224, v211, 3));
        v226 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v224, (int32x4_t)v224), (int8x16_t)v224, 0xCuLL), v214), v224, v213);
        *(float32x4_t *)v710 = vaddq_f32(v220, vaddq_f32(v225, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v226, (int32x4_t)v226), v226, 0xCuLL)));
        v227 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v227, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v228 = *a2;
        v229 = a2[1];
        v230 = vmulq_f32(v689, *a2);
        v231 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v229, (int32x4_t)v229), (int8x16_t)v229, 0xCuLL);
        v232 = vnegq_f32(v229);
        v233 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v230, (int32x4_t)v230), (int8x16_t)v230, 0xCuLL), v232), v230, v231);
        v234 = (int8x16_t)vaddq_f32(v233, v233);
        v235 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v234, (int32x4_t)v234), v234, 0xCuLL);
        v236 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v235, (int32x4_t)v235), (int8x16_t)v235, 0xCuLL), v232), v235, v231);
        v237 = vaddq_f32(vaddq_f32(v230, vmulq_laneq_f32(v235, v229, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v236, (int32x4_t)v236), v236, 0xCuLL));
        v238 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v238, v237);
        v239 = v696;
        goto LABEL_31;
      }
      v702 = v17;
      v574 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 0, (float32x4_t *)a2[2].f32, (float32x4_t *)a2[1].f32);
      v575.i64[0] = 0x3F0000003F000000;
      v575.i64[1] = 0x3F0000003F000000;
      *(float32x4_t *)buf = vmulq_f32(v702, v575);
      re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v574, 0, 2, (__n128 *)buf);
      v576 = a4 + 1;
      v577 = a1;
      v578 = v574;
      v579 = 0;
      goto LABEL_56;
    case 4:
      v241 = (*(float (**)(void *))(*(_QWORD *)v240 + 72))(v240);
      v242 = (*(float (**)(void *))(*(_QWORD *)v240 + 64))(v240);
      (*(void (**)(void *))(*(_QWORD *)v240 + 72))(v240);
      v11.n128_f32[0] = v242 + (float)(*(float *)&v10 * -2.0);
      v12 = a1;
      v13 = a2;
      *(float *)&v10 = v241;
LABEL_6:
      drawCapsule(v12, v13, a4, v10, v11);
      return;
    case 5:
      v244 = (*(uint64_t (**)(void *, _QWORD, _QWORD))(*(_QWORD *)v243 + 88))(v243, 0, 0);
      if (!v244)
        return;
      v245 = v244;
      v708 = 0;
      v706 = 0;
      v705 = 0uLL;
      v707 = 0;
      re::DynamicArray<unsigned short>::resize((uint64_t)&v705, v244);
      if (!v706)
        goto LABEL_77;
      (*(void (**)(void *, uint64_t, unint64_t))(*(_QWORD *)v243 + 88))(v243, v708, v245);
      v246 = 0;
      v247 = a4 + 1;
      v248 = (_anonymous_namespace_ *)(a1 + 200);
      v249 = (_BYTE *)(a1 + 517);
      do
      {
        v250 = v706;
        if (v706 <= v246)
        {
          v709 = 0;
          v721 = 0u;
          v722 = 0u;
          v719 = 0u;
          v720 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v711 = 136315906;
          *(_QWORD *)&v711[4] = "operator[]";
          v712 = 1024;
          v713 = 789;
          v714 = 2048;
          v715 = v246;
          v716 = 2048;
          v717 = v250;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_75:
          v709 = 0;
          v721 = 0u;
          v722 = 0u;
          v719 = 0u;
          v720 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v711 = 136315906;
          *(_QWORD *)&v711[4] = "operator[]";
          v712 = 1024;
          v713 = 789;
          v714 = 2048;
          v715 = v4;
          v716 = 2048;
          v717 = v250;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          v709 = 0;
          v721 = 0u;
          v722 = 0u;
          v719 = 0u;
          v720 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v711 = 136315906;
          *(_QWORD *)&v711[4] = "operator[]";
          v712 = 1024;
          v713 = 789;
          v714 = 2048;
          v715 = v4;
          v716 = 2048;
          v717 = v250;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_77:
          *(_QWORD *)v711 = 0;
          v721 = 0u;
          v722 = 0u;
          v719 = 0u;
          v720 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v710 = 136315906;
          *(_QWORD *)&v710[4] = "operator[]";
          *(_WORD *)&v710[12] = 1024;
          *(_DWORD *)&v710[14] = 789;
          *(_WORD *)&v710[18] = 2048;
          *(_QWORD *)&v710[20] = 0;
          *(_WORD *)&v710[28] = 2048;
          *(_QWORD *)&v710[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v251 = *(unsigned __int16 *)(v708 + 2 * v246);
        v252 = (*(uint64_t (**)(void *))(*(_QWORD *)v243 + 72))(v243);
        v253 = (*(uint64_t (**)(void *))(*(_QWORD *)v243 + 64))(v243) + v252 * v251;
        v254.i64[0] = *(_QWORD *)v253;
        v254.i32[2] = *(_DWORD *)(v253 + 8);
        v255 = v695[1];
        v256 = vmulq_f32(*v695, v254);
        v257 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v255, (int32x4_t)v255), (int8x16_t)v255, 0xCuLL);
        v258 = vnegq_f32(v255);
        v259 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v256, (int32x4_t)v256), (int8x16_t)v256, 0xCuLL), v258), v256, v257);
        v260 = (int8x16_t)vaddq_f32(v259, v259);
        v261 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v260, (int32x4_t)v260), v260, 0xCuLL);
        v262 = vaddq_f32(v256, vmulq_laneq_f32(v261, v255, 3));
        v263 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v261, (int32x4_t)v261), (int8x16_t)v261, 0xCuLL), v258), v261, v257);
        *(float32x4_t *)v710 = vaddq_f32(v695[2], vaddq_f32(v262, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v263, (int32x4_t)v263), v263, 0xCuLL)));
        v4 = v246 + 1;
        v250 = v706;
        if (v706 <= v246 + 1)
          goto LABEL_75;
        v264 = *(unsigned __int16 *)(v708 + 2 * v246 + 2);
        v265 = (*(uint64_t (**)(void *))(*(_QWORD *)v243 + 72))(v243);
        v266 = (*(uint64_t (**)(void *))(*(_QWORD *)v243 + 64))(v243) + v265 * v264;
        v267.i64[0] = *(_QWORD *)v266;
        v267.i32[2] = *(_DWORD *)(v266 + 8);
        v268 = v695[1];
        v269 = vmulq_f32(*v695, v267);
        v270 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v268, (int32x4_t)v268), (int8x16_t)v268, 0xCuLL);
        v271 = vnegq_f32(v268);
        v272 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v269, (int32x4_t)v269), (int8x16_t)v269, 0xCuLL), v271), v269, v270);
        v273 = (int8x16_t)vaddq_f32(v272, v272);
        v274 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v273, (int32x4_t)v273), v273, 0xCuLL);
        v275 = vaddq_f32(v269, vmulq_laneq_f32(v274, v268, 3));
        v276 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v274, (int32x4_t)v274), (int8x16_t)v274, 0xCuLL), v271), v274, v270);
        *(float32x4_t *)&v710[16] = vaddq_f32(v695[2], vaddq_f32(v275, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v276, (int32x4_t)v276), v276, 0xCuLL)));
        v4 = v246 + 2;
        v250 = v706;
        if (v706 <= v246 + 2)
          goto LABEL_76;
        v277 = *(unsigned __int16 *)(v708 + 2 * v246 + 4);
        v4 = (*(uint64_t (**)(void *))(*(_QWORD *)v243 + 72))(v243);
        v278 = (*(uint64_t (**)(void *))(*(_QWORD *)v243 + 64))(v243) + v4 * v277;
        v279.i64[0] = *(_QWORD *)v278;
        v279.i32[2] = *(_DWORD *)(v278 + 8);
        v280 = v695[1];
        v281 = vmulq_f32(*v695, v279);
        v282 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v280, (int32x4_t)v280), (int8x16_t)v280, 0xCuLL);
        v283 = vnegq_f32(v280);
        v284 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v281, (int32x4_t)v281), (int8x16_t)v281, 0xCuLL), v283), v281, v282);
        v285 = (int8x16_t)vaddq_f32(v284, v284);
        v286 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v285, (int32x4_t)v285), v285, 0xCuLL);
        v287 = vaddq_f32(v281, vmulq_laneq_f32(v286, v280, 3));
        v288 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v286, (int32x4_t)v286), (int8x16_t)v286, 0xCuLL), v283), v286, v282);
        *(float32x4_t *)&v710[32] = vaddq_f32(v695[2], vaddq_f32(v287, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v288, (int32x4_t)v288), v288, 0xCuLL)));
        v289 = a1;
        v290 = re::PrimitiveRenderingContext::addLine(a1, v710, &v710[16]);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v290, v247, v248, v249, *(_QWORD *)(v289 + 136), *(_QWORD *)(v289 + 528), *(re **)(v289 + 1192));
        v291 = re::PrimitiveRenderingContext::addLine(a1, &v710[16], &v710[32]);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v291, v247, v248, v249, *(_QWORD *)(v289 + 136), *(_QWORD *)(v289 + 528), *(re **)(v289 + 1192));
        v292 = re::PrimitiveRenderingContext::addLine(a1, &v710[32], v710);
        v293 = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v292, v247, v248, v249, *(_QWORD *)(v289 + 136), *(_QWORD *)(v289 + 528), (re *)*(_QWORD *)(v289 + 1192));
        v246 += 3;
      }
      while (v246 < v245);
      if (v705.i64[0] && v708)
        (*(void (**)(__n128))(*(_QWORD *)v705.i64[0] + 40))(v293);
      return;
    case 6:
      v295 = (float32x4_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v294 + 64))(v294);
      v296 = vrsqrte_f32((float32x2_t)1065353216);
      v297 = vmul_f32(v296, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v296, v296)));
      v298 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, vmul_f32(v297, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v297, v297))).f32[0]);
      v299 = *v295;
      v300 = vmulq_f32(v299, v299);
      LODWORD(v301) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v300, 2), vaddq_f32(v300, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v300.f32, 1))).u32[0];
      if (fabsf(v301) >= 1.0e-10)
      {
        v302 = v301;
        v303 = vrsqrte_f32((float32x2_t)LODWORD(v301));
        v304 = vmul_f32(v303, vrsqrts_f32((float32x2_t)LODWORD(v302), vmul_f32(v303, v303)));
        v299 = vmulq_n_f32(v299, vmul_f32(v304, vrsqrts_f32((float32x2_t)LODWORD(v302), vmul_f32(v304, v304))).f32[0]);
      }
      v305 = vmulq_f32(v298, v299);
      v306 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v305, 2), vaddq_f32(v305, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v305.f32, 1))).f32[0];
      if (v306 == -1.0
        || (v307 = (float)((float)(fabsf(v306) + 1.0) + 1.0) * 0.00001, v308 = v306 + 1.0, fabsf(v308) < v307))
      {
        if (fabsf(v298.f32[2]) >= 0.00001)
        {
          v309.i32[0] = 0;
          v309.f32[1] = -v298.f32[2];
          v309.i64[1] = v298.u32[1];
        }
        else
        {
          v309 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v298.f32[1]), (int32x4_t)v298);
        }
        v601 = (int32x4_t)vmulq_f32(v309, v309);
        v601.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v601, 2), vadd_f32(*(float32x2_t *)v601.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v601.i8, 1))).u32[0];
        v602 = vrsqrte_f32((float32x2_t)v601.u32[0]);
        v603 = vmul_f32(v602, vrsqrts_f32((float32x2_t)v601.u32[0], vmul_f32(v602, v602)));
        v604 = vmulq_n_f32(v309, vmul_f32(v603, vrsqrts_f32((float32x2_t)v601.u32[0], vmul_f32(v603, v603))).f32[0]);
        v605 = 0.0;
      }
      else
      {
        v646 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v299, (int32x4_t)v299), (int8x16_t)v299, 0xCuLL), vnegq_f32(v298)), v299, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v298, (int32x4_t)v298), (int8x16_t)v298, 0xCuLL));
        v647 = (int8x16_t)vuzp1q_s32((int32x4_t)v646, (int32x4_t)v646);
        v648 = (float32x4_t)vextq_s8(v647, v646, 0xCuLL);
        *(float *)v647.i32 = sqrtf(v308 + v308);
        v605 = *(float *)v647.i32 * 0.5;
        v604 = vdivq_f32(v648, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v647.i8, 0));
      }
      v687 = v604;
      v694 = v605;
      v606 = (float32x4_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v294 + 64))(v294);
      v607 = vmulq_n_f32(*v606, (*(float (**)(void *))(*(_QWORD *)v294 + 72))(v294));
      _Q2 = a2[1];
      v609 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL);
      _S17 = v694;
      v611 = vnegq_f32(_Q2);
      v612 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v687, (int32x4_t)v687), (int8x16_t)v687, 0xCuLL), v611), v687, v609);
      v613 = vmlaq_n_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v612, (int32x4_t)v612), v612, 0xCuLL), v687, _Q2, 3), _Q2, v694);
      __asm { FMLA            S6, S17, V2.S[3] }
      v613.i32[3] = _S6;
      v615 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v607, (int32x4_t)v607), (int8x16_t)v607, 0xCuLL), v611), v607, v609);
      v616 = (int8x16_t)vaddq_f32(v615, v615);
      v617 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v616, (int32x4_t)v616), v616, 0xCuLL);
      v618 = vaddq_f32(v607, vmulq_laneq_f32(v617, _Q2, 3));
      v619 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v617, (int32x4_t)v617), (int8x16_t)v617, 0xCuLL), v611), v617, v609);
      _Q0 = (__n128)vaddq_f32(a2[2], vmulq_f32(*a2, vaddq_f32(v618, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v619, (int32x4_t)v619), v619, 0xCuLL))));
      *(float32x4_t *)buf = *a2;
      v719 = v613;
      v720 = (float32x4_t)_Q0;
      __asm { FMOV            V0.2S, #10.0 }
      *(_QWORD *)v710 = _Q0.n128_u64[0];
      v532 = (float32x4_t *)buf;
      v530 = (float32x2_t *)v710;
      v531 = a1;
      goto LABEL_60;
    case 7:
      v311 = v310[4];
      if (v311)
      {
        v312 = 240 * v311;
        v313 = (int32x4_t *)(v310[5] + 128);
        do
        {
          _Q2 = v695[1];
          v315 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL);
          v316 = vnegq_f32(_Q2);
          v317 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v313, *v313), *(int8x16_t *)v313, 0xCuLL), v316), *(float32x4_t *)v313, v315);
          _S6 = HIDWORD(*(unsigned __int128 *)v313);
          v319 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v317, (int32x4_t)v317), v317, 0xCuLL), *(float32x4_t *)v313, _Q2, 3), _Q2, *(float32x4_t *)v313, 3);
          __asm { FMLA            S0, S6, V2.S[3] }
          v319.i32[3] = _S0;
          v325 = (float32x4_t)v313[-1];
          v326 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v325, (int32x4_t)v325), (int8x16_t)v325, 0xCuLL), v316), v325, v315);
          v327 = (int8x16_t)vaddq_f32(v326, v326);
          v328 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v327, (int32x4_t)v327), v327, 0xCuLL);
          v329 = vaddq_f32(v325, vmulq_laneq_f32(v328, _Q2, 3));
          v330 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v328, (int32x4_t)v328), (int8x16_t)v328, 0xCuLL), v316), v328, v315);
          v331 = vaddq_f32(v695[2], vmulq_f32(*v695, vaddq_f32(v329, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v330, (int32x4_t)v330), v330, 0xCuLL))));
          *(float32x4_t *)buf = *v695;
          v719 = v319;
          v720 = v331;
          re::PhysicsDebugRenderer::drawTransformedShape(a1, buf, v313[-4].i64[0], a4);
          v313 += 15;
          v312 -= 240;
        }
        while (v312);
      }
      return;
    case 8:
      LODWORD(v697) = COERCE_UNSIGNED_INT64((*(double (**)(void *))(*(_QWORD *)v332 + 72))(v332));
      v333 = (*(float (**)(void *))(*(_QWORD *)v332 + 64))(v332);
      *(float *)&v334 = v333;
      if (a4->n128_u32[0] == 3)
      {
        *(float *)&v690 = v333 * 0.5;
        LODWORD(v335) = 0;
        *((float *)&v335 + 1) = v333 * 0.5;
        v336 = a2[1];
        v337 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v336, (int32x4_t)v336), (int8x16_t)v336, 0xCuLL);
        v338 = vnegq_f32(v336);
        v339.i64[0] = 0x8000000080000000;
        v339.i64[1] = 0x8000000080000000;
        v340.i64[0] = 0x8000000080000000;
        v340.i64[1] = 0x8000000080000000;
        v341 = (int8x16_t)vmlaq_f32(vmulq_f32(v336, v339), (float32x4_t)0, v337);
        v342 = vaddq_f32(v336, vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v341, (int32x4_t)v341), v341, 0xCuLL), (float32x4_t)0, v336, 3));
        v343 = vmulq_f32(v336, (float32x4_t)0);
        v343.i32[0] = vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v336, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v343, 2), vaddq_f32(v343, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v343.f32, 1)))).u32[0];
        v344 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v335, (int32x4_t)v335), (int8x16_t)v335, 0xCuLL), v338), (float32x4_t)v335, v337);
        v345 = (int8x16_t)vaddq_f32(v344, v344);
        v346 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v345, (int32x4_t)v345), v345, 0xCuLL);
        v347 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v346, (int32x4_t)v346), (int8x16_t)v346, 0xCuLL), v338), v346, v337);
        v348 = vaddq_f32(vaddq_f32((float32x4_t)v335, vmulq_laneq_f32(v346, v336, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v347, (int32x4_t)v347), v347, 0xCuLL));
        v682 = -(float)(*(float *)&v334 * 0.5);
        LODWORD(v349) = 0;
        *((float *)&v349 + 1) = v682;
        v350 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v349, (int32x4_t)v349), (int8x16_t)v349, 0xCuLL), v338), (float32x4_t)v349, v337);
        v351 = (int8x16_t)vaddq_f32(v350, v350);
        v352 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v351, (int32x4_t)v351), v351, 0xCuLL);
        v353 = vaddq_f32((float32x4_t)v349, vmulq_laneq_f32(v352, v336, 3));
        v354 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v352, (int32x4_t)v352), (int8x16_t)v352, 0xCuLL), v338), v352, v337);
        v355 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v342, (int32x4_t)v342), (int8x16_t)v342, 0xCuLL);
        v356 = vnegq_f32(v342);
        v357 = (int8x16_t)vmlaq_f32(vmulq_f32(v342, (float32x4_t)xmmword_22610BB40), (float32x4_t)xmmword_22610BB50, v355);
        v668 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
        v358 = vmlaq_f32(vmlaq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v357, (int32x4_t)v357), v357, 0xCuLL), (float32x4_t)xmmword_22610BB50, v343.f32[0]), v668, v342);
        v359 = vmulq_f32(v342, v340);
        v342.i32[3] = v343.i32[0];
        v360 = vaddq_f32(v353, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v354, (int32x4_t)v354), v354, 0xCuLL));
        v361 = a2[2];
        v362 = vmulq_f32(v342, (float32x4_t)xmmword_22610BB50);
        v676 = vaddq_f32(v361, vmulq_f32(*a2, v360));
        _S9 = 1060439283;
        v358.i32[3] = vmlas_n_f32(-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v362, 2), vaddq_f32(v362, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v362.f32, 1))).f32[0], 0.70711, v343.f32[0]);
        v670 = v358;
        v364 = vmlaq_f32(v359, (float32x4_t)0, v355);
        v365 = (int8x16_t)vaddq_f32(v364, v364);
        v366 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v365, (int32x4_t)v365), v365, 0xCuLL);
        v367 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v366, (int32x4_t)v366), (int8x16_t)v366, 0xCuLL), v356), v366, v355);
        v662 = vmulq_f32(*a2, vaddq_f32(vaddq_f32(vmulq_n_f32(v366, v343.f32[0]), (float32x4_t)0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v367, (int32x4_t)v367), v367, 0xCuLL)));
        v368 = vaddq_f32(vaddq_f32(v361, vmulq_f32(*a2, v348)), v662);
        *(float32x4_t *)buf = *a2;
        v665 = *(_OWORD *)buf;
        v719 = v358;
        v720 = v368;
        v369 = a4 + 1;
        v370 = a1;
        drawArc(a1, (float32x4_t *)buf, v369, 32, 6.2832, v697);
        *(_OWORD *)buf = v665;
        v719 = v670;
        v720 = vaddq_f32(v676, v662);
        drawArc(a1, (float32x4_t *)buf, v369, 32, 6.2832, v697);
        v371 = __PAIR64__(v690, LODWORD(v697));
        v372 = (float32x4_t)LODWORD(v697);
        v372.f32[1] = v682;
        *(float *)&v373 = -v697;
        v374 = (float32x4_t)COERCE_UNSIGNED_INT(-v697);
        v374.i32[1] = v690;
        *((float *)&v373 + 1) = v682;
        v655 = (float32x4_t)v373;
        v657 = v374;
        v375 = a2[1];
        v660 = vmulq_f32(v372, *a2);
        v698 = *a2;
        v376 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v375, (int32x4_t)v375), (int8x16_t)v375, 0xCuLL);
        v666 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v660, (int32x4_t)v660), (int8x16_t)v660, 0xCuLL);
        v377 = vnegq_f32(v375);
        v378 = vmlaq_f32(vmulq_f32(v666, v377), v660, v376);
        v379 = (int8x16_t)vaddq_f32(v378, v378);
        v380 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v379, (int32x4_t)v379), v379, 0xCuLL);
        v683 = v375;
        v691 = a2[2];
        v381 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v380, (int32x4_t)v380), (int8x16_t)v380, 0xCuLL), v377), v380, v376);
        v650 = vaddq_f32(v691, vaddq_f32(vaddq_f32(v660, vmulq_laneq_f32(v380, v375, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v381, (int32x4_t)v381), v381, 0xCuLL)));
        *(float32x4_t *)buf = v650;
        v659 = vmulq_f32((float32x4_t)v371, v698);
        v663 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v659, (int32x4_t)v659), (int8x16_t)v659, 0xCuLL);
        v671 = v376;
        v677 = v377;
        v382 = vmlaq_f32(vmulq_f32(v663, v377), v659, v376);
        v383 = (int8x16_t)vaddq_f32(v382, v382);
        v384 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v383, (int32x4_t)v383), v383, 0xCuLL);
        v385 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v384, (int32x4_t)v384), (int8x16_t)v384, 0xCuLL), v377), v384, v376);
        v653 = vaddq_f32(v691, vaddq_f32(vaddq_f32(v659, vmulq_laneq_f32(v384, v375, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v385, (int32x4_t)v385), v385, 0xCuLL)));
        *(float32x4_t *)v710 = v653;
        v386 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v386, v369, (_anonymous_namespace_ *)(v370 + 200), (_BYTE *)(v370 + 517), *(_QWORD *)(v370 + 136), *(_QWORD *)(v370 + 528), *(re **)(v370 + 1192));
        *(float32x4_t *)buf = v653;
        v654 = vmulq_f32(v657, v698);
        v658 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v654, (int32x4_t)v654), (int8x16_t)v654, 0xCuLL);
        v387 = vmlaq_f32(vmulq_f32(v658, v677), v654, v671);
        v388 = (int8x16_t)vaddq_f32(v387, v387);
        v389 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v388, (int32x4_t)v388), v388, 0xCuLL);
        v390 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v389, (int32x4_t)v389), (int8x16_t)v389, 0xCuLL), v677), v389, v671);
        v651 = vaddq_f32(v691, vaddq_f32(vaddq_f32(v654, vmulq_laneq_f32(v389, v683, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v390, (int32x4_t)v390), v390, 0xCuLL)));
        *(float32x4_t *)v710 = v651;
        v391 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v391, v369, (_anonymous_namespace_ *)(v370 + 200), (_BYTE *)(v370 + 517), *(_QWORD *)(v370 + 136), *(_QWORD *)(v370 + 528), *(re **)(v370 + 1192));
        *(float32x4_t *)buf = v651;
        v652 = vmulq_f32(v655, v698);
        v656 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v652, (int32x4_t)v652), (int8x16_t)v652, 0xCuLL);
        v392 = vmlaq_f32(vmulq_f32(v656, v677), v652, v671);
        v393 = (int8x16_t)vaddq_f32(v392, v392);
        v394 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v393, (int32x4_t)v393), v393, 0xCuLL);
        v395 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v394, (int32x4_t)v394), (int8x16_t)v394, 0xCuLL), v677), v394, v671);
        v649 = vaddq_f32(v691, vaddq_f32(vaddq_f32(v652, vmulq_laneq_f32(v394, v683, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v395, (int32x4_t)v395), v395, 0xCuLL)));
        *(float32x4_t *)v710 = v649;
        v396 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v396, v369, (_anonymous_namespace_ *)(v370 + 200), (_BYTE *)(v370 + 517), *(_QWORD *)(v370 + 136), *(_QWORD *)(v370 + 528), *(re **)(v370 + 1192));
        *(float32x4_t *)buf = v649;
        *(float32x4_t *)v710 = v650;
        v397 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v397, v369, (_anonymous_namespace_ *)(v370 + 200), (_BYTE *)(v370 + 517), *(_QWORD *)(v370 + 136), *(_QWORD *)(v370 + 528), *(re **)(v370 + 1192));
        _V3.S[3] = v683.i32[3];
        v399 = (int8x16_t)vmlaq_f32(vmulq_f32(v683, (float32x4_t)xmmword_22610BB20), (float32x4_t)xmmword_22610BB30, v671);
        v400 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v399, (int32x4_t)v399), v399, 0xCuLL), (float32x4_t)xmmword_22610BB30, v683, 3), v668, v683);
        __asm { FMLA            S1, S9, V3.S[3] }
        v402 = _S1;
        v403.i64[0] = 0x8000000080000000;
        v403.i64[1] = 0x8000000080000000;
        v404 = vmlaq_f32(vmulq_f32(v683, v403), (float32x4_t)0, v671);
        v405 = (int8x16_t)vaddq_f32(v404, v404);
        v406 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v405, (int32x4_t)v405), v405, 0xCuLL);
        v407 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v406, (int32x4_t)v406), (int8x16_t)v406, 0xCuLL), v677), v406, v671);
        v408 = vaddq_f32(v691, vmulq_f32(v698, vaddq_f32(vaddq_f32(vmulq_laneq_f32(v406, v683, 3), (float32x4_t)0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v407, (int32x4_t)v407), v407, 0xCuLL))));
        v684 = vnegq_f32(v400);
        v692 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v400, (int32x4_t)v400), (int8x16_t)v400, 0xCuLL);
        v409 = vmlaq_f32(vmulq_f32(v666, v684), v660, v692);
        v410 = (int8x16_t)vaddq_f32(v409, v409);
        v411 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v410, (int32x4_t)v410), v410, 0xCuLL);
        v668.f32[0] = v402;
        v412 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v411, (int32x4_t)v411), (int8x16_t)v411, 0xCuLL), v684), v411, v692);
        v699 = v408;
        v678 = vaddq_f32(v408, vaddq_f32(vaddq_f32(v660, vmulq_n_f32(v411, v402)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v412, (int32x4_t)v412), v412, 0xCuLL)));
        *(float32x4_t *)buf = v678;
        v413 = vmlaq_f32(vmulq_f32(v663, v684), v659, v692);
        v414 = (int8x16_t)vaddq_f32(v413, v413);
        v415 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v414, (int32x4_t)v414), v414, 0xCuLL);
        v416 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v415, (int32x4_t)v415), (int8x16_t)v415, 0xCuLL), v684), v415, v692);
        v672 = vaddq_f32(v408, vaddq_f32(vaddq_f32(v659, vmulq_n_f32(v415, v402)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v416, (int32x4_t)v416), v416, 0xCuLL)));
        *(float32x4_t *)v710 = v672;
        v417 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v417, v369, (_anonymous_namespace_ *)(v370 + 200), (_BYTE *)(v370 + 517), *(_QWORD *)(v370 + 136), *(_QWORD *)(v370 + 528), *(re **)(v370 + 1192));
        *(float32x4_t *)buf = v672;
        v418 = vmlaq_f32(vmulq_f32(v658, v684), v654, v692);
        v419 = (int8x16_t)vaddq_f32(v418, v418);
        v420 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v419, (int32x4_t)v419), v419, 0xCuLL);
        v421 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v420, (int32x4_t)v420), (int8x16_t)v420, 0xCuLL), v684), v420, v692);
        v673 = vaddq_f32(v699, vaddq_f32(vaddq_f32(v654, vmulq_n_f32(v420, v668.f32[0])), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v421, (int32x4_t)v421), v421, 0xCuLL)));
        *(float32x4_t *)v710 = v673;
        v422 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v422, v369, (_anonymous_namespace_ *)(v370 + 200), (_BYTE *)(v370 + 517), *(_QWORD *)(v370 + 136), *(_QWORD *)(v370 + 528), *(re **)(v370 + 1192));
        *(float32x4_t *)buf = v673;
        v423 = vmlaq_f32(vmulq_f32(v656, v684), v652, v692);
        v424 = (int8x16_t)vaddq_f32(v423, v423);
        v425 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v424, (int32x4_t)v424), v424, 0xCuLL);
        v426 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v425, (int32x4_t)v425), (int8x16_t)v425, 0xCuLL), v684), v425, v692);
        v700 = vaddq_f32(v699, vaddq_f32(vaddq_f32(v652, vmulq_n_f32(v425, v668.f32[0])), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v426, (int32x4_t)v426), v426, 0xCuLL)));
        *(float32x4_t *)v710 = v700;
        v427 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v427, v369, (_anonymous_namespace_ *)(v370 + 200), (_BYTE *)(v370 + 517), *(_QWORD *)(v370 + 136), *(_QWORD *)(v370 + 528), *(re **)(v370 + 1192));
        *(float32x4_t *)buf = v700;
        *(float32x4_t *)v710 = v678;
        v428 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        v429 = *(_QWORD *)(a1 + 528);
        v430 = *(_QWORD *)(a1 + 136);
        v431 = *(re **)(a1 + 1192);
        v432 = 5;
        v433 = v369;
        v434 = (_anonymous_namespace_ *)(a1 + 200);
        v435 = (_BYTE *)(a1 + 517);
        goto LABEL_52;
      }
      _Q0 = a2[1];
      v581 = a2[2];
      _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_22610BB60), (float32x4_t)xmmword_22610BB70, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
      v583 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)xmmword_22610BB70, _Q0, 3), (float32x4_t)vdupq_n_s32(0x3F3504F3u), _Q0);
      _S4 = 1060439283;
      __asm { FMLA            S3, S4, V0.S[3] }
      v585 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v583, (int32x4_t)v583), (int8x16_t)v583, 0xCuLL);
      v586 = vnegq_f32(v583);
      v587 = vmulq_f32(v583, (float32x4_t)xmmword_22610BB80);
      v583.i32[3] = _Q3.i32[0];
      *(float32x4_t *)buf = v583;
      v588 = vmlaq_f32(v587, (float32x4_t)xmmword_22610BB90, v585);
      v589 = (int8x16_t)vaddq_f32(v588, v588);
      v590 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v589, (int32x4_t)v589), v589, 0xCuLL);
      v591 = vaddq_f32(vmulq_n_f32(v590, *(float *)_Q3.i32), (float32x4_t)xmmword_22610BB90);
      v592 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v590, (int32x4_t)v590), (int8x16_t)v590, 0xCuLL), v586), v590, v585);
      *(float32x4_t *)v710 = vsubq_f32(v581, vmulq_n_f32(vaddq_f32(v591, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v592, (int32x4_t)v592), v592, 0xCuLL)), *(float *)&v334));
      v693 = v334;
      v593 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 2u, v710, buf);
      v594 = v693;
      *((float *)&v594 + 1) = v697;
      *((float *)&v594 + 2) = v697;
      *(_OWORD *)v710 = v594;
      re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v593, 2u, 2, (__n128 *)v710);
      v576 = a4 + 1;
      v577 = a1;
      v578 = v593;
      v579 = 2;
      goto LABEL_56;
    case 9:
      v688.i64[0] = (*(double (**)(void *))(*(_QWORD *)v436 + 72))(v436);
      (*(void (**)(void *))(*(_QWORD *)v436 + 64))(v436);
      if (a4->n128_u32[0] == 3)
      {
        _Q2 = a2[1];
        v439 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL);
        v440 = vnegq_f32(_Q2);
        v441 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q2, (float32x4_t)xmmword_22610BB40), (float32x4_t)xmmword_22610BB50, v439);
        v442 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v441, (int32x4_t)v441), v441, 0xCuLL), (float32x4_t)xmmword_22610BB50, _Q2, 3), (float32x4_t)vdupq_n_s32(0x3F3504F3u), _Q2);
        _S7 = 1060439283;
        __asm { FMLA            S6, S7, V2.S[3] }
        v442.i32[3] = _S6;
        v445 = a2[2];
        *(float32x4_t *)buf = *a2;
        v719 = v442;
        v442.i32[0] = 0;
        v442.f32[1] = *(float *)&v437 * 0.5;
        v701 = (float32x4_t)v442.u64[0];
        v43 = a4 + 1;
        v446 = v688;
        v446.f32[1] = *(float *)&v437 * 0.5;
        v679 = vnegq_f32(v446);
        v447 = v679;
        v447.i32[0] = 0;
        v685 = v447;
        v447.i32[2] = 0;
        v448 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v447, (int32x4_t)v447), (int8x16_t)v447, 0xCuLL), v440), v447, v439);
        v449 = (int8x16_t)vaddq_f32(v448, v448);
        v450 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v449, (int32x4_t)v449), v449, 0xCuLL);
        v451 = vaddq_f32(v447, vmulq_laneq_f32(v450, _Q2, 3));
        v452 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v450, (int32x4_t)v450), (int8x16_t)v450, 0xCuLL), v440), v450, v439);
        v720 = vaddq_f32(v445, vmulq_f32(*(float32x4_t *)buf, vaddq_f32(v451, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v452, (int32x4_t)v452), v452, 0xCuLL))));
        v44 = a1;
        drawArc(a1, (float32x4_t *)buf, v43, 32, 6.2832, v688.f32[0]);
        v454 = (float32x4_t)v688.u32[0];
        v453 = v679;
        v454.i32[1] = v679.i32[1];
        v455 = v685;
        v456 = v685;
        v456.i32[2] = v679.i32[0];
        v453.i32[2] = 0;
        v674 = v456;
        v680 = v453;
        v455.i32[2] = v688.i32[0];
        v686 = v455;
        v457 = *a2;
        v458 = a2[1];
        v459 = vmulq_f32(v701, *a2);
        v460 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v458, (int32x4_t)v458), (int8x16_t)v458, 0xCuLL);
        v461 = vnegq_f32(v458);
        v462 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v459, (int32x4_t)v459), (int8x16_t)v459, 0xCuLL), v461), v459, v460);
        v463 = (int8x16_t)vaddq_f32(v462, v462);
        v464 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v463, (int32x4_t)v463), v463, 0xCuLL);
        v465 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v464, (int32x4_t)v464), (int8x16_t)v464, 0xCuLL), v461), v464, v460);
        v466 = vaddq_f32(vaddq_f32(v459, vmulq_laneq_f32(v464, v458, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v465, (int32x4_t)v465), v465, 0xCuLL));
        v467 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v467, v466);
        v468 = vmulq_f32(v454, v457);
        v469 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v468, (int32x4_t)v468), (int8x16_t)v468, 0xCuLL), v461), v468, v460);
        v470 = (int8x16_t)vaddq_f32(v469, v469);
        v471 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v470, (int32x4_t)v470), v470, 0xCuLL);
        v472 = vaddq_f32(v468, vmulq_laneq_f32(v471, v458, 3));
        v473 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v471, (int32x4_t)v471), (int8x16_t)v471, 0xCuLL), v461), v471, v460);
        *(float32x4_t *)v710 = vaddq_f32(v467, vaddq_f32(v472, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v473, (int32x4_t)v473), v473, 0xCuLL)));
        v474 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        v46 = (_anonymous_namespace_ *)(a1 + 200);
        v47 = (_BYTE *)(a1 + 517);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v474, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v475 = *a2;
        v476 = a2[1];
        v477 = vmulq_f32(v701, *a2);
        v478 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v476, (int32x4_t)v476), (int8x16_t)v476, 0xCuLL);
        v479 = vnegq_f32(v476);
        v480 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v477, (int32x4_t)v477), (int8x16_t)v477, 0xCuLL), v479), v477, v478);
        v481 = (int8x16_t)vaddq_f32(v480, v480);
        v482 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v481, (int32x4_t)v481), v481, 0xCuLL);
        v483 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v482, (int32x4_t)v482), (int8x16_t)v482, 0xCuLL), v479), v482, v478);
        v484 = vaddq_f32(vaddq_f32(v477, vmulq_laneq_f32(v482, v476, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v483, (int32x4_t)v483), v483, 0xCuLL));
        v485 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v485, v484);
        v486 = vmulq_f32(v674, v475);
        v487 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v486, (int32x4_t)v486), (int8x16_t)v486, 0xCuLL), v479), v486, v478);
        v488 = (int8x16_t)vaddq_f32(v487, v487);
        v489 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v488, (int32x4_t)v488), v488, 0xCuLL);
        v490 = vaddq_f32(v486, vmulq_laneq_f32(v489, v476, 3));
        v491 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v489, (int32x4_t)v489), (int8x16_t)v489, 0xCuLL), v479), v489, v478);
        *(float32x4_t *)v710 = vaddq_f32(v485, vaddq_f32(v490, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v491, (int32x4_t)v491), v491, 0xCuLL)));
        v492 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v492, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v493 = *a2;
        v494 = a2[1];
        v495 = vmulq_f32(v701, *a2);
        v496 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v494, (int32x4_t)v494), (int8x16_t)v494, 0xCuLL);
        v497 = vnegq_f32(v494);
        v498 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v495, (int32x4_t)v495), (int8x16_t)v495, 0xCuLL), v497), v495, v496);
        v499 = (int8x16_t)vaddq_f32(v498, v498);
        v500 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v499, (int32x4_t)v499), v499, 0xCuLL);
        v501 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v500, (int32x4_t)v500), (int8x16_t)v500, 0xCuLL), v497), v500, v496);
        v502 = vaddq_f32(vaddq_f32(v495, vmulq_laneq_f32(v500, v494, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v501, (int32x4_t)v501), v501, 0xCuLL));
        v503 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v503, v502);
        v504 = vmulq_f32(v680, v493);
        v505 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v504, (int32x4_t)v504), (int8x16_t)v504, 0xCuLL), v497), v504, v496);
        v506 = (int8x16_t)vaddq_f32(v505, v505);
        v507 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v506, (int32x4_t)v506), v506, 0xCuLL);
        v508 = vaddq_f32(v504, vmulq_laneq_f32(v507, v494, 3));
        v509 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v507, (int32x4_t)v507), (int8x16_t)v507, 0xCuLL), v497), v507, v496);
        *(float32x4_t *)v710 = vaddq_f32(v503, vaddq_f32(v508, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v509, (int32x4_t)v509), v509, 0xCuLL)));
        v510 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v510, v43, (_anonymous_namespace_ *)(v44 + 200), (_BYTE *)(v44 + 517), *(_QWORD *)(v44 + 136), *(_QWORD *)(v44 + 528), *(re **)(v44 + 1192));
        v228 = *a2;
        v229 = a2[1];
        v511 = vmulq_f32(v701, *a2);
        v231 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v229, (int32x4_t)v229), (int8x16_t)v229, 0xCuLL);
        v232 = vnegq_f32(v229);
        v512 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v511, (int32x4_t)v511), (int8x16_t)v511, 0xCuLL), v232), v511, v231);
        v513 = (int8x16_t)vaddq_f32(v512, v512);
        v514 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v513, (int32x4_t)v513), v513, 0xCuLL);
        v515 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v514, (int32x4_t)v514), (int8x16_t)v514, 0xCuLL), v232), v514, v231);
        v516 = vaddq_f32(vaddq_f32(v511, vmulq_laneq_f32(v514, v229, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v515, (int32x4_t)v515), v515, 0xCuLL));
        v238 = a2[2];
        *(float32x4_t *)buf = vaddq_f32(v238, v516);
        v239 = v686;
LABEL_31:
        v517 = vmulq_f32(v239, v228);
        v518 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v517, (int32x4_t)v517), (int8x16_t)v517, 0xCuLL), v232), v517, v231);
        v519 = (int8x16_t)vaddq_f32(v518, v518);
        v520 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v519, (int32x4_t)v519), v519, 0xCuLL);
        v521 = vaddq_f32(v517, vmulq_laneq_f32(v520, v229, 3));
        v522 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v520, (int32x4_t)v520), (int8x16_t)v520, 0xCuLL), v232), v520, v231);
        *(float32x4_t *)v710 = vaddq_f32(v238, vaddq_f32(v521, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v522, (int32x4_t)v522), v522, 0xCuLL)));
        v428 = re::PrimitiveRenderingContext::addLine(v44, buf, v710);
        v429 = *(_QWORD *)(v44 + 528);
        v430 = *(_QWORD *)(v44 + 136);
        v431 = *(re **)(v44 + 1192);
        v432 = 5;
        v433 = v43;
        v434 = v46;
        v435 = v47;
LABEL_52:
        re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(v432, v428, v433, v434, v435, v430, v429, v431);
      }
      else
      {
        _Q4 = a2[1];
        v703 = v437;
        _Q2 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q4, (float32x4_t)xmmword_22610BB60), (float32x4_t)xmmword_22610BB70, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), (int8x16_t)_Q4, 0xCuLL));
        v597 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL), (float32x4_t)xmmword_22610BB70, _Q4, 3), (float32x4_t)vdupq_n_s32(0x3F3504F3u), _Q4);
        _S3 = 1060439283;
        __asm { FMLA            S2, S3, V4.S[3] }
        v597.i32[3] = _Q2.i32[0];
        *(float32x4_t *)buf = v597;
        v599 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 4u, (float32x4_t *)a2[2].f32, buf);
        v600 = v703;
        DWORD1(v600) = v688.i32[0];
        DWORD2(v600) = v688.i32[0];
        *(_OWORD *)v710 = v600;
        re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v599, 4u, 2, (__n128 *)v710);
        v576 = a4 + 1;
        v577 = a1;
        v578 = v599;
        v579 = 4;
LABEL_56:
        re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(v577, v578, v579, 3, v576);
      }
      return;
    case 11:
      *(_QWORD *)buf = (*(uint64_t (**)(void *))(*(_QWORD *)v528 + 64))(v528);
      v530 = (float32x2_t *)buf;
      v531 = a1;
      v532 = a2;
LABEL_60:
      drawRectangle(v531, v532, v530, a4, _Q0);
      return;
    case 12:
      v537 = *(_QWORD *)(v533 + 8);
      v536 = *(_QWORD *)(v533 + 16);
      v538 = *(unsigned __int8 *)(v533 + 58);
      if (v538 == 2)
      {
        if (!*(_QWORD *)(v533 + 40))
          return;
        v620 = 0;
        v621 = *(_QWORD *)(v533 + 32);
        for (i = *(_QWORD *)(v533 + 16); ; i += 12)
        {
          v623 = 0;
          do
          {
            v624 = *(_QWORD *)(v533 + 40);
            if (v624 <= v620 + v623)
              goto LABEL_71;
            v625 = v623 + 4294967294u;
            if (v623 < 2)
              v626 = v623 + 1;
            else
              v626 = v623 - 2;
            v627 = v537 + v621 * *(unsigned int *)(i + 4 * v623);
            v534.n128_u64[0] = *(_QWORD *)v627;
            v534.n128_u32[2] = *(_DWORD *)(v627 + 8);
            v628 = v537 + v621 * *(unsigned int *)(v536 + 4 * (v620 + v626));
            v535.i64[0] = *(_QWORD *)v628;
            v535.i32[2] = *(_DWORD *)(v628 + 8);
            v629 = *v695;
            v630 = v695[1];
            v631 = vmulq_f32((float32x4_t)v534, *v695);
            v632 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v630, (int32x4_t)v630), (int8x16_t)v630, 0xCuLL);
            v633 = vnegq_f32(v630);
            v634 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v631, (int32x4_t)v631), (int8x16_t)v631, 0xCuLL), v633), v631, v632);
            v635 = (int8x16_t)vaddq_f32(v634, v634);
            v636 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v635, (int32x4_t)v635), v635, 0xCuLL);
            v637 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v636, (int32x4_t)v636), (int8x16_t)v636, 0xCuLL), v633), v636, v632);
            v638 = vaddq_f32(vaddq_f32(v631, vmulq_laneq_f32(v636, v630, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v637, (int32x4_t)v637), v637, 0xCuLL));
            v639 = v695[2];
            *(float32x4_t *)buf = vaddq_f32(v639, v638);
            v640 = vmulq_f32(v535, v629);
            v641 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v640, (int32x4_t)v640), (int8x16_t)v640, 0xCuLL), v633), v640, v632);
            v642 = (int8x16_t)vaddq_f32(v641, v641);
            v643 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v642, (int32x4_t)v642), v642, 0xCuLL);
            v644 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v643, (int32x4_t)v643), (int8x16_t)v643, 0xCuLL), v633), v643, v632);
            *(float32x4_t *)v710 = vaddq_f32(v639, vaddq_f32(vaddq_f32(v640, vmulq_laneq_f32(v643, v630, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v644, (int32x4_t)v644), v644, 0xCuLL)));
            v645 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
            v534 = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v645, a4 + 1, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), (re *)*(_QWORD *)(a1 + 1192));
            v623 = v625 - 4294967293u;
          }
          while (v625 != 0x100000000);
          v624 = *(_QWORD *)(v533 + 40);
LABEL_71:
          v620 += 3;
          if (v624 <= v620)
            return;
        }
      }
      if (v538 == 1 && *(_QWORD *)(v533 + 40))
      {
        v539 = 0;
        v540 = *(_QWORD *)(v533 + 32);
        v541 = *(_QWORD *)(v533 + 16);
        do
        {
          v542 = 0;
          do
          {
            v543 = *(_QWORD *)(v533 + 40);
            if (v543 <= v539 + v542)
              goto LABEL_48;
            v544 = v542 + 4294967294u;
            if (v542 < 2)
              v545 = v542 + 1;
            else
              v545 = v542 - 2;
            v546 = v537 + v540 * *(unsigned __int16 *)(v541 + 2 * v542);
            v534.n128_u64[0] = *(_QWORD *)v546;
            v534.n128_u32[2] = *(_DWORD *)(v546 + 8);
            v547 = v537 + v540 * *(unsigned __int16 *)(v536 + 2 * (v539 + v545));
            v535.i64[0] = *(_QWORD *)v547;
            v535.i32[2] = *(_DWORD *)(v547 + 8);
            v548 = *v695;
            v549 = v695[1];
            v550 = vmulq_f32((float32x4_t)v534, *v695);
            v551 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v549, (int32x4_t)v549), (int8x16_t)v549, 0xCuLL);
            v552 = vnegq_f32(v549);
            v553 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v550, (int32x4_t)v550), (int8x16_t)v550, 0xCuLL), v552), v550, v551);
            v554 = (int8x16_t)vaddq_f32(v553, v553);
            v555 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v554, (int32x4_t)v554), v554, 0xCuLL);
            v556 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v555, (int32x4_t)v555), (int8x16_t)v555, 0xCuLL), v552), v555, v551);
            v557 = vaddq_f32(vaddq_f32(v550, vmulq_laneq_f32(v555, v549, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v556, (int32x4_t)v556), v556, 0xCuLL));
            v558 = v695[2];
            *(float32x4_t *)buf = vaddq_f32(v558, v557);
            v559 = vmulq_f32(v535, v548);
            v560 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v559, (int32x4_t)v559), (int8x16_t)v559, 0xCuLL), v552), v559, v551);
            v561 = (int8x16_t)vaddq_f32(v560, v560);
            v562 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v561, (int32x4_t)v561), v561, 0xCuLL);
            v563 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v562, (int32x4_t)v562), (int8x16_t)v562, 0xCuLL), v552), v562, v551);
            *(float32x4_t *)v710 = vaddq_f32(v558, vaddq_f32(vaddq_f32(v559, vmulq_laneq_f32(v562, v549, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v563, (int32x4_t)v563), v563, 0xCuLL)));
            v564 = re::PrimitiveRenderingContext::addLine(a1, buf, v710);
            v534 = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v564, a4 + 1, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), (re *)*(_QWORD *)(a1 + 1192));
            v542 = v544 - 4294967293u;
          }
          while (v544 != 0x100000000);
          v543 = *(_QWORD *)(v533 + 40);
LABEL_48:
          v539 += 3;
          v541 += 6;
        }
        while (v543 > v539);
      }
      return;
    default:
      v523 = *re::physicsLogObjects(v8);
      if (os_log_type_enabled(v523, OS_LOG_TYPE_DEFAULT))
      {
        v524 = (*(uint64_t (**)(const void *))(*(_QWORD *)a3 + 24))(a3);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v524;
        _os_log_impl(&dword_224FE9000, v523, OS_LOG_TYPE_DEFAULT, "Unsupported triangulation %d", buf, 8u);
      }
LABEL_34:
      memset(v710, 0, 24);
      *(_QWORD *)&v710[24] = 0x3F80000000000000;
      (*(void (**)(uint8_t *__return_ptr, const void *, _BYTE *))(*(_QWORD *)a3 + 16))(buf, a3, v710);
      v525 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)buf, v719);
      v525.i32[3] = v525.i32[2];
      if ((vmaxvq_u32(v525) & 0x80000000) != 0)
      {
        v527 = 0uLL;
      }
      else
      {
        v526.i64[0] = 0x3F0000003F000000;
        v526.i64[1] = 0x3F0000003F000000;
        v527 = vmulq_f32(vaddq_f32(*(float32x4_t *)buf, v719), v526);
      }
      v565 = a2[1];
      v566 = vmulq_f32(v527, *a2);
      v567 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v565, (int32x4_t)v565), (int8x16_t)v565, 0xCuLL);
      v568 = vnegq_f32(v565);
      v569 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v566, (int32x4_t)v566), (int8x16_t)v566, 0xCuLL), v568), v566, v567);
      v570 = (int8x16_t)vaddq_f32(v569, v569);
      v571 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v570, (int32x4_t)v570), v570, 0xCuLL);
      v572 = vaddq_f32(v566, vmulq_laneq_f32(v571, v565, 3));
      v573 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v571, (int32x4_t)v571), (int8x16_t)v571, 0xCuLL), v568), v571, v567);
      v705 = vaddq_f32(a2[2], vaddq_f32(v572, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v573, (int32x4_t)v573), v573, 0xCuLL)));
      v428 = re::PrimitiveRenderingContext::addPoint(a1, &v705);
      v434 = (_anonymous_namespace_ *)(a1 + 40);
      v429 = *(_QWORD *)(a1 + 520);
      v430 = *(_QWORD *)(a1 + 16);
      v435 = (_BYTE *)(a1 + 513);
      v431 = *(re **)(a1 + 1192);
      v432 = 1;
      v433 = a4 + 1;
      goto LABEL_52;
  }
}

double drawRectangle(uint64_t a1, float32x4_t *a2, float32x2_t *a3, __n128 *a4, __n128 a5)
{
  __n128 v9;
  __n128 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  __n128 *v31;
  unint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  unint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  unint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  unint64_t v86;
  double result;
  float32x4_t v90;
  unint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;

  if (a4->n128_u32[0] == 3)
  {
    a5.n128_u64[0] = (unint64_t)vmul_f32(*a3, (float32x2_t)0x3F0000003F000000);
    v9 = a5;
    v9.n128_u32[1] = 0;
    v10 = v9;
    v10.n128_u32[2] = a5.n128_u32[1];
    v11 = (float32x4_t)v10;
    v9.n128_f32[2] = -a5.n128_f32[1];
    v12 = (float32x4_t)v9;
    v98 = (float32x4_t)v9;
    v99 = (float32x4_t)v10;
    v9.n128_f32[0] = -a5.n128_f32[0];
    v13 = (float32x4_t)COERCE_UNSIGNED_INT(-a5.n128_f32[0]);
    v13.f32[2] = -a5.n128_f32[1];
    v9.n128_u64[1] = a5.n128_u32[1];
    v100 = v13;
    v101 = (float32x4_t)v9;
    v14 = *a2;
    v15 = a2[1];
    v16 = vmulq_f32(*a2, v11);
    v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL);
    v18 = vnegq_f32(v15);
    v19 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), v18), v16, v17);
    v20 = (int8x16_t)vaddq_f32(v19, v19);
    v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL);
    v22 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v18), v21, v17);
    v23 = vaddq_f32(vaddq_f32(v16, vmulq_laneq_f32(v21, v15, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL));
    v24 = a2[2];
    v103 = vaddq_f32(v24, v23);
    v25 = vmulq_f32(v14, v12);
    v26 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), v18), v25, v17);
    v27 = (int8x16_t)vaddq_f32(v26, v26);
    v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), v27, 0xCuLL);
    v29 = vaddq_f32(v25, vmulq_laneq_f32(v28, v15, 3));
    v30 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL), v18), v28, v17);
    v102 = vaddq_f32(v24, vaddq_f32(v29, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), v30, 0xCuLL)));
    v31 = a4 + 1;
    v32 = re::PrimitiveRenderingContext::addLine(a1, &v103, &v102);
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v32, v31, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    v33 = *a2;
    v34 = a2[1];
    v35 = vmulq_f32(v98, *a2);
    v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
    v37 = vnegq_f32(v34);
    v38 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), v37), v35, v36);
    v39 = (int8x16_t)vaddq_f32(v38, v38);
    v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), v39, 0xCuLL);
    v41 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL), v37), v40, v36);
    v42 = vaddq_f32(vaddq_f32(v35, vmulq_laneq_f32(v40, v34, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), v41, 0xCuLL));
    v43 = a2[2];
    v103 = vaddq_f32(v43, v42);
    v44 = vmulq_f32(v100, v33);
    v45 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL), v37), v44, v36);
    v46 = (int8x16_t)vaddq_f32(v45, v45);
    v47 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), v46, 0xCuLL);
    v48 = vaddq_f32(v44, vmulq_laneq_f32(v47, v34, 3));
    v49 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL), v37), v47, v36);
    v102 = vaddq_f32(v43, vaddq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL)));
    v50 = re::PrimitiveRenderingContext::addLine(a1, &v103, &v102);
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v50, v31, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    v51 = *a2;
    v52 = a2[1];
    v53 = vmulq_f32(v100, *a2);
    v54 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL);
    v55 = vnegq_f32(v52);
    v56 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL), v55), v53, v54);
    v57 = (int8x16_t)vaddq_f32(v56, v56);
    v58 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), v57, 0xCuLL);
    v59 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL), v55), v58, v54);
    v60 = vaddq_f32(vaddq_f32(v53, vmulq_laneq_f32(v58, v52, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), v59, 0xCuLL));
    v61 = a2[2];
    v103 = vaddq_f32(v61, v60);
    v62 = vmulq_f32(v101, v51);
    v63 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), (int8x16_t)v62, 0xCuLL), v55), v62, v54);
    v64 = (int8x16_t)vaddq_f32(v63, v63);
    v65 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), v64, 0xCuLL);
    v66 = vaddq_f32(v62, vmulq_laneq_f32(v65, v52, 3));
    v67 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), (int8x16_t)v65, 0xCuLL), v55), v65, v54);
    v102 = vaddq_f32(v61, vaddq_f32(v66, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), v67, 0xCuLL)));
    v68 = re::PrimitiveRenderingContext::addLine(a1, &v103, &v102);
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v68, v31, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
    v69 = *a2;
    v70 = a2[1];
    v71 = vmulq_f32(v101, *a2);
    v72 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), (int8x16_t)v70, 0xCuLL);
    v73 = vnegq_f32(v70);
    v74 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), (int8x16_t)v71, 0xCuLL), v73), v71, v72);
    v75 = (int8x16_t)vaddq_f32(v74, v74);
    v76 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), v75, 0xCuLL);
    v77 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL), v73), v76, v72);
    v78 = vaddq_f32(vaddq_f32(v71, vmulq_laneq_f32(v76, v70, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), v77, 0xCuLL));
    v79 = a2[2];
    v103 = vaddq_f32(v79, v78);
    v80 = vmulq_f32(v99, v69);
    v81 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL), v73), v80, v72);
    v82 = (int8x16_t)vaddq_f32(v81, v81);
    v83 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), v82, 0xCuLL);
    v84 = vaddq_f32(v80, vmulq_laneq_f32(v83, v70, 3));
    v85 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), v73), v83, v72);
    v102 = vaddq_f32(v79, vaddq_f32(v84, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), v85, 0xCuLL)));
    v86 = re::PrimitiveRenderingContext::addLine(a1, &v103, &v102);
    *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v86, v31, (_anonymous_namespace_ *)(a1 + 200), (_BYTE *)(a1 + 517), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 528), (re *)*(_QWORD *)(a1 + 1192)).n128_u64[0];
  }
  else
  {
    _Q0 = a2[1];
    _Q2 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_22610BBC0), (float32x4_t)xmmword_22610BBD0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    v90 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL), (float32x4_t)xmmword_22610BBD0, _Q0, 3), (float32x4_t)vdupq_n_s32(0x3F3504F3u), _Q0);
    _S3 = 1060439283;
    __asm { FMLA            S2, S3, V0.S[3] }
    v90.i32[3] = _Q2.i32[0];
    v103 = v90;
    v96 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 1u, (float32x4_t *)a2[2].f32, &v103);
    *(float32x2_t *)v97.f32 = vmul_f32(*a3, (float32x2_t)0x3F0000003F000000);
    v97.i32[2] = 1.0;
    v102 = v97;
    re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v96, 1u, 2, (__n128 *)&v102);
    return re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a1, v96, 1u, 3, a4 + 1);
  }
  return result;
}

void drawCapsule(uint64_t a1, float32x4_t *a2, __n128 *a3, double a4, __n128 a5)
{
  if (a3->n128_u32[0] == 3)
    re::PhysicsDebugRenderer::drawCapsuleLines(a1, a2, a3, *(float *)&a4, a5.n128_f32[0]);
  else
    re::PhysicsDebugRenderer::drawCapsuleShape(a1, a2, a3, *(int32x2_t *)&a4, a5);
}

void re::PhysicsDebugRenderer::drawTransformFrame(uint64_t a1, uint64_t a2, float a3)
{
  float v5;
  _OWORD *v6;
  unint64_t v7;
  const float *v8;
  float32x4_t v9;
  float32x4_t v12;
  unint64_t v18;
  float32x4_t v21;
  unint64_t v22;
  float32x4_t v23;
  float v24;
  __int128 v25;
  __int128 v26;
  float32x4_t v27;

  v5 = *(float *)a2 * a3;
  if (v5 < 0.05)
    v5 = 0.05;
  v24 = v5;
  v27 = *(float32x4_t *)(a2 + 16);
  v6 = (_OWORD *)(a2 + 32);
  v7 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 2u, (_OWORD *)(a2 + 32), &v27);
  v8 = (const float *)&unk_22610BC24;
  v9 = vld1q_dup_f32(v8);
  v9.f32[0] = v24;
  v25 = (__int128)v9;
  v26 = (__int128)v9;
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v7, 2u, 2, (__n128 *)&v26);
  v26 = xmmword_226104350;
  re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a1, v7, 2u, 3, (__n128 *)&v26);
  _Q0 = *(float32x4_t *)(a2 + 16);
  _Q2 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_22610BB60), (float32x4_t)xmmword_22610BB70, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
  v23 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
  v12 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL), (float32x4_t)xmmword_22610BB70, _Q0, 3), v23, _Q0);
  _S8 = 1060439283;
  __asm { FMLA            S2, S8, V0.S[3] }
  v12.i32[3] = _Q2.i32[0];
  v27 = v12;
  v18 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 2u, v6, &v27);
  v26 = v25;
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v18, 2u, 2, (__n128 *)&v26);
  v26 = xmmword_22610BBE0;
  re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a1, v18, 2u, 3, (__n128 *)&v26);
  _Q0 = *(float32x4_t *)(a2 + 16);
  _Q2 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_22610BBF0), (float32x4_t)xmmword_22610BC00, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
  v21 = vmlaq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL), (float32x4_t)xmmword_22610BC00, _Q0, 3), v23, _Q0);
  __asm { FMLA            S2, S8, V0.S[3] }
  v21.i32[3] = _Q2.i32[0];
  v27 = v21;
  v22 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 2u, v6, &v27);
  v26 = v25;
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v22, 2u, 2, (__n128 *)&v26);
  v26 = xmmword_22610BC10;
  re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a1, v22, 2u, 3, (__n128 *)&v26);
}

double re::PhysicsDebugRenderer::drawCenterOfMass(uint64_t a1, float32x4_t *a2, float32x4_t *a3, int32x2_t a4)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v23;
  unint64_t v24;
  __n128 v26;
  int32x2_t v27;
  __n128 v28[2];
  float32x4_t v29;
  float32x4_t v30;

  *(float *)a4.i32 = (float)(a2->f32[0] * *(float *)a4.i32) * 0.1;
  if (*(float *)a4.i32 < 0.008)
    *(float *)a4.i32 = 0.008;
  v27 = a4;
  _Q1 = a3[1];
  _Q3 = a2[1];
  v7 = vmulq_f32(*a3, *a2);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), (int8x16_t)_Q3, 0xCuLL);
  v9 = vnegq_f32(_Q3);
  v10 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL), v9), _Q1, v8);
  v11 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL), _Q1, _Q3, 3), _Q3, _Q1, 3);
  _Q1.i32[0] = _Q1.i32[3];
  __asm { FMLA            S7, S1, V3.S[3] }
  v11.i32[3] = _S7;
  v17 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v9), v7, v8);
  v18 = (int8x16_t)vaddq_f32(v17, v17);
  v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), v18, 0xCuLL);
  v20 = vaddq_f32(v7, vmulq_laneq_f32(v19, _Q3, 3));
  v21 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v9), v19, v8);
  __asm { FMOV            V1.4S, #1.0 }
  v26 = _Q1;
  v23 = vaddq_f32(a2[2], vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL)));
  v28[1] = _Q1;
  v29 = v11;
  v30 = v23;
  v24 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a1, 3u, &v30, &v29);
  v28[0] = (__n128)vdupq_lane_s32(v27, 0);
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a1, v24, 3u, 2, v28);
  v28[0] = v26;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a1, v24, 3u, 3, v28);
}

void re::DynamicArray<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<unsigned short>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 2 * v4);
      v6 = 2 * a2 - 2 * v4;
      v7 = v6 == 1;
      if (v6 >= 1)
      {
        v8 = (unint64_t)v6 >> 1;
        v9 = !v7;
        bzero(v5, 2 * (v8 - v9) + 2);
      }
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::serializeObject@<X0>(re *this@<X0>, re::NetworkCompatSerializer *a2@<X1>, re::DynamicArrayBufferedOutputStream *a3@<X2>, const void *a4@<X3>, const re::TypeInfo *a5@<X4>, uint64_t a6@<X8>)
{
  _anonymous_namespace_ *v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (!*((_BYTE *)this + 64))
    (*(void (**)(re *, const char *, uint64_t, re::DynamicArrayBufferedOutputStream *, const void *, const re::TypeInfo *, _QWORD))(*(_QWORD *)this + 72))(this, "object", 1, a3, a4, a5, 0);
  (*(void (**)(re *))(*(_QWORD *)this + 56))(this);
  result = re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((uint64_t)this + 24);
  if (*((_BYTE *)this + 64))
  {
    v15 = *(_OWORD *)((char *)this + 72);
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (re *)((char *)this + 88));
    v18 = v15;
    re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)&v16);
    *(_BYTE *)a6 = 0;
    *(_OWORD *)(a6 + 8) = v18;
    *(_QWORD *)(a6 + 24) = v19;
    *(_QWORD *)(a6 + 48) = v21;
    *(_OWORD *)(a6 + 32) = v20;
    v21 = 0;
    v19 = 0;
    v20 = 0uLL;
    result = v16;
    if (v16)
    {
      if ((v17 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
    }
  }
  else
  {
    *(_BYTE *)a6 = 1;
  }
  return result;
}

uint64_t re::deserializeObject@<X0>(re *this@<X0>, re::NetworkCompatDeserializer *a2@<X1>, re::FixedArrayInputStream *a3@<X2>, void *a4@<X3>, const re::TypeInfo *a5@<X4>, uint64_t a6@<X8>)
{
  _anonymous_namespace_ *v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (!*((_BYTE *)this + 64))
    (*(void (**)(re *, const char *, uint64_t, re::FixedArrayInputStream *, void *, const re::TypeInfo *, _QWORD))(*(_QWORD *)this + 72))(this, "object", 1, a3, a4, a5, 0);
  (*(void (**)(re *))(*(_QWORD *)this + 56))(this);
  result = re::Encoder<re::EncoderBinary<re::FixedArrayInputStream>,re::FixedArrayInputStream>::close((uint64_t)this + 24);
  if (*((_BYTE *)this + 64))
  {
    v15 = *(_OWORD *)((char *)this + 72);
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (re *)((char *)this + 88));
    v18 = v15;
    re::DynamicString::DynamicString((re::DynamicString *)&v19, (const re::DynamicString *)&v16);
    *(_BYTE *)a6 = 0;
    *(_OWORD *)(a6 + 8) = v18;
    *(_QWORD *)(a6 + 24) = v19;
    *(_QWORD *)(a6 + 48) = v21;
    *(_OWORD *)(a6 + 32) = v20;
    v21 = 0;
    v19 = 0;
    v20 = 0uLL;
    result = v16;
    if (v16)
    {
      if ((v17 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
    }
  }
  else
  {
    *(_BYTE *)a6 = 1;
  }
  return result;
}

_BYTE *re::serializeObject@<X0>(re *this@<X0>, re::NetworkOPACKSerializer *a2@<X1>, re::DynamicArrayBufferedOutputStream *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *v11;
  _BYTE *result;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (!*((_BYTE *)this + 64))
    (*(void (**)(re *, const char *, uint64_t, re::DynamicArrayBufferedOutputStream *, const void *, const void *, _QWORD))(*(_QWORD *)this + 72))(this, "object", 1, a3, a4, a4, 0);
  (*(void (**)(re *))(*(_QWORD *)this + 56))(this);
  result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_BYTE *)this + 24);
  if (*((_BYTE *)this + 64))
  {
    v13 = *(_OWORD *)((char *)this + 72);
    re::DynamicString::DynamicString((re::DynamicString *)&v14, (re *)((char *)this + 88));
    v16 = v13;
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v14);
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v16;
    *(_QWORD *)(a5 + 24) = v17;
    *(_QWORD *)(a5 + 48) = v19;
    *(_OWORD *)(a5 + 32) = v18;
    v19 = 0;
    v17 = 0;
    v18 = 0uLL;
    result = (_BYTE *)v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  else
  {
    *(_BYTE *)a5 = 1;
  }
  return result;
}

_BYTE *re::deserializeObject@<X0>(re *this@<X0>, re::NetworkOPACKDeserializer *a2@<X1>, re::FixedArrayInputStream *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *v11;
  _BYTE *result;
  __int128 v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (!*((_BYTE *)this + 64))
    (*(void (**)(re *, const char *, uint64_t, re::FixedArrayInputStream *, void *, void *, _QWORD))(*(_QWORD *)this + 72))(this, "object", 1, a3, a4, a4, 0);
  (*(void (**)(re *))(*(_QWORD *)this + 56))(this);
  result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_BYTE *)this + 24);
  if (*((_BYTE *)this + 64))
  {
    v13 = *(_OWORD *)((char *)this + 72);
    re::DynamicString::DynamicString((re::DynamicString *)&v14, (re *)((char *)this + 88));
    v16 = v13;
    re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v14);
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v16;
    *(_QWORD *)(a5 + 24) = v17;
    *(_QWORD *)(a5 + 48) = v19;
    *(_OWORD *)(a5 + 32) = v18;
    v19 = 0;
    v17 = 0;
    v18 = 0uLL;
    result = (_BYTE *)v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        return (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  else
  {
    *(_BYTE *)a5 = 1;
  }
  return result;
}

uint64_t *re::allocInfo_NetworkOPACKSerializer(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_156);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_156))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541075C8, 0);
    *(uint64_t *)((char *)&qword_2541075D8 + 6) = 0;
    qword_2541075D8 = 0;
    qword_2541075E8 = 0;
    qword_2541075F0 = 0xFFFFFFFFLL;
    qword_2541075C8 = (uint64_t)&off_24ED7DAA8;
    qword_2541075F8 = (uint64_t)"NetworkOPACKSerializer";
    dword_254107600 = 0;
    xmmword_254107608 = 0u;
    unk_254107618 = 0u;
    xmmword_254107628 = 0u;
    qword_254107638 = 0;
    __cxa_guard_release(&_MergedGlobals_156);
  }
  return &qword_2541075C8;
}

void re::initInfo_NetworkOPACKSerializer(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD66B7D4190E6B598;
  v5[1] = "NetworkOPACKSerializer";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_NetworkOPACKSerializer(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::NetworkOPACKSerializer>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::NetworkOPACKSerializer>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::NetworkOPACKSerializer>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::NetworkOPACKSerializer>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::NetworkOPACKSerializer *re::internal::defaultConstruct<re::NetworkOPACKSerializer>(int a1, int a2, re::NetworkOPACKSerializer *this)
{
  return re::NetworkOPACKSerializer::NetworkOPACKSerializer(this);
}

uint64_t re::internal::defaultDestruct<re::NetworkOPACKSerializer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::NetworkOPACKSerializer>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_NetworkOPACKSerializer(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkOPACKSerializer", (uint64_t (*)(re::internal *))re::allocInfo_NetworkOPACKSerializer, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkOPACKSerializer, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkOPACKSerializer>, this);
}

uint64_t *re::allocInfo_NetworkOPACKDeserializer(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541075B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541075B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107640, 0);
    *(uint64_t *)((char *)&qword_254107650 + 6) = 0;
    qword_254107650 = 0;
    qword_254107660 = 0;
    qword_254107668 = 0xFFFFFFFFLL;
    qword_254107640 = (uint64_t)&off_24ED7DAA8;
    qword_254107670 = (uint64_t)"NetworkOPACKDeserializer";
    dword_254107678 = 0;
    xmmword_254107680 = 0u;
    unk_254107690 = 0u;
    xmmword_2541076A0 = 0u;
    qword_2541076B0 = 0;
    __cxa_guard_release(&qword_2541075B0);
  }
  return &qword_254107640;
}

void re::initInfo_NetworkOPACKDeserializer(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xDEED4B9BC35C271ALL;
  v5[1] = "NetworkOPACKDeserializer";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_NetworkOPACKDeserializer(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::NetworkOPACKDeserializer>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::NetworkOPACKDeserializer>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::NetworkOPACKDeserializer>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::NetworkOPACKDeserializer>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::NetworkOPACKDeserializer *re::internal::defaultConstruct<re::NetworkOPACKDeserializer>(int a1, int a2, re::NetworkOPACKDeserializer *this)
{
  return re::NetworkOPACKDeserializer::NetworkOPACKDeserializer(this);
}

uint64_t re::internal::defaultDestruct<re::NetworkOPACKDeserializer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::NetworkOPACKDeserializer>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_NetworkOPACKDeserializer(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkOPACKDeserializer", (uint64_t (*)(re::internal *))re::allocInfo_NetworkOPACKDeserializer, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkOPACKDeserializer, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkOPACKDeserializer>, this);
}

uint64_t *re::allocInfo_NetworkCompatSerializer(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541075B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541075B8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541076B8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541076C8 = 0;
    qword_2541076D8 = 0;
    qword_2541076E0 = 0xFFFFFFFFLL;
    qword_2541076B8 = (uint64_t)&off_24ED7DAA8;
    qword_2541076E8 = (uint64_t)"NetworkCompatSerializer";
    dword_2541076F0 = 0;
    xmmword_2541076F8 = 0u;
    unk_254107708 = 0u;
    xmmword_254107718 = 0u;
    qword_254107728 = 0;
    __cxa_guard_release(&qword_2541075B8);
  }
  return &qword_2541076B8;
}

void re::initInfo_NetworkCompatSerializer(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x287C37956ADFC9C4;
  v5[1] = "NetworkCompatSerializer";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1D000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_NetworkCompatSerializer(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::NetworkCompatSerializer>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::NetworkCompatSerializer>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::NetworkCompatSerializer>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::NetworkCompatSerializer>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::NetworkCompatSerializer *re::internal::defaultConstruct<re::NetworkCompatSerializer>(int a1, int a2, re::NetworkCompatSerializer *this)
{
  return re::NetworkCompatSerializer::NetworkCompatSerializer(this);
}

uint64_t re::internal::defaultDestruct<re::NetworkCompatSerializer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::NetworkCompatSerializer>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_NetworkCompatSerializer(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkCompatSerializer", (uint64_t (*)(re::internal *))re::allocInfo_NetworkCompatSerializer, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkCompatSerializer, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkCompatSerializer>, this);
}

uint64_t *re::allocInfo_NetworkCompatDeserializer(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541075C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541075C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107730, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254107740 = 0;
    qword_254107750 = 0;
    qword_254107758 = 0xFFFFFFFFLL;
    qword_254107730 = (uint64_t)&off_24ED7DAA8;
    qword_254107760 = (uint64_t)"NetworkCompatDeserializer";
    dword_254107768 = 0;
    xmmword_254107770 = 0u;
    unk_254107780 = 0u;
    xmmword_254107790 = 0u;
    qword_2541077A0 = 0;
    __cxa_guard_release(&qword_2541075C0);
  }
  return &qword_254107730;
}

void re::initInfo_NetworkCompatDeserializer(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xEFB8C0610360E046;
  v5[1] = "NetworkCompatDeserializer";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1D000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_NetworkCompatDeserializer(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::NetworkCompatDeserializer>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::NetworkCompatDeserializer>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::NetworkCompatDeserializer>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::NetworkCompatDeserializer>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::NetworkCompatDeserializer *re::internal::defaultConstruct<re::NetworkCompatDeserializer>(int a1, int a2, re::NetworkCompatDeserializer *this)
{
  return re::NetworkCompatDeserializer::NetworkCompatDeserializer(this);
}

uint64_t re::internal::defaultDestruct<re::NetworkCompatDeserializer>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::NetworkCompatDeserializer>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_NetworkCompatDeserializer(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkCompatDeserializer", (uint64_t (*)(re::internal *))re::allocInfo_NetworkCompatDeserializer, (re::IntrospectionBase *(*)(void))re::initInfo_NetworkCompatDeserializer, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::NetworkCompatDeserializer>, this);
}

uint64_t re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>::open(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  double v9;

  v8 = a1[24];
  if (*(_DWORD *)(v8 + 24) != *((_DWORD *)a1 + 50))
  {
    (*(void (**)(_QWORD *))(*a1 + 40))(a1);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 26));
    a1[24] = v8;
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 26));
    re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>::registerSerializeFuncs(a1);
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
    *((_DWORD *)a1 + 50) = *(_DWORD *)(a1[24] + 24);
  }
  v9 = re::Encoder<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::open((uint64_t)(a1 + 3), a2, 0, 0xFFFFFFFFLL, a3, a4);
  return (*(uint64_t (**)(_QWORD *, double))(*a1 + 48))(a1, v9);
}

uint64_t *re::ecs2::allocInfo_ImageBasedReflectionRootComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_157);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_157))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541077C0, 0);
    *(uint64_t *)((char *)&qword_2541077D0 + 6) = 0;
    qword_2541077D0 = 0;
    qword_2541077E0 = 0;
    qword_2541077E8 = 0xFFFFFFFFLL;
    qword_2541077C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541077F0 = (uint64_t)"ImageBasedReflectionRootComponent";
    dword_2541077F8 = 0;
    unk_254107800 = 0u;
    unk_254107810 = 0u;
    unk_254107820 = 0u;
    qword_254107830 = 0;
    __cxa_guard_release(&_MergedGlobals_157);
  }
  return &qword_2541077C0;
}

void re::ecs2::initInfo_ImageBasedReflectionRootComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xCAF0671912AB7AF0;
  v10[1] = "ImageBasedReflectionRootComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_2541077B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541077B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541077B0 = v8;
      __cxa_guard_release(&qword_2541077B8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541077B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionRootComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionRootComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionRootComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionRootComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionRootComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED48710;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionRootComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionRootComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED48710;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionRootComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedReflectionRootComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionRootComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionRootComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionRootComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionRootComponent>, this);
}

void re::ecs2::ImageBasedReflectionRootComponent::~ImageBasedReflectionRootComponent(re::ecs2::ImageBasedReflectionRootComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::introspect_REForceEffectInputs(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  re *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  StringID v46;
  _QWORD v47[2];
  _QWORD v48[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254107840);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254107840);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "REForceEffectInputsNone";
      qword_2541078E8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "REForceEffectInputsPosition";
      qword_2541078F0 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "REForceEffectInputsOrientation";
      qword_2541078F8 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 4;
      *((_QWORD *)v34 + 2) = "REForceEffectInputsVelocity";
      qword_254107900 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 8;
      *((_QWORD *)v36 + 2) = "REForceEffectInputsAngularVelocity";
      qword_254107908 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 16;
      *((_QWORD *)v38 + 2) = "REForceEffectInputsDistance";
      qword_254107910 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *((_QWORD *)v40 + 1) = 32;
      *((_QWORD *)v40 + 2) = "REForceEffectInputsMass";
      qword_254107918 = (uint64_t)v40;
      v41 = re::introspectionAllocator(v40);
      v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 24, 8);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = 64;
      *(_QWORD *)(v42 + 16) = "REForceEffectInputsInertiaTensor";
      qword_254107920 = v42;
      __cxa_guard_release(&qword_254107840);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254107848);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254107848))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541079A8, "REForceEffectInputs", 4, 4, 1, 1);
    qword_2541079A8 = (uint64_t)&off_24ED7D9E8;
    qword_2541079E8 = (uint64_t)&re::introspect_REForceEffectInputs(BOOL)::enumTable;
    dword_2541079B8 = 9;
    __cxa_guard_release(&qword_254107848);
  }
  if ((_MergedGlobals_158 & 1) == 0)
  {
    _MergedGlobals_158 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541079A8, a2);
    v44 = 0xDDBD7482084DEE4;
    v45 = "REForceEffectInputs";
    v48[0] = 0x607DD0F01DCLL;
    v48[1] = "uint32_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v48);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v48);
      v6 = (unsigned int *)qword_2541079E8;
      v47[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v48, &v44, 1, 1, (uint64_t)v47);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v46.var0 = 2 * v12;
            v46.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v48, v16, &v46);
            re::StringID::destroyString((re::StringID *)&v46);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v46.var0 = 2 * v20;
              v46.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v48, v24, &v46);
              re::StringID::destroyString((re::StringID *)&v46);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v48, v25);
      xmmword_2541079C8 = (__int128)v46;
      re::StringID::destroyString((re::StringID *)&v44);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v48);
      re::internal::assertLog((re::internal *)5, v43, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REForceEffectInputs", v44, v45);
      _os_crash();
      __break(1u);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::ForceEffectDesc>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0x3F80000000000000;
  *(_QWORD *)(a3 + 32) = -3229614080;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 44) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 136) = 0;
  *(_DWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = &str_110;
  *(_QWORD *)(a3 + 232) = 0;
  *(_QWORD *)(a3 + 208) = 0;
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  *(_DWORD *)(a3 + 224) = 0;
  *(_QWORD *)(a3 + 256) = 0;
}

uint64_t *re::internal::defaultDestruct<re::ecs2::ForceEffectDesc>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;

  v5 = (_QWORD *)(a3 + 200);
  v4 = *(_QWORD *)(a3 + 200);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 232))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 232) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 224);
  }
  re::StringID::destroyString((re::StringID *)(a3 + 184));
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(a3 + 88));
}

uint64_t re::internal::defaultConstructV2<re::ecs2::ForceEffectDesc>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0x3F80000000000000;
  *(_QWORD *)(result + 32) = -3229614080;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 44) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_BYTE *)(result + 152) = 0;
  *(_BYTE *)(result + 168) = 0;
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_BYTE *)(result + 136) = 0;
  *(_DWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = &str_110;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_DWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 256) = 0;
  return result;
}

uint64_t *re::internal::defaultDestructV2<re::ecs2::ForceEffectDesc>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 200);
  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 232))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 232) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 224);
  }
  re::StringID::destroyString((re::StringID *)(a1 + 184));
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(a1 + 88));
}

uint64_t *re::ecs2::allocInfo_ForceEffectComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254107878);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107878))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107AB0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254107AC0 = 0;
    qword_254107AD0 = 0;
    qword_254107AD8 = 0xFFFFFFFFLL;
    qword_254107AB0 = (uint64_t)&off_24ED7DAA8;
    qword_254107AE0 = (uint64_t)"ForceEffectComponent";
    dword_254107AE8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254107B20 = 0;
    __cxa_guard_release(&qword_254107878);
  }
  return &qword_254107AB0;
}

void re::ecs2::initInfo_ForceEffectComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xC509062FDBB70842;
  v15[1] = "ForceEffectComponent";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_254107880);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107880);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541078B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::Optional<REPhysicsForceEffectPlaybackRequest>>::get((uint64_t)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "state";
      *(_QWORD *)(v11 + 16) = &qword_254107928;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2541078B8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::ForceEffectDesc>>::get();
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "descriptions";
      *(_QWORD *)(v13 + 16) = &qword_254107968;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541078C0 = v13;
      __cxa_guard_release(&qword_254107880);
    }
  }
  *((_QWORD *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541078B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ForceEffectComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ForceEffectComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ForceEffectComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ForceEffectComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::IntrospectionInfo<re::Optional<REPhysicsForceEffectPlaybackRequest>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  re::IntrospectionRegistry *v28;
  const re::IntrospectionBase *v29;
  const char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  StringID v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[60];

  v2 = atomic_load((unsigned __int8 *)&qword_254107888);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254107888))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_254107928);
    qword_254107928 = (uint64_t)&off_24ED487F8;
    __cxa_guard_release(&qword_254107888);
  }
  if ((byte_25410783A & 1) == 0)
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254107850);
    if ((v3 & 1) == 0)
    {
      v34 = (re *)__cxa_guard_acquire(&qword_254107850);
      if ((_DWORD)v34)
      {
        v35 = re::introspectionAllocator(v34);
        v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
        *(_DWORD *)v36 = 1;
        *((_QWORD *)v36 + 1) = 0;
        *((_QWORD *)v36 + 2) = "REPhysicsForceEffectPlaybackRequestStart";
        qword_254107898 = (uint64_t)v36;
        v37 = re::introspectionAllocator(v36);
        v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
        *(_DWORD *)v38 = 1;
        *((_QWORD *)v38 + 1) = 1;
        *((_QWORD *)v38 + 2) = "REPhysicsForceEffectPlaybackRequestPause";
        qword_2541078A0 = (uint64_t)v38;
        v39 = re::introspectionAllocator(v38);
        v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
        *(_DWORD *)v40 = 1;
        *(_QWORD *)(v40 + 8) = 2;
        *(_QWORD *)(v40 + 16) = "REPhysicsForceEffectPlaybackRequestResume";
        qword_2541078A8 = v40;
        __cxa_guard_release(&qword_254107850);
      }
    }
    v4 = atomic_load((unsigned __int8 *)&qword_254107858);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254107858))
    {
      re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541079F0, "REPhysicsForceEffectPlaybackRequest", 1, 1, 1, 1);
      qword_2541079F0 = (uint64_t)&off_24ED7D9E8;
      qword_254107A30 = (uint64_t)&re::introspect_REPhysicsForceEffectPlaybackRequest(BOOL)::enumTable;
      dword_254107A00 = 9;
      __cxa_guard_release(&qword_254107858);
    }
    if ((byte_254107839 & 1) == 0)
    {
      byte_254107839 = 1;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541079F0, a2);
      *(_QWORD *)&v43 = 0x1265D1D99F95FF58;
      *((_QWORD *)&v43 + 1) = "REPhysicsForceEffectPlaybackRequest";
      v46 = 0x31CD534126;
      v47[0] = "uint8_t";
      v5 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v46);
      if (!v5)
      {
        re::StringID::destroyString((re::StringID *)&v46);
        re::internal::assertLog((re::internal *)5, v41, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "REPhysicsForceEffectPlaybackRequest");
        _os_crash();
        __break(1u);
        return;
      }
      v6 = *v5;
      re::StringID::destroyString((re::StringID *)&v46);
      v7 = (unsigned int *)qword_254107A30;
      *((_QWORD *)&v45 + 1) = v6;
      re::TypeBuilder::beginEnumType((uint64_t)&v46, (uint64_t *)&v43, 1, 1, (uint64_t)&v45);
      v9 = *v7;
      if ((_DWORD)v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * i);
          if (*(_DWORD *)v11 == 1)
          {
            v12 = *(char **)(v11 + 16);
            if (v12)
            {
              v13 = *v12;
              if (*v12)
              {
                v14 = v12[1];
                if (v14)
                {
                  v15 = (unsigned __int8 *)(v12 + 2);
                  do
                  {
                    v13 = 31 * v13 + v14;
                    v16 = *v15++;
                    v14 = v16;
                  }
                  while (v16);
                }
              }
            }
            else
            {
              v13 = 0;
            }
            v17 = *(_QWORD *)(v11 + 8);
            *(_QWORD *)&v44.var0 = 2 * v13;
            v44.var1 = v12;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v46, v17, &v44);
            re::StringID::destroyString((re::StringID *)&v44);
            v9 = *v7;
          }
        }
        if (v9)
        {
          for (j = 0; j < v9; ++j)
          {
            v19 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * j);
            if (*(_DWORD *)v19 == 2)
            {
              v20 = *(char **)(v19 + 16);
              if (v20)
              {
                v21 = *v20;
                if (*v20)
                {
                  v22 = v20[1];
                  if (v22)
                  {
                    v23 = (unsigned __int8 *)(v20 + 2);
                    do
                    {
                      v21 = 31 * v21 + v22;
                      v24 = *v23++;
                      v22 = v24;
                    }
                    while (v24);
                  }
                }
              }
              else
              {
                v21 = 0;
              }
              v25 = *(_QWORD *)(v19 + 8);
              *(_QWORD *)&v44.var0 = 2 * v21;
              v44.var1 = v20;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v46, v25, &v44);
              re::StringID::destroyString((re::StringID *)&v44);
              v9 = *v7;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v26);
      xmmword_254107A10 = (__int128)v44;
      re::StringID::destroyString((re::StringID *)&v43);
    }
    if ((byte_25410783A & 1) == 0)
    {
      byte_25410783A = 1;
      v27 = dword_254107A08;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107928, 0);
      *(_QWORD *)&algn_254107930[8] = 0x20000000DLL;
      dword_254107940 = v27;
      word_254107944 = 0;
      *(_QWORD *)&xmmword_254107948 = 0;
      *((_QWORD *)&xmmword_254107948 + 1) = 0xFFFFFFFFLL;
      qword_254107958 = (uint64_t)&qword_2541079F0;
      unk_254107960 = 0;
      qword_254107928 = (uint64_t)&off_24ED487F8;
      re::IntrospectionRegistry::add(v28, v29);
      re::getPrettyTypeName((re *)&qword_254107928, (const re::IntrospectionBase *)&v46);
      if ((v47[0] & 1) != 0)
        v30 = (const char *)v47[1];
      else
        v30 = (char *)v47 + 1;
      if (v46 && (v47[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v46 + 40))();
      v43 = xmmword_254107A10;
      v31 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v44);
      if (v31)
      {
        v32 = *v31;
        *((_QWORD *)&v42 + 1) = v32;
      }
      else
      {
        v45 = v43;
        re::TypeBuilder::beginOptionalType((uint64_t)&v46, (uint64_t *)&v44, 2uLL, 1uLL, &v45);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v46, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<REPhysicsForceEffectPlaybackRequest>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<REPhysicsForceEffectPlaybackRequest>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v33);
      }
      xmmword_254107948 = v42;
      re::StringID::destroyString((re::StringID *)&v44);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::ForceEffectDesc>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30[2];
  __int128 v31;
  const char *v32;
  __int128 v33;

  v0 = atomic_load((unsigned __int8 *)&qword_254107890);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254107890))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254107968);
    qword_254107968 = (uint64_t)&off_24ED48878;
    __cxa_guard_release(&qword_254107890);
  }
  if ((byte_25410783B & 1) == 0)
  {
    v1 = (uint64_t *)qword_254107870;
    if (qword_254107870)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254107860);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254107860))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107A38, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254107A48 = 0;
      *(_QWORD *)&xmmword_254107A58 = 0;
      *((_QWORD *)&xmmword_254107A58 + 1) = 0xFFFFFFFFLL;
      qword_254107A38 = (uint64_t)&off_24ED7DAA8;
      qword_254107A68 = (uint64_t)"ForceEffectDesc";
      dword_254107A70 = 0;
      xmmword_254107A78 = 0u;
      *(_OWORD *)&qword_254107A88 = 0u;
      xmmword_254107A98 = 0u;
      qword_254107AA8 = 0;
      __cxa_guard_release(&qword_254107860);
    }
    qword_254107870 = (uint64_t)&qword_254107A38;
    *(_QWORD *)&v33 = 0xA2B91F6A98FF61DALL;
    *((_QWORD *)&v33 + 1) = "ForceEffectDesc";
    re::StringID::destroyString((re::StringID *)&v33);
    xmmword_254107A58 = v31;
    v4 = atomic_load((unsigned __int8 *)&qword_254107868);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254107868);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v15 = re::introspect_ForceEffectDefinition((re::IntrospectionBase **)1);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "def";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_2541078C8 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        re::introspect_REForceEffectInputs((re *)v17, v18);
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "inputs";
        *(_QWORD *)(v19 + 16) = &qword_2541079A8;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0xB000000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_2541078D0 = v19;
        v20 = re::introspectionAllocator((re *)v19);
        v22 = re::IntrospectionInfo<re::StringID>::get(1, v21);
        v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = "eventKey";
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0xB800000003;
        *(_DWORD *)(v23 + 40) = 0;
        *(_QWORD *)(v23 + 48) = 0;
        *(_QWORD *)(v23 + 56) = 0;
        *(_DWORD *)(v23 + 64) = 0;
        qword_2541078D8 = v23;
        v24 = re::introspectionAllocator((re *)v23);
        v26 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v25);
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "userData";
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0xC800000004;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_2541078E0 = v27;
        __cxa_guard_release(&qword_254107868);
      }
    }
    qword_254107A48 = 0x11000000008;
    v1 = &qword_254107A38;
    dword_254107A50 = 16;
    word_254107A54 = 0;
    dword_254107A70 = 4;
    *(_QWORD *)&xmmword_254107A78 = &qword_2541078C8;
    *((_QWORD *)&xmmword_254107A78 + 1) = re::internal::defaultConstruct<re::ecs2::ForceEffectDesc>;
    qword_254107A88 = (uint64_t)re::internal::defaultDestruct<re::ecs2::ForceEffectDesc>;
    *(_QWORD *)&xmmword_254107A98 = 0;
    qword_254107A90 = 0;
    *((_QWORD *)&xmmword_254107A98 + 1) = re::internal::defaultConstructV2<re::ecs2::ForceEffectDesc>;
    qword_254107AA8 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::ForceEffectDesc>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254107A38, v3);
    v33 = v31;
    if ((byte_25410783B & 1) == 0)
    {
LABEL_7:
      byte_25410783B = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107968, 0);
      qword_254107978 = 0x2800000003;
      dword_254107980 = v5;
      word_254107984 = 0;
      *(_QWORD *)&xmmword_254107988 = 0;
      *((_QWORD *)&xmmword_254107988 + 1) = 0xFFFFFFFFLL;
      qword_254107998 = (uint64_t)v1;
      unk_2541079A0 = 0;
      qword_254107968 = (uint64_t)&off_24ED48878;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254107968, (const re::IntrospectionBase *)&v31);
      if ((BYTE8(v31) & 1) != 0)
        v8 = v32;
      else
        v8 = (char *)&v31 + 9;
      if ((_QWORD)v31 && (BYTE8(v31) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v31 + 40))();
      v29 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v30);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v28 + 1) = v10;
      }
      else
      {
        v33 = v29;
        re::TypeBuilder::beginListType((uint64_t)&v31, v30, 1, 0x28uLL, 8uLL, &v33);
        re::TypeBuilder::setConstructor((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v31, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v31, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v31, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v31, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v31, v11);
      }
      xmmword_254107988 = v28;
      re::StringID::destroyString((re::StringID *)v30);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::ecs2::ForceEffectComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ForceEffectComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::ForceEffectComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ForceEffectComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ForceEffectComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ForceEffectComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ForceEffectComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ForceEffectComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ForceEffectComponent>, this);
}

re *re::internal::destroyPersistent<re::ForceEffectDefinition>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(a3 + 88));
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

re *re::ecs2::ForceEffectComponent::removeDefinitionLast(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *WeakRetained;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * *(_QWORD *)(a1 + 104) - 8);
  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 72));
  v6 = WeakRetained - 8;
  if (!WeakRetained)
    v6 = 0;
  v9 = v4;
  *(_QWORD *)(v4 + 128) = 0;
  re::DynamicArray<unsigned long long>::remove((uint64_t)(v6 + 344), &v9);
  if (WeakRetained)

  v7 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(v4 + 88);
  re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(v7 + 8, &v9);
  re::StringID::destroyString((re::StringID *)(*(_QWORD *)(a1 + 160) + 16 * *(_QWORD *)(a1 + 144) - 16));
  --*(_QWORD *)(a1 + 144);
  ++*(_DWORD *)(a1 + 152);
  --*(_QWORD *)(a1 + 104);
  ++*(_DWORD *)(a1 + 112);
  return re::internal::destroyPersistent<re::ForceEffectDefinition>((re *)"removeDefinitionLast", 95, v4);
}

uint64_t re::ecs2::ForceEffectComponent::updateForceEffectDefinitionAt(uint64_t a1, unint64_t a2, float32x4_t *a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x4_t v21;
  float v22;
  float32_t v23;
  unsigned int v24;
  float32x4_t v25;
  float32_t v26;
  float32x4_t v27;
  __int128 v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t result;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  double v60;
  float v61;
  uint64x2_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float32x4_t v67;
  __int128 v68;
  __int128 v69;
  int32x4_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[48];
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 104);
  if (v4 <= a2)
  {
    v62.i64[0] = 0;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v76 = 136315906;
    *(_QWORD *)&v76[4] = "operator[]";
    *(_WORD *)&v76[12] = 1024;
    *(_DWORD *)&v76[14] = 789;
    *(_WORD *)&v76[18] = 2048;
    *(_QWORD *)&v76[20] = a2;
    *(_WORD *)&v76[28] = 2048;
    *(_QWORD *)&v76[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_39:
    v62.i64[0] = 0;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v76 = 136315906;
    *(_QWORD *)&v76[4] = "operator[]";
    *(_WORD *)&v76[12] = 1024;
    *(_DWORD *)&v76[14] = 789;
    *(_WORD *)&v76[18] = 2048;
    *(_QWORD *)&v76[20] = a2;
    *(_WORD *)&v76[28] = 2048;
    *(_QWORD *)&v76[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4 <= a2)
    goto LABEL_39;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * a2);
  v7 = *(_QWORD *)(a1 + 64) + 272 * a2;
  *(_DWORD *)(*(_QWORD *)(v6 + 88) + 16) = *(_DWORD *)(v7 + 176);
  re::ecs2::TransformComponent::worldSRT(*(re::ecs2::TransformComponent ***)(a1 + 16), (const re::ecs2::Entity *)1, (uint64_t)&v62);
  v8 = 0;
  v9 = v63;
  v10 = v64;
  v11 = v10 + v10;
  v12 = v65;
  v13 = v12 + v12;
  v14 = v9 * (float)(v9 + v9);
  v15 = v10 * (float)(v10 + v10);
  v16 = v12 * (float)(v12 + v12);
  v17 = (float)(v9 + v9) * v64;
  v18 = (float)(v9 + v9) * v65;
  v19 = v11 * v65;
  v20 = v11 * v66;
  v21.i32[3] = 0;
  v21.f32[0] = 1.0 - (float)(v15 + v16);
  v21.f32[1] = v17 + (float)(v13 * v66);
  v21.f32[2] = v18 - (float)(v11 * v66);
  v22 = (float)(v9 + v9) * v66;
  v23 = v17 - (float)(v13 * v66);
  *(float *)&v24 = (float)(v11 * v65) + v22;
  v25.f32[0] = v23;
  v25.f32[1] = 1.0 - (float)(v14 + v16);
  v25.i64[1] = v24;
  v26 = v19 - v22;
  v27.i32[3] = 0;
  v27.f32[0] = v18 + v20;
  v27.f32[1] = v26;
  v27.f32[2] = 1.0 - (float)(v14 + v15);
  HIDWORD(v28) = 0;
  v29 = vmulq_n_f32(v21, *(float *)v62.i32);
  v30 = v67;
  v30.i32[3] = 1.0;
  v31 = *(float *)(v7 + 16);
  v32 = *(float *)(v7 + 20);
  v33 = v31 + v31;
  v34 = v32 + v32;
  v35 = *(float *)(v7 + 24);
  v36 = *(float *)(v7 + 28);
  v37 = v35 + v35;
  v38 = v31 * (float)(v31 + v31);
  v21.f32[0] = v32 * (float)(v32 + v32);
  v39 = v35 * (float)(v35 + v35);
  v40 = v33 * v32;
  v41 = v33 * v35;
  v42 = v34 * v35;
  v43 = v33 * v36;
  v44 = v34 * v36;
  v45 = v37 * v36;
  HIDWORD(v46) = 0;
  *(float *)&v46 = 1.0 - (float)(v21.f32[0] + v39);
  *((float *)&v46 + 1) = v40 + v45;
  *((float *)&v46 + 2) = v41 - v44;
  HIDWORD(v47) = 0;
  *(_QWORD *)&v47 = __PAIR64__(1.0 - (float)(v38 + v39), v40 - v45);
  *((float *)&v47 + 2) = v42 + v43;
  *(float *)&v28 = v41 + v44;
  *((float *)&v28 + 1) = v42 - v43;
  *((float *)&v28 + 2) = 1.0 - (float)(v38 + v21.f32[0]);
  v48 = *(_OWORD *)v7;
  HIDWORD(v48) = 1.0;
  v49 = vmulq_n_f32(v25, *(float *)vshrq_n_u64(v62, 0x20uLL).i32);
  *(_OWORD *)v76 = v46;
  *(_OWORD *)&v76[16] = v47;
  v50 = vmulq_laneq_f32(v27, (float32x4_t)v62, 2);
  *(_OWORD *)&v76[32] = v28;
  v77 = v48;
  do
  {
    *(__int128 *)((char *)&v71 + v8) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)&v76[v8])), v49, *(float32x2_t *)&v76[v8], 1), v50, *(float32x4_t *)&v76[v8], 2), v30, *(float32x4_t *)&v76[v8], 3);
    v8 += 16;
  }
  while (v8 != 64);
  *(_OWORD *)v76 = v71;
  *(_OWORD *)&v76[16] = v72;
  *(_OWORD *)&v76[32] = v73;
  v77 = v74;
  re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(a3, (uint64_t)v76, &v71);
  v69 = xmmword_2260E5D70;
  v70 = 0u;
  v68 = 0u;
  result = re::decomposeScaleRotationTranslation<float>((uint64_t)&v71, &v70, &v69, &v68);
  v52 = v69;
  v53 = *((_QWORD *)&v68 + 1);
  *(_QWORD *)v6 = v68;
  *(_QWORD *)(v6 + 8) = v53;
  *(_OWORD *)(v6 + 16) = v52;
  *(_DWORD *)(v6 + 32) = *(_DWORD *)(v7 + 32);
  *(_DWORD *)(v6 + 36) = *(_DWORD *)(v7 + 36);
  *(_BYTE *)(v6 + 40) = *(_BYTE *)(v7 + 40);
  if (*(_BYTE *)(v6 + 44) || *(_BYTE *)(v7 + 44))
  {
    if (!*(_BYTE *)(v6 + 44) || *(_BYTE *)(v7 + 44))
    {
      if (!*(_BYTE *)(v6 + 44) && *(_BYTE *)(v7 + 44))
        *(_BYTE *)(v6 + 44) = 1;
      v54 = *(_QWORD *)(v7 + 48);
      *(_DWORD *)(v6 + 56) = *(_DWORD *)(v7 + 56);
      *(_QWORD *)(v6 + 48) = v54;
    }
    else
    {
      *(_BYTE *)(v6 + 44) = 0;
    }
    if (*(_BYTE *)(v7 + 44))
    {
      v55 = *(float *)(v6 + 48);
      v56 = *(float *)(v6 + 52);
      v57 = 0;
      if (v55 < 0.0)
        v55 = 0.0;
      if (*(float *)(v6 + 56) >= 0.0)
        v57 = *(_DWORD *)(v6 + 56);
      if (v56 > v55)
        v56 = v55;
      *(float *)(v6 + 48) = v55;
      *(float *)(v6 + 52) = v56;
      *(_DWORD *)(v6 + 56) = v57;
    }
  }
  if (*(_BYTE *)(v6 + 64) || *(_BYTE *)(v7 + 64))
  {
    if (!*(_BYTE *)(v6 + 64) || *(_BYTE *)(v7 + 64))
    {
      v58 = (_QWORD *)(v6 + 72);
      if (*(_BYTE *)(v6 + 64) || !*(_BYTE *)(v7 + 64))
      {
        v59 = *(_QWORD *)(v7 + 72);
        *(_DWORD *)(v6 + 80) = *(_DWORD *)(v7 + 80);
        *v58 = v59;
      }
      else
      {
        *(_BYTE *)(v6 + 64) = 1;
        *(_OWORD *)v58 = *(_OWORD *)(v7 + 72);
      }
    }
    else
    {
      *(_BYTE *)(v6 + 64) = 0;
    }
    if (*(_BYTE *)(v7 + 64))
    {
      v60 = *(double *)(v6 + 72);
      if (v60 < 0.0)
        v60 = 0.0;
      *(double *)(v6 + 72) = v60;
      v61 = *(float *)(v6 + 80);
      if (v61 < 0.0)
        v61 = 0.0;
      *(float *)(v6 + 80) = v61;
    }
  }
  return result;
}

BOOL re::ecs2::ForceEffectComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::ecs2::PhysicsSimulationData *v19;
  uint64_t v20;
  uint64_t v21;
  char *WeakRetained;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t j;
  uint64_t i;
  unint64_t v28;
  unint64_t v29;
  _BOOL8 v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37[2];
  _BYTE v38[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v38, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v37[0] = v12,
        (v37[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v34, a5, 0);
    v15 = v34;
    v14 = v35;
    v34 = a4;
    v35 = v15;
    v36 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v35);
        v17 = *(_QWORD *)v16;
        v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
        v19 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v37, v18);
        if (v19
          && (v20 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v19), (*(_BYTE *)(v18 + 288) & 1) != 0)
          && (v21 = v20) != 0)
        {
          WeakRetained = (char *)objc_loadWeakRetained((id *)(v17 + 72));
          if (WeakRetained)
          {
            v23 = WeakRetained - 8;

          }
          else
          {
            v23 = 0;
          }
          if (v23 != (char *)v21)
          {
            for (i = *(_QWORD *)(v17 + 144); i; --i)
              re::ecs2::ForceEffectComponent::removeDefinitionLast(v17, *(_QWORD *)(v17 + 80));
          }
          v28 = v34;
          v29 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v35);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v28, v29, *(_QWORD *)(a3 + 40));
        }
        else
        {
          v24 = v34;
          v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v35);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v24, v25, *(_QWORD *)(a3 + 32));
          for (j = *(_QWORD *)(v17 + 144); j; --j)
            re::ecs2::ForceEffectComponent::removeDefinitionLast(v17, *(_QWORD *)(v17 + 80));
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v35);
      }
      while (v35 != a5 || (unsigned __int16)v36 != 0xFFFF || WORD1(v36) != 0xFFFF);
    }
    v32 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v32 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v38);
  return v32;
}

BOOL re::ecs2::ForceEffectComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::ecs2::PhysicsSimulationData *v15;
  uint64_t v16;
  void *v17;
  re *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  StringID *v37;
  unint64_t v38;
  uint64_t v39;
  char *WeakRetained;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t i;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  _BOOL8 v67;
  uint64_t v69;
  uint64_t v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74[2];
  _BYTE v75[16];
  uint64_t v76;
  _BYTE v77[12];
  __int16 v78;
  int v79;
  __int16 v80;
  _BYTE v81[18];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v75, 3047, a1);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v8 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v7);
  if (!v8
    || (v9 = v8,
        v10 = *(_QWORD *)(a3 + 8),
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8),
        v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, v10),
        v74[0] = v11,
        (v74[1] = v12) == 0))
  {
    v67 = 0;
    goto LABEL_103;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v82, a5, 0);
  v72 = a4;
  v73 = v82;
  if ((_QWORD)v82 != a5 || WORD4(v82) != 0xFFFFLL || (DWORD2(v82) & 0xFFFF0000) != 0xFFFF0000)
  {
    v69 = a3;
    while (1)
    {
      v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v73);
      v14 = *(_QWORD *)v13;
      v15 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v74, *(_QWORD *)(*(_QWORD *)v13 + 16));
      v16 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v15);
      if (v16)
        v17 = (void *)(v16 + 8);
      else
        v17 = 0;
      v18 = (re *)objc_storeWeak((id *)(v14 + 72), v17);
      *(_QWORD *)(v14 + 80) = v15;
      v19 = *(char **)(v14 + 144);
      v20 = *(_QWORD *)(v14 + 48);
      if ((unint64_t)v19 >= v20)
        v21 = *(char **)(v14 + 48);
      else
        v21 = *(char **)(v14 + 144);
      if (v21)
      {
        v22 = 0;
        v23 = 0;
        v24 = 1;
        v25 = 184;
        while (v19 != v23)
        {
          if ((char *)v20 == v23)
            goto LABEL_105;
          v18 = (re *)re::StringID::operator==((_QWORD *)(*(_QWORD *)(v14 + 160) + v22), (_QWORD *)(*(_QWORD *)(v14 + 64) + v25));
          if (!(_DWORD)v18)
            goto LABEL_21;
          v24 = ++v23 < v21;
          v25 += 272;
          v22 += 16;
          if (v21 == v23)
            goto LABEL_19;
        }
        v76 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v77 = 136315906;
        *(_QWORD *)&v77[4] = "operator[]";
        v78 = 1024;
        v79 = 789;
        v80 = 2048;
        *(_QWORD *)v81 = v19;
        *(_WORD *)&v81[8] = 2048;
        *(_QWORD *)&v81[10] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_105:
        v76 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v77 = 136315906;
        *(_QWORD *)&v77[4] = "operator[]";
        v78 = 1024;
        v79 = 789;
        v80 = 2048;
        *(_QWORD *)v81 = v20;
        *(_WORD *)&v81[8] = 2048;
        *(_QWORD *)&v81[10] = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_106:
        v76 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v77 = 136315906;
        *(_QWORD *)&v77[4] = "operator[]";
        v78 = 1024;
        v79 = 789;
        v80 = 2048;
        *(_QWORD *)v81 = v20;
        *(_WORD *)&v81[8] = 2048;
        *(_QWORD *)&v81[10] = v23;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_107:
        v76 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v77 = 136315906;
        *(_QWORD *)&v77[4] = "operator[]";
        v78 = 1024;
        v79 = 789;
        v80 = 2048;
        *(_QWORD *)v81 = &v23[v20];
        *(_WORD *)&v81[8] = 2048;
        *(_QWORD *)&v81[10] = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_108:
        v76 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v77 = 136315906;
        *(_QWORD *)&v77[4] = "operator[]";
        v78 = 1024;
        v79 = 789;
        v80 = 2048;
        *(_QWORD *)v81 = v20;
        *(_WORD *)&v81[8] = 2048;
        *(_QWORD *)&v81[10] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_109:
        v76 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v77 = 136315906;
        *(_QWORD *)&v77[4] = "operator[]";
        v78 = 1024;
        v79 = 789;
        v80 = 2048;
        *(_QWORD *)v81 = v20;
        *(_WORD *)&v81[8] = 2048;
        *(_QWORD *)&v81[10] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_110:
        v76 = 0;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v77 = 136315906;
        *(_QWORD *)&v77[4] = "operator[]";
        v78 = 1024;
        v79 = 789;
        v80 = 2048;
        *(_QWORD *)v81 = v20;
        *(_WORD *)&v81[8] = 2048;
        *(_QWORD *)&v81[10] = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_19:
      if (v19 == (char *)v20)
        goto LABEL_65;
      v24 = 0;
LABEL_21:
      v23 = &v19[-v20];
      if ((unint64_t)v19 <= v20)
        break;
      do
      {
        re::ecs2::ForceEffectComponent::removeDefinitionLast(v14, (uint64_t)v15);
        --v23;
      }
      while (v23);
LABEL_55:
      v19 = *(char **)(v14 + 144);
      if (!v24)
      {
LABEL_65:
        if (v19)
        {
          v52 = 0;
          do
            re::ecs2::ForceEffectComponent::updateForceEffectDefinitionAt(v14, v52++, (float32x4_t *)v15);
          while (v52 < *(_QWORD *)(v14 + 144));
        }
        goto LABEL_68;
      }
      if (v19)
      {
        v46 = 0;
        v20 = 0;
        v47 = 184;
        while (1)
        {
          v23 = *(char **)(v14 + 48);
          if ((unint64_t)v23 <= v20)
            goto LABEL_106;
          v48 = (_QWORD *)(*(_QWORD *)(v14 + 64) + v47);
          if (!re::StringID::operator==((_QWORD *)(*(_QWORD *)(v14 + 160) + v46), v48))
          {
            v19 = *(char **)(v14 + 104);
            if ((unint64_t)v19 <= v20)
              goto LABEL_108;
            v50 = *((_QWORD *)v15 + 5);
            *(_QWORD *)&v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 120) + 8 * v20) + 88);
            v49 = v82;
            re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(v50 + 8, (uint64_t *)&v82);
            v51 = *((_QWORD *)v15 + 5);
            *(_QWORD *)&v82 = *(_QWORD *)(v14 + 16);
            *((_QWORD *)&v82 + 1) = *v48 >> 1;
            *(_QWORD *)&v83 = v20;
            *(_QWORD *)v77 = v49;
            re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::addNew(v51 + 8, (uint64_t *)v77, &v82);
            v19 = *(char **)(v14 + 48);
            if ((unint64_t)v19 <= v20)
              goto LABEL_109;
            v19 = *(char **)(v14 + 144);
            if ((unint64_t)v19 <= v20)
              goto LABEL_110;
            re::StringID::operator=((unint64_t *)(*(_QWORD *)(v14 + 160) + v46), (uint64_t *)(*(_QWORD *)(v14 + 64) + v47));
            v19 = *(char **)(v14 + 144);
          }
          ++v20;
          v46 += 16;
          v47 += 272;
          if (v20 >= (unint64_t)v19)
            goto LABEL_65;
        }
      }
LABEL_68:
      if (!*(_BYTE *)(v14 + 25))
        goto LABEL_98;
      v53 = *(unsigned __int8 *)(v14 + 26);
      if (v53 == 2)
      {
        v60 = *(_QWORD *)(v14 + 104);
        if (v60)
        {
          v61 = *(uint64_t **)(v14 + 120);
          do
          {
            v62 = *v61;
            if (*(_QWORD *)(*v61 + 128) && *(_BYTE *)(v62 + 136))
              *(_BYTE *)(v62 + 168) = 1;
            ++v61;
            --v60;
          }
          while (v60);
        }
LABEL_89:
        LOBYTE(v63) = 1;
LABEL_96:
        *(_BYTE *)(v14 + 168) = v63;
        goto LABEL_97;
      }
      if (v53 == 1)
      {
        v63 = *(_QWORD *)(v14 + 104);
        if (v63)
        {
          v64 = *(uint64_t **)(v14 + 120);
          do
          {
            v65 = *v64;
            if (*(_QWORD *)(*v64 + 128) && *(_BYTE *)(v65 + 136))
              *(_BYTE *)(v65 + 168) = 0;
            ++v64;
            --v63;
          }
          while (v63);
        }
        goto LABEL_96;
      }
      if (!*(_BYTE *)(v14 + 26))
      {
        v54 = *(_QWORD *)(v14 + 104);
        if (v54)
        {
          for (i = 0; i < v54; ++i)
          {
            v56 = *(_QWORD *)(*(_QWORD *)(v14 + 120) + 8 * i);
            v57 = *(_QWORD *)(v56 + 128);
            if (v57)
            {
              v58 = *(_QWORD *)(v57 + 24);
              if (!*(_BYTE *)(v56 + 136))
                *(_BYTE *)(v56 + 136) = 1;
              *(_QWORD *)(v56 + 144) = v58;
              if (!*(_BYTE *)(v56 + 152))
                *(_BYTE *)(v56 + 152) = 1;
              *(_QWORD *)(v56 + 160) = v58;
              *(_BYTE *)(v56 + 168) = 1;
              v54 = *(_QWORD *)(v14 + 104);
            }
          }
          v59 = *(unsigned __int8 *)(v14 + 25);
          *(_BYTE *)(v14 + 168) = 1;
          if (!v59)
            goto LABEL_98;
          goto LABEL_97;
        }
        goto LABEL_89;
      }
LABEL_97:
      *(_BYTE *)(v14 + 25) = 0;
LABEL_98:
      v66 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v73);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v69 + 16), v72, v66, *(_QWORD *)(v69 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v73);
      if ((_QWORD)v73 == a5 && WORD4(v73) == 0xFFFF && WORD5(v73) == 0xFFFF)
        goto LABEL_101;
    }
    if ((unint64_t)v19 >= v20)
      goto LABEL_55;
    while (1)
    {
      v20 = *(_QWORD *)(v14 + 48);
      if (!__CFADD__(v23, v20))
        goto LABEL_107;
      v71 = *(_QWORD *)(v14 + 64);
      v26 = re::globalAllocators(v18);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v26[2] + 32))(v26[2], 176, 16);
      *(_OWORD *)(v27 + 112) = 0u;
      *(_OWORD *)(v27 + 128) = 0u;
      *(_OWORD *)v27 = 0u;
      *(_OWORD *)(v27 + 32) = 0u;
      *(_OWORD *)(v27 + 48) = 0u;
      *(_OWORD *)(v27 + 64) = 0u;
      *(_OWORD *)(v27 + 80) = 0u;
      *(_OWORD *)(v27 + 144) = 0u;
      *(_OWORD *)(v27 + 160) = 0u;
      *(_OWORD *)(v27 + 96) = 0u;
      *(_QWORD *)(v27 + 16) = 0;
      *(_QWORD *)(v27 + 24) = 0x3F80000000000000;
      *(_QWORD *)(v27 + 32) = -3229614080;
      *(_QWORD *)(v27 + 120) = 0;
      v28 = (_QWORD *)(v27 + 120);
      *(_BYTE *)(v27 + 136) = 0;
      *(_QWORD *)(v27 + 128) = 0;
      v76 = v27;
      v29 = re::globalAllocators((re *)v27);
      v30 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29[2] + 32))(v29[2], 24, 8);
      v30[1] = 0;
      v30[2] = 0;
      *v30 = &off_24ED7EB10;
      *(_QWORD *)v77 = &off_24ED48990;
      *(_QWORD *)&v81[4] = v77;
      *(_QWORD *)&v84 = (char *)&v82 + 8;
      *(_QWORD *)&v82 = 0;
      *((_QWORD *)&v82 + 1) = &off_24ED48990;
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v27 + 88), (uint64_t)v30);
      v31 = *(_QWORD **)(v27 + 120);
      *(_QWORD *)(v27 + 120) = 0;
      if (v31 == (_QWORD *)(v27 + 96))
      {
        v31 = (_QWORD *)(v27 + 96);
        v32 = 4;
      }
      else
      {
        if (!v31)
          goto LABEL_32;
        v32 = 5;
      }
      (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_32:
      if ((_QWORD)v84)
      {
        if ((__int128 *)v84 == (__int128 *)((char *)&v82 + 8))
        {
          *v28 = v27 + 96;
          (*(void (**)(void))(*((_QWORD *)&v82 + 1) + 24))();
        }
        else
        {
          *v28 = v84;
          *(_QWORD *)&v84 = 0;
        }
      }
      else
      {
        *v28 = 0;
      }
      std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v82);
      v33 = *(_QWORD **)&v81[4];
      if (*(_BYTE **)&v81[4] == v77)
      {
        v33 = v77;
        v34 = 4;
        goto LABEL_41;
      }
      if (*(_QWORD *)&v81[4])
      {
        v34 = 5;
LABEL_41:
        (*(void (**)(void))(*v33 + 8 * v34))();
      }
      v35 = v71 + 272 * (_QWORD)&v23[v20];
      v30[1] = v30;
      *((_DWORD *)v30 + 4) = *(_DWORD *)(v35 + 176);
      v36 = *((_QWORD *)v15 + 5);
      *(_QWORD *)&v82 = *(_QWORD *)(v14 + 16);
      v38 = *(_QWORD *)(v35 + 184);
      v37 = (StringID *)(v35 + 184);
      v39 = *(_QWORD *)(v14 + 104);
      *((_QWORD *)&v82 + 1) = v38 >> 1;
      *(_QWORD *)&v83 = v39;
      *(_QWORD *)v77 = v30;
      re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::addNew(v36 + 8, (uint64_t *)v77, &v82);
      WeakRetained = (char *)objc_loadWeakRetained((id *)(v14 + 72));
      v41 = WeakRetained;
      if (WeakRetained)
        v19 = WeakRetained - 8;
      else
        v19 = 0;
      *(_QWORD *)&v82 = v27;
      re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)v19 + 43, &v82);
      *(_QWORD *)(v82 + 128) = *((_QWORD *)v19 + 42);
      if (v41)

      re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(v14 + 88), &v76);
      v18 = re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)(v14 + 128), v37);
      v42 = v76;
      v43 = *(_QWORD *)(v76 + 128);
      if (v43)
      {
        v44 = *(_QWORD *)(v43 + 24);
        if (!*(_BYTE *)(v76 + 136))
          *(_BYTE *)(v76 + 136) = 1;
        *(_QWORD *)(v42 + 144) = v44;
        if (!*(_BYTE *)(v42 + 152))
          *(_BYTE *)(v42 + 152) = 1;
        *(_QWORD *)(v42 + 160) = v44;
        *(_BYTE *)(v42 + 168) = *(_BYTE *)(v14 + 168);
      }
      if (__CFADD__(v23++, 1))
        goto LABEL_55;
    }
  }
LABEL_101:
  v67 = *(_DWORD *)(a5 + 40) != 0;
LABEL_103:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v75);
  return v67;
}

BOOL re::ecs2::ForceEffectComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::ecs2::TransformComponent **v19;
  re::ecs2::PhysicsSimulationData *v20;
  float32x4_t *v21;
  re *v22;
  float32x4_t v23;
  int8x16_t v24;
  float v25;
  NSObject *v26;
  uint64_t i;
  unint64_t v28;
  unint64_t v29;
  _BOOL8 v32;
  _OWORD v34[4];
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  _BYTE v39[16];
  __int128 v40;
  float32x4_t v41;
  int32x4_t buf;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 3047, a1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (v11
    && (v12 = v11,
        v13 = *(_QWORD *)(a3 + 8),
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11),
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v13),
        v38[0] = v14,
        (v38[1] = v15) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&buf, a5, 0);
    v35 = a4;
    v36 = buf.i64[0];
    v37 = buf.i64[1];
    if (buf.i64[0] != a5 || buf.u16[4] != 0xFFFFLL || (buf.i32[2] & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v17 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v36);
        v18 = *(_QWORD *)v17;
        v19 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)v17 + 16);
        v20 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v38, (uint64_t)v19);
        v21 = (float32x4_t *)v20;
        if (!a6 || re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v20) == a6)
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v19, (const re::ecs2::Entity *)1, &buf);
          re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v21, (uint64_t)&buf, v34);
          buf = 0u;
          v40 = 0u;
          v41 = (float32x4_t)xmmword_2260E5D70;
          v22 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)v34, &buf, &v41, &v40);
          v23.i64[0] = v40;
          v23.i64[1] = __PAIR64__(buf.u32[0], DWORD2(v40));
          if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v23), (int8x16_t)vcgezq_f32(v23))))) & 1) == 0&& ((v24 = (int8x16_t)vmulq_f32(v41, v41), v25 = vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))), v25 == 1.0)|| fabsf(v25 + -1.0) <= 0.00001))
          {
            if (*(_QWORD *)(v18 + 144))
            {
              v16 = 0;
              do
                re::ecs2::ForceEffectComponent::updateForceEffectDefinitionAt(v18, v16++, v21);
              while (v16 < *(_QWORD *)(v18 + 144));
            }
          }
          else
          {
            v26 = *re::ecsComponentsLogObjects(v22);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              buf.i16[0] = 0;
              _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "NaN or non-unit rotation detected in transform (PhysicsSystem_Collider). Skipping.", (uint8_t *)&buf, 2u);
            }
            for (i = *(_QWORD *)(v18 + 144); i; --i)
              re::ecs2::ForceEffectComponent::removeDefinitionLast(v18, *(_QWORD *)(v18 + 80));
            v28 = v35;
            v29 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v36);
            re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v28, v29, *(_QWORD *)(a3 + 32));
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v36);
      }
      while (v36 != a5 || (unsigned __int16)v37 != 0xFFFF || WORD1(v37) != 0xFFFF);
    }
    v32 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v32 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);
  return v32;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ForceEffectComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ForceEffectComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

_QWORD *re::IntrospectionOptional<REPhysicsForceEffectPlaybackRequest>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<REPhysicsForceEffectPlaybackRequest>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<REPhysicsForceEffectPlaybackRequest>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<REPhysicsForceEffectPlaybackRequest>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<REPhysicsForceEffectPlaybackRequest>::setHasValue(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3)
  {
    if (!*a2)
      *a2 = 1;
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<REPhysicsForceEffectPlaybackRequest>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<REPhysicsForceEffectPlaybackRequest>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<REPhysicsForceEffectPlaybackRequest>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(_BYTE *result, char *a2)
{
  char v2;

  if (a2)
  {
    v2 = *a2;
    if (!*result)
      *result = 1;
    result[1] = v2;
  }
  else if (*result)
  {
    *result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::ForceEffectDesc>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::ForceEffectDesc>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

uint64_t *re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::resize(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::ForceEffectDesc>::resize((uint64_t *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  re::IntrospectionBase *v16;
  _BYTE v18[32];
  _OWORD v19[5];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_QWORD *)v18 = 0;
  *(_QWORD *)&v18[8] = 0x3F80000000000000;
  *(_OWORD *)&v18[16] = 0xFFFFFFFF3F800000;
  BYTE8(v20) = 0;
  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = *(_QWORD *)(a4 + 32) + 272 * v8;
  *(_OWORD *)(v13 + 25) = *(_OWORD *)&v18[9];
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)v18;
  *(_BYTE *)(v13 + 44) = 0;
  *(_BYTE *)(v13 + 64) = 0;
  *((_QWORD *)&v19[0] + 1) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_BYTE *)(v13 + 152) = 0;
  *(_BYTE *)(v13 + 168) = 0;
  *(_DWORD *)(v13 + 176) = 0;
  *(_QWORD *)(v13 + 120) = 0;
  *(_QWORD *)(v13 + 128) = 0;
  *(_BYTE *)(v13 + 136) = 0;
  *(_QWORD *)(v13 + 184) = 0;
  *(_QWORD *)(v13 + 192) = &str_110;
  *((_QWORD *)&v21 + 1) = 0;
  *(_QWORD *)&v22 = &str_110;
  *(_QWORD *)(v13 + 200) = 0;
  *(_QWORD *)(v13 + 208) = 0;
  *(_DWORD *)(v13 + 224) = 0;
  *(_QWORD *)(v13 + 216) = 0;
  *((_QWORD *)&v22 + 1) = 0;
  *(_QWORD *)&v23 = 0;
  v14 = *(_QWORD *)(v13 + 216);
  *(_QWORD *)(v13 + 216) = 0;
  *((_QWORD *)&v23 + 1) = v14;
  *(_QWORD *)(v13 + 232) = 0;
  *((_QWORD *)&v24 + 1) = 0;
  LODWORD(v24) = 1;
  ++*(_DWORD *)(v13 + 224);
  v15 = v25;
  *(_QWORD *)(v13 + 256) = v26;
  *(_OWORD *)(v13 + 240) = v15;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::StringID::destroyString((re::StringID *)((char *)&v21 + 8));
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)v19 + 1);
  v16 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 272 * *(_QWORD *)(a4 + 16) - 272);
  re::introspectionInitElement(a2, a3, a1[6], v16);
  return v16;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ForceEffectDesc>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 272 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 272 * a3;
}

uint64_t re::DynamicArray<re::ecs2::ForceEffectDesc>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 272 * v4;
        v6 = v3 + 184;
        do
        {
          v7 = *(_QWORD *)(v6 + 16);
          if (v7)
          {
            if (*(_QWORD *)(v6 + 48))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *(_QWORD *)(v6 + 48) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 16) = 0;
            ++*(_DWORD *)(v6 + 40);
          }
          re::StringID::destroyString((re::StringID *)v6);
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v6 - 96));
          v6 += 272;
          v5 -= 272;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x110uLL))
        {
          v2 = 272 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 272 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 272, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 272 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::ecs2::ForceEffectDesc>(v8, v11);
          v8 += 17;
          v11 += 272;
          v10 -= 272;
        }
        while (v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *re::ObjectHelper::move<re::ecs2::ForceEffectDesc>(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)(a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = *((unsigned __int8 *)a1 + 44);
  *(_BYTE *)(a2 + 44) = v6;
  if (v6)
  {
    v7 = *((_QWORD *)a1 + 6);
    *(_DWORD *)(a2 + 56) = *((_DWORD *)a1 + 14);
    *(_QWORD *)(a2 + 48) = v7;
  }
  v8 = *((unsigned __int8 *)a1 + 64);
  *(_BYTE *)(a2 + 64) = v8;
  if (v8)
    *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)a1 + 72);
  std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100]((_QWORD *)(a2 + 88), (uint64_t *)a1 + 11);
  *(_QWORD *)(a2 + 128) = *((_QWORD *)a1 + 16);
  v9 = *((unsigned __int8 *)a1 + 136);
  *(_BYTE *)(a2 + 136) = v9;
  if (v9)
    *(_QWORD *)(a2 + 144) = *((_QWORD *)a1 + 18);
  v10 = *((unsigned __int8 *)a1 + 152);
  *(_BYTE *)(a2 + 152) = v10;
  if (v10)
    *(_QWORD *)(a2 + 160) = *((_QWORD *)a1 + 20);
  *(_BYTE *)(a2 + 168) = *((_BYTE *)a1 + 168);
  *(_DWORD *)(a2 + 176) = *((_DWORD *)a1 + 44);
  v11 = *((_QWORD *)a1 + 23);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL | *((_QWORD *)a1 + 23) & 1;
  *(_QWORD *)(a2 + 184) = *((_QWORD *)a1 + 23) & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
  *(_QWORD *)(a2 + 192) = *((_QWORD *)a1 + 24);
  *((_QWORD *)a1 + 24) = &str_110;
  *((_QWORD *)a1 + 23) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_DWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  v12 = *((_QWORD *)a1 + 26);
  *(_QWORD *)(a2 + 200) = *((_QWORD *)a1 + 25);
  *(_QWORD *)(a2 + 208) = v12;
  *((_QWORD *)a1 + 25) = 0;
  *((_QWORD *)a1 + 26) = 0;
  v13 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = *((_QWORD *)a1 + 27);
  *((_QWORD *)a1 + 27) = v13;
  v14 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = *((_QWORD *)a1 + 29);
  *((_QWORD *)a1 + 29) = v14;
  ++*((_DWORD *)a1 + 56);
  ++*(_DWORD *)(a2 + 224);
  v15 = a1[15];
  *(_QWORD *)(a2 + 256) = *((_QWORD *)a1 + 32);
  *(_OWORD *)(a2 + 240) = v15;
  v16 = *((_QWORD *)a1 + 25);
  if (v16)
  {
    if (*((_QWORD *)a1 + 29))
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    *((_QWORD *)a1 + 29) = 0;
    *((_QWORD *)a1 + 26) = 0;
    *((_QWORD *)a1 + 27) = 0;
    *((_QWORD *)a1 + 25) = 0;
    ++*((_DWORD *)a1 + 56);
  }
  re::StringID::destroyString((re::StringID *)((char *)a1 + 184));
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)a1 + 11);
}

uint64_t *re::DynamicArray<re::ecs2::ForceEffectDesc>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 272 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = (uint64_t *)(v10 + v8);
      v12 = *(_QWORD *)(v10 + v8 + 200);
      if (v12)
      {
        if (v11[29])
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        v11[29] = 0;
        *(_QWORD *)(v10 + v8 + 208) = 0;
        *(_QWORD *)(v10 + v8 + 216) = 0;
        *(_QWORD *)(v10 + v8 + 200) = 0;
        ++*(_DWORD *)(v10 + v8 + 224);
      }
      re::StringID::destroyString((re::StringID *)(v11 + 23));
      result = std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v11 + 11);
      ++v9;
      v8 += 272;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 272 * v4 + 232;
      do
      {
        v7 = (_OWORD *)(v3[4] + v6);
        *(_OWORD *)((char *)v7 - 200) = 0uLL;
        *(_OWORD *)((char *)v7 - 120) = 0uLL;
        *(_OWORD *)((char *)v7 - 104) = 0uLL;
        *(_OWORD *)((char *)v7 - 72) = 0uLL;
        *(_OWORD *)((char *)v7 - 88) = 0uLL;
        *(_OWORD *)((char *)v7 - 136) = 0uLL;
        *(_OWORD *)((char *)v7 - 152) = 0uLL;
        *(_OWORD *)((char *)v7 - 168) = 0uLL;
        *(_OWORD *)((char *)v7 - 184) = 0uLL;
        *(_OWORD *)((char *)v7 - 232) = 0uLL;
        *((_QWORD *)v7 - 27) = 0;
        *((_QWORD *)v7 - 26) = 0x3F80000000000000;
        *((_QWORD *)v7 - 25) = -3229614080;
        *((_QWORD *)v7 - 14) = 0;
        *((_QWORD *)v7 - 13) = 0;
        *((_BYTE *)v7 - 96) = 0;
        *((_DWORD *)v7 - 14) = 0;
        *((_QWORD *)v7 - 6) = 0;
        *((_QWORD *)v7 - 5) = &str_110;
        *((_QWORD *)v7 - 4) = 0;
        *((_QWORD *)v7 - 3) = 0;
        *((_DWORD *)v7 - 2) = 0;
        *((_QWORD *)v7 - 2) = 0;
        v6 += 272;
        *v7 = 0uLL;
        v7[1] = 0uLL;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 272 * v8;
      v10 = *(_QWORD *)(a1 + 32) + 184;
      do
      {
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          if (*(_QWORD *)(v10 + 48))
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          *(_QWORD *)(v10 + 48) = 0;
          *(_QWORD *)(v10 + 24) = 0;
          *(_QWORD *)(v10 + 32) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          ++*(_DWORD *)(v10 + 40);
        }
        re::StringID::destroyString((re::StringID *)v10);
        std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v10 - 96));
        v10 += 272;
        v9 -= 272;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::ForceEffectDesc>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::ForceEffectDesc>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = re::DynamicArray<re::ecs2::ForceEffectDesc>::resize((uint64_t *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 272 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 272;
        v15 -= 272;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 272 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 272 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ForceEffectDesc>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::ForceEffectComponent>(uint64_t a1)
{
  uint64_t v2;

  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED48910;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  objc_initWeak((id *)(v2 + 72), 0);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 1;
  return a1;
}

void re::ecs2::ForceEffectComponent::~ForceEffectComponent(re::ecs2::ForceEffectComponent *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED48910;
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 11) = 0;
    ++*((_DWORD *)this + 28);
  }
  objc_destroyWeak((id *)this + 9);
  *((_QWORD *)this + 9) = 0;
  re::DynamicArray<re::ecs2::ForceEffectDesc>::deinit((uint64_t)this + 32);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED48910;
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 128);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 11) = 0;
    ++*((_DWORD *)this + 28);
  }
  objc_destroyWeak((id *)this + 9);
  *((_QWORD *)this + 9) = 0;
  re::DynamicArray<re::ecs2::ForceEffectDesc>::deinit((uint64_t)this + 32);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void std::__function::__func<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0,std::allocator<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0>,void ()(re::ForceEffectFunctionBase *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0,std::allocator<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0>,void ()(re::ForceEffectFunctionBase *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED48990;
  return result;
}

void std::__function::__func<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0,std::allocator<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0>,void ()(re::ForceEffectFunctionBase *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED48990;
}

re *std::__function::__func<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0,std::allocator<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0>,void ()(re::ForceEffectFunctionBase *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0,std::allocator<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0>,void ()(re::ForceEffectFunctionBase *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0,std::allocator<re::ecs2::ForceEffectComponent::createAndAppendDefinition(re::ecs2::ForceEffectDesc &,re::ecs2::PhysicsSimulationData &)::$_0>,void ()(re::ForceEffectFunctionBase *)>::target_type()
{
}

uint64_t *re::ecs2::allocInfo_AssetStateComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_159);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_159))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107B58, 0);
    *(uint64_t *)((char *)&qword_254107B68 + 6) = 0;
    qword_254107B68 = 0;
    qword_254107B78 = 0;
    qword_254107B80 = 0xFFFFFFFFLL;
    qword_254107B58 = (uint64_t)&off_24ED7DAA8;
    qword_254107B88 = (uint64_t)"AssetStateComponent";
    dword_254107B90 = 0;
    xmmword_254107B98 = 0u;
    unk_254107BA8 = 0u;
    xmmword_254107BB8 = 0u;
    qword_254107BC8 = 0;
    __cxa_guard_release(&_MergedGlobals_159);
  }
  return &qword_254107B58;
}

void re::ecs2::initInfo_AssetStateComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;

  v22[0] = 0xB31548095A8B4CB8;
  v22[1] = "AssetStateComponent";
  re::StringID::destroyString((re::StringID *)v22);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_254107B30);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107B30);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107B38 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint64_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "assetId";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254107B40 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint64_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "peerId";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254107B48 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint8_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "loadState";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x3000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254107B50 = v20;
      __cxa_guard_release(&qword_254107B30);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254107B38;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AssetStateComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AssetStateComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AssetStateComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AssetStateComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v23;
}

void re::internal::defaultConstruct<re::ecs2::AssetStateComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED2BCB0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AssetStateComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::AssetStateComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED2BCB0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AssetStateComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AssetStateComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetStateComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AssetStateComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AssetStateComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AssetStateComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VisualProxyComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_160);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_160))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107C08, 0);
    *(uint64_t *)((char *)&qword_254107C18 + 6) = 0;
    qword_254107C18 = 0;
    qword_254107C28 = 0;
    qword_254107C30 = 0xFFFFFFFFLL;
    qword_254107C08 = (uint64_t)&off_24ED7DAA8;
    qword_254107C38 = (uint64_t)"VisualProxyComponent";
    dword_254107C40 = 0;
    unk_254107C48 = 0u;
    unk_254107C58 = 0u;
    unk_254107C68 = 0u;
    qword_254107C78 = 0;
    __cxa_guard_release(&_MergedGlobals_160);
  }
  return &qword_254107C08;
}

void re::ecs2::initInfo_VisualProxyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xECFE882C7DB64B5ELL;
  v10[1] = "VisualProxyComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254107BE0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107BE0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107BD8 = v8;
      __cxa_guard_release(&qword_254107BE0);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254107BD8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VisualProxyComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::VisualProxyComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED48CB8;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_WORD *)(v3 + 48) = 256;
  *(_BYTE *)(v3 + 56) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a3 + 56))
  {
    objc_destroyWeak((id *)(a3 + 64));
    *(_QWORD *)(a3 + 64) = 0;
  }
  re::TextureHandle::invalidate((re::TextureHandle *)(a3 + 32));
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void re::internal::defaultConstructV2<re::ecs2::VisualProxyComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED48CB8;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_WORD *)(v1 + 48) = 256;
  *(_BYTE *)(v1 + 56) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyComponent>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    objc_destroyWeak((id *)(a1 + 64));
    *(_QWORD *)(a1 + 64) = 0;
  }
  re::TextureHandle::invalidate((re::TextureHandle *)(a1 + 32));
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VisualProxyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VisualProxyFilterComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254107BE8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107BE8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107C80, 0);
    *(uint64_t *)((char *)&qword_254107C90 + 6) = 0;
    qword_254107C90 = 0;
    qword_254107CA0 = 0;
    qword_254107CA8 = 0xFFFFFFFFLL;
    qword_254107C80 = (uint64_t)&off_24ED7DAA8;
    qword_254107CB0 = (uint64_t)"VisualProxyFilterComponent";
    dword_254107CB8 = 0;
    unk_254107CC0 = 0u;
    unk_254107CD0 = 0u;
    unk_254107CE0 = 0u;
    qword_254107CF0 = 0;
    __cxa_guard_release(&qword_254107BE8);
  }
  return &qword_254107C80;
}

void re::ecs2::initInfo_VisualProxyFilterComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x762868B3B6AA272ELL;
  v10[1] = "VisualProxyFilterComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254107BF8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107BF8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107BF0 = v8;
      __cxa_guard_release(&qword_254107BF8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254107BF0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyFilterComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyFilterComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VisualProxyFilterComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyFilterComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::VisualProxyFilterComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED48D38;
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyFilterComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::VisualProxyFilterComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED48D38;
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyFilterComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VisualProxyFilterComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyFilterComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyFilterComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyFilterComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyFilterComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VisualProxySystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254107C00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107C00))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107CF8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254107D08 = 0;
    qword_254107D18 = 0;
    qword_254107D20 = 0xFFFFFFFFLL;
    qword_254107CF8 = (uint64_t)&off_24ED7DAA8;
    qword_254107D28 = (uint64_t)"VisualProxySystem";
    dword_254107D30 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254107D68 = 0;
    __cxa_guard_release(&qword_254107C00);
  }
  return &qword_254107CF8;
}

void re::ecs2::initInfo_VisualProxySystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xA52B53AD6A44ED7ALL;
  v5[1] = "VisualProxySystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VisualProxySystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxySystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxySystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VisualProxySystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VisualProxySystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VisualProxySystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxySystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::VisualProxySystem *re::internal::defaultConstruct<re::ecs2::VisualProxySystem>(uint64_t a1, uint64_t a2, re::ecs2::VisualProxySystem *a3)
{
  return re::ecs2::VisualProxySystem::VisualProxySystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxySystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 29);
  a3[24] = off_24ED48A60;
  v4 = a3[26];
  if (v4)
  {
    if (a3[27])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[28]);
      a3[27] = 0;
      a3[28] = 0;
    }
    a3[26] = 0;
  }
  v5 = a3[23];
  if (v5)
  {

    a3[23] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 20));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxySystem>(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 29);
  a1[24] = off_24ED48A60;
  v2 = a1[26];
  if (v2)
  {
    if (a1[27])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[28]);
      a1[27] = 0;
      a1[28] = 0;
    }
    a1[26] = 0;
  }
  v3 = a1[23];
  if (v3)
  {

    a1[23] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 20));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VisualProxySystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxySystem>, this);
}

os_log_t ___ZN2re4ecs220VisualProxyComponent3logEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.re", "VisualProxyComponent");
  re::ecs2::VisualProxyComponent::log(void)::log = (uint64_t)result;
  return result;
}

BOOL re::ecs2::VisualProxyComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  v8 = v21;
  v9 = v22;
  v21 = a4;
  v22 = v8;
  v23 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22);
      v15 = (unint64_t *)(a3 + 32);
      if (!*(_BYTE *)(*(_QWORD *)v14 + 48))
      {
        if (*(_BYTE *)(*(_QWORD *)v14 + 49))
          v15 = (unint64_t *)(a3 + 40);
        else
          v15 = (unint64_t *)(a3 + 32);
      }
      v16 = v21;
      v17 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v16, v17, *v15);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::VisualProxyComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v9 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(_QWORD *)(a1 + 8) + 160));
  v11 = v9;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168);
  if (v12)
  {
    v13 = atomic_load((unsigned int *)(v12 + 704));
    if ((v9 != 0) != (v13 == 1))
    {
      if (v13 == 1)
        return *(_DWORD *)(a5 + 40) != 0;
LABEL_6:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v25, a5, 0);
      v14 = v25;
      v15 = v26;
      v25 = a4;
      v26 = v14;
      v27 = v15;
      v16 = (unsigned __int16)v15;
      v17 = v15 & 0xFFFF0000;
      if (v14 != a5 || v16 != 0xFFFF || v17 != 4294901760)
      {
        if (v11)
        {
          do
          {
            v20 = v25;
            v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v26);
            re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(_QWORD *)(a3 + 48));
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
          }
          while (v26 != a5 || (unsigned __int16)v27 != 0xFFFF || WORD1(v27) != 0xFFFF);
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(*(_QWORD *)(a1 + 8) + 160));
        }
      }
      return *(_DWORD *)(a5 + 40) != 0;
    }
  }
  else if (v9)
  {
    goto LABEL_6;
  }
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Asset loaded/loading state is messed up.", "assetLoaded != assetLoading", "processPreparingComponents", 105);
  result = _os_crash();
  __break(1u);
  return result;
}

BOOL re::ecs2::VisualProxyComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, re::ecs2::TransformComponent *a4, uint64_t a5)
{
  re::RenderManager *v8;
  uint64_t v9;
  re::DynamicString **v10;
  re::MeshAsset *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const re::TextureHandle *v27;
  uint64_t v28;
  re::MaterialParameterBlock *v29;
  uint64_t PerspectiveCameraInScene;
  uint64_t OrthographicCameraInScene;
  uint64_t CustomMatrixCameraInScene;
  unint64_t v33;
  float v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  __int128 v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  _QWORD *v66;
  int *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  _anonymous_namespace_ *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const re::ecs2::Scene *v88;
  unint64_t v89;
  uint64_t i;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  _BOOL8 v95;
  int32x4_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  float32x4_t v102;
  re::MeshAsset *v103;
  __int128 v104;
  re::MeshAsset *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  _OWORD v111[2];
  float32x4_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116[4];
  re::ecs2::TransformComponent *v117[2];
  float32x4_t v118;
  _QWORD v119[3];
  __int128 v120;
  __int128 v121;
  unsigned int v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  unsigned int v126;
  uint64_t v127;
  float32x4_t v128;
  __int128 v129;
  uint64_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _QWORD v147[4];
  char v148;
  char v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  __int128 v154;
  _BYTE v155[19];
  unint64_t v156;
  int32x4_t v157;
  __int128 v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;

  v164 = *MEMORY[0x24BDAC8D0];
  v8 = *(re::RenderManager **)(*(_QWORD *)(a1 + 8) + 112);
  v9 = *((_QWORD *)v8 + 13);
  if (v9)
  {
    v10 = (re::DynamicString **)re::RenderFrameBox::get(v9 + 344, 0xFFFFFFFFFFFFFFFuLL);
    v8 = *(re::RenderManager **)(*(_QWORD *)(a1 + 8) + 112);
  }
  else
  {
    v10 = 0;
  }
  v126 = 0;
  v124 = 0u;
  v125 = 0u;
  v127 = 0x7FFFFFFFLL;
  v122 = 0;
  v120 = 0u;
  v121 = 0u;
  v123 = 0x7FFFFFFFLL;
  v11 = (re::MeshAsset *)re::RenderManager::perFrameAllocator(v8);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120);
  v13 = re::MeshAsset::assetType(v11);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, const char *, uint64_t *))(*(_QWORD *)v12 + 32))(v119, v12, "sharedBillboardMesh.compiledmesh", v13);
  v100 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136));
  v103 = (re::MeshAsset *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)v119);
  if (!v103)
    goto LABEL_82;
  v99 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 472) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 472));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v128, a5, 0);
  v117[1] = a4;
  v118 = v128;
  if (v128.i64[0] == a5 && v128.u16[4] == 0xFFFFLL && (v128.i32[2] & 0xFFFF0000) == 0xFFFF0000)
  {
    v14 = 0;
    v15 = 0;
    LODWORD(v16) = 0;
    goto LABEL_69;
  }
  v15 = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v97 = vdupq_n_s32(0x7F800000u);
  v98 = a5;
  do
  {
    v21 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v118);
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(*(_QWORD *)v21 + 16);
    v24 = v23;
    do
    {
      v25 = v24;
      v24 = *(_QWORD *)(v24 + 24);
    }
    while (v24);
    v26 = *(_QWORD *)(v25 + 16);
    v117[0] = *(re::ecs2::TransformComponent **)(*(_QWORD *)v21 + 16);
    if (!v22)
      goto LABEL_55;
    if (!*(_QWORD *)(v23 + 240))
      goto LABEL_55;
    if (!*(_QWORD *)(v22 + 40))
      goto LABEL_55;
    v27 = (const re::TextureHandle *)(v22 + 32);
    if (!*(_QWORD *)(v22 + 32))
      goto LABEL_55;
    v28 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(*(_QWORD *)(a1 + 8) + 160));
    v29 = *(re::MaterialParameterBlock **)(*(_QWORD *)(a1 + 8) + 184);
    re::MaterialParameterBlock::setTextureHandle(v29, "textureBaseColor", v27, (uint64_t)v116);
    v116[0] = 0;
    PerspectiveCameraInScene = re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene(v26);
    if (PerspectiveCameraInScene)
    {
      re::ecs2::PerspectiveCameraComponent::calculateWorldPose(PerspectiveCameraInScene, 0, (uint64_t)&v128);
    }
    else
    {
      OrthographicCameraInScene = re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene(v26);
      if (OrthographicCameraInScene)
      {
        re::ecs2::OrthographicCameraComponent::calculateWorldPose(OrthographicCameraInScene, 0, (uint64_t)&v128);
      }
      else
      {
        CustomMatrixCameraInScene = re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene(v26);
        v104 = xmmword_2260E5D70;
        if (!CustomMatrixCameraInScene)
          goto LABEL_23;
        re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(CustomMatrixCameraInScene, 0, &v128);
      }
    }
    v104 = v129;
LABEL_23:
    re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v117[0], (const re::ecs2::Entity *)1, &v128);
    v102 = v131;
    re::ecs2::TransformComponent::worldScale((re::ecs2::TransformComponent **)v117[0], (const re::ecs2::Entity *)1);
    v34 = *(float *)&v33;
    v36 = v35;
    v37 = HIDWORD(v33);
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    DWORD1(v113) = HIDWORD(v33);
    v112.i32[0] = v33;
    DWORD2(v114) = v35;
    HIDWORD(v115) = 1065353216;
    re::MeshAsset::boundingBoxForModel(v103, 0, &v128);
    re::AABB::transform(&v128, &v112, (uint64_t)v111);
    v148 = 0;
    v149 = 0;
    v150 = 0u;
    v128 = 0u;
    v129 = 0u;
    v130 = 0;
    v131 = 0u;
    v132 = 0u;
    v133 = 0u;
    v134 = 0u;
    v135 = 0u;
    v136 = 0u;
    v137 = 0u;
    v138 = 0u;
    v139 = 0;
    v140 = 0u;
    v141 = 0u;
    v142 = 0u;
    v143 = 0u;
    v144 = 0u;
    v145 = 0u;
    v146 = 0u;
    memset(v147, 0, 28);
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
      dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
    v38 = *((float *)&v104 + 1);
    v101 = v34;
    v151 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
    v152 = _D8;
    v153 = 1065353216;
    v154 = 0u;
    memset(v155, 0, sizeof(v155));
    v156 = 0xFFFFFFFF00000001;
    *(_QWORD *)&v39 = 0x7F0000007FLL;
    *((_QWORD *)&v39 + 1) = 0x7F0000007FLL;
    v157 = v97;
    v158 = v39;
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v163 = 0x10100010001;
    v40 = (_QWORD *)(*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 24, 8);
    v41 = *((_QWORD *)v103 + 47);
    v105 = (re::MeshAsset *)*((_QWORD *)v103 + 49);
    v106 = v41;
    v40[1] = 0;
    v40[2] = 0;
    *v40 = 0;
    re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(v40, (uint64_t)v11, v41);
    re::FixedArray<re::SkinningInfluence>::copy(v40, (uint64_t)&v105);
    v42 = v40[1];
    v128.i64[0] = v40[2];
    v128.i64[1] = v42;
    v43 = 1;
    v105 = (re::MeshAsset *)v111;
    v106 = 1;
    v44 = (*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 72, 8);
    *((_QWORD *)&v129 + 1) = re::MeshBoundingBoxes::MeshBoundingBoxes(v44, (uint64_t)v11, (const void **)&v105, 1);
    v105 = (re::MeshAsset *)v111;
    v106 = 1;
    v45 = (*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 72, 8);
    v130 = re::MeshBoundingBoxes::MeshBoundingBoxes(v45, (uint64_t)v11, (const void **)&v105, 1);
    v46 = *(float *)&v104;
    v47 = v46 + v46;
    v48 = v46 * (float)(v46 + v46);
    v49 = v38 * (float)(v38 + v38);
    v50 = *((float *)&v104 + 2) * (float)(*((float *)&v104 + 2) + *((float *)&v104 + 2));
    v51 = *((float *)&v104 + 1) * v47;
    v52 = *((float *)&v104 + 2) * v47;
    v53 = *((float *)&v104 + 2) * (float)(*((float *)&v104 + 1) + *((float *)&v104 + 1));
    v54 = *((float *)&v104 + 3) * v47;
    v55 = *((float *)&v104 + 3) * (float)(v38 + v38);
    v56 = *((float *)&v104 + 3) * (float)(*((float *)&v104 + 2) + *((float *)&v104 + 2));
    v57.i32[3] = 0;
    v57.f32[0] = 1.0 - (float)(v49 + v50);
    v57.f32[1] = v51 + v56;
    v57.f32[2] = v52 - v55;
    v58.i32[3] = 0;
    v58.f32[0] = v51 - v56;
    v58.f32[1] = 1.0 - (float)(v48 + v50);
    v58.f32[2] = v53 + v54;
    v59 = v48 + v49;
    v60.i32[3] = 0;
    v60.f32[0] = v52 + v55;
    v60.f32[1] = v53 - v54;
    v60.f32[2] = 1.0 - v59;
    v61 = vmulq_laneq_f32(v60, (float32x4_t)vdupq_n_s64(v36), 2);
    v62 = v102;
    v62.i32[3] = 1.0;
    v131 = vmulq_n_f32(v57, v101);
    v132 = vmulq_n_f32(v58, *(float *)&v37);
    v133 = v61;
    v134 = v62;
    v63 = *(_QWORD *)(v28 + 1664);
    v64 = (_QWORD *)(*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 8, 8);
    *v64 = v63;
    *(_QWORD *)&v135 = v64;
    *((_QWORD *)&v135 + 1) = 1;
    v65 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v29, v11);
    v66 = (_QWORD *)(*(uint64_t (**)(re::MeshAsset *, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 8, 8);
    *v66 = v65;
    *(_QWORD *)&v140 = v66;
    *((_QWORD *)&v140 + 1) = 1;
    *(_QWORD *)&v155[8] = *((_QWORD *)v117[0] + 37);
    v67 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v99, (uint64_t *)v117);
    if (v67)
      v43 = *v67;
    LODWORD(v156) = v43;
    v157 = (int32x4_t)v111[0];
    v158 = v111[1];
    v159 = v130;
    (*(void (**)(re::MeshAsset **__return_ptr, uint64_t, re::ecs2::TransformComponent *))(*(_QWORD *)v100 + 8))(&v105, v100, v117[0]);
    if ((_BYTE)v105)
      v68 = v106;
    else
      v68 = 0;
    v109 = 0;
    v110 = v68;
    v106 = 0;
    v107 = 0;
    v108 = 0;
    v105 = v11;
    re::DynamicArray<re::MeshScene>::setCapacity(&v105, 0);
    ++v108;
    v69 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v68 ^ (v68 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v68 ^ (v68 >> 30))) >> 27));
    v70 = v69 ^ (v69 >> 31);
    if ((_QWORD)v124)
    {
      v71 = v70 % DWORD2(v125);
      v72 = *(unsigned int *)(*((_QWORD *)&v124 + 1) + 4 * v71);
      if ((_DWORD)v72 != 0x7FFFFFFF)
      {
        v15 = v125;
        while (*(_QWORD *)(v125 + (v72 << 6) + 16) != v68)
        {
          v72 = *(_DWORD *)(v125 + (v72 << 6) + 8) & 0x7FFFFFFF;
          if ((_DWORD)v72 == 0x7FFFFFFF)
            goto LABEL_37;
        }
        goto LABEL_38;
      }
    }
    else
    {
      LODWORD(v71) = 0;
    }
LABEL_37:
    v73 = re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v124, v71, v70, &v110, (uint64_t)&v105);
    ++HIDWORD(v127);
    v15 = v125;
    v72 = v73;
LABEL_38:
    v74 = (_anonymous_namespace_ *)(v15 + (v72 << 6) + 24);
    re::DynamicArray<re::MeshScene>::deinit((uint64_t)&v105);
    if (*(_QWORD *)v74)
      re::DynamicArray<re::MeshScene>::add(v74, (__int128 *)&v128);
    v75 = v120;
    if (!(_QWORD)v120
      || (v75 = v70 % DWORD2(v121), v76 = *(unsigned int *)(*((_QWORD *)&v120 + 1) + 4 * v75), (_DWORD)v76 == 0x7FFFFFFF))
    {
LABEL_44:
      v77 = v123;
      if ((_DWORD)v123 == 0x7FFFFFFF)
      {
        v77 = v122;
        v78 = v122;
        if (v122 == DWORD2(v121))
        {
          re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v120, 2 * HIDWORD(v121));
          v78 = v122;
          v75 = v70 % DWORD2(v121);
        }
        v122 = v78 + 1;
        v79 = v121;
        v80 = *(_DWORD *)(v121 + 32 * v77 + 8);
      }
      else
      {
        v79 = v121;
        v80 = *(_DWORD *)(v121 + 32 * v123 + 8);
        LODWORD(v123) = v80 & 0x7FFFFFFF;
      }
      v81 = v79 + 32 * v77;
      *(_DWORD *)(v81 + 8) = v80 | 0x80000000;
      v82 = *((_QWORD *)&v120 + 1);
      *(_DWORD *)(v81 + 8) = *(_DWORD *)(*((_QWORD *)&v120 + 1) + 4 * v75) | 0x80000000;
      *(_QWORD *)v81 = v70;
      *(_QWORD *)(v81 + 16) = v68;
      *(_QWORD *)(v81 + 24) = v26;
      *(_DWORD *)(v82 + 4 * v75) = v77;
      ++HIDWORD(v121);
      ++HIDWORD(v123);
    }
    else
    {
      while (*(_QWORD *)(v121 + 32 * v76 + 16) != v68)
      {
        v76 = *(_DWORD *)(v121 + 32 * v76 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v76 == 0x7FFFFFFF)
          goto LABEL_44;
      }
    }
    a5 = v98;
    if (v147[2])
    {
      if ((_QWORD)v145)
        *(_QWORD *)&v145 = 0;
      if (*((_QWORD *)&v144 + 1))
        (*(void (**)(void))(*(_QWORD *)v147[2] + 40))();
    }
LABEL_55:
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v118);
  }
  while (v118.i64[0] != a5 || v118.u16[4] != 0xFFFF || v118.u16[5] != 0xFFFF);
  v14 = v126;
  if (v126)
  {
    v16 = 0;
    v85 = 8;
    while ((*(_DWORD *)(v15 + v85) & 0x80000000) == 0)
    {
      ++v16;
      v85 += 64;
      if (v126 == v16)
      {
        LODWORD(v16) = v126;
        break;
      }
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
LABEL_69:
  if (v14 != (_DWORD)v16)
  {
    v86 = v16;
    do
    {
      v87 = v15 + (v86 << 6);
      v88 = *(const re::ecs2::Scene **)(v87 + 16);
      v89 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)v88 ^ ((unint64_t)v88 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((unint64_t)v88 ^ ((unint64_t)v88 >> 30))) >> 27));
      for (i = *(unsigned int *)(*((_QWORD *)&v120 + 1) + 4 * ((v89 ^ (v89 >> 31)) % DWORD2(v121)));
            *(const re::ecs2::Scene **)(v121 + 32 * i + 16) != v88;
      v91 = v87 + 24;
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(*(re::ecs2::RenderingSubsystem **)(v121 + 32 * i + 24), v88, v10, &v128);
      v112.i64[0] = (unint64_t)v128.i64[0] >> 1;
      v92 = re::RenderFrameData::stream((re::RenderFrameData *)(v10 + 33), (const re::WeakStringID *)&v112);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v92 + 48) + 536))(*(_QWORD *)(v92 + 48), v91);
      re::StringID::destroyString((re::StringID *)&v128);
      v15 = v125;
      if (v126 <= (int)v16 + 1)
        v93 = v16 + 1;
      else
        v93 = v126;
      while (1)
      {
        v86 = (v16 + 1);
        if (v93 - 1 == (_DWORD)v16)
          break;
        LODWORD(v16) = v16 + 1;
        v94 = v86;
        if ((*(_DWORD *)(v125 + (v86 << 6) + 8) & 0x80000000) != 0)
          goto LABEL_81;
      }
      v94 = v93;
LABEL_81:
      LODWORD(v16) = v94;
    }
    while (v14 != v94);
  }
LABEL_82:
  v95 = *(_DWORD *)(a5 + 40) != 0;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v119);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v120);
  re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v124);
  return v95;
}

__n128 re::MeshAsset::boundingBoxForModel@<Q0>(re::MeshAsset *this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  v4 = 416;
  if (!*((_BYTE *)this + 952))
    v4 = 24;
  if (*(_QWORD *)((char *)this + v4) <= a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "modelIndex < modelCount()", "boundingBoxForModel", 230);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "meshManager != nullptr", "boundingBoxForModel", 233);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  if (!*((_BYTE *)this + 952))
  {
    if (*((_QWORD *)this + 3) > a2)
    {
      v6 = *((_QWORD *)this + 5) + (a2 << 9) + 16;
      goto LABEL_10;
    }
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *((_QWORD *)this + 55);
  if (!v5)
    goto LABEL_12;
  if (*((_QWORD *)this + 52) <= a2)
  {
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  v6 = re::DataArray<re::MeshModel>::get(v5 + 8, *(_QWORD *)(*((_QWORD *)this + 54) + 8 * a2)) + 16;
LABEL_10:
  result = *(__n128 *)v6;
  v8 = *(_OWORD *)(v6 + 16);
  *a3 = *(_OWORD *)v6;
  a3[1] = v8;
  return result;
}

re::ecs2::VisualProxySystem *re::ecs2::VisualProxySystem::VisualProxySystem(re::ecs2::VisualProxySystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED48AA0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_QWORD *)(v2 + 192) = off_24ED48A60;
  v3 = v2 + 192;
  *(_QWORD *)(v2 + 200) = v2;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 208) = 0;
  v10 = 1;
  v11[0] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9 = v11;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 208), (uint64_t)&v9);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 62) = 1;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 1;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 104) = 1;
  *(_OWORD *)((char *)this + 449) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 44, 0);
  *((_DWORD *)this + 92) += 2;
  *((_QWORD *)this + 49) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 50, 0);
  *((_DWORD *)this + 104) += 2;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = this;
  *((_QWORD *)this + 57) = v3;
  *((_BYTE *)this + 464) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  LOBYTE(v10) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v9);
  *((_QWORD *)this + 59) = 0;
  return this;
}

uint64_t re::ecs2::VisualProxySystem::willAddSystemToECSService(re::ecs2::VisualProxySystem *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::RenderManager *v6;
  __int128 v7;
  uint64_t v8;
  re *v9;
  re::RenderManager *v10;
  uint64_t *v11;
  re::MaterialParameterBlock *v12;
  re::MaterialParameterBlock *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;

  result = re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v4 = *((_QWORD *)this + 13);
  if (v4 && (*(_BYTE *)(v4 + 424) & 0x10) == 0)
    return result;
  v5 = *((_QWORD *)this + 15);
  if (!v5)
  {
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) ", "m_assetService", "willAddSystemToECSService", 246);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  v6 = (re::RenderManager *)*((_QWORD *)this + 14);
  if (!v6)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "willAddSystemToECSService", 247);
    result = _os_crash();
    __break(1u);
    return result;
  }
  (*(void (**)(_QWORD *__return_ptr, _QWORD, const char *))(*(_QWORD *)v5 + 8))(v16, *((_QWORD *)this + 15), "engine:visualProxy.rematerialdefinition");
  re::MaterialAsset::makeMaterialMemoryAsset(v5, v6, (re::AssetHandle *)v16, 0, 0);
  v7 = *((_OWORD *)this + 10);
  *((_OWORD *)this + 10) = v17;
  v17 = v7;
  v8 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v18;
  v18 = v8;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v16);
  v9 = (re *)re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::VisualProxySystem *)((char *)this + 160));
  if (v9)
  {
    v10 = (re::RenderManager *)*((_QWORD *)this + 14);
    v11 = re::globalAllocators(v9);
    v12 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[2] + 32))(v11[2], 1008, 8);
    v13 = re::MaterialParameterBlock::MaterialParameterBlock(v12, v10);
    v14 = *((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = v13;
    if (v14)

  }
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(v15);
  *((_QWORD *)this + 59) = result;
  return result;
}

double re::ecs2::VisualProxySystem::willRemoveSystemFromECSService(re::ecs2::VisualProxySystem *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v2 = *((_OWORD *)this + 10);
  v3 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  v6 = v2;
  v7 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
  v4 = *((_QWORD *)this + 23);
  if (v4)
  {

    *((_QWORD *)this + 23) = 0;
  }
  *((_QWORD *)this + 59) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  return result;
}

void re::ecs2::VisualProxySystem::willAddSceneToECSService(re::ecs2::VisualProxySystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 232;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::VisualProxySystem *)((char *)this + 352);
  v6 = *((_QWORD *)this + 45);
  v7 = *((_DWORD *)this + 92);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 376);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 48);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 376);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 48);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 352, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VisualProxySystem *)((char *)this + 288), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 400;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 34);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 30);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,4ul>::setBucketsCapacity((_QWORD *)this + 29, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 30);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 248) & 1) != 0)
    v19 = (char *)this + 256;
  else
    v19 = (char *)*((_QWORD *)this + 33);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 34);
  ++*((_DWORD *)this + 70);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 34);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 34) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VisualProxySystem *)((char *)this + 288), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 34);
  v29 = *((_QWORD *)this + 49);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 49) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 49) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 368) & 1) != 0)
      v33 = (char *)this + 376;
    else
      v33 = (char *)*((_QWORD *)this + 48);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 45) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 34);
  v35 = *((_QWORD *)this + 55);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 55) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::VisualProxySystem *)((char *)this + 400), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 55) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 416) & 1) != 0)
      v39 = (char *)this + 424;
    else
      v39 = (char *)*((_QWORD *)this + 54);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 51) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 400;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 464))
    return;
  v40 = *((_QWORD *)this + 51);
  v41 = *((_DWORD *)this + 104);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 424);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 54);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 56);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 424);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 54);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::VisualProxySystem::willRemoveSceneFromECSService(re::ecs2::VisualProxySystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 288);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 36, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 37) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 352, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 400, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 232, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::VisualProxySystem::updateScenes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::System *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;

  v29[0] = a3;
  v29[1] = a4;
  v5 = *(_QWORD *)(a1 + 104);
  if (!v5 || (*(_BYTE *)(v5 + 424) & 0x10) != 0)
  {
    if (!*(_QWORD *)(a1 + 120))
      goto LABEL_37;
    if (*(_QWORD *)(a1 + 112))
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = *a2;
        v27 = (uint64_t *)(a1 + 424);
        v28 = (uint64_t)&(*a2)[(_QWORD)v6];
        while (1)
        {
          if (!*v7)
          {
            re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) VisualProxySystem must be added to a scene and not to an ECSService directly.", "scene", "updateScenes", 291);
            _os_crash();
            __break(1u);
LABEL_37:
            re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_assetService", "updateScenes", 286);
            _os_crash();
            __break(1u);
            goto LABEL_38;
          }
          v30 = *v7;
          v8 = *(_QWORD *)(*(_QWORD *)(a1 + 296)
                         + 16
                         * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 288), &v30)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 400, v8);
          v9 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 232, v8);
          v10 = *(_QWORD *)(*v9 + 224);
          v11 = v9[3];
          v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
          if (*(_DWORD *)(v12 + 40))
            v13 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, v29, v9, v11, v12, 0);
          else
            v13 = 0;
          v14 = v9[5];
          v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
          if (*(_DWORD *)(v15 + 40))
            v13 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v29, v9, v14, v15, 0);
          v16 = v9[6];
          v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
          if (*(_DWORD *)(v17 + 40))
            break;
          if (v13)
            goto LABEL_15;
LABEL_16:
          if (*(_BYTE *)(a1 + 464))
          {
            v18 = *(_QWORD *)(a1 + 408);
            v19 = *(_DWORD *)(a1 + 416);
            if (v18 < 0xB)
            {
              v22 = v27;
              if ((v19 & 1) == 0)
                v22 = *(uint64_t **)(a1 + 432);
              if (!v18)
                goto LABEL_34;
              v23 = 0;
              v24 = 8 * v18;
              do
              {
                v25 = *v22++;
                v23 |= v25;
                v24 -= 8;
              }
              while (v24);
              if (!v23)
                goto LABEL_34;
            }
            else
            {
              v20 = v27;
              if ((v19 & 1) == 0)
                v20 = *(uint64_t **)(a1 + 432);
              v21 = 8 * v18;
              while (!*v20)
              {
                ++v20;
                v21 -= 8;
                if (!v21)
                  goto LABEL_34;
              }
            }
            v26 = *(re::ecs2::System **)(a1 + 448);
            if (!*((_BYTE *)v26 + 86))
              re::ecs2::System::queueToRun(v26, 0.0);
          }
LABEL_34:
          if (++v7 == (uint64_t *)v28)
            return;
        }
        if (((v13 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, v29, v9, v16, v17, 0)) & 1) == 0)goto LABEL_16;
LABEL_15:
        re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 400, v8);
        goto LABEL_16;
      }
    }
    else
    {
LABEL_38:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateScenes", 287);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VisualProxyComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VisualProxyComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void re::ecs2::VisualProxySystem::~VisualProxySystem(re::ecs2::VisualProxySystem *this)
{
  uint64_t v2;
  uint64_t v3;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 29);
  *((_QWORD *)this + 24) = off_24ED48A60;
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if (*((_QWORD *)this + 27))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 28));
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
    }
    *((_QWORD *)this + 26) = 0;
  }
  v3 = *((_QWORD *)this + 23);
  if (v3)
  {

    *((_QWORD *)this + 23) = 0;
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VisualProxySystem *)((char *)this + 160));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 29);
  *((_QWORD *)this + 24) = off_24ED48A60;
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if (*((_QWORD *)this + 27))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 28));
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
    }
    *((_QWORD *)this + 26) = 0;
  }
  v3 = *((_QWORD *)this + 23);
  if (v3)
  {

    *((_QWORD *)this + 23) = 0;
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VisualProxySystem *)((char *)this + 160));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::VisualProxySystem::typeInfo(re::ecs2::VisualProxySystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxySystem>, 0);
}

void re::ecs2::VisualProxyComponent::~VisualProxyComponent(id *this)
{
  if (*((_BYTE *)this + 56))
  {
    objc_destroyWeak(this + 8);
    this[8] = 0;
  }
  re::TextureHandle::invalidate((re::TextureHandle *)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  if (*((_BYTE *)this + 56))
  {
    objc_destroyWeak(this + 8);
    this[8] = 0;
  }
  re::TextureHandle::invalidate((re::TextureHandle *)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::VisualProxyFilterComponent::~VisualProxyFilterComponent(re::ecs2::VisualProxyFilterComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::VisualProxySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VisualProxySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

double re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::MeshScene>::deinit(v6 + 24);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::MeshBoundingBoxes::MeshBoundingBoxes(uint64_t a1, uint64_t a2, const void **a3, int a4)
{
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int32x4_t v11;
  __int128 v12;
  size_t v13;
  const void *v14;
  uint64_t result;
  _QWORD v16[2];

  v4 = a3;
  v5 = a2;
  v6 = a1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (!a4)
    goto LABEL_10;
  v7 = (unint64_t)a3[1];
  if (!v7)
  {
    v13 = 0;
    v9 = 0;
LABEL_9:
    memcpy(v9, *v4, v13);
    v14 = v4[1];
    v16[0] = v9;
    v16[1] = v14;
    a3 = (const void **)v16;
    a1 = v6;
    a2 = v5;
LABEL_10:
    re::MeshBoundingBoxes::init(a1, a2, a3);
    return v6;
  }
  if (!(v7 >> 59))
  {
    v8 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, (32 * v7) | 0x1F, 0);
    v9 = (_OWORD *)((v8 + 31) & 0xFFFFFFFFFFFFFFF0);
    *((_QWORD *)v9 - 2) = v7;
    *((_QWORD *)v9 - 1) = v8;
    v10 = v9 + 1;
    v11 = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v12 = 0x7F0000007FLL;
    *((_QWORD *)&v12 + 1) = 0x7F0000007FLL;
    do
    {
      *(v10 - 1) = v11;
      *v10 = v12;
      v10 += 2;
      --v7;
    }
    while (v7);
    v13 = 32 * (_QWORD)v4[1];
    goto LABEL_9;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 32, v7);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  *(_QWORD *)(v25 + 56) = 0;
  *(_DWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 32) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v26 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v26;
  v27 = *(_QWORD *)(v25 + 56);
  *(_QWORD *)(v25 + 56) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v27;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v25 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *v13;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED48B58;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED48BB0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED48C08;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED48C60;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED48B58;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED48BB0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED48C08;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED48C60;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48B58;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48B58;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48BB0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48BB0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48C08;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48C08;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48C60;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48C60;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VisualProxyComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

re::Constraint *re::ecs2::PhysicsRuntimeJointFactory::createRuntimeJoint(re::ecs2::PhysicsRuntimeJointFactory *this, const re::ecs2::PhysicsJointDefinition *a2, re::PhysicsSimulation *a3, re::ecs2::Scene *a4)
{
  char *v7;
  char *v8;
  const char *v9;
  char *v10;
  char *v11;
  const char *v12;
  int DataToCreateRuntimeJoint;
  re::Constraint *v14;
  uint64_t v16;
  float v17;
  float v18;
  double v19;
  uint64_t v20;
  re *v21;
  NSObject *v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE buf[12];
  __int16 v32;
  char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v7 = re::ecs2::EntityHandle::resolve((uint64_t)this + 16, (char *)a3);
  v8 = v7;
  if (v7)
    v9 = (const char *)*((_QWORD *)v7 + 35);
  else
    v9 = "null";
  v10 = re::ecs2::EntityHandle::resolve((uint64_t)this + 96, (char *)a3);
  v11 = v10;
  if (v10)
    v12 = (const char *)*((_QWORD *)v10 + 35);
  else
    v12 = "null";
  v30 = 0;
  v27 = 0uLL;
  v28 = 0;
  v29 = 0x3F80000000000000;
  v26 = 0;
  v23 = 0uLL;
  v24 = 0;
  v25 = 0x3F80000000000000;
  DataToCreateRuntimeJoint = re::ecs2::PhysicsJointDefinition::getDataToCreateRuntimeJoint((uint64_t)this, (uint64_t)a2, (uint64_t)a3, 0, &v30, &v27, &v26, &v23);
  v14 = 0;
  if (!DataToCreateRuntimeJoint)
  {
    switch(*(_DWORD *)this)
    {
      case 1:
        v14 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, re *, float32x4_t *, _QWORD))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory + 56))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v30, &v27, v26, &v23, 0);
        goto LABEL_22;
      case 2:
        v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, re *, float32x4_t *, _QWORD))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory + 72))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v30, &v27, v26, &v23, *((unsigned __int8 *)this + 176));
        v14 = (re::Constraint *)v16;
        v17 = *((float *)this + 54);
        v18 = *((float *)this + 56);
        if (v17 > 3.1416)
          v17 = 3.1416;
        if (v17 < -1.0)
          v17 = -1.0;
        if (v18 > 3.1416)
          v18 = 3.1416;
        if (v18 < -1.0)
          v18 = -1.0;
        *(float *)(v16 + 56) = v17;
        *(float *)(v16 + 60) = v18;
        goto LABEL_27;
      case 3:
        v14 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, re *, float32x4_t *, _QWORD))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory + 48))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v30, &v27, v26, &v23, *((unsigned __int8 *)this + 176));
        LODWORD(v19) = *((_DWORD *)this + 51);
        re::HingeJoint::setAngularLimit((uint64_t)v14, v19, *((float *)this + 52));
LABEL_22:
        if (!v14)
          return v14;
        goto LABEL_29;
      case 4:
        v14 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, re *, float32x4_t *, _QWORD))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory + 64))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v30, &v27, v26, &v23, *((unsigned __int8 *)this + 176));
        *((_QWORD *)v14 + 7) = *(_QWORD *)((char *)this + 180);
        goto LABEL_27;
      case 5:
        v14 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, re *, float32x4_t *, _QWORD))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory + 80))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v30, &v27, v26, &v23, *((unsigned __int8 *)this + 176));
        *(_QWORD *)buf = *(_QWORD *)((char *)this + 180);
        re::DistanceJoint::setDistanceRange((uint64_t)v14, (uint64_t *)buf);
        *((float *)v14 + 16) = fmaxf(*((float *)this + 57), 0.0);
        v20 = 8;
        goto LABEL_28;
      case 6:
        v14 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, re *, float32x4_t *, _QWORD))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory + 88))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v30, &v27, v26, &v23, *((unsigned __int8 *)this + 176));
        *((_QWORD *)v14 + 7) = *(_QWORD *)((char *)this + 180);
        (*(void (**)(re::Constraint *))(*(_QWORD *)v14 + 56))(v14);
        *((_QWORD *)v14 + 8) = *(_QWORD *)((char *)this + 188);
        (*(void (**)(re::Constraint *))(*(_QWORD *)v14 + 56))(v14);
        *((_QWORD *)v14 + 9) = *(_QWORD *)((char *)this + 196);
        (*(void (**)(re::Constraint *))(*(_QWORD *)v14 + 56))(v14);
        *((_QWORD *)v14 + 10) = *(_QWORD *)((char *)this + 204);
        (*(void (**)(re::Constraint *))(*(_QWORD *)v14 + 56))(v14);
        *((_QWORD *)v14 + 11) = *(_QWORD *)((char *)this + 212);
        (*(void (**)(re::Constraint *))(*(_QWORD *)v14 + 56))(v14);
        *((_QWORD *)v14 + 12) = *(_QWORD *)((char *)this + 220);
LABEL_27:
        v20 = 7;
LABEL_28:
        (*(void (**)(re::Constraint *))(*(_QWORD *)v14 + 8 * v20))(v14);
LABEL_29:
        re::PhysicsJointCollection::add((const re::ecs2::PhysicsJointDefinition *)((char *)a2 + 136), v14);
        v22 = *re::physicsLogObjects(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v9;
          v32 = 2048;
          v33 = v8;
          v34 = 2080;
          v35 = v12;
          v36 = 2048;
          v37 = v11;
          _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "PhysicsRuntimeJointFactory::createRuntimeJoint(): Runtime joint created, Entity %s (%p), Entity %s (%p)", buf, 0x2Au);
        }
        break;
      default:
        v14 = 0;
        break;
    }
  }
  return v14;
}

uint64_t *re::allocInfo_PeerVideoStreamingService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_161);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_161))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107D78, 0);
    *(uint64_t *)((char *)&qword_254107D88 + 6) = 0;
    qword_254107D88 = 0;
    qword_254107D98 = 0;
    qword_254107DA0 = 0xFFFFFFFFLL;
    qword_254107D78 = (uint64_t)&off_24ED7DAA8;
    qword_254107DA8 = (uint64_t)"PeerVideoStreamingService";
    dword_254107DB0 = 0;
    unk_254107DB8 = 0u;
    unk_254107DC8 = 0u;
    unk_254107DD8 = 0u;
    qword_254107DE8 = 0;
    __cxa_guard_release(&_MergedGlobals_161);
  }
  return &qword_254107D78;
}

void re::initInfo_PeerVideoStreamingService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xDE22D8C2CFA78C58;
  v5[1] = "PeerVideoStreamingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_PeerVideoStreamingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_PeerVideoStreamingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PeerVideoStreamingService", (uint64_t (*)(re::internal *))re::allocInfo_PeerVideoStreamingService, (re::IntrospectionBase *(*)(void))re::initInfo_PeerVideoStreamingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PeerVideoStreamingService>, this);
}

unint64_t re::PeerVideoStreamId::hash(re::PeerVideoStreamId *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)this ^ (*(_QWORD *)this >> 30));
  v2 = (0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) ^ ((0x94D049BB133111EBLL * (v1 ^ (v1 >> 27))) >> 31);
  v3 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 1) ^ (*((_QWORD *)this + 1) >> 30));
  return (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
        + (v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9) ^ v2;
}

void re::PeerVideoStreamHandle::~PeerVideoStreamHandle(re::PeerVideoStreamHandle *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED48DB8;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 104))(v2, *((_QWORD *)this + 3), *((_QWORD *)this + 4));
    *((_QWORD *)this + 5) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::PeerVideoStreamHandle::~PeerVideoStreamHandle(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::remoteEffectsLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::remoteEffectsLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "RemoteEffects");
  }
  return &re::remoteEffectsLogObjects(void)::logObjects;
}

uint64_t *re::ecs2::allocInfo_MeshSceneComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254107DF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107DF8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107EE0, 0);
    *(uint64_t *)((char *)&qword_254107EF0 + 6) = 0;
    qword_254107EF0 = 0;
    qword_254107F00 = 0;
    qword_254107F08 = 0xFFFFFFFFLL;
    qword_254107EE0 = (uint64_t)&off_24ED7DAA8;
    qword_254107F10 = (uint64_t)"MeshSceneComponent";
    dword_254107F18 = 0;
    xmmword_254107F20 = 0u;
    unk_254107F30 = 0u;
    xmmword_254107F40 = 0u;
    qword_254107F50 = 0;
    __cxa_guard_release(&qword_254107DF8);
  }
  return &qword_254107EE0;
}

void re::ecs2::initInfo_MeshSceneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xD072249390F27A7CLL;
  v19[1] = "MeshSceneComponent";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254107E00);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254107E00);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107E20 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>>::get((uint64_t)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "instanceNames";
      *(_QWORD *)(v11 + 16) = &qword_254107E40;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254107E28 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::IntrospectionInfo<re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>>::get((uint64_t)v12, v13);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "instanceModelNames";
      *(_QWORD *)(v14 + 16) = &qword_254107E40;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x5000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254107E30 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      re::IntrospectionInfo<re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>>::get((uint64_t)v15, v16);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "instanceTransforms";
      *(_QWORD *)(v17 + 16) = qword_254107E90;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x8000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254107E38 = v17;
      __cxa_guard_release(&qword_254107E00);
    }
  }
  *((_QWORD *)this + 2) = 0x2C000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254107E20;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSceneComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSceneComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSceneComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSceneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void re::IntrospectionInfo<re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_254107E10);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254107E10))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254107E40);
    qword_254107E40 = (uint64_t)&off_24ED48FC8;
    __cxa_guard_release(&qword_254107E10);
  }
  if ((_MergedGlobals_162 & 1) == 0)
  {
    v3 = re::introspect_uint32_t((re *)1, a2);
    v5 = re::IntrospectionInfo<re::StringID>::get(1, v4);
    if ((_MergedGlobals_162 & 1) == 0)
    {
      v6 = (uint64_t)v5;
      _MergedGlobals_162 = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107E40, 0);
      qword_254107E50 = 0x3000000007;
      dword_254107E58 = v7;
      word_254107E5C = 0;
      *(_QWORD *)&xmmword_254107E60 = 0;
      *((_QWORD *)&xmmword_254107E60 + 1) = 0xFFFFFFFFLL;
      qword_254107E70 = (uint64_t)v3;
      unk_254107E78 = 0;
      qword_254107E80 = v6;
      unk_254107E88 = 0;
      qword_254107E40 = (uint64_t)&off_24ED48FC8;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_254107E40, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_254107E60 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  re::IntrospectionRegistry *v7;
  const re::IntrospectionBase *v8;
  const char *v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22[2];
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  _QWORD v28[2];
  __int128 v29;
  StringID v30;
  const char **v31;

  v2 = atomic_load((unsigned __int8 *)&qword_254107E18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254107E18))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)qword_254107E90);
    qword_254107E90[0] = (uint64_t)&off_24ED49068;
    __cxa_guard_release(&qword_254107E18);
  }
  if ((byte_254107DF1 & 1) == 0)
  {
    v3 = re::introspect_uint32_t((re *)1, a2);
    v4 = re::introspect_SRT((re::IntrospectionBase **)1);
    if ((byte_254107DF1 & 1) == 0)
    {
      v5 = v4;
      byte_254107DF1 = 1;
      v6 = *(_DWORD *)(v4 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_254107E90, 0);
      unk_254107EA0 = 0x3000000007;
      unk_254107EA8 = v6;
      unk_254107EAC = 0;
      *(_QWORD *)&xmmword_254107EB0 = 0;
      *((_QWORD *)&xmmword_254107EB0 + 1) = 0xFFFFFFFFLL;
      unk_254107EC0 = v3;
      unk_254107EC8 = 0;
      unk_254107ED0 = v5;
      unk_254107ED8 = 0;
      qword_254107E90[0] = (uint64_t)&off_24ED49068;
      re::IntrospectionRegistry::add(v7, v8);
      re::getPrettyTypeName((re *)qword_254107E90, (const re::IntrospectionBase *)&v25);
      if ((v26 & 1) != 0)
        v9 = v27;
      else
        v9 = (char *)&v26 + 1;
      if (v25 && (v26 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
      v10 = v3[2];
      v20 = *(_OWORD *)(v5 + 32);
      v21 = v10;
      v11 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v22);
      if (v11)
      {
        v12 = *v11;
        *((_QWORD *)&v19 + 1) = v12;
      }
      else
      {
        v25 = 0x449AD97C4B77BED4;
        v26 = "_CompareFunc";
        v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v25);
        if (v13)
        {
          v14 = *v13;
          re::StringID::destroyString((re::StringID *)&v25);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v25);
          *(_QWORD *)&v30.var0 = 0x449AD97C4B77BED4;
          v30.var1 = "_CompareFunc";
          v15 = (void *)v25;
          v14 = (uint64_t)v26;
          re::StringID::destroyString((re::StringID *)&v30);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v30, (uint64_t)&v26);
        if (!v15
          || (v16 = *v31,
              v25 = v14,
              v26 = v16,
              LODWORD(v27) = -1,
              (v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v30.var0 + 768, &v25)) == 0)|| !*(_QWORD *)v17)
        {
          v29 = v21;
          v28[0] = v15;
          v28[1] = v14;
        }
        v23 = v20;
        v24 = v21;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v25, v22, 1, 0x30uLL, 8uLL, &v24, &v23);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v18);
      }
      xmmword_254107EB0 = v19;
      re::StringID::destroyString((re::StringID *)v22);
    }
  }
}

_QWORD *re::internal::defaultConstruct<re::ecs2::MeshSceneComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshSceneComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshSceneComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshSceneComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshSceneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSceneComponent>, this);
}

uint64_t *re::ecs2::allocInfo_MeshSceneSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254107E08);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107E08))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107F58, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254107F68 = 0;
    qword_254107F78 = 0;
    qword_254107F80 = 0xFFFFFFFFLL;
    qword_254107F58 = (uint64_t)&off_24ED7DAA8;
    qword_254107F88 = (uint64_t)"MeshSceneSystem";
    dword_254107F90 = 0;
    xmmword_254107F98 = 0u;
    unk_254107FA8 = 0u;
    xmmword_254107FB8 = 0u;
    qword_254107FC8 = 0;
    __cxa_guard_release(&qword_254107E08);
  }
  return &qword_254107F58;
}

void re::ecs2::initInfo_MeshSceneSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xBC654CEB7856431CLL;
  v5[1] = "MeshSceneSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1C800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MeshSceneSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSceneSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSceneSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshSceneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshSceneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSceneSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSceneSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::MeshSceneSystem *re::internal::defaultConstruct<re::ecs2::MeshSceneSystem>(uint64_t a1, uint64_t a2, re::ecs2::MeshSceneSystem *a3)
{
  return re::ecs2::MeshSceneSystem::MeshSceneSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::MeshSceneSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a3 + 49));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 19);
  a3[14] = &off_24ED48E50;
  v4 = a3[16];
  if (v4)
  {
    if (a3[17])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[18]);
      a3[17] = 0;
      a3[18] = 0;
    }
    a3[16] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshSceneSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 49));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 19);
  a1[14] = &off_24ED48E50;
  v2 = a1[16];
  if (v2)
  {
    if (a1[17])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[18]);
      a1[17] = 0;
      a1[18] = 0;
    }
    a1[16] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshSceneSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSceneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSceneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSceneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSceneSystem>, this);
}

void re::ecs2::MeshSceneComponent::~MeshSceneComponent(re::ecs2::MeshSceneComponent *this)
{
  id *v2;
  re *inited;
  uint64_t v4;
  id location;
  _QWORD v6[3];
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED48E00;
  v2 = (id *)((char *)this + 640);
  inited = (re *)objc_initWeak(&location, 0);
  memset(v6, 0, sizeof(v6));
  v7 = re::globalAllocators(inited)[2];
  v8 = 0;
  re::FramePersistentPtr<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData,re::FrameManager>::reset(v2, &location, 0, (uint64_t)v6);
  if (v8)
  {
    (*(void (**)(_QWORD *))*v8)(v8);
    if (v8 != v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 656);
  objc_destroyWeak(v2);
  *((_QWORD *)this + 80) = 0;
  re::MeshNameMap::~MeshNameMap((re::ecs2::MeshSceneComponent *)((char *)this + 216));
  v4 = *((_QWORD *)this + 22);
  if (v4)
  {
    if (*((_QWORD *)this + 26))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 22) = 0;
    ++*((_DWORD *)this + 50);
  }
  re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)this + 16);
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 10);
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::MeshSceneComponent::~MeshSceneComponent(this);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::MeshSceneComponent::ensureCachedDataUpToDate(uint64_t *this, re::MeshManager *a2)
{
  unint64_t v2;
  re::MeshManager *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  re::MeshAsset *v9;
  _anonymous_namespace_ *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  re::_anonymous_namespace_::MeshAssetAccessor *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  re::MeshNameMap *v27;
  uint64_t v28;
  const StringID *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t *v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float32x4_t v50;
  float v51;
  float32_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unint64_t *v64;
  float32x4_t v65;
  float32x4_t v66;
  NSObject *v67;
  re::_anonymous_namespace_::MeshAssetAccessor *v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  re *inited;
  uint64_t *v73;
  re *v74;
  _anonymous_namespace_ *v75;
  _anonymous_namespace_ *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  __int128 v96;
  int32x4_t *v97;
  int32x4_t v98;
  re::_anonymous_namespace_::MeshAssetAccessor *v99;
  re::MeshManager *v100;
  re::MeshNameMap *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  int32x4_t v108;
  id location;
  _QWORD v110[2];
  unint64_t v111;
  int v112;
  re::_anonymous_namespace_::MeshAssetAccessor *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  _OWORD v118[4];
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t *v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t *v126;
  _OWORD v127[3];
  float32x4_t v128;
  float32x4_t v129;
  int v130;
  int v131;
  int v132;
  uint8_t buf[16];
  __int128 v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  int v142;
  const char *v143;
  __int16 v144;
  int v145;
  __int16 v146;
  unint64_t v147;
  __int16 v148;
  uint64_t v149;
  uint64_t v150;

  v3 = a2;
  v4 = (uint64_t)this;
  v150 = *MEMORY[0x24BDAC8D0];
  v5 = this[2];
  if (!v5)
    return (uint64_t *)re::ecs2::MeshSceneComponent::resetCachedInstances((re::ecs2::MeshSceneComponent *)this, a2);
  v6 = *(_QWORD *)(v5 + 176);
  if (!v6)
    return (uint64_t *)re::ecs2::MeshSceneComponent::resetCachedInstances((re::ecs2::MeshSceneComponent *)this, a2);
  v7 = *(_QWORD *)(v6 + 40);
  if (!v7)
    return (uint64_t *)re::ecs2::MeshSceneComponent::resetCachedInstances((re::ecs2::MeshSceneComponent *)this, a2);
  v8 = atomic_load((unsigned int *)(v7 + 704));
  if (v8 != 2)
    return (uint64_t *)re::ecs2::MeshSceneComponent::resetCachedInstances((re::ecs2::MeshSceneComponent *)this, a2);
  if (*((_DWORD *)this + 174) != *((_DWORD *)this + 175))
  {
    v9 = (re::MeshAsset *)(v6 + 32);
    v10 = (_anonymous_namespace_ *)re::ecs2::MeshSceneComponent::resetCachedInstances((re::ecs2::MeshSceneComponent *)this, a2);
    v11 = *(_DWORD *)(v4 + 60);
    if (v11 <= *(_DWORD *)(v4 + 108))
      v11 = *(_DWORD *)(v4 + 108);
    v12 = *(_DWORD *)(v4 + 156);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    v122 = 0;
    v123 = 0;
    v124 = 1;
    v125 = 0;
    v126 = 0;
    v106 = v13;
    if ((_DWORD)v13)
    {
      re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(&v122, v13);
      v14 = v124;
      v124 += 2;
      v15 = (v14 & 1) == 0;
      v16 = 8;
      if (v15)
        v16 = v125;
      if (v16 < v13)
        re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(&v122, v13);
      v17 = v123;
      if (v123 < v13)
      {
        do
        {
          if ((v124 & 1) != 0)
            v18 = &v125;
          else
            v18 = v126;
          *((_DWORD *)v18 + v17++) = -1;
        }
        while (v13 != v17);
      }
      v123 = v13;
      v124 += 2;
    }
    *(_DWORD *)(v4 + 700) = *(_DWORD *)(v4 + 696);
    v19 = re::AssetHandle::asset<re::MeshAsset>(v9);
    v20 = (re::_anonymous_namespace_::MeshAssetAccessor *)v19;
    v113 = 0;
    v110[1] = 0;
    v111 = 0;
    v110[0] = 0;
    v112 = 0;
    v104 = *(_QWORD *)(v19 + 432);
    v105 = *(_QWORD *)(v19 + 416);
    v21 = *(_DWORD *)(v4 + 60);
    if (v21 <= *(_DWORD *)(v4 + 108))
      v21 = *(_DWORD *)(v4 + 108);
    v22 = *(_DWORD *)(v4 + 156);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    v118[0] = xmmword_2260E5F10;
    v118[1] = xmmword_2260E5F20;
    v118[2] = xmmword_2260E5F40;
    v118[3] = xmmword_2260E5D70;
    v116 = 0u;
    v117 = 0u;
    v114 = 0u;
    v115 = 0u;
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 0;
      v26 = v4 + 32;
      v99 = (re::_anonymous_namespace_::MeshAssetAccessor *)v19;
      v100 = v3;
      v27 = (re::MeshNameMap *)(v19 + 448);
      v28 = v4 + 80;
      v101 = (re::MeshNameMap *)(v19 + 448);
      v102 = (uint64_t)v3 + 72;
      v103 = (uint64_t)v3 + 8;
      v2 = 0x7FFFFFFFLL;
      while (1)
      {
        v29 = (const StringID *)re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet(v26, v24);
        v19 = re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet(v28, v24);
        if (!*(_QWORD *)(v4 + 128)
          || (v30 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) >> 27)),
              v31 = *(unsigned int *)(*(_QWORD *)(v4 + 136) + 4 * ((v30 ^ (v30 >> 31)) % *(unsigned int *)(v4 + 152))),
              (_DWORD)v31 == 0x7FFFFFFF))
        {
LABEL_34:
          v33 = 0;
          if (!v29)
            goto LABEL_40;
        }
        else
        {
          v32 = *(_QWORD *)(v4 + 144);
          while (v24 != *(_DWORD *)(v32 + (v31 << 6) + 12))
          {
            v31 = *(_DWORD *)(v32 + (v31 << 6) + 8) & 0x7FFFFFFF;
            if ((_DWORD)v31 == 0x7FFFFFFF)
              goto LABEL_34;
          }
          v33 = (float32x4_t *)(v32 + (v31 << 6) + 16);
          if (!v29)
            goto LABEL_40;
        }
        if (v19)
        {
          v19 = re::MeshNameMap::modelIndex(v27, (const re::StringID *)v19);
          if ((_DWORD)v19 == 0xFFFF)
          {
            v25 = (v25 + 1);
          }
          else
          {
            v2 = v19;
            if (v33)
            {
              v35 = v33[1].f32[0];
              v36 = v33[1].f32[1];
              v37 = v35 + v35;
              v38 = v36 + v36;
              v39 = v33[1].f32[2];
              v40 = v33[1].f32[3];
              v41 = v39 + v39;
              v42 = v35 * (float)(v35 + v35);
              v43 = v36 * (float)(v36 + v36);
              v44 = v39 * (float)(v39 + v39);
              v45 = v37 * v36;
              v46 = v37 * v39;
              v47 = v38 * v39;
              v48 = v38 * v40;
              v49 = v41 * v40;
              v50.i32[3] = 0;
              v50.f32[0] = 1.0 - (float)(v43 + v44);
              v50.f32[1] = v45 + v49;
              v50.f32[2] = v46 - v48;
              v51 = v37 * v40;
              v52 = 1.0 - (float)(v42 + v44);
              v53.i32[3] = 0;
              v53.f32[0] = v45 - v49;
              v53.f32[1] = v52;
              v53.f32[2] = v47 + v51;
              v54.i32[3] = 0;
              v54.f32[0] = v46 + v48;
              v54.f32[1] = v47 - v51;
              v54.f32[2] = 1.0 - (float)(v42 + v43);
              v55 = *v33;
              v56 = vmulq_n_f32(v53, *(float *)vshrq_n_u64(*(uint64x2_t *)v33, 0x20uLL).i32);
              v57 = v33[2];
              v57.i32[3] = 1.0;
              v114 = vmulq_n_f32(v50, COERCE_FLOAT(*v33));
              v115 = v56;
              v116 = vmulq_laneq_f32(v54, v55, 2);
              v117 = v57;
              v58 = &v114;
            }
            else
            {
              v58 = (float32x4_t *)v118;
            }
            v59 = v19;
            if (v105 <= v19)
              goto LABEL_90;
            v26 = v25;
            v60 = v23;
            v61 = *(_QWORD *)(v104 + 8 * v19);
            re::StringID::StringID((re::StringID *)&v119, v29);
            *(_QWORD *)buf = v119;
            *(_QWORD *)&buf[8] = v120;
            v119 = 0;
            v120 = &str_110;
            *(_QWORD *)&v134 = 0xFFFFFFFFLL;
            BYTE8(v134) = 0;
            HIDWORD(v134) = 1065353216;
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            v139 = 0u;
            v140 = 0u;
            v141 = 0u;
            re::DataArray<re::MeshModel>::tryGet(v103, v61);
            v62 = v58[1];
            v135 = *v58;
            v136 = v62;
            v63 = v58[3];
            v137 = v58[2];
            v138 = v63;
            *(_QWORD *)&v134 = v61;
            v107 &= 0xFFFFFF00;
            *((_QWORD *)&v134 + 1) = v107 | 0x3F80000000000000;
            re::StringID::destroyString((re::StringID *)&v119);
            *(_QWORD *)&v127[0] = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(v102, (uint64_t)buf);
            re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add((_QWORD *)(v4 + 176), v127);
            v23 = v123;
            if (v123 <= v24)
            {
LABEL_91:
              v121 = 0;
              v128 = 0u;
              v129 = 0u;
              memset(v127, 0, sizeof(v127));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v142 = 136315906;
              v143 = "operator[]";
              v144 = 1024;
              v145 = 858;
              v146 = 2048;
              v147 = v24;
              v148 = 2048;
              v149 = v23;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_92:
              *(_QWORD *)&v118[0] = 0;
              v136 = 0u;
              v137 = 0u;
              v134 = 0u;
              v135 = 0u;
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v127[0]) = 136315906;
              *(_QWORD *)((char *)v127 + 4) = "operator[]";
              WORD6(v127[0]) = 1024;
              *(_DWORD *)((char *)v127 + 14) = 468;
              WORD1(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 4) = v26;
              WORD6(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 14) = v2;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v64 = &v125;
            if ((v124 & 1) == 0)
              v64 = v126;
            *((_DWORD *)v64 + v24) = *(_DWORD *)(v4 + 192) - 1;
            re::StringID::StringID((re::StringID *)v127, v29);
            v65 = v58[1];
            v127[1] = *v58;
            v127[2] = v65;
            v66 = v58[3];
            v128 = v58[2];
            v129 = v66;
            v131 = 0;
            v130 = v2;
            v132 = 1065353216;
            re::DynamicArray<re::MeshAssetInstance>::add((_anonymous_namespace_ *)v110, (uint64_t *)v127);
            re::StringID::destroyString((re::StringID *)v127);
            re::MeshInstance::~MeshInstance((re::MeshInstance *)buf);
            v23 = v60;
            v25 = v26;
            v26 = v4 + 32;
            v28 = v4 + 80;
            v27 = v101;
          }
          v2 = 0x7FFFFFFFLL;
          goto LABEL_50;
        }
LABEL_40:
        v25 = (v25 + 1);
LABEL_50:
        if (++v24 == v23)
        {
          v20 = v99;
          v3 = v100;
          if ((int)v25 >= 1)
          {
            v67 = *re::ecsComponentsLogObjects((re *)v19);
            v19 = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v19)
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v25;
              _os_log_impl(&dword_224FE9000, v67, OS_LOG_TYPE_DEFAULT, "MeshSceneComponent has %d invalid instances", buf, 8u);
            }
          }
          break;
        }
      }
    }
    v68 = v113;
    v69 = v111;
    v70 = *(_QWORD *)(*(_QWORD *)v3 + 136);
    if (v70)
      v71 = (void *)(v70 + 8);
    else
      v71 = 0;
    inited = (re *)objc_initWeak(&location, v71);
    v73 = re::globalAllocators(inited);
    v74 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v73[2] + 32))(v73[2], 48, 8);
    *(_OWORD *)v74 = 0u;
    *((_OWORD *)v74 + 1) = 0u;
    *((_OWORD *)v74 + 2) = 0u;
    memset(buf, 0, sizeof(buf));
    *(_QWORD *)&v134 = 0;
    *((_QWORD *)&v134 + 1) = re::globalAllocators(v74)[2];
    v135.i64[0] = 0;
    re::FramePersistentPtr<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData,re::FrameManager>::reset((id *)(v4 + 640), &location, v74, (uint64_t)buf);
    if (v135.i64[0])
    {
      (**(void (***)(uint64_t))v135.i64[0])(v135.i64[0]);
      if ((uint8_t *)v135.i64[0] != buf)
        (*(void (**)(_QWORD))(**((_QWORD **)&v134 + 1) + 40))(*((_QWORD *)&v134 + 1));
    }
    objc_destroyWeak(&location);
    location = 0;
    v23 = *(_QWORD *)(v4 + 648);
    v77 = *(_QWORD *)(v4 + 648);
    v78 = *(_QWORD *)(v4 + 552);
    if (v78)
      v79 = *(unsigned int *)(*(_QWORD *)(v4 + 560) + 4 * v78 - 4);
    else
      v79 = 0;
    v80 = v106;
    if ((_DWORD)v106)
    {
      v81 = 0;
      v82 = 0;
      v24 = (unint64_t)v3 + 72;
      v83 = (uint64_t)v3 + 8;
      v108 = vdupq_n_s32(0x7F800000u);
      do
      {
        v26 = v123;
        if (v123 <= v82)
          goto LABEL_87;
        v84 = v126;
        if ((v124 & 1) != 0)
          v84 = &v125;
        v26 = *((unsigned int *)v84 + v82);
        if ((_DWORD)v26 != -1)
        {
          v2 = *(_QWORD *)(v4 + 192);
          if (v2 <= v26)
            goto LABEL_88;
          v85 = *(_QWORD *)(v4 + 208);
          if ((*(_DWORD *)(v85 + 8 * v26 + 4) & 0xFFFFFF) != 0)
          {
            v86 = re::DataArray<re::MeshInstance>::get(v24, *(_QWORD *)(v85 + 8 * v26));
            v87 = re::DataArray<re::MeshModel>::get(v83, *(_QWORD *)(v86 + 16));
            v2 = *(_QWORD *)(v23 + 8);
            if (v2 <= v26)
              goto LABEL_89;
            v88 = (_OWORD *)(*(_QWORD *)(v23 + 16) + 32 * v26);
            v89 = *(_OWORD *)(v87 + 32);
            *v88 = *(_OWORD *)(v87 + 16);
            v88[1] = v89;
            v90 = *(_QWORD *)(v87 + 56);
            if (v90)
            {
              v91 = 560 * v90;
              v92 = (__int128 *)(*(_QWORD *)(v87 + 64) + 432);
              v93 = 32 * v81;
              v80 = v106;
              while (1)
              {
                v26 = *(_QWORD *)(v77 + 32);
                if (v26 <= v81)
                  break;
                ++v81;
                v94 = (_OWORD *)(*(_QWORD *)(v77 + 40) + v93);
                v95 = *v92;
                v96 = v92[1];
                v92 += 35;
                *v94 = v95;
                v94[1] = v96;
                v93 += 32;
                v91 -= 560;
                if (!v91)
                  goto LABEL_81;
              }
              *(_QWORD *)&v118[0] = 0;
              v136 = 0u;
              v137 = 0u;
              v134 = 0u;
              v135 = 0u;
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v127[0]) = 136315906;
              *(_QWORD *)((char *)v127 + 4) = "operator[]";
              WORD6(v127[0]) = 1024;
              *(_DWORD *)((char *)v127 + 14) = 468;
              WORD1(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 4) = v81;
              WORD6(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 14) = v26;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_87:
              *(_QWORD *)&v118[0] = 0;
              v136 = 0u;
              v137 = 0u;
              v134 = 0u;
              v135 = 0u;
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v127[0]) = 136315906;
              *(_QWORD *)((char *)v127 + 4) = "operator[]";
              WORD6(v127[0]) = 1024;
              *(_DWORD *)((char *)v127 + 14) = 858;
              WORD1(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 4) = v82;
              WORD6(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 14) = v26;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_88:
              *(_QWORD *)&v118[0] = 0;
              v136 = 0u;
              v137 = 0u;
              v134 = 0u;
              v135 = 0u;
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v127[0]) = 136315906;
              *(_QWORD *)((char *)v127 + 4) = "operator[]";
              WORD6(v127[0]) = 1024;
              *(_DWORD *)((char *)v127 + 14) = 789;
              WORD1(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 4) = v26;
              WORD6(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 14) = v2;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_89:
              *(_QWORD *)&v118[0] = 0;
              v136 = 0u;
              v137 = 0u;
              v134 = 0u;
              v135 = 0u;
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v127[0]) = 136315906;
              *(_QWORD *)((char *)v127 + 4) = "operator[]";
              WORD6(v127[0]) = 1024;
              *(_DWORD *)((char *)v127 + 14) = 468;
              WORD1(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 4) = v26;
              WORD6(v127[1]) = 2048;
              *(_QWORD *)((char *)&v127[1] + 14) = v2;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_90:
              re::internal::assertLog((re::internal *)6, v34, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v59, v105);
              _os_crash();
              __break(1u);
              goto LABEL_91;
            }
            v80 = v106;
          }
          else
          {
            v2 = *(_QWORD *)(v23 + 8);
            if (v2 <= v26)
              goto LABEL_92;
            v97 = (int32x4_t *)(*(_QWORD *)(v23 + 16) + 32 * v26);
            v98.i64[0] = 0x7F0000007FLL;
            v98.i64[1] = 0x7F0000007FLL;
            *v97 = v108;
            v97[1] = v98;
          }
        }
LABEL_81:
        ++v82;
      }
      while (v82 != v80);
    }
    re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)v110);
    this = v122;
    if (v122)
    {
      if ((v124 & 1) == 0)
        return (uint64_t *)(*(uint64_t (**)(void))(*v122 + 40))();
    }
  }
  return this;
}

uint64_t re::ecs2::MeshSceneComponent::resetCachedInstances(re::ecs2::MeshSceneComponent *this, re::MeshManager *a2)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 26);
    v6 = 8 * v3;
    do
    {
      v7 = *v5++;
      re::MeshManager::destroyInstance((uint64_t *)a2, v7);
      v6 -= 8;
    }
    while (v6);
  }
  *((_QWORD *)this + 24) = 0;
  ++*((_DWORD *)this + 50);
  return re::MeshNameMap::deinit((re::ecs2::MeshSceneComponent *)((char *)this + 216));
}

uint64_t re::FramePersistentPtr<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED49108;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData>((re *)location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

uint64_t re::ecs2::MeshSceneComponentStateImpl::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
    ++*(_DWORD *)(result + 696);
  return result;
}

uint64_t re::ecs2::MeshSceneComponentStateImpl::didSetDirty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = re::ecs2::ComponentBucketsBase::component(*(_QWORD *)(a2 + 16), a3, a4);
  if (result)
    ++*(_DWORD *)(result + 696);
  return result;
}

BOOL re::ecs2::MeshSceneComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::MeshManager *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v8 = *(re::MeshManager **)(*(_QWORD *)(a1 + 8) + 104);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  v9 = v22;
  v10 = v23;
  v22 = a4;
  v23 = v9;
  v24 = v10;
  v11 = (unsigned __int16)v10;
  v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      v15 = *(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 16) + 176);
      v17 = (unint64_t *)(a3 + 32);
      if (!v16
        || (v17 = (unint64_t *)(a3 + 32), !*(_QWORD *)(v16 + 40))
        || (v17 = (unint64_t *)(a3 + 40),
            v18 = (unint64_t *)(a3 + 48),
            *(_DWORD *)(v15 + 696) != *(_DWORD *)(v15 + 700)))
      {
        re::ecs2::MeshSceneComponent::resetCachedInstances((re::ecs2::MeshSceneComponent *)v15, v8);
        v18 = v17;
      }
      v19 = v22;
      v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *v18);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::MeshSceneComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  re::MeshManager *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::ecs2::MeshSceneComponent *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  re::ecs2::ComponentBucketsBase *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v8 = *(re::MeshManager **)(*(_QWORD *)(a1 + 8) + 104);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v28, a5, 0);
  v9 = v28;
  v10 = v29;
  v28 = a4;
  v29 = v9;
  v30 = v10;
  v11 = (unsigned __int16)v10;
  v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    while (1)
    {
      v15 = *(re::ecs2::MeshSceneComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v29);
      v16 = *(_QWORD *)(*((_QWORD *)v15 + 2) + 176);
      v17 = *(_QWORD *)(v16 + 40);
      if (!v17)
        break;
      v18 = atomic_load((unsigned int *)(v17 + 704));
      if (v18 == 3)
      {
        re::ecs2::MeshSceneComponent::resetCachedInstances(v15, v8);
        v19 = v28;
        v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v29);
        v21 = (re::ecs2::ComponentBucketsBase *)a3[2];
        v22 = a3[4];
      }
      else
      {
        v23 = *(_QWORD *)(v16 + 40);
        if (!v23)
          break;
        v24 = atomic_load((unsigned int *)(v23 + 704));
        if (v24 != 2)
          break;
        re::ecs2::MeshSceneComponent::ensureCachedDataUpToDate((uint64_t *)v15, v8);
        v19 = v28;
        v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v29);
        v21 = (re::ecs2::ComponentBucketsBase *)a3[2];
        v22 = a3[6];
      }
      re::ecs2::ComponentBucketsBase::moveComponent(v21, v19, v20, v22);
LABEL_16:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v29);
      if (v29 == a5 && (unsigned __int16)v30 == 0xFFFF && WORD1(v30) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    re::AssetHandle::loadAsync((re::AssetHandle *)(v16 + 32));
    goto LABEL_16;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

void re::ecs2::MeshSceneSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  _QWORD v25[2];
  uint64_t v26;

  v25[0] = a3;
  v25[1] = a4;
  if (!*(_QWORD *)(a1 + 104))
    return;
  v5 = a1 + 152;
  v26 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 216)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 208), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 320, v6);
  v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  v8 = *(_QWORD *)(*v7 + 224);
  v9 = v7[3];
  v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40))
    v11 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, v25, v7, v9, v10, 0);
  else
    v11 = 0;
  v12 = v7[5];
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40))
    v11 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, v25, v7, v12, v13, 0);
  v14 = v7[6];
  v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (!*(_DWORD *)(v15 + 40))
  {
    if (!v11)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (((v11 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, v25, v7, v14, v15, 0)) & 1) != 0)LABEL_9:re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 320, v6);
LABEL_10:
  if (!*(_BYTE *)(a1 + 384))
    return;
  v16 = *(_QWORD *)(a1 + 328);
  v17 = *(_DWORD *)(a1 + 336);
  if (v16 >= 0xB)
  {
    if ((v17 & 1) != 0)
      v18 = (_QWORD *)(a1 + 344);
    else
      v18 = *(_QWORD **)(a1 + 352);
    v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        return;
    }
LABEL_28:
    v24 = *(re::ecs2::System **)(a1 + 368);
    if (!*((_BYTE *)v24 + 86))
      re::ecs2::System::queueToRun(v24, 0.0);
    return;
  }
  if ((v17 & 1) != 0)
  {
    v19 = (uint64_t *)(a1 + 344);
    if (!v16)
      return;
  }
  else
  {
    v19 = *(uint64_t **)(a1 + 352);
    if (!v16)
      return;
  }
  v21 = 0;
  v22 = 8 * v16;
  do
  {
    v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21)
    goto LABEL_28;
}

uint64_t re::ecs2::MeshSceneSystem::willAddSystemToECSService(re::ecs2::MeshSceneSystem *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::RenderManager>(v2);
  if (result)
  {
    v4 = *(_QWORD *)(result + 104);
    if (v4)
      v4 = *(_QWORD *)(result + 32);
  }
  else
  {
    v4 = 0;
  }
  *((_QWORD *)this + 13) = v4;
  return result;
}

uint64_t re::ecs2::MeshSceneSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  return this;
}

void re::ecs2::MeshSceneSystem::willAddSceneToECSService(re::ecs2::MeshSceneSystem *this, re::EventBus **a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  uint64_t v49;
  re *v50;
  re::EventBus *v51;
  _QWORD *v52;
  uint64_t v53;
  re::ecs2::Scene *v54;
  re::ecs2::Scene *v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58;
  _BYTE *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  int v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  unint64_t v73;
  __int16 v74;
  unint64_t v75;
  _OWORD v76[5];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v54 = (re::ecs2::Scene *)a2;
  v55 = (re::ecs2::Scene *)a2;
  v4 = (char *)this + 152;
  v5 = (re::ecs2::MeshSceneSystem *)((char *)this + 272);
  v6 = *((_QWORD *)this + 35);
  v7 = *((_DWORD *)this + 72);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 296);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 38);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 296);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 38);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v60 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 272, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v60);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSceneSystem *)((char *)this + 208), &v55, (uint64_t *)&v60);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v60);
    v15 = (char *)this + 320;
    v16 = v60;
    goto LABEL_49;
  }
LABEL_17:
  v67 = 0u;
  v60 = 0u;
  *(_QWORD *)&v61 = 0;
  *((_QWORD *)&v61 + 1) = -1;
  v62 = 0u;
  v63 = 0u;
  v64 = 0;
  v65 = 1;
  v66 = 0uLL;
  v17 = *((_QWORD *)this + 24);
  *(_QWORD *)&v67 = 0;
  v18 = *((_QWORD *)this + 20);
  DWORD2(v67) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 19, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 20);
  }
  if (v18 <= v17 >> 2)
  {
    v56 = 0;
    memset(v76, 0, sizeof(v76));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v68 = 136315906;
    v69 = "operator[]";
    v70 = 1024;
    v71 = 858;
    v72 = 2048;
    v73 = v17 >> 2;
    v74 = 2048;
    v75 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  if ((*((_BYTE *)this + 168) & 1) != 0)
    v19 = (char *)this + 176;
  else
    v19 = (char *)*((_QWORD *)this + 23);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 24);
  ++*((_DWORD *)this + 50);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v60;
  v23 = v61;
  v24 = v62;
  *(_QWORD *)(v21 + 48) = v63;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v63 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v60);
  v26 = *((_QWORD *)this + 24);
  if (!v26)
  {
LABEL_73:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v54, v55, v56);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::init(v27, (uint64_t)v4, (uint64_t)v55);
  *(_QWORD *)&v76[0] = *((_QWORD *)this + 24) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSceneSystem *)((char *)this + 208), &v55, (uint64_t *)v76);
  v28 = *((_QWORD *)this + 24);
  v29 = *((_QWORD *)this + 39);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 39) = v28;
  *(_QWORD *)&v60 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v60);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 39) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 288) & 1) != 0)
      v33 = (char *)this + 296;
    else
      v33 = (char *)*((_QWORD *)this + 38);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 35) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 24);
  v35 = *((_QWORD *)this + 45);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 45) = v34;
  *(_QWORD *)&v60 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MeshSceneSystem *)((char *)this + 320), v36, &v60);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 45) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 336) & 1) != 0)
      v39 = (char *)this + 344;
    else
      v39 = (char *)*((_QWORD *)this + 44);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 41) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v76[0];
  v15 = (char *)this + 320;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 384))
    goto LABEL_67;
  v40 = *((_QWORD *)this + 41);
  v41 = *((_DWORD *)this + 84);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 344);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 44);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        goto LABEL_67;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 46);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    goto LABEL_67;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 344);
    if (!v40)
      goto LABEL_67;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 44);
    if (!v40)
      goto LABEL_67;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
LABEL_67:
  v49 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 25), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v60 = this;
  *((_QWORD *)&v60 + 1) = re::ecs2::MeshSceneSystem::willRemoveComponents;
  *(_QWORD *)&v61 = 0;
  *((_QWORD *)&v61 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>,re::Slice<re::ecs2::MeshSceneComponent*>>::createSubscription<re::ecs2::MeshSceneSystem>(re::ecs2::MeshSceneSystem *,REEventHandlerResult (re::ecs2::MeshSceneSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>*,re::Slice<re::ecs2::MeshSceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>,re::Slice<re::ecs2::MeshSceneComponent*>>::Subscription const&,re::Slice<re::ecs2::MeshSceneComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v49 + 392), (uint64_t)&v60);
  v51 = a2[36];
  if (v51)
  {
    v58 = re::globalAllocators(v50)[2];
    v52 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v58 + 32))(v58, 32, 0);
    *v52 = &off_24ED48F70;
    v52[1] = this;
    v52[2] = re::ecs2::MeshSceneSystem::componentDidChangeHandler;
    v52[3] = 0;
    v59 = v52;
    *(_QWORD *)&v60 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v51, (uint64_t)v57, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    *((_QWORD *)&v60 + 1) = v53;
    re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::addNew((re::ecs2::MeshSceneSystem *)((char *)this + 392), (uint64_t *)&v54, &v60);
    if (v59)
    {
      (**(void (***)(_BYTE *))v59)(v59);
      if (v59 != v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 40))(v58);
    }
  }
}

uint64_t re::ecs2::MeshSceneSystem::willRemoveComponents(uint64_t a1, uint64_t a2, re::ecs2::MeshSceneComponent **a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v7;
  re::ecs2::MeshSceneComponent *v8;

  if (*(_QWORD *)(a1 + 104))
    v4 = a4 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v7 = 8 * a4;
    do
    {
      v8 = *a3++;
      re::ecs2::MeshSceneComponent::resetCachedInstances(v8, *(re::MeshManager **)(a1 + 104));
      v7 -= 8;
    }
    while (v7);
  }
  return 0;
}

_QWORD *re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::addNew(_anonymous_namespace_ *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::internalAdd(a1, a2, a3);
  else
    return (_QWORD *)(*((_QWORD *)a1 + 1) + 24 * v6 + 8);
}

uint64_t re::ecs2::MeshSceneSystem::componentDidChangeHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v2)
    ++*(_DWORD *)(v2 + 696);
  return 0;
}

uint64_t re::ecs2::MeshSceneSystem::willRemoveSceneFromECSService(re::ecs2::MeshSceneSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re::ecs2::ComponentBucketsBase *v16;
  uint64_t v17;
  uint64_t result;
  re::ecs2::Scene *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v19 = a2;
  *(_QWORD *)&v20 = a2;
  v4 = (uint64_t *)((char *)this + 208);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 26, &v20);
  if (v5 != -1)
  {
    v6 = *((_QWORD *)this + 27) + 16 * v5;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 272, *(_QWORD *)(v6 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 320, *(_QWORD *)(v6 + 8));
    v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 152, *(_QWORD *)(v6 + 8));
    if (*v7)
    {
      v8 = v7;
      *v7 = 0;
      v9 = v7 + 1;
      v10 = *(_QWORD *)(v7[1] + 288);
      if (v10)
      {
        v11 = v7[12];
        if (v11)
        {
          for (i = 0; i != v11; ++i)
          {
            v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
            re::EventBus::unsubscribe(v10, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
      v14 = 0;
      v15 = v8 + 3;
      do
      {
        v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
        if (*(_QWORD *)v16)
          re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
        v15[v14++] = -1;
      }
      while (v14 != 4);
      *v9 = 0;
      v9[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v4, &v20);
  }
  v17 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v20 = this;
  *((_QWORD *)&v20 + 1) = re::ecs2::MeshSceneSystem::willRemoveComponents;
  v21 = 0;
  v22 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>,re::Slice<re::ecs2::MeshSceneComponent*>>::createSubscription<re::ecs2::MeshSceneSystem>(re::ecs2::MeshSceneSystem *,REEventHandlerResult (re::ecs2::MeshSceneSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>*,re::Slice<re::ecs2::MeshSceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>,re::Slice<re::ecs2::MeshSceneComponent*>>::Subscription const&,re::Slice<re::ecs2::MeshSceneComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v17 + 392, &v20);
  result = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)this + 49, (uint64_t *)&v19);
  if (result != -1)
  {
    if (*((_QWORD *)v19 + 36))
      re::EventBus::unsubscribe(*((_QWORD *)v19 + 36), *(_QWORD *)(*((_QWORD *)this + 50) + 24 * result + 8), *(_QWORD *)(*((_QWORD *)this + 50) + 24 * result + 16));
    return re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::remove((uint64_t *)this + 49, (uint64_t *)&v19);
  }
  return result;
}

BOOL re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    v9 = a1[2];
    v10 = *(_QWORD *)(a1[1] + 24 * v3);
    v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[5] ^= (v11 >> 31) ^ v11;
    v12 = a1[4];
    if (v7)
      ++v12;
    v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2)
      re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::resize(a1, 0);
  }
  return v4 != -1;
}

uint64_t re::ecs2::MeshSceneComponentStateImpl::dependsOnComponents(re::ecs2::MeshSceneComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshSceneComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::MeshSceneSystem::~MeshSceneSystem(re::ecs2::MeshSceneSystem *this)
{
  uint64_t v2;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 392);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 19);
  *((_QWORD *)this + 14) = &off_24ED48E50;
  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    if (*((_QWORD *)this + 17))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 18));
      *((_QWORD *)this + 17) = 0;
      *((_QWORD *)this + 18) = 0;
    }
    *((_QWORD *)this + 16) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 392);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 19);
  *((_QWORD *)this + 14) = &off_24ED48E50;
  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    if (*((_QWORD *)this + 17))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 18));
      *((_QWORD *)this + 17) = 0;
      *((_QWORD *)this + 18) = 0;
    }
    *((_QWORD *)this + 16) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MeshSceneSystem::typeInfo(re::ecs2::MeshSceneSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSceneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSceneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSceneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSceneSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::internal::CallableMemFn<re::ecs2::MeshSceneSystem,REEventHandlerResult (re::ecs2::MeshSceneSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshSceneSystem,REEventHandlerResult (re::ecs2::MeshSceneSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshSceneSystem,REEventHandlerResult (re::ecs2::MeshSceneSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED48F70;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshSceneSystem,REEventHandlerResult (re::ecs2::MeshSceneSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED48F70;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshSceneSystem,REEventHandlerResult (re::ecs2::MeshSceneSystem::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

_QWORD *re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, _DWORD *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v8 = (re::IntrospectionBase *)re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addOrReplace(a4, a5, v10);
  re::StringID::destroyString((re::StringID *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 12, *(_QWORD *)(a2 + 16) + 32 * v10 + 16);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v5 + 8));
          v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 32;
      }
      while (v4 < v3);
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 12, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 12) = *a4;
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  v14 = *a5;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v13 + 16) & 0xFFFFFFFFFFFFFFFELL | *a5 & 1;
  *(_QWORD *)(v13 + 16) = *a5 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  *(_QWORD *)(v13 + 24) = a5[1];
  *a5 = 0;
  a5[1] = (uint64_t)&str_110;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v5 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        ++v4;
        v5 += 32;
      }
      while (v4 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addOrReplace(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v21[2];

  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v19 = re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 16) + 32 * v19;
    return v18 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_DWORD *)(v11 + 32 * v10 + 12) != (_DWORD)v6)
  {
    v12 = *(_DWORD *)(v11 + 32 * v10 + 8);
    v10 = v12 & 0x7FFFFFFF;
    if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v13 = v11 + 32 * v10;
  v14 = *a3;
  v15 = a3[1];
  *a3 = 0;
  a3[1] = (uint64_t)&str_110;
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 24) = v15;
  v21[0] = v14 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  v21[1] = v17;
  re::StringID::destroyString((re::StringID *)v21);
  ++*(_DWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 16) + 32 * v10;
  return v18 + 16;
}

BOOL re::internal::less<unsigned int>(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

void re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a1);
  return re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, _DWORD *a4)
{
  uint64_t *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (uint64_t *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v6 + 32 * v4 + 12) != (_DWORD)v2)
  {
    while (1)
    {
      v4 = *(_DWORD *)(v6 + 32 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v6 + 32 * v4 + 12) == (_DWORD)v2)
        return v6 + 32 * v4 + 16;
    }
    return 0;
  }
  return v6 + 32 * v4 + 16;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 12;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, _DWORD *a5)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)&v10 = 0x3F8000003F800000;
  *((_QWORD *)&v10 + 1) = 1065353216;
  v11 = 0;
  v12 = 0x3F80000000000000;
  v13 = 0;
  v14 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 16;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + (v10 << 6) + 12, *(_QWORD *)(a2 + 16) + (v10 << 6) + 16);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + (v10 << 6) + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 12, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + (v9 << 6) + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6)) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6) + 12) = *a4;
  v13 = (_OWORD *)(*(_QWORD *)(a1 + 16) + (v9 << 6));
  v14 = *a5;
  v15 = a5[2];
  v13[2] = a5[1];
  v13[3] = v15;
  v13[1] = v14;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = v3 << 6;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 64;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addOrReplace(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;

  v6 = *a2;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v16 = re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 16);
    v10 = v16;
    return v15 + (v10 << 6) + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_DWORD *)(v11 + (v10 << 6) + 12) != (_DWORD)v6)
  {
    v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = (_OWORD *)(v11 + (v10 << 6));
  v13 = *a3;
  v14 = a3[2];
  v12[2] = a3[1];
  v12[3] = v14;
  v12[1] = v13;
  ++*(_DWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 16);
  return v15 + (v10 << 6) + 16;
}

void re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit(a1);
  return re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit(a1);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, _DWORD *a4)
{
  __int128 *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (__int128 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v6 + (v4 << 6) + 12) != (_DWORD)v2)
  {
    while (1)
    {
      v4 = *(_DWORD *)(v6 + (v4 << 6) + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v6 + (v4 << 6) + 12) == (_DWORD)v2)
        return v6 + (v4 << 6) + 16;
    }
    return 0;
  }
  return v6 + (v4 << 6) + 16;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + ((unint64_t)v10++ << 6) + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 16;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 12;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned int,re::GenericSRT<float>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::make::shared::unsafelyInplace<re::ecs2::MeshSceneComponent>(_QWORD *a1)
{
  re *inited;

  bzero(a1, 0x2C0uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = &off_24ED48E00;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_DWORD *)a1 + 16) = 0;
  *(_QWORD *)((char *)a1 + 68) = 0x7FFFFFFFLL;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_DWORD *)a1 + 28) = 0;
  *(_QWORD *)((char *)a1 + 116) = 0x7FFFFFFFLL;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_DWORD *)a1 + 40) = 0;
  *(_QWORD *)((char *)a1 + 164) = 0x7FFFFFFFLL;
  a1[26] = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  *((_DWORD *)a1 + 50) = 0;
  *((_DWORD *)a1 + 54) = 0;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *(_OWORD *)((char *)a1 + 252) = 0u;
  *(_QWORD *)((char *)a1 + 268) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 78) = 0;
  *(_OWORD *)(a1 + 35) = 0u;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_QWORD *)((char *)a1 + 316) = 0x7FFFFFFFLL;
  a1[79] = 0;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 51) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 55) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_OWORD *)(a1 + 59) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  inited = (re *)objc_initWeak((id *)a1 + 80, 0);
  a1[81] = 0;
  a1[85] = re::globalAllocators(inited)[2];
  a1[86] = 0;
  a1[87] = 0;
  return a1;
}

re::ecs2::MeshSceneSystem *re::ecs2::MeshSceneSystem::MeshSceneSystem(re::ecs2::MeshSceneSystem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *v2 = &off_24ED48EB8;
  v2[13] = 0;
  v2[14] = &off_24ED48E50;
  v3 = v2 + 14;
  v2[15] = v2;
  v2[17] = 0;
  v2[18] = 0;
  v2[16] = 0;
  v10 = 1;
  v11[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9 = v11;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 16), (uint64_t)&v9);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 1;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 50) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 72) = 1;
  *((_QWORD *)this + 41) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_DWORD *)this + 84) = 1;
  *(_OWORD *)((char *)this + 369) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 34, 0);
  *((_DWORD *)this + 72) += 2;
  *((_QWORD *)this + 39) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 40, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = this;
  *((_QWORD *)this + 47) = v3;
  *((_BYTE *)this + 384) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  LOBYTE(v10) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v9);
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  return this;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::MeshSceneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshSceneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

_QWORD *re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<unsigned int,8ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 8;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 4 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 62)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 4, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 4 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 4 * a2, 4);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 4 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned int,re::StringID,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::tryGet(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v5 + 32 * v3 + 12) != a2)
  {
    while (1)
    {
      v3 = *(_DWORD *)(v5 + 32 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_DWORD *)(v5 + 32 * v3 + 12) == a2)
        return v5 + 32 * v3 + 16;
    }
    return 0;
  }
  return v5 + 32 * v3 + 16;
}

re *re::internal::destroyPersistent<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData>(re *result)
{
  re *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    v3 = *((_QWORD *)v1 + 3);
    if (v3)
    {
      if (*((_QWORD *)v1 + 4))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)v1 + 5));
        *((_QWORD *)v1 + 4) = 0;
        *((_QWORD *)v1 + 5) = 0;
      }
      *((_QWORD *)v1 + 3) = 0;
    }
    if (*(_QWORD *)v1)
    {
      if (*((_QWORD *)v1 + 1))
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v1 + 40))(*(_QWORD *)v1, *((_QWORD *)v1 + 2));
        *((_QWORD *)v1 + 1) = 0;
        *((_QWORD *)v1 + 2) = 0;
      }
      *(_QWORD *)v1 = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, re **a2)
{
  return re::internal::destroyPersistent<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData>(*a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED49108;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED49108;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSceneComponent::FramePersistentMeshSceneData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

uint64_t re::ecs2::ComponentBucketsBase::component(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t result;

  v4 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1 + 8, a2);
  result = re::DataArray<re::ecs2::Component *>::tryGet(v4, a3);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED49160;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED491B8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED49210;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED49268;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED49160;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED491B8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED49210;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED49268;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED49160;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED49160;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED491B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED491B8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED49210;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED49210;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED49268;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED49268;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSceneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>,re::Slice<re::ecs2::MeshSceneComponent*>>::createSubscription<re::ecs2::MeshSceneSystem>(re::ecs2::MeshSceneSystem *,REEventHandlerResult (re::ecs2::MeshSceneSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>*,re::Slice<re::ecs2::MeshSceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MeshSceneComponent>,re::Slice<re::ecs2::MeshSceneComponent*>>::Subscription const&,re::Slice<re::ecs2::MeshSceneComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  _QWORD *result;
  unint64_t v22;
  unint64_t v23;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = *a3;
  v17 = 3 * (v13 + 16 * v11);
  v18 = *((_QWORD *)a1 + 1) + 8 * v17;
  *(_QWORD *)v18 = *a2;
  *(_OWORD *)(v18 + 8) = v16;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  v20 = (unint64_t *)(*((_QWORD *)a1 + 1) + 8 * v17);
  v22 = *v20;
  result = v20 + 1;
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  uint64_t v23;
  _OWORD v24[4];

  v4 = a1[7];
  memset(v24, 0, sizeof(v24));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v24, v4, a2);
  v22[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v22[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v23 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::internalAdd(v24, *(_QWORD *)(v22[0] + 8) + 24 * v12, *(_QWORD *)(v22[0] + 8) + 24 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v22);
        v12 = v23;
      }
      while (v23 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v14 = *((_QWORD *)&v24[3] + 1);
  *((_QWORD *)&v24[3] + 1) = a1[7];
  result = *((_QWORD *)&v24[3] + 1);
  v15 = v24[0];
  v16 = v24[1];
  *(_QWORD *)&v24[1] = v6;
  v17 = *a1;
  v18 = a1[1];
  *(_QWORD *)&v24[0] = *a1;
  *((_QWORD *)&v24[0] + 1) = v18;
  v19 = v24[2];
  v20 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v24[3];
  a1[7] = v14;
  *(_OWORD *)((char *)&v24[2] + 8) = v20;
  v21 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v15;
  *((_OWORD *)a1 + 1) = v16;
  *((_OWORD *)a1 + 2) = v19;
  *(_OWORD *)((char *)&v24[1] + 8) = v21;
  if (result)
  {
    if (v18)
      *((_QWORD *)&v24[0] + 1) = 0;
    if (v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_LatencyEventsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254107FD8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254107FD8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254107FF8, 0);
    *(uint64_t *)((char *)&qword_254108008 + 6) = 0;
    qword_254108008 = 0;
    qword_254108018 = 0;
    qword_254108020 = 0xFFFFFFFFLL;
    qword_254107FF8 = (uint64_t)&off_24ED7DAA8;
    qword_254108028 = (uint64_t)"LatencyEventsComponent";
    dword_254108030 = 0;
    xmmword_254108038 = 0u;
    unk_254108048 = 0u;
    xmmword_254108058 = 0u;
    qword_254108068 = 0;
    __cxa_guard_release(&qword_254107FD8);
  }
  return &qword_254107FF8;
}

void re::ecs2::initInfo_LatencyEventsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x897E3A40551A864CLL;
  v18[1] = "LatencyEventsComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_163);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_163);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254107FE0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint64_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "nisFrameID";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254107FE8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint64_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "eventMask";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254107FF0 = v16;
      __cxa_guard_release(&_MergedGlobals_163);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254107FE0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::LatencyEventsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::LatencyEventsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LatencyEventsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LatencyEventsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::LatencyEventsComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED492C0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::LatencyEventsComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::LatencyEventsComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED492C0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::LatencyEventsComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_LatencyEventsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LatencyEventsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LatencyEventsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LatencyEventsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LatencyEventsComponent>, this);
}

void re::ecs2::LatencyEventsComponent::addLatencyEvent(re::ecs2::LatencyEventsComponent *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  re::ecs2::NetworkComponentInfo *v7;
  const re::ecs2::ComponentTypeBase *v8;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v7 = (re::ecs2::NetworkComponentInfo *)(*(_QWORD *)(v3 + 200) + 112);
    v8 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::LatencyEventsComponent *))(*(_QWORD *)this + 40))(this);
    if ((re::ecs2::NetworkComponentInfo::isDirty(v7, v8, 3) & 1) != 0)
    {
      if (re::internal::enableSignposts(0, 0))
        kdebug_trace();
    }
    else
    {
      *((_QWORD *)this + 4) = a3;
      re::ecs2::LatencyEventsComponent::markComponentDirty(this);
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 5) |= a2;
  }
}

void re::ecs2::LatencyEventsComponent::markComponentDirty(re::ecs2::LatencyEventsComponent *this)
{
  re::ecs2::NetworkComponent *v2;

  if (*((_QWORD *)this + 2))
  {
    if (re::internal::enableSignposts(0, 0))
      kdebug_trace();
    v2 = *(re::ecs2::NetworkComponent **)(*((_QWORD *)this + 2) + 200);
    if (v2)
      re::ecs2::NetworkComponent::markDirty(v2, this);
  }
}

void re::ecs2::LatencyEventsComponent::~LatencyEventsComponent(re::ecs2::LatencyEventsComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t *re::ecs2::allocInfo_DrawWorldComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_164);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_164))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108098, 0);
    *(uint64_t *)((char *)&qword_2541080A8 + 6) = 0;
    qword_2541080A8 = 0;
    qword_2541080B8 = 0;
    qword_2541080C0 = 0xFFFFFFFFLL;
    qword_254108098 = (uint64_t)&off_24ED7DAA8;
    qword_2541080C8 = (uint64_t)"DrawWorldComponent";
    dword_2541080D0 = 0;
    unk_2541080D8 = 0u;
    unk_2541080E8 = 0u;
    unk_2541080F8 = 0u;
    qword_254108108 = 0;
    __cxa_guard_release(&_MergedGlobals_164);
  }
  return &qword_254108098;
}

void re::ecs2::initInfo_DrawWorldComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x563E5C08B640681ELL;
  v14[1] = "DrawWorldComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254108078);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254108078);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254108088 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_int((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "drawOrder";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254108090 = v12;
      __cxa_guard_release(&qword_254108078);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254108088;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DrawWorldComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DrawWorldComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DrawWorldComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DrawWorldComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::DrawWorldComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED493D0;
  *(_DWORD *)(v3 + 28) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::DrawWorldComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::DrawWorldComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED493D0;
  *(_DWORD *)(v1 + 28) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DrawWorldComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DrawWorldComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawWorldComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DrawWorldComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DrawWorldComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DrawWorldComponent>, this);
}

uint64_t *re::allocInfo_DrawWorldSystem(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254108080);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254108080))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108110, 0);
    *(uint64_t *)((char *)&qword_254108120 + 6) = 0;
    qword_254108120 = 0;
    qword_254108130 = 0;
    qword_254108138 = 0xFFFFFFFFLL;
    qword_254108110 = (uint64_t)&off_24ED7DAA8;
    qword_254108140 = (uint64_t)"DrawWorldSystem";
    dword_254108148 = 0;
    xmmword_254108150 = 0u;
    unk_254108160 = 0u;
    xmmword_254108170 = 0u;
    qword_254108180 = 0;
    __cxa_guard_release(&qword_254108080);
  }
  return &qword_254108110;
}

void re::initInfo_DrawWorldSystem(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xB39C1CA077E08BALL;
  v5[1] = "DrawWorldSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_DrawWorldSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::DrawWorldSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::DrawWorldSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::DrawWorldSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::DrawWorldSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::DrawWorldSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::DrawWorldSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::DrawWorldSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED49340;
  return result;
}

void *re::internal::defaultDestruct<re::DrawWorldSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::DrawWorldSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED49340;
  return result;
}

void *re::internal::defaultDestructV2<re::DrawWorldSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::introspect_DrawWorldSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawWorldSystem", (uint64_t (*)(re::internal *))re::allocInfo_DrawWorldSystem, (re::IntrospectionBase *(*)(void))re::initInfo_DrawWorldSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DrawWorldSystem>, this);
}

uint64_t re::DrawWorldSystem::updateScenes(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  __guard *v7;
  _QWORD *v8;
  uint64_t v9;
  re::ecs2::Entity *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t PerspectiveCameraInScene;
  uint64_t OrthographicCameraInScene;
  uint64_t CustomMatrixCameraInScene;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  const re::ecs2::Scene **v21;
  const re::ecs2::Scene **v22;
  _BOOL4 v23;
  re::RenderFrameData *v24;
  const re::ecs2::Scene **v25;
  const re::ecs2::Scene *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  re::DynamicString **v37;
  float32x4_t v38;
  const re::ecs2::Scene *v39;
  BOOL v40;
  uint64_t v41;
  _QWORD v42[2];
  float32x4_t v43;
  uint64_t v44;
  _QWORD v45[8];
  _QWORD v46[3];
  int v47;
  int v48;
  uint64_t v49;
  _BYTE v50[16];
  uint64_t v51[2];
  float32x4_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = result;
    v5 = *(_QWORD ***)a2;
    v6 = *(_QWORD *)a2 + 8 * v3;
    v35 = result;
    v34 = v6;
    while (1)
    {
      v8 = *v5;
      if (*v5)
        break;
LABEL_52:
      if (++v5 == (_QWORD **)v6)
        return result;
    }
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v51);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50, 3017, v4);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 25), (const re::ecs2::ComponentTypeBase *)v7[430]);
    if (!v9 || !*(_QWORD *)(v9 + 24))
    {
      v10 = re::ecs2::ComponentHelper::privateSceneDataEntity((re::ecs2::ComponentHelper *)v8, (re::ecs2::Scene *)1);
      re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)v10 + 32), (const re::ecs2::ComponentTypeBase *)v7[430]);
    }
    v11 = *(_QWORD *)(v4 + 104);
    if (!v11 || (*(_BYTE *)(v11 + 424) & 0x10) == 0 || (v12 = *(_QWORD *)(v4 + 112)) == 0)
    {
LABEL_51:
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50);
      result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v51);
      goto LABEL_52;
    }
    v13 = *(_QWORD *)(v12 + 104);
    if (v13)
      v37 = (re::DynamicString **)re::RenderFrameBox::get(v13 + 344, 0xFFFFFFFFFFFFFFFuLL);
    else
      v37 = 0;
    if (re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene((uint64_t)v8))
    {
      PerspectiveCameraInScene = re::ecs2::PerspectiveCameraComponent::firstPerspectiveCameraInScene((uint64_t)v8);
      re::ecs2::PerspectiveCameraComponent::calculateWorldPose(PerspectiveCameraInScene, 0, (uint64_t)&v43);
    }
    else if (re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene((uint64_t)v8))
    {
      OrthographicCameraInScene = re::ecs2::OrthographicCameraComponent::firstOrthographicCameraInScene((uint64_t)v8);
      re::ecs2::OrthographicCameraComponent::calculateWorldPose(OrthographicCameraInScene, 0, (uint64_t)&v43);
    }
    else
    {
      if (!re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene((uint64_t)v8))
      {
        v36 = 1;
        goto LABEL_20;
      }
      CustomMatrixCameraInScene = re::ecs2::CustomMatrixCameraComponent::firstCustomMatrixCameraInScene((uint64_t)v8);
      re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(CustomMatrixCameraInScene, 0, &v43);
    }
    v36 = 0;
    v52 = v43;
LABEL_20:
    v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 136) + 24))(*(_QWORD *)(v4 + 136));
    re::ecs2::WorldRootProvider::worldIds((re::ecs2::WorldRootProvider *)&v49, (uint64_t)&v43);
    v17 = v47;
    if (v47)
    {
      v2 = v48;
      if (v48)
      {
        v18 = 0;
        v19 = (int *)v46[2];
        while (1)
        {
          v20 = *v19;
          v19 += 4;
          if (v20 < 0)
            break;
          if (v48 == ++v18)
          {
            LODWORD(v18) = v48;
            break;
          }
        }
        LODWORD(v6) = v18;
      }
      else
      {
        LODWORD(v6) = 0;
      }
      v22 = (const re::ecs2::Scene **)v46;
      v21 = (const re::ecs2::Scene **)v46;
    }
    else
    {
      v21 = (const re::ecs2::Scene **)v45;
      v22 = (const re::ecs2::Scene **)&v45[v44];
    }
    v23 = v21 != v22;
    if (v47)
      v23 = v2 != v6;
    if (v23)
    {
      v24 = (re::RenderFrameData *)(v37 + 33);
      do
      {
        v25 = v21;
        if (v17)
          v25 = (const re::ecs2::Scene **)((char *)v21[2] + 16 * v6 + 8);
        v26 = *v25;
        re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, *v25, v37, v42);
        v41 = v42[0] >> 1;
        v38.i64[0] = v42[1];
        re::StringID::StringID((re::StringID *)&v38.u32[2], (const StringID *)(v8[13] + 272));
        v39 = v26;
        v27 = v8[47];
        if (v27)
          v28 = *(_QWORD *)(v27 + 24);
        else
          v28 = 1;
        v40 = v28 == 1;
        v29 = re::RenderFrameData::stream(v24, (const re::WeakStringID *)&v41);
        (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v29 + 48) + 504))(*(_QWORD *)(v29 + 48), &v38);
        re::StringID::destroyString((re::StringID *)&v38.u32[2]);
        if ((v36 & 1) == 0)
        {
          v41 = v42[0] >> 1;
          v38 = v52;
          v30 = re::RenderFrameData::stream(v24, (const re::WeakStringID *)&v41);
          (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v30 + 48) + 912))(*(_QWORD *)(v30 + 48), &v38);
        }
        re::StringID::destroyString((re::StringID *)v42);
        if (v17)
        {
          v31 = v6 + 1;
          do
          {
            LODWORD(v6) = v31;
            if (v31 >= *((_DWORD *)v21 + 8))
              break;
            v32 = *((_DWORD *)v21[2] + 4 * v31++);
          }
          while ((v32 & 0x80000000) == 0);
        }
        else
        {
          ++v21;
        }
        v33 = v21 != v22;
        if (v17)
          v33 = v2 != (_DWORD)v6;
      }
      while (v33);
    }
    re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)&v43);
    v6 = v34;
    v4 = v35;
    goto LABEL_51;
  }
  return result;
}

void re::DrawWorldSystem::~DrawWorldSystem(re::DrawWorldSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::DrawWorldSystem::typeInfo(re::DrawWorldSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DrawWorldSystem", (uint64_t (*)(re::internal *))re::allocInfo_DrawWorldSystem, (re::IntrospectionBase *(*)(void))re::initInfo_DrawWorldSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::DrawWorldSystem>, 0);
}

void re::ecs2::DrawWorldComponent::~DrawWorldComponent(re::ecs2::DrawWorldComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id re::internal::defaultRetain<re::DrawWorldSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::DrawWorldSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 96);
  if (*(_QWORD *)(a1 + 96))
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(a1 + 96));
  *(_QWORD *)(a1 + 16) = 0;
  ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)a1 = 0;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v2);
  *(_QWORD *)(a1 + 16) = 0;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

_OWORD *re::ecs2::SceneSpaceRootComponent::setSceneToImmersiveTransform(_OWORD *result, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;

  if ((vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(*a2), (int8x16_t)vcgezq_f32(*a2)), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[1]), (int8x16_t)vcgezq_f32(a2[1]))), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[2]), (int8x16_t)vcgezq_f32(a2[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[3]), (int8x16_t)vcgezq_f32(a2[3])))))) & 1) != 0)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) SceneSpaceRoot cannot have NaN transform", "!matrix.containsNaN()", "setSceneToImmersiveTransform", 17);
    result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    v2 = *a2;
    v3 = a2[1];
    v4 = a2[3];
    result[4] = a2[2];
    result[5] = v4;
    result[2] = v2;
    result[3] = v3;
  }
  return result;
}

_QWORD *re::ecs2::SceneSpaceRootSystem::willAddSceneToECSService(_QWORD *this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  uint64_t v5;
  re::ecs2::Scene *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (a2)
  {
    v2 = (uint64_t)this;
    v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v7 = v2;
    v8 = re::ecs2::SceneSpaceRootSystem::didAddSceneSpaceRootComponent;
    v9 = 0;
    v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneSpaceRootSystem>(re::ecs2::SceneSpaceRootSystem *,REEventHandlerResult (re::ecs2::SceneSpaceRootSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 128), (uint64_t)&v7);
    v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v7 = v2;
    v8 = re::ecs2::SceneSpaceRootSystem::didAddImmersiveSpaceTrackerComponent;
    v9 = 0;
    v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneSpaceRootSystem>(re::ecs2::SceneSpaceRootSystem *,REEventHandlerResult (re::ecs2::SceneSpaceRootSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 128), (uint64_t)&v7);
    v7 = v2;
    v8 = re::ecs2::SceneSpaceRootSystem::willRemoveImmersiveSpaceTrackerComponent;
    v9 = 0;
    v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneSpaceRootSystem>(re::ecs2::SceneSpaceRootSystem *,REEventHandlerResult (re::ecs2::SceneSpaceRootSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 392), (uint64_t)&v7);
    return std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__emplace_unique_key_args<re::ecs2::Scene *,re::ecs2::Scene * const&>(v2 + 104, &v6, &v6);
  }
  return this;
}

uint64_t re::ecs2::SceneSpaceRootSystem::didAddSceneSpaceRootComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (_QWORD *)(a1 + 120);
  while (1)
  {
    v6 = (_QWORD *)*v6;
    if (!v6)
      break;
    if (*(_QWORD *)(re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v6[2] + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 24))
    {
      if (a4)
      {
        v7 = 8 * a4;
        do
        {
          v8 = *a3++;
          *(_BYTE *)(v8 + 97) = 1;
          v7 -= 8;
        }
        while (v7);
      }
      return 0;
    }
  }
  return 0;
}

uint64_t re::ecs2::SceneSpaceRootSystem::didAddImmersiveSpaceTrackerComponent(uint64_t a1)
{
  _QWORD *i;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  for (i = *(_QWORD **)(a1 + 120); i; i = (_QWORD *)*i)
  {
    v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(i[2] + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(uint64_t **)(v2 + 40);
      v5 = 8 * v3;
      do
      {
        v6 = *v4++;
        *(_BYTE *)(v6 + 97) = 1;
        v5 -= 8;
      }
      while (v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::SceneSpaceRootSystem::willRemoveImmersiveSpaceTrackerComponent(uint64_t a1)
{
  _QWORD *i;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  for (i = *(_QWORD **)(a1 + 120); i; i = (_QWORD *)*i)
  {
    v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(i[2] + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      v4 = *(uint64_t **)(v2 + 40);
      v5 = 8 * v3;
      do
      {
        v6 = *v4++;
        *(_BYTE *)(v6 + 97) = 0;
        v5 -= 8;
      }
      while (v5);
    }
  }
  return 0;
}

uint64_t *re::ecs2::SceneSpaceRootSystem::willRemoveSceneFromECSService(uint64_t *this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  uint64_t v5;
  re::ecs2::Scene *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (a2)
  {
    v2 = (uint64_t)this;
    v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v7 = v2;
    *((_QWORD *)&v7 + 1) = re::ecs2::SceneSpaceRootSystem::didAddSceneSpaceRootComponent;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneSpaceRootSystem>(re::ecs2::SceneSpaceRootSystem *,REEventHandlerResult (re::ecs2::SceneSpaceRootSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 128, &v7);
    v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v7 = v2;
    *((_QWORD *)&v7 + 1) = re::ecs2::SceneSpaceRootSystem::didAddImmersiveSpaceTrackerComponent;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneSpaceRootSystem>(re::ecs2::SceneSpaceRootSystem *,REEventHandlerResult (re::ecs2::SceneSpaceRootSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 128, &v7);
    *(_QWORD *)&v7 = v2;
    *((_QWORD *)&v7 + 1) = re::ecs2::SceneSpaceRootSystem::willRemoveImmersiveSpaceTrackerComponent;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneSpaceRootSystem>(re::ecs2::SceneSpaceRootSystem *,REEventHandlerResult (re::ecs2::SceneSpaceRootSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 392, &v7);
    return std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__erase_unique<re::ecs2::Scene *>((_QWORD *)(v2 + 104), &v6);
  }
  return this;
}

uint64_t *re::ecs2::allocInfo_SceneSpaceRootComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_165);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_165))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541081A8, 0);
    *(uint64_t *)((char *)&qword_2541081B8 + 6) = 0;
    qword_2541081B8 = 0;
    qword_2541081C8 = 0;
    qword_2541081D0 = 0xFFFFFFFFLL;
    qword_2541081A8 = (uint64_t)&off_24ED7DAA8;
    qword_2541081D8 = (uint64_t)"SceneSpaceRootComponent";
    dword_2541081E0 = 0;
    xmmword_2541081E8 = 0u;
    unk_2541081F8 = 0u;
    xmmword_254108208 = 0u;
    qword_254108218 = 0;
    __cxa_guard_release(&_MergedGlobals_165);
  }
  return &qword_2541081A8;
}

void re::ecs2::initInfo_SceneSpaceRootComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x624A17EA652AA8C2;
  v10[1] = "SceneSpaceRootComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254108198);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254108198);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254108190 = v8;
      __cxa_guard_release(&qword_254108198);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254108190;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneSpaceRootComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneSpaceRootComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneSpaceRootComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneSpaceRootComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::ecs2::SceneSpaceRootComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED494D8;
  *(_OWORD *)(v3 + 32) = xmmword_2260E5F10;
  *(_OWORD *)(v3 + 48) = xmmword_2260E5F20;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = xmmword_2260E5F40;
  *(_OWORD *)(v3 + 80) = xmmword_2260E5D70;
  *(_WORD *)(v3 + 96) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::SceneSpaceRootComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::SceneSpaceRootComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED494D8;
  *(_OWORD *)(v1 + 32) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 48) = xmmword_2260E5F20;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 80) = xmmword_2260E5D70;
  *(_WORD *)(v1 + 96) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::SceneSpaceRootComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SceneSpaceRootComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneSpaceRootComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneSpaceRootComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneSpaceRootComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneSpaceRootComponent>, this);
}

uint64_t *re::ecs2::allocInfo_SceneSpaceRootSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541081A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541081A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108220, 0);
    *(uint64_t *)((char *)&qword_254108230 + 6) = 0;
    qword_254108230 = 0;
    qword_254108240 = 0;
    qword_254108248 = 0xFFFFFFFFLL;
    qword_254108220 = (uint64_t)&off_24ED7DAA8;
    qword_254108250 = (uint64_t)"SceneSpaceRootSystem";
    dword_254108258 = 0;
    xmmword_254108260 = 0u;
    unk_254108270 = 0u;
    xmmword_254108280 = 0u;
    qword_254108290 = 0;
    __cxa_guard_release(&qword_2541081A0);
  }
  return &qword_254108220;
}

void re::ecs2::initInfo_SceneSpaceRootSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xECA6C31A05B82A96;
  v5[1] = "SceneSpaceRootSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SceneSpaceRootSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneSpaceRootSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneSpaceRootSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SceneSpaceRootSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SceneSpaceRootSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneSpaceRootSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneSpaceRootSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::SceneSpaceRootSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  re::ecs2::System::System(a3, 1);
  *(_QWORD *)v3 = &off_24ED49450;
  result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 1065353216;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::SceneSpaceRootSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a3 + 13));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::SceneSpaceRootSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System(a1, 1);
  *(_QWORD *)v1 = &off_24ED49450;
  result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_DWORD *)(v1 + 136) = 1065353216;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::SceneSpaceRootSystem>(_QWORD *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a1 + 13));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SceneSpaceRootSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneSpaceRootSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneSpaceRootSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneSpaceRootSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneSpaceRootSystem>, this);
}

void re::ecs2::SceneSpaceRootSystem::~SceneSpaceRootSystem(re::ecs2::SceneSpaceRootSystem *this)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 104);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 104);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SceneSpaceRootSystem::typeInfo(re::ecs2::SceneSpaceRootSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneSpaceRootSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneSpaceRootSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneSpaceRootSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneSpaceRootSystem>, 0);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::createSubscription<re::ecs2::SceneSpaceRootSystem>(re::ecs2::SceneSpaceRootSystem *,REEventHandlerResult (re::ecs2::SceneSpaceRootSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Slice<re::ecs2::SceneSpaceRootComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneSpaceRootComponent>,re::Slice<re::ecs2::SceneSpaceRootComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneSpaceRootComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::createSubscription<re::ecs2::SceneSpaceRootSystem>(re::ecs2::SceneSpaceRootSystem *,REEventHandlerResult (re::ecs2::SceneSpaceRootSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ImmersiveSpaceTrackerComponent>,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>>::Subscription const&,re::Slice<re::ecs2::ImmersiveSpaceTrackerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__emplace_unique_key_args<re::ecs2::Scene *,re::ecs2::Scene * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

uint64_t *std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__erase_unique<re::ecs2::Scene *>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::find<re::ecs2::Scene *>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::find<re::ecs2::Scene *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void re::ecs2::SceneSpaceRootComponent::~SceneSpaceRootComponent(re::ecs2::SceneSpaceRootComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::SceneSpaceRootSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SceneSpaceRootSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

_QWORD *re::ecs2::RenderingSystem::renderingSubsystemTypes@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  void *v44;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = atomic_load((unsigned __int8 *)&qword_2541082A0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541082A0))
  {
    _MergedGlobals_166 = re::ecs2::introspect_PortalRenderingSystem(0);
    __cxa_guard_release(&qword_2541082A0);
  }
  v44 = (void *)_MergedGlobals_166;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v4 & 1) == 0
  {
    re::introspect<re::DrawWorldSystem>(void)::info = (_UNKNOWN *)re::introspect_DrawWorldSystem(0);
  }
  v44 = re::introspect<re::DrawWorldSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v5 = atomic_load((unsigned __int8 *)&qword_2541082B0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2541082B0))
  {
    qword_2541082A8 = re::ecs2::introspect_VisualProxyCaptureSystem(0);
    __cxa_guard_release(&qword_2541082B0);
  }
  v44 = (void *)qword_2541082A8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v6 & 1) == 0
  {
    re::introspect<re::SkyboxSystem>(void)::info = (_UNKNOWN *)re::introspect_SkyboxSystem(0);
  }
  v44 = re::introspect<re::SkyboxSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v7 = atomic_load((unsigned __int8 *)&qword_2541082C0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_2541082C0))
  {
    qword_2541082B8 = re::ecs2::introspect_UpdateRenderServicesDataSystem(0);
    __cxa_guard_release(&qword_2541082C0);
  }
  v44 = (void *)qword_2541082B8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v8 = atomic_load((unsigned __int8 *)&qword_2541082D0);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2541082D0))
  {
    qword_2541082C8 = re::ecs2::introspect_SkeletalPoseBufferSystem(0);
    __cxa_guard_release(&qword_2541082D0);
  }
  v44 = (void *)qword_2541082C8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v9 = atomic_load((unsigned __int8 *)&qword_2541082E0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_2541082E0))
  {
    qword_2541082D8 = re::ecs2::introspect_BlendShapeWeightsBufferSystem(0);
    __cxa_guard_release(&qword_2541082E0);
  }
  v44 = (void *)qword_2541082D8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v10 = atomic_load((unsigned __int8 *)&qword_2541082F0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2541082F0))
  {
    qword_2541082E8 = re::ecs2::introspect_JiggleSystem(0);
    __cxa_guard_release(&qword_2541082F0);
  }
  v44 = (void *)qword_2541082E8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v11 = atomic_load((unsigned __int8 *)&qword_254108300);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254108300))
  {
    qword_2541082F8 = re::ecs2::introspect_WrapSystem(0);
    __cxa_guard_release(&qword_254108300);
  }
  v44 = (void *)qword_2541082F8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v12 = atomic_load((unsigned __int8 *)&qword_254108310);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254108310))
  {
    qword_254108308 = re::ecs2::introspect_VertexCacheSystem(0);
    __cxa_guard_release(&qword_254108310);
  }
  v44 = (void *)qword_254108308;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v13 = atomic_load((unsigned __int8 *)&qword_254108320);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254108320))
  {
    qword_254108318 = re::ecs2::introspect_SubdivisionSurfaceSystem(0);
    __cxa_guard_release(&qword_254108320);
  }
  v44 = (void *)qword_254108318;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v14 & 1) == 0
  {
    re::introspect<re::ecs2::CustomDeformerSystem>(void)::info = re::ecs2::introspect_CustomDeformerSystem(0);
  }
  v44 = (void *)re::introspect<re::ecs2::CustomDeformerSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v15 = atomic_load((unsigned __int8 *)&qword_254108330);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254108330))
  {
    qword_254108328 = re::ecs2::introspect_DynamicBoundingBoxSystem(0);
    __cxa_guard_release(&qword_254108330);
  }
  v44 = (void *)qword_254108328;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v16 & 1) == 0
  {
    re::introspect<re::ecs2::ShadowClusterSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_ShadowClusterSystem(0);
  }
  v44 = re::introspect<re::ecs2::ShadowClusterSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v17 = atomic_load((unsigned __int8 *)&qword_254108340);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254108340))
  {
    qword_254108338 = re::ecs2::introspect_MeshShadowSystem(0);
    __cxa_guard_release(&qword_254108340);
  }
  v44 = (void *)qword_254108338;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v18 & 1) == 0
  {
    re::introspect<re::ecs2::ProjectiveShadowReceiverSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_ProjectiveShadowReceiverSystem(0);
  }
  v44 = re::introspect<re::ecs2::ProjectiveShadowReceiverSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v19 = atomic_load((unsigned __int8 *)&qword_254108350);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_254108350))
  {
    qword_254108348 = re::ecs2::introspect_SceneUnderstandingMeshSystem(0);
    __cxa_guard_release(&qword_254108350);
  }
  v44 = (void *)qword_254108348;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v20 = atomic_load((unsigned __int8 *)&qword_254108360);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_254108360))
  {
    qword_254108358 = re::ecs2::introspect_PlanarReflectionSystem(0);
    __cxa_guard_release(&qword_254108360);
  }
  v44 = (void *)qword_254108358;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v21 & 1) == 0
  {
    re::introspect<re::ecs2::LightSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_LightSystem(0);
  }
  v44 = re::introspect<re::ecs2::LightSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v22 & 1) == 0
  {
    re::introspect<re::ecs2::VFXEmitterSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_VFXEmitterSystem(0);
  }
  v44 = re::introspect<re::ecs2::VFXEmitterSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v23 & 1) == 0
  {
    re::introspect<re::ecs2::VFXSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_VFXSystem(0);
  }
  v44 = re::introspect<re::ecs2::VFXSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v24 & 1) == 0
  {
    re::introspect<re::ecs2::ImageBasedLightSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_ImageBasedLightSystem(0);
  }
  v44 = re::introspect<re::ecs2::ImageBasedLightSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v25 & 1) == 0
  {
    re::introspect<re::ecs2::VirtualEnvironmentProbeSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_VirtualEnvironmentProbeSystem(0);
  }
  v44 = re::introspect<re::ecs2::VirtualEnvironmentProbeSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v26 & 1) == 0
  {
    re::introspect<re::ecs2::ImageBasedReflectionSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_ImageBasedReflectionSystem(0);
  }
  v44 = re::introspect<re::ecs2::ImageBasedReflectionSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v27 = atomic_load((unsigned __int8 *)&qword_254108370);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254108370))
  {
    qword_254108368 = re::ecs2::introspect_MipmapGenerationSystem(0);
    __cxa_guard_release(&qword_254108370);
  }
  v44 = (void *)qword_254108368;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v28 = atomic_load((unsigned __int8 *)&qword_254108380);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254108380))
  {
    qword_254108378 = re::ecs2::introspect_BlurGenerationSystem(0);
    __cxa_guard_release(&qword_254108380);
  }
  v44 = (void *)qword_254108378;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v29 & 1) == 0
  {
    re::introspect<re::ecs2::AnchorSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchorSystem(0);
  }
  v44 = re::introspect<re::ecs2::AnchorSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v30 & 1) == 0
  {
    re::introspect<re::ecs2::MeshSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_MeshSystem(0);
  }
  v44 = re::introspect<re::ecs2::MeshSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v31 = atomic_load((unsigned __int8 *)&qword_254108390);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254108390))
  {
    qword_254108388 = re::ecs2::introspect_MeshSortingSystem(0);
    __cxa_guard_release(&qword_254108390);
  }
  v44 = (void *)qword_254108388;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v32 & 1) == 0
  {
    re::introspect<re::ecs2::DynamicTextSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_DynamicTextSystem(0);
  }
  v44 = re::introspect<re::ecs2::DynamicTextSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v33 & 1) == 0
  {
    re::introspect<re::ecs2::StaticTextSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_StaticTextSystem(0);
  }
  v44 = re::introspect<re::ecs2::StaticTextSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v34 & 1) == 0
  {
    re::introspect<re::ecs2::AREnvironmentProbeSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AREnvironmentProbeSystem(0);
  }
  v44 = re::introspect<re::ecs2::AREnvironmentProbeSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v35 = atomic_load((unsigned __int8 *)&qword_2541083A0);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_2541083A0))
  {
    qword_254108398 = re::ecs2::introspect_ARSegmentationSystem(0);
    __cxa_guard_release(&qword_2541083A0);
  }
  v44 = (void *)qword_254108398;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v36 & 1) == 0
  {
    re::introspect<re::ecs2::RayTracedShadowReceiverSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_RayTracedShadowReceiverSystem(0);
  }
  v44 = re::introspect<re::ecs2::RayTracedShadowReceiverSystem>(void)::info;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v37 = atomic_load((unsigned __int8 *)&qword_2541083B0);
  if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_2541083B0))
  {
    qword_2541083A8 = re::ecs2::introspect_RenderGraphFileProviderArraySystem(0);
    __cxa_guard_release(&qword_2541083B0);
  }
  v44 = (void *)qword_2541083A8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v38 = atomic_load((unsigned __int8 *)&qword_2541083C0);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_2541083C0))
  {
    qword_2541083B8 = re::ecs2::introspect_VisualProxySystem(0);
    __cxa_guard_release(&qword_2541083C0);
  }
  v44 = (void *)qword_2541083B8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v39 = atomic_load((unsigned __int8 *)&qword_2541083D0);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_2541083D0))
  {
    qword_2541083C8 = re::ecs2::introspect_PrimitiveRenderingSystem(0);
    __cxa_guard_release(&qword_2541083D0);
  }
  v44 = (void *)qword_2541083C8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v40 = atomic_load((unsigned __int8 *)&qword_2541083E0);
  if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_2541083E0))
  {
    qword_2541083D8 = re::ecs2::introspect_RenderCallbacksSystem(0);
    __cxa_guard_release(&qword_2541083E0);
  }
  v44 = (void *)qword_2541083D8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  v41 = atomic_load((unsigned __int8 *)&qword_2541083F0);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_2541083F0))
  {
    qword_2541083E8 = re::ecs2::introspect_VisualProxyScopeSystem(0);
    __cxa_guard_release(&qword_2541083F0);
  }
  v44 = (void *)qword_2541083E8;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
  if ((v42 & 1) == 0
  {
    re::introspect<re::ecs2::CameraViewDescriptorsSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_CameraViewDescriptorsSystem(0);
  }
  v44 = re::introspect<re::ecs2::CameraViewDescriptorsSystem>(void)::info;
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &v44);
}

uint64_t re::ecs2::RenderingSystem::addRenderingSubsystemsUsingLambda(uint64_t a1)
{
  re *v1;
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  re *v5;
  uint64_t *v6;
  _OWORD *v7;
  uint64_t v8;
  re *v9;
  uint64_t *v10;
  re::ecs2::VisualProxyCaptureSystem *v11;
  re *v12;
  uint64_t *v13;
  _OWORD *v14;
  uint64_t v15;
  re *v16;
  uint64_t *v17;
  _OWORD *v18;
  uint64_t v19;
  re *v20;
  uint64_t *v21;
  re::ecs2::SkeletalPoseBufferSystem *v22;
  re *v23;
  uint64_t *v24;
  re::ecs2::BlendShapeWeightsBufferSystem *v25;
  re *v26;
  uint64_t *v27;
  re::ecs2::JiggleSystem *v28;
  re *v29;
  uint64_t *v30;
  re::ecs2::WrapSystem *v31;
  re *v32;
  uint64_t *v33;
  re::ecs2::VertexCacheSystem *v34;
  re *v35;
  uint64_t *v36;
  re::ecs2::SubdivisionSurfaceSystem *v37;
  re *v38;
  uint64_t *v39;
  re::ecs2::CustomDeformerSystem *v40;
  re *v41;
  uint64_t *v42;
  re::ecs2::DynamicBoundingBoxSystem *v43;
  re *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  re *v48;
  uint64_t *v49;
  re::ecs2::MeshShadowSystem *v50;
  re *v51;
  uint64_t *v52;
  re::ecs2::ProjectiveShadowReceiverSystem *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  re *v58;
  uint64_t *v59;
  _OWORD *v60;
  uint64_t v61;
  re *v62;
  uint64_t *v63;
  re::ecs2::LightSystem *v64;
  re *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  re *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  re *v73;
  uint64_t *v74;
  re::ecs2::ImageBasedLightSystem *v75;
  re *v76;
  uint64_t *v77;
  re::ecs2::VirtualEnvironmentProbeSystem *v78;
  re *v79;
  uint64_t *v80;
  _OWORD *v81;
  uint64_t v82;
  re *v83;
  uint64_t *v84;
  _OWORD *v85;
  uint64_t v86;
  re *v87;
  uint64_t *v88;
  _OWORD *v89;
  uint64_t v90;
  re *v91;
  uint64_t *v92;
  re::ecs2::AnchorSystem *v93;
  re *v94;
  uint64_t *v95;
  re::ecs2::MeshSystem *v96;
  re *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  re *v101;
  uint64_t *v102;
  _OWORD *v103;
  uint64_t v104;
  re *v105;
  uint64_t *v106;
  _OWORD *v107;
  uint64_t v108;
  re *v109;
  uint64_t *v110;
  re::ecs2::AREnvironmentProbeSystem *v111;
  re *v112;
  uint64_t *v113;
  _OWORD *v114;
  uint64_t v115;
  re *v116;
  uint64_t *v117;
  _OWORD *v118;
  uint64_t v119;
  re *v120;
  uint64_t *v121;
  _OWORD *v122;
  uint64_t v123;
  re *v124;
  uint64_t *v125;
  re::ecs2::VisualProxySystem *v126;
  re *v127;
  uint64_t *v128;
  _QWORD *v129;
  re *v130;
  uint64_t *v131;
  _OWORD *v132;
  uint64_t v133;
  re *v134;
  uint64_t *v135;
  re::ecs2::VisualProxyScopeSystem *v136;
  re *v137;
  uint64_t *v138;
  re::ecs2::CameraViewDescriptorsSystem *v139;
  uint64_t result;
  re::ecs2::CameraViewDescriptorsSystem *v141;
  _BYTE v142[24];
  uint64_t v143;
  _BYTE *v144;
  _QWORD v145[3];
  uint64_t v146;
  _QWORD *v147;
  _QWORD v148[3];
  uint64_t v149;
  _QWORD *v150;
  _QWORD v151[3];
  uint64_t v152;
  _QWORD *v153;
  _QWORD v154[3];
  uint64_t v155;
  _QWORD *v156;
  _QWORD v157[3];
  uint64_t v158;
  _QWORD *v159;
  _QWORD v160[3];
  uint64_t v161;
  _QWORD *v162;
  _QWORD v163[3];
  uint64_t v164;
  _QWORD *v165;
  _QWORD v166[3];
  uint64_t v167;
  _QWORD *v168;
  _QWORD v169[3];
  uint64_t v170;
  _QWORD *v171;
  _QWORD v172[3];
  uint64_t v173;
  _QWORD *v174;
  _QWORD v175[3];
  uint64_t v176;
  _QWORD *v177;
  _QWORD v178[3];
  uint64_t v179;
  _QWORD *v180;
  _QWORD v181[3];
  uint64_t v182;
  _QWORD *v183;
  _QWORD v184[3];
  uint64_t v185;
  _QWORD *v186;
  _QWORD v187[3];
  uint64_t v188;
  _QWORD *v189;
  _QWORD v190[3];
  uint64_t v191;
  _QWORD *v192;
  _QWORD v193[3];
  uint64_t v194;
  _QWORD *v195;
  _QWORD v196[3];
  uint64_t v197;
  _QWORD *v198;
  _QWORD v199[3];
  uint64_t v200;
  _QWORD *v201;
  _QWORD v202[3];
  uint64_t v203;
  _QWORD *v204;
  _QWORD v205[3];
  uint64_t v206;
  _QWORD *v207;
  _QWORD v208[3];
  uint64_t v209;
  _QWORD *v210;
  _QWORD v211[3];
  uint64_t v212;
  _QWORD *v213;
  _QWORD v214[3];
  uint64_t v215;
  _QWORD *v216;
  _QWORD v217[3];
  uint64_t v218;
  _QWORD *v219;
  _QWORD v220[3];
  uint64_t v221;
  _QWORD *v222;
  _QWORD v223[3];
  uint64_t v224;
  _QWORD *v225;
  _QWORD v226[3];
  uint64_t v227;
  _QWORD *v228;
  _QWORD v229[3];
  uint64_t v230;
  _QWORD *v231;
  _QWORD v232[3];
  uint64_t v233;
  _QWORD *v234;
  _QWORD v235[3];
  uint64_t v236;
  _QWORD *v237;
  _QWORD v238[3];
  uint64_t v239;
  _QWORD *v240;
  _QWORD v241[3];
  uint64_t v242;
  _QWORD *v243;
  _QWORD v244[3];
  uint64_t v245;
  _QWORD *v246;
  _QWORD v247[3];
  uint64_t v248;
  _QWORD *v249;
  _QWORD v250[3];
  uint64_t v251;
  _QWORD *v252;
  _QWORD v253[3];
  uint64_t v254;
  _QWORD *v255;
  _QWORD v256[3];
  uint64_t v257;
  _QWORD *v258;
  _QWORD v259[3];
  uint64_t v260;
  _QWORD *v261;
  _BYTE v262[24];
  uint64_t v263;
  _BYTE *v264;
  uint64_t v265;

  v265 = *MEMORY[0x24BDAC8D0];
  v143 = *(_QWORD *)(a1 + 24);
  v144 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v142, a1);
  v263 = v143;
  v264 = 0;
  v1 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v262, (uint64_t)v142);
  v2 = re::globalAllocators(v1);
  v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 160, 8);
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  re::ecs2::System::System((uint64_t)v3, 1, 1);
  *(_QWORD *)(v4 + 152) = 0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_QWORD *)v4 = &off_24ED66648;
  v259[0] = v4;
  (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v264 + 16))(v264, v259);
  if (v259[0])

  if (v264)
  {
    (**(void (***)(_BYTE *))v264)(v264);
    if (v264 != v262)
      (*(void (**)(uint64_t))(*(_QWORD *)v263 + 40))(v263);
    v264 = 0;
  }
  v260 = v143;
  v261 = 0;
  v5 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v259, (uint64_t)v142);
  v6 = re::globalAllocators(v5);
  v7 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 160, 8);
  *v7 = 0u;
  v7[1] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  v7[4] = 0u;
  v7[5] = 0u;
  v7[6] = 0u;
  v7[7] = 0u;
  v7[8] = 0u;
  v7[9] = 0u;
  re::ecs2::System::System((uint64_t)v7, 1, 1);
  *(_QWORD *)(v8 + 152) = 0;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)v8 = &off_24ED49340;
  v256[0] = v8;
  (*(void (**)(_QWORD *, _QWORD *))(*v261 + 16))(v261, v256);
  if (v256[0])

  if (v261)
  {
    (*(void (**)(_QWORD *))*v261)(v261);
    if (v261 != v259)
      (*(void (**)(uint64_t))(*(_QWORD *)v260 + 40))(v260);
    v261 = 0;
  }
  v257 = v143;
  v258 = 0;
  v9 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v256, (uint64_t)v142);
  v10 = re::globalAllocators(v9);
  v11 = (re::ecs2::VisualProxyCaptureSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 416, 8);
  v253[0] = re::ecs2::VisualProxyCaptureSystem::VisualProxyCaptureSystem(v11);
  (*(void (**)(_QWORD *, _QWORD *))(*v258 + 16))(v258, v253);
  if (v253[0])

  if (v258)
  {
    (*(void (**)(_QWORD *))*v258)(v258);
    if (v258 != v256)
      (*(void (**)(uint64_t))(*(_QWORD *)v257 + 40))(v257);
    v258 = 0;
  }
  v254 = v143;
  v255 = 0;
  v12 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v253, (uint64_t)v142);
  v13 = re::globalAllocators(v12);
  v14 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 160, 8);
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  re::ecs2::System::System((uint64_t)v14, 1, 1);
  *(_QWORD *)(v15 + 152) = 0;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_QWORD *)v15 = &off_24ED62030;
  v250[0] = v15;
  (*(void (**)(_QWORD *, _QWORD *))(*v255 + 16))(v255, v250);
  if (v250[0])

  if (v255)
  {
    (*(void (**)(_QWORD *))*v255)(v255);
    if (v255 != v253)
      (*(void (**)(uint64_t))(*(_QWORD *)v254 + 40))(v254);
    v255 = 0;
  }
  v251 = v143;
  v252 = 0;
  v16 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v250, (uint64_t)v142);
  v17 = re::globalAllocators(v16);
  v18 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17[2] + 32))(v17[2], 224, 8);
  *v18 = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  re::ecs2::System::System((uint64_t)v18, 1, 1);
  *(_QWORD *)(v19 + 152) = 0;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_QWORD *)v19 = &off_24ED6A838;
  *(_OWORD *)(v19 + 160) = 0u;
  *(_OWORD *)(v19 + 176) = 0u;
  *(_OWORD *)(v19 + 192) = 0u;
  *(_OWORD *)(v19 + 208) = 0u;
  v247[0] = v19;
  (*(void (**)(_QWORD *, _QWORD *))(*v252 + 16))(v252, v247);
  if (v247[0])

  if (v252)
  {
    (*(void (**)(_QWORD *))*v252)(v252);
    if (v252 != v250)
      (*(void (**)(uint64_t))(*(_QWORD *)v251 + 40))(v251);
    v252 = 0;
  }
  v248 = v143;
  v249 = 0;
  v20 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v247, (uint64_t)v142);
  v21 = re::globalAllocators(v20);
  v22 = (re::ecs2::SkeletalPoseBufferSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 448, 8);
  v244[0] = re::ecs2::SkeletalPoseBufferSystem::SkeletalPoseBufferSystem(v22);
  (*(void (**)(_QWORD *, _QWORD *))(*v249 + 16))(v249, v244);
  if (v244[0])

  if (v249)
  {
    (*(void (**)(_QWORD *))*v249)(v249);
    if (v249 != v247)
      (*(void (**)(uint64_t))(*(_QWORD *)v248 + 40))(v248);
    v249 = 0;
  }
  v245 = v143;
  v246 = 0;
  v23 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v244, (uint64_t)v142);
  v24 = re::globalAllocators(v23);
  v25 = (re::ecs2::BlendShapeWeightsBufferSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 456, 8);
  v241[0] = re::ecs2::BlendShapeWeightsBufferSystem::BlendShapeWeightsBufferSystem(v25);
  (*(void (**)(_QWORD *, _QWORD *))(*v246 + 16))(v246, v241);
  if (v241[0])

  if (v246)
  {
    (*(void (**)(_QWORD *))*v246)(v246);
    if (v246 != v244)
      (*(void (**)(uint64_t))(*(_QWORD *)v245 + 40))(v245);
    v246 = 0;
  }
  v242 = v143;
  v243 = 0;
  v26 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v241, (uint64_t)v142);
  v27 = re::globalAllocators(v26);
  v28 = (re::ecs2::JiggleSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[2] + 32))(v27[2], 440, 8);
  v238[0] = re::ecs2::JiggleSystem::JiggleSystem(v28);
  (*(void (**)(_QWORD *, _QWORD *))(*v243 + 16))(v243, v238);
  if (v238[0])

  if (v243)
  {
    (*(void (**)(_QWORD *))*v243)(v243);
    if (v243 != v241)
      (*(void (**)(uint64_t))(*(_QWORD *)v242 + 40))(v242);
    v243 = 0;
  }
  v239 = v143;
  v240 = 0;
  v29 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v238, (uint64_t)v142);
  v30 = re::globalAllocators(v29);
  v31 = (re::ecs2::WrapSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30[2] + 32))(v30[2], 440, 8);
  v235[0] = re::ecs2::WrapSystem::WrapSystem(v31);
  (*(void (**)(_QWORD *, _QWORD *))(*v240 + 16))(v240, v235);
  if (v235[0])

  if (v240)
  {
    (*(void (**)(_QWORD *))*v240)(v240);
    if (v240 != v238)
      (*(void (**)(uint64_t))(*(_QWORD *)v239 + 40))(v239);
    v240 = 0;
  }
  v236 = v143;
  v237 = 0;
  v32 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v235, (uint64_t)v142);
  v33 = re::globalAllocators(v32);
  v34 = (re::ecs2::VertexCacheSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33[2] + 32))(v33[2], 448, 8);
  v232[0] = re::ecs2::VertexCacheSystem::VertexCacheSystem(v34);
  (*(void (**)(_QWORD *, _QWORD *))(*v237 + 16))(v237, v232);
  if (v232[0])

  if (v237)
  {
    (*(void (**)(_QWORD *))*v237)(v237);
    if (v237 != v235)
      (*(void (**)(uint64_t))(*(_QWORD *)v236 + 40))(v236);
    v237 = 0;
  }
  v233 = v143;
  v234 = 0;
  v35 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v232, (uint64_t)v142);
  v36 = re::globalAllocators(v35);
  v37 = (re::ecs2::SubdivisionSurfaceSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36[2] + 32))(v36[2], 440, 8);
  v229[0] = re::ecs2::SubdivisionSurfaceSystem::SubdivisionSurfaceSystem(v37);
  (*(void (**)(_QWORD *, _QWORD *))(*v234 + 16))(v234, v229);
  if (v229[0])

  if (v234)
  {
    (*(void (**)(_QWORD *))*v234)(v234);
    if (v234 != v232)
      (*(void (**)(uint64_t))(*(_QWORD *)v233 + 40))(v233);
    v234 = 0;
  }
  v230 = v143;
  v231 = 0;
  v38 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v229, (uint64_t)v142);
  v39 = re::globalAllocators(v38);
  v40 = (re::ecs2::CustomDeformerSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], 440, 8);
  v226[0] = re::ecs2::CustomDeformerSystem::CustomDeformerSystem(v40);
  (*(void (**)(_QWORD *, _QWORD *))(*v231 + 16))(v231, v226);
  if (v226[0])

  if (v231)
  {
    (*(void (**)(_QWORD *))*v231)(v231);
    if (v231 != v229)
      (*(void (**)(uint64_t))(*(_QWORD *)v230 + 40))(v230);
    v231 = 0;
  }
  v227 = v143;
  v228 = 0;
  v41 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v226, (uint64_t)v142);
  v42 = re::globalAllocators(v41);
  v43 = (re::ecs2::DynamicBoundingBoxSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42[2] + 32))(v42[2], 488, 8);
  v223[0] = re::ecs2::DynamicBoundingBoxSystem::DynamicBoundingBoxSystem(v43);
  (*(void (**)(_QWORD *, _QWORD *))(*v228 + 16))(v228, v223);
  if (v223[0])

  if (v228)
  {
    (*(void (**)(_QWORD *))*v228)(v228);
    if (v228 != v226)
      (*(void (**)(uint64_t))(*(_QWORD *)v227 + 40))(v227);
    v228 = 0;
  }
  v224 = v143;
  v225 = 0;
  v44 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v223, (uint64_t)v142);
  v45 = re::globalAllocators(v44);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45[2] + 32))(v45[2], 264, 8);
  *(_OWORD *)v46 = 0u;
  *(_OWORD *)(v46 + 16) = 0u;
  *(_OWORD *)(v46 + 32) = 0u;
  *(_OWORD *)(v46 + 48) = 0u;
  *(_OWORD *)(v46 + 64) = 0u;
  *(_OWORD *)(v46 + 80) = 0u;
  *(_OWORD *)(v46 + 96) = 0u;
  *(_OWORD *)(v46 + 112) = 0u;
  *(_OWORD *)(v46 + 128) = 0u;
  *(_OWORD *)(v46 + 144) = 0u;
  *(_OWORD *)(v46 + 160) = 0u;
  *(_OWORD *)(v46 + 176) = 0u;
  *(_OWORD *)(v46 + 192) = 0u;
  *(_OWORD *)(v46 + 208) = 0u;
  *(_OWORD *)(v46 + 224) = 0u;
  *(_OWORD *)(v46 + 240) = 0u;
  *(_QWORD *)(v46 + 256) = 0;
  re::ecs2::System::System(v46, 1, 1);
  *(_QWORD *)(v47 + 152) = 0;
  *(_OWORD *)(v47 + 136) = 0u;
  *(_OWORD *)(v47 + 120) = 0u;
  *(_OWORD *)(v47 + 104) = 0u;
  *(_QWORD *)v47 = &off_24ED5E3E0;
  *(_OWORD *)(v47 + 160) = 0u;
  *(_OWORD *)(v47 + 176) = 0u;
  *(_DWORD *)(v47 + 192) = 0;
  *(_QWORD *)(v47 + 196) = 0x7FFFFFFFLL;
  *(_DWORD *)(v47 + 240) = 0;
  *(_OWORD *)(v47 + 208) = 0u;
  *(_OWORD *)(v47 + 224) = 0u;
  *(_QWORD *)(v47 + 244) = 0x7FFFFFFFLL;
  *(_BYTE *)(v47 + 256) = 1;
  v220[0] = v47;
  (*(void (**)(_QWORD *, _QWORD *))(*v225 + 16))(v225, v220);
  if (v220[0])

  if (v225)
  {
    (*(void (**)(_QWORD *))*v225)(v225);
    if (v225 != v223)
      (*(void (**)(uint64_t))(*(_QWORD *)v224 + 40))(v224);
    v225 = 0;
  }
  v221 = v143;
  v222 = 0;
  v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v220, (uint64_t)v142);
  v49 = re::globalAllocators(v48);
  v50 = (re::ecs2::MeshShadowSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[2] + 32))(v49[2], 2704, 16);
  v217[0] = re::ecs2::MeshShadowSystem::MeshShadowSystem(v50);
  (*(void (**)(_QWORD *, _QWORD *))(*v222 + 16))(v222, v217);
  if (v217[0])

  if (v222)
  {
    (*(void (**)(_QWORD *))*v222)(v222);
    if (v222 != v220)
      (*(void (**)(uint64_t))(*(_QWORD *)v221 + 40))(v221);
    v222 = 0;
  }
  v218 = v143;
  v219 = 0;
  v51 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v217, (uint64_t)v142);
  v52 = re::globalAllocators(v51);
  v53 = (re::ecs2::ProjectiveShadowReceiverSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52[2] + 32))(v52[2], 752, 16);
  v214[0] = re::ecs2::ProjectiveShadowReceiverSystem::ProjectiveShadowReceiverSystem(v53);
  (*(void (**)(_QWORD *, _QWORD *))(*v219 + 16))(v219, v214);
  if (v214[0])

  if (v219)
  {
    (*(void (**)(_QWORD *))*v219)(v219);
    if (v219 != v217)
      (*(void (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218);
    v219 = 0;
  }
  v215 = v143;
  v216 = 0;
  v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v214, (uint64_t)v142);
  v55 = re::globalAllocators(v54);
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[2] + 32))(v55[2], 168, 8);
  *(_OWORD *)v56 = 0u;
  *(_OWORD *)(v56 + 16) = 0u;
  *(_OWORD *)(v56 + 32) = 0u;
  *(_OWORD *)(v56 + 48) = 0u;
  *(_OWORD *)(v56 + 64) = 0u;
  *(_OWORD *)(v56 + 80) = 0u;
  *(_OWORD *)(v56 + 96) = 0u;
  *(_OWORD *)(v56 + 112) = 0u;
  *(_OWORD *)(v56 + 128) = 0u;
  *(_OWORD *)(v56 + 144) = 0u;
  *(_QWORD *)(v56 + 160) = 0;
  re::ecs2::System::System(v56, 1, 1);
  *(_QWORD *)(v57 + 152) = 0;
  *(_QWORD *)(v57 + 160) = 0;
  *(_OWORD *)(v57 + 136) = 0u;
  *(_OWORD *)(v57 + 120) = 0u;
  *(_OWORD *)(v57 + 104) = 0u;
  *(_QWORD *)v57 = &off_24ED68A58;
  v211[0] = v57;
  (*(void (**)(_QWORD *, _QWORD *))(*v216 + 16))(v216, v211);
  if (v211[0])

  if (v216)
  {
    (*(void (**)(_QWORD *))*v216)(v216);
    if (v216 != v214)
      (*(void (**)(uint64_t))(*(_QWORD *)v215 + 40))(v215);
    v216 = 0;
  }
  v212 = v143;
  v213 = 0;
  v58 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v211, (uint64_t)v142);
  v59 = re::globalAllocators(v58);
  v60 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v59[2] + 32))(v59[2], 208, 8);
  *v60 = 0u;
  v60[1] = 0u;
  v60[2] = 0u;
  v60[3] = 0u;
  v60[4] = 0u;
  v60[5] = 0u;
  v60[6] = 0u;
  v60[7] = 0u;
  v60[8] = 0u;
  v60[9] = 0u;
  v60[10] = 0u;
  v60[11] = 0u;
  v60[12] = 0u;
  re::ecs2::System::System((uint64_t)v60, 1, 1);
  *(_QWORD *)(v61 + 152) = 0;
  *(_OWORD *)(v61 + 136) = 0u;
  *(_OWORD *)(v61 + 120) = 0u;
  *(_OWORD *)(v61 + 104) = 0u;
  *(_QWORD *)v61 = &off_24ED64F50;
  *(_OWORD *)(v61 + 160) = 0u;
  *(_OWORD *)(v61 + 176) = 0u;
  *(_DWORD *)(v61 + 192) = 0;
  *(_QWORD *)(v61 + 196) = 0x7FFFFFFFLL;
  v208[0] = v61;
  (*(void (**)(_QWORD *, _QWORD *))(*v213 + 16))(v213, v208);
  if (v208[0])

  if (v213)
  {
    (*(void (**)(_QWORD *))*v213)(v213);
    if (v213 != v211)
      (*(void (**)(uint64_t))(*(_QWORD *)v212 + 40))(v212);
    v213 = 0;
  }
  v209 = v143;
  v210 = 0;
  v62 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v208, (uint64_t)v142);
  v63 = re::globalAllocators(v62);
  v64 = (re::ecs2::LightSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v63[2] + 32))(v63[2], 3240, 8);
  v205[0] = re::ecs2::LightSystem::LightSystem(v64);
  (*(void (**)(_QWORD *, _QWORD *))(*v210 + 16))(v210, v205);
  if (v205[0])

  if (v210)
  {
    (*(void (**)(_QWORD *))*v210)(v210);
    if (v210 != v208)
      (*(void (**)(uint64_t))(*(_QWORD *)v209 + 40))(v209);
    v210 = 0;
  }
  v206 = v143;
  v207 = 0;
  v65 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v205, (uint64_t)v142);
  v66 = re::globalAllocators(v65);
  v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66[2] + 32))(v66[2], 232, 8);
  *(_OWORD *)v67 = 0u;
  *(_OWORD *)(v67 + 16) = 0u;
  *(_OWORD *)(v67 + 32) = 0u;
  *(_OWORD *)(v67 + 48) = 0u;
  *(_OWORD *)(v67 + 64) = 0u;
  *(_OWORD *)(v67 + 80) = 0u;
  *(_OWORD *)(v67 + 96) = 0u;
  *(_OWORD *)(v67 + 112) = 0u;
  *(_OWORD *)(v67 + 128) = 0u;
  *(_OWORD *)(v67 + 144) = 0u;
  *(_OWORD *)(v67 + 160) = 0u;
  *(_OWORD *)(v67 + 176) = 0u;
  *(_OWORD *)(v67 + 192) = 0u;
  *(_OWORD *)(v67 + 208) = 0u;
  *(_QWORD *)(v67 + 224) = 0;
  re::ecs2::System::System(v67, 1, 1);
  *(_QWORD *)(v68 + 152) = 0;
  *(_OWORD *)(v68 + 136) = 0u;
  *(_OWORD *)(v68 + 120) = 0u;
  *(_OWORD *)(v68 + 104) = 0u;
  *(_QWORD *)v68 = off_24ED711D0;
  *(_OWORD *)(v68 + 176) = 0u;
  *(_OWORD *)(v68 + 192) = 0u;
  *(_OWORD *)(v68 + 208) = 0u;
  *(_QWORD *)(v68 + 224) = 0;
  v202[0] = v68;
  (*(void (**)(_QWORD *, _QWORD *))(*v207 + 16))(v207, v202);
  if (v202[0])

  if (v207)
  {
    (*(void (**)(_QWORD *))*v207)(v207);
    if (v207 != v205)
      (*(void (**)(uint64_t))(*(_QWORD *)v206 + 40))(v206);
    v207 = 0;
  }
  v203 = v143;
  v204 = 0;
  v69 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v202, (uint64_t)v142);
  v70 = re::globalAllocators(v69);
  v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70[2] + 32))(v70[2], 248, 8);
  *(_OWORD *)v71 = 0u;
  *(_OWORD *)(v71 + 16) = 0u;
  *(_OWORD *)(v71 + 32) = 0u;
  *(_OWORD *)(v71 + 48) = 0u;
  *(_OWORD *)(v71 + 64) = 0u;
  *(_OWORD *)(v71 + 80) = 0u;
  *(_OWORD *)(v71 + 96) = 0u;
  *(_OWORD *)(v71 + 112) = 0u;
  *(_OWORD *)(v71 + 128) = 0u;
  *(_OWORD *)(v71 + 144) = 0u;
  *(_OWORD *)(v71 + 160) = 0u;
  *(_OWORD *)(v71 + 176) = 0u;
  *(_OWORD *)(v71 + 192) = 0u;
  *(_OWORD *)(v71 + 208) = 0u;
  *(_OWORD *)(v71 + 224) = 0u;
  *(_QWORD *)(v71 + 240) = 0;
  re::ecs2::System::System(v71, 1, 1);
  *(_QWORD *)(v72 + 152) = 0;
  *(_OWORD *)(v72 + 136) = 0u;
  *(_OWORD *)(v72 + 120) = 0u;
  *(_OWORD *)(v72 + 104) = 0u;
  *(_QWORD *)v72 = &off_24ED46080;
  *(_WORD *)(v72 + 160) = 0;
  *(_OWORD *)(v72 + 168) = 0u;
  *(_OWORD *)(v72 + 184) = 0u;
  *(_OWORD *)(v72 + 200) = 0u;
  *(_OWORD *)(v72 + 216) = 0u;
  *(_OWORD *)(v72 + 232) = 0u;
  v199[0] = v72;
  (*(void (**)(_QWORD *, _QWORD *))(*v204 + 16))(v204, v199);
  if (v199[0])

  if (v204)
  {
    (*(void (**)(_QWORD *))*v204)(v204);
    if (v204 != v202)
      (*(void (**)(uint64_t))(*(_QWORD *)v203 + 40))(v203);
    v204 = 0;
  }
  v200 = v143;
  v201 = 0;
  v73 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v199, (uint64_t)v142);
  v74 = re::globalAllocators(v73);
  v75 = (re::ecs2::ImageBasedLightSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v74[2]
                                                                                                + 32))(v74[2], 1264, 16);
  v196[0] = re::ecs2::ImageBasedLightSystem::ImageBasedLightSystem(v75);
  (*(void (**)(_QWORD *, _QWORD *))(*v201 + 16))(v201, v196);
  if (v196[0])

  if (v201)
  {
    (*(void (**)(_QWORD *))*v201)(v201);
    if (v201 != v199)
      (*(void (**)(uint64_t))(*(_QWORD *)v200 + 40))(v200);
    v201 = 0;
  }
  v197 = v143;
  v198 = 0;
  v76 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v196, (uint64_t)v142);
  v77 = re::globalAllocators(v76);
  v78 = (re::ecs2::VirtualEnvironmentProbeSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77[2] + 32))(v77[2], 440, 8);
  v193[0] = re::ecs2::VirtualEnvironmentProbeSystem::VirtualEnvironmentProbeSystem(v78);
  (*(void (**)(_QWORD *, _QWORD *))(*v198 + 16))(v198, v193);
  if (v193[0])

  if (v198)
  {
    (*(void (**)(_QWORD *))*v198)(v198);
    if (v198 != v196)
      (*(void (**)(uint64_t))(*(_QWORD *)v197 + 40))(v197);
    v198 = 0;
  }
  v194 = v143;
  v195 = 0;
  v79 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v193, (uint64_t)v142);
  v80 = re::globalAllocators(v79);
  v81 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v80[2] + 32))(v80[2], 208, 8);
  *v81 = 0u;
  v81[1] = 0u;
  v81[2] = 0u;
  v81[3] = 0u;
  v81[4] = 0u;
  v81[5] = 0u;
  v81[6] = 0u;
  v81[7] = 0u;
  v81[8] = 0u;
  v81[9] = 0u;
  v81[10] = 0u;
  v81[11] = 0u;
  v81[12] = 0u;
  re::ecs2::System::System((uint64_t)v81, 1, 1);
  *(_QWORD *)(v82 + 152) = 0;
  *(_OWORD *)(v82 + 136) = 0u;
  *(_OWORD *)(v82 + 120) = 0u;
  *(_OWORD *)(v82 + 104) = 0u;
  *(_QWORD *)v82 = &off_24ED69838;
  *(_OWORD *)(v82 + 160) = 0u;
  *(_OWORD *)(v82 + 176) = 0u;
  *(_DWORD *)(v82 + 192) = 0;
  *(_QWORD *)(v82 + 196) = 0x7FFFFFFFLL;
  v190[0] = v82;
  (*(void (**)(_QWORD *, _QWORD *))(*v195 + 16))(v195, v190);
  if (v190[0])

  if (v195)
  {
    (*(void (**)(_QWORD *))*v195)(v195);
    if (v195 != v193)
      (*(void (**)(uint64_t))(*(_QWORD *)v194 + 40))(v194);
    v195 = 0;
  }
  v191 = v143;
  v192 = 0;
  v83 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v190, (uint64_t)v142);
  v84 = re::globalAllocators(v83);
  v85 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v84[2] + 32))(v84[2], 160, 8);
  *v85 = 0u;
  v85[1] = 0u;
  v85[2] = 0u;
  v85[3] = 0u;
  v85[4] = 0u;
  v85[5] = 0u;
  v85[6] = 0u;
  v85[7] = 0u;
  v85[8] = 0u;
  v85[9] = 0u;
  re::ecs2::System::System((uint64_t)v85, 1, 1);
  *(_QWORD *)(v86 + 152) = 0;
  *(_OWORD *)(v86 + 136) = 0u;
  *(_OWORD *)(v86 + 120) = 0u;
  *(_OWORD *)(v86 + 104) = 0u;
  *(_QWORD *)v86 = &off_24ED64BF8;
  v187[0] = v86;
  (*(void (**)(_QWORD *, _QWORD *))(*v192 + 16))(v192, v187);
  if (v187[0])

  if (v192)
  {
    (*(void (**)(_QWORD *))*v192)(v192);
    if (v192 != v190)
      (*(void (**)(uint64_t))(*(_QWORD *)v191 + 40))(v191);
    v192 = 0;
  }
  v188 = v143;
  v189 = 0;
  v87 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v187, (uint64_t)v142);
  v88 = re::globalAllocators(v87);
  v89 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v88[2] + 32))(v88[2], 160, 8);
  *v89 = 0u;
  v89[1] = 0u;
  v89[2] = 0u;
  v89[3] = 0u;
  v89[4] = 0u;
  v89[5] = 0u;
  v89[6] = 0u;
  v89[7] = 0u;
  v89[8] = 0u;
  v89[9] = 0u;
  re::ecs2::System::System((uint64_t)v89, 1, 1);
  *(_QWORD *)(v90 + 152) = 0;
  *(_OWORD *)(v90 + 136) = 0u;
  *(_OWORD *)(v90 + 120) = 0u;
  *(_OWORD *)(v90 + 104) = 0u;
  *(_QWORD *)v90 = &off_24ED64548;
  v184[0] = v90;
  (*(void (**)(_QWORD *, _QWORD *))(*v189 + 16))(v189, v184);
  if (v184[0])

  if (v189)
  {
    (*(void (**)(_QWORD *))*v189)(v189);
    if (v189 != v187)
      (*(void (**)(uint64_t))(*(_QWORD *)v188 + 40))(v188);
    v189 = 0;
  }
  v185 = v143;
  v186 = 0;
  v91 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v184, (uint64_t)v142);
  v92 = re::globalAllocators(v91);
  v93 = (re::ecs2::AnchorSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v92[2] + 32))(v92[2], 480, 8);
  v181[0] = re::ecs2::AnchorSystem::AnchorSystem(v93);
  (*(void (**)(_QWORD *, _QWORD *))(*v186 + 16))(v186, v181);
  if (v181[0])

  if (v186)
  {
    (*(void (**)(_QWORD *))*v186)(v186);
    if (v186 != v184)
      (*(void (**)(uint64_t))(*(_QWORD *)v185 + 40))(v185);
    v186 = 0;
  }
  v182 = v143;
  v183 = 0;
  v94 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v181, (uint64_t)v142);
  v95 = re::globalAllocators(v94);
  v96 = (re::ecs2::MeshSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v95[2] + 32))(v95[2], 736, 8);
  v178[0] = re::ecs2::MeshSystem::MeshSystem(v96);
  (*(void (**)(_QWORD *, _QWORD *))(*v183 + 16))(v183, v178);
  if (v178[0])

  if (v183)
  {
    (*(void (**)(_QWORD *))*v183)(v183);
    if (v183 != v181)
      (*(void (**)(uint64_t))(*(_QWORD *)v182 + 40))(v182);
    v183 = 0;
  }
  v179 = v143;
  v180 = 0;
  v97 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v178, (uint64_t)v142);
  v98 = re::globalAllocators(v97);
  v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98[2] + 32))(v98[2], 168, 8);
  *(_OWORD *)v99 = 0u;
  *(_OWORD *)(v99 + 16) = 0u;
  *(_OWORD *)(v99 + 32) = 0u;
  *(_OWORD *)(v99 + 48) = 0u;
  *(_OWORD *)(v99 + 64) = 0u;
  *(_OWORD *)(v99 + 80) = 0u;
  *(_OWORD *)(v99 + 96) = 0u;
  *(_OWORD *)(v99 + 112) = 0u;
  *(_OWORD *)(v99 + 128) = 0u;
  *(_OWORD *)(v99 + 144) = 0u;
  *(_QWORD *)(v99 + 160) = 0;
  re::ecs2::System::System(v99, 1, 1);
  *(_QWORD *)(v100 + 152) = 0;
  *(_QWORD *)(v100 + 160) = 0;
  *(_OWORD *)(v100 + 136) = 0u;
  *(_OWORD *)(v100 + 120) = 0u;
  *(_OWORD *)(v100 + 104) = 0u;
  *(_QWORD *)v100 = &off_24ED6F828;
  v175[0] = v100;
  (*(void (**)(_QWORD *, _QWORD *))(*v180 + 16))(v180, v175);
  if (v175[0])

  if (v180)
  {
    (*(void (**)(_QWORD *))*v180)(v180);
    if (v180 != v178)
      (*(void (**)(uint64_t))(*(_QWORD *)v179 + 40))(v179);
    v180 = 0;
  }
  v176 = v143;
  v177 = 0;
  v101 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v175, (uint64_t)v142);
  v102 = re::globalAllocators(v101);
  v103 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102[2] + 32))(v102[2], 160, 8);
  *v103 = 0u;
  v103[1] = 0u;
  v103[2] = 0u;
  v103[3] = 0u;
  v103[4] = 0u;
  v103[5] = 0u;
  v103[6] = 0u;
  v103[7] = 0u;
  v103[8] = 0u;
  v103[9] = 0u;
  re::ecs2::System::System((uint64_t)v103, 1, 1);
  *(_QWORD *)(v104 + 152) = 0;
  *(_OWORD *)(v104 + 136) = 0u;
  *(_OWORD *)(v104 + 120) = 0u;
  *(_OWORD *)(v104 + 104) = 0u;
  *(_QWORD *)v104 = &off_24ED5BDF0;
  v172[0] = v104;
  (*(void (**)(_QWORD *, _QWORD *))(*v177 + 16))(v177, v172);
  if (v172[0])

  if (v177)
  {
    (*(void (**)(_QWORD *))*v177)(v177);
    if (v177 != v175)
      (*(void (**)(uint64_t))(*(_QWORD *)v176 + 40))(v176);
    v177 = 0;
  }
  v173 = v143;
  v174 = 0;
  v105 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v172, (uint64_t)v142);
  v106 = re::globalAllocators(v105);
  v107 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v106[2] + 32))(v106[2], 160, 8);
  *v107 = 0u;
  v107[1] = 0u;
  v107[2] = 0u;
  v107[3] = 0u;
  v107[4] = 0u;
  v107[5] = 0u;
  v107[6] = 0u;
  v107[7] = 0u;
  v107[8] = 0u;
  v107[9] = 0u;
  re::ecs2::System::System((uint64_t)v107, 1, 1);
  *(_QWORD *)(v108 + 152) = 0;
  *(_OWORD *)(v108 + 136) = 0u;
  *(_OWORD *)(v108 + 120) = 0u;
  *(_OWORD *)(v108 + 104) = 0u;
  *(_QWORD *)v108 = &off_24ED6F798;
  v169[0] = v108;
  (*(void (**)(_QWORD *, _QWORD *))(*v174 + 16))(v174, v169);
  if (v169[0])

  if (v174)
  {
    (*(void (**)(_QWORD *))*v174)(v174);
    if (v174 != v172)
      (*(void (**)(uint64_t))(*(_QWORD *)v173 + 40))(v173);
    v174 = 0;
  }
  v170 = v143;
  v171 = 0;
  v109 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v169, (uint64_t)v142);
  v110 = re::globalAllocators(v109);
  v111 = (re::ecs2::AREnvironmentProbeSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110[2] + 32))(v110[2], 504, 8);
  v166[0] = re::ecs2::AREnvironmentProbeSystem::AREnvironmentProbeSystem(v111);
  (*(void (**)(_QWORD *, _QWORD *))(*v171 + 16))(v171, v166);
  if (v166[0])

  if (v171)
  {
    (*(void (**)(_QWORD *))*v171)(v171);
    if (v171 != v169)
      (*(void (**)(uint64_t))(*(_QWORD *)v170 + 40))(v170);
    v171 = 0;
  }
  v167 = v143;
  v168 = 0;
  v112 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v166, (uint64_t)v142);
  v113 = re::globalAllocators(v112);
  v114 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113[2] + 32))(v113[2], 160, 8);
  *v114 = 0u;
  v114[1] = 0u;
  v114[2] = 0u;
  v114[3] = 0u;
  v114[4] = 0u;
  v114[5] = 0u;
  v114[6] = 0u;
  v114[7] = 0u;
  v114[8] = 0u;
  v114[9] = 0u;
  re::ecs2::System::System((uint64_t)v114, 1, 1);
  *(_QWORD *)(v115 + 152) = 0;
  *(_OWORD *)(v115 + 136) = 0u;
  *(_OWORD *)(v115 + 120) = 0u;
  *(_OWORD *)(v115 + 104) = 0u;
  *(_QWORD *)v115 = &off_24ED5EFC8;
  v163[0] = v115;
  (*(void (**)(_QWORD *, _QWORD *))(*v168 + 16))(v168, v163);
  if (v163[0])

  if (v168)
  {
    (*(void (**)(_QWORD *))*v168)(v168);
    if (v168 != v166)
      (*(void (**)(uint64_t))(*(_QWORD *)v167 + 40))(v167);
    v168 = 0;
  }
  v164 = v143;
  v165 = 0;
  v116 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v163, (uint64_t)v142);
  v117 = re::globalAllocators(v116);
  v118 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v117[2] + 32))(v117[2], 192, 8);
  *v118 = 0u;
  v118[1] = 0u;
  v118[2] = 0u;
  v118[3] = 0u;
  v118[4] = 0u;
  v118[5] = 0u;
  v118[6] = 0u;
  v118[7] = 0u;
  v118[8] = 0u;
  v118[9] = 0u;
  v118[10] = 0u;
  v118[11] = 0u;
  re::ecs2::System::System((uint64_t)v118, 1, 1);
  *(_QWORD *)(v119 + 152) = 0;
  *(_OWORD *)(v119 + 136) = 0u;
  *(_OWORD *)(v119 + 120) = 0u;
  *(_OWORD *)(v119 + 104) = 0u;
  *(_QWORD *)v119 = &off_24ED6F670;
  *(_BYTE *)(v119 + 160) = 1;
  *(_QWORD *)(v119 + 176) = 0;
  *(_QWORD *)(v119 + 184) = 0;
  *(_QWORD *)(v119 + 168) = 0;
  v160[0] = v119;
  (*(void (**)(_QWORD *, _QWORD *))(*v165 + 16))(v165, v160);
  if (v160[0])

  if (v165)
  {
    (*(void (**)(_QWORD *))*v165)(v165);
    if (v165 != v163)
      (*(void (**)(uint64_t))(*(_QWORD *)v164 + 40))(v164);
    v165 = 0;
  }
  v161 = v143;
  v162 = 0;
  v120 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v160, (uint64_t)v142);
  v121 = re::globalAllocators(v120);
  v122 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v121[2] + 32))(v121[2], 160, 8);
  *v122 = 0u;
  v122[1] = 0u;
  v122[2] = 0u;
  v122[3] = 0u;
  v122[4] = 0u;
  v122[5] = 0u;
  v122[6] = 0u;
  v122[7] = 0u;
  v122[8] = 0u;
  v122[9] = 0u;
  re::ecs2::System::System((uint64_t)v122, 1, 1);
  *(_QWORD *)(v123 + 152) = 0;
  *(_OWORD *)(v123 + 136) = 0u;
  *(_OWORD *)(v123 + 120) = 0u;
  *(_OWORD *)(v123 + 104) = 0u;
  *(_QWORD *)v123 = &off_24ED710A8;
  v157[0] = v123;
  (*(void (**)(_QWORD *, _QWORD *))(*v162 + 16))(v162, v157);
  if (v157[0])

  if (v162)
  {
    (*(void (**)(_QWORD *))*v162)(v162);
    if (v162 != v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v161 + 40))(v161);
    v162 = 0;
  }
  v158 = v143;
  v159 = 0;
  v124 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v157, (uint64_t)v142);
  v125 = re::globalAllocators(v124);
  v126 = (re::ecs2::VisualProxySystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v125[2] + 32))(v125[2], 480, 8);
  v154[0] = re::ecs2::VisualProxySystem::VisualProxySystem(v126);
  (*(void (**)(_QWORD *, _QWORD *))(*v159 + 16))(v159, v154);
  if (v154[0])

  if (v159)
  {
    (*(void (**)(_QWORD *))*v159)(v159);
    if (v159 != v157)
      (*(void (**)(uint64_t))(*(_QWORD *)v158 + 40))(v158);
    v159 = 0;
  }
  v155 = v143;
  v156 = 0;
  v127 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v154, (uint64_t)v142);
  v128 = re::globalAllocators(v127);
  v129 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v128[2] + 32))(v128[2], 544, 8);
  bzero(v129, 0x220uLL);
  re::ecs2::System::System((uint64_t)v129, 1, 1);
  v129[19] = 0;
  *(_OWORD *)(v129 + 17) = 0u;
  *(_OWORD *)(v129 + 15) = 0u;
  *(_OWORD *)(v129 + 13) = 0u;
  *v129 = &off_24ED478D8;
  *((_OWORD *)v129 + 10) = 0u;
  *((_OWORD *)v129 + 11) = 0u;
  *((_OWORD *)v129 + 12) = 0u;
  *((_OWORD *)v129 + 13) = 0u;
  *((_OWORD *)v129 + 14) = 0u;
  *((_OWORD *)v129 + 15) = 0u;
  *((_OWORD *)v129 + 16) = 0u;
  *((_OWORD *)v129 + 17) = 0u;
  *((_OWORD *)v129 + 18) = 0u;
  *((_OWORD *)v129 + 19) = 0u;
  *((_OWORD *)v129 + 20) = 0u;
  *((_OWORD *)v129 + 21) = 0u;
  *((_OWORD *)v129 + 22) = 0u;
  *((_OWORD *)v129 + 23) = 0u;
  *((_OWORD *)v129 + 24) = 0u;
  *((_OWORD *)v129 + 25) = 0u;
  *((_OWORD *)v129 + 26) = 0u;
  *((_OWORD *)v129 + 27) = 0u;
  *((_OWORD *)v129 + 28) = 0u;
  *((_OWORD *)v129 + 29) = 0u;
  *((_OWORD *)v129 + 30) = 0u;
  *((_OWORD *)v129 + 31) = 0u;
  *((_OWORD *)v129 + 32) = 0u;
  *((_OWORD *)v129 + 33) = 0u;
  v151[0] = v129;
  (*(void (**)(_QWORD *, _QWORD *))(*v156 + 16))(v156, v151);
  if (v151[0])

  if (v156)
  {
    (*(void (**)(_QWORD *))*v156)(v156);
    if (v156 != v154)
      (*(void (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155);
    v156 = 0;
  }
  v152 = v143;
  v153 = 0;
  v130 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v151, (uint64_t)v142);
  v131 = re::globalAllocators(v130);
  v132 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v131[2] + 32))(v131[2], 160, 8);
  *v132 = 0u;
  v132[1] = 0u;
  v132[2] = 0u;
  v132[3] = 0u;
  v132[4] = 0u;
  v132[5] = 0u;
  v132[6] = 0u;
  v132[7] = 0u;
  v132[8] = 0u;
  v132[9] = 0u;
  re::ecs2::System::System((uint64_t)v132, 1, 1);
  *(_QWORD *)(v133 + 152) = 0;
  *(_OWORD *)(v133 + 136) = 0u;
  *(_OWORD *)(v133 + 120) = 0u;
  *(_OWORD *)(v133 + 104) = 0u;
  *(_QWORD *)v133 = &off_24ED66E28;
  v148[0] = v133;
  (*(void (**)(_QWORD *, _QWORD *))(*v153 + 16))(v153, v148);
  if (v148[0])

  if (v153)
  {
    (*(void (**)(_QWORD *))*v153)(v153);
    if (v153 != v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v152 + 40))(v152);
    v153 = 0;
  }
  v149 = v143;
  v150 = 0;
  v134 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v148, (uint64_t)v142);
  v135 = re::globalAllocators(v134);
  v136 = (re::ecs2::VisualProxyScopeSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v135[2]
                                                                                                  + 32))(v135[2], 440, 8);
  v145[0] = re::ecs2::VisualProxyScopeSystem::VisualProxyScopeSystem(v136);
  (*(void (**)(_QWORD *, _QWORD *))(*v150 + 16))(v150, v145);
  if (v145[0])

  if (v150)
  {
    (*(void (**)(_QWORD *))*v150)(v150);
    if (v150 != v148)
      (*(void (**)(uint64_t))(*(_QWORD *)v149 + 40))(v149);
    v150 = 0;
  }
  v146 = v143;
  v147 = 0;
  v137 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v145, (uint64_t)v142);
  v138 = re::globalAllocators(v137);
  v139 = (re::ecs2::CameraViewDescriptorsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v138[2] + 32))(v138[2], 488, 8);
  v141 = re::ecs2::CameraViewDescriptorsSystem::CameraViewDescriptorsSystem(v139);
  (*(void (**)(_QWORD *, re::ecs2::CameraViewDescriptorsSystem **))(*v147 + 16))(v147, &v141);
  if (v141)

  if (v147)
  {
    (*(void (**)(_QWORD *))*v147)(v147);
    if (v147 != v145)
      (*(void (**)(uint64_t))(*(_QWORD *)v146 + 40))(v146);
  }
  result = (uint64_t)v144;
  if (v144)
  {
    result = (**(uint64_t (***)(_BYTE *))v144)(v144);
    if (v144 != v142)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 40))(v143);
  }
  return result;
}

re::ecs2::SkeletalPoseBufferSystem *re::ecs2::SkeletalPoseBufferSystem::SkeletalPoseBufferSystem(re::ecs2::SkeletalPoseBufferSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::SkeletalPoseBufferComponentStateImpl *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 160) = 0;
  v3 = v2 + 160;
  *(_QWORD *)v2 = &off_24ED5D210;
  v4 = (re::ecs2::SkeletalPoseBufferComponentStateImpl *)(v2 + 400);
  *(_QWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 1;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  v5 = (_QWORD *)(v2 + 280);
  *(_OWORD *)(v2 + 216) = 0u;
  v6 = (_QWORD *)(v2 + 216);
  *(_DWORD *)(v2 + 296) = 1;
  v7 = (_QWORD *)(v2 + 328);
  *(_QWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 344) = 1;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 377) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 74) += 2;
  *((_QWORD *)this + 40) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 86) += 2;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = this;
  *((_QWORD *)this + 48) = v4;
  *((_BYTE *)this + 392) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  re::ecs2::SkeletalPoseBufferComponentStateImpl::SkeletalPoseBufferComponentStateImpl(v4);
  return this;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseBufferComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::JiggleSystem *re::ecs2::JiggleSystem::JiggleSystem(re::ecs2::JiggleSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED650A0;
  *(_QWORD *)(v2 + 160) = &off_24ED65038;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 176), (uint64_t)v9);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 54) = 1;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 1;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 96) = 1;
  *(_OWORD *)((char *)this + 417) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 40, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 46, 0);
  *((_DWORD *)this + 96) += 2;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = this;
  *((_QWORD *)this + 53) = v3;
  *((_BYTE *)this + 432) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshDeformationComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::WrapSystem *re::ecs2::WrapSystem::WrapSystem(re::ecs2::WrapSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED6CA68;
  *(_QWORD *)(v2 + 160) = &off_24ED6CA10;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 176), (uint64_t)v9);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 54) = 1;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 1;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 96) = 1;
  *(_OWORD *)((char *)this + 417) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 40, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 46, 0);
  *((_DWORD *)this + 96) += 2;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = this;
  *((_QWORD *)this + 53) = v3;
  *((_BYTE *)this + 432) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

re::ecs2::VertexCacheSystem *re::ecs2::VertexCacheSystem::VertexCacheSystem(re::ecs2::VertexCacheSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED67B68;
  *(_QWORD *)(v2 + 168) = &off_24ED67B00;
  v3 = v2 + 168;
  *(_QWORD *)(v2 + 176) = v2;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v12 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v9[0] = &v10;
  v9[1] = 3;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 184), (uint64_t)v9);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = 1;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 64) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 86) = 1;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 48) = 0;
  *((_DWORD *)this + 98) = 1;
  *(_OWORD *)((char *)this + 425) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 41, 0);
  *((_DWORD *)this + 86) += 2;
  *((_QWORD *)this + 46) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 47, 0);
  *((_DWORD *)this + 98) += 2;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = this;
  *((_QWORD *)this + 54) = v3;
  *((_BYTE *)this + 440) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::SubdivisionSurfaceSystem *re::ecs2::SubdivisionSurfaceSystem::SubdivisionSurfaceSystem(re::ecs2::SubdivisionSurfaceSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v9;
  char v10;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED6E130;
  v3 = v2 + 160;
  v4 = (_anonymous_namespace_ *)re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::SubdivisionSurfaceSystemComponentStateImpl((_QWORD *)(v2 + 160), (uint64_t)this);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 54) = 1;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 1;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 96) = 1;
  *(_OWORD *)((char *)this + 417) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 40, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 46, 0);
  *((_DWORD *)this + 96) += 2;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = this;
  *((_QWORD *)this + 53) = v3;
  *((_BYTE *)this + 432) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  v10 = 0;
  re::ecs2::System::setTaskOptions(this, &v9);
  return this;
}

re::ecs2::CustomDeformerSystem *re::ecs2::CustomDeformerSystem::CustomDeformerSystem(re::ecs2::CustomDeformerSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD v9[2];
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED658E8;
  *(_QWORD *)(v2 + 160) = &off_24ED65880;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v11 = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v12 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v9[0] = &v10;
  v9[1] = 3;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 176), (uint64_t)v9);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 54) = 1;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 1;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 96) = 1;
  *(_OWORD *)((char *)this + 417) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 40, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 46, 0);
  *((_DWORD *)this + 96) += 2;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = this;
  *((_QWORD *)this + 53) = v3;
  *((_BYTE *)this + 432) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CustomDeformerComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::DynamicBoundingBoxSystem *re::ecs2::DynamicBoundingBoxSystem::DynamicBoundingBoxSystem(re::ecs2::DynamicBoundingBoxSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _QWORD v10[2];
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED67F98;
  *(_QWORD *)(v2 + 160) = &off_24ED67F40;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 176) = 0;
  v11 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v12 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v13 = re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
  v10[0] = &v11;
  v10[1] = 3;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 176), (uint64_t)v10);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 54) = 1;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 1;
  *((_QWORD *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 96) = 1;
  *(_OWORD *)((char *)this + 417) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 40, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 46, 0);
  *((_DWORD *)this + 96) += 2;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = this;
  *((_QWORD *)this + 53) = v3;
  *((_BYTE *)this + 432) = 1;
  LOWORD(v11) = 257;
  HIDWORD(v11) = 1023969417;
  LOBYTE(v12) = 0;
  v8 = (_anonymous_namespace_ *)re::ecs2::System::setTaskOptions(this, (uint64_t *)&v11);
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_QWORD *)this + 59) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 120) = 0;
  return this;
}

re::ecs2::MeshShadowSystem *re::ecs2::MeshShadowSystem::MeshShadowSystem(re::ecs2::MeshShadowSystem *this)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  uint64_t *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  const char *v10;
  const char *v11;
  float v12;
  char v13;
  char v15[2];
  _BYTE v16[4];
  float v17;

  v2 = (_OWORD *)((char *)this + 2420);
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED6DB08;
  v4 = v3 + 232;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_QWORD *)(v3 + 224) = 0;
  v5 = re::ecs2::MeshShadowSystemStateImpl::MeshShadowSystemStateImpl((re::ecs2::MeshShadowSystemStateImpl *)(v3 + 232), this);
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_DWORD *)this + 116) = 1;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_DWORD *)this + 124) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_DWORD *)this + 146) = 1;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_QWORD *)this + 78) = 0;
  *((_DWORD *)this + 158) = 1;
  *(_OWORD *)((char *)this + 665) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 71, 0);
  *((_DWORD *)this + 146) += 2;
  *((_QWORD *)this + 76) = 0;
  v9 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 77, 0);
  *((_DWORD *)this + 158) += 2;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 83) = this;
  *((_QWORD *)this + 84) = v4;
  *((_BYTE *)this + 680) = 0;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_DWORD *)this + 180) = 0;
  *(_QWORD *)((char *)this + 724) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_DWORD *)this + 192) = 0;
  *(_QWORD *)((char *)this + 772) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_DWORD *)this + 204) = 0;
  *(_QWORD *)((char *)this + 820) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 216) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *(_QWORD *)((char *)this + 868) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_DWORD *)this + 228) = 0;
  *(_QWORD *)((char *)this + 916) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_DWORD *)this + 240) = 0;
  *(_QWORD *)((char *)this + 964) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_DWORD *)this + 252) = 0;
  *(_QWORD *)((char *)this + 1012) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_DWORD *)this + 264) = 0;
  *(_QWORD *)((char *)this + 1060) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 276) = 0;
  *(_QWORD *)((char *)this + 1108) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 288) = 0;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *(_QWORD *)((char *)this + 1156) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 300) = 0;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *(_QWORD *)((char *)this + 1204) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 312) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *(_QWORD *)((char *)this + 1252) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 324) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *(_QWORD *)((char *)this + 1300) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_DWORD *)this + 336) = 0;
  *(_QWORD *)((char *)this + 1348) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 348) = 0;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *(_QWORD *)((char *)this + 1396) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 360) = 0;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *(_QWORD *)((char *)this + 1444) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 372) = 0;
  *((_OWORD *)this + 92) = 0u;
  *((_OWORD *)this + 91) = 0u;
  *(_QWORD *)((char *)this + 1492) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 384) = 0;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *(_QWORD *)((char *)this + 1540) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 396) = 0;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *(_QWORD *)((char *)this + 1588) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 408) = 0;
  *((_OWORD *)this + 101) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *(_QWORD *)((char *)this + 1636) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 420) = 0;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 103) = 0u;
  *(_QWORD *)((char *)this + 1684) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 432) = 0;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 106) = 0u;
  *(_QWORD *)((char *)this + 1732) = 0x7FFFFFFFLL;
  *((_BYTE *)this + 1744) = 0;
  *((_BYTE *)this + 1760) = 0;
  *((_BYTE *)this + 2400) = 0;
  *((_DWORD *)this + 604) = 1065353216;
  *v2 = xmmword_22610CC60;
  *(_QWORD *)((char *)this + 2436) = 0x3CF5C28F3F800000;
  *((_WORD *)this + 1222) = 0;
  *((_OWORD *)this + 153) = xmmword_22610CC70;
  *((_QWORD *)this + 308) = 0x3EB333333F800000;
  *((_BYTE *)this + 2472) = 1;
  *(_OWORD *)((char *)v2 + 56) = xmmword_22610CC80;
  *(_OWORD *)((char *)v2 + 72) = xmmword_22610CC90;
  *((_DWORD *)this + 627) = 1106247680;
  *((_QWORD *)this + 314) = 0x419800003DCCCCCDLL;
  *((_BYTE *)this + 2520) = 0;
  *((_OWORD *)this + 158) = xmmword_2260E5F50;
  *((_BYTE *)this + 2544) = 1;
  *((_QWORD *)this + 320) = 0x3F8000003F2D42C4;
  *((_DWORD *)this + 642) = 10;
  *(_OWORD *)((char *)v2 + 152) = xmmword_22610CCA0;
  *((_DWORD *)this + 647) = 1056964608;
  *((_QWORD *)this + 324) = 0x4000000000000000;
  *((_WORD *)this + 1300) = 0;
  *((_WORD *)this + 1302) = 1;
  *((_BYTE *)this + 2606) = 0;
  *((_QWORD *)this + 326) = 897988541;
  *((_DWORD *)this + 654) = 0;
  *(_QWORD *)((char *)this + 2620) = 0x3DCCCCCD3E800000;
  *((_DWORD *)this + 657) = 16;
  *((_QWORD *)this + 330) = 0;
  *((_BYTE *)this + 2648) = 0;
  *((_DWORD *)this + 663) = 1056964608;
  *((_WORD *)this + 1328) = 1;
  *((_QWORD *)this + 335) = 0;
  *((_QWORD *)this + 334) = 0;
  *((_QWORD *)this + 336) = 0;
  re::DynamicString::setCapacity((_QWORD *)this + 333, 0x3E8uLL);
  re::Defaults::floatValue((re::Defaults *)"ShadowPlaneUpdateInterval", v10, (uint64_t)v16);
  v12 = v17;
  if (!v16[0])
    v12 = 0.5;
  *((float *)this + 663) = v12;
  re::Defaults::BOOLValue((re::Defaults *)"ShadowUpdateLog", v11, v15);
  if (v15[0])
    v13 = v15[1];
  else
    v13 = 0;
  *((_BYTE *)this + 2656) = v13;
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::ProjectiveShadowReceiverSystem *re::ecs2::ProjectiveShadowReceiverSystem::ProjectiveShadowReceiverSystem(re::ecs2::ProjectiveShadowReceiverSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 160) = 0;
  v3 = v2 + 160;
  *(_QWORD *)v2 = &off_24ED5E970;
  v4 = v2 + 400;
  *(_QWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 1;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  v5 = (_QWORD *)(v2 + 280);
  *(_OWORD *)(v2 + 216) = 0u;
  v6 = (_QWORD *)(v2 + 216);
  *(_DWORD *)(v2 + 296) = 1;
  v7 = (_QWORD *)(v2 + 328);
  *(_QWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 344) = 1;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 377) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 74) += 2;
  *((_QWORD *)this + 40) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 86) += 2;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = this;
  *((_QWORD *)this + 48) = v4;
  *((_BYTE *)this + 392) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  re::ecs2::ProjectiveShadowReceiverStateImpl::ProjectiveShadowReceiverStateImpl(v4, (uint64_t)this);
  *((_QWORD *)this + 92) = 0;
  return this;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ProjectiveShadowReceiverComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::LightSystem *re::ecs2::LightSystem::LightSystem(re::ecs2::LightSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  _anonymous_namespace_ *v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  _anonymous_namespace_ *v31;
  uint64_t v33;
  char v34;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_QWORD *)v2 = &off_24ED5FA68;
  v3 = v2 + 168;
  v4 = (_anonymous_namespace_ *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::BaseLightComponentStateImpl(v2 + 168);
  *((_QWORD *)this + 21) = off_24ED495D0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_DWORD *)this + 94) = 1;
  *((_QWORD *)this + 48) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 102) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 124) = 1;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_QWORD *)this + 67) = 0;
  *((_DWORD *)this + 136) = 1;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 577) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 60, 0);
  *((_DWORD *)this + 124) += 2;
  *((_QWORD *)this + 65) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 66, 0);
  *((_DWORD *)this + 136) += 2;
  *((_QWORD *)this + 71) = 0;
  *((_QWORD *)this + 72) = this;
  *((_QWORD *)this + 73) = v3;
  *((_BYTE *)this + 592) = 1;
  LOWORD(v33) = 257;
  HIDWORD(v33) = 1023969417;
  v34 = 0;
  re::ecs2::System::setTaskOptions(this, &v33);
  v8 = re::ecs2::PointLightComponentStateImpl::PointLightComponentStateImpl((re::ecs2::LightSystem *)((char *)this + 600));
  *(_OWORD *)((char *)this + 792) = 0u;
  *((_DWORD *)this + 202) = 1;
  *((_QWORD *)this + 102) = 0;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 210) = 0;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_DWORD *)this + 232) = 1;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *((_QWORD *)this + 121) = 0;
  *((_DWORD *)this + 244) = 1;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1009) = 0u;
  v11 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 114, 0);
  *((_DWORD *)this + 232) += 2;
  *((_QWORD *)this + 119) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 120, 0);
  *((_DWORD *)this + 244) += 2;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 126) = this;
  *((_QWORD *)this + 127) = (char *)this + 600;
  *((_BYTE *)this + 1024) = 1;
  LOWORD(v33) = 257;
  HIDWORD(v33) = 1023969417;
  v34 = 0;
  re::ecs2::System::setTaskOptions(this, &v33);
  v12 = re::ecs2::SpotLightComponentStateImpl::SpotLightComponentStateImpl((re::ecs2::LightSystem *)((char *)this + 1032));
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((_DWORD *)this + 310) = 1;
  *((_QWORD *)this + 156) = 0;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *((_DWORD *)this + 318) = 0;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_DWORD *)this + 340) = 1;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *((_QWORD *)this + 175) = 0;
  *((_DWORD *)this + 352) = 1;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1441) = 0u;
  v15 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 168, 0);
  *((_DWORD *)this + 340) += 2;
  *((_QWORD *)this + 173) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 174, 0);
  *((_DWORD *)this + 352) += 2;
  *((_QWORD *)this + 179) = 0;
  *((_QWORD *)this + 180) = this;
  *((_QWORD *)this + 181) = (char *)this + 1032;
  *((_BYTE *)this + 1456) = 1;
  LOWORD(v33) = 257;
  HIDWORD(v33) = 1023969417;
  v34 = 0;
  re::ecs2::System::setTaskOptions(this, &v33);
  v16 = re::ecs2::DirectionalLightComponentStateImpl::DirectionalLightComponentStateImpl((re::ecs2::LightSystem *)((char *)this + 1464));
  *(_OWORD *)((char *)this + 1656) = 0u;
  *((_DWORD *)this + 418) = 1;
  *((_QWORD *)this + 210) = 0;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *((_DWORD *)this + 426) = 0;
  *((_OWORD *)this + 107) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((_OWORD *)this + 109) = 0u;
  *((_OWORD *)this + 110) = 0u;
  *((_OWORD *)this + 111) = 0u;
  *((_DWORD *)this + 448) = 1;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *((_QWORD *)this + 229) = 0;
  *((_DWORD *)this + 460) = 1;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *(_OWORD *)((char *)this + 1873) = 0u;
  v19 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 222, 0);
  *((_DWORD *)this + 448) += 2;
  *((_QWORD *)this + 227) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 228, 0);
  *((_DWORD *)this + 460) += 2;
  *((_QWORD *)this + 233) = 0;
  *((_QWORD *)this + 234) = this;
  *((_QWORD *)this + 235) = (char *)this + 1464;
  *((_BYTE *)this + 1888) = 1;
  LOWORD(v33) = 257;
  HIDWORD(v33) = 1023969417;
  v34 = 0;
  re::ecs2::System::setTaskOptions(this, &v33);
  v20 = (_anonymous_namespace_ *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this + 1896);
  *((_QWORD *)this + 237) = off_24ED49628;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *((_DWORD *)this + 526) = 1;
  *((_QWORD *)this + 264) = 0;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *((_DWORD *)this + 534) = 0;
  *((_OWORD *)this + 134) = 0u;
  *((_OWORD *)this + 135) = 0u;
  *((_OWORD *)this + 136) = 0u;
  *((_OWORD *)this + 137) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *((_DWORD *)this + 556) = 1;
  *(_OWORD *)((char *)this + 2232) = 0u;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *((_QWORD *)this + 283) = 0;
  *((_DWORD *)this + 568) = 1;
  *(_OWORD *)((char *)this + 2280) = 0u;
  *(_OWORD *)((char *)this + 2296) = 0u;
  *(_OWORD *)((char *)this + 2305) = 0u;
  v23 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 276, 0);
  *((_DWORD *)this + 556) += 2;
  *((_QWORD *)this + 281) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 282, 0);
  *((_DWORD *)this + 568) += 2;
  *((_QWORD *)this + 287) = 0;
  *((_QWORD *)this + 288) = this;
  *((_QWORD *)this + 289) = (char *)this + 1896;
  *((_BYTE *)this + 2320) = 1;
  LOWORD(v33) = 257;
  HIDWORD(v33) = 1023969417;
  v34 = 0;
  re::ecs2::System::setTaskOptions(this, &v33);
  v24 = (_anonymous_namespace_ *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this + 2328);
  *((_QWORD *)this + 291) = off_24ED49680;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *((_DWORD *)this + 634) = 1;
  *((_QWORD *)this + 318) = 0;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *((_DWORD *)this + 642) = 0;
  *((_OWORD *)this + 161) = 0u;
  *((_OWORD *)this + 162) = 0u;
  *((_OWORD *)this + 163) = 0u;
  *((_OWORD *)this + 164) = 0u;
  *((_OWORD *)this + 165) = 0u;
  *((_DWORD *)this + 664) = 1;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *((_QWORD *)this + 337) = 0;
  *((_DWORD *)this + 676) = 1;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2737) = 0u;
  v27 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 330, 0);
  *((_DWORD *)this + 664) += 2;
  *((_QWORD *)this + 335) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 336, 0);
  *((_DWORD *)this + 676) += 2;
  *((_QWORD *)this + 341) = 0;
  *((_QWORD *)this + 342) = this;
  *((_QWORD *)this + 343) = (char *)this + 2328;
  *((_BYTE *)this + 2752) = 1;
  LOWORD(v33) = 257;
  HIDWORD(v33) = 1023969417;
  v34 = 0;
  re::ecs2::System::setTaskOptions(this, &v33);
  v28 = re::ecs2::FrustumLightComponentStateImpl::FrustumLightComponentStateImpl((re::ecs2::LightSystem *)((char *)this + 2760));
  *(_OWORD *)((char *)this + 2952) = 0u;
  *((_DWORD *)this + 742) = 1;
  *((_QWORD *)this + 372) = 0;
  *(_OWORD *)((char *)this + 2984) = 0u;
  *((_DWORD *)this + 750) = 0;
  *((_OWORD *)this + 188) = 0u;
  *((_OWORD *)this + 189) = 0u;
  *((_OWORD *)this + 190) = 0u;
  *((_OWORD *)this + 191) = 0u;
  *((_OWORD *)this + 192) = 0u;
  *((_DWORD *)this + 772) = 1;
  *(_OWORD *)((char *)this + 3096) = 0u;
  *(_OWORD *)((char *)this + 3112) = 0u;
  *((_QWORD *)this + 391) = 0;
  *((_DWORD *)this + 784) = 1;
  *(_OWORD *)((char *)this + 3144) = 0u;
  *(_OWORD *)((char *)this + 3160) = 0u;
  *(_OWORD *)((char *)this + 3169) = 0u;
  v31 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 384, 0);
  *((_DWORD *)this + 772) += 2;
  *((_QWORD *)this + 389) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 390, 0);
  *((_DWORD *)this + 784) += 2;
  *((_QWORD *)this + 395) = 0;
  *((_QWORD *)this + 396) = this;
  *((_QWORD *)this + 397) = (char *)this + 2760;
  *((_BYTE *)this + 3184) = 1;
  LOWORD(v33) = 257;
  HIDWORD(v33) = 1023969417;
  v34 = 0;
  re::ecs2::System::setTaskOptions(this, &v33);
  *(_OWORD *)((char *)this + 3192) = 0u;
  *(_OWORD *)((char *)this + 3208) = 0u;
  *((_QWORD *)this + 403) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 808) = 0;
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 128;
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return *(_QWORD *)(a1 + 136);
  return v1;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::LightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 128;
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return *(_QWORD *)(a1 + 136);
  return v1;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AmbientLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 128;
  if ((*(_BYTE *)(a1 + 120) & 1) == 0)
    return *(_QWORD *)(a1 + 136);
  return v1;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::RectAreaLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::ImageBasedLightSystem *re::ecs2::ImageBasedLightSystem::ImageBasedLightSystem(re::ecs2::ImageBasedLightSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::ImageBasedLightComponentStateImpl *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 160) = 0;
  v3 = v2 + 160;
  *(_QWORD *)v2 = &off_24ED68FD0;
  v4 = (re::ecs2::ImageBasedLightComponentStateImpl *)(v2 + 400);
  *(_QWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 1;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  v5 = (_QWORD *)(v2 + 280);
  *(_OWORD *)(v2 + 216) = 0u;
  v6 = (_QWORD *)(v2 + 216);
  *(_DWORD *)(v2 + 296) = 1;
  v7 = (_QWORD *)(v2 + 328);
  *(_QWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 344) = 1;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 377) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 74) += 2;
  *((_QWORD *)this + 40) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 86) += 2;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = this;
  *((_QWORD *)this + 48) = v4;
  *((_BYTE *)this + 392) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  re::ecs2::ImageBasedLightComponentStateImpl::ImageBasedLightComponentStateImpl(v4, this);
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::AnchorSystem *re::ecs2::AnchorSystem::AnchorSystem(re::ecs2::AnchorSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 160) = 0;
  v3 = v2 + 160;
  *(_QWORD *)v2 = &off_24ED5F290;
  v4 = v2 + 400;
  *(_QWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 1;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  v5 = (_QWORD *)(v2 + 280);
  *(_OWORD *)(v2 + 216) = 0u;
  v6 = (_QWORD *)(v2 + 216);
  *(_DWORD *)(v2 + 296) = 1;
  v7 = (_QWORD *)(v2 + 328);
  *(_QWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 344) = 1;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 377) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 74) += 2;
  *((_QWORD *)this + 40) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 86) += 2;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = this;
  *((_QWORD *)this + 48) = v4;
  *((_BYTE *)this + 392) = 0;
  *((_QWORD *)this + 50) = &off_24ED5F228;
  *((_QWORD *)this + 51) = this;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_DWORD *)this + 110) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  v12[1] = 1;
  v13[0] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v12[0] = v13;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::AnchorSystem *)((char *)this + 456), (uint64_t)v12);
  return this;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnchorComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::MeshSystem *re::ecs2::MeshSystem::MeshSystem(re::ecs2::MeshSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::MeshComponentStateImpl *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED5ECA8;
  v3 = v2 + 264;
  v4 = (re::ecs2::MeshComponentStateImpl *)(v2 + 504);
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 272) = 0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_DWORD *)(v2 + 280) = 1;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_DWORD *)(v2 + 312) = 0;
  v5 = (_QWORD *)(v2 + 320);
  v6 = (_QWORD *)(v2 + 384);
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_DWORD *)(v2 + 400) = 1;
  v7 = (_QWORD *)(v2 + 432);
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_QWORD *)(v2 + 440) = 0;
  *(_DWORD *)(v2 + 448) = 1;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 481) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v6, 0);
  *((_DWORD *)this + 100) += 2;
  *((_QWORD *)this + 53) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 112) += 2;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = this;
  *((_QWORD *)this + 61) = v4;
  *((_BYTE *)this + 496) = 0;
  re::ecs2::MeshComponentStateImpl::MeshComponentStateImpl(v4, this);
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  return this;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::AREnvironmentProbeSystem *re::ecs2::AREnvironmentProbeSystem::AREnvironmentProbeSystem(re::ecs2::AREnvironmentProbeSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED6BAF8;
  *(_QWORD *)(v2 + 160) = &off_24ED6BA90;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  v4 = v2 + 200;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_QWORD *)(v2 + 208) = 0;
  *(_DWORD *)(v2 + 216) = 1;
  *(_QWORD *)(v2 + 232) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_DWORD *)(v2 + 248) = 0;
  v5 = (_QWORD *)(v2 + 256);
  v6 = (_QWORD *)(v2 + 320);
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 336) = 1;
  v7 = (_QWORD *)(v2 + 368);
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_QWORD *)(v2 + 376) = 0;
  *(_DWORD *)(v2 + 384) = 1;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 417) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v6, 0);
  *((_DWORD *)this + 84) += 2;
  *((_QWORD *)this + 45) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 96) += 2;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = this;
  *((_QWORD *)this + 53) = v3;
  *((_BYTE *)this + 432) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::CameraViewDescriptorsSystem *re::ecs2::CameraViewDescriptorsSystem::CameraViewDescriptorsSystem(re::ecs2::CameraViewDescriptorsSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::CameraViewDescriptorsComponentStateImpl *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 160) = 0;
  v3 = v2 + 160;
  *(_QWORD *)v2 = &off_24ED62200;
  v4 = (re::ecs2::CameraViewDescriptorsComponentStateImpl *)(v2 + 400);
  *(_QWORD *)(v2 + 168) = 0;
  *(_DWORD *)(v2 + 176) = 1;
  *(_QWORD *)(v2 + 192) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  v5 = (_QWORD *)(v2 + 280);
  *(_OWORD *)(v2 + 216) = 0u;
  v6 = (_QWORD *)(v2 + 216);
  *(_DWORD *)(v2 + 296) = 1;
  v7 = (_QWORD *)(v2 + 328);
  *(_QWORD *)(v2 + 336) = 0;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_DWORD *)(v2 + 344) = 1;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 377) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 74) += 2;
  *((_QWORD *)this + 40) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 86) += 2;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = this;
  *((_QWORD *)this + 48) = v4;
  *((_BYTE *)this + 392) = 0;
  re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewDescriptorsComponentStateImpl(v4, this);
  return this;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::ecs2::RenderPassGroupService::enableRenderPassGroups(re::ecs2::RenderPassGroupService *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  v2 = (unsigned __int8 *)&unk_255828000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255828000;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"enableRenderPassGroups", v5, v7);
      v6 = v7[1];
      if (!v7[0])
        v6 = 1;
      re::ecs2::RenderPassGroupService::enableRenderPassGroups(void)::enable = v6;
      v2 = (_BYTE *)&unk_255828000;
    }
  }
  return v2[1344];
}

uint64_t *re::ecs2::allocInfo_RenderPassGroupService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_167);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_167))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108400, 0);
    *(uint64_t *)((char *)&qword_254108410 + 6) = 0;
    qword_254108410 = 0;
    qword_254108420 = 0;
    qword_254108428 = 0xFFFFFFFFLL;
    qword_254108400 = (uint64_t)&off_24ED7DAA8;
    qword_254108430 = (uint64_t)"RenderPassGroupService";
    dword_254108438 = 0;
    unk_254108440 = 0u;
    unk_254108450 = 0u;
    unk_254108460 = 0u;
    qword_254108470 = 0;
    __cxa_guard_release(&_MergedGlobals_167);
  }
  return &qword_254108400;
}

void re::ecs2::initInfo_RenderPassGroupService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x57BC0B05EDD6AF7ALL;
  v5[1] = "RenderPassGroupService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RenderPassGroupService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_RenderPassGroupService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderPassGroupService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderPassGroupService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderPassGroupService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderPassGroupService>, this);
}

uint64_t *re::ecs2::allocInfo_UnlitMaterialParametersComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_168);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_168))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541084C0, 0);
    *(uint64_t *)((char *)&qword_2541084D0 + 6) = 0;
    qword_2541084D0 = 0;
    qword_2541084E0 = 0;
    qword_2541084E8 = 0xFFFFFFFFLL;
    qword_2541084C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541084F0 = (uint64_t)"UnlitMaterialParametersComponent";
    dword_2541084F8 = 0;
    unk_254108500 = 0u;
    unk_254108510 = 0u;
    unk_254108520 = 0u;
    qword_254108530 = 0;
    __cxa_guard_release(&_MergedGlobals_168);
  }
  return &qword_2541084C0;
}

void re::ecs2::initInfo_UnlitMaterialParametersComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  _QWORD v33[2];
  __int128 v34;

  v33[0] = 0xB3F9356AA8DB1ADCLL;
  v33[1] = "UnlitMaterialParametersComponent";
  re::StringID::destroyString((re::StringID *)v33);
  *((_OWORD *)this + 2) = v34;
  v4 = atomic_load((unsigned __int8 *)&qword_254108480);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254108480);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254108488 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_ColorGamut4F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "colorTint";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254108490 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_AssetHandle((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "texture";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x3000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254108498 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_float((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "opacityThreshold";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x4800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541084A0 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_BlendingType((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "blending";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x4C00000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_2541084A8 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_BOOL((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "disableTonemap";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x4D00000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2541084B0 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_AssetHandle((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "materialAsset";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x5000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_2541084B8 = v31;
      __cxa_guard_release(&qword_254108480);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254108488;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::UnlitMaterialParametersComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::UnlitMaterialParametersComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::UnlitMaterialParametersComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::UnlitMaterialParametersComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v32 = v34;
}

__n128 re::internal::defaultConstruct<re::ecs2::UnlitMaterialParametersComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  __n128 result;

  *((_QWORD *)this + 12) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED496D8;
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(v3 + 28) = result;
  *(_BYTE *)(v3 + 44) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 70) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::UnlitMaterialParametersComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

__n128 re::internal::defaultConstructV2<re::ecs2::UnlitMaterialParametersComponent>(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED496D8;
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(v1 + 28) = result;
  *(_BYTE *)(v1 + 44) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 70) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::UnlitMaterialParametersComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_UnlitMaterialParametersComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"UnlitMaterialParametersComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_UnlitMaterialParametersComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_UnlitMaterialParametersComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::UnlitMaterialParametersComponent>, this);
}

void re::ecs2::UnlitMaterialParametersComponent::~UnlitMaterialParametersComponent(re::ecs2::UnlitMaterialParametersComponent *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED496D8;
  v2 = (re::ecs2::UnlitMaterialParametersComponent *)((char *)this + 48);
  re::AssetHandle::~AssetHandle((re::ecs2::UnlitMaterialParametersComponent *)((char *)this + 80));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED496D8;
  v2 = (re::ecs2::UnlitMaterialParametersComponent *)((char *)this + 48);
  re::AssetHandle::~AssetHandle((re::ecs2::UnlitMaterialParametersComponent *)((char *)this + 80));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t *re::ecs2::allocInfo_SpatialSceneClassificationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_169);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_169))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108540, 0);
    *(uint64_t *)((char *)&qword_254108550 + 6) = 0;
    qword_254108550 = 0;
    qword_254108560 = 0;
    qword_254108568 = 0xFFFFFFFFLL;
    qword_254108540 = (uint64_t)&off_24ED7DAA8;
    qword_254108570 = (uint64_t)"SpatialSceneClassificationSystem";
    dword_254108578 = 0;
    unk_254108580 = 0u;
    unk_254108590 = 0u;
    unk_2541085A0 = 0u;
    qword_2541085B0 = 0;
    __cxa_guard_release(&_MergedGlobals_169);
  }
  return &qword_254108540;
}

void re::ecs2::initInfo_SpatialSceneClassificationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xCFB7F49288359FBALL;
  v5[1] = "SpatialSceneClassificationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SpatialSceneClassificationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpatialSceneClassificationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SpatialSceneClassificationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SpatialSceneClassificationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SpatialSceneClassificationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SpatialSceneClassificationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpatialSceneClassificationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::SpatialSceneClassificationSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)v3 = &off_24ED49758;
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 132) = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::SpatialSceneClassificationSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;

  v5 = (_QWORD *)(a3 + 120);
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 144);
  }
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

double re::internal::defaultConstructV2<re::ecs2::SpatialSceneClassificationSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)v1 = &off_24ED49758;
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 132) = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::SpatialSceneClassificationSystem>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 120);
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 144);
  }
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_SpatialSceneClassificationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpatialSceneClassificationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpatialSceneClassificationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpatialSceneClassificationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpatialSceneClassificationSystem>, this);
}

uint64_t re::ecs2::SpatialSceneClassificationSystem::willAddSystemToECSService(re::ecs2::SpatialSceneClassificationSystem *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v3);
    *((_QWORD *)this + 13) = result;
  }
  return result;
}

_QWORD *re::ecs2::SpatialSceneClassificationSystem::willRemoveSystemFromECSService(re::ecs2::SpatialSceneClassificationSystem *this)
{
  _QWORD *result;
  uint64_t v2;

  v2 = *((_QWORD *)this + 13);
  result = (_QWORD *)((char *)this + 104);
  if (v2)
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

uint64_t re::ecs2::SpatialSceneClassificationSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  re::ecs2::Scene *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  if (a2)
  {
    v2 = this;
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v7 = v2;
    v8 = re::ecs2::SpatialSceneClassificationSystem::activateComponents;
    v9 = 0;
    v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::createSubscription<re::ecs2::SpatialSceneClassificationSystem>(re::ecs2::SpatialSceneClassificationSystem *,REEventHandlerResult (re::ecs2::SpatialSceneClassificationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::Subscription const&,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 216), (uint64_t)&v7);
    v7 = v2;
    v8 = re::ecs2::SpatialSceneClassificationSystem::deactivateComponents;
    v9 = 0;
    v10 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::createSubscription<re::ecs2::SpatialSceneClassificationSystem>(re::ecs2::SpatialSceneClassificationSystem *,REEventHandlerResult (re::ecs2::SpatialSceneClassificationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::Subscription const&,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 304), (uint64_t)&v7);
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(v2 + 120), &v6);
    this = *(_QWORD *)(v2 + 104);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)this + 16))(this, v6);
      if (this)
      {
        v4 = *(_QWORD *)(*((_QWORD *)v6 + 13) + 272) >> 1;
        v5[0] = MEMORY[0x24BDAC760];
        v5[1] = 3221225472;
        v5[2] = ___ZN2re4ecs232SpatialSceneClassificationSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke;
        v5[3] = &__block_descriptor_40_e5_v8__0l;
        v5[4] = v6;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)this + 32))(this, 771, v4, v5);
      }
    }
  }
  return this;
}

void ___ZN2re4ecs232SpatialSceneClassificationSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a1 + 32) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3)
  {
    v4 = *(uint64_t **)(v2 + 40);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      v7 = *re::audioLogObjects((re *)v2);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v9 = *(_QWORD *)(v6 + 16);
        v10 = v7;
        v11 = *(_QWORD *)(v9 + 280);
        v12 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 296);
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) + 280);
        *(_DWORD *)buf = 134218754;
        v20 = v6;
        v21 = 2080;
        v22 = v11;
        v23 = 2048;
        v24 = v12;
        v25 = 2080;
        v26 = v13;
        _os_log_debug_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEBUG, "SpatialSceneClassificationSystem: service reset callback, resetting 'sentClassificationToAudioService' for component(%p) entity(%s, %llu) scene(%s)", buf, 0x2Au);

      }
      *(_BYTE *)(v6 + 42) = 0;
      v2 = _os_feature_enabled_impl();
      if ((_DWORD)v2)
      {
        v8 = *re::audioLogObjects((re *)v2);
        v2 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v2)
        {
          v14 = *(_QWORD *)(v6 + 16);
          v15 = v8;
          v16 = *(_QWORD *)(v14 + 280);
          v17 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 296);
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) + 280);
          *(_DWORD *)buf = 134218754;
          v20 = v6;
          v21 = 2080;
          v22 = v16;
          v23 = 2048;
          v24 = v17;
          v25 = 2080;
          v26 = v18;
          _os_log_debug_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEBUG, "SpatialSceneClassificationSystem: service reset callback, resetting 'sentRoomIdentifierToAudioService' for component(%p) entity(%s, %llu) scene(%s)", buf, 0x2Au);

        }
        *(_BYTE *)(v6 + 43) = 0;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
}

uint64_t re::ecs2::SpatialSceneClassificationSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::Scene *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (a2)
  {
    v2 = this;
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v5 = v2;
    *((_QWORD *)&v5 + 1) = re::ecs2::SpatialSceneClassificationSystem::activateComponents;
    v6 = 0;
    v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::createSubscription<re::ecs2::SpatialSceneClassificationSystem>(re::ecs2::SpatialSceneClassificationSystem *,REEventHandlerResult (re::ecs2::SpatialSceneClassificationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::Subscription const&,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 216, &v5);
    *(_QWORD *)&v5 = v2;
    *((_QWORD *)&v5 + 1) = re::ecs2::SpatialSceneClassificationSystem::deactivateComponents;
    v6 = 0;
    v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::createSubscription<re::ecs2::SpatialSceneClassificationSystem>(re::ecs2::SpatialSceneClassificationSystem *,REEventHandlerResult (re::ecs2::SpatialSceneClassificationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::Subscription const&,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 304, &v5);
    re::DynamicArray<unsigned long long>::remove(v2 + 120, &v4);
    this = *(_QWORD *)(v2 + 104);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)this + 16))(this, v4);
      if (this)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 40))(this, 771, *(_QWORD *)(*((_QWORD *)v4 + 13) + 272) >> 1);
    }
  }
  return this;
}

uint64_t re::ecs2::SpatialSceneClassificationSystem::activateComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      *(_BYTE *)(*a3 + 42) = 0;
      if (_os_feature_enabled_impl())
        *(_BYTE *)(v6 + 43) = 0;
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::SpatialSceneClassificationSystem::deactivateComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      *(_BYTE *)(*a3 + 42) = 0;
      if (_os_feature_enabled_impl())
        *(_BYTE *)(v6 + 43) = 0;
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::SpatialSceneClassificationSystem::update(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v22 = a2;
  if (a2)
  {
    v2 = result;
    if (*(_QWORD *)(result + 104))
    {
      v3 = (re::ecs2::SceneComponentTable *)(a2 + 200);
      v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v4)
        v5 = *(_QWORD *)(v4 + 24);
      else
        v5 = 0;
      v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v21);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
        v9 = *(int64x2_t **)(v8 + 152);
        if (v9)
        {
          v10 = v9[596].u64[0];
          if (v10 >= v5)
            v10 = v5;
          v9[596].i64[0] = v10;
          v11 = v9[596].u64[1];
          if (v11 <= v5)
            v11 = v5;
          v9[596].i64[1] = v11;
          v12 = vdupq_n_s64(1uLL);
          v12.i64[0] = v5;
          v9[597] = vaddq_s64(v9[597], v12);
          *(_BYTE *)(v8 + 184) = 0;
        }
      }
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v20, 3129, v2);
      v25[0] = &off_24ED497E0;
      v25[1] = &v22;
      v25[2] = v2;
      v26 = v25;
      v13 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      v14 = *(_QWORD *)(v13 + 24);
      if (v14)
      {
        v15 = *(uint64_t **)(v13 + 40);
        v16 = 8 * v14;
        do
        {
          v17 = *(_QWORD *)(*v15 + 16);
          if ((*(_BYTE *)(v17 + 288) & 1) != 0)
          {
            v23 = *v15;
            v24 = v17;
            if (!v26)
              std::__throw_bad_function_call[abi:nn180100]();
            (*(void (**)(_QWORD *, uint64_t *, uint64_t *))(*v26 + 48))(v26, &v24, &v23);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
      v18 = v26;
      if (v26 == v25)
      {
        v19 = 4;
        v18 = v25;
      }
      else
      {
        if (!v26)
        {
LABEL_24:
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v20);
          return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v21);
        }
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
      goto LABEL_24;
    }
  }
  return result;
}

void re::ecs2::SpatialSceneClassificationSystem::~SpatialSceneClassificationSystem(re::ecs2::SpatialSceneClassificationSystem *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 120);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 36);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SpatialSceneClassificationSystem::typeInfo(re::ecs2::SpatialSceneClassificationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpatialSceneClassificationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpatialSceneClassificationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpatialSceneClassificationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpatialSceneClassificationSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::SpatialSceneClassificationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SpatialSceneClassificationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::createSubscription<re::ecs2::SpatialSceneClassificationSystem>(re::ecs2::SpatialSceneClassificationSystem *,REEventHandlerResult (re::ecs2::SpatialSceneClassificationSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SpatialSceneClassificationComponent>,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>>::Subscription const&,re::Slice<re::ecs2::SpatialSceneClassificationComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[484].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[484].i64[0] = v5;
      v6 = v3[484].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[484].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[485] = vaddq_s64(v3[485], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

void std::__function::__func<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,std::allocator<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0>,void ()(re::ecs2::Entity *,re::ecs2::SpatialSceneClassificationComponent *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,std::allocator<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0>,void ()(re::ecs2::Entity *,re::ecs2::SpatialSceneClassificationComponent *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED497E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,std::allocator<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0>,void ()(re::ecs2::Entity *,re::ecs2::SpatialSceneClassificationComponent *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED497E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

re *std::__function::__func<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,std::allocator<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0>,void ()(re::ecs2::Entity *,re::ecs2::SpatialSceneClassificationComponent *)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  re *result;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[22];
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(*a3 + 42))
  {
    v6 = *re::audioLogObjects((re *)a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(v4 + 16);
      v12 = v6;
      v13 = *(_QWORD *)(v11 + 280);
      v14 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 296);
      v15 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 104) + 280);
      *(_DWORD *)v21 = 134218754;
      *(_QWORD *)&v21[4] = v4;
      *(_WORD *)&v21[12] = 2080;
      *(_QWORD *)&v21[14] = v13;
      v22 = 2048;
      v23 = v14;
      v24 = 2080;
      v25 = v15;
      _os_log_debug_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEBUG, "SpatialSceneClassificationSystem: updating target Spatial Scene Classification for component(%p) entity(%s, %llu) scene(%s)", v21, 0x2Au);

    }
    v7 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 104) + 16))(*(_QWORD *)(v5 + 104), **(_QWORD **)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 336))(v7, *(unsigned __int8 *)(v4 + 25));
    *(_BYTE *)(v4 + 42) = 1;
  }
  result = (re *)_os_feature_enabled_impl();
  if ((_DWORD)result && !*(_BYTE *)(v4 + 43))
  {
    v9 = *re::audioLogObjects(result);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(v4 + 16);
      v17 = v9;
      v18 = *(_QWORD *)(v16 + 280);
      v19 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 296);
      v20 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 104) + 280);
      *(_DWORD *)v21 = 134218754;
      *(_QWORD *)&v21[4] = v4;
      *(_WORD *)&v21[12] = 2080;
      *(_QWORD *)&v21[14] = v18;
      v22 = 2048;
      v23 = v19;
      v24 = 2080;
      v25 = v20;
      _os_log_debug_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEBUG, "SpatialSceneClassificationSystem: updating target Spatial Scene Room Identifier for component(%p) entity(%s, %llu) scene(%s)", v21, 0x2Au);

    }
    *(_OWORD *)v21 = *(_OWORD *)(v4 + 26);
    v10 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 104) + 16))(*(_QWORD *)(v5 + 104), **(_QWORD **)(a1 + 8));
    result = (re *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 352))(v10, v21);
    *(_BYTE *)(v4 + 43) = 1;
  }
  return result;
}

uint64_t std::__function::__func<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,std::allocator<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0>,void ()(re::ecs2::Entity *,re::ecs2::SpatialSceneClassificationComponent *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0,std::allocator<re::ecs2::SpatialSceneClassificationSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_0>,void ()(re::ecs2::Entity *,re::ecs2::SpatialSceneClassificationComponent *)>::target_type()
{
}

re::ecs2::VisualProxyScopeManagerStateTracking *re::ecs2::VisualProxyScopeManagerStateTracking::VisualProxyScopeManagerStateTracking(re::ecs2::VisualProxyScopeManagerStateTracking *this)
{
  _QWORD *v2;
  _QWORD v4[2];
  _QWORD v5[4];

  v5[3] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)re::ecs2::HierarchyStateTracking<re::ecs2::EntityVisualProxyScopeData>::HierarchyStateTracking((uint64_t)this);
  *v2 = &off_24ED49870;
  v2[32] = 0;
  v2[33] = 0;
  v2[31] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 31), (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EntityVisualProxyScopeData>::HierarchyStateTracking(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;

  *(_QWORD *)a1 = off_24ED2B868;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v2 = a1 + 56;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v3 = a1 + 104;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  v4 = a1 + 152;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::VisualProxyScopeManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int32 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  re::ecs2::EntityComponentCollection *v27;
  uint64_t v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int32 v31;
  unsigned __int8 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unsigned __int32 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  int v60;
  _BYTE v61[128];

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 6;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)(a2 + 16);
    v9 = (_QWORD *)(a1 + 56);
    v10 = *(_DWORD *)(a2 + 32);
    v50 = v10;
    do
    {
      v11 = *(_QWORD *)(v8 + 24 * v7 + 16);
      if (*v9)
      {
        v12 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
        v13 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v12 ^ (v12 >> 31)) % *(unsigned int *)(a1 + 80)));
        if ((_DWORD)v13 != 0x7FFFFFFF)
        {
          v14 = *(_QWORD *)(a1 + 72);
          while (*(_QWORD *)(v14 + 32 * v13 + 16) != v11)
          {
            v13 = *(_DWORD *)(v14 + 32 * v13 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v13 == 0x7FFFFFFF)
              goto LABEL_14;
          }
          goto LABEL_68;
        }
      }
LABEL_14:
      v15 = *(_QWORD *)(v11 + 24);
      if (!v15 || (*(_BYTE *)(v15 + 288) & 0x80) != 0)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
      }
      else
      {
        while (1)
        {
          v16 = v15;
          if (*v9)
          {
            v17 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
            v18 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(a1 + 80)));
            if ((_DWORD)v18 != 0x7FFFFFFF)
              break;
          }
LABEL_21:
          v15 = *(_QWORD *)(v16 + 24);
          if (v15)
          {
            v11 = v16;
            if ((*(_BYTE *)(v15 + 288) & 0x80) == 0)
              continue;
          }
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v11 = v16;
          goto LABEL_29;
        }
        v19 = *(_QWORD *)(a1 + 72);
        while (*(_QWORD *)(v19 + 32 * v18 + 16) != v16)
        {
          v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v18 == 0x7FFFFFFF)
            goto LABEL_21;
        }
        v23 = v19 + 32 * v18;
        v21 = *(_BYTE *)(v23 + 28);
        if (v21)
          v20 = *(_DWORD *)(v23 + 24);
        else
          v20 = 0;
        v22 = *(_BYTE *)(v23 + 29);
      }
LABEL_29:
      re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v61);
      v54 = 0;
      v55 = 0;
      v56 = 1;
      v58 = 0;
      v59 = 0;
      v57 = 0;
      v60 = 0;
      re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::init((uint64_t)&v54, (uint64_t)v61, 1uLL);
      v53.n128_u64[0] = v11;
      v53.n128_u32[2] = v20;
      v53.n128_u8[12] = v21;
      v53.n128_u8[13] = v22;
      v24 = re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::add((uint64_t)&v54, &v53);
      v25 = v59;
      while (v25)
      {
        v53 = *(__n128 *)re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v54, --v25);
        re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v54, v25);
        v59 = v25;
        ++v60;
        v26 = v53.n128_u64[0];
        v27 = (re::ecs2::EntityComponentCollection *)(v53.n128_u64[0] + 32);
        v28 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v53.n128_u64[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v28)
        {
          v29 = 0;
          v53.n128_u32[2] |= *(_DWORD *)(v28 + 28);
          v30 = 1;
          v53.n128_u8[12] = 1;
        }
        else
        {
          v30 = 1;
          if (v53.n128_u8[12])
          {
            v29 = 0;
          }
          else
          {
            v53.n128_u32[2] = 1;
            v29 = 1;
            v30 = 0;
          }
        }
        if (re::ecs2::EntityComponentCollection::get(v27, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
        {
          v53.n128_u8[13] = 1;
        }
        if (re::ecs2::EntityComponentCollection::get(v27, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
        {
          v31 = 1;
          v53.n128_u32[2] = 1;
        }
        else
        {
          v31 = v53.n128_u32[2];
        }
        v52.n128_u32[0] = v31;
        v52.n128_u8[4] = v30;
        v32 = v53.n128_u8[13];
        v52.n128_u8[5] = v53.n128_u8[13];
        v33 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27));
        v34 = v33 ^ (v33 >> 31);
        if (*v9)
        {
          v35 = v34 % *(unsigned int *)(a1 + 80);
          v36 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v35);
          if ((_DWORD)v36 != 0x7FFFFFFF)
          {
            v37 = *(_QWORD *)(a1 + 72);
            while (*(_QWORD *)(v37 + 32 * v36 + 16) != v26)
            {
              v36 = *(_DWORD *)(v37 + 32 * v36 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v36 == 0x7FFFFFFF)
                goto LABEL_47;
            }
            goto LABEL_48;
          }
        }
        else
        {
          LODWORD(v35) = 0;
        }
LABEL_47:
        re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1 + 56, v35, v34, &v53, &v52);
        ++*(_DWORD *)(a1 + 96);
LABEL_48:
        v38 = *(_QWORD *)(v26 + 328);
        if (v38)
        {
          v39 = *(unint64_t **)(v26 + 344);
          if (v29)
            v40 = 0;
          else
            v40 = v31;
          v41 = 8 * v38;
          do
          {
            v42 = *v39++;
            v52.n128_u64[0] = v42;
            v52.n128_u32[2] = v40;
            v52.n128_u8[12] = v30;
            v52.n128_u8[13] = v32;
            v24 = re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::add((uint64_t)&v54, &v52);
            v41 -= 8;
          }
          while (v41);
          v25 = v59;
        }
      }
      v43 = v54;
      if (v55)
      {
        v44 = v58;
        v45 = v56;
        v46 = v55 - 1;
        do
        {
          if ((v45 & 1) != 0)
            v47 = &v57;
          else
            v47 = v44;
          (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v43 + 40))(v43, v47[v46], v24);
          v45 += 2;
          v56 = v45;
          --v46;
        }
        while (v46 != -1);
        if ((v45 & 1) != 0)
          goto LABEL_67;
      }
      else if (!v54 || (v56 & 1) != 0)
      {
        goto LABEL_67;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v43 + 40))(v43, v58);
LABEL_67:
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v61);
      LODWORD(v3) = v50;
      v10 = *(_DWORD *)(a2 + 32);
      v8 = *(_QWORD *)(a2 + 16);
LABEL_68:
      if (v10 <= (int)v4 + 1)
        v48 = v4 + 1;
      else
        v48 = v10;
      while (1)
      {
        v7 = (v4 + 1);
        if (v48 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v49 = v7;
        if ((*(_DWORD *)(v8 + 24 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_75;
      }
      v49 = v48;
LABEL_75:
      LODWORD(v4) = v49;
    }
    while ((_DWORD)v3 != v49);
  }
}

__n128 re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::setBucketsCapacity((_QWORD *)a1, (v4 + 32) >> 5);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  result = *a2;
  *(__n128 *)(v7 + 16 * (v4 & 0x1F)) = *a2;
  return result;
}

uint64_t re::ecs2::VisualProxyScopeManagerStateTracking::trackedComponents(re::ecs2::VisualProxyScopeManagerStateTracking *this)
{
  return *((_QWORD *)this + 33);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_11, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 16 * (a2 & 0x1F);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _BYTE v25[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v25, v13, v12);
          v15 = *(_OWORD *)v25;
          *(_OWORD *)v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v25[16];
          *(_QWORD *)&v25[16] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v16;
          v18 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          v17 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v18;
          v19 = v17;
          if (v17)
          {
            v20 = 0;
            v21 = 0;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)&v25[16] + v20 + 8) & 0x80000000) != 0)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v25[16] + v20) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v25[16] + v20), *(_QWORD *)&v25[16] + v20 + 16, *(_QWORD *)&v25[16] + v20 + 24);
                v19 = *(_DWORD *)&v25[32];
              }
              ++v21;
              v20 += 32;
            }
            while (v21 < v19);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v25);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

void re::ecs2::HingeJointComponent::addToSimulation(re::ecs2::HingeJointComponent *this, re::PhysicsSimulation *a2, const re::ecs2::Entity *a3)
{
  char *RigidBody;
  const re::ecs2::Entity *v6;
  char *v7;
  BOOL v8;
  char *v9;
  re::Constraint *v10;

  if (RigidBody)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = v7;
    *((_QWORD *)this + 19) = v10;
    re::PhysicsJointCollection::add((re::PhysicsSimulation *)((char *)a2 + 136), v10);
    objc_storeWeak((id *)this + 20, (char *)a2 + 8);
    re::ecs2::ConstraintComponentHelper<re::ecs2::HingeJointComponent>::registerConstraint((uint64_t)this);
  }
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::HingeJointComponent>::registerConstraint(uint64_t a1)
{
  char *v2;
  char *v3;

  v2 = re::ecs2::EntityHandle::resolve((id *)(a1 + 32), *(_QWORD *)(a1 + 16));
  re::ecs2::ConstraintComponentHelper<re::ecs2::HingeJointComponent>::registerConstraint((uint64_t)v2, *(_QWORD *)(a1 + 16));
  v3 = re::ecs2::EntityHandle::resolve((id *)(a1 + 56), *(_QWORD *)(a1 + 16));
  re::ecs2::ConstraintComponentHelper<re::ecs2::HingeJointComponent>::registerConstraint((uint64_t)v3, *(_QWORD *)(a1 + 16));
}

void re::ecs2::HingeJointComponent::removeFromSimulation(id *this)
{
  id *v2;
  _QWORD *WeakRetained;
  void *v4;
  void (***v5)(id);
  char *v6;
  _QWORD *v7;
  id v8;

  if (this[19])
  {
    v2 = this + 20;
    WeakRetained = objc_loadWeakRetained(this + 20);
    if (WeakRetained)
    {
      v4 = WeakRetained;
      v8 = this[19];
      re::DynamicArray<re::Allocator const*>::removeStable(WeakRetained + 18, &v8);
      objc_destroyWeak(v2);
      this[20] = 0;

    }
    v5 = (void (***)(id))this[19];
    if (v5)
    {
      (**v5)(this[19]);
    }
    this[19] = 0;
    v6 = (char *)this[2];
    if (v6)
    {
      v7 = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v7)
        re::ecs2::ConstraintComponentHelper<re::ecs2::HingeJointComponent>::removeConstraintsFromSimulation(v7);
    }
  }
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::HingeJointComponent>::removeConstraintsFromSimulation(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *WeakRetained;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if ((int)a1[11] >= 1)
  {
    v2 = (char *)a1[2];
    v3 = (uint64_t)(a1 + 9);
    v4 = a1[11] + 1;
    do
    {
      v5 = (v4 - 2);
      if (a1[11] <= v5)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      WeakRetained = (char *)objc_loadWeakRetained((id *)(a1[13] + 8 * v5));
      if (WeakRetained)
      {
        v7 = WeakRetained;
        v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v8
          || (v9 = v8, re::ecs2::EntityHandle::resolve((id *)(v8 + 32), (uint64_t)v7 - 8) != v2)
          && re::ecs2::EntityHandle::resolve((id *)(v9 + 56), (uint64_t)v7 - 8) != v2)
        {
          re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::removeAt(v3, (v4 - 2));
        }

      }
      else
      {
        re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::removeAt(v3, (v4 - 2));
      }
      --v4;
    }
    while (v4 > 1);
  }
}

uint64_t *re::ecs2::allocInfo_HingeJointComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_170);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_170))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541085F8, 0);
    *(uint64_t *)((char *)&qword_254108608 + 6) = 0;
    qword_254108608 = 0;
    qword_254108618 = 0;
    qword_254108620 = 0xFFFFFFFFLL;
    qword_2541085F8 = (uint64_t)&off_24ED7DAA8;
    qword_254108628 = (uint64_t)"HingeJointComponent";
    dword_254108630 = 0;
    xmmword_254108638 = 0u;
    unk_254108648 = 0u;
    xmmword_254108658 = 0u;
    qword_254108668 = 0;
    __cxa_guard_release(&_MergedGlobals_170);
  }
  return &qword_2541085F8;
}

void re::ecs2::initInfo_HingeJointComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0xA5242FCC04AC1AFCLL;
  v28[1] = "HingeJointComponent";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_2541085C0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541085C0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541085C8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "bodyA";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541085D0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "bodyB";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x3800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541085D8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "localAnchorPoseA";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x5000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541085E0 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v21 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "localAnchorPoseB";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x7000000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2541085E8 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_BOOL((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "collisionsEnabled";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x9000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_2541085F0 = v26;
      __cxa_guard_release(&qword_2541085C0);
    }
  }
  *((_QWORD *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_2541085C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::HingeJointComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::HingeJointComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HingeJointComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HingeJointComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

uint64_t re::internal::defaultConstruct<re::ecs2::HingeJointComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::HingeJointComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::HingeJointComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_destroyWeak((id *)(a3 + 160));
  *(_QWORD *)(a3 + 160) = 0;
  re::ecs2::EntityHandle::reset((id *)(a3 + 56));
  objc_destroyWeak((id *)(a3 + 56));
  *(_QWORD *)(a3 + 56) = 0;
  re::ecs2::EntityHandle::reset((id *)(a3 + 32));
  objc_destroyWeak((id *)(a3 + 32));
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::HingeJointComponent>(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 160));
  *(_QWORD *)(a1 + 160) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 56));
  objc_destroyWeak((id *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 32));
  objc_destroyWeak((id *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_HingeJointComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HingeJointComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HingeJointComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HingeJointComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HingeJointComponent>, this);
}

void re::ecs2::ConstraintComponentHelper<re::ecs2::HingeJointComponent>::registerConstraint(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  id location;

  if (a1)
  {
    v3 = (_QWORD *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (a2)
      v4 = (void *)(a2 + 8);
    else
      v4 = 0;
    objc_initWeak(&location, v4);
    v5 = v3[13];
    v6 = v3[11];
    if (v6)
    {
      v7 = 8 * v6;
      v8 = (id *)v3[13];
      while (*v8 != location)
      {
        ++v8;
        v7 -= 8;
        if (!v7)
        {
          v8 = (id *)(v5 + 8 * v6);
          break;
        }
      }
    }
    else
    {
      v8 = (id *)v3[13];
    }
    if (v6 == ((uint64_t)v8 - v5) >> 3)
      re::DynamicArray<re::ArcWeakPtr<re::ecs2::Entity>>::add((_anonymous_namespace_ *)(v3 + 9), &location);
    objc_destroyWeak(&location);
  }
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::HingeJointComponent>(uint64_t a1)
{
  id *v2;
  id *v3;
  uint64_t v4;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v2 = (id *)(a1 + 160);
  *(_OWORD *)(a1 + 32) = 0u;
  v3 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED498C8;
  objc_initWeak(v3, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset(v3);
  objc_initWeak((id *)(a1 + 56), 0);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 56));
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  objc_initWeak(v2, 0);
  return a1;
}

void re::ecs2::HingeJointComponent::~HingeJointComponent(id *this)
{
  objc_destroyWeak(this + 20);
  this[20] = 0;
  re::ecs2::EntityHandle::reset(this + 7);
  objc_destroyWeak(this + 7);
  this[7] = 0;
  re::ecs2::EntityHandle::reset(this + 4);
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  objc_destroyWeak(this + 20);
  this[20] = 0;
  re::ecs2::EntityHandle::reset(this + 7);
  objc_destroyWeak(this + 7);
  this[7] = 0;
  re::ecs2::EntityHandle::reset(this + 4);
  objc_destroyWeak(this + 4);
  this[4] = 0;
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

int *re::ecs2::syncPolicy::denyAll(re::ecs2::syncPolicy *this)
{
  unsigned __int8 v1;

  {
    re::ecs2::syncPolicy::denyAll(void)::denyAll = 1;
    qword_255828578 = 0;
    qword_255828560 = 0;
    unk_255828568 = 0;
    qword_255828558 = 0;
    dword_255828570 = 0;
  }
  return &re::ecs2::syncPolicy::denyAll(void)::denyAll;
}

int *re::ecs2::syncPolicy::allowAll(re::ecs2::syncPolicy *this)
{
  unsigned __int8 v1;

  {
    re::ecs2::syncPolicy::allowAll(void)::allowAll = 0;
    qword_2558285B0 = 0;
    qword_255828598 = 0;
    unk_2558285A0 = 0;
    qword_255828590 = 0;
    dword_2558285A8 = 0;
  }
  return &re::ecs2::syncPolicy::allowAll(void)::allowAll;
}

void re::ecs2::SyncAccessControl::addEntry(_QWORD *a1, unint64_t a2, unsigned __int32 a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 v11;
  char v12;

  v11.n128_u64[0] = a2;
  v11.n128_u32[2] = a3;
  v4 = a1[5];
  v5 = a1[3];
  if (v5)
  {
    v6 = 16 * v5;
    v7 = a1[5];
    while (*(_QWORD *)v7 != a2 || *(_DWORD *)(v7 + 8) != a3)
    {
      v7 += 16;
      v6 -= 16;
      if (!v6)
      {
        v7 = v4 + 16 * v5;
        break;
      }
    }
  }
  else
  {
    v7 = a1[5];
  }
  if (v5 == (v7 - v4) >> 4)
  {
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)(a1 + 1), &v11);
    v8 = a1[3];
    v9 = 126 - 2 * __clz(v8);
    if (v8)
      v10 = v9;
    else
      v10 = 0;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *,false>(a1[5], a1[5] + 16 * v8, (uint64_t)&v12, v10, 1);
  }
}

BOOL re::DynamicArray<re::ecs2::SyncAccessControlEntry>::removeStable(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  v3 = a1[2];
  if (v3)
  {
    v4 = 16 * v3;
    v5 = a1[4];
    while (*(_QWORD *)v5 != *(_QWORD *)a2 || *(_DWORD *)(v5 + 8) != *(_DWORD *)(a2 + 8))
    {
      v5 += 16;
      v4 -= 16;
      if (!v4)
      {
        v5 = v2 + 16 * v3;
        break;
      }
    }
  }
  else
  {
    v5 = a1[4];
  }
  v6 = v5 - v2;
  v7 = v6 >> 4;
  if (v6 >> 4 != v3)
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::removeStableAt(a1, v6 >> 4);
  return v7 != v3;
}

void re::ecs2::SyncAccessControl::inherit(uint64_t a1, int *a2, int *a3)
{
  int v5;
  int v6;
  _BOOL4 v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t v15;
  unsigned __int32 v16;
  int v17;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  __n128 *v23;

  v5 = *a2;
  v6 = *a3;
  v8 = *a3 == 1 || v5 == 1;
  *(_DWORD *)a1 = v8;
  v9 = (_anonymous_namespace_ *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  ++*(_DWORD *)(a1 + 32);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a3 + 3);
  if (*(_QWORD *)(a1 + 16) < v11 + v10)
  {
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(a1 + 8), v11 + v10);
    v10 = *((_QWORD *)a2 + 3);
    v11 = *((_QWORD *)a3 + 3);
  }
  v12 = 0;
  v13 = 0;
  if (v10 && v11)
  {
    v13 = 0;
    v12 = 0;
    while (1)
    {
      v14 = (__n128 *)(*((_QWORD *)a2 + 5) + 16 * v13);
      v15 = *((_QWORD *)a3 + 5) + 16 * v12;
      v16 = v14->n128_u32[2];
      v17 = *(_DWORD *)(v15 + 8);
      if (v14->n128_u64[0] == *(_QWORD *)v15 && v16 == v17)
      {
        re::DynamicArray<re::RigNodeConstraint>::add(v9, v14);
        ++v13;
LABEL_28:
        ++v12;
        goto LABEL_29;
      }
      if (v16 != v17)
        break;
      if (v14->n128_u64[0] >= *(_QWORD *)v15)
        goto LABEL_25;
      if (v6 != 1 || v16 == 1)
        goto LABEL_23;
LABEL_24:
      ++v13;
LABEL_29:
      v10 = *((_QWORD *)a2 + 3);
      v11 = *((_QWORD *)a3 + 3);
      if (v13 >= v10 || v12 >= v11)
        goto LABEL_34;
    }
    if (v16 != 1)
    {
LABEL_25:
      if (v5 != 1 || v17 == 1)
        re::DynamicArray<re::RigNodeConstraint>::add(v9, (__n128 *)(*((_QWORD *)a3 + 5) + 16 * v12));
      goto LABEL_28;
    }
LABEL_23:
    re::DynamicArray<re::RigNodeConstraint>::add(v9, v14);
    goto LABEL_24;
  }
LABEL_34:
  if (v13 < v10)
  {
    v20 = 16 * v13;
    do
    {
      v21 = (__n128 *)(*((_QWORD *)a2 + 5) + v20);
      if (v6 != 1 || v21->n128_u32[2] == 1)
      {
        re::DynamicArray<re::RigNodeConstraint>::add(v9, v21);
        v10 = *((_QWORD *)a2 + 3);
      }
      ++v13;
      v20 += 16;
    }
    while (v13 < v10);
    v11 = *((_QWORD *)a3 + 3);
  }
  if (v12 < v11)
  {
    v22 = 16 * v12;
    do
    {
      v23 = (__n128 *)(*((_QWORD *)a3 + 5) + v22);
      if (v5 != 1 || v23->n128_u32[2] == 1)
      {
        re::DynamicArray<re::RigNodeConstraint>::add(v9, v23);
        v11 = *((_QWORD *)a3 + 3);
      }
      ++v12;
      v22 += 16;
    }
    while (v12 < v11);
  }
}

BOOL re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = v3 + 16 * v2;
  v5 = *(_QWORD *)(a2 + 32);
  do
  {
    result = *(_QWORD *)v3 == *(_QWORD *)v5 && *(_DWORD *)(v3 + 8) == *(_DWORD *)(v5 + 8);
    v3 += 16;
    v5 += 16;
  }
  while (result && v3 != v4);
  return result;
}

void re::ecs2::introspect_SyncAccessPolicy(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254108678);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254108678);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Allow";
      qword_2541086B8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "Deny";
      qword_2541086C0 = v30;
      __cxa_guard_release(&qword_254108678);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254108680);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254108680))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254108728, "SyncAccessPolicy", 4, 4, 1, 1);
    qword_254108728 = (uint64_t)&off_24ED7D9E8;
    qword_254108768 = (uint64_t)&re::ecs2::introspect_SyncAccessPolicy(BOOL)::enumTable;
    dword_254108738 = 9;
    __cxa_guard_release(&qword_254108680);
  }
  if ((_MergedGlobals_171 & 1) == 0)
  {
    _MergedGlobals_171 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254108728, a2);
    v32 = 0x1D0F42E6C2A29C22;
    v33 = "SyncAccessPolicy";
    v36[0] = 208862;
    v36[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_254108768;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_254108748 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SyncAccessPolicy", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::SyncAccessControlEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::SyncAccessControlEntry>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t *re::ecs2::allocInfo_SyncAccessControl(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541086A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541086A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541087E8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541087F8 = 0;
    qword_254108808 = 0;
    qword_254108810 = 0xFFFFFFFFLL;
    qword_2541087E8 = (uint64_t)&off_24ED7DAA8;
    qword_254108818 = (uint64_t)"SyncAccessControl";
    dword_254108820 = 0;
    xmmword_254108828 = 0u;
    unk_254108838 = 0u;
    xmmword_254108848 = 0u;
    qword_254108858 = 0;
    __cxa_guard_release(&qword_2541086A8);
  }
  return &qword_2541087E8;
}

void re::ecs2::initInfo_SyncAccessControl(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  unsigned __int8 v12;
  const re::IntrospectionBase *v13;
  unsigned __int8 v14;
  int v15;
  re::IntrospectionRegistry *v16;
  const re::IntrospectionBase *v17;
  const char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35[2];
  __int128 v36;
  const char *v37;
  __int128 v38[2];

  *(_QWORD *)&v36 = 0x84D919EC3291B0BCLL;
  *((_QWORD *)&v36 + 1) = "SyncAccessControl";
  re::StringID::destroyString((re::StringID *)&v36);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&qword_2541086A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541086A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::ecs2::introspect_SyncAccessPolicy((re::ecs2 *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "m_defaultPolicy";
      *(_QWORD *)(v8 + 16) = &qword_254108728;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541086D8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = atomic_load((unsigned __int8 *)&qword_2541086B0);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2541086B0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541086E8, 0);
        *(uint64_t *)((char *)&qword_2541086F8 + 6) = 0;
        qword_2541086F8 = 0;
        *(_QWORD *)&xmmword_254108708 = 0;
        *((_QWORD *)&xmmword_254108708 + 1) = 0xFFFFFFFFLL;
        qword_2541086E8 = (uint64_t)&off_24ED1FA08;
        qword_254108720 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(algn_254108718);
        qword_2541086E8 = (uint64_t)&off_24ED49948;
        __cxa_guard_release(&qword_2541086B0);
      }
      if ((byte_254108671 & 1) == 0)
      {
        v11 = (uint64_t *)qword_254108698;
        if (qword_254108698)
          goto LABEL_10;
        v12 = atomic_load((unsigned __int8 *)&qword_254108688);
        if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254108688))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108770, 0);
          *(uint64_t *)((char *)&qword_254108780 + 6) = 0;
          qword_254108780 = 0;
          *(_QWORD *)&xmmword_254108790 = 0;
          *((_QWORD *)&xmmword_254108790 + 1) = 0xFFFFFFFFLL;
          qword_254108770 = (uint64_t)&off_24ED7DAA8;
          qword_2541087A0 = (uint64_t)"SyncAccessControlEntry";
          dword_2541087A8 = 0;
          xmmword_2541087B0 = 0u;
          *(_OWORD *)&qword_2541087C0 = 0u;
          xmmword_2541087D0 = 0u;
          qword_2541087E0 = 0;
          __cxa_guard_release(&qword_254108688);
        }
        qword_254108698 = (uint64_t)&qword_254108770;
        *(_QWORD *)&v38[0] = 0xD6FC847F5DCB9568;
        *((_QWORD *)&v38[0] + 1) = "SyncAccessControlEntry";
        re::StringID::destroyString((re::StringID *)v38);
        xmmword_254108790 = v36;
        v14 = atomic_load((unsigned __int8 *)&qword_254108690);
        if ((v14 & 1) == 0)
        {
          v23 = (re *)__cxa_guard_acquire(&qword_254108690);
          if ((_DWORD)v23)
          {
            v24 = re::introspectionAllocator(v23);
            v26 = re::introspect_uint64_t((re *)1, v25);
            v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
            *(_DWORD *)v27 = 1;
            *(_QWORD *)(v27 + 8) = "peer";
            *(_QWORD *)(v27 + 16) = v26;
            *(_QWORD *)(v27 + 24) = 0;
            *(_QWORD *)(v27 + 32) = 1;
            *(_DWORD *)(v27 + 40) = 0;
            *(_QWORD *)(v27 + 48) = 0;
            *(_QWORD *)(v27 + 56) = 0;
            *(_DWORD *)(v27 + 64) = 0;
            qword_2541086C8 = v27;
            v28 = re::introspectionAllocator((re *)v27);
            re::ecs2::introspect_SyncAccessPolicy((re::ecs2 *)v28, v29);
            v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
            *(_DWORD *)v30 = 1;
            *(_QWORD *)(v30 + 8) = "policy";
            *(_QWORD *)(v30 + 16) = &qword_254108728;
            *(_QWORD *)(v30 + 24) = 0;
            *(_QWORD *)(v30 + 32) = 0x800000002;
            *(_DWORD *)(v30 + 40) = 0;
            *(_QWORD *)(v30 + 48) = 0;
            *(_QWORD *)(v30 + 56) = 0;
            *(_DWORD *)(v30 + 64) = 0;
            qword_2541086D0 = v30;
            __cxa_guard_release(&qword_254108690);
          }
        }
        qword_254108780 = 0x1000000008;
        v11 = &qword_254108770;
        dword_254108788 = 8;
        word_25410878C = 1;
        dword_2541087A8 = 2;
        *(_QWORD *)&xmmword_2541087B0 = &qword_2541086C8;
        *((_QWORD *)&xmmword_2541087B0 + 1) = re::internal::defaultConstruct<re::ecs2::SyncAccessControlEntry>;
        qword_2541087C0 = (uint64_t)re::internal::defaultDestruct<re::ecs2::SyncAccessControlEntry>;
        unk_2541087C8 = 0;
        *(_QWORD *)&xmmword_2541087D0 = 0;
        *((_QWORD *)&xmmword_2541087D0 + 1) = re::internal::defaultConstructV2<re::ecs2::SyncAccessControlEntry>;
        qword_2541087E0 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::SyncAccessControlEntry>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254108770, v13);
        v38[0] = v36;
        if ((byte_254108671 & 1) == 0)
        {
LABEL_10:
          byte_254108671 = 1;
          v15 = *((_DWORD *)v11 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541086E8, 0);
          qword_2541086F8 = 0x2800000003;
          unk_254108700 = v15;
          unk_254108704 = 0;
          *(_QWORD *)&xmmword_254108708 = 0;
          *((_QWORD *)&xmmword_254108708 + 1) = 0xFFFFFFFFLL;
          *(_QWORD *)algn_254108718 = v11;
          qword_254108720 = 0;
          qword_2541086E8 = (uint64_t)&off_24ED49948;
          re::IntrospectionRegistry::add(v16, v17);
          re::getPrettyTypeName((re *)&qword_2541086E8, (const re::IntrospectionBase *)&v36);
          if ((BYTE8(v36) & 1) != 0)
            v18 = v37;
          else
            v18 = (char *)&v36 + 9;
          if ((_QWORD)v36 && (BYTE8(v36) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v36 + 40))();
          v34 = *((_OWORD *)v11 + 2);
          v19 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v35);
          if (v19)
          {
            v20 = *v19;
            *((_QWORD *)&v33 + 1) = v20;
          }
          else
          {
            v38[0] = v34;
            re::TypeBuilder::beginListType((uint64_t)&v36, v35, 1, 0x28uLL, 8uLL, v38);
            re::TypeBuilder::setConstructor((uint64_t)&v36, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v36, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v36, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v36, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v36, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v36, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v36, v21);
          }
          xmmword_254108708 = v33;
          re::StringID::destroyString((re::StringID *)v35);
        }
      }
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "m_accessList";
      *(_QWORD *)(v22 + 16) = &qword_2541086E8;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x800000002;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2541086E0 = v22;
      __cxa_guard_release(&qword_2541086A0);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541086D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SyncAccessControl>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SyncAccessControl>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SyncAccessControl>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SyncAccessControl>;
  re::IntrospectionRegistry::add(this, v3);
  v31 = v32;
}

void re::internal::defaultConstruct<re::ecs2::SyncAccessControl>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SyncAccessControl>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;

  v4 = (_QWORD *)(a3 + 8);
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
    if (*(_QWORD *)(a3 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 40) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a3 + 32);
  }
  return result;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::SyncAccessControl>(uint64_t result)
{
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SyncAccessControl>(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*(_QWORD *)(a1 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t re::ecs2::introspect_SyncAccessControl(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SyncAccessControl", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SyncAccessControl, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SyncAccessControl, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SyncAccessControl>, this);
}

_QWORD *re::DynamicArray<re::ecs2::SyncAccessControlEntry>::removeStableAt(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[2];
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = result;
  v4 = v2 - 1;
  if (v2 - 1 > a2)
  {
    result = (_QWORD *)(result[4] + 16 * a2);
    v5 = 16 * v2 - (16 * a2 + 16);
    if (v5)
    {
      result = memmove(result, result + 2, v5 - 4);
      v4 = v3[2] - 1;
    }
  }
  v3[2] = v4;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *,false>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL4 v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  _BOOL4 v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  _BOOL4 v49;
  unint64_t v50;
  _BOOL4 v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  _BOOL4 v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  _BOOL4 v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  _BOOL4 v93;
  BOOL v94;
  unint64_t v95;
  int v96;
  _BOOL4 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  unint64_t v118;
  uint64_t v119;
  int v120;
  int v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  _BOOL4 v127;
  _BOOL4 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  BOOL v133;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

__int128 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(__int128 *result, __int128 *a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  int v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = *((_DWORD *)a2 + 2);
  if (v3 == *((_DWORD *)result + 2))
    v4 = *(_QWORD *)a2 < *(_QWORD *)result;
  else
    v4 = v3 == 1;
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 == v3)
    v6 = *(_QWORD *)a3 < *(_QWORD *)a2;
  else
    v6 = v5 == 1;
  if (v4)
  {
    if (v6)
    {
      v16 = *result;
      v7 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v7;
LABEL_21:
      *(_QWORD *)a3 = v16;
      *(_DWORD *)(a3 + 8) = DWORD2(v16);
      return result;
    }
    v19 = *result;
    v12 = *((_DWORD *)a2 + 2);
    *(_QWORD *)result = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = v12;
    *(_QWORD *)a2 = v19;
    *((_DWORD *)a2 + 2) = DWORD2(v19);
    v13 = *(_DWORD *)(a3 + 8);
    if (v13 == *((_DWORD *)a2 + 2))
      v14 = *(_QWORD *)a3 < *(_QWORD *)a2;
    else
      v14 = v13 == 1;
    if (v14)
    {
      v16 = *a2;
      v15 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v15;
      goto LABEL_21;
    }
  }
  else if (v6)
  {
    v17 = *a2;
    v8 = *(_DWORD *)(a3 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *((_DWORD *)a2 + 2) = v8;
    *(_QWORD *)a3 = v17;
    *(_DWORD *)(a3 + 8) = DWORD2(v17);
    v9 = *((_DWORD *)a2 + 2);
    if (v9 == *((_DWORD *)result + 2) ? *(_QWORD *)a2 < *(_QWORD *)result : v9 == 1)
    {
      v18 = *result;
      v11 = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = *(_QWORD *)a2;
      *((_DWORD *)result + 2) = v11;
      *(_QWORD *)a2 = v18;
      *((_DWORD *)a2 + 2) = DWORD2(v18);
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  int v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (_QWORD *)(a2 - 16);
      v7 = *(_DWORD *)(a2 - 8);
      v8 = *(_QWORD *)(a2 - 16) < *(_QWORD *)a1;
      if (v7 != *(_DWORD *)(a1 + 8))
        v8 = v7 == 1;
      if (v8)
      {
        v22 = *(_OWORD *)a1;
        v9 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)a1 = *v6;
        *(_DWORD *)(a1 + 8) = v9;
        *v6 = v22;
        *(_DWORD *)(a2 - 8) = DWORD2(v22);
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)a1, (__int128 *)(a1 + 16), a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)a1, (__int128 *)(a1 + 16), a1 + 32);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_DWORD *)(v11 + 8);
    v15 = *(_QWORD *)v11;
    if (v14 == *(_DWORD *)(v10 + 8) ? *(_QWORD *)v11 < *(_QWORD *)v10 : v14 == 1)
    {
      v17 = v12;
      while (1)
      {
        v18 = a1 + v17;
        *(_QWORD *)(v18 + 48) = *(_QWORD *)(a1 + v17 + 32);
        *(_DWORD *)(v18 + 56) = *(_DWORD *)(a1 + v17 + 40);
        if (v17 == -32)
          break;
        v19 = *(_DWORD *)(v18 + 24);
        v20 = v15 < *(_QWORD *)(v18 + 16);
        if (v14 != v19)
          v20 = v14 == 1;
        v17 -= 16;
        if (!v20)
        {
          v21 = a1 + v17 + 48;
          goto LABEL_19;
        }
      }
      v21 = a1;
LABEL_19:
      *(_QWORD *)v21 = v15;
      *(_DWORD *)(v21 + 8) = v14;
      if (++v13 == 8)
        return v11 + 16 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  _BOOL4 v10;
  int v11;
  int v12;
  int v14;
  int v15;
  _BOOL4 v16;
  int v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)a1, (__int128 *)a2, a3);
  v9 = *(_DWORD *)(a4 + 8);
  if (v9 == *(_DWORD *)(a3 + 8))
    v10 = *(_QWORD *)a4 < *(_QWORD *)a3;
  else
    v10 = v9 == 1;
  if (v10)
  {
    result = *(__n128 *)a3;
    v18 = *(__n128 *)a3;
    v11 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = v11;
    *(_QWORD *)a4 = v18.n128_u64[0];
    *(_DWORD *)(a4 + 8) = v18.n128_u32[2];
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == *(_DWORD *)(a2 + 8) ? *(_QWORD *)a3 < *(_QWORD *)a2 : v12 == 1)
    {
      result = *(__n128 *)a2;
      v19 = *(_OWORD *)a2;
      v14 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v14;
      *(_QWORD *)a3 = v19;
      *(_DWORD *)(a3 + 8) = DWORD2(v19);
      v15 = *(_DWORD *)(a2 + 8);
      if (v15 == *(_DWORD *)(a1 + 8))
        v16 = *(_QWORD *)a2 < *(_QWORD *)a1;
      else
        v16 = v15 == 1;
      if (v16)
      {
        result = *(__n128 *)a1;
        v20 = *(_OWORD *)a1;
        v17 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v17;
        *(_QWORD *)a2 = v20;
        *(_DWORD *)(a2 + 8) = DWORD2(v20);
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  int v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v16;
  int v17;
  int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;

  result.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(a1, a2, a3, a4).n128_u64[0];
  v11 = *(_DWORD *)(a5 + 8);
  if (v11 == *(_DWORD *)(a4 + 8))
    v12 = *(_QWORD *)a5 < *(_QWORD *)a4;
  else
    v12 = v11 == 1;
  if (v12)
  {
    result = *(__n128 *)a4;
    v23 = *(__n128 *)a4;
    v13 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_DWORD *)(a4 + 8) = v13;
    *(_QWORD *)a5 = v23.n128_u64[0];
    *(_DWORD *)(a5 + 8) = v23.n128_u32[2];
    v14 = *(_DWORD *)(a4 + 8);
    if (v14 == *(_DWORD *)(a3 + 8) ? *(_QWORD *)a4 < *(_QWORD *)a3 : v14 == 1)
    {
      result = *(__n128 *)a3;
      v24 = *(__n128 *)a3;
      v16 = *(_DWORD *)(a4 + 8);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_DWORD *)(a3 + 8) = v16;
      *(_QWORD *)a4 = v24.n128_u64[0];
      *(_DWORD *)(a4 + 8) = v24.n128_u32[2];
      v17 = *(_DWORD *)(a3 + 8);
      if (v17 == *(_DWORD *)(a2 + 8) ? *(_QWORD *)a3 < *(_QWORD *)a2 : v17 == 1)
      {
        result = *(__n128 *)a2;
        v25 = *(__n128 *)a2;
        v19 = *(_DWORD *)(a3 + 8);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = v19;
        *(_QWORD *)a3 = v25.n128_u64[0];
        *(_DWORD *)(a3 + 8) = v25.n128_u32[2];
        v20 = *(_DWORD *)(a2 + 8);
        if (v20 == *(_DWORD *)(a1 + 8))
          v21 = *(_QWORD *)a2 < *(_QWORD *)a1;
        else
          v21 = v20 == 1;
        if (v21)
        {
          result = *(__n128 *)a1;
          v26 = *(__n128 *)a1;
          v22 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v22;
          *(_QWORD *)a2 = v26.n128_u64[0];
          *(_DWORD *)(a2 + 8) = v26.n128_u32[2];
        }
      }
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::SyncAccessControlEntry>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  re::IntrospectionBase *v11;

  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RigNodeConstraint>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = (_QWORD *)(*((_QWORD *)this + 4) + 16 * v8);
  *v9 = 0;
  v9[1] = 0;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  v11 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 16 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SyncAccessControlEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::SyncAccessControlEntry>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      v5 = v3[4];
      v6 = v5 + 16 * v4;
      v7 = v5 + 16 * a2 - v6;
      if (v7 >= 1)
      {
        v8 = ((unint64_t)v7 >> 4) + 1;
        do
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          --v8;
          v6 += 16;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SyncAccessControlEntry>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 16 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 16 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SyncAccessControlEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::ecs2::AnimationLibraryComponent::constructAnimationLibraryMeshMapping(re::ecs2::AnimationLibraryComponent *this)
{
  _anonymous_namespace_ *v2;
  uint64_t v3;
  const re::AnimationLibraryAsset *v4;
  const re::MeshAsset *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*((_QWORD *)this + 13))
  {
    v2 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::AnimationLibraryAsset>((re::ecs2::AnimationLibraryComponent *)((char *)this + 32));
    if (v2)
    {
      v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 176);
      if (v3)
      {
        v4 = v2;
        v5 = (const re::MeshAsset *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v3 + 32));
        if (v5)
        {
          v6 = *(_QWORD *)(v3 + 40);
          if (v6)
            v7 = *(_QWORD *)(v6 + 664);
          else
            v7 = 0;
          v8 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
          v9 = v7 ^ (v8 >> 31) ^ v8;
          v10 = *((_QWORD *)this + 5);
          if (v10)
            v11 = *(_QWORD *)(v10 + 664);
          else
            v11 = 0;
          v12 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
          v13 = ((v9 << 6) + (v9 >> 2) + (v11 ^ (v12 >> 31) ^ v12) - 0x61C8864680B583E9) ^ v9;
          if (*((_QWORD *)this + 14) != v13)
          {
            re::AnimationLibraryMeshMapping::rebuildRuntimeData((void **)this + 7, v5, v4);
            *((_QWORD *)this + 14) = v13;
          }
        }
      }
      else
      {
        *((_QWORD *)this + 14) = -1;
      }
    }
  }
}

uint64_t re::AssetHandle::loadedAsset<re::AnimationLibraryAsset>(re::AnimationLibraryAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::AnimationLibraryAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::ecs2::AnimationLibrarySystem::update(uint64_t a1, re::ecs2::SceneComponentTable *a2)
{
  uint64_t v4;
  uint64_t v5;
  re::ecs2::AnimationLibraryComponent **v6;
  uint64_t v7;
  re::ecs2::AnimationLibraryComponent *v8;
  _BYTE v10[16];
  uint64_t v11[2];

  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v11);
  a2 = (re::ecs2::SceneComponentTable *)((char *)a2 + 200);
  re::ecs2::SceneComponentTable::get(a2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10, 3031, a1);
  v4 = re::ecs2::SceneComponentTable::get(a2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = *(re::ecs2::AnimationLibraryComponent ***)(v4 + 40);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        re::ecs2::AnimationLibraryComponent::constructAnimationLibraryMeshMapping(v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v10);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v11);
}

uint64_t *re::ecs2::allocInfo_AnimationLibraryComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_172);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_172))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108888, 0);
    *(uint64_t *)((char *)&qword_254108898 + 6) = 0;
    qword_254108898 = 0;
    qword_2541088A8 = 0;
    qword_2541088B0 = 0xFFFFFFFFLL;
    qword_254108888 = (uint64_t)&off_24ED7DAA8;
    qword_2541088B8 = (uint64_t)"AnimationLibraryComponent";
    dword_2541088C0 = 0;
    unk_2541088C8 = 0u;
    unk_2541088D8 = 0u;
    unk_2541088E8 = 0u;
    qword_2541088F8 = 0;
    __cxa_guard_release(&_MergedGlobals_172);
  }
  return &qword_254108888;
}

void re::ecs2::initInfo_AnimationLibraryComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xC58860BB61AE40CLL;
  v14[1] = "AnimationLibraryComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254108868);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254108868);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254108878 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "animationLibrary";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254108880 = v12;
      __cxa_guard_release(&qword_254108868);
    }
  }
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254108878;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationLibraryComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationLibraryComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationLibraryComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationLibraryComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

double re::internal::defaultConstruct<re::ecs2::AnimationLibraryComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED43558;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 76) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = -1;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::AnimationLibraryComponent>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::AnimationLibraryComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED43558;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 76) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 112) = -1;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::AnimationLibraryComponent>(uint64_t *a1)
{
  re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnimationLibraryComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationLibraryComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationLibraryComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationLibraryComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationLibraryComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AnimationLibrarySystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254108870);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254108870))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108900, 0);
    *(uint64_t *)((char *)&qword_254108910 + 6) = 0;
    qword_254108910 = 0;
    qword_254108920 = 0;
    qword_254108928 = 0xFFFFFFFFLL;
    qword_254108900 = (uint64_t)&off_24ED7DAA8;
    qword_254108930 = (uint64_t)"AnimationLibrarySystem";
    dword_254108938 = 0;
    xmmword_254108940 = 0u;
    unk_254108950 = 0u;
    xmmword_254108960 = 0u;
    qword_254108970 = 0;
    __cxa_guard_release(&qword_254108870);
  }
  return &qword_254108900;
}

void re::ecs2::initInfo_AnimationLibrarySystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE484F4FAF350C38CLL;
  v5[1] = "AnimationLibrarySystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AnimationLibrarySystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationLibrarySystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationLibrarySystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AnimationLibrarySystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AnimationLibrarySystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationLibrarySystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationLibrarySystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AnimationLibrarySystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED499E0;
}

void *re::internal::defaultDestruct<re::ecs2::AnimationLibrarySystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AnimationLibrarySystem>(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED499E0;
}

void *re::internal::defaultDestructV2<re::ecs2::AnimationLibrarySystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

void re::ecs2::AnimationLibrarySystem::~AnimationLibrarySystem(re::ecs2::AnimationLibrarySystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AnimationLibrarySystem::typeInfo(re::ecs2::AnimationLibrarySystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationLibrarySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationLibrarySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationLibrarySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationLibrarySystem>, 0);
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[504].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[504].i64[0] = v5;
      v6 = v3[504].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[504].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[505] = vaddq_s64(v3[505], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::AnimationLibrarySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AnimationLibrarySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_AudioTransientComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254108980);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254108980))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108AC0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254108AD0 = 0;
    qword_254108AE0 = 0;
    qword_254108AE8 = 0xFFFFFFFFLL;
    qword_254108AC0 = (uint64_t)&off_24ED7DAA8;
    qword_254108AF0 = (uint64_t)"AudioTransientComponent";
    dword_254108AF8 = 0;
    xmmword_254108B00 = 0u;
    unk_254108B10 = 0u;
    xmmword_254108B20 = 0u;
    qword_254108B30 = 0;
    __cxa_guard_release(&qword_254108980);
  }
  return &qword_254108AC0;
}

void re::ecs2::initInfo_AudioTransientComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0x32342B161D93F7D2;
  v20[1] = "AudioTransientComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_254108988);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254108988);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541089E0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint64_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "playbackHostConnectionIdentifier";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541089E8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get((uint64_t)v13, v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "transientStatesByToken";
      *(_QWORD *)(v15 + 16) = &qword_254108A20;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x2800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2541089F0 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      re::IntrospectionInfo<re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get((uint64_t)v16, v17);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "transientExternalStreamControllerStatesByToken";
      *(_QWORD *)(v18 + 16) = &qword_254108A70;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x5800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2541089F8 = v18;
      __cxa_guard_release(&qword_254108988);
    }
  }
  *((_QWORD *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2541089E0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioTransientComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioTransientComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioTransientComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioTransientComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

void re::IntrospectionInfo<re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  const re::IntrospectionBase *v6;
  unsigned __int8 v7;
  int v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  uint64_t v21;
  re *v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  const char *v38;
  _QWORD v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t *v42;

  v2 = atomic_load((unsigned __int8 *)&qword_2541089C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541089C0))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254108A20);
    qword_254108A20 = (uint64_t)&off_24ED49A68;
    __cxa_guard_release(&qword_2541089C0);
  }
  if ((_MergedGlobals_173 & 1) == 0)
  {
    v3 = re::introspect_uint64_t((re *)1, a2);
    v4 = (uint64_t *)qword_2541089A0;
    if (!qword_2541089A0)
    {
      v5 = atomic_load((unsigned __int8 *)&qword_254108990);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_254108990))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108B38, 0);
        *(_QWORD *)(v21 + 22) = 0;
        qword_254108B48 = 0;
        *(_QWORD *)&xmmword_254108B58 = 0;
        *((_QWORD *)&xmmword_254108B58 + 1) = 0xFFFFFFFFLL;
        qword_254108B38 = (uint64_t)&off_24ED7DAA8;
        qword_254108B68 = (uint64_t)"TransientAudioState";
        dword_254108B70 = 0;
        xmmword_254108B78 = 0u;
        *(_OWORD *)&qword_254108B88 = 0u;
        xmmword_254108B98 = 0u;
        qword_254108BA8 = 0;
        __cxa_guard_release(&qword_254108990);
      }
      qword_2541089A0 = (uint64_t)&qword_254108B38;
      *(_QWORD *)&v41 = 0xF5E8C1B66B36A0CALL;
      *((_QWORD *)&v41 + 1) = "TransientAudioState";
      re::StringID::destroyString((re::StringID *)&v41);
      xmmword_254108B58 = v37;
      v7 = atomic_load((unsigned __int8 *)&qword_254108998);
      if ((v7 & 1) == 0)
      {
        v22 = (re *)__cxa_guard_acquire(&qword_254108998);
        if ((_DWORD)v22)
        {
          v23 = re::introspectionAllocator(v22);
          v25 = introspect_REAudioInputMode(1, v24);
          v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
          *(_DWORD *)v26 = 1;
          *(_QWORD *)(v26 + 8) = "inputMode";
          *(_QWORD *)(v26 + 16) = v25;
          *(_QWORD *)(v26 + 24) = 0;
          *(_QWORD *)(v26 + 32) = 1;
          *(_DWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 48) = 0;
          *(_QWORD *)(v26 + 56) = 0;
          *(_DWORD *)(v26 + 64) = 0;
          qword_2541089D0 = v26;
          v27 = re::introspectionAllocator((re *)v26);
          v29 = re::introspect_uint32_t((re *)1, v28);
          v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
          *(_DWORD *)v30 = 1;
          *(_QWORD *)(v30 + 8) = "layoutTag";
          *(_QWORD *)(v30 + 16) = v29;
          *(_QWORD *)(v30 + 24) = 0;
          *(_QWORD *)(v30 + 32) = 0x400000002;
          *(_DWORD *)(v30 + 40) = 0;
          *(_QWORD *)(v30 + 48) = 0;
          *(_QWORD *)(v30 + 56) = 0;
          *(_DWORD *)(v30 + 64) = 0;
          qword_2541089D8 = v30;
          __cxa_guard_release(&qword_254108998);
        }
      }
      qword_254108B48 = 0x800000008;
      dword_254108B50 = 4;
      v4 = &qword_254108B38;
      word_254108B54 = 1;
      dword_254108B70 = 2;
      *(_QWORD *)&xmmword_254108B78 = &qword_2541089D0;
      *((_QWORD *)&xmmword_254108B78 + 1) = re::internal::defaultConstruct<re::ecs2::TransientAudioState>;
      qword_254108B88 = (uint64_t)re::internal::defaultDestruct<re::ecs2::TransientAudioState>;
      unk_254108B90 = 0;
      *(_QWORD *)&xmmword_254108B98 = 0;
      *((_QWORD *)&xmmword_254108B98 + 1) = re::internal::defaultConstructV2<re::ecs2::TransientAudioState>;
      qword_254108BA8 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::TransientAudioState>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254108B38, v6);
      v41 = v37;
    }
    if ((_MergedGlobals_173 & 1) == 0)
    {
      _MergedGlobals_173 = 1;
      v8 = *((_DWORD *)v4 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108A20, 0);
      qword_254108A30 = 0x3000000007;
      dword_254108A38 = v8;
      word_254108A3C = 0;
      *(_QWORD *)&xmmword_254108A40 = 0;
      *((_QWORD *)&xmmword_254108A40 + 1) = 0xFFFFFFFFLL;
      qword_254108A50 = (uint64_t)v3;
      unk_254108A58 = 0;
      qword_254108A60 = (uint64_t)v4;
      unk_254108A68 = 0;
      qword_254108A20 = (uint64_t)&off_24ED49A68;
      re::IntrospectionRegistry::add(v9, v10);
      re::getPrettyTypeName((re *)&qword_254108A20, (const re::IntrospectionBase *)&v37);
      if ((BYTE8(v37) & 1) != 0)
        v11 = v38;
      else
        v11 = (char *)&v37 + 9;
      if ((_QWORD)v37 && (BYTE8(v37) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v37 + 40))();
      v12 = v3[2];
      v32 = *((_OWORD *)v4 + 2);
      v33 = v12;
      v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v34);
      if (v13)
      {
        v14 = *v13;
        *((_QWORD *)&v31 + 1) = v14;
      }
      else
      {
        *(_QWORD *)&v37 = 0x449AD97C4B77BED4;
        *((_QWORD *)&v37 + 1) = "_CompareFunc";
        v15 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v37);
        if (v15)
        {
          v16 = *v15;
          re::StringID::destroyString((re::StringID *)&v37);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v37);
          *(_QWORD *)&v41 = 0x449AD97C4B77BED4;
          *((_QWORD *)&v41 + 1) = "_CompareFunc";
          v16 = *((_QWORD *)&v37 + 1);
          v17 = (void *)v37;
          re::StringID::destroyString((re::StringID *)&v41);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v41, (uint64_t)&v37 + 8);
        if (!v17
          || (v18 = *v42,
              *(_QWORD *)&v37 = v16,
              *((_QWORD *)&v37 + 1) = v18,
              LODWORD(v38) = -1,
              (v19 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v41 + 768, (uint64_t *)&v37)) == 0)|| !*(_QWORD *)v19)
        {
          v40 = v33;
          v39[0] = v17;
          v39[1] = v16;
        }
        v35 = v32;
        v36 = v33;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v37, v34, 1, 0x30uLL, 8uLL, &v36, &v35);
        re::TypeBuilder::setConstructor((uint64_t)&v37, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v37, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v37, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v37, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v37, v20);
      }
      xmmword_254108A40 = v31;
      re::StringID::destroyString((re::StringID *)v34);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _BYTE *v3;
  _OWORD *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  const re::IntrospectionBase *v7;
  unsigned __int8 v8;
  int v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t (*v39)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  const char *v49;
  _QWORD v50[2];
  __int128 v51;
  __int128 v52;
  uint64_t *v53;

  v2 = atomic_load((unsigned __int8 *)&qword_2541089C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541089C8))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254108A70);
    qword_254108A70 = (uint64_t)&off_24ED49B08;
    __cxa_guard_release(&qword_2541089C8);
  }
  v3 = &unk_254108000;
  if ((byte_254108979 & 1) == 0)
  {
    v4 = re::introspect_uint64_t((re *)1, a2);
    v5 = (uint64_t *)qword_2541089B8;
    if (!qword_2541089B8)
    {
      v6 = atomic_load((unsigned __int8 *)&qword_2541089A8);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2541089A8))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108BB0, 0);
        *(_QWORD *)(v22 + 22) = 0;
        qword_254108BC0 = 0;
        *(_QWORD *)&xmmword_254108BD0 = 0;
        *((_QWORD *)&xmmword_254108BD0 + 1) = 0xFFFFFFFFLL;
        qword_254108BB0 = (uint64_t)&off_24ED7DAA8;
        qword_254108BE0 = (uint64_t)"TransientExternalStreamControllerState";
        dword_254108BE8 = 0;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        qword_254108C20 = 0;
        __cxa_guard_release(&qword_2541089A8);
      }
      qword_2541089B8 = (uint64_t)&qword_254108BB0;
      *(_QWORD *)&v52 = 0x660E514A6C8D22C0;
      *((_QWORD *)&v52 + 1) = "TransientExternalStreamControllerState";
      re::StringID::destroyString((re::StringID *)&v52);
      xmmword_254108BD0 = v48;
      v8 = atomic_load((unsigned __int8 *)&qword_2541089B0);
      if ((v8 & 1) == 0)
      {
        v23 = (re *)__cxa_guard_acquire(&qword_2541089B0);
        if ((_DWORD)v23)
        {
          v24 = re::introspectionAllocator(v23);
          v26 = introspect_REAudioNormalizationMode(1, v25);
          v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
          *(_DWORD *)v27 = 1;
          *(_QWORD *)(v27 + 8) = "normalizationMode";
          *(_QWORD *)(v27 + 16) = v26;
          *(_QWORD *)(v27 + 24) = 0;
          *(_QWORD *)(v27 + 32) = 1;
          *(_DWORD *)(v27 + 40) = 0;
          *(_QWORD *)(v27 + 48) = 0;
          *(_QWORD *)(v27 + 56) = 0;
          *(_DWORD *)(v27 + 64) = 0;
          qword_254108A00 = v27;
          v28 = re::introspectionAllocator((re *)v27);
          v30 = introspect_REAudioCalibrationMode(1, v29);
          v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
          *(_DWORD *)v31 = 1;
          *(_QWORD *)(v31 + 8) = "calibrationMode";
          *(_QWORD *)(v31 + 16) = v30;
          *(_QWORD *)(v31 + 24) = 0;
          *(_QWORD *)(v31 + 32) = 0x400000002;
          *(_DWORD *)(v31 + 40) = 0;
          *(_QWORD *)(v31 + 48) = 0;
          *(_QWORD *)(v31 + 56) = 0;
          *(_DWORD *)(v31 + 64) = 0;
          qword_254108A08 = v31;
          v32 = re::introspectionAllocator((re *)v31);
          v34 = re::introspect_double((re *)1, v33);
          v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
          *(_DWORD *)v35 = 1;
          *(_QWORD *)(v35 + 8) = "calibrationLevel";
          *(_QWORD *)(v35 + 16) = v34;
          *(_QWORD *)(v35 + 24) = 0;
          *(_QWORD *)(v35 + 32) = 0x800000003;
          *(_DWORD *)(v35 + 40) = 0;
          *(_QWORD *)(v35 + 48) = 0;
          *(_QWORD *)(v35 + 56) = 0;
          *(_DWORD *)(v35 + 64) = 0;
          qword_254108A10 = v35;
          v36 = re::introspectionAllocator((re *)v35);
          v38 = re::introspect_double((re *)1, v37);
          v39 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32);
          v40 = v36;
          v3 = (_BYTE *)&unk_254108000;
          v41 = v39(v40, 72, 8);
          *(_DWORD *)v41 = 1;
          *(_QWORD *)(v41 + 8) = "targetLUFS";
          *(_QWORD *)(v41 + 16) = v38;
          *(_QWORD *)(v41 + 24) = 0;
          *(_QWORD *)(v41 + 32) = 0x1000000004;
          *(_DWORD *)(v41 + 40) = 0;
          *(_QWORD *)(v41 + 48) = 0;
          *(_QWORD *)(v41 + 56) = 0;
          *(_DWORD *)(v41 + 64) = 0;
          qword_254108A18 = v41;
          __cxa_guard_release(&qword_2541089B0);
        }
      }
      qword_254108BC0 = 0x1800000008;
      v5 = &qword_254108BB0;
      dword_254108BC8 = 8;
      word_254108BCC = 1;
      dword_254108BE8 = 4;
      qword_254108BF0 = (uint64_t)&qword_254108A00;
      unk_254108BF8 = re::internal::defaultConstruct<re::ecs2::TransientExternalStreamControllerState>;
      qword_254108C00 = (uint64_t)re::internal::defaultDestruct<re::ecs2::TransientExternalStreamControllerState>;
      qword_254108C10 = 0;
      qword_254108C08 = 0;
      qword_254108C18 = (uint64_t)re::internal::defaultConstructV2<re::ecs2::TransientExternalStreamControllerState>;
      qword_254108C20 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::TransientExternalStreamControllerState>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254108BB0, v7);
      v52 = v48;
    }
    if ((v3[2425] & 1) == 0)
    {
      byte_254108979 = 1;
      v9 = *((_DWORD *)v5 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254108A70, 0);
      qword_254108A80 = 0x3000000007;
      dword_254108A88 = v9;
      word_254108A8C = 0;
      *(_QWORD *)&xmmword_254108A90 = 0;
      *((_QWORD *)&xmmword_254108A90 + 1) = 0xFFFFFFFFLL;
      qword_254108AA0 = (uint64_t)v4;
      unk_254108AA8 = 0;
      qword_254108AB0 = (uint64_t)v5;
      unk_254108AB8 = 0;
      qword_254108A70 = (uint64_t)&off_24ED49B08;
      re::IntrospectionRegistry::add(v10, v11);
      re::getPrettyTypeName((re *)&qword_254108A70, (const re::IntrospectionBase *)&v48);
      if ((BYTE8(v48) & 1) != 0)
        v12 = v49;
      else
        v12 = (char *)&v48 + 9;
      if ((_QWORD)v48 && (BYTE8(v48) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v48 + 40))();
      v13 = v4[2];
      v43 = *((_OWORD *)v5 + 2);
      v44 = v13;
      v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v45);
      if (v14)
      {
        v15 = *v14;
        *((_QWORD *)&v42 + 1) = v15;
      }
      else
      {
        *(_QWORD *)&v48 = 0x449AD97C4B77BED4;
        *((_QWORD *)&v48 + 1) = "_CompareFunc";
        v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v48);
        if (v16)
        {
          v17 = *v16;
          re::StringID::destroyString((re::StringID *)&v48);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v48);
          *(_QWORD *)&v52 = 0x449AD97C4B77BED4;
          *((_QWORD *)&v52 + 1) = "_CompareFunc";
          v17 = *((_QWORD *)&v48 + 1);
          v18 = (void *)v48;
          re::StringID::destroyString((re::StringID *)&v52);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v52, (uint64_t)&v48 + 8);
        if (!v18
          || (v19 = *v53,
              *(_QWORD *)&v48 = v17,
              *((_QWORD *)&v48 + 1) = v19,
              LODWORD(v49) = -1,
              (v20 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v52 + 768, (uint64_t *)&v48)) == 0)|| !*(_QWORD *)v20)
        {
          v51 = v44;
          v50[0] = v18;
          v50[1] = v17;
        }
        v46 = v43;
        v47 = v44;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v48, v45, 1, 0x30uLL, 8uLL, &v47, &v46);
        re::TypeBuilder::setConstructor((uint64_t)&v48, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v48, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v48, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v48, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v48, v21);
      }
      xmmword_254108A90 = v42;
      re::StringID::destroyString((re::StringID *)v45);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::AudioTransientComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED49BA8;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 60) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_DWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 124) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioTransientComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioTransientComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED49BA8;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 60) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_DWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 124) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioTransientComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioTransientComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioTransientComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioTransientComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioTransientComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioTransientComponent>, this);
}

void re::internal::defaultConstruct<re::ecs2::TransientAudioState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 4) = 6553601;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::TransientAudioState>(uint64_t result)
{
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 4) = 6553601;
  return result;
}

double re::internal::defaultConstruct<re::ecs2::TransientExternalStreamControllerState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0x200000001;
  result = 85.0;
  *(_OWORD *)(a3 + 8) = xmmword_22610D2D0;
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::TransientExternalStreamControllerState>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0x200000001;
  result = 85.0;
  *(_OWORD *)(a1 + 8) = xmmword_22610D2D0;
  return result;
}

_QWORD *re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0x64000100000000;
  v8 = (re::IntrospectionBase *)re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 16, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16);
    v10 = v13;
    return v12 + 32 * v10 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 32 * v10 + 24) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16);
  return v12 + 32 * v10 + 24;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, uint64_t *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientAudioState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(a2);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;
  __int128 v11;

  v10 = 0x200000001;
  v11 = xmmword_22610D2D0;
  v8 = (re::IntrospectionBase *)re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a4, a5, (uint64_t)&v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 12;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 48 * v10 + 16, *(_QWORD *)(a2 + 16) + 48 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 48 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 16) + 48 * v9;
  v14 = *a5;
  *(_QWORD *)(v13 + 40) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v13 + 24) = v14;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 48 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 48;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v16 = re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, (__int128 *)a3);
    ++*(_DWORD *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 16) + 48 * v16;
    return v15 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 48 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = 3 * v10;
  v13 = v11 + 48 * v10;
  v14 = *(_OWORD *)a3;
  *(_QWORD *)(v13 + 40) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v13 + 24) = v14;
  ++*(_DWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 16) + 16 * v12;
  return v15 + 24;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(a1);
  return _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, uint64_t *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 48 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 48 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 48 * v4 + 16) == v2)
        return v6 + 48 * v4 + 24;
    }
    return 0;
  }
  return v6 + 48 * v4 + 24;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 48 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 12;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::ecs2::AudioTransientComponent::~AudioTransientComponent(re::ecs2::AudioTransientComponent *this)
{
  re::ecs2::AudioTransientComponent::~AudioTransientComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t *v2;

  *(_QWORD *)this = &off_24ED49BA8;
  v2 = (uint64_t *)((char *)this + 40);
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 11);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
}

#error "225546ECC: too big function (funcsize=0)"

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(uint64_t a1)
{
  unsigned __int8 v2;
  re *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  re::ecs2::ComponentTypeRegistry *v9;
  char *v10;
  uint64_t result;
  StringID v12;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::AnchorComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchorComponent(0);
  }
  re::getPrettyTypeName((re *)re::introspect<re::ecs2::AnchorComponent>(void)::info, (const re::IntrospectionBase *)&v15);
  v3 = (re *)re::DynamicString::rfind((uint64_t)&v15, "Component", v13);
  if (v13[0])
  {
    v4 = (v16[0] & 1) != 0 ? v16[0] >> 1 : LOBYTE(v16[0]) >> 1;
    if (v14 == v4 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v15, 0, v14, (re::DynamicString *)&v12);
      re::DynamicString::operator=((re::DynamicString *)&v15, (re::DynamicString *)&v12);
      v3 = *(re **)&v12.var0;
      if (*(_QWORD *)&v12.var0)
      {
        if (((uint64_t)v12.var1 & 1) != 0)
          v3 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v12.var0 + 40))();
      }
    }
  }
  v5 = re::globalAllocators(v3);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
  v7 = v6;
  if ((v16[0] & 1) != 0)
    v8 = (const char *)v16[1];
  else
    v8 = (char *)v16 + 1;
  *(_QWORD *)&v12.var0 = 0;
  v12.var1 = (char *)&str_110;
  re::ecs2::ComponentType<re::ecs2::AnchorComponent>::ComponentType((uint64_t)v7, &v12, a1, 2);
  re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  v10 = re::ecs2::ComponentTypeRegistry::instance(v9);
  re::ecs2::ComponentTypeRegistry::add((os_unfair_lock_s *)v10, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  result = v15;
  if (v15)
  {
    if ((v16[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::initComponentType(uint64_t a1)
{
  unsigned __int8 v2;
  re *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  re::ecs2::ComponentTypeRegistry *v9;
  char *v10;
  uint64_t result;
  StringID v12;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::AnchoringComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchoringComponent(0);
  }
  re::getPrettyTypeName((re *)re::introspect<re::ecs2::AnchoringComponent>(void)::info, (const re::IntrospectionBase *)&v15);
  v3 = (re *)re::DynamicString::rfind((uint64_t)&v15, "Component", v13);
  if (v13[0])
  {
    v4 = (v16[0] & 1) != 0 ? v16[0] >> 1 : LOBYTE(v16[0]) >> 1;
    if (v14 == v4 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v15, 0, v14, (re::DynamicString *)&v12);
      re::DynamicString::operator=((re::DynamicString *)&v15, (re::DynamicString *)&v12);
      v3 = *(re **)&v12.var0;
      if (*(_QWORD *)&v12.var0)
      {
        if (((uint64_t)v12.var1 & 1) != 0)
          v3 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v12.var0 + 40))();
      }
    }
  }
  v5 = re::globalAllocators(v3);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
  v7 = v6;
  if ((v16[0] & 1) != 0)
    v8 = (const char *)v16[1];
  else
    v8 = (char *)v16 + 1;
  *(_QWORD *)&v12.var0 = 0;
  v12.var1 = (char *)&str_110;
  re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::ComponentType((uint64_t)v7, &v12, a1, 4);
  re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  v10 = re::ecs2::ComponentTypeRegistry::instance(v9);
  re::ecs2::ComponentTypeRegistry::add((os_unfair_lock_s *)v10, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  result = v15;
  if (v15)
  {
    if ((v16[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(uint64_t a1)
{
  unsigned __int8 v2;
  re *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  re::ecs2::ComponentTypeRegistry *v9;
  char *v10;
  uint64_t result;
  StringID v12;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::SceneComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_SceneComponent(0);
  }
  re::getPrettyTypeName((re *)re::introspect<re::ecs2::SceneComponent>(void)::info, (const re::IntrospectionBase *)&v15);
  v3 = (re *)re::DynamicString::rfind((uint64_t)&v15, "Component", v13);
  if (v13[0])
  {
    v4 = (v16[0] & 1) != 0 ? v16[0] >> 1 : LOBYTE(v16[0]) >> 1;
    if (v14 == v4 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v15, 0, v14, (re::DynamicString *)&v12);
      re::DynamicString::operator=((re::DynamicString *)&v15, (re::DynamicString *)&v12);
      v3 = *(re **)&v12.var0;
      if (*(_QWORD *)&v12.var0)
      {
        if (((uint64_t)v12.var1 & 1) != 0)
          v3 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v12.var0 + 40))();
      }
    }
  }
  v5 = re::globalAllocators(v3);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
  v7 = v6;
  if ((v16[0] & 1) != 0)
    v8 = (const char *)v16[1];
  else
    v8 = (char *)v16 + 1;
  *(_QWORD *)&v12.var0 = 0;
  v12.var1 = (char *)&str_110;
  re::ecs2::ComponentType<re::ecs2::SceneComponent>::ComponentType((uint64_t)v7, &v12, a1, 2);
  re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  v10 = re::ecs2::ComponentTypeRegistry::instance(v9);
  re::ecs2::ComponentTypeRegistry::add((os_unfair_lock_s *)v10, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  result = v15;
  if (v15)
  {
    if ((v16[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(uint64_t a1)
{
  unsigned __int8 v2;
  re *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  re::ecs2::ComponentTypeRegistry *v9;
  char *v10;
  uint64_t result;
  StringID v12;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::CoordinateSpaceDefinitionComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_CoordinateSpaceDefinitionComponent(0);
  }
  re::getPrettyTypeName((re *)re::introspect<re::ecs2::CoordinateSpaceDefinitionComponent>(void)::info, (const re::IntrospectionBase *)&v15);
  v3 = (re *)re::DynamicString::rfind((uint64_t)&v15, "Component", v13);
  if (v13[0])
  {
    v4 = (v16[0] & 1) != 0 ? v16[0] >> 1 : LOBYTE(v16[0]) >> 1;
    if (v14 == v4 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v15, 0, v14, (re::DynamicString *)&v12);
      re::DynamicString::operator=((re::DynamicString *)&v15, (re::DynamicString *)&v12);
      v3 = *(re **)&v12.var0;
      if (*(_QWORD *)&v12.var0)
      {
        if (((uint64_t)v12.var1 & 1) != 0)
          v3 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v12.var0 + 40))();
      }
    }
  }
  v5 = re::globalAllocators(v3);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
  v7 = v6;
  if ((v16[0] & 1) != 0)
    v8 = (const char *)v16[1];
  else
    v8 = (char *)v16 + 1;
  *(_QWORD *)&v12.var0 = 0;
  v12.var1 = (char *)&str_110;
  re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::ComponentType((uint64_t)v7, &v12, a1, 2);
  re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  v10 = re::ecs2::ComponentTypeRegistry::instance(v9);
  re::ecs2::ComponentTypeRegistry::add((os_unfair_lock_s *)v10, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  result = v15;
  if (v15)
  {
    if ((v16[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

void re::ecs2::deinitECSComponents(re::ecs2 *this)
{
  re *v1;
  char *v2;
  re *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  re *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  re *v11;
  void *v12;
  uint64_t v13;
  char *v14;
  re *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  re *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  re *v23;
  void *v24;
  uint64_t v25;
  char *v26;
  re *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  re *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  re *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  re *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  re *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  re *v47;
  void *v48;
  uint64_t v49;
  char *v50;
  re *v51;
  void *v52;
  uint64_t v53;
  char *v54;
  re *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  re *v59;
  void *v60;
  uint64_t v61;
  char *v62;
  re *v63;
  void *v64;
  uint64_t v65;
  char *v66;
  re *v67;
  void *v68;
  uint64_t v69;
  char *v70;
  re *v71;
  void *v72;
  uint64_t v73;
  char *v74;
  re *v75;
  void *v76;
  uint64_t v77;
  char *v78;
  re *v79;
  void *v80;
  uint64_t v81;
  char *v82;
  re *v83;
  void *v84;
  uint64_t v85;
  char *v86;
  re *v87;
  void *v88;
  uint64_t v89;
  char *v90;
  re *v91;
  void *v92;
  uint64_t v93;
  char *v94;
  re *v95;
  void *v96;
  uint64_t v97;
  char *v98;
  re *v99;
  void *v100;
  uint64_t v101;
  char *v102;
  re *v103;
  void *v104;
  uint64_t v105;
  char *v106;
  re *v107;
  void *v108;
  uint64_t v109;
  char *v110;
  re *v111;
  void *v112;
  uint64_t v113;
  char *v114;
  re *v115;
  void *v116;
  uint64_t v117;
  char *v118;
  re *v119;
  void *v120;
  uint64_t v121;
  char *v122;
  re *v123;
  void *v124;
  uint64_t v125;
  char *v126;
  re *v127;
  void *v128;
  uint64_t v129;
  char *v130;
  re *v131;
  void *v132;
  uint64_t v133;
  char *v134;
  re *v135;
  void *v136;
  uint64_t v137;
  char *v138;
  re *v139;
  void *v140;
  uint64_t v141;
  char *v142;
  re *v143;
  void *v144;
  uint64_t v145;
  char *v146;
  re *v147;
  void *v148;
  uint64_t v149;
  re *v150;
  char *v151;
  re *v152;
  void *v153;
  uint64_t v154;
  char *v155;
  re *v156;
  void *v157;
  uint64_t v158;
  char *v159;
  re *v160;
  void *v161;
  uint64_t v162;
  char *v163;
  re *v164;
  void *v165;
  uint64_t v166;
  char *v167;
  re *v168;
  void *v169;
  uint64_t v170;
  char *v171;
  re *v172;
  void *v173;
  uint64_t v174;
  char *v175;
  re *v176;
  void *v177;
  uint64_t v178;
  char *v179;
  re *v180;
  void *v181;
  uint64_t v182;
  char *v183;
  re *v184;
  void *v185;
  uint64_t v186;
  char *v187;
  re *v188;
  void *v189;
  uint64_t v190;
  char *v191;
  re *v192;
  void *v193;
  uint64_t v194;
  char *v195;
  re *v196;
  void *v197;
  uint64_t v198;
  char *v199;
  re *v200;
  void *v201;
  uint64_t v202;
  char *v203;
  re *v204;
  void *v205;
  uint64_t v206;
  char *v207;
  re *v208;
  void *v209;
  uint64_t v210;
  char *v211;
  re *v212;
  void *v213;
  uint64_t v214;
  char *v215;
  re *v216;
  void *v217;
  uint64_t v218;
  char *v219;
  re *v220;
  void *v221;
  uint64_t v222;
  char *v223;
  re *v224;
  void *v225;
  uint64_t v226;
  char *v227;
  re *v228;
  void *v229;
  uint64_t v230;
  char *v231;
  re *v232;
  void *v233;
  uint64_t v234;
  char *v235;
  re *v236;
  void *v237;
  uint64_t v238;
  char *v239;
  re *v240;
  void *v241;
  uint64_t v242;
  char *v243;
  re *v244;
  void *v245;
  uint64_t v246;
  char *v247;
  re *v248;
  void *v249;
  uint64_t v250;
  char *v251;
  re *v252;
  void *v253;
  uint64_t v254;
  char *v255;
  re *v256;
  void *v257;
  uint64_t v258;
  char *v259;
  re *v260;
  void *v261;
  uint64_t v262;
  char *v263;
  re *v264;
  void *v265;
  uint64_t v266;
  char *v267;
  re *v268;
  void *v269;
  uint64_t v270;
  char *v271;
  re *v272;
  void *v273;
  uint64_t v274;
  char *v275;
  re *v276;
  void *v277;
  uint64_t v278;
  char *v279;
  re *v280;
  void *v281;
  uint64_t v282;
  char *v283;
  re *v284;
  void *v285;
  uint64_t v286;
  char *v287;
  re *v288;
  void *v289;
  uint64_t v290;
  char *v291;
  re *v292;
  void *v293;
  uint64_t v294;
  char *v295;
  re *v296;
  void *v297;
  uint64_t v298;
  char *v299;
  re *v300;
  void *v301;
  uint64_t v302;
  char *v303;
  re *v304;
  void *v305;
  uint64_t v306;
  char *v307;
  re *v308;
  void *v309;
  uint64_t v310;
  char *v311;
  re *v312;
  void *v313;
  uint64_t v314;
  char *v315;
  re *v316;
  void *v317;
  uint64_t v318;
  char *v319;
  re *v320;
  void *v321;
  uint64_t v322;
  char *v323;
  re *v324;
  void *v325;
  uint64_t v326;
  char *v327;
  re *v328;
  void *v329;
  uint64_t v330;
  char *v331;
  re *v332;
  void *v333;
  uint64_t v334;
  char *v335;
  re *v336;
  void *v337;
  uint64_t v338;
  char *v339;
  re *v340;
  void *v341;
  uint64_t v342;
  char *v343;
  re *v344;
  void *v345;
  uint64_t v346;
  char *v347;
  re *v348;
  void *v349;
  uint64_t v350;
  char *v351;
  re *v352;
  void *v353;
  uint64_t v354;
  char *v355;
  re *v356;
  void *v357;
  uint64_t v358;
  char *v359;
  re *v360;
  void *v361;
  uint64_t v362;
  char *v363;
  re *v364;
  void *v365;
  uint64_t v366;
  char *v367;
  re *v368;
  void *v369;
  uint64_t v370;
  char *v371;
  re *v372;
  void *v373;
  uint64_t v374;
  char *v375;
  re *v376;
  void *v377;
  uint64_t v378;
  char *v379;
  re *v380;
  void *v381;
  uint64_t v382;
  char *v383;
  re *v384;
  void *v385;
  uint64_t v386;
  char *v387;
  re *v388;
  void *v389;
  uint64_t v390;
  char *v391;
  re *v392;
  void *v393;
  uint64_t v394;
  char *v395;
  re *v396;
  void *v397;
  uint64_t v398;
  char *v399;
  re *v400;
  void *v401;
  uint64_t v402;
  char *v403;
  re *v404;
  void *v405;
  uint64_t v406;
  char *v407;
  re *v408;
  void *v409;
  uint64_t v410;
  char *v411;
  re *v412;
  void *v413;
  uint64_t v414;
  char *v415;
  re *v416;
  void *v417;
  uint64_t v418;
  char *v419;
  re *v420;
  void *v421;
  uint64_t v422;
  char *v423;
  re *v424;
  void *v425;
  uint64_t v426;
  char *v427;
  re *v428;
  void *v429;
  uint64_t v430;
  char *v431;
  re *v432;
  void *v433;
  uint64_t v434;
  char *v435;
  re *v436;
  void *v437;
  uint64_t v438;
  char *v439;
  re *v440;
  void *v441;
  uint64_t v442;
  char *v443;
  re *v444;
  void *v445;
  uint64_t v446;
  char *v447;
  re *v448;
  void *v449;
  uint64_t v450;
  char *v451;
  re *v452;
  void *v453;
  uint64_t v454;
  char *v455;
  re *v456;
  void *v457;
  uint64_t v458;
  char *v459;
  re *v460;
  void *v461;
  uint64_t v462;
  char *v463;
  re *v464;
  void *v465;
  uint64_t v466;
  char *v467;
  re *v468;
  void *v469;
  uint64_t v470;
  char *v471;
  re *v472;
  void *v473;
  uint64_t v474;
  char *v475;
  re *v476;
  void *v477;
  uint64_t v478;
  char *v479;
  re *v480;
  void *v481;
  uint64_t v482;
  char *v483;
  re *v484;
  void *v485;
  uint64_t v486;
  char *v487;
  re *v488;
  void *v489;
  uint64_t v490;
  char *v491;
  re *v492;
  void *v493;
  uint64_t v494;
  char *v495;
  re *v496;
  void *v497;
  uint64_t v498;
  char *v499;
  re *v500;
  void *v501;
  uint64_t v502;
  char *v503;
  re *v504;
  void *v505;
  uint64_t v506;
  char *v507;
  re *v508;
  void *v509;
  uint64_t v510;
  char *v511;
  re *v512;
  void *v513;
  uint64_t v514;
  char *v515;
  re *v516;
  void *v517;
  uint64_t v518;
  char *v519;
  re *v520;
  void *v521;
  uint64_t v522;
  char *v523;
  re *v524;
  void *v525;
  uint64_t v526;
  char *v527;
  re *v528;
  void *v529;
  uint64_t v530;
  char *v531;
  re *v532;
  void *v533;
  uint64_t v534;
  char *v535;
  re *v536;
  void *v537;
  uint64_t v538;
  char *v539;
  re *v540;
  void *v541;
  uint64_t v542;
  char *v543;
  re *v544;
  void *v545;
  uint64_t v546;
  char *v547;
  re *v548;
  void *v549;
  uint64_t v550;
  char *v551;
  re *v552;
  void *v553;
  uint64_t v554;
  char *v555;
  re *v556;
  void *v557;
  uint64_t v558;
  char *v559;
  re *v560;
  void *v561;
  uint64_t v562;
  char *v563;
  re *v564;
  void *v565;
  uint64_t v566;
  char *v567;
  re *v568;
  void *v569;
  uint64_t v570;
  char *v571;
  re *v572;
  void *v573;
  uint64_t v574;
  char *v575;
  re *v576;
  void *v577;
  uint64_t v578;
  char *v579;
  re *v580;
  void *v581;
  uint64_t v582;
  char *v583;
  re *v584;
  void *v585;
  uint64_t v586;
  char *v587;
  re *v588;
  void *v589;
  uint64_t v590;
  char *v591;
  re *v592;
  void *v593;
  uint64_t v594;
  char *v595;
  re *v596;
  void *v597;
  uint64_t v598;
  char *v599;
  re *v600;
  void *v601;
  uint64_t v602;
  char *v603;
  re *v604;
  void *v605;
  uint64_t v606;
  char *v607;
  re *v608;
  void *v609;
  uint64_t v610;
  char *v611;
  re *v612;
  void *v613;
  uint64_t v614;
  char *v615;
  re *v616;
  void *v617;
  uint64_t v618;
  char *v619;
  re *v620;
  void *v621;
  uint64_t v622;
  char *v623;
  re *v624;
  void *v625;
  uint64_t v626;
  char *v627;
  re *v628;
  void *v629;
  uint64_t v630;
  char *v631;
  re *v632;
  void *v633;
  uint64_t v634;
  char *v635;
  re *v636;
  void *v637;
  uint64_t v638;
  char *v639;
  re *v640;
  void *v641;
  uint64_t v642;
  char *v643;
  re *v644;
  void *v645;
  uint64_t v646;
  char *v647;
  re *v648;
  void *v649;
  uint64_t v650;
  char *v651;
  re *v652;
  void *v653;
  uint64_t v654;
  char *v655;
  re *v656;
  void *v657;
  uint64_t v658;
  char *v659;
  re *v660;
  void *v661;
  uint64_t v662;
  char *v663;
  re *v664;
  void *v665;
  uint64_t v666;
  char *v667;
  re *v668;
  void *v669;
  uint64_t v670;
  char *v671;
  re *v672;
  void *v673;
  uint64_t v674;
  char *v675;
  re *v676;
  void *v677;
  uint64_t v678;
  char *v679;
  re *v680;
  void *v681;
  uint64_t v682;
  char *v683;
  re *v684;
  void *v685;
  uint64_t v686;
  char *v687;
  re *v688;
  void *v689;
  uint64_t v690;
  char *v691;
  re *v692;
  void *v693;
  uint64_t v694;
  char *v695;
  re *v696;
  void *v697;
  uint64_t v698;
  char *v699;
  re *v700;
  void *v701;
  uint64_t v702;
  char *v703;
  re *v704;
  void *v705;
  uint64_t v706;
  char *v707;
  re *v708;
  void *v709;
  uint64_t v710;
  char *v711;
  re *v712;
  void *v713;
  uint64_t v714;
  char *v715;
  re *v716;
  void *v717;
  uint64_t v718;
  char *v719;
  re *v720;
  void *v721;
  uint64_t v722;
  char *v723;
  re *v724;
  void *v725;
  uint64_t v726;
  char *v727;
  re *v728;
  void *v729;
  uint64_t v730;
  char *v731;
  re *v732;
  void *v733;
  uint64_t v734;
  char *v735;
  re *v736;
  void *v737;
  uint64_t v738;
  char *v739;
  re *v740;
  void *v741;
  uint64_t v742;
  char *v743;
  re *v744;
  void *v745;
  uint64_t v746;
  char *v747;
  re *v748;
  void *v749;
  uint64_t v750;

  if (_MergedGlobals_174 == 1)
  {
    _MergedGlobals_174 = 0;
    v1 = re::internal::destroyPersistent<re::ecs2::HandleTable>((re *)"deinit", 64, re::ecs2::HandleTable::m_instance);
    if (re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
      v1 = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(v1);
    if (re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
      v1 = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::deinitComponentType(v1);
    if (re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
      v1 = re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(v1);
    if (re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
      v1 = re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(v1);
    v2 = re::ecs2::ComponentTypeRegistry::instance(v1);
    v3 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v4 = re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v5 = re::globalAllocators(v3)[2];
      (*(void (**)(void *))(*(_QWORD *)v4 + 16))(v4);
      v3 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v6 = re::ecs2::ComponentTypeRegistry::instance(v3);
    v7 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v8 = re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v9 = re::globalAllocators(v7)[2];
      (*(void (**)(void *))(*(_QWORD *)v8 + 16))(v8);
      v7 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v9 + 40))(v9, v8);
    }
    re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v10 = re::ecs2::ComponentTypeRegistry::instance(v7);
    v11 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v12 = re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v13 = re::globalAllocators(v11)[2];
      (*(void (**)(void *))(*(_QWORD *)v12 + 16))(v12);
      v11 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v13 + 40))(v13, v12);
    }
    re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v14 = re::ecs2::ComponentTypeRegistry::instance(v11);
    v15 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v14, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v16 = re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v17 = re::globalAllocators(v15)[2];
      (*(void (**)(void *))(*(_QWORD *)v16 + 16))(v16);
      v15 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v17 + 40))(v17, v16);
    }
    re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v18 = re::ecs2::ComponentTypeRegistry::instance(v15);
    v19 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v18, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v20 = re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v21 = re::globalAllocators(v19)[2];
      (*(void (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      v19 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v21 + 40))(v21, v20);
    }
    re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v22 = re::ecs2::ComponentTypeRegistry::instance(v19);
    v23 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v22, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v24 = re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v25 = re::globalAllocators(v23)[2];
      (*(void (**)(void *))(*(_QWORD *)v24 + 16))(v24);
      v23 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v25 + 40))(v25, v24);
    }
    re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v26 = re::ecs2::ComponentTypeRegistry::instance(v23);
    v27 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v26, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v28 = re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v29 = re::globalAllocators(v27)[2];
      (*(void (**)(void *))(*(_QWORD *)v28 + 16))(v28);
      v27 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v29 + 40))(v29, v28);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v30 = re::ecs2::ComponentTypeRegistry::instance(v27);
    v31 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v30, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v32 = re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v33 = re::globalAllocators(v31)[2];
      (*(void (**)(void *))(*(_QWORD *)v32 + 16))(v32);
      v31 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v33 + 40))(v33, v32);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v34 = re::ecs2::ComponentTypeRegistry::instance(v31);
    v35 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v34, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v36 = re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v37 = re::globalAllocators(v35)[2];
      (*(void (**)(void *))(*(_QWORD *)v36 + 16))(v36);
      v35 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v37 + 40))(v37, v36);
    }
    re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v38 = re::ecs2::ComponentTypeRegistry::instance(v35);
    v39 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v38, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v40 = re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v41 = re::globalAllocators(v39)[2];
      (*(void (**)(void *))(*(_QWORD *)v40 + 16))(v40);
      v39 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v41 + 40))(v41, v40);
    }
    re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v42 = re::ecs2::ComponentTypeRegistry::instance(v39);
    v43 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v42, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v44 = re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v45 = re::globalAllocators(v43)[2];
      (*(void (**)(void *))(*(_QWORD *)v44 + 16))(v44);
      v43 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v45 + 40))(v45, v44);
    }
    re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v46 = re::ecs2::ComponentTypeRegistry::instance(v43);
    v47 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v46, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v48 = re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v49 = re::globalAllocators(v47)[2];
      (*(void (**)(void *))(*(_QWORD *)v48 + 16))(v48);
      v47 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v49 + 40))(v49, v48);
    }
    re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v50 = re::ecs2::ComponentTypeRegistry::instance(v47);
    v51 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v50, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v52 = re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v53 = re::globalAllocators(v51)[2];
      (*(void (**)(void *))(*(_QWORD *)v52 + 16))(v52);
      v51 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v53 + 40))(v53, v52);
    }
    re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v54 = re::ecs2::ComponentTypeRegistry::instance(v51);
    v55 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v54, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v56 = re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)
    {
      v57 = re::globalAllocators(v55)[2];
      (*(void (**)(void *))(*(_QWORD *)v56 + 16))(v56);
      v55 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v57 + 40))(v57, v56);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType = 0;
    v58 = re::ecs2::ComponentTypeRegistry::instance(v55);
    v59 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v58, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v60 = re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v61 = re::globalAllocators(v59)[2];
      (*(void (**)(void *))(*(_QWORD *)v60 + 16))(v60);
      v59 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v61 + 40))(v61, v60);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v62 = re::ecs2::ComponentTypeRegistry::instance(v59);
    v63 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v62, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v64 = re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v65 = re::globalAllocators(v63)[2];
      (*(void (**)(void *))(*(_QWORD *)v64 + 16))(v64);
      v63 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v65 + 40))(v65, v64);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v66 = re::ecs2::ComponentTypeRegistry::instance(v63);
    v67 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v66, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v68 = re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v69 = re::globalAllocators(v67)[2];
      (*(void (**)(void *))(*(_QWORD *)v68 + 16))(v68);
      v67 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v69 + 40))(v69, v68);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v70 = re::ecs2::ComponentTypeRegistry::instance(v67);
    v71 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v70, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v72 = re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v73 = re::globalAllocators(v71)[2];
      (*(void (**)(void *))(*(_QWORD *)v72 + 16))(v72);
      v71 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v73 + 40))(v73, v72);
    }
    re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v74 = re::ecs2::ComponentTypeRegistry::instance(v71);
    v75 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v74, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v76 = re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v77 = re::globalAllocators(v75)[2];
      (*(void (**)(void *))(*(_QWORD *)v76 + 16))(v76);
      v75 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v77 + 40))(v77, v76);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v78 = re::ecs2::ComponentTypeRegistry::instance(v75);
    v79 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v78, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v80 = re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)
    {
      v81 = re::globalAllocators(v79)[2];
      (*(void (**)(void *))(*(_QWORD *)v80 + 16))(v80);
      v79 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v81 + 40))(v81, v80);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType = 0;
    v82 = re::ecs2::ComponentTypeRegistry::instance(v79);
    v83 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v82, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v84 = re::ecs2::ComponentImpl<re::ecs2::AudioLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AudioLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v85 = re::globalAllocators(v83)[2];
      (*(void (**)(void *))(*(_QWORD *)v84 + 16))(v84);
      v83 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v85 + 40))(v85, v84);
    }
    re::ecs2::ComponentImpl<re::ecs2::AudioLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v86 = re::ecs2::ComponentTypeRegistry::instance(v83);
    v87 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v86, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v88 = re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v89 = re::globalAllocators(v87)[2];
      (*(void (**)(void *))(*(_QWORD *)v88 + 16))(v88);
      v87 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v89 + 40))(v89, v88);
    }
    re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v90 = re::ecs2::ComponentTypeRegistry::instance(v87);
    v91 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v90, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v92 = re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v93 = re::globalAllocators(v91)[2];
      (*(void (**)(void *))(*(_QWORD *)v92 + 16))(v92);
      v91 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v93 + 40))(v93, v92);
    }
    re::ecs2::ComponentImpl<re::ecs2::ARSegmentationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v94 = re::ecs2::ComponentTypeRegistry::instance(v91);
    v95 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v94, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v96 = re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v97 = re::globalAllocators(v95)[2];
      (*(void (**)(void *))(*(_QWORD *)v96 + 16))(v96);
      v95 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v97 + 40))(v97, v96);
    }
    re::ecs2::ComponentImpl<re::ecs2::BallSocketJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v98 = re::ecs2::ComponentTypeRegistry::instance(v95);
    v99 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v98, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v100 = re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v101 = re::globalAllocators(v99)[2];
      (*(void (**)(void *))(*(_QWORD *)v100 + 16))(v100);
      v99 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v101 + 40))(v101, v100);
    }
    re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v102 = re::ecs2::ComponentTypeRegistry::instance(v99);
    v103 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v102, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v104 = re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v105 = re::globalAllocators(v103)[2];
      (*(void (**)(void *))(*(_QWORD *)v104 + 16))(v104);
      v103 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v105 + 40))(v105, v104);
    }
    re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v106 = re::ecs2::ComponentTypeRegistry::instance(v103);
    v107 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v106, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BodyTrackingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v108 = re::ecs2::ComponentImpl<re::ecs2::BodyTrackingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::BodyTrackingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v109 = re::globalAllocators(v107)[2];
      (*(void (**)(void *))(*(_QWORD *)v108 + 16))(v108);
      v107 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v109 + 40))(v109, v108);
    }
    re::ecs2::ComponentImpl<re::ecs2::BodyTrackingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v110 = re::ecs2::ComponentTypeRegistry::instance(v107);
    v111 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v110, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v112 = re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v113 = re::globalAllocators(v111)[2];
      (*(void (**)(void *))(*(_QWORD *)v112 + 16))(v112);
      v111 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v113 + 40))(v113, v112);
    }
    re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v114 = re::ecs2::ComponentTypeRegistry::instance(v111);
    v115 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v114, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v116 = re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v117 = re::globalAllocators(v115)[2];
      (*(void (**)(void *))(*(_QWORD *)v116 + 16))(v116);
      v115 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v117 + 40))(v117, v116);
    }
    re::ecs2::ComponentImpl<re::ecs2::CameraMovementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v118 = re::ecs2::ComponentTypeRegistry::instance(v115);
    v119 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v118, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v120 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v121 = re::globalAllocators(v119)[2];
      (*(void (**)(void *))(*(_QWORD *)v120 + 16))(v120);
      v119 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v121 + 40))(v121, v120);
    }
    re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v122 = re::ecs2::ComponentTypeRegistry::instance(v119);
    v123 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v122, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v124 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v125 = re::globalAllocators(v123)[2];
      (*(void (**)(void *))(*(_QWORD *)v124 + 16))(v124);
      v123 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v125 + 40))(v125, v124);
    }
    re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v126 = re::ecs2::ComponentTypeRegistry::instance(v123);
    v127 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v126, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v128 = re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v129 = re::globalAllocators(v127)[2];
      (*(void (**)(void *))(*(_QWORD *)v128 + 16))(v128);
      v127 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v129 + 40))(v129, v128);
    }
    re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v130 = re::ecs2::ComponentTypeRegistry::instance(v127);
    v131 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v130, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v132 = re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v133 = re::globalAllocators(v131)[2];
      (*(void (**)(void *))(*(_QWORD *)v132 + 16))(v132);
      v131 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v133 + 40))(v133, v132);
    }
    re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v134 = re::ecs2::ComponentTypeRegistry::instance(v131);
    v135 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v134, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v136 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v137 = re::globalAllocators(v135)[2];
      (*(void (**)(void *))(*(_QWORD *)v136 + 16))(v136);
      v135 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v137 + 40))(v137, v136);
    }
    re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v138 = re::ecs2::ComponentTypeRegistry::instance(v135);
    v139 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v138, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v140 = re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v141 = re::globalAllocators(v139)[2];
      (*(void (**)(void *))(*(_QWORD *)v140 + 16))(v140);
      v139 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v141 + 40))(v141, v140);
    }
    re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v142 = re::ecs2::ComponentTypeRegistry::instance(v139);
    v143 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v142, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v144 = re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v145 = re::globalAllocators(v143)[2];
      (*(void (**)(void *))(*(_QWORD *)v144 + 16))(v144);
      v143 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v145 + 40))(v145, v144);
    }
    re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v146 = re::ecs2::ComponentTypeRegistry::instance(v143);
    v147 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v146, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v148 = re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v149 = re::globalAllocators(v147)[2];
      (*(void (**)(void *))(*(_QWORD *)v148 + 16))(v148);
      v147 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v149 + 40))(v149, v148);
    }
    re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v150 = re::ecs2::CustomComponent::deinitComponentType(v147);
    v151 = re::ecs2::ComponentTypeRegistry::instance(v150);
    v152 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v151, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v153 = re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v154 = re::globalAllocators(v152)[2];
      (*(void (**)(void *))(*(_QWORD *)v153 + 16))(v153);
      v152 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v154 + 40))(v154, v153);
    }
    re::ecs2::ComponentImpl<re::ecs2::DebugMeshComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v155 = re::ecs2::ComponentTypeRegistry::instance(v152);
    v156 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v155, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomDockingRegionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v157 = re::ecs2::ComponentImpl<re::ecs2::CustomDockingRegionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::CustomDockingRegionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v158 = re::globalAllocators(v156)[2];
      (*(void (**)(void *))(*(_QWORD *)v157 + 16))(v157);
      v156 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v158 + 40))(v158, v157);
    }
    re::ecs2::ComponentImpl<re::ecs2::CustomDockingRegionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v159 = re::ecs2::ComponentTypeRegistry::instance(v156);
    v160 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v159, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v161 = re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v162 = re::globalAllocators(v160)[2];
      (*(void (**)(void *))(*(_QWORD *)v161 + 16))(v161);
      v160 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v162 + 40))(v162, v161);
    }
    re::ecs2::ComponentImpl<re::ecs2::DrawableQueueSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v163 = re::ecs2::ComponentTypeRegistry::instance(v160);
    v164 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v163, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v165 = re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v166 = re::globalAllocators(v164)[2];
      (*(void (**)(void *))(*(_QWORD *)v165 + 16))(v165);
      v164 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v166 + 40))(v166, v165);
    }
    re::ecs2::ComponentImpl<re::ecs2::DrawWorldComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v167 = re::ecs2::ComponentTypeRegistry::instance(v164);
    v168 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v167, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v169 = re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)
    {
      v170 = re::globalAllocators(v168)[2];
      (*(void (**)(void *))(*(_QWORD *)v169 + 16))(v169);
      v168 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v170 + 40))(v170, v169);
    }
    re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType = 0;
    v171 = re::ecs2::ComponentTypeRegistry::instance(v168);
    v172 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v171, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v173 = re::ecs2::ComponentImpl<re::ecs2::DynamicTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DynamicTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v174 = re::globalAllocators(v172)[2];
      (*(void (**)(void *))(*(_QWORD *)v173 + 16))(v173);
      v172 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v174 + 40))(v174, v173);
    }
    re::ecs2::ComponentImpl<re::ecs2::DynamicTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v175 = re::ecs2::ComponentTypeRegistry::instance(v172);
    v176 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v175, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v177 = re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v178 = re::globalAllocators(v176)[2];
      (*(void (**)(void *))(*(_QWORD *)v177 + 16))(v177);
      v176 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v178 + 40))(v178, v177);
    }
    re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v179 = re::ecs2::ComponentTypeRegistry::instance(v176);
    v180 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v179, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v181 = re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v182 = re::globalAllocators(v180)[2];
      (*(void (**)(void *))(*(_QWORD *)v181 + 16))(v181);
      v180 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v182 + 40))(v182, v181);
    }
    re::ecs2::ComponentImpl<re::ecs2::HingeJointComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v183 = re::ecs2::ComponentTypeRegistry::instance(v180);
    v184 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v183, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v185 = re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v186 = re::globalAllocators(v184)[2];
      (*(void (**)(void *))(*(_QWORD *)v185 + 16))(v185);
      v184 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v186 + 40))(v186, v185);
    }
    re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v187 = re::ecs2::ComponentTypeRegistry::instance(v184);
    v188 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v187, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v189 = re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v190 = re::globalAllocators(v188)[2];
      (*(void (**)(void *))(*(_QWORD *)v189 + 16))(v189);
      v188 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v190 + 40))(v190, v189);
    }
    re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v191 = re::ecs2::ComponentTypeRegistry::instance(v188);
    v192 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v191, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v193 = re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v194 = re::globalAllocators(v192)[2];
      (*(void (**)(void *))(*(_QWORD *)v193 + 16))(v193);
      v192 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v194 + 40))(v194, v193);
    }
    re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v195 = re::ecs2::ComponentTypeRegistry::instance(v192);
    v196 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v195, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v197 = re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v198 = re::globalAllocators(v196)[2];
      (*(void (**)(void *))(*(_QWORD *)v197 + 16))(v197);
      v196 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v198 + 40))(v198, v197);
    }
    re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v199 = re::ecs2::ComponentTypeRegistry::instance(v196);
    v200 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v199, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v201 = re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v202 = re::globalAllocators(v200)[2];
      (*(void (**)(void *))(*(_QWORD *)v201 + 16))(v201);
      v200 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v202 + 40))(v202, v201);
    }
    re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v203 = re::ecs2::ComponentTypeRegistry::instance(v200);
    v204 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v203, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v205 = re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v206 = re::globalAllocators(v204)[2];
      (*(void (**)(void *))(*(_QWORD *)v205 + 16))(v205);
      v204 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v206 + 40))(v206, v205);
    }
    re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v207 = re::ecs2::ComponentTypeRegistry::instance(v204);
    v208 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v207, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v209 = re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v210 = re::globalAllocators(v208)[2];
      (*(void (**)(void *))(*(_QWORD *)v209 + 16))(v209);
      v208 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v210 + 40))(v210, v209);
    }
    re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v211 = re::ecs2::ComponentTypeRegistry::instance(v208);
    v212 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v211, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v213 = re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v214 = re::globalAllocators(v212)[2];
      (*(void (**)(void *))(*(_QWORD *)v213 + 16))(v213);
      v212 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v214 + 40))(v214, v213);
    }
    re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v215 = re::ecs2::ComponentTypeRegistry::instance(v212);
    v216 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v215, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v217 = re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v218 = re::globalAllocators(v216)[2];
      (*(void (**)(void *))(*(_QWORD *)v217 + 16))(v217);
      v216 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v218 + 40))(v218, v217);
    }
    re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v219 = re::ecs2::ComponentTypeRegistry::instance(v216);
    v220 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v219, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v221 = re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v222 = re::globalAllocators(v220)[2];
      (*(void (**)(void *))(*(_QWORD *)v221 + 16))(v221);
      v220 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v222 + 40))(v222, v221);
    }
    re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v223 = re::ecs2::ComponentTypeRegistry::instance(v220);
    v224 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v223, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v225 = re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v226 = re::globalAllocators(v224)[2];
      (*(void (**)(void *))(*(_QWORD *)v225 + 16))(v225);
      v224 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v226 + 40))(v226, v225);
    }
    re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v227 = re::ecs2::ComponentTypeRegistry::instance(v224);
    v228 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v227, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v229 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v230 = re::globalAllocators(v228)[2];
      (*(void (**)(void *))(*(_QWORD *)v229 + 16))(v229);
      v228 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v230 + 40))(v230, v229);
    }
    re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v231 = re::ecs2::ComponentTypeRegistry::instance(v228);
    v232 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v231, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v233 = re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v234 = re::globalAllocators(v232)[2];
      (*(void (**)(void *))(*(_QWORD *)v233 + 16))(v233);
      v232 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v234 + 40))(v234, v233);
    }
    re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v235 = re::ecs2::ComponentTypeRegistry::instance(v232);
    v236 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v235, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v237 = re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v238 = re::globalAllocators(v236)[2];
      (*(void (**)(void *))(*(_QWORD *)v237 + 16))(v237);
      v236 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v238 + 40))(v238, v237);
    }
    re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v239 = re::ecs2::ComponentTypeRegistry::instance(v236);
    v240 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v239, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v241 = re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v242 = re::globalAllocators(v240)[2];
      (*(void (**)(void *))(*(_QWORD *)v241 + 16))(v241);
      v240 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v242 + 40))(v242, v241);
    }
    re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v243 = re::ecs2::ComponentTypeRegistry::instance(v240);
    v244 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v243, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v245 = re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v246 = re::globalAllocators(v244)[2];
      (*(void (**)(void *))(*(_QWORD *)v245 + 16))(v245);
      v244 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v246 + 40))(v246, v245);
    }
    re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v247 = re::ecs2::ComponentTypeRegistry::instance(v244);
    v248 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v247, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v249 = re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v250 = re::globalAllocators(v248)[2];
      (*(void (**)(void *))(*(_QWORD *)v249 + 16))(v249);
      v248 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v250 + 40))(v250, v249);
    }
    re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v251 = re::ecs2::ComponentTypeRegistry::instance(v248);
    v252 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v251, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v253 = re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v254 = re::globalAllocators(v252)[2];
      (*(void (**)(void *))(*(_QWORD *)v253 + 16))(v253);
      v252 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v254 + 40))(v254, v253);
    }
    re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v255 = re::ecs2::ComponentTypeRegistry::instance(v252);
    v256 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v255, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v257 = re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v258 = re::globalAllocators(v256)[2];
      (*(void (**)(void *))(*(_QWORD *)v257 + 16))(v257);
      v256 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v258 + 40))(v258, v257);
    }
    re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v259 = re::ecs2::ComponentTypeRegistry::instance(v256);
    v260 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v259, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v261 = re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v262 = re::globalAllocators(v260)[2];
      (*(void (**)(void *))(*(_QWORD *)v261 + 16))(v261);
      v260 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v262 + 40))(v262, v261);
    }
    re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v263 = re::ecs2::ComponentTypeRegistry::instance(v260);
    v264 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v263, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v265 = re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v266 = re::globalAllocators(v264)[2];
      (*(void (**)(void *))(*(_QWORD *)v265 + 16))(v265);
      v264 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v266 + 40))(v266, v265);
    }
    re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v267 = re::ecs2::ComponentTypeRegistry::instance(v264);
    v268 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v267, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v269 = re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v270 = re::globalAllocators(v268)[2];
      (*(void (**)(void *))(*(_QWORD *)v269 + 16))(v269);
      v268 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v270 + 40))(v270, v269);
    }
    re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v271 = re::ecs2::ComponentTypeRegistry::instance(v268);
    v272 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v271, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v273 = re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v274 = re::globalAllocators(v272)[2];
      (*(void (**)(void *))(*(_QWORD *)v273 + 16))(v273);
      v272 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v274 + 40))(v274, v273);
    }
    re::ecs2::ComponentImpl<re::ecs2::DirectMaterialParametersArrayComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v275 = re::ecs2::ComponentTypeRegistry::instance(v272);
    v276 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v275, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v277 = re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v278 = re::globalAllocators(v276)[2];
      (*(void (**)(void *))(*(_QWORD *)v277 + 16))(v277);
      v276 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v278 + 40))(v278, v277);
    }
    re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v279 = re::ecs2::ComponentTypeRegistry::instance(v276);
    v280 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v279, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v281 = re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v282 = re::globalAllocators(v280)[2];
      (*(void (**)(void *))(*(_QWORD *)v281 + 16))(v281);
      v280 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v282 + 40))(v282, v281);
    }
    re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v283 = re::ecs2::ComponentTypeRegistry::instance(v280);
    v284 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v283, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v285 = re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v286 = re::globalAllocators(v284)[2];
      (*(void (**)(void *))(*(_QWORD *)v285 + 16))(v285);
      v284 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v286 + 40))(v286, v285);
    }
    re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v287 = re::ecs2::ComponentTypeRegistry::instance(v284);
    v288 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v287, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v289 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v290 = re::globalAllocators(v288)[2];
      (*(void (**)(void *))(*(_QWORD *)v289 + 16))(v289);
      v288 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v290 + 40))(v290, v289);
    }
    re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v291 = re::ecs2::ComponentTypeRegistry::instance(v288);
    v292 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v291, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v293 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v294 = re::globalAllocators(v292)[2];
      (*(void (**)(void *))(*(_QWORD *)v293 + 16))(v293);
      v292 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v294 + 40))(v294, v293);
    }
    re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v295 = re::ecs2::ComponentTypeRegistry::instance(v292);
    v296 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v295, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v297 = re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v298 = re::globalAllocators(v296)[2];
      (*(void (**)(void *))(*(_QWORD *)v297 + 16))(v297);
      v296 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v298 + 40))(v298, v297);
    }
    re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v299 = re::ecs2::ComponentTypeRegistry::instance(v296);
    v300 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v299, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v301 = re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v302 = re::globalAllocators(v300)[2];
      (*(void (**)(void *))(*(_QWORD *)v301 + 16))(v301);
      v300 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v302 + 40))(v302, v301);
    }
    re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v303 = re::ecs2::ComponentTypeRegistry::instance(v300);
    v304 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v303, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v305 = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v306 = re::globalAllocators(v304)[2];
      (*(void (**)(void *))(*(_QWORD *)v305 + 16))(v305);
      v304 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v306 + 40))(v306, v305);
    }
    re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v307 = re::ecs2::ComponentTypeRegistry::instance(v304);
    v308 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v307, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClusterShadowMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v309 = re::ecs2::ComponentImpl<re::ecs2::ClusterShadowMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ClusterShadowMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v310 = re::globalAllocators(v308)[2];
      (*(void (**)(void *))(*(_QWORD *)v309 + 16))(v309);
      v308 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v310 + 40))(v310, v309);
    }
    re::ecs2::ComponentImpl<re::ecs2::ClusterShadowMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v311 = re::ecs2::ComponentTypeRegistry::instance(v308);
    v312 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v311, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClusterShadowSeparatorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v313 = re::ecs2::ComponentImpl<re::ecs2::ClusterShadowSeparatorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ClusterShadowSeparatorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v314 = re::globalAllocators(v312)[2];
      (*(void (**)(void *))(*(_QWORD *)v313 + 16))(v313);
      v312 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v314 + 40))(v314, v313);
    }
    re::ecs2::ComponentImpl<re::ecs2::ClusterShadowSeparatorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v315 = re::ecs2::ComponentTypeRegistry::instance(v312);
    v316 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v315, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v317 = re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v318 = re::globalAllocators(v316)[2];
      (*(void (**)(void *))(*(_QWORD *)v317 + 16))(v317);
      v316 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v318 + 40))(v318, v317);
    }
    re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v319 = re::ecs2::ComponentTypeRegistry::instance(v316);
    v320 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v319, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v321 = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v322 = re::globalAllocators(v320)[2];
      (*(void (**)(void *))(*(_QWORD *)v321 + 16))(v321);
      v320 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v322 + 40))(v322, v321);
    }
    re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v323 = re::ecs2::ComponentTypeRegistry::instance(v320);
    v324 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v323, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v325 = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v326 = re::globalAllocators(v324)[2];
      (*(void (**)(void *))(*(_QWORD *)v325 + 16))(v325);
      v324 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v326 + 40))(v326, v325);
    }
    re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v327 = re::ecs2::ComponentTypeRegistry::instance(v324);
    v328 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v327, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v329 = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v330 = re::globalAllocators(v328)[2];
      (*(void (**)(void *))(*(_QWORD *)v329 + 16))(v329);
      v328 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v330 + 40))(v330, v329);
    }
    re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v331 = re::ecs2::ComponentTypeRegistry::instance(v328);
    v332 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v331, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v333 = re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v334 = re::globalAllocators(v332)[2];
      (*(void (**)(void *))(*(_QWORD *)v333 + 16))(v333);
      v332 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v334 + 40))(v334, v333);
    }
    re::ecs2::ComponentImpl<re::ecs2::HierarchicalTintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v335 = re::ecs2::ComponentTypeRegistry::instance(v332);
    v336 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v335, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v337 = re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v338 = re::globalAllocators(v336)[2];
      (*(void (**)(void *))(*(_QWORD *)v337 + 16))(v337);
      v336 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v338 + 40))(v338, v337);
    }
    re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v339 = re::ecs2::ComponentTypeRegistry::instance(v336);
    v340 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v339, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v341 = re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v342 = re::globalAllocators(v340)[2];
      (*(void (**)(void *))(*(_QWORD *)v341 + 16))(v341);
      v340 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v342 + 40))(v342, v341);
    }
    re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v343 = re::ecs2::ComponentTypeRegistry::instance(v340);
    v344 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v343, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v345 = re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v346 = re::globalAllocators(v344)[2];
      (*(void (**)(void *))(*(_QWORD *)v345 + 16))(v345);
      v344 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v346 + 40))(v346, v345);
    }
    re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v347 = re::ecs2::ComponentTypeRegistry::instance(v344);
    v348 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v347, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v349 = re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v350 = re::globalAllocators(v348)[2];
      (*(void (**)(void *))(*(_QWORD *)v349 + 16))(v349);
      v348 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v350 + 40))(v350, v349);
    }
    re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v351 = re::ecs2::ComponentTypeRegistry::instance(v348);
    v352 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v351, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v353 = re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v354 = re::globalAllocators(v352)[2];
      (*(void (**)(void *))(*(_QWORD *)v353 + 16))(v353);
      v352 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v354 + 40))(v354, v353);
    }
    re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v355 = re::ecs2::ComponentTypeRegistry::instance(v352);
    v356 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v355, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v357 = re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v358 = re::globalAllocators(v356)[2];
      (*(void (**)(void *))(*(_QWORD *)v357 + 16))(v357);
      v356 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v358 + 40))(v358, v357);
    }
    re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v359 = re::ecs2::ComponentTypeRegistry::instance(v356);
    v360 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v359, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v361 = re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v362 = re::globalAllocators(v360)[2];
      (*(void (**)(void *))(*(_QWORD *)v361 + 16))(v361);
      v360 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v362 + 40))(v362, v361);
    }
    re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v363 = re::ecs2::ComponentTypeRegistry::instance(v360);
    v364 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v363, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v365 = re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v366 = re::globalAllocators(v364)[2];
      (*(void (**)(void *))(*(_QWORD *)v365 + 16))(v365);
      v364 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v366 + 40))(v366, v365);
    }
    re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v367 = re::ecs2::ComponentTypeRegistry::instance(v364);
    v368 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v367, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v369 = re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v370 = re::globalAllocators(v368)[2];
      (*(void (**)(void *))(*(_QWORD *)v369 + 16))(v369);
      v368 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v370 + 40))(v370, v369);
    }
    re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v371 = re::ecs2::ComponentTypeRegistry::instance(v368);
    v372 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v371, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v373 = re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v374 = re::globalAllocators(v372)[2];
      (*(void (**)(void *))(*(_QWORD *)v373 + 16))(v373);
      v372 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v374 + 40))(v374, v373);
    }
    re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v375 = re::ecs2::ComponentTypeRegistry::instance(v372);
    v376 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v375, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v377 = re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v378 = re::globalAllocators(v376)[2];
      (*(void (**)(void *))(*(_QWORD *)v377 + 16))(v377);
      v376 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v378 + 40))(v378, v377);
    }
    re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v379 = re::ecs2::ComponentTypeRegistry::instance(v376);
    v380 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v379, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v381 = re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v382 = re::globalAllocators(v380)[2];
      (*(void (**)(void *))(*(_QWORD *)v381 + 16))(v381);
      v380 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v382 + 40))(v382, v381);
    }
    re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v383 = re::ecs2::ComponentTypeRegistry::instance(v380);
    v384 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v383, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v385 = re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v386 = re::globalAllocators(v384)[2];
      (*(void (**)(void *))(*(_QWORD *)v385 + 16))(v385);
      v384 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v386 + 40))(v386, v385);
    }
    re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v387 = re::ecs2::ComponentTypeRegistry::instance(v384);
    v388 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v387, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v389 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v390 = re::globalAllocators(v388)[2];
      (*(void (**)(void *))(*(_QWORD *)v389 + 16))(v389);
      v388 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v390 + 40))(v390, v389);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v391 = re::ecs2::ComponentTypeRegistry::instance(v388);
    v392 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v391, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v393 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v394 = re::globalAllocators(v392)[2];
      (*(void (**)(void *))(*(_QWORD *)v393 + 16))(v393);
      v392 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v394 + 40))(v394, v393);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v395 = re::ecs2::ComponentTypeRegistry::instance(v392);
    v396 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v395, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v397 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v398 = re::globalAllocators(v396)[2];
      (*(void (**)(void *))(*(_QWORD *)v397 + 16))(v397);
      v396 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v398 + 40))(v398, v397);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v399 = re::ecs2::ComponentTypeRegistry::instance(v396);
    v400 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v399, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v401 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v402 = re::globalAllocators(v400)[2];
      (*(void (**)(void *))(*(_QWORD *)v401 + 16))(v401);
      v400 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v402 + 40))(v402, v401);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v403 = re::ecs2::ComponentTypeRegistry::instance(v400);
    v404 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v403, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v405 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v406 = re::globalAllocators(v404)[2];
      (*(void (**)(void *))(*(_QWORD *)v405 + 16))(v405);
      v404 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v406 + 40))(v406, v405);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v407 = re::ecs2::ComponentTypeRegistry::instance(v404);
    v408 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v407, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v409 = re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v410 = re::globalAllocators(v408)[2];
      (*(void (**)(void *))(*(_QWORD *)v409 + 16))(v409);
      v408 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v410 + 40))(v410, v409);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v411 = re::ecs2::ComponentTypeRegistry::instance(v408);
    v412 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v411, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v413 = re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v414 = re::globalAllocators(v412)[2];
      (*(void (**)(void *))(*(_QWORD *)v413 + 16))(v413);
      v412 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v414 + 40))(v414, v413);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v415 = re::ecs2::ComponentTypeRegistry::instance(v412);
    v416 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v415, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v417 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v418 = re::globalAllocators(v416)[2];
      (*(void (**)(void *))(*(_QWORD *)v417 + 16))(v417);
      v416 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v418 + 40))(v418, v417);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v419 = re::ecs2::ComponentTypeRegistry::instance(v416);
    v420 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v419, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v421 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v422 = re::globalAllocators(v420)[2];
      (*(void (**)(void *))(*(_QWORD *)v421 + 16))(v421);
      v420 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v422 + 40))(v422, v421);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v423 = re::ecs2::ComponentTypeRegistry::instance(v420);
    v424 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v423, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v425 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v426 = re::globalAllocators(v424)[2];
      (*(void (**)(void *))(*(_QWORD *)v425 + 16))(v425);
      v424 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v426 + 40))(v426, v425);
    }
    re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v427 = re::ecs2::ComponentTypeRegistry::instance(v424);
    v428 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v427, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v429 = re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)
    {
      v430 = re::globalAllocators(v428)[2];
      (*(void (**)(void *))(*(_QWORD *)v429 + 16))(v429);
      v428 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v430 + 40))(v430, v429);
    }
    re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType = 0;
    v431 = re::ecs2::ComponentTypeRegistry::instance(v428);
    v432 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v431, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v433 = re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)
    {
      v434 = re::globalAllocators(v432)[2];
      (*(void (**)(void *))(*(_QWORD *)v433 + 16))(v433);
      v432 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v434 + 40))(v434, v433);
    }
    re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType = 0;
    v435 = re::ecs2::ComponentTypeRegistry::instance(v432);
    v436 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v435, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v437 = re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v438 = re::globalAllocators(v436)[2];
      (*(void (**)(void *))(*(_QWORD *)v437 + 16))(v437);
      v436 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v438 + 40))(v438, v437);
    }
    re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v439 = re::ecs2::ComponentTypeRegistry::instance(v436);
    v440 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v439, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v441 = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v442 = re::globalAllocators(v440)[2];
      (*(void (**)(void *))(*(_QWORD *)v441 + 16))(v441);
      v440 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v442 + 40))(v442, v441);
    }
    re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v443 = re::ecs2::ComponentTypeRegistry::instance(v440);
    v444 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v443, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v445 = re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v446 = re::globalAllocators(v444)[2];
      (*(void (**)(void *))(*(_QWORD *)v445 + 16))(v445);
      v444 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v446 + 40))(v446, v445);
    }
    re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v447 = re::ecs2::ComponentTypeRegistry::instance(v444);
    v448 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v447, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v449 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v450 = re::globalAllocators(v448)[2];
      (*(void (**)(void *))(*(_QWORD *)v449 + 16))(v449);
      v448 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v450 + 40))(v450, v449);
    }
    re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v451 = re::ecs2::ComponentTypeRegistry::instance(v448);
    v452 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v451, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v453 = re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v454 = re::globalAllocators(v452)[2];
      (*(void (**)(void *))(*(_QWORD *)v453 + 16))(v453);
      v452 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v454 + 40))(v454, v453);
    }
    re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v455 = re::ecs2::ComponentTypeRegistry::instance(v452);
    v456 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v455, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v457 = re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v458 = re::globalAllocators(v456)[2];
      (*(void (**)(void *))(*(_QWORD *)v457 + 16))(v457);
      v456 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v458 + 40))(v458, v457);
    }
    re::ecs2::ComponentImpl<re::ecs2::IKParametersComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v459 = re::ecs2::ComponentTypeRegistry::instance(v456);
    v460 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v459, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v461 = re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v462 = re::globalAllocators(v460)[2];
      (*(void (**)(void *))(*(_QWORD *)v461 + 16))(v461);
      v460 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v462 + 40))(v462, v461);
    }
    re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v463 = re::ecs2::ComponentTypeRegistry::instance(v460);
    v464 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v463, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v465 = re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v466 = re::globalAllocators(v464)[2];
      (*(void (**)(void *))(*(_QWORD *)v465 + 16))(v465);
      v464 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v466 + 40))(v466, v465);
    }
    re::ecs2::ComponentImpl<re::ecs2::SkeletalDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v467 = re::ecs2::ComponentTypeRegistry::instance(v464);
    v468 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v467, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v469 = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v470 = re::globalAllocators(v468)[2];
      (*(void (**)(void *))(*(_QWORD *)v469 + 16))(v469);
      v468 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v470 + 40))(v470, v469);
    }
    re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v471 = re::ecs2::ComponentTypeRegistry::instance(v468);
    v472 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v471, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v473 = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v474 = re::globalAllocators(v472)[2];
      (*(void (**)(void *))(*(_QWORD *)v473 + 16))(v473);
      v472 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v474 + 40))(v474, v473);
    }
    re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v475 = re::ecs2::ComponentTypeRegistry::instance(v472);
    v476 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v475, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v477 = re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v478 = re::globalAllocators(v476)[2];
      (*(void (**)(void *))(*(_QWORD *)v477 + 16))(v477);
      v476 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v478 + 40))(v478, v477);
    }
    re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v479 = re::ecs2::ComponentTypeRegistry::instance(v476);
    v480 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v479, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v481 = re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v482 = re::globalAllocators(v480)[2];
      (*(void (**)(void *))(*(_QWORD *)v481 + 16))(v481);
      v480 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v482 + 40))(v482, v481);
    }
    re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v483 = re::ecs2::ComponentTypeRegistry::instance(v480);
    v484 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v483, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v485 = re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v486 = re::globalAllocators(v484)[2];
      (*(void (**)(void *))(*(_QWORD *)v485 + 16))(v485);
      v484 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v486 + 40))(v486, v485);
    }
    re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v487 = re::ecs2::ComponentTypeRegistry::instance(v484);
    v488 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v487, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v489 = re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v490 = re::globalAllocators(v488)[2];
      (*(void (**)(void *))(*(_QWORD *)v489 + 16))(v489);
      v488 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v490 + 40))(v490, v489);
    }
    re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v491 = re::ecs2::ComponentTypeRegistry::instance(v488);
    v492 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v491, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v493 = re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v494 = re::globalAllocators(v492)[2];
      (*(void (**)(void *))(*(_QWORD *)v493 + 16))(v493);
      v492 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v494 + 40))(v494, v493);
    }
    re::ecs2::ComponentImpl<re::ecs2::TextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v495 = re::ecs2::ComponentTypeRegistry::instance(v492);
    v496 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v495, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SubsceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v497 = re::ecs2::ComponentImpl<re::ecs2::SubsceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SubsceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v498 = re::globalAllocators(v496)[2];
      (*(void (**)(void *))(*(_QWORD *)v497 + 16))(v497);
      v496 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v498 + 40))(v498, v497);
    }
    re::ecs2::ComponentImpl<re::ecs2::SubsceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v499 = re::ecs2::ComponentTypeRegistry::instance(v496);
    v500 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v499, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v501 = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v502 = re::globalAllocators(v500)[2];
      (*(void (**)(void *))(*(_QWORD *)v501 + 16))(v501);
      v500 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v502 + 40))(v502, v501);
    }
    re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v503 = re::ecs2::ComponentTypeRegistry::instance(v500);
    v504 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v503, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v505 = re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v506 = re::globalAllocators(v504)[2];
      (*(void (**)(void *))(*(_QWORD *)v505 + 16))(v505);
      v504 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v506 + 40))(v506, v505);
    }
    re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v507 = re::ecs2::ComponentTypeRegistry::instance(v504);
    v508 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v507, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v509 = re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v510 = re::globalAllocators(v508)[2];
      (*(void (**)(void *))(*(_QWORD *)v509 + 16))(v509);
      v508 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v510 + 40))(v510, v509);
    }
    re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v511 = re::ecs2::ComponentTypeRegistry::instance(v508);
    v512 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v511, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v513 = re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v514 = re::globalAllocators(v512)[2];
      (*(void (**)(void *))(*(_QWORD *)v513 + 16))(v513);
      v512 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v514 + 40))(v514, v513);
    }
    re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v515 = re::ecs2::ComponentTypeRegistry::instance(v512);
    v516 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v515, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v517 = re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v518 = re::globalAllocators(v516)[2];
      (*(void (**)(void *))(*(_QWORD *)v517 + 16))(v517);
      v516 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v518 + 40))(v518, v517);
    }
    re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v519 = re::ecs2::ComponentTypeRegistry::instance(v516);
    v520 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v519, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v521 = re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v522 = re::globalAllocators(v520)[2];
      (*(void (**)(void *))(*(_QWORD *)v521 + 16))(v521);
      v520 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v522 + 40))(v522, v521);
    }
    re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v523 = re::ecs2::ComponentTypeRegistry::instance(v520);
    v524 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v523, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v525 = re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v526 = re::globalAllocators(v524)[2];
      (*(void (**)(void *))(*(_QWORD *)v525 + 16))(v525);
      v524 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v526 + 40))(v526, v525);
    }
    re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v527 = re::ecs2::ComponentTypeRegistry::instance(v524);
    v528 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v527, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v529 = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v530 = re::globalAllocators(v528)[2];
      (*(void (**)(void *))(*(_QWORD *)v529 + 16))(v529);
      v528 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v530 + 40))(v530, v529);
    }
    re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v531 = re::ecs2::ComponentTypeRegistry::instance(v528);
    v532 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v531, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v533 = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v534 = re::globalAllocators(v532)[2];
      (*(void (**)(void *))(*(_QWORD *)v533 + 16))(v533);
      v532 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v534 + 40))(v534, v533);
    }
    re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v535 = re::ecs2::ComponentTypeRegistry::instance(v532);
    v536 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v535, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v537 = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v538 = re::globalAllocators(v536)[2];
      (*(void (**)(void *))(*(_QWORD *)v537 + 16))(v537);
      v536 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v538 + 40))(v538, v537);
    }
    re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v539 = re::ecs2::ComponentTypeRegistry::instance(v536);
    v540 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v539, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v541 = re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v542 = re::globalAllocators(v540)[2];
      (*(void (**)(void *))(*(_QWORD *)v541 + 16))(v541);
      v540 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v542 + 40))(v542, v541);
    }
    re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v543 = re::ecs2::ComponentTypeRegistry::instance(v540);
    v544 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v543, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v545 = re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v546 = re::globalAllocators(v544)[2];
      (*(void (**)(void *))(*(_QWORD *)v545 + 16))(v545);
      v544 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v546 + 40))(v546, v545);
    }
    re::ecs2::ComponentImpl<re::ecs2::VoiceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v547 = re::ecs2::ComponentTypeRegistry::instance(v544);
    v548 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v547, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v549 = re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v550 = re::globalAllocators(v548)[2];
      (*(void (**)(void *))(*(_QWORD *)v549 + 16))(v549);
      v548 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v550 + 40))(v550, v549);
    }
    re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v551 = re::ecs2::ComponentTypeRegistry::instance(v548);
    v552 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v551, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v553 = re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v554 = re::globalAllocators(v552)[2];
      (*(void (**)(void *))(*(_QWORD *)v553 + 16))(v553);
      v552 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v554 + 40))(v554, v553);
    }
    re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v555 = re::ecs2::ComponentTypeRegistry::instance(v552);
    v556 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v555, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v557 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v558 = re::globalAllocators(v556)[2];
      (*(void (**)(void *))(*(_QWORD *)v557 + 16))(v557);
      v556 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v558 + 40))(v558, v557);
    }
    re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v559 = re::ecs2::ComponentTypeRegistry::instance(v556);
    v560 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v559, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v561 = re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v562 = re::globalAllocators(v560)[2];
      (*(void (**)(void *))(*(_QWORD *)v561 + 16))(v561);
      v560 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v562 + 40))(v562, v561);
    }
    re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v563 = re::ecs2::ComponentTypeRegistry::instance(v560);
    v564 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v563, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v565 = re::ecs2::ComponentImpl<re::ecs2::WorldScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::WorldScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v566 = re::globalAllocators(v564)[2];
      (*(void (**)(void *))(*(_QWORD *)v565 + 16))(v565);
      v564 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v566 + 40))(v566, v565);
    }
    re::ecs2::ComponentImpl<re::ecs2::WorldScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v567 = re::ecs2::ComponentTypeRegistry::instance(v564);
    v568 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v567, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v569 = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v570 = re::globalAllocators(v568)[2];
      (*(void (**)(void *))(*(_QWORD *)v569 + 16))(v569);
      v568 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v570 + 40))(v570, v569);
    }
    re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v571 = re::ecs2::ComponentTypeRegistry::instance(v568);
    v572 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v571, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v573 = re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v574 = re::globalAllocators(v572)[2];
      (*(void (**)(void *))(*(_QWORD *)v573 + 16))(v573);
      v572 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v574 + 40))(v574, v573);
    }
    re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v575 = re::ecs2::ComponentTypeRegistry::instance(v572);
    v576 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v575, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v577 = re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v578 = re::globalAllocators(v576)[2];
      (*(void (**)(void *))(*(_QWORD *)v577 + 16))(v577);
      v576 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v578 + 40))(v578, v577);
    }
    re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v579 = re::ecs2::ComponentTypeRegistry::instance(v576);
    v580 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v579, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v581 = re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v582 = re::globalAllocators(v580)[2];
      (*(void (**)(void *))(*(_QWORD *)v581 + 16))(v581);
      v580 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v582 + 40))(v582, v581);
    }
    re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v583 = re::ecs2::ComponentTypeRegistry::instance(v580);
    v584 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v583, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v585 = re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v586 = re::globalAllocators(v584)[2];
      (*(void (**)(void *))(*(_QWORD *)v585 + 16))(v585);
      v584 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v586 + 40))(v586, v585);
    }
    re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v587 = re::ecs2::ComponentTypeRegistry::instance(v584);
    v588 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v587, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v589 = re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v590 = re::globalAllocators(v588)[2];
      (*(void (**)(void *))(*(_QWORD *)v589 + 16))(v589);
      v588 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v590 + 40))(v590, v589);
    }
    re::ecs2::ComponentImpl<re::ecs2::VisualProxyFilterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v591 = re::ecs2::ComponentTypeRegistry::instance(v588);
    v592 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v591, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v593 = re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v594 = re::globalAllocators(v592)[2];
      (*(void (**)(void *))(*(_QWORD *)v593 + 16))(v593);
      v592 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v594 + 40))(v594, v593);
    }
    re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v595 = re::ecs2::ComponentTypeRegistry::instance(v592);
    v596 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v595, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v597 = re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v598 = re::globalAllocators(v596)[2];
      (*(void (**)(void *))(*(_QWORD *)v597 + 16))(v597);
      v596 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v598 + 40))(v598, v597);
    }
    re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v599 = re::ecs2::ComponentTypeRegistry::instance(v596);
    v600 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v599, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AllowsCASeparatedProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v601 = re::ecs2::ComponentImpl<re::ecs2::AllowsCASeparatedProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AllowsCASeparatedProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v602 = re::globalAllocators(v600)[2];
      (*(void (**)(void *))(*(_QWORD *)v601 + 16))(v601);
      v600 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v602 + 40))(v602, v601);
    }
    re::ecs2::ComponentImpl<re::ecs2::AllowsCASeparatedProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v603 = re::ecs2::ComponentTypeRegistry::instance(v600);
    v604 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v603, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v605 = re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v606 = re::globalAllocators(v604)[2];
      (*(void (**)(void *))(*(_QWORD *)v605 + 16))(v605);
      v604 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v606 + 40))(v606, v605);
    }
    re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v607 = re::ecs2::ComponentTypeRegistry::instance(v604);
    v608 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v607, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v609 = re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v610 = re::globalAllocators(v608)[2];
      (*(void (**)(void *))(*(_QWORD *)v609 + 16))(v609);
      v608 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v610 + 40))(v610, v609);
    }
    re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v611 = re::ecs2::ComponentTypeRegistry::instance(v608);
    v612 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v611, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v613 = re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v614 = re::globalAllocators(v612)[2];
      (*(void (**)(void *))(*(_QWORD *)v613 + 16))(v613);
      v612 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v614 + 40))(v614, v613);
    }
    re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v615 = re::ecs2::ComponentTypeRegistry::instance(v612);
    v616 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v615, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v617 = re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v618 = re::globalAllocators(v616)[2];
      (*(void (**)(void *))(*(_QWORD *)v617 + 16))(v617);
      v616 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v618 + 40))(v618, v617);
    }
    re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v619 = re::ecs2::ComponentTypeRegistry::instance(v616);
    v620 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v619, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v621 = re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v622 = re::globalAllocators(v620)[2];
      (*(void (**)(void *))(*(_QWORD *)v621 + 16))(v621);
      v620 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v622 + 40))(v622, v621);
    }
    re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v623 = re::ecs2::ComponentTypeRegistry::instance(v620);
    v624 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v623, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v625 = re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v626 = re::globalAllocators(v624)[2];
      (*(void (**)(void *))(*(_QWORD *)v625 + 16))(v625);
      v624 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v626 + 40))(v626, v625);
    }
    re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v627 = re::ecs2::ComponentTypeRegistry::instance(v624);
    v628 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v627, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v629 = re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v630 = re::globalAllocators(v628)[2];
      (*(void (**)(void *))(*(_QWORD *)v629 + 16))(v629);
      v628 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v630 + 40))(v630, v629);
    }
    re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v631 = re::ecs2::ComponentTypeRegistry::instance(v628);
    v632 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v631, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v633 = re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v634 = re::globalAllocators(v632)[2];
      (*(void (**)(void *))(*(_QWORD *)v633 + 16))(v633);
      v632 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v634 + 40))(v634, v633);
    }
    re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v635 = re::ecs2::ComponentTypeRegistry::instance(v632);
    v636 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v635, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v637 = re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v638 = re::globalAllocators(v636)[2];
      (*(void (**)(void *))(*(_QWORD *)v637 + 16))(v637);
      v636 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v638 + 40))(v638, v637);
    }
    re::ecs2::ComponentImpl<re::ecs2::ProbeClusterExclusionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v639 = re::ecs2::ComponentTypeRegistry::instance(v636);
    v640 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v639, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v641 = re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v642 = re::globalAllocators(v640)[2];
      (*(void (**)(void *))(*(_QWORD *)v641 + 16))(v641);
      v640 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v642 + 40))(v642, v641);
    }
    re::ecs2::ComponentImpl<re::ecs2::LinkedTLEComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v643 = re::ecs2::ComponentTypeRegistry::instance(v640);
    v644 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v643, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AssetStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v645 = re::ecs2::ComponentImpl<re::ecs2::AssetStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AssetStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v646 = re::globalAllocators(v644)[2];
      (*(void (**)(void *))(*(_QWORD *)v645 + 16))(v645);
      v644 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v646 + 40))(v646, v645);
    }
    re::ecs2::ComponentImpl<re::ecs2::AssetStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v647 = re::ecs2::ComponentTypeRegistry::instance(v644);
    v648 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v647, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v649 = re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v650 = re::globalAllocators(v648)[2];
      (*(void (**)(void *))(*(_QWORD *)v649 + 16))(v649);
      v648 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v650 + 40))(v650, v649);
    }
    re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v651 = re::ecs2::ComponentTypeRegistry::instance(v648);
    v652 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v651, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v653 = re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v654 = re::globalAllocators(v652)[2];
      (*(void (**)(void *))(*(_QWORD *)v653 + 16))(v653);
      v652 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v654 + 40))(v654, v653);
    }
    re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v655 = re::ecs2::ComponentTypeRegistry::instance(v652);
    v656 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v655, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v657 = re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v658 = re::globalAllocators(v656)[2];
      (*(void (**)(void *))(*(_QWORD *)v657 + 16))(v657);
      v656 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v658 + 40))(v658, v657);
    }
    re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v659 = re::ecs2::ComponentTypeRegistry::instance(v656);
    v660 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v659, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v661 = re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v662 = re::globalAllocators(v660)[2];
      (*(void (**)(void *))(*(_QWORD *)v661 + 16))(v661);
      v660 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v662 + 40))(v662, v661);
    }
    re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v663 = re::ecs2::ComponentTypeRegistry::instance(v660);
    v664 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v663, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v665 = re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v666 = re::globalAllocators(v664)[2];
      (*(void (**)(void *))(*(_QWORD *)v665 + 16))(v665);
      v664 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v666 + 40))(v666, v665);
    }
    re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v667 = re::ecs2::ComponentTypeRegistry::instance(v664);
    v668 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v667, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v669 = re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v670 = re::globalAllocators(v668)[2];
      (*(void (**)(void *))(*(_QWORD *)v669 + 16))(v669);
      v668 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v670 + 40))(v670, v669);
    }
    re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v671 = re::ecs2::ComponentTypeRegistry::instance(v668);
    v672 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v671, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v673 = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v674 = re::globalAllocators(v672)[2];
      (*(void (**)(void *))(*(_QWORD *)v673 + 16))(v673);
      v672 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v674 + 40))(v674, v673);
    }
    re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v675 = re::ecs2::ComponentTypeRegistry::instance(v672);
    v676 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v675, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v677 = re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v678 = re::globalAllocators(v676)[2];
      (*(void (**)(void *))(*(_QWORD *)v677 + 16))(v677);
      v676 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v678 + 40))(v678, v677);
    }
    re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v679 = re::ecs2::ComponentTypeRegistry::instance(v676);
    v680 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v679, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v681 = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v682 = re::globalAllocators(v680)[2];
      (*(void (**)(void *))(*(_QWORD *)v681 + 16))(v681);
      v680 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v682 + 40))(v682, v681);
    }
    re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v683 = re::ecs2::ComponentTypeRegistry::instance(v680);
    v684 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v683, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v685 = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v686 = re::globalAllocators(v684)[2];
      (*(void (**)(void *))(*(_QWORD *)v685 + 16))(v685);
      v684 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v686 + 40))(v686, v685);
    }
    re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v687 = re::ecs2::ComponentTypeRegistry::instance(v684);
    v688 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v687, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v689 = re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v690 = re::globalAllocators(v688)[2];
      (*(void (**)(void *))(*(_QWORD *)v689 + 16))(v689);
      v688 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v690 + 40))(v690, v689);
    }
    re::ecs2::ComponentImpl<re::ecs2::AnchoringResourceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v691 = re::ecs2::ComponentTypeRegistry::instance(v688);
    v692 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v691, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v693 = re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v694 = re::globalAllocators(v692)[2];
      (*(void (**)(void *))(*(_QWORD *)v693 + 16))(v693);
      v692 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v694 + 40))(v694, v693);
    }
    re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v695 = re::ecs2::ComponentTypeRegistry::instance(v692);
    v696 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v695, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v697 = re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v698 = re::globalAllocators(v696)[2];
      (*(void (**)(void *))(*(_QWORD *)v697 + 16))(v697);
      v696 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v698 + 40))(v698, v697);
    }
    re::ecs2::ComponentImpl<re::ecs2::DynamicLightShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v699 = re::ecs2::ComponentTypeRegistry::instance(v696);
    v700 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v699, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v701 = re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v702 = re::globalAllocators(v700)[2];
      (*(void (**)(void *))(*(_QWORD *)v701 + 16))(v701);
      v700 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v702 + 40))(v702, v701);
    }
    re::ecs2::ComponentImpl<re::ecs2::MaterialRenderStateArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v703 = re::ecs2::ComponentTypeRegistry::instance(v700);
    v704 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v703, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v705 = re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType)
    {
      v706 = re::globalAllocators(v704)[2];
      (*(void (**)(void *))(*(_QWORD *)v705 + 16))(v705);
      v704 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v706 + 40))(v706, v705);
    }
    re::ecs2::ComponentImpl<re::ecs2::ClientWorldOriginRefComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType = 0;
    v707 = re::ecs2::ComponentTypeRegistry::instance(v704);
    v708 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v707, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v709 = re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v710 = re::globalAllocators(v708)[2];
      (*(void (**)(void *))(*(_QWORD *)v709 + 16))(v709);
      v708 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v710 + 40))(v710, v709);
    }
    re::ecs2::ComponentImpl<re::ecs2::VirtualEnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v711 = re::ecs2::ComponentTypeRegistry::instance(v708);
    v712 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v711, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v713 = re::ecs2::ComponentImpl<re::ecs2::ReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v714 = re::globalAllocators(v712)[2];
      (*(void (**)(void *))(*(_QWORD *)v713 + 16))(v713);
      v712 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v714 + 40))(v714, v713);
    }
    re::ecs2::ComponentImpl<re::ecs2::ReferenceComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v715 = re::ecs2::ComponentTypeRegistry::instance(v712);
    v716 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v715, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v717 = re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v718 = re::globalAllocators(v716)[2];
      (*(void (**)(void *))(*(_QWORD *)v717 + 16))(v717);
      v716 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v718 + 40))(v718, v717);
    }
    re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v719 = re::ecs2::ComponentTypeRegistry::instance(v716);
    v720 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v719, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v721 = re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v722 = re::globalAllocators(v720)[2];
      (*(void (**)(void *))(*(_QWORD *)v721 + 16))(v721);
      v720 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v722 + 40))(v722, v721);
    }
    re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
    v723 = re::ecs2::ComponentTypeRegistry::instance(v720);
    v724 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v723, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v725 = re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v726 = re::globalAllocators(v724)[2];
      (*(void (**)(void *))(*(_QWORD *)v725 + 16))(v725);
      v724 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v726 + 40))(v726, v725);
    }
    re::ecs2::ComponentImpl<re::ecs2::ClientAnchorSyncComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v727 = re::ecs2::ComponentTypeRegistry::instance(v724);
    v728 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v727, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v729 = re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v730 = re::globalAllocators(v728)[2];
      (*(void (**)(void *))(*(_QWORD *)v729 + 16))(v729);
      v728 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v730 + 40))(v730, v729);
    }
    re::ecs2::ComponentImpl<re::ecs2::PreviewSupportComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v731 = re::ecs2::ComponentTypeRegistry::instance(v728);
    v732 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v731, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v733 = re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v734 = re::globalAllocators(v732)[2];
      (*(void (**)(void *))(*(_QWORD *)v733 + 16))(v733);
      v732 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v734 + 40))(v734, v733);
    }
    re::ecs2::ComponentImpl<re::ecs2::SelectableSceneContentIdentifierComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v735 = re::ecs2::ComponentTypeRegistry::instance(v732);
    v736 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v735, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v737 = re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v738 = re::globalAllocators(v736)[2];
      (*(void (**)(void *))(*(_QWORD *)v737 + 16))(v737);
      v736 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v738 + 40))(v738, v737);
    }
    re::ecs2::ComponentImpl<re::ecs2::FrameCountComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v739 = re::ecs2::ComponentTypeRegistry::instance(v736);
    v740 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v739, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v741 = re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v742 = re::globalAllocators(v740)[2];
      (*(void (**)(void *))(*(_QWORD *)v741 + 16))(v741);
      v740 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v742 + 40))(v742, v741);
    }
    re::ecs2::ComponentImpl<re::ecs2::CARETraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v743 = re::ecs2::ComponentTypeRegistry::instance(v740);
    v744 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v743, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v745 = re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v746 = re::globalAllocators(v744)[2];
      (*(void (**)(void *))(*(_QWORD *)v745 + 16))(v745);
      v744 = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v746 + 40))(v746, v745);
    }
    re::ecs2::ComponentImpl<re::ecs2::SceneSpaceRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
    v747 = re::ecs2::ComponentTypeRegistry::instance(v744);
    v748 = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v747, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v749 = re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    {
      v750 = re::globalAllocators(v748)[2];
      (*(void (**)(void *))(*(_QWORD *)v749 + 16))(v749);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v750 + 40))(v750, v749);
    }
    re::ecs2::ComponentImpl<re::ecs2::ImmersiveSpaceTrackerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
  }
}

re *re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(re::ecs2::ComponentTypeRegistry *a1)
{
  char *v1;
  re *result;
  void *v3;
  uint64_t v4;

  v1 = re::ecs2::ComponentTypeRegistry::instance(a1);
  result = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v3 = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if (re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    v4 = re::globalAllocators(result)[2];
    (*(void (**)(void *))(*(_QWORD *)v3 + 16))(v3);
    result = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
  return result;
}

re *re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::deinitComponentType(re::ecs2::ComponentTypeRegistry *a1)
{
  char *v1;
  re *result;
  void *v3;
  uint64_t v4;

  v1 = re::ecs2::ComponentTypeRegistry::instance(a1);
  result = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v3 = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  if (re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
  {
    v4 = re::globalAllocators(result)[2];
    (*(void (**)(void *))(*(_QWORD *)v3 + 16))(v3);
    result = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType = 0;
  return result;
}

re *re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(re::ecs2::ComponentTypeRegistry *a1)
{
  char *v1;
  re *result;
  void *v3;
  uint64_t v4;

  v1 = re::ecs2::ComponentTypeRegistry::instance(a1);
  result = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v3 = re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if (re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    v4 = re::globalAllocators(result)[2];
    (*(void (**)(void *))(*(_QWORD *)v3 + 16))(v3);
    result = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
  return result;
}

re *re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(re::ecs2::ComponentTypeRegistry *a1)
{
  char *v1;
  re *result;
  void *v3;
  uint64_t v4;

  v1 = re::ecs2::ComponentTypeRegistry::instance(a1);
  result = (re *)re::ecs2::ComponentTypeRegistry::remove((os_unfair_lock_s *)v1, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v3 = re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if (re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    v4 = re::globalAllocators(result)[2];
    (*(void (**)(void *))(*(_QWORD *)v3 + 16))(v3);
    result = (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = 0;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchorComponent>::ComponentType(uint64_t a1, const StringID *a2, uint64_t a3, int a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;

  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_24ED49C68;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(a1 + 32), (const char *)0xD0);
  if ((v7 & 1) == 0
  {
    re::introspect<re::ecs2::AnchorComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchorComponent(0);
  }
  v8 = re::introspect<re::ecs2::AnchorComponent>(void)::info;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  v9 = (char *)v8[6];
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v18[0] = 2 * v10;
  v18[1] = v9;
  v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v18);
  if (v14)
  {
    v15 = *v14;
  }
  else
  {
    v16 = 0;
    v15 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  re::StringID::destroyString((re::StringID *)v18);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  return a1;
}

double re::ecs2::ComponentType<re::ecs2::AnchorComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchorComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AnchorComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AnchorComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::AnchorComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 208, 0);
  return re::make::shared::inplace<re::ecs2::AnchorComponent>(v2, a1);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchorComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  return re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::SceneComponentCollection(v3, (uint64_t)a1);
}

void *re::ecs2::ComponentType<re::ecs2::AnchorComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<re::ecs2::AnchorComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchorComponent(0);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[60];
}

__n128 re::ecs2::ComponentType<re::ecs2::AnchorComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchorComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AnchorComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED49C68;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

double re::make::shared::inplace<re::ecs2::AnchorComponent>@<D0>(ArcSharedObject *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A9D8;
  *(_DWORD *)(v3 + 44) = 0;
  *(_QWORD *)(v3 + 33) = 0;
  *(_QWORD *)(v3 + 25) = 0;
  *(_BYTE *)(v3 + 41) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(v3 + 48) = xmmword_2260E5F10;
  *(_OWORD *)(v3 + 64) = xmmword_2260E5F20;
  *(_OWORD *)(v3 + 80) = xmmword_2260E5F40;
  *(_OWORD *)(v3 + 96) = xmmword_2260E5D70;
  *(_OWORD *)(v3 + 112) = xmmword_2260E5F10;
  *(_OWORD *)(v3 + 128) = xmmword_2260E5F20;
  *(_OWORD *)(v3 + 144) = xmmword_2260E5F40;
  *(_OWORD *)(v3 + 160) = xmmword_2260E5D70;
  *(_BYTE *)(v3 + 184) = 0;
  *(_DWORD *)(v3 + 176) = 0;
  *(_WORD *)(v3 + 200) = 1;
  *a2 = v3;
  return result;
}

void re::ecs2::AnchorComponent::~AnchorComponent(re::ecs2::AnchorComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return 0;
}

void *re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::SceneComponentCollection(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  re::ecs2::ComponentBucketsBase *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  v3 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_24ED49CD8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v4 = (_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  v5 = (_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v6 = (_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  v7 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 1;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 1;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 616) = 1;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v3, 0);
  ++*(_DWORD *)(a1 + 152);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v4, 0);
  ++*(_DWORD *)(a1 + 240);
  v10 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v5, 0);
  ++*(_DWORD *)(a1 + 328);
  v11 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v6, 0);
  ++*(_DWORD *)(a1 + 416);
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  return re::ecs2::SceneComponentCollectionCallbacks::subscribe<re::ecs2::AnchorComponent>(a2, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  re::ecs2::SceneComponentCollectionCallbacks::unsubscribe<re::ecs2::AnchorComponent>(a2, a1);
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED49CD8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

void re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;

  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::doDeferredActions((_anonymous_namespace_ *)a1);
}

void re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::doDeferredActions(_anonymous_namespace_ *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  _OWORD v19[5];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)a1 + 7);
  if (v1)
  {
    v3 = 0;
    for (i = 0; i != v1; ++i)
    {
      v5 = *((_QWORD *)a1 + 7);
      if (v5 <= i)
      {
        memset(v19, 0, sizeof(v19));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v11 = 136315906;
        v12 = "operator[]";
        v13 = 1024;
        v14 = 789;
        v15 = 2048;
        v16 = i;
        v17 = 2048;
        v18 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v6 = *((_QWORD *)a1 + 9) + v3;
      v7 = *(_QWORD *)(v6 + 32);
      v8 = *(_OWORD *)(v6 + 16);
      v9[0] = *(_OWORD *)v6;
      v9[1] = v8;
      v10 = v7;
      if (LOBYTE(v9[0]))
      {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf((uint64_t)a1, (_QWORD *)v9 + 1, (uint64_t)v19);
        if (!LOBYTE(v19[0]))
          re::DynamicArray<re::EvaluationRegister>::add(a1, (uint64_t)v9 + 8);
      }
      else
      {
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStable(a1, (_QWORD *)v9 + 1);
      }
      v3 += 40;
    }
  }
}

double re::ecs2::SceneComponentCollectionCallbacks::subscribe<re::ecs2::AnchorComponent>(_QWORD *a1, _DWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1[3])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchorComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 32, (uint64_t)&v5);
  }
  if (a1[4])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchorComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 98, (uint64_t)&v5);
  }
  if (a1[5])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchorComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 54, (uint64_t)&v5);
  }
  if (a1[6])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchorComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 76, (uint64_t)&v5);
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchorComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchorComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchorComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchorComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::SceneComponentCollectionCallbacks::unsubscribe<re::ecs2::AnchorComponent>(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1[3])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchorComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 128, &v4);
  }
  if (a1[4])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchorComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 392, &v4);
  }
  if (a1[5])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchorComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 216, &v4);
  }
  if (a1[6])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchorComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Slice<re::ecs2::AnchorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchorComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 304, &v4);
  }
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::ComponentType(uint64_t a1, const StringID *a2, uint64_t a3, int a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;

  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_24ED49D80;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(a1 + 32), (const char *)0x220);
  if ((v7 & 1) == 0
  {
    re::introspect<re::ecs2::AnchoringComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchoringComponent(0);
  }
  v8 = re::introspect<re::ecs2::AnchoringComponent>(void)::info;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  v9 = (char *)v8[6];
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v18[0] = 2 * v10;
  v18[1] = v9;
  v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v18);
  if (v14)
  {
    v15 = *v14;
  }
  else
  {
    v16 = 0;
    v15 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  re::StringID::destroyString((re::StringID *)v18);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  return a1;
}

double re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                       + 7)
                                                                    + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 544, 0);
  return re::make::shared::inplace<re::ecs2::AnchoringComponent>(v2, a1);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  return re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::SceneComponentCollection(v3, (uint64_t)a1);
}

void *re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<re::ecs2::AnchoringComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchoringComponent(0);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[62];
}

__n128 re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AnchoringComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED49D80;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

double re::make::shared::inplace<re::ecs2::AnchoringComponent>@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  double result;

  bzero(a1, 0x220uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = off_24ED5AA58;
  *((_DWORD *)a1 + 8) = 1;
  *((_OWORD *)a1 + 3) = xmmword_2260E5F10;
  *((_OWORD *)a1 + 4) = xmmword_2260E5F20;
  *((_OWORD *)a1 + 5) = xmmword_2260E5F40;
  *((_OWORD *)a1 + 6) = xmmword_2260E5D70;
  a1[14] = 0;
  a1[15] = 0;
  *((_BYTE *)a1 + 128) = -1;
  *(_OWORD *)(a1 + 17) = xmmword_2260FF4D0;
  *((_BYTE *)a1 + 152) = -1;
  *(_OWORD *)((char *)a1 + 156) = 0u;
  *(_OWORD *)((char *)a1 + 172) = 0u;
  *((_DWORD *)a1 + 47) = 0;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 20, 0);
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  re::DynamicString::setCapacity(a1 + 24, 0);
  a1[28] = 0;
  a1[29] = 0;
  *(_QWORD *)&result = 0x100000001;
  a1[30] = 0x100000001;
  *((_DWORD *)a1 + 64) = 1;
  *((_BYTE *)a1 + 272) = 0;
  *((_BYTE *)a1 + 352) = 1;
  *((_DWORD *)a1 + 89) = 1065353216;
  *((_BYTE *)a1 + 368) = 0;
  *((_BYTE *)a1 + 448) = 0;
  *((_BYTE *)a1 + 528) = 0;
  *a2 = a1;
  return result;
}

void re::ecs2::AnchoringComponent::~AnchoringComponent(re::ecs2::AnchoringComponent *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v3 = (_OWORD *)((char *)this + 192);
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    if ((*((_BYTE *)this + 200) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 26));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *((_QWORD *)this + 20);
  if (v4)
  {
    if ((*((_BYTE *)this + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 22));
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v3 = (_OWORD *)((char *)this + 192);
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    if ((*((_BYTE *)this + 200) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 26));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *((_QWORD *)this + 20);
  if (v4)
  {
    if ((*((_BYTE *)this + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 22));
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::SceneComponentCollection(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  re::ecs2::ComponentBucketsBase *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  v3 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_24ED49DF0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v4 = (_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  v5 = (_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v6 = (_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  v7 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 1;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 1;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 616) = 1;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v3, 0);
  ++*(_DWORD *)(a1 + 152);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v4, 0);
  ++*(_DWORD *)(a1 + 240);
  v10 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v5, 0);
  ++*(_DWORD *)(a1 + 328);
  v11 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v6, 0);
  ++*(_DWORD *)(a1 + 416);
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  return re::ecs2::SceneComponentCollectionCallbacks::subscribe<re::ecs2::AnchoringComponent>(a2, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  re::ecs2::SceneComponentCollectionCallbacks::unsubscribe<re::ecs2::AnchoringComponent>(a2, a1);
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED49DF0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

double re::ecs2::SceneComponentCollectionCallbacks::subscribe<re::ecs2::AnchoringComponent>(_QWORD *a1, _DWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1[3])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchoringComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 32, (uint64_t)&v5);
  }
  if (a1[4])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchoringComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 98, (uint64_t)&v5);
  }
  if (a1[5])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchoringComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 54, (uint64_t)&v5);
  }
  if (a1[6])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchoringComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 76, (uint64_t)&v5);
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchoringComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchoringComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchoringComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchoringComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::SceneComponentCollectionCallbacks::unsubscribe<re::ecs2::AnchoringComponent>(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1[3])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnchoringComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 128, &v4);
  }
  if (a1[4])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnchoringComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 392, &v4);
  }
  if (a1[5])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnchoringComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 216, &v4);
  }
  if (a1[6])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnchoringComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Slice<re::ecs2::AnchoringComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchoringComponent>,re::Slice<re::ecs2::AnchoringComponent*>>::Subscription const&,re::Slice<re::ecs2::AnchoringComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 304, &v4);
  }
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneComponent>::ComponentType(uint64_t a1, const StringID *a2, uint64_t a3, int a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;

  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_24ED49E98;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(a1 + 32), (const char *)0x20);
  if ((v7 & 1) == 0
  {
    re::introspect<re::ecs2::SceneComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_SceneComponent(0);
  }
  v8 = re::introspect<re::ecs2::SceneComponent>(void)::info;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  v9 = (char *)v8[6];
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v18[0] = 2 * v10;
  v18[1] = v9;
  v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v18);
  if (v14)
  {
    v15 = *v14;
  }
  else
  {
    v16 = 0;
    v15 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  re::StringID::destroyString((re::StringID *)v18);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  return a1;
}

double re::ecs2::ComponentType<re::ecs2::SceneComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::SceneComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::SceneComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  return re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::SceneComponentCollection(v3, (uint64_t)a1);
}

__guard re::ecs2::ComponentType<re::ecs2::SceneComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<re::ecs2::SceneComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_SceneComponent(0);
    }
  }
  return v1[483];
}

__n128 re::ecs2::ComponentType<re::ecs2::SceneComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::SceneComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::SceneComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED49E98;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::create(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A8D8;
  *(_WORD *)(v3 + 25) = 0;
  *a1 = v3;
}

void re::ecs2::SceneComponent::~SceneComponent(re::ecs2::SceneComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::SceneComponentCollection(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  re::ecs2::ComponentBucketsBase *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  v3 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_24ED49F08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v4 = (_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  v5 = (_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v6 = (_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  v7 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 1;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 1;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 616) = 1;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v3, 0);
  ++*(_DWORD *)(a1 + 152);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v4, 0);
  ++*(_DWORD *)(a1 + 240);
  v10 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v5, 0);
  ++*(_DWORD *)(a1 + 328);
  v11 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v6, 0);
  ++*(_DWORD *)(a1 + 416);
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  return re::ecs2::SceneComponentCollectionCallbacks::subscribe<re::ecs2::SceneComponent>(a2, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  re::ecs2::SceneComponentCollectionCallbacks::unsubscribe<re::ecs2::SceneComponent>(a2, a1);
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED49F08;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

double re::ecs2::SceneComponentCollectionCallbacks::subscribe<re::ecs2::SceneComponent>(_QWORD *a1, _DWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1[3])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 32, (uint64_t)&v5);
  }
  if (a1[4])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 98, (uint64_t)&v5);
  }
  if (a1[5])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 54, (uint64_t)&v5);
  }
  if (a1[6])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 76, (uint64_t)&v5);
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::SceneComponentCollectionCallbacks::unsubscribe<re::ecs2::SceneComponent>(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1[3])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::SceneComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 128, &v4);
  }
  if (a1[4])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::SceneComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 392, &v4);
  }
  if (a1[5])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::SceneComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 216, &v4);
  }
  if (a1[6])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::SceneComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Slice<re::ecs2::SceneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SceneComponent>,re::Slice<re::ecs2::SceneComponent*>>::Subscription const&,re::Slice<re::ecs2::SceneComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 304, &v4);
  }
}

uint64_t re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::ComponentType(uint64_t a1, const StringID *a2, uint64_t a3, int a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;

  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_24ED49FB0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(a1 + 32), (const char *)0x20);
  if ((v7 & 1) == 0
  {
    re::introspect<re::ecs2::CoordinateSpaceDefinitionComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_CoordinateSpaceDefinitionComponent(0);
  }
  v8 = re::introspect<re::ecs2::CoordinateSpaceDefinitionComponent>(void)::info;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  v9 = (char *)v8[6];
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v18[0] = 2 * v10;
  v18[1] = v9;
  v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v18);
  if (v14)
  {
    v15 = *v14;
  }
  else
  {
    v16 = 0;
    v15 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  re::StringID::destroyString((re::StringID *)v18);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  return a1;
}

double re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A958;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  return re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::SceneComponentCollection(v3, (uint64_t)a1);
}

__guard re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<re::ecs2::CoordinateSpaceDefinitionComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_CoordinateSpaceDefinitionComponent(0);
    }
  }
  return v1[485];
}

__n128 re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::CoordinateSpaceDefinitionComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED49FB0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::CoordinateSpaceDefinitionComponent::~CoordinateSpaceDefinitionComponent(re::ecs2::CoordinateSpaceDefinitionComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::SceneComponentCollection(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  re::ecs2::ComponentBucketsBase *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  v3 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_24ED4A020;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v4 = (_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  v5 = (_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  v6 = (_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  v7 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 1;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 1;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 616) = 1;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v3, 0);
  ++*(_DWORD *)(a1 + 152);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v4, 0);
  ++*(_DWORD *)(a1 + 240);
  v10 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v5, 0);
  ++*(_DWORD *)(a1 + 328);
  v11 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity(v6, 0);
  ++*(_DWORD *)(a1 + 416);
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  return re::ecs2::SceneComponentCollectionCallbacks::subscribe<re::ecs2::CoordinateSpaceDefinitionComponent>(a2, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  re::ecs2::SceneComponentCollectionCallbacks::unsubscribe<re::ecs2::CoordinateSpaceDefinitionComponent>(a2, a1);
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A020;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

double re::ecs2::SceneComponentCollectionCallbacks::subscribe<re::ecs2::CoordinateSpaceDefinitionComponent>(_QWORD *a1, _DWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1[3])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CoordinateSpaceDefinitionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 32, (uint64_t)&v5);
  }
  if (a1[4])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CoordinateSpaceDefinitionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 98, (uint64_t)&v5);
  }
  if (a1[5])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CoordinateSpaceDefinitionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 54, (uint64_t)&v5);
  }
  if (a1[6])
  {
    v5 = a1;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CoordinateSpaceDefinitionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a2 + 76, (uint64_t)&v5);
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CoordinateSpaceDefinitionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CoordinateSpaceDefinitionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CoordinateSpaceDefinitionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CoordinateSpaceDefinitionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::SceneComponentCollectionCallbacks::unsubscribe<re::ecs2::CoordinateSpaceDefinitionComponent>(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a1[3])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CoordinateSpaceDefinitionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 128, &v4);
  }
  if (a1[4])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CoordinateSpaceDefinitionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 392, &v4);
  }
  if (a1[5])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CoordinateSpaceDefinitionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 216, &v4);
  }
  if (a1[6])
  {
    *(_QWORD *)&v4 = a1;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CoordinateSpaceDefinitionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CoordinateSpaceDefinitionComponent>,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>>::Subscription const&,re::Slice<re::ecs2::CoordinateSpaceDefinitionComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a2 + 304, &v4);
  }
}

double re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  double result;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 432, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59B00;
  result = 0.0;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 74) = 0u;
  *(_WORD *)(v3 + 160) = 1;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_BYTE *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 416) = 0;
  *(_DWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_DWORD *)(v3 + 272) = 0;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_DWORD *)(v3 + 312) = 0;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_DWORD *)(v3 + 352) = 0;
  *(_OWORD *)(v3 + 360) = 0u;
  *(_OWORD *)(v3 + 376) = 0u;
  *(_DWORD *)(v3 + 392) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A138;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108C58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108C58))
  {
    qword_254108C50 = re::ecs2::introspect_AcousticMeshComponent(0);
    __cxa_guard_release(&qword_254108C58);
  }
  return qword_254108C50;
}

__n128 re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AcousticMeshComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A0C8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::AcousticMeshComponent::~AcousticMeshComponent(id *this)
{
  *this = &off_24ED59B00;
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 46));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 41));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 36));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 31));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 26));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 21));

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  *this = &off_24ED59B00;
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 46));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 41));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 36));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 31));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 26));
  re::DynamicArray<re::AcousticSoundReductionMaterial>::deinit((uint64_t)(this + 21));

  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AcousticMeshComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 32, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AcousticMeshComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 98, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AcousticMeshComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 54, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AcousticMeshComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 76, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AcousticMeshComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AcousticMeshComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AcousticMeshComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AcousticMeshComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A138;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

void re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  _BYTE v23[88];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      v7 = 0;
      for (i = 0; i != v6; ++i)
      {
        v9 = *(_QWORD *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v23, 0, 80);
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v15 = 136315906;
          v16 = "operator[]";
          v17 = 1024;
          v18 = 789;
          v19 = 2048;
          v20 = i;
          v21 = 2048;
          v22 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = *(_QWORD *)(a1 + 72) + v7;
        v11 = *(_QWORD *)(v10 + 32);
        v12 = *(_OWORD *)(v10 + 16);
        v13[0] = *(_OWORD *)v10;
        v13[1] = v12;
        v14 = v11;
        if (LOBYTE(v13[0]))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (_QWORD *)v13 + 1, (uint64_t)v23);
          if (!v23[0])
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)a1, (uint64_t)v13 + 8);
        }
        else
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStable((_QWORD *)a1, (_QWORD *)v13 + 1);
        }
        v7 += 40;
      }
    }
  }
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AcousticMeshComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AcousticMeshComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AcousticMeshComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AcousticMeshComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  double result;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 368, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58C40;
  *(_WORD *)(v3 + 25) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_DWORD *)(v3 + 176) = 0;
  *(_BYTE *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 360) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 264) = 0;
  *(_DWORD *)(v3 + 304) = 0;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 340) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  *(_OWORD *)(v3 + 328) = 0u;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A250;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108C68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108C68))
  {
    qword_254108C60 = re::ecs2::introspect_AccessibilityComponent(0);
    __cxa_guard_release(&qword_254108C68);
  }
  return qword_254108C60;
}

__n128 re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AccessibilityComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A1E0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::AccessibilityComponent::~AccessibilityComponent(re::ecs2::AccessibilityComponent *this)
{
  re::ecs2::AccessibilityComponent::~AccessibilityComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 328);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 280);
  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    if (*((_QWORD *)this + 34))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 30) = 0;
    ++*((_DWORD *)this + 66);
  }
  if (*((_BYTE *)this + 192))
  {
    v3 = *((_QWORD *)this + 25);
    if (v3)
    {
      if ((*((_BYTE *)this + 208) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 27));
      *(_OWORD *)((char *)this + 200) = 0u;
      *(_OWORD *)((char *)this + 216) = 0u;
    }
  }
  re::DynamicArray<re::ecs2::accessibility::CustomContent>::deinit((uint64_t)this + 152);
  if (*((_BYTE *)this + 112))
  {
    v4 = *((_QWORD *)this + 15);
    if (v4)
    {
      if ((*((_BYTE *)this + 128) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 17));
      *(_OWORD *)((char *)this + 120) = 0u;
      *(_OWORD *)((char *)this + 136) = 0u;
    }
  }
  if (*((_BYTE *)this + 72))
  {
    v5 = *((_QWORD *)this + 10);
    if (v5)
    {
      if ((*((_BYTE *)this + 88) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 12));
      *((_OWORD *)this + 5) = 0u;
      *((_OWORD *)this + 6) = 0u;
    }
  }
  if (*((_BYTE *)this + 32))
  {
    v6 = *((_QWORD *)this + 5);
    if (v6)
    {
      if ((*((_BYTE *)this + 48) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 7));
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
    }
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::DynamicArray<re::ecs2::accessibility::CustomContent>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 v7;
  __n128 *v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 72 * v4;
        v6 = v3 + 2;
        v7 = 0uLL;
        do
        {
          v8 = v6 - 2;
          if (v6->n128_u64[0])
          {
            if ((v6->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v6->n128_u64[0] + 40))(v6->n128_u64[0], v6[1].n128_u64[0], v7);
              v7 = 0uLL;
            }
            *v6 = v7;
            v6[1] = v7;
          }
          if (v8->n128_u64[0])
          {
            if ((v6[-2].n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v8->n128_u64[0] + 40))(v8->n128_u64[0], v6[-1].n128_u64[0], v7);
              v7 = 0uLL;
            }
            *v8 = v7;
            v6[-1] = v7;
          }
          v6 = (__n128 *)((char *)v6 + 72);
          v5 -= 72;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AccessibilityComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AccessibilityComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AccessibilityComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AccessibilityComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AccessibilityComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AccessibilityComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AccessibilityComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AccessibilityComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A250;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AccessibilityComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AccessibilityComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AccessibilityComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AccessibilityComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Slice<re::ecs2::AccessibilityComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AccessibilityComponent>,re::Slice<re::ecs2::AccessibilityComponent*>>::Subscription const&,re::Slice<re::ecs2::AccessibilityComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57908;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A368;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108C78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108C78))
  {
    qword_254108C70 = re::ecs2::introspect_AdaptiveResolutionComponent(0);
    __cxa_guard_release(&qword_254108C78);
  }
  return qword_254108C70;
}

__n128 re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A2F8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::AdaptiveResolutionComponent::~AdaptiveResolutionComponent(re::ecs2::AdaptiveResolutionComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AdaptiveResolutionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AdaptiveResolutionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AdaptiveResolutionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AdaptiveResolutionComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AdaptiveResolutionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AdaptiveResolutionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AdaptiveResolutionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AdaptiveResolutionComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A368;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AdaptiveResolutionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AdaptiveResolutionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AdaptiveResolutionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AdaptiveResolutionComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Slice<re::ecs2::AdaptiveResolutionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionComponent>,re::Slice<re::ecs2::AdaptiveResolutionComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57988;
  *(_DWORD *)(v3 + 28) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A480;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108C88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108C88))
  {
    qword_254108C80 = re::ecs2::introspect_AdaptiveResolutionStateComponent(0);
    __cxa_guard_release(&qword_254108C88);
  }
  return qword_254108C80;
}

__n128 re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AdaptiveResolutionStateComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A410;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::AdaptiveResolutionStateComponent::~AdaptiveResolutionStateComponent(re::ecs2::AdaptiveResolutionStateComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AdaptiveResolutionStateComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AdaptiveResolutionStateComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AdaptiveResolutionStateComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AdaptiveResolutionStateComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AdaptiveResolutionStateComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AdaptiveResolutionStateComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AdaptiveResolutionStateComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AdaptiveResolutionStateComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A480;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AdaptiveResolutionStateComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AdaptiveResolutionStateComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AdaptiveResolutionStateComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AdaptiveResolutionStateComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AdaptiveResolutionStateComponent>,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>>::Subscription const&,re::Slice<re::ecs2::AdaptiveResolutionStateComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AnimationComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnimationComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AnimationComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AnimationComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

re::ecs2::AnimationComponent *re::ecs2::ComponentType<re::ecs2::AnimationComponent>::doMakeComponent@<X0>(re::ecs2::AnimationComponent **a1@<X8>)
{
  re::ecs2::AnimationComponent *v2;
  re::ecs2::AnimationComponent *result;

  v2 = (re::ecs2::AnimationComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                             + 7)
                                                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 248, 0);
  result = re::ecs2::AnimationComponent::AnimationComponent(v2);
  *a1 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnimationComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A598;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnimationComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108C98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108C98))
  {
    qword_254108C90 = re::ecs2::introspect_AnimationComponent(0);
    __cxa_guard_release(&qword_254108C98);
  }
  return qword_254108C90;
}

__n128 re::ecs2::ComponentType<re::ecs2::AnimationComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnimationComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AnimationComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A528;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnimationComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnimationComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnimationComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnimationComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnimationComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnimationComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnimationComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnimationComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A598;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnimationComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnimationComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnimationComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnimationComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Slice<re::ecs2::AnimationComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationComponent>,re::Slice<re::ecs2::AnimationComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 120, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_QWORD *)(v2 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED43558;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 76) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = -1;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A6B0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108CA8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108CA8))
  {
    qword_254108CA0 = re::ecs2::introspect_AnimationLibraryComponent(0);
    __cxa_guard_release(&qword_254108CA8);
  }
  return qword_254108CA0;
}

__n128 re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AnimationLibraryComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A640;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnimationLibraryComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnimationLibraryComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnimationLibraryComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnimationLibraryComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnimationLibraryComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnimationLibraryComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnimationLibraryComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnimationLibraryComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A6B0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AnimationLibraryComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AnimationLibraryComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AnimationLibraryComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AnimationLibraryComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Slice<re::ecs2::AnimationLibraryComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnimationLibraryComponent>,re::Slice<re::ecs2::AnimationLibraryComponent*>>::Subscription const&,re::Slice<re::ecs2::AnimationLibraryComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

re::ecs2::AudioGeneratorComponent *re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::doMakeComponent@<X0>(re::ecs2::AudioGeneratorComponent **a1@<X8>)
{
  re::ecs2::AudioGeneratorComponent *v2;
  re::ecs2::AudioGeneratorComponent *result;

  v2 = (re::ecs2::AudioGeneratorComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                                  + 7)
                                                                                               + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 1152, 0);
  result = re::ecs2::AudioGeneratorComponent::AudioGeneratorComponent(v2);
  *a1 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A7C8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108CB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108CB8))
  {
    qword_254108CB0 = re::ecs2::introspect_AudioGeneratorComponent(0);
    __cxa_guard_release(&qword_254108CB8);
  }
  return qword_254108CB0;
}

__n128 re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AudioGeneratorComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A758;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AudioGeneratorComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AudioGeneratorComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AudioGeneratorComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AudioGeneratorComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AudioGeneratorComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AudioGeneratorComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AudioGeneratorComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AudioGeneratorComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A7C8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AudioGeneratorComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AudioGeneratorComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AudioGeneratorComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AudioGeneratorComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Slice<re::ecs2::AudioGeneratorComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioGeneratorComponent>,re::Slice<re::ecs2::AudioGeneratorComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioGeneratorComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

re::ecs2::AudioPlayerComponent *re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::doMakeComponent@<X0>(re::ecs2::AudioPlayerComponent **a1@<X8>)
{
  re::ecs2::AudioPlayerComponent *v2;
  re::ecs2::AudioPlayerComponent *result;

  v2 = (re::ecs2::AudioPlayerComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                               + 7)
                                                                                            + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 496, 0);
  result = re::ecs2::AudioPlayerComponent::AudioPlayerComponent(v2);
  *a1 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A8E0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108CC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108CC8))
  {
    qword_254108CC0 = re::ecs2::introspect_AudioPlayerComponent(0);
    __cxa_guard_release(&qword_254108CC8);
  }
  return qword_254108CC0;
}

__n128 re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AudioPlayerComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A870;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AudioPlayerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 32, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AudioPlayerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 98, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AudioPlayerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 54, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AudioPlayerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 76, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AudioPlayerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AudioPlayerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AudioPlayerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AudioPlayerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A8E0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AudioPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AudioPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AudioPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AudioPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 56, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57A08;
  *(_DWORD *)(v3 + 32) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4A9F8;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108CD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108CD8))
  {
    qword_254108CD0 = re::ecs2::introspect_VideoAudioControlComponent(0);
    __cxa_guard_release(&qword_254108CD8);
  }
  return qword_254108CD0;
}

__n128 re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::VideoAudioControlComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4A988;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::VideoAudioControlComponent::~VideoAudioControlComponent(re::ecs2::VideoAudioControlComponent *this)
{
  void *v2;

  *(_QWORD *)this = &off_24ED57A08;
  v2 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;

  *(_QWORD *)this = &off_24ED57A08;
  v2 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VideoAudioControlComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VideoAudioControlComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VideoAudioControlComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VideoAudioControlComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VideoAudioControlComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VideoAudioControlComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VideoAudioControlComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VideoAudioControlComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VideoAudioControlComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4A9F8;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::VideoAudioControlComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::VideoAudioControlComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::VideoAudioControlComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::VideoAudioControlComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Slice<re::ecs2::VideoAudioControlComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoAudioControlComponent>,re::Slice<re::ecs2::VideoAudioControlComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoAudioControlComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A480;
  *(_DWORD *)(v3 + 28) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4AB10;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108CE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108CE8))
  {
    qword_254108CE0 = re::ecs2::introspect_ChannelAudioComponent(0);
    __cxa_guard_release(&qword_254108CE8);
  }
  return qword_254108CE0;
}

__n128 re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::ChannelAudioComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4AAA0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::ChannelAudioComponent::~ChannelAudioComponent(re::ecs2::ChannelAudioComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ChannelAudioComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 32, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ChannelAudioComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 98, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ChannelAudioComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 54, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ChannelAudioComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 76, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ChannelAudioComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ChannelAudioComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ChannelAudioComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ChannelAudioComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4AB10;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Slice<re::ecs2::ChannelAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ChannelAudioComponent>,re::Slice<re::ecs2::ChannelAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::ChannelAudioComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::doMakeComponent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  re *inited;
  uint64_t *result;

  v2 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 128, 0);
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57DB8;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  inited = (re *)objc_initWeak((id *)(v3 + 72), 0);
  *(_QWORD *)(v2 + 80) = 0;
  result = re::globalAllocators(inited);
  *(_QWORD *)(v2 + 112) = result[2];
  *(_QWORD *)(v2 + 120) = 0;
  *a1 = v2;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4AC28;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108CF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108CF8))
  {
    qword_254108CF0 = re::ecs2::introspect_CustomDeformerComponent(0);
    __cxa_guard_release(&qword_254108CF8);
  }
  return qword_254108CF0;
}

__n128 re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::CustomDeformerComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4ABB8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::CustomDeformerComponent::~CustomDeformerComponent(id *this)
{
  char *v2;

  *this = &off_24ED57DB8;
  v2 = (char *)(this + 4);
  re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::~FramePersistentPtr(this + 9);
  re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::deinit((uint64_t)v2);
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  char *v2;

  *this = &off_24ED57DB8;
  v2 = (char *)(this + 4);
  re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::~FramePersistentPtr(this + 9);
  re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::deinit((uint64_t)v2);
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id *re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED57D60;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::CustomDeformerComponent::CustomDeformerInputs>((re *)"reset", 161, location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<re::ecs2::CustomDeformerComponent::CustomDeformerInputs>(re *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit(a3);
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::CustomDeformerComponent::CustomDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::CustomDeformerComponent::CustomDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, _QWORD **a2)
{
  return re::internal::destroyPersistent<re::ecs2::CustomDeformerComponent::CustomDeformerInputs>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::CustomDeformerComponent::CustomDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED57D60;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::CustomDeformerComponent::CustomDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED57D60;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::CustomDeformerComponent::CustomDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::CustomDeformerComponent::CustomDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

uint64_t re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 120 * v4;
        do
        {
          re::DynamicArray<re::MeshDeformationIndex>::deinit(v3 + 80);
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit(v3 + 40);
          re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit(v3);
          v3 += 120;
          v5 -= 120;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::CustomDeformerComponent::CustomDeformerData::MappedDeformationData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 96 * v4;
        v6 = (id *)(v3 + 40);
        do
        {
          re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::~FramePersistentPtr(v6);
          re::StringID::destroyString((re::StringID *)(v6 - 2));
          re::StringID::destroyString((re::StringID *)(v6 - 4));
          v6 += 12;
          v5 -= 96;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

id *re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED57D08;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<std::unique_ptr<void,std::function<void ()(void *)>>>((re *)"reset", 161, (uint64_t *)location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<std::unique_ptr<void,std::function<void ()(void *)>>>(re *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](a3);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,std::unique_ptr<void,std::function<void ()(void *)>>*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,std::unique_ptr<void,std::function<void ()(void *)>>*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  return re::internal::destroyPersistent<std::unique_ptr<void,std::function<void ()(void *)>>>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,std::unique_ptr<void,std::function<void ()(void *)>>*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED57D08;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,std::unique_ptr<void,std::function<void ()(void *)>>*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED57D08;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<std::unique_ptr<void,std::function<void ()(void *)>>,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,std::unique_ptr<void,std::function<void ()(void *)>>*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomDeformerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomDeformerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomDeformerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomDeformerComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomDeformerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomDeformerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomDeformerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomDeformerComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4AC28;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomDeformerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomDeformerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomDeformerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomDeformerComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Slice<re::ecs2::CustomDeformerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomDeformerComponent>,re::Slice<re::ecs2::CustomDeformerComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomDeformerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

double re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::doMakeComponent(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 32, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED5A500;
  *(_DWORD *)(v3 + 28) = 0;
  *a1 = v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED4AD40;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254108D08);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254108D08))
  {
    qword_254108D00 = re::ecs2::introspect_AmbientAudioComponent(0);
    __cxa_guard_release(&qword_254108D08);
  }
  return qword_254108D00;
}

__n128 re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::AmbientAudioComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED4ACD0;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::AmbientAudioComponent::~AmbientAudioComponent(re::ecs2::AmbientAudioComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::registerCallbacks(_DWORD *a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AmbientAudioComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 32, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AmbientAudioComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 98, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AmbientAudioComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    result = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 54, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AmbientAudioComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription(a1 + 76, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::AmbientAudioComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::AmbientAudioComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::AmbientAudioComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::AmbientAudioComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Slice<re::ecs2::AmbientAudioComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>,re::Slice<re::ecs2::AmbientAudioComponent*>>::Subscription const&,re::Slice<re::ecs2::AmbientAudioComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::AmbientAudioComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED4AD40;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

