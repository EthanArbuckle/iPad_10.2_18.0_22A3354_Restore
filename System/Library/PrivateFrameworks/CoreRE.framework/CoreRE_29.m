void physx::PxsCCDPair::sweepEstimateToi(physx::PxsCCDPair *this, float a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __int128 v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  __int128 v52;
  float v53;
  float v54;
  float v55;
  __int128 v56;
  float v57;
  float v58;
  float v59;
  __int128 v60;
  float v61;
  float v62;
  float v63;
  __int128 v64;
  float v65;
  float v66;
  float v67;
  float v68[3];
  float v69[3];
  float v70[3];
  float v71[3];
  float v72[3];

  physx::PxsCCDPair::updateShapes(this);
  v5 = *((_DWORD *)this + 21);
  v4 = *((_DWORD *)this + 22);
  if (v4 >= v5)
    v6 = *((_QWORD *)this + 3);
  else
    v6 = *((_QWORD *)this + 2);
  if (v4 >= v5)
    v7 = *((_QWORD *)this + 2);
  else
    v7 = *((_QWORD *)this + 3);
  v64 = *(_OWORD *)(v7 + 40);
  v8 = *(float *)(v7 + 60);
  v65 = *(float *)(v7 + 56);
  v66 = v8;
  v67 = *(float *)(v7 + 64);
  v60 = *(_OWORD *)(v7 + 12);
  v9 = *(float *)(v7 + 32);
  v61 = *(float *)(v7 + 28);
  v62 = v9;
  v63 = *(float *)(v7 + 36);
  v10 = v65 - v61;
  v11 = v8 - v9;
  v12 = v67 - v63;
  v18 = *(_OWORD *)(v6 + 40);
  v56 = v18;
  v13 = *(float *)(v6 + 60);
  v57 = *(float *)(v6 + 56);
  v58 = v13;
  v59 = *(float *)(v6 + 64);
  v52 = *(_OWORD *)(v6 + 12);
  v14 = *(float *)(v6 + 32);
  v53 = *(float *)(v6 + 28);
  v54 = v14;
  v55 = *(float *)(v6 + 36);
  v15 = v57 - v53;
  v16 = v13 - v14;
  v17 = v59 - v55;
  LODWORD(v18) = *(_DWORD *)(*((_QWORD *)this + 9) + 92);
  v19 = (float)(v65 - v61) - (float)(v57 - v53);
  v20 = (float)(v67 - v63) - (float)(v59 - v55);
  v21 = *(float *)(v7 + 8) + *(float *)(v6 + 8);
  if (v21 >= a2)
    v21 = a2;
  *((_DWORD *)this + 32) = 0;
  if ((float)((float)((float)((float)(v11 - v16) * (float)(v11 - v16)) + (float)(v19 * v19)) + (float)(v20 * v20)) <= (float)(v21 * v21))
  {
LABEL_46:
    v22 = 3.4028e38;
    goto LABEL_47;
  }
  *(float *)&v18 = fmaxf(*(float *)&v18, 0.0);
  if (v4 <= v5)
    v4 = v5;
  if (v4 == 6)
  {
    v22 = physx::Gu::SweepEstimateAnyShapeHeightfield(v7, v6, (float32x2_t *)&v64, (float32x2_t *)&v56, (float32x2_t *)&v60, (float32x2_t *)&v52, *(double *)&v18, v21);
    goto LABEL_47;
  }
  if (v4 == 5)
  {
    v22 = physx::Gu::SweepEstimateAnyShapeMesh((float32x2_t *)v7, (uint64_t *)v6, (float32x2_t *)&v64, (float32x2_t *)&v56, (float32x2_t *)&v60, (float32x2_t *)&v52, *(double *)&v18);
    goto LABEL_47;
  }
  v23 = *(float *)(v7 + 84);
  v24 = *(float *)(v7 + 88);
  v25 = *(float *)(v7 + 80);
  v26 = *(float *)(v6 + 84);
  v27 = *(float *)(v6 + 88);
  v28 = *(float *)(v6 + 80);
  v29 = (float)(*(float *)&v18 + *(float *)(v7 + 68)) * 1.1;
  v30 = (float)(*(float *)&v18 + *(float *)(v7 + 72)) * 1.1;
  v31 = (float)(*(float *)&v18 + *(float *)(v7 + 76)) * 1.1;
  v32 = *(float *)(v6 + 68) * 1.1;
  v33 = *(float *)(v6 + 72) * 1.1;
  v34 = *(float *)(v6 + 76) * 1.1;
  v35 = vabds_f32(v23, v26);
  v36 = vabds_f32(v24, v27);
  v22 = 0.0;
  if (vabds_f32(v25, v28) > (float)(v29 + v32) || v35 > (float)(v30 + v33) || v36 > (float)(v31 + v34))
  {
    v39 = 0;
    v72[0] = v15 - v10;
    v72[1] = v16 - v11;
    v72[2] = v17 - v12;
    v71[0] = v25 + v29;
    v71[1] = v23 + v30;
    v71[2] = v24 + v31;
    v70[0] = v25 - v29;
    v70[1] = v23 - v30;
    v70[2] = v24 - v31;
    v69[0] = v28 + v32;
    v69[1] = v26 + v33;
    v69[2] = v27 + v34;
    v40 = v26 - v33;
    v22 = 0.0;
    v41 = 1.0;
    v68[0] = v28 - v32;
    v68[1] = v40;
    v68[2] = v27 - v34;
    while (1)
    {
      v42 = v72[v39];
      if (v42 < -0.000001)
        break;
      if (v42 <= 0.000001)
      {
        if (v69[v39] < v70[v39] || v68[v39] > v71[v39])
          goto LABEL_46;
        goto LABEL_43;
      }
      v43 = v68[v39];
      v44 = v71[v39];
      if (v43 > v44)
        goto LABEL_46;
      v48 = v69[v39];
      v49 = v70[v39];
      if (v48 < v49)
      {
        v50 = (float)(v49 - v48) / v42;
        if (v50 > v22)
          v22 = v50;
      }
      if (v44 > v43)
        goto LABEL_38;
LABEL_43:
      if (v22 > v41)
        goto LABEL_46;
      if (++v39 == 3)
        goto LABEL_47;
    }
    v43 = v69[v39];
    v44 = v70[v39];
    if (v43 < v44)
      goto LABEL_46;
    v45 = v71[v39];
    v46 = v68[v39];
    if (v45 < v46)
    {
      v47 = (float)(v45 - v46) / v42;
      if (v47 > v22)
        v22 = v47;
    }
    if (v43 <= v44)
      goto LABEL_43;
LABEL_38:
    v51 = (float)(v44 - v43) / v42;
    if (v51 < v41)
      v41 = v51;
    goto LABEL_43;
  }
LABEL_47:
  *((float *)this + 11) = v22;
}

double physx::PxsRigidBody::advancePrevPoseToToi(float32x2_t *this, double result)
{
  float32x2_t *v2;
  float32_t v4;
  __int128 v5;

  v2 = (float32x2_t *)this[5];
  if (v2[15].f32[1] != 0.0)
  {
    v4 = (float)((float)(1.0 - *(float *)&result) * this[3].f32[0]) + (float)(v2[3].f32[0] * *(float *)&result);
    this[2] = vadd_f32(vmul_n_f32(this[2], 1.0 - *(float *)&result), vmul_n_f32(v2[2], *(float *)&result));
    this[3].f32[0] = v4;
    physx::shdfnd::slerp((float *)this, (float *)v2, (float *)&v5, *(float *)&result);
    result = *(double *)&v5;
    *(_OWORD *)this->f32 = v5;
  }
  return result;
}

void physx::PxsRigidBody::advanceToToi(float32x2_t *this, float a2, float a3, int a4)
{
  float32x2_t v4;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  __float2 v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;

  v4 = this[5];
  if (*(float *)(*(_QWORD *)&v4 + 124) != 0.0)
  {
    if (a4)
    {
      *(float32x2_t *)(*(_QWORD *)&v4 + 16) = this[2];
      *(_DWORD *)(*(_QWORD *)&v4 + 24) = this[3].i32[0];
      *(_OWORD *)*(_QWORD *)&v4 = *(_OWORD *)this->f32;
      v6 = 1.0 - a2;
    }
    else
    {
      v7 = 1.0;
      v8 = 1.0 - a2;
      v9 = (float)((float)(1.0 - a2) * (float)(*(float *)(*(_QWORD *)&v4 + 72) * a3)) + this[3].f32[0];
      *(float32x2_t *)(*(_QWORD *)&v4 + 16) = vadd_f32(vmul_n_f32(vmul_n_f32(*(float32x2_t *)(*(_QWORD *)&v4 + 64), a3), v8), this[2]);
      *(float *)(*(_QWORD *)&v4 + 24) = v9;
      v10 = *(float *)(*(_QWORD *)&v4 + 84) * a3;
      v11 = *(float *)(*(_QWORD *)&v4 + 88) * a3;
      v12 = v8 * (float)(*(float *)(*(_QWORD *)&v4 + 80) * a3);
      v13 = v8 * v10;
      v25 = v8;
      v14 = v8 * v11;
      v15 = sqrtf((float)((float)(v13 * v13) + (float)(v12 * v12)) + (float)(v14 * v14));
      v16 = 0.0;
      v17 = 0.0;
      if (v15 > 1.0e-20)
      {
        v7 = v12 * (float)(1.0 / v15);
        v16 = v13 * (float)(1.0 / v15);
        v17 = v14 * (float)(1.0 / v15);
      }
      v18 = __sincosf_stret(v15 * 0.5);
      v19 = this->f32[1];
      v21 = this[1].f32[0];
      v20 = this[1].f32[1];
      v22 = (float)((float)((float)(v18.__cosval * v19) + (float)(v20 * (float)(v18.__sinval * v16)))
                  + (float)(v21 * (float)(v18.__sinval * v7)))
          - (float)((float)(v18.__sinval * v17) * this->f32[0]);
      v23 = (float)((float)((float)(v18.__cosval * v21) + (float)(v20 * (float)(v18.__sinval * v17)))
                  + (float)(this->f32[0] * (float)(v18.__sinval * v16)))
          - (float)((float)(v18.__sinval * v7) * v19);
      v24 = -(float)(this->f32[0] * (float)(v18.__sinval * v7));
      **(float **)v4.f32 = (float)((float)((float)(v18.__cosval * this->f32[0])
                                         + (float)(v20 * (float)(v18.__sinval * v7)))
                                 + (float)(v19 * (float)(v18.__sinval * v17)))
                         - (float)((float)(v18.__sinval * v16) * v21);
      *(float *)(*(_QWORD *)&v4 + 4) = v22;
      *(float *)(*(_QWORD *)&v4 + 8) = v23;
      *(float *)(*(_QWORD *)&v4 + 12) = (float)((float)(v24 + (float)(v20 * v18.__cosval))
                                                - (float)(v19 * (float)(v18.__sinval * v16)))
                                        - (float)(v21 * (float)(v18.__sinval * v17));
      v6 = v25;
    }
    *(float *)(*(_QWORD *)&this[4] + 36) = fmaxf(v6 * *(float *)(*(_QWORD *)&this[4] + 36), 0.01);
  }
}

uint64_t physx::PxsCCDContext::updateCCDEnd(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v23;

  v1 = this;
  if (*(_DWORD *)(this + 180) == *(_DWORD *)(this + 436) - 1 || !*(_DWORD *)(this + 184))
  {
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      this = pthread_mutex_lock(*(pthread_mutex_t **)(this + 464));
    v2 = *(_QWORD *)(v1 + 192);
    v3 = *(_DWORD *)(v2 + 16 * *(unsigned int *)(v1 + 208) + 8) + (*(_DWORD *)(v1 + 208) << 7);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = i & 0x7F;
        v6 = *(_QWORD *)(v2 + 16 * (i >> 7)) + (v5 << 6);
        v9 = *(_QWORD *)(v6 + 40);
        v7 = (_QWORD *)(v6 + 40);
        v8 = v9;
        v10 = *(_QWORD *)(v9 + 32);
        if (v10 && *(_BYTE *)(v10 + 35))
        {
          v11 = *(unsigned int *)(v1 + 304);
          if ((*(_DWORD *)(v1 + 308) & 0x7FFFFFFFu) <= v11)
          {
            this = physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::growAndPushBack(v1 + 296, v7);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v1 + 296) + 8 * v11) = v8;
            *(_DWORD *)(v1 + 304) = v11 + 1;
          }
        }
        v2 = *(_QWORD *)(v1 + 192);
        v12 = *(_QWORD *)(*(_QWORD *)(v2 + 16 * (i >> 7)) + (v5 << 6) + 40);
        *(_QWORD *)(v12 + 32) = 0;
        *(_BYTE *)(*(_QWORD *)(v12 + 40) + 156) = 0;
      }
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    {
      this = pthread_mutex_unlock(*(pthread_mutex_t **)(v1 + 464));
      v2 = *(_QWORD *)(v1 + 192);
    }
    *(_DWORD *)(v1 + 208) = 0;
    *(_DWORD *)(v2 + 8) = 0;
  }
  *(_DWORD *)(v1 + 256) = 0;
  *(_DWORD *)(*(_QWORD *)(v1 + 240) + 8) = 0;
  v13 = *(_DWORD *)(v1 + 348);
  if (v13 && *(_DWORD *)(v1 + 364))
  {
    this = (uint64_t)memset(*(void **)(v1 + 336), 255, (4 * v13));
    v14 = *(_QWORD *)(v1 + 328);
    v15 = (*(_DWORD *)(v1 + 344) - 1);
    if (*(_DWORD *)(v1 + 344) == 1)
    {
      v23 = 0;
    }
    else
    {
      _X10 = v14 + 128;
      v17 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v17++;
        _X10 += 4;
        --v15;
      }
      while (v15);
      v23 = (*(_DWORD *)(v1 + 344) - 1);
    }
    *(_DWORD *)(v14 + 4 * v23) = -1;
    *(_DWORD *)(v1 + 356) = 0;
    *(_DWORD *)(v1 + 364) = 0;
  }
  ++*(_DWORD *)(v1 + 180);
  return this;
}

void physx::PxsCCDContext::resetContactManagers(physx::PxsCCDContext *this)
{
  uint64_t v1;
  int v2;
  unsigned int *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *((_QWORD *)this + 55);
  v2 = *(_DWORD *)(v1 + 1696);
  v3 = *(unsigned int **)(v1 + 1688);
  v4 = v2 & 0x7FFFFFFF;
  if ((v2 & 0x7FFFFFFF) != 0)
  {
    v5 = *v3;
    if (*v3)
    {
      v6 = 0;
LABEL_7:
      v7 = __clz(__rbit32(v5)) | (32 * v6);
      v8 = (v5 - 1) & v5;
      if (!v8)
      {
        v9 = v6;
        if ((int)v6 + 1 > v4)
          v6 = (v6 + 1);
        else
          v6 = v4;
        v10 = v9 + 1;
        while (v10 < v4)
        {
          v8 = v3[v10++];
          if (v8)
          {
            v6 = (v10 - 1);
            goto LABEL_16;
          }
        }
        v8 = 0;
      }
LABEL_16:
      if (v7 != -1)
      {
        v11 = *(_QWORD *)(v1 + 488);
        v12 = *(_DWORD *)(v1 + 464);
        v13 = *(_DWORD *)(v1 + 456) - 1;
        do
        {
          v14 = *(_QWORD *)(v11 + 8 * (v7 >> v12)) + 120 * (v7 & v13);
          *(_DWORD *)(v14 + 16) &= ~4u;
          *(_QWORD *)(v14 + 64) = 0;
          if (!v8)
            break;
          v15 = (v8 - 1) & v8;
          if (v15)
          {
            v16 = v6;
          }
          else
          {
            v16 = (int)v6 + 1 > v4 ? (v6 + 1) : v4;
            LODWORD(v17) = v6;
            while ((_DWORD)v16 - 1 != (_DWORD)v17)
            {
              v17 = (v17 + 1);
              v15 = v3[v17];
              if (v15)
              {
                v16 = v17;
                goto LABEL_29;
              }
            }
            v15 = 0;
          }
LABEL_29:
          v7 = __clz(__rbit32(v8)) | (32 * v6);
          v8 = v15;
          v6 = v16;
        }
        while (v7 != -1);
      }
    }
    else
    {
      v6 = 0;
      while (v4 - 1 != v6)
      {
        v5 = v3[++v6];
        if (v5)
          goto LABEL_7;
      }
    }
  }
  bzero(v3, (4 * v2));
}

uint64_t physx::PxsCCDContext::updateCCD(physx::PxsCCDContext *this, float a2, physx::PxBaseTask *a3, physx::IG::IslandSim *a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t result;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  int8x8_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x4_t v67;
  int8x16_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  int32x4_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  float v84;
  float v85;
  float v86;
  float v87;
  uint64_t v88;
  int8x8_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t v93;
  int8x16_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  int32x4_t v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  unsigned int v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  float v144;
  uint64_t v145;
  float v146;
  int v147;
  uint64_t v148;
  float v149;
  unsigned int v150;
  uint64_t ***v151;
  physx::PxBaseTask *v152;
  uint64_t *v153;
  int v154;
  _QWORD *v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  unsigned int v173;
  unint64_t *v174;
  unint64_t i;
  __int16 v176;
  unsigned int v177;
  int v178;
  int v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t **v185;
  _DWORD *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  BOOL v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  __int128 *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  unsigned int v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  int v237;
  BOOL v238;
  unsigned int v239;
  uint64_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int j;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  char *v252;
  __int32 v253;
  __int128 v254;
  __int32 v255;
  __int128 v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  float v262;
  int v263;
  float v264;
  int v265;
  float v266;
  _BYTE *v267;
  char *v268;
  int32x2_t *v269;
  float v270;
  int v271;
  physx::PxBaseTask *v272;
  BOOL v273;
  uint64_t v274;
  uint64_t v275;
  __int128 *v276;
  uint64_t v277;
  int v278;
  physx::IG::IslandSim *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  unint64_t *v286;
  uint64_t v287;
  uint64_t v288[2];
  void *__b;
  uint64_t v290;
  uint64_t v291[2];
  void *v292;
  float v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 *v303;
  float v304;
  uint64_t v305;

  v305 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 176) = a5;
  *(_DWORD *)(*((_QWORD *)this + 56) + 16) = 0;
  v11 = *((_QWORD *)this + 55);
  bzero(*(void **)(v11 + 1704), (4 * *(_DWORD *)(v11 + 1712)));
  bzero(*(void **)(v11 + 1720), (4 * *(_DWORD *)(v11 + 1728)));
  *(_DWORD *)(v11 + 1752) = 0;
  *(_OWORD *)(v11 + 1736) = 0u;
  if (!*((_DWORD *)this + 45))
  {
    physx::PxsCCDContext::resetContactManagers(this);
    if (!*((_DWORD *)this + 45))
    {
      if (a6)
        goto LABEL_5;
LABEL_16:
      *((_DWORD *)this + 46) = 0;
      return physx::PxsCCDContext::updateCCDEnd((uint64_t)this);
    }
  }
  if (!a6 || !*((_DWORD *)this + 46))
    goto LABEL_16;
LABEL_5:
  *((_DWORD *)this + 46) = 0;
  v12 = *((_QWORD *)this + 55);
  v13 = (float *)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v12 + 440));
  if (!v13)
  {
    v14 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpThreadContext>::getName() [T = physx::PxcNpThreadContext]";
    else
      v15 = "<allocation names disabled>";
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v14 + 24) + 16))(v14 + 24, 7335, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v16)
    {
      v17 = v16;
      v16 = (v16 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v16 - 8) = v16 - v17;
    }
    physx::PxcNpThreadContext::PxcNpThreadContext(v16, *(_QWORD *)(v12 + 448));
  }
  v279 = a4;
  v272 = a3;
  v18 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 53) = v13;
  v13[1800] = a2;
  *((_DWORD *)this + 96) = 0;
  v19 = *((_QWORD *)this + 46);
  *(_DWORD *)(v19 + 8) = 0;
  *((_DWORD *)this + 100) = 0;
  *((_DWORD *)this + 76) = 0;
  *((_DWORD *)this + 58) = 0;
  *(_DWORD *)(v18 + 8) = 0;
  v20 = *((_QWORD *)this + 55);
  v21 = *(_DWORD *)(v20 + 1680) & 0x7FFFFFFF;
  if (!(_DWORD)v21)
    goto LABEL_157;
  v22 = *(unsigned int **)(v20 + 1672);
  v23 = *v22;
  if (!*v22)
  {
    v24 = 0;
    while (v21 - 1 != v24)
    {
      v23 = v22[++v24];
      if (v23)
        goto LABEL_20;
    }
    goto LABEL_157;
  }
  v24 = 0;
LABEL_20:
  v26 = __clz(__rbit32(v23)) | (32 * v24);
  v27 = (v23 - 1) & v23;
  if (!v27)
  {
    v28 = v24;
    if ((int)v24 + 1 > v21)
      v24 = (v24 + 1);
    else
      v24 = v21;
    v29 = v28 + 1;
    while (v29 < v21)
    {
      v27 = v22[v29++];
      if (v27)
      {
        v24 = (v29 - 1);
        goto LABEL_29;
      }
    }
    v27 = 0;
  }
LABEL_29:
  if (v26 == -1)
  {
LABEL_157:
    physx::PxsCCDContext::updateCCDEnd((uint64_t)this);
    v155 = (_QWORD *)*((_QWORD *)this + 53);
    v156 = *(_QWORD *)(*((_QWORD *)this + 55) + 440);
    pthread_mutex_lock((pthread_mutex_t *)(v156 + 8));
    *v155 = *(_QWORD *)v156;
    *(_QWORD *)v156 = v155;
    return pthread_mutex_unlock((pthread_mutex_t *)(v156 + 8));
  }
  v271 = 0;
  v30 = 0;
  v268 = (char *)this + 240;
  v269 = (int32x2_t *)((char *)this + 312);
  v31 = *((_QWORD *)this + 55);
  v252 = (char *)this + 216;
  do
  {
    v32 = *(_QWORD *)(*(_QWORD *)(v31 + 488) + 8 * (v26 >> *(_DWORD *)(v31 + 464)));
    v33 = (*(_DWORD *)(v31 + 456) - 1) & v26;
    v34 = v32 + 120 * v33;
    v36 = *(_BYTE *)(v34 + 16);
    v35 = (_BYTE *)(v34 + 16);
    if ((v36 & 2) == 0)
      goto LABEL_32;
    v39 = *(_WORD *)(v32 + 120 * v33 + 80);
    if ((v39 & 0x1000) == 0 || (v39 & 0x18) == 0x18)
      goto LABEL_32;
    v40 = (v39 & 0x50) != 0 && *(_BYTE *)(*(_QWORD *)(v32 + 120 * v33 + 40) + 156) != 0;
    v43 = *(_QWORD *)(v32 + 120 * v33 + 32);
    if (!*(_BYTE *)(v43 + 156) && !v40)
      goto LABEL_32;
    v273 = v30;
    v45 = v32 + 120 * v33;
    v46 = *(_QWORD *)(v45 + 56);
    v45 += 56;
    v276 = (__int128 *)(v32 + 120 * v33);
    v277 = v46;
    v280 = *(_QWORD *)(v45 - 16);
    v47 = *(float **)(v45 - 8);
    v285 = *v276;
    v284 = *((_QWORD *)v276 + 4);
    v274 = v45 - 8;
    v275 = v45;
    if (!*((_DWORD *)this + 91))
    {
      v281 = 0;
      goto LABEL_81;
    }
    v48 = *((_DWORD *)this + 87);
    v49 = physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(v43, (uint64_t)v47);
    v50 = v48 - 1;
    v51 = *((_QWORD *)this + 42);
    v52 = *(unsigned int *)(v51 + 4 * (v49 & (v48 - 1)));
    v267 = v35;
    if ((_DWORD)v52 == -1)
    {
LABEL_61:
      v55 = v50;
      v53 = 0;
    }
    else
    {
      while (1)
      {
        v53 = (_QWORD *)(*((_QWORD *)this + 40) + 24 * v52);
        if (*v53 == v284 && v53[1] == (_QWORD)v47)
          break;
        v52 = *(unsigned int *)(*((_QWORD *)this + 41) + 4 * v52);
        if ((_DWORD)v52 == -1)
          goto LABEL_61;
      }
      v55 = v50;
    }
    v56 = *(unsigned int *)(v51
                          + 4
                          * (physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(v280, v277) & v55));
    if ((_DWORD)v56 == -1)
    {
      v57 = 0;
      v35 = v267;
    }
    else
    {
      v35 = v267;
      while (1)
      {
        v57 = *((_QWORD *)this + 40) + 24 * v56;
        if (*(_QWORD *)v57 == v280 && *(_QWORD *)(v57 + 8) == v277)
          break;
        v56 = *(unsigned int *)(*((_QWORD *)this + 41) + 4 * v56);
        if ((_DWORD)v56 == -1)
        {
          v57 = 0;
          break;
        }
      }
    }
    if (!v53)
    {
      v59 = 0;
      if (!v57)
        goto LABEL_76;
LABEL_75:
      v57 = *(_QWORD *)(v57 + 16);
      goto LABEL_76;
    }
    v59 = v53[2];
    if (v57)
      goto LABEL_75;
LABEL_76:
    if (v59)
    {
      v60 = *(float *)(v59 + 8);
      v270 = *(float *)(v59 + 56) - *(float *)(v59 + 28);
      v61 = *(float *)(v59 + 60) - *(float *)(v59 + 32);
      v62 = *(float *)(v59 + 64) - *(float *)(v59 + 36);
      goto LABEL_85;
    }
    v281 = v57;
LABEL_81:
    v59 = physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::pushBack((uint64_t)v268);
    v291[0] = v284;
    v291[1] = (uint64_t)v47;
    physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::insert(v269, v291, v59, v63);
    *(_QWORD *)(v59 + 96) = v47;
    *(_QWORD *)(v59 + 104) = v284;
    *(_QWORD *)v59 = v47 + 10;
    physx::PxsCCDShape::getAbsPose((float *)&v294, v59, v285);
    if ((_QWORD)v285)
    {
      physx::PxsCCDShape::getLastCCDAbsPose((float *)&v302, v47, v285);
      v75 = *((float *)&v295 + 1);
      v76 = *(float *)&v295;
      v77 = *((float *)&v303 + 1);
      v78 = *(float *)&v303;
      v68.i32[0] = DWORD2(v295);
      v79 = v304;
      v256 = v302;
      v263 = DWORD1(v294);
      v265 = v294;
      v67.i32[0] = HIDWORD(v294);
      v259 = HIDWORD(v294);
      LODWORD(v69) = DWORD2(v294);
      v261 = DWORD2(v294);
    }
    else
    {
      v67.i32[0] = v294;
      v302 = v294;
      LODWORD(v70) = HIDWORD(v294);
      LODWORD(v69) = DWORD2(v294);
      v77 = *((float *)&v295 + 1);
      v78 = *(float *)&v295;
      v259 = HIDWORD(v294);
      v261 = DWORD2(v294);
      v263 = DWORD1(v294);
      v265 = v294;
      v256 = v294;
      v79 = *((float *)&v295 + 2);
      v68.i32[0] = DWORD2(v295);
      v75 = *((float *)&v295 + 1);
      v76 = *(float *)&v295;
      LODWORD(v303) = v295;
    }
    v255 = v68.i32[0];
    v62 = *(float *)v68.i32 - v79;
    v80 = physx::Gu::computeBoundsWithCCDThreshold((float *)&v292, (float *)&__b, (uint64_t)(v47 + 10), (uint64_t)&v294, 0, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74);
    v270 = v76 - v78;
    v81 = *(float *)&v292 - (float)(v76 - v78);
    v61 = v75 - v77;
    v60 = v80;
    v82 = v293 - v62;
    *(float *)(v59 + 84) = *((float *)&v292 + 1) - (float)(v75 - v77);
    *(float *)(v59 + 88) = v82;
    *(_QWORD *)(v59 + 68) = __b;
    *(_DWORD *)(v59 + 76) = v290;
    *(float *)(v59 + 80) = v81;
    *(float *)(v59 + 8) = v80;
    *(_OWORD *)(v59 + 12) = v256;
    *(float *)(v59 + 28) = v78;
    *(float *)(v59 + 32) = v77;
    *(float *)(v59 + 36) = v79;
    *(_DWORD *)(v59 + 40) = v265;
    *(_DWORD *)(v59 + 44) = v263;
    *(_DWORD *)(v59 + 48) = v261;
    *(_DWORD *)(v59 + 52) = v259;
    *(float *)(v59 + 56) = v76;
    *(float *)(v59 + 60) = v75;
    *(_DWORD *)(v59 + 64) = v255;
    *(_DWORD *)(v59 + 92) = 0;
    v83 = 2 * *(_DWORD *)(v32 + 120 * v33 + 104);
    *(_DWORD *)(v59 + 112) = *(_DWORD *)(*(_QWORD *)(**((_QWORD **)v279 + 76)
                                                   + 8 * (v83 / *(_DWORD *)(*((_QWORD *)v279 + 76) + 24)))
                                       + 4 * (v83 % *(_DWORD *)(*((_QWORD *)v279 + 76) + 24)));
    v57 = v281;
LABEL_85:
    if (v57)
    {
      v84 = *(float *)(v57 + 8);
      v85 = *(float *)(v57 + 56) - *(float *)(v57 + 28);
      v86 = *(float *)(v57 + 60) - *(float *)(v57 + 32);
      v282 = v57;
      v87 = *(float *)(v57 + 64) - *(float *)(v57 + 36);
    }
    else
    {
      v262 = v60;
      v264 = v62;
      v266 = v61;
      v88 = physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::pushBack((uint64_t)v268);
      *(_QWORD *)(v88 + 96) = v277;
      *(_QWORD *)(v88 + 104) = v280;
      v283 = v277 + 40;
      *(_QWORD *)v88 = v277 + 40;
      v288[0] = v280;
      v288[1] = v277;
      physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::insert(v269, v288, v88, v89);
      physx::PxsCCDShape::getAbsPose((float *)&v294, v88, *((uint64_t *)&v285 + 1));
      if (*((_QWORD *)&v285 + 1))
      {
        physx::PxsCCDShape::getLastCCDAbsPose((float *)&v302, *(float **)(v88 + 96), *((uint64_t *)&v285 + 1));
        v102 = *((float *)&v295 + 1);
        v101 = *(float *)&v295;
        v103 = *((float *)&v303 + 1);
        v104 = *(float *)&v303;
        v94.i32[0] = DWORD2(v295);
        v105 = v304;
        v254 = v302;
        LODWORD(v95) = DWORD1(v294);
        v278 = v294;
        v258 = DWORD2(v294);
        v260 = DWORD1(v294);
        v93.i32[0] = HIDWORD(v294);
        v257 = HIDWORD(v294);
      }
      else
      {
        v93.i32[0] = v294;
        v302 = v294;
        LODWORD(v96) = HIDWORD(v294);
        LODWORD(v95) = DWORD2(v294);
        v103 = *((float *)&v295 + 1);
        v104 = *(float *)&v295;
        v257 = HIDWORD(v294);
        v258 = DWORD2(v294);
        v260 = DWORD1(v294);
        v278 = v294;
        v254 = v294;
        v105 = *((float *)&v295 + 2);
        v94.i32[0] = DWORD2(v295);
        v102 = *((float *)&v295 + 1);
        v101 = *(float *)&v295;
        LODWORD(v303) = v295;
      }
      v253 = v94.i32[0];
      v85 = v101 - v104;
      v86 = v102 - v103;
      v87 = *(float *)v94.i32 - v105;
      v106 = physx::Gu::computeBoundsWithCCDThreshold((float *)&v292, (float *)&__b, v283, (uint64_t)&v294, 0, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100);
      v107 = *(float *)&v292 - (float)(v101 - v104);
      v108 = v293 - v87;
      *(float *)(v88 + 84) = *((float *)&v292 + 1) - (float)(v102 - v103);
      *(float *)(v88 + 88) = v108;
      *(_QWORD *)(v88 + 68) = __b;
      *(_DWORD *)(v88 + 76) = v290;
      *(float *)(v88 + 80) = v107;
      *(float *)(v88 + 8) = v106;
      *(_OWORD *)(v88 + 12) = v254;
      *(float *)(v88 + 28) = v104;
      *(float *)(v88 + 32) = v103;
      *(float *)(v88 + 36) = v105;
      *(_DWORD *)(v88 + 40) = v278;
      *(_DWORD *)(v88 + 44) = v260;
      *(_DWORD *)(v88 + 48) = v258;
      *(_DWORD *)(v88 + 52) = v257;
      *(float *)(v88 + 56) = v101;
      *(float *)(v88 + 60) = v102;
      v84 = v106;
      *(_DWORD *)(v88 + 64) = v253;
      *(_DWORD *)(v88 + 92) = 0;
      v109 = (2 * *(_DWORD *)(v32 + 120 * v33 + 104)) | 1;
      v282 = v88;
      *(_DWORD *)(v88 + 112) = *(_DWORD *)(*(_QWORD *)(**((_QWORD **)v279 + 76)
                                                     + 8 * (v109 / *(_DWORD *)(*((_QWORD *)v279 + 76) + 24)))
                                         + 4 * (v109 % *(_DWORD *)(*((_QWORD *)v279 + 76) + 24)));
      v62 = v264;
      v61 = v266;
      v60 = v262;
    }
    v110 = 0;
    v302 = v285;
    v111 = 1;
    do
    {
      v112 = v111;
      v113 = *((_QWORD *)&v302 + v110);
      if (v113)
      {
        v114 = *(_QWORD *)(v113 + 32);
        if (v114)
        {
          v115 = *(_DWORD *)(v114 + 60);
        }
        else
        {
          v116 = *((unsigned int *)this + 52);
          v117 = *((_QWORD *)this + 24);
          v118 = *(_DWORD *)(v117 + 16 * v116 + 8);
          if (v118 == 128)
          {
            v119 = v116 + 1;
            if ((_DWORD)v116 + 1 == *((_DWORD *)this + 50))
            {
              v120 = physx::shdfnd::Foundation::mInstance;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
                v121 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody, "
                       "128>::Block>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::Block]";
              else
                v121 = "<allocation names disabled>";
              *(_QWORD *)&v294 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v120 + 24) + 16))(v120 + 24, 0x2000, v121, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 260);
              DWORD2(v294) = 0;
              v122 = *((unsigned int *)this + 50);
              if ((*((_DWORD *)this + 51) & 0x7FFFFFFFu) <= v122)
              {
                physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo>>::growAndPushBack((uint64_t)this + 192, &v294);
              }
              else
              {
                *(_OWORD *)(*((_QWORD *)this + 24) + 16 * v122) = v294;
                ++*((_DWORD *)this + 50);
              }
              v117 = *((_QWORD *)this + 24);
              v119 = *((_DWORD *)this + 52) + 1;
            }
            v118 = 0;
            *((_DWORD *)this + 52) = v119;
            v116 = v119;
            *(_DWORD *)(v117 + 16 * v119 + 8) = 0;
          }
          else
          {
            v119 = *((_DWORD *)this + 52);
          }
          v115 = 0;
          v123 = v117 + 16 * v116;
          *(_DWORD *)(v123 + 8) = v118 + 1;
          v114 = *(_QWORD *)v123 + ((unint64_t)v118 << 6);
          *(_QWORD *)(v113 + 32) = v114;
          *(_WORD *)(v114 + 32) = v118 + ((_WORD)v119 << 7);
          *(_DWORD *)(v114 + 36) = 1065353216;
          *(_BYTE *)(v114 + 35) = 0;
          *(_QWORD *)(v114 + 48) = 0;
          *(_QWORD *)(v114 + 56) = 0;
          *(_QWORD *)(v114 + 40) = v113;
        }
        *(_BYTE *)(v114 + 34) = 0;
        *(_DWORD *)(v114 + 60) = v115 + 1;
      }
      v111 = 0;
      v110 = 1;
    }
    while ((v112 & 1) != 0);
    v124 = v284;
    if ((_QWORD)v285
      && *((_QWORD *)&v285 + 1)
      && *(float *)(*(_QWORD *)(v285 + 40) + 124) != 0.0
      && *(float *)(*(_QWORD *)(*((_QWORD *)&v285 + 1) + 40) + 124) != 0.0)
    {
      v125 = *(_QWORD **)(*(_QWORD *)(v285 + 32) + 48);
      if (v125)
      {
        while (*v125 != *(_QWORD *)(*((_QWORD *)&v285 + 1) + 32))
        {
          v125 = (_QWORD *)v125[1];
          if (!v125)
            goto LABEL_116;
        }
      }
      else
      {
LABEL_116:
        v126 = (_QWORD *)physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::pushBack((uint64_t)v252);
        v127 = (_QWORD *)physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::pushBack((uint64_t)v252);
        v124 = v284;
        v128 = *(_QWORD *)(*((_QWORD *)&v285 + 1) + 32);
        *v126 = v128;
        v129 = *(_QWORD *)(v285 + 32);
        *v127 = v129;
        v126[1] = *(_QWORD *)(v129 + 48);
        *(_QWORD *)(v129 + 48) = v126;
        v127[1] = *(_QWORD *)(v128 + 48);
        *(_QWORD *)(v128 + 48) = v127;
      }
    }
    if (*(float *)(*(_QWORD *)(v285 + 40) + 124) == 0.0
      && (!*((_QWORD *)&v285 + 1) || *(float *)(*(_QWORD *)(*((_QWORD *)&v285 + 1) + 40) + 124) == 0.0))
    {
      ++v271;
    }
    v130 = *((unsigned int *)this + 96);
    v19 = *((_QWORD *)this + 46);
    v131 = *(_DWORD *)(v19 + 16 * v130 + 8);
    if (v131 == 128)
    {
      v132 = v130 + 1;
      if ((_DWORD)v130 + 1 == *((_DWORD *)this + 94))
      {
        v133 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v134 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::"
                 "Block>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::Block]";
        else
          v134 = "<allocation names disabled>";
        *(_QWORD *)&v294 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v133 + 24) + 16))(v133 + 24, 17408, v134, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 260);
        DWORD2(v294) = 0;
        v135 = *((unsigned int *)this + 94);
        if ((*((_DWORD *)this + 95) & 0x7FFFFFFFu) <= v135)
        {
          physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo>>::growAndPushBack((uint64_t)this + 368, &v294);
        }
        else
        {
          *(_OWORD *)(*((_QWORD *)this + 46) + 16 * v135) = v294;
          ++*((_DWORD *)this + 94);
        }
        v19 = *((_QWORD *)this + 46);
        v132 = *((_DWORD *)this + 96) + 1;
        v124 = v284;
      }
      v131 = 0;
      *((_DWORD *)this + 96) = v132;
      v130 = v132;
      *(_DWORD *)(v19 + 16 * v132 + 8) = 0;
    }
    v136 = (uint64_t *)(v19 + 16 * v130);
    *((_DWORD *)v136 + 2) = v131 + 1;
    v137 = *v136;
    v138 = v137 + 136 * v131;
    *(_OWORD *)v138 = v285;
    *(_QWORD *)(v138 + 16) = v59;
    *(_QWORD *)(v138 + 24) = v282;
    if ((*(_BYTE *)(v124 + 28) & 8) != 0)
      LOBYTE(v139) = 1;
    else
      v139 = (*(unsigned __int8 *)(v280 + 28) >> 3) & 1;
    v140 = v137 + 136 * v131;
    *(_BYTE *)(v140 + 132) = v139;
    *(_DWORD *)(v140 + 44) = 2139095039;
    v141 = *(_DWORD *)(*(_QWORD *)v274 + 40);
    *(_DWORD *)(v140 + 84) = v141;
    v142 = *(_DWORD *)(*(_QWORD *)v275 + 40);
    *(_DWORD *)(v140 + 88) = v142;
    *(_QWORD *)(v140 + 72) = v276;
    *(_DWORD *)(v140 + 80) = -1;
    *(_BYTE *)(v140 + 92) = 0;
    *(_DWORD *)(v140 + 96) = -1;
    *(_BYTE *)(v140 + 93) = *v35 & 1;
    *(_DWORD *)(v140 + 120) = 0;
    v143 = *(_QWORD *)(v285 + 40);
    if ((*(_BYTE *)(v143 + 28) & 0x40) != 0)
    {
      v144 = *(float *)(v143 + 128);
      if (!*((_QWORD *)&v285 + 1))
        goto LABEL_139;
    }
    else
    {
      v144 = 3.4028e38;
      if (!*((_QWORD *)&v285 + 1))
        goto LABEL_139;
    }
    v145 = *(_QWORD *)(*((_QWORD *)&v285 + 1) + 40);
    if ((*(_BYTE *)(v145 + 28) & 0x40) == 0)
    {
LABEL_139:
      v146 = 3.4028e38;
      goto LABEL_141;
    }
    v146 = *(float *)(v145 + 128);
LABEL_141:
    if (v144 >= v146)
      v144 = v146;
    *(float *)(v137 + 136 * v131 + 124) = v144;
    v31 = *((_QWORD *)this + 55);
    if (v141 >= v142)
      v147 = v142;
    else
      v147 = v141;
    if (v141 <= v142)
      v141 = v142;
    v148 = v31 + 28 * v147 + 4 * v141;
    ++*(_DWORD *)(v148 + 2132);
    if (!v273)
    {
      v149 = v60 + v84;
      if ((float)(v60 + v84) >= *((float *)this + 118))
        v149 = *((float *)this + 118);
      v30 = (float)((float)((float)((float)(v61 - v86) * (float)(v61 - v86))
                          + (float)((float)(v270 - v85) * (float)(v270 - v85)))
                  + (float)((float)(v62 - v87) * (float)(v62 - v87))) >= (float)(v149 * v149);
LABEL_32:
      if (!v27)
        break;
      goto LABEL_33;
    }
    if (!v27)
      goto LABEL_155;
    v30 = 1;
LABEL_33:
    v37 = (v27 - 1) & v27;
    if (v37)
    {
      v38 = v24;
    }
    else
    {
      v41 = *(_DWORD *)(v20 + 1680) & 0x7FFFFFFF;
      if ((int)v24 + 1 > v41)
        v38 = (v24 + 1);
      else
        v38 = v41;
      LODWORD(v42) = v24;
      while ((_DWORD)v38 - 1 != (_DWORD)v42)
      {
        v42 = (v42 + 1);
        v37 = *(_DWORD *)(*(_QWORD *)(v20 + 1672) + 4 * v42);
        if (v37)
        {
          v38 = v42;
          goto LABEL_47;
        }
      }
      v37 = 0;
    }
LABEL_47:
    v26 = __clz(__rbit32(v27)) | (32 * v24);
    v24 = v38;
    v27 = v37;
  }
  while (v26 != -1);
  if (!v30)
    goto LABEL_157;
LABEL_155:
  v150 = *(_DWORD *)(v19 + 16 * *((unsigned int *)this + 96) + 8) + (*((_DWORD *)this + 96) << 7);
  if ((*((_DWORD *)this + 101) & 0x7FFFFFFFu) >= v150)
  {
    v152 = v272;
    v153 = (uint64_t *)((char *)this + 192);
    v151 = (uint64_t ***)((char *)this + 392);
    v154 = v271;
    if (v150)
      goto LABEL_159;
  }
  else
  {
    v151 = (uint64_t ***)((char *)this + 392);
    physx::shdfnd::Array<physx::PxsCCDPair *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::recreate((uint64_t)this + 392, v150);
    v152 = v272;
    v153 = (uint64_t *)((char *)this + 192);
    v154 = v271;
LABEL_159:
    v157 = 0;
    do
    {
      v158 = *(_QWORD *)(*((_QWORD *)this + 46) + 16 * (v157 >> 7)) + 136 * (v157 & 0x7F);
      *(_QWORD *)&v294 = v158;
      v159 = *((unsigned int *)this + 100);
      if ((*((_DWORD *)this + 101) & 0x7FFFFFFFu) <= v159)
      {
        physx::shdfnd::Array<physx::PxsCCDPair *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::growAndPushBack((uint64_t)v151, &v294);
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)this + 49) + 8 * v159) = v158;
        *((_DWORD *)this + 100) = v159 + 1;
      }
      ++v157;
    }
    while (v150 != v157);
  }
  v160 = *((_QWORD *)this + 56);
  v161 = v150 | (v150 >> 1) | ((v150 | (v150 >> 1)) >> 2);
  v162 = v161 | (v161 >> 4) | ((v161 | (v161 >> 4)) >> 8);
  v163 = (v162 | HIWORD(v162)) + 1;
  if ((*(_DWORD *)(v160 + 20) & 0x7FFFFFFFu) < v163)
    physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(v160, v163);
  v164 = *((unsigned int *)this + 52);
  v165 = *((_QWORD *)this + 24);
  v166 = *(_DWORD *)(v165 + 16 * v164 + 8);
  v167 = (v166 + ((_DWORD)v164 << 7));
  if (v166 + ((_DWORD)v164 << 7))
  {
    v168 = 0;
    do
    {
      v169 = *(_QWORD *)(v165 + 16 * (v168 >> 7)) + ((unint64_t)(v168 & 0x7F) << 6);
      v170 = *(_QWORD *)(*(_QWORD *)(v169 + 40) + 40);
      *(_QWORD *)v169 = *(_QWORD *)(v170 + 64);
      *(_DWORD *)(v169 + 8) = *(_DWORD *)(v170 + 72);
      *(_QWORD *)(v169 + 16) = *(_QWORD *)(v170 + 80);
      *(_DWORD *)(v169 + 24) = *(_DWORD *)(v170 + 88);
      ++v168;
    }
    while ((_DWORD)v167 != v168);
  }
  __b = 0;
  v290 = 0;
  LODWORD(v294) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)&__b, v167, &v294);
  v286 = 0;
  v287 = 0;
  if ((_DWORD)v167)
    physx::shdfnd::Array<physx::PxsCCDBody const*,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody const*>>::recreate((uint64_t)&v286, v167);
  LODWORD(v287) = v167;
  v171 = (uint64_t *)((char *)this + 280);
  *((_DWORD *)this + 72) = 0;
  if ((*((_DWORD *)this + 73) & 0x7FFFFFFFu) < (int)v167 + 1)
    physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::recreate((uint64_t)this + 280, v167 + 1);
  *((_DWORD *)this + 72) = v167 + 1;
  if ((_DWORD)v167)
  {
    memset_pattern16(__b, &unk_2261A6A20, 4 * (v167 - 1) + 4);
    v172 = 0;
    v173 = 0;
    v174 = v286;
    do
    {
      if (*((_DWORD *)__b + v172) == 0xFFFF)
      {
        i = *(_QWORD *)(*v153 + 16 * (v172 >> 7)) + ((unint64_t)(v172 & 0x7F) << 6);
        if (*(float *)(*(_QWORD *)(*(_QWORD *)(i + 40) + 40) + 124) != 0.0)
        {
          if (*(_DWORD *)(i + 60))
          {
            v176 = 0;
            *((_DWORD *)__b + v172) = v173;
            *v174 = i;
            v177 = 1;
            do
            {
              if (--v177 <= 1)
                v178 = 1;
              else
                v178 = v177;
              v179 = v178 - 1;
              v180 = *(unint64_t **)(i + 48);
              for (i = v174[v179]; v180; v180 = (unint64_t *)v180[1])
              {
                v181 = *v180;
                v182 = *(unsigned __int16 *)(*v180 + 32);
                if (*((_DWORD *)__b + v182) == 0xFFFF)
                {
                  *((_DWORD *)__b + v182) = v173;
                  v174[v177++] = v181;
                  i = *v180;
                  ++v176;
                }
              }
            }
            while (v177);
            *(_WORD *)(*v171 + 2 * v173++) = v176 + 1;
          }
        }
      }
      ++v172;
    }
    while (v172 != v167);
  }
  else
  {
    v173 = 0;
  }
  v183 = v173 + v154;
  if (v173 < v173 + v154)
    memset_pattern16((void *)(*v171 + 2 * v173), &unk_2261A6A30, 2 * (v154 - 1) + 2);
  *((_DWORD *)this + 104) = 0;
  LODWORD(v294) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 408, v173 + v154, &v294);
  v184 = *((unsigned int *)this + 100);
  if ((_DWORD)v184)
  {
    v185 = *v151;
    v186 = __b;
    v187 = *((_QWORD *)this + 51);
    do
    {
      v188 = *v185;
      v189 = **v185;
      if (v189 && *(float *)(*(_QWORD *)(v189 + 40) + 124) != 0.0)
        v190 = v186[*(unsigned __int16 *)(*(_QWORD *)(v189 + 32) + 32)];
      else
        v190 = -1;
      v191 = v188[1];
      if (v191 && *(float *)(*(_QWORD *)(v191 + 40) + 124) != 0.0)
        v192 = v186[*(unsigned __int16 *)(*(_QWORD *)(v191 + 32) + 32)];
      else
        v192 = -1;
      if (v190 >= v192)
        v190 = v192;
      v193 = v190 == -1;
      if (v190 == -1)
        v190 = v173;
      if (v193)
        ++v173;
      *((_DWORD *)v188 + 20) = v190;
      ++*(_DWORD *)(v187 + 4 * v190);
      ++v185;
      --v184;
    }
    while (v184);
  }
  if (v183 != -1)
  {
    v194 = 0;
    v195 = 0;
    v196 = *v171;
    do
    {
      v197 = *(unsigned __int16 *)(v196 + 2 * (unsigned __int16)v194);
      *(_WORD *)(v196 + 2 * (unsigned __int16)v194) = v195;
      v195 += v197;
      ++v194;
    }
    while (v183 + 1 > (unsigned __int16)v194);
  }
  *((_DWORD *)this + 68) = 0;
  if ((*((_DWORD *)this + 69) & 0x7FFFFFFFu) < v167)
    physx::shdfnd::Array<physx::PxsCCDBody *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody *>>::recreate((uint64_t)this + 264, v167);
  *((_DWORD *)this + 68) = v167;
  v198 = *((unsigned int *)this + 52);
  v199 = *((_QWORD *)this + 24);
  if (*(_DWORD *)(v199 + 16 * v198 + 8) + ((_DWORD)v198 << 7))
  {
    v200 = 0;
    do
    {
      v201 = *(_QWORD *)(v199 + 16 * (v200 >> 7)) + ((unint64_t)(v200 & 0x7F) << 6);
      v202 = *((unsigned int *)__b + *(unsigned __int16 *)(v201 + 32));
      if ((_DWORD)v202 != 0xFFFF)
      {
        v203 = *(unsigned __int16 *)(*v171 + 2 * v202);
        *(_WORD *)(*v171 + 2 * v202) = v203 + 1;
        *(_QWORD *)(*((_QWORD *)this + 33) + 8 * v203) = v201;
        v199 = *v153;
      }
      ++v200;
    }
    while (v200 < *(_DWORD *)(v199 + 16 * v198 + 8) + ((_DWORD)v198 << 7));
  }
  *((_DWORD *)this + 36) = 1;
  *((_QWORD *)this + 17) = v152;
  if (v152)
  {
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)v152 + 32))(v152);
    *((_QWORD *)this + 16) = *(_QWORD *)(*((_QWORD *)this + 17) + 16);
  }
  *((_DWORD *)this + 22) = 1;
  *((_QWORD *)this + 10) = (char *)this + 112;
  (*(void (**)(char *))(*((_QWORD *)this + 14) + 32))((char *)this + 112);
  v204 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 9) = *(_QWORD *)(*((_QWORD *)this + 10) + 16);
  *((_DWORD *)this + 8) = 1;
  *((_QWORD *)this + 3) = (char *)this + 56;
  (*(void (**)(char *))(v204 + 32))((char *)this + 56);
  *((_QWORD *)this + 2) = *(_QWORD *)(*((_QWORD *)this + 3) + 16);
  v205 = *((_QWORD *)this + 49);
  v206 = *((_DWORD *)this + 100);
  LOBYTE(v293) = 0;
  v292 = &v294;
  *(_QWORD *)((char *)&v302 + 4) = 0x2000000000;
  v303 = &v294;
  LOBYTE(v304) = 0;
  v207 = v206 - 1;
  if (v206 - 1 >= 1)
  {
    v208 = 0;
    v300 = 0u;
    v301 = 0u;
    v298 = 0u;
    v299 = 0u;
    v296 = 0u;
    v297 = 0u;
    v209 = &v294;
    v294 = 0u;
    v295 = 0u;
    while (1)
    {
      if (v207 <= v208)
        goto LABEL_257;
      if ((v207 - v208) <= 4)
      {
        v230 = v208;
        v231 = v208 + 1;
        v232 = v205 + 8 + 8 * v208;
        do
        {
          v233 = 0;
          v234 = v230++;
          v235 = v234;
          do
          {
            if (*(_DWORD *)(*(_QWORD *)(v232 + 8 * v233) + 80) < *(_DWORD *)(*(_QWORD *)(v205 + 8 * v235) + 80))
              v235 = v231 + v233;
            ++v233;
          }
          while (v234 + v233 < v207);
          if (v235 != (_DWORD)v234)
          {
            v236 = *(_QWORD *)(v205 + 8 * v235);
            *(_QWORD *)(v205 + 8 * v235) = *(_QWORD *)(v205 + 8 * v234);
            *(_QWORD *)(v205 + 8 * v234) = v236;
          }
          ++v231;
          v232 += 8;
        }
        while (v230 != v207);
LABEL_257:
        v237 = DWORD1(v302);
        if (!DWORD1(v302))
        {
          if (LOBYTE(v304))
            v238 = v209 == 0;
          else
            v238 = 1;
          if (!v238)
          {
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v209);
            if (LOBYTE(v293))
              physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v292, (char *)v292);
          }
          break;
        }
        --DWORD1(v302);
        v207 = *((_DWORD *)v209 + (v237 - 1));
        DWORD1(v302) = v237 - 2;
        v208 = *((_DWORD *)v209 + (v237 - 2));
      }
      else
      {
        v210 = v208 + v207;
        if (v208 + v207 < 0 != __OFADD__(v208, v207))
          ++v210;
        v211 = (uint64_t)v210 >> 1;
        v212 = *(_QWORD *)(v205 + 8 * (v210 >> 1));
        v213 = *(_QWORD *)(v205 + 8 * v208);
        v214 = *(_DWORD *)(v213 + 80);
        if (*(_DWORD *)(v212 + 80) < v214)
        {
          *(_QWORD *)(v205 + 8 * v208) = v212;
          *(_QWORD *)(v205 + 8 * v211) = v213;
          v212 = v213;
          v213 = *(_QWORD *)(v205 + 8 * v208);
          v214 = *(_DWORD *)(v213 + 80);
        }
        v215 = *(_QWORD *)(v205 + 8 * v207);
        if (*(_DWORD *)(v215 + 80) >= v214)
        {
          v214 = *(_DWORD *)(v215 + 80);
          v213 = *(_QWORD *)(v205 + 8 * v207);
        }
        else
        {
          *(_QWORD *)(v205 + 8 * v208) = v215;
          *(_QWORD *)(v205 + 8 * v207) = v213;
          v212 = *(_QWORD *)(v205 + 8 * v211);
        }
        if (v214 < *(_DWORD *)(v212 + 80))
        {
          *(_QWORD *)(v205 + 8 * v211) = v213;
          *(_QWORD *)(v205 + 8 * v207) = v212;
          v212 = *(_QWORD *)(v205 + 8 * v211);
        }
        v216 = v207 - 1;
        *(_QWORD *)(v205 + 8 * v211) = *(_QWORD *)(v205 + 8 * v216);
        *(_QWORD *)(v205 + 8 * v216) = v212;
        v217 = v208;
        v218 = v207 - 1;
        while (1)
        {
          v219 = *(_DWORD *)(v212 + 80);
          v220 = (_QWORD *)(v205 + 8 * v217);
          do
          {
            v222 = v220[1];
            ++v220;
            v221 = v222;
            ++v217;
          }
          while (*(_DWORD *)(v222 + 80) < v219);
          v223 = (_QWORD *)(v205 + 8 * v218);
          do
          {
            v225 = *--v223;
            v224 = v225;
            --v218;
          }
          while (v219 < *(_DWORD *)(v225 + 80));
          if (v217 >= v218)
            break;
          *v220 = v224;
          *v223 = v221;
          v212 = *(_QWORD *)(v205 + 8 * v216);
        }
        *v220 = v212;
        *(_QWORD *)(v205 + 8 * v216) = v221;
        v226 = DWORD1(v302);
        v227 = DWORD2(v302) - 1;
        if (v217 - v208 >= v207 - v217)
        {
          if (DWORD1(v302) >= v227)
          {
            physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow((uint64_t)&v302);
            v226 = DWORD1(v302);
            v209 = v303;
          }
          DWORD1(v302) = v226 + 1;
          *((_DWORD *)v209 + v226) = v217 + 1;
          v229 = DWORD1(v302);
          ++DWORD1(v302);
          *((_DWORD *)v209 + v229) = v207;
          v207 = v217 - 1;
        }
        else
        {
          if (DWORD1(v302) >= v227)
          {
            physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow((uint64_t)&v302);
            v226 = DWORD1(v302);
            v209 = v303;
          }
          DWORD1(v302) = v226 + 1;
          *((_DWORD *)v209 + v226) = v208;
          v228 = DWORD1(v302);
          ++DWORD1(v302);
          *((_DWORD *)v209 + v228) = v217 - 1;
          v208 = v217 + 1;
        }
      }
    }
  }
  v239 = *((_DWORD *)this + 100);
  v240 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 55) + 1912) + 8))(*(_QWORD *)(*((_QWORD *)this + 55) + 1912));
  v241 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  if (v241 <= 1)
    v242 = 1;
  else
    v242 = v241;
  v243 = v239 / v242;
  if (v243 <= 1)
    v243 = 1;
  *((_DWORD *)this + 108) = v243;
  if (v239)
  {
    for (j = 0; j < v239; j += *((_DWORD *)this + 108))
    {
      v245 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((_QWORD *)this + 55) + 1920), 56, 0x10u);
      v246 = v245;
      v247 = *((_DWORD *)this + 108) + j;
      if (v239 < v247)
        v247 = v239;
      v248 = *(_QWORD *)(*((_QWORD *)this + 55) + 2616);
      v249 = *((_QWORD *)this + 49) + 8 * j;
      v250 = *((_DWORD *)this + 118);
      *(_QWORD *)(v245 + 16) = 0;
      *(_QWORD *)(v245 + 24) = 0;
      *(_DWORD *)(v245 + 32) = 0;
      *(_QWORD *)v245 = &off_24ED8B720;
      *(_QWORD *)(v245 + 8) = v248;
      *(_QWORD *)(v245 + 40) = v249;
      *(_DWORD *)(v245 + 48) = v247 - j;
      *(_DWORD *)(v245 + 52) = v250;
      v251 = *(_QWORD *)(*((_QWORD *)this + 55) + 1912);
      *(_DWORD *)(v245 + 32) = 1;
      *(_QWORD *)(v245 + 16) = v251;
      *(_QWORD *)(v245 + 24) = this;
      (*(void (**)(physx::PxsCCDContext *))(*(_QWORD *)this + 32))(this);
      (*(void (**)(uint64_t))(*(_QWORD *)v246 + 40))(v246);
    }
  }
  (*(void (**)(_QWORD, physx::PxsCCDContext *))(**((_QWORD **)this + 2) + 144))(*((_QWORD *)this + 2), this);
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 9) + 144))(*((_QWORD *)this + 9), (char *)this + 56);
  result = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 16) + 144))(*((_QWORD *)this + 16), (char *)this + 112);
  if ((v287 & 0x8000000000000000) == 0 && (v287 & 0x7FFFFFFF00000000) != 0 && v286)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if ((v290 & 0x8000000000000000) == 0 && (v290 & 0x7FFFFFFF00000000) != 0 && __b)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return result;
}

uint64_t physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::pushBack(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(*(_QWORD *)a1 + 16 * v1 + 8);
  if (v3 == 128)
  {
    v5 = v1 + 1;
    if ((_DWORD)v1 + 1 == *(_DWORD *)(a1 + 8))
    {
      v6 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Blo"
             "ck>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Block]";
      else
        v7 = "<allocation names disabled>";
      v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 15360, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 260);
      v9 = -15360;
      do
      {
        *(_DWORD *)(v8 + v9 + 15472) = -128;
        v9 += 120;
      }
      while (v9);
      *(_QWORD *)&v13 = v8;
      DWORD2(v13) = 0;
      v10 = *(unsigned int *)(a1 + 8);
      if ((*(_DWORD *)(a1 + 12) & 0x7FFFFFFFu) <= v10)
      {
        physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo>>::growAndPushBack(a1, &v13);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)a1 + 16 * v10) = v13;
        ++*(_DWORD *)(a1 + 8);
      }
      v2 = *(_QWORD *)a1;
      v5 = *(_DWORD *)(a1 + 16) + 1;
    }
    v3 = 0;
    *(_DWORD *)(a1 + 16) = v5;
    v1 = v5;
    *(_DWORD *)(v2 + 16 * v5 + 8) = 0;
  }
  v11 = v2 + 16 * v1;
  *(_DWORD *)(v11 + 8) = v3 + 1;
  return *(_QWORD *)v11 + 120 * v3;
}

int8x8_t physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::insert(int32x2_t *a1, uint64_t *a2, uint64_t a3, int8x8_t result)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x2_t v20;
  int32x2_t v21;
  uint64_t *v22;

  v7 = a1[4].u32[1];
  if (!v7)
  {
    v10 = 0;
    goto LABEL_10;
  }
  v8 = *a2;
  v9 = a2[1];
  v10 = physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(*a2, v9) & (v7 - 1);
  v11 = *(unsigned int *)(*(_QWORD *)&a1[3] + 4 * v10);
  if ((_DWORD)v11 == -1)
  {
LABEL_10:
    if (a1[6].i32[1] == a1[4].i32[0])
    {
      if (v7)
        v16 = 2 * v7;
      else
        v16 = 16;
      if (v7 < v16)
      {
        physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*> const,physx::PxsCCDShape *>,physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)a1, v16, result);
        v7 = a1[4].u32[1];
      }
      v18 = *a2;
      v17 = a2[1];
      v10 = physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(v18, v17) & (v7 - 1);
    }
    else
    {
      v18 = *a2;
      v17 = a2[1];
    }
    v19 = a1[5].u32[1];
    a1[5].i32[1] = v19 + 1;
    v20 = a1[3];
    v21 = a1[1];
    *(_DWORD *)(*(_QWORD *)&a1[2] + 4 * v19) = *(_DWORD *)(*(_QWORD *)&v20 + 4 * v10);
    *(_DWORD *)(*(_QWORD *)&v20 + 4 * v10) = v19;
    result = (int8x8_t)vadd_s32(a1[6], (int32x2_t)0x100000001);
    a1[6] = (int32x2_t)result;
    v22 = (uint64_t *)(*(_QWORD *)&v21 + 24 * v19);
    *v22 = v18;
    v22[1] = v17;
    v22[2] = a3;
    return result;
  }
  while (1)
  {
    v12 = (uint64_t *)(*(_QWORD *)&a1[1] + 24 * v11);
    v14 = *v12;
    v13 = v12[1];
    if (v14 == v8 && v13 == v9)
      return result;
    v11 = *(unsigned int *)(*(_QWORD *)&a1[2] + 4 * v11);
    if ((_DWORD)v11 == -1)
      goto LABEL_10;
  }
}

uint64_t physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::pushBack(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(*(_QWORD *)a1 + 16 * v1 + 8);
  if (v3 == 128)
  {
    v5 = v1 + 1;
    if ((_DWORD)v1 + 1 == *(_DWORD *)(a1 + 8))
    {
      v6 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::B"
             "lock>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::Block]";
      else
        v7 = "<allocation names disabled>";
      *(_QWORD *)&v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 2048, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsCCD.h", 260);
      DWORD2(v11) = 0;
      v8 = *(unsigned int *)(a1 + 8);
      if ((*(_DWORD *)(a1 + 12) & 0x7FFFFFFFu) <= v8)
      {
        physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo>>::growAndPushBack(a1, &v11);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)a1 + 16 * v8) = v11;
        ++*(_DWORD *)(a1 + 8);
      }
      v2 = *(_QWORD *)a1;
      v5 = *(_DWORD *)(a1 + 16) + 1;
    }
    v3 = 0;
    *(_DWORD *)(a1 + 16) = v5;
    v1 = v5;
    *(_DWORD *)(v2 + 16 * v5 + 8) = 0;
  }
  v9 = v2 + 16 * v1;
  *(_DWORD *)(v9 + 8) = v3 + 1;
  return *(_QWORD *)v9 + 16 * v3;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 4 * a2;
    v8 = (_DWORD *)(*(_QWORD *)v5 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::Cm::FlushPool::allocate(pthread_mutex_t **this, int a2, unsigned int a3)
{
  uint64_t NotThreadSafe;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*this);
  NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe((physx::Cm::FlushPool *)this, a2, a3);
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*this);
  return NotThreadSafe;
}

uint64_t physx::PxLightCpuTask::removeReference(physx::PxLightCpuTask *this)
{
  return (*(uint64_t (**)(_QWORD, physx::PxLightCpuTask *))(**((_QWORD **)this + 2) + 144))(*((_QWORD *)this + 2), this);
}

float *`anonymous namespace'::getShapeAbsPose(float *result, float *a2, float *a3, int a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;

  if (a4)
  {
    v4 = a3[12] * -2.0;
    v5 = a3[13] * -2.0;
    v6 = a3[14] * -2.0;
    v8 = a3[10];
    v7 = a3[11];
    v9 = (float)(v7 * v7) + -0.5;
    v10 = a3[8];
    v11 = a3[9];
    v12 = (float)((float)(v5 * v11) + (float)(v10 * v4)) + (float)(v8 * v6);
    v13 = (float)((float)(v4 * v9) - (float)((float)((float)(v11 * v6) - (float)(v8 * v5)) * v7)) + (float)(v10 * v12);
    v14 = (float)((float)(v5 * v9) - (float)((float)((float)(v8 * v4) - (float)(v10 * v6)) * v7)) + (float)(v11 * v12);
    v15 = (float)((float)(v6 * v9) - (float)((float)((float)(v10 * v5) - (float)(v11 * v4)) * v7)) + (float)(v8 * v12);
    v16 = v13 + v13;
    v17 = v15 + v15;
    v19 = a3[2];
    v18 = a3[3];
    v20 = (float)(v18 * v18) + -0.5;
    v21 = a3[1];
    v22 = (float)((float)(v21 * (float)(v14 + v14)) + (float)(*a3 * v16)) + (float)(v19 * v17);
    v23 = (float)((float)(v18 * (float)((float)(v21 * v17) - (float)(v19 * (float)(v14 + v14)))) + (float)(v16 * v20))
        + (float)(*a3 * v22);
    v24 = (float)((float)(v18 * (float)((float)(v19 * v16) - (float)(*a3 * v17))) + (float)((float)(v14 + v14) * v20))
        + (float)(v21 * v22);
    v25 = (float)((float)(v18 * (float)((float)(*a3 * (float)(v14 + v14)) - (float)(v21 * v16))) + (float)(v17 * v20))
        + (float)(v19 * v22);
    v26 = a3[4] + v23;
    v27 = (float)((float)((float)(v7 * *a3) - (float)(v18 * v10)) - (float)(v21 * v8)) + (float)(v11 * v19);
    v28 = (float)((float)((float)(v7 * v21) - (float)(v18 * v11)) - (float)(v19 * v10)) + (float)(v8 * *a3);
    v29 = (float)((float)((float)(v7 * v19) - (float)(v18 * v8)) - (float)(*a3 * v11)) + (float)(v10 * v21);
    v30 = (float)((float)((float)(v10 * *a3) + (float)(v18 * v7)) + (float)(v21 * v11)) + (float)(v19 * v8);
    v31 = a2[4] + a2[4];
    v32 = a2[5] + a2[5];
    v33 = a2[6] + a2[6];
    v34 = (float)(v30 * v30) + -0.5;
    v35 = (float)((float)(v28 * v32) + (float)(v27 * v31)) + (float)(v29 * v33);
    v36 = (float)((float)(v30 * (float)((float)(v28 * v33) - (float)(v29 * v32))) + (float)(v31 * v34))
        + (float)(v27 * v35);
    v37 = (float)((float)(v30 * (float)((float)(v29 * v31) - (float)(v27 * v33))) + (float)(v32 * v34))
        + (float)(v28 * v35);
    v38 = (float)((float)(v30 * (float)((float)(v27 * v32) - (float)(v28 * v31))) + (float)(v33 * v34))
        + (float)(v29 * v35);
    v39 = v26 + v36;
    v40 = (float)(a3[5] + v24) + v37;
    v41 = (float)(a3[6] + v25) + v38;
    v43 = a2[2];
    v42 = a2[3];
    v44 = a2[1];
    v45 = (float)((float)((float)(v27 * v42) + (float)(v30 * *a2)) + (float)(v28 * v43)) - (float)(v44 * v29);
    v46 = (float)((float)((float)(v28 * v42) + (float)(v30 * v44)) + (float)(v29 * *a2)) - (float)(v43 * v27);
    v47 = (float)((float)((float)(v29 * v42) + (float)(v30 * v43)) + (float)(v27 * v44)) - (float)(*a2 * v28);
    v48 = (float)((float)((float)(v30 * v42) - (float)(v27 * *a2)) - (float)(v28 * v44)) - (float)(v29 * v43);
  }
  else
  {
    v49 = a2[4] + a2[4];
    v50 = a2[5] + a2[5];
    v51 = a2[6] + a2[6];
    v53 = a3[2];
    v52 = a3[3];
    v54 = (float)(v52 * v52) + -0.5;
    v55 = a3[1];
    v56 = (float)((float)(v50 * v55) + (float)(*a3 * v49)) + (float)(v53 * v51);
    v57 = (float)((float)(v52 * (float)((float)(v55 * v51) - (float)(v53 * v50))) + (float)(v49 * v54))
        + (float)(*a3 * v56);
    v58 = (float)((float)(v52 * (float)((float)(v53 * v49) - (float)(*a3 * v51))) + (float)(v50 * v54))
        + (float)(v55 * v56);
    v59 = (float)((float)(v52 * (float)((float)(*a3 * v50) - (float)(v55 * v49))) + (float)(v51 * v54))
        + (float)(v53 * v56);
    v39 = a3[4] + v57;
    v40 = a3[5] + v58;
    v41 = a3[6] + v59;
    v61 = a2[2];
    v60 = a2[3];
    v62 = a2[1];
    v45 = (float)((float)((float)(*a3 * v60) + (float)(v52 * *a2)) + (float)(v55 * v61)) - (float)(v62 * v53);
    v46 = (float)((float)((float)(v55 * v60) + (float)(v52 * v62)) + (float)(v53 * *a2)) - (float)(v61 * *a3);
    v47 = (float)((float)((float)(v53 * v60) + (float)(v52 * v61)) + (float)(*a3 * v62)) - (float)(*a2 * v55);
    v48 = (float)((float)((float)(v52 * v60) - (float)(*a3 * *a2)) - (float)(v55 * v62)) - (float)(v53 * v61);
  }
  *result = v45;
  result[1] = v46;
  result[2] = v47;
  result[3] = v48;
  result[4] = v39;
  result[5] = v40;
  result[6] = v41;
  return result;
}

uint64_t physx::PxsContext::PxsContext(uint64_t a1, int32x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  const char *v12;
  pthread_mutex_t *v13;
  uint64_t v14;
  const char *v15;
  pthread_mutex_t *v16;
  __int32 v17;
  int32x2_t v18;
  unsigned int v19;
  unsigned int v20;

  physx::PxcScratchAllocator::PxcScratchAllocator((physx::PxcScratchAllocator *)a1);
  v11 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v12 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v12 = "<allocation names disabled>";
  v13 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v11 + 24) + 16))(v11 + 24, 72, v12, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 40) = v13;
  physx::shdfnd::MutexImpl::MutexImpl(v13);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 244) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 272) = a1;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = off_24ED8B800;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::SListT((uint64_t *)(a1 + 440));
  *(_QWORD *)(a1 + 448) = a1;
  *(_QWORD *)(a1 + 456) = 256;
  *(_QWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = a1;
  *(_QWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 464) = 8;
  *(_QWORD *)(a1 + 1056) = 0x4000000000;
  *(_BYTE *)(a1 + 1040) = 1;
  *(_QWORD *)(a1 + 1048) = a1 + 528;
  *(_QWORD *)(a1 + 1064) = 256;
  *(_DWORD *)(a1 + 1072) = 73728;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1624) = 0x4000000000;
  *(_BYTE *)(a1 + 1608) = 1;
  *(_QWORD *)(a1 + 1616) = a1 + 1096;
  *(_QWORD *)(a1 + 1632) = 256;
  *(_DWORD *)(a1 + 1640) = 36864;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_DWORD *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_DWORD *)(a1 + 1696) = 0;
  *(_QWORD *)(a1 + 1704) = 0;
  *(_DWORD *)(a1 + 1712) = 0;
  *(_QWORD *)(a1 + 1720) = 0;
  *(_DWORD *)(a1 + 1728) = 0;
  *(_DWORD *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  v14 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v15 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v15 = "<allocation names disabled>";
  v16 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v14 + 24) + 16))(v14 + 24, 72, v15, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)(a1 + 1760) = v16;
  physx::shdfnd::MutexImpl::MutexImpl(v16);
  *(_QWORD *)(a1 + 1784) = 0;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_QWORD *)(a1 + 1912) = a3;
  *(_QWORD *)(a1 + 1920) = a4;
  *(_QWORD *)(a1 + 1928) = a5;
  bzero((void *)(a1 + 1936), 0x288uLL);
  v17 = a2[19].i32[0];
  *(_BYTE *)(a1 + 2584) = (v17 & 0x40) != 0;
  *(_BYTE *)(a1 + 2585) = 0;
  *(_BYTE *)(a1 + 2586) = (v17 & 0x800) != 0;
  *(_QWORD *)(a1 + 2616) = a6;
  bzero(*(void **)(a1 + 1704), (4 * *(_DWORD *)(a1 + 1712)));
  bzero(*(void **)(a1 + 1720), (4 * *(_DWORD *)(a1 + 1728)));
  *(_DWORD *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1888) = xmmword_2261A6A00;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(int32x2_t *)(a1 + 1904) = vdup_n_s32(0x7E7FFFFFu);
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  v18 = a2[26];
  *(int32x2_t *)(a1 + 236) = vrev64_s32(v18);
  v19 = v18.i32[0];
  if (v18.i32[0] <= 0x40u)
    v20 = 64;
  else
    v20 = v18.i32[0];
  if ((*(_DWORD *)(a1 + 60) & 0x7FFFFFFFu) < v20)
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 48, v20);
  if ((*(_DWORD *)(a1 + 188) & 0x7FFFFFF0) == 0)
    physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::recreate(a1 + 176, 0x10u);
  if ((*(_DWORD *)(a1 + 108) & 0x7FFFFFFFu) < v20)
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 96, v20);
  if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFFu) < v20)
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 112, v20);
  if ((*(_DWORD *)(a1 + 140) & 0x7FFFFFFFu) < v20)
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 128, v20);
  if ((*(_DWORD *)(a1 + 156) & 0x7FFFFFFFu) < v20)
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 144, v20);
  if ((*(_DWORD *)(a1 + 204) & 0x7FFFFFFFu) < v20)
    physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(a1 + 192, v20);
  physx::PxcNpMemBlockPool::setBlockCount(a1 + 40, v19);
  *(_QWORD *)(a1 + 208) = 0;
  return a1;
}

void physx::PxsContext::~PxsContext(physx::PxsContext *this)
{
  _QWORD *v2;
  int v3;
  BOOL v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  int v12;
  physx::PxsContext *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v19;
  int v20;
  int v21;
  physx::PxsContext *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t j;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v40;
  int v41;
  uint64_t k;
  int v43;
  uint64_t m;
  int v46;
  uint64_t n;
  int v49;
  int v51;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;

  v2 = (_QWORD *)*((_QWORD *)this + 324);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 5);
    if (v3 < 0
      || ((v3 & 0x7FFFFFFF) != 0 ? (v4 = v2[1] == 0) : (v4 = 1),
          v4 || ((*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 24))(*v2, v2[1]), *((_QWORD *)this + 324))))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 324) = 0;
  v5 = *((unsigned int *)this + 115);
  if ((_DWORD)v5)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *((_QWORD *)this + 61);
      if (*(_QWORD *)(v7 + 8 * i))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v7 = *((_QWORD *)this + 61);
        v5 = *((unsigned int *)this + 115);
      }
      *(_QWORD *)(v7 + 8 * i) = 0;
    }
  }
  *((_DWORD *)this + 115) = 0;
  if (*((_QWORD *)this + 59))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 59) = 0;
  if (*((_QWORD *)this + 61))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 61) = 0;
  }
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 220);
  if (*((_QWORD *)this + 215) && (*((_DWORD *)this + 432) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 215) = 0;
  if (*((_QWORD *)this + 213) && (*((_DWORD *)this + 428) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 213) = 0;
  if (*((_QWORD *)this + 211) && (*((_DWORD *)this + 424) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 211) = 0;
  if (*((_QWORD *)this + 209) && (*((_DWORD *)this + 420) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 209) = 0;
  if (*((_QWORD *)this + 207) && (*((_DWORD *)this + 416) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 207) = 0;
  if (*((_DWORD *)this + 409))
  {
    v55 = 0;
    v56 = 0;
    v8 = *((_QWORD *)this + 206);
    if (v8)
    {
      do
      {
        v54 = v8;
        v9 = v56;
        if ((HIDWORD(v56) & 0x7FFFFFFFu) <= v56)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::growAndPushBack((uint64_t)&v55, &v54);
        }
        else
        {
          *(_QWORD *)&v55[8 * v56] = v8;
          LODWORD(v56) = v9 + 1;
        }
        v8 = **((_QWORD **)this + 206);
        *((_QWORD *)this + 206) = v8;
      }
      while (v8);
      v10 = v55;
      v11 = v56;
      v12 = HIDWORD(v56);
    }
    else
    {
      v12 = 0;
      v11 = 0;
      v10 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>(v10, v11);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>(*((char **)this + 202), *((_DWORD *)this + 406));
    if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && v10)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
  }
  v13 = (physx::PxsContext *)*((_QWORD *)this + 202);
  v14 = *((unsigned int *)this + 406);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    do
    {
      if (*(_QWORD *)v13)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v13 = (physx::PxsContext *)((char *)v13 + 8);
      v15 -= 8;
    }
    while (v15);
    v13 = (physx::PxsContext *)*((_QWORD *)this + 202);
  }
  v16 = *((_DWORD *)this + 407);
  if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0)
  {
    if (v13 == (physx::PxsContext *)((char *)this + 1096))
    {
      *((_BYTE *)this + 1608) = 0;
    }
    else if (v13)
    {
      (*(void (**)(uint64_t, physx::PxsContext *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, v13);
    }
  }
  if (*((_DWORD *)this + 267))
  {
    v55 = 0;
    v56 = 0;
    v17 = *((_QWORD *)this + 135);
    if (v17)
    {
      do
      {
        v54 = v17;
        v18 = v56;
        if ((HIDWORD(v56) & 0x7FFFFFFFu) <= v56)
        {
          physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::growAndPushBack((uint64_t)&v55, &v54);
        }
        else
        {
          *(_QWORD *)&v55[8 * v56] = v17;
          LODWORD(v56) = v18 + 1;
        }
        v17 = **((_QWORD **)this + 135);
        *((_QWORD *)this + 135) = v17;
      }
      while (v17);
      v19 = v55;
      v20 = v56;
      v21 = HIDWORD(v56);
    }
    else
    {
      v21 = 0;
      v20 = 0;
      v19 = 0;
    }
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>(v19, v20);
    physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>(*((char **)this + 131), *((_DWORD *)this + 264));
    if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && v19)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v19);
  }
  v22 = (physx::PxsContext *)*((_QWORD *)this + 131);
  v23 = *((unsigned int *)this + 264);
  if ((_DWORD)v23)
  {
    v24 = 8 * v23;
    do
    {
      if (*(_QWORD *)v22)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v22 = (physx::PxsContext *)((char *)v22 + 8);
      v24 -= 8;
    }
    while (v24);
    v22 = (physx::PxsContext *)*((_QWORD *)this + 131);
  }
  v25 = *((_DWORD *)this + 265);
  if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0)
  {
    if (v22 == (physx::PxsContext *)((char *)this + 528))
    {
      *((_BYTE *)this + 1040) = 0;
    }
    else if (v22)
    {
      (*(void (**)(uint64_t, physx::PxsContext *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                           + 24))(physx::shdfnd::Foundation::mInstance + 24, v22);
    }
  }
  v26 = *((unsigned int *)this + 115);
  if ((_DWORD)v26)
  {
    for (j = 0; j < v26; ++j)
    {
      v28 = *((_QWORD *)this + 61);
      if (*(_QWORD *)(v28 + 8 * j))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v28 = *((_QWORD *)this + 61);
        v26 = *((unsigned int *)this + 115);
      }
      *(_QWORD *)(v28 + 8 * j) = 0;
    }
  }
  *((_DWORD *)this + 115) = 0;
  if (*((_QWORD *)this + 59))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 59) = 0;
  if (*((_QWORD *)this + 61))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 61) = 0;
  }
  if (*((_QWORD *)this + 63) && (*((_DWORD *)this + 128) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 63) = 0;
  v29 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)this + 55));
  if (v29)
  {
    v30 = v29;
    do
    {
      if (v30[910] && (v30[911] & 0x80000000) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v30[910] = 0;
      if (v30[908] && (v30[909] & 0x80000000) == 0)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v30[908] = 0;
      v31 = *((_DWORD *)v30 + 1791);
      if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0 && v30[894] != 0)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, (char *)v30 - *(v30 - 1));
      v30 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)this + 55));
    }
    while (v30);
  }
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT((uint64_t)this + 440);
  physx::Cm::RenderBuffer::~RenderBuffer((physx::PxsContext *)((char *)this + 296));
  physx::PxcNpMemBlockPool::release((uint64_t)this + 40, (uint64_t)this + 16 * (1 - *((_DWORD *)this + 55)) + 96, 0);
  v33 = *((unsigned int *)this + 55);
  *((_DWORD *)this + 55) = 1 - v33;
  physx::PxcNpMemBlockPool::release((uint64_t)this + 40, (uint64_t)this + 16 * v33 + 96, 0);
  v34 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 55) = 1 - *((_DWORD *)this + 55);
  physx::PxcNpMemBlockPool::release((uint64_t)this + 40, (uint64_t)this + 16 * (1 - v34) + 128, 0);
  v35 = *((unsigned int *)this + 54);
  *((_DWORD *)this + 54) = 1 - v35;
  physx::PxcNpMemBlockPool::release((uint64_t)this + 40, (uint64_t)this + 16 * v35 + 128, 0);
  *((_DWORD *)this + 54) = 1 - *((_DWORD *)this + 54);
  physx::PxcNpMemBlockPool::releaseConstraintMemory((uint64_t)this + 40);
  physx::PxcNpMemBlockPool::releaseContacts((physx::PxsContext *)((char *)this + 40));
  physx::PxcNpMemBlockPool::releaseContacts((physx::PxsContext *)((char *)this + 40));
  v36 = *((_DWORD *)this + 50);
  while (v36)
  {
    v37 = *(_QWORD *)(*((_QWORD *)this + 24) + 8 * --v36);
    *((_DWORD *)this + 50) = v36;
    if (v37)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v36 = *((_DWORD *)this + 50);
    }
  }
  v38 = *((_DWORD *)this + 51);
  if ((v38 & 0x80000000) == 0 && (v38 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 24) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v40 = *((_DWORD *)this + 47);
  if ((v40 & 0x80000000) == 0 && (v40 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 22))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v41 = *((_DWORD *)this + 43);
  if ((v41 & 0x80000000) == 0 && (v41 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 20))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  for (k = 0; k != -32; k -= 16)
  {
    v43 = *(_DWORD *)((char *)this + k + 156);
    if ((v43 & 0x80000000) == 0 && (v43 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + k + 144) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  for (m = 0; m != -32; m -= 16)
  {
    v46 = *(_DWORD *)((char *)this + m + 124);
    if ((v46 & 0x80000000) == 0 && (v46 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + m + 112) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  for (n = 0; n != -32; n -= 16)
  {
    v49 = *(_DWORD *)((char *)this + n + 92);
    if ((v49 & 0x80000000) == 0 && (v49 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + n + 80) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v51 = *((_DWORD *)this + 15);
  if ((v51 & 0x80000000) == 0 && (v51 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 6) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 5);
  v53 = *((_DWORD *)this + 5);
  if ((v53 & 0x80000000) == 0 && (v53 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this);
}

uint64_t physx::PxsContext::createContactManager(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (a2)
  {
    v3 = a2;
    *(_BYTE *)(a2 + 82) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 480);
    if (!v7)
    {
      if (!physx::Cm::PoolList<physx::PxsContactManager,physx::PxsContext>::extend((unsigned int *)(a1 + 456)))
        return 0;
      v7 = *(_DWORD *)(a1 + 480);
    }
    v8 = *(_QWORD *)(a1 + 472);
    v9 = v7 - 1;
    *(_DWORD *)(a1 + 480) = v9;
    v3 = *(_QWORD *)(v8 + 8 * v9);
    *(_DWORD *)(*(_QWORD *)(a1 + 504) + (((unint64_t)*(unsigned int *)(v3 + 88) >> 3) & 0x1FFFFFFC)) |= 1 << *(_DWORD *)(v3 + 88);
    *(_BYTE *)(v3 + 82) = 0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    v10 = *(_DWORD *)(v3 + 88);
    if (v10 >= 32 * *(_DWORD *)(a1 + 1664))
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1656, ((2 * v10) & 0xFFFFFF00) + 256);
      v10 = *(_DWORD *)(v3 + 88);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 1656) + 4 * (v10 >> 5)) |= 1 << v10;
    if (a3)
    {
      v11 = *(_DWORD *)(v3 + 88);
      if (v11 >= 32 * *(_DWORD *)(a1 + 1680))
      {
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1672, ((2 * v11) & 0xFFFFFF00) + 256);
        v11 = *(_DWORD *)(v3 + 88);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 1672) + 4 * (v11 >> 5)) |= 1 << v11;
    }
  }
  return v3;
}

double physx::PxsContext::createCache(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  double result;

  if (a3 && *(_BYTE *)(a1 + 2584))
  {
    if (physx::gEnablePCMCaching[8 * a4 - a4 + a5])
    {
      if (a4 > 4 || a5 > 4)
      {
        *(_QWORD *)a2 = 0;
        *(_BYTE *)(a2 + 11) |= 3u;
      }
      else
      {
        if (a4 && a5)
        {
          v7 = *(_QWORD *)(a1 + 1080);
          if (!v7)
          {
            physx::shdfnd::PoolBase<physx::Gu::LargePersistentContactManifold,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::allocateSlab(a1 + 520);
            v7 = *(_QWORD *)(a1 + 1080);
          }
          v8 = v7 + 96;
          *(_QWORD *)(a1 + 1080) = *(_QWORD *)v7;
          ++*(_DWORD *)(a1 + 1068);
          v9 = 4;
        }
        else
        {
          v7 = *(_QWORD *)(a1 + 1648);
          if (!v7)
          {
            physx::shdfnd::PoolBase<physx::Gu::SpherePersistentContactManifold,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::allocateSlab(a1 + 1088);
            v7 = *(_QWORD *)(a1 + 1648);
          }
          v8 = v7 + 96;
          *(_QWORD *)(a1 + 1648) = *(_QWORD *)v7;
          ++*(_DWORD *)(a1 + 1636);
          v9 = 1;
        }
        *(_BYTE *)(v7 + 65) = v9;
        *(_QWORD *)(v7 + 80) = v8;
        result = 1.40444743e306;
        *(_OWORD *)v7 = xmmword_2260E5D70;
        *(_OWORD *)(v7 + 16) = xmmword_2261A69F0;
        *(_OWORD *)(v7 + 32) = xmmword_2260E5D70;
        *(_OWORD *)(v7 + 48) = xmmword_2260E5D70;
        *(_QWORD *)a2 = v7;
        *(_BYTE *)(a2 + 11) |= 1u;
        *(_BYTE *)(v7 + 66) = 0;
        *(_BYTE *)(v7 + 64) = 0;
        *(_OWORD *)v7 = xmmword_2260E5D70;
        *(_OWORD *)(v7 + 16) = xmmword_2261A69F0;
      }
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 11) = 0;
    }
  }
  return result;
}

void physx::PxsContext::destroyContactManager(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned int *)(a2 + 88);
  if ((*(_BYTE *)(a2 + 16) & 2) != 0 && (*(_WORD *)(a2 + 80) & 0x1000) != 0)
  {
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1672, v4 + 1);
    *(_DWORD *)(*(_QWORD *)(a1 + 1672) + ((v4 >> 3) & 0x1FFFFFFC)) &= ~(1 << v4);
  }
  v5 = v4 + 1;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1656, v4 + 1);
  v6 = 1 << v4;
  v7 = v4 >> 5;
  *(_DWORD *)(*(_QWORD *)(a1 + 1656) + 4 * v7) &= ~v6;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1704, v5);
  *(_DWORD *)(*(_QWORD *)(a1 + 1704) + 4 * v7) &= ~v6;
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 1720, v5);
  *(_DWORD *)(*(_QWORD *)(a1 + 1720) + 4 * v7) &= ~v6;
  *(_DWORD *)(*(_QWORD *)(a1 + 504) + (((unint64_t)*(unsigned int *)(a2 + 88) >> 3) & 0x1FFFFFFC)) &= ~(1 << *(_DWORD *)(a2 + 88));
  v8 = *(_QWORD *)(a1 + 472);
  v9 = *(unsigned int *)(a1 + 480);
  *(_DWORD *)(a1 + 480) = v9 + 1;
  *(_QWORD *)(v8 + 8 * v9) = a2;
}

uint64_t physx::PxsContext::destroyCache(uint64_t result, _BYTE *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if ((a2[11] & 1) != 0)
  {
    if ((a2[11] & 2) == 0)
    {
      v2 = *(_QWORD **)a2;
      if (*(_BYTE *)(*(_QWORD *)a2 + 65) == 1)
      {
        --*(_DWORD *)(result + 1636);
        v3 = (_QWORD *)(result + 1648);
      }
      else
      {
        --*(_DWORD *)(result + 1068);
        v3 = (_QWORD *)(result + 1080);
      }
      *v2 = *v3;
      *v3 = v2;
    }
    *(_QWORD *)a2 = 0;
    a2[11] = 0;
  }
  return result;
}

uint64_t physx::PxcScratchAllocator::setBlock(uint64_t this, char *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  char *v6;

  v3 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 24) = a2;
  *(_DWORD *)(this + 32) = a3;
  v4 = *(_DWORD *)(this + 16);
  v5 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 16) = v4 - 1;
  v6 = &a2[a3];
  if ((v5 & 0x7FFFFFFFu) <= v4 - 1)
    return physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack(this + 8, &v6);
  *(_QWORD *)(v3 + 8 * (v4 - 1)) = &a2[a3];
  *(_DWORD *)(this + 16) = v4;
  return this;
}

float physx::PxsContext::shiftOrigin(uint64_t a1, uint64_t a2)
{
  float32x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  float32x2_t v5;
  float v6;
  float *v7;
  float result;
  float32x2_t v9;

  v2 = (float32x2_t *)(a1 + 1892);
  v3 = *(_QWORD *)(a1 + 2592);
  v4 = *(_DWORD *)(v3 + 20) & 0x7FFFFFFF;
  if ((_DWORD)v4)
  {
    v5 = *(float32x2_t *)a2;
    v6 = *(float *)(a2 + 8);
    v7 = (float *)(*(_QWORD *)(v3 + 8) + 24);
    do
    {
      *((float32x2_t *)v7 - 1) = vsub_f32(*(float32x2_t *)(v7 - 2), v5);
      *v7 = *v7 - v6;
      v7 += 8;
      --v4;
    }
    while (v4);
  }
  *(_BYTE *)(v3 + 28) = 1;
  result = *(float *)(a1 + 1888);
  v9 = *v2;
  if (result != -8.5071e37 || v9.f32[0] != -8.5071e37)
    goto LABEL_15;
  if (v9.f32[1] != -8.5071e37)
  {
    v9.i32[0] = -25165825;
LABEL_15:
    *(float *)(a1 + 1888) = result - *(float *)a2;
    *v2 = vsub_f32(v9, *(float32x2_t *)(a2 + 4));
    *(float32x2_t *)(a1 + 1900) = vsub_f32(*(float32x2_t *)(a1 + 1900), *(float32x2_t *)a2);
    result = *(float *)(a1 + 1908) - *(float *)(a2 + 8);
    *(float *)(a1 + 1908) = result;
    return result;
  }
  if (*(float *)(a1 + 1900) != 8.5071e37)
  {
    v9 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
    goto LABEL_15;
  }
  v9 = (float32x2_t)vdup_n_s32(0xFE7FFFFF);
  if (*(float *)(a1 + 1904) != 8.5071e37 || *(float *)(a1 + 1908) != 8.5071e37)
    goto LABEL_15;
  return result;
}

uint64_t physx::PxsContext::mergeCMDiscreteUpdateResults(physx::PxsContext *this, physx::PxBaseTask *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;

  (*(void (**)(_QWORD, physx::PxBaseTask *))(**((_QWORD **)this + 222) + 152))(*((_QWORD *)this + 222), a2);
  v3 = *((_QWORD *)this + 55);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 8));
  v4 = *(_QWORD **)v3;
  *(_QWORD *)v3 = 0;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
  if (v4)
  {
    v6 = v4;
    do
    {
      v7 = 0;
      v8 = (_QWORD *)((char *)v6 + 7188);
      v9 = (_QWORD *)*v6;
      *((_DWORD *)this + 434) += *((_DWORD *)v6 + 1825);
      *((_DWORD *)this + 435) += *((_DWORD *)v6 + 1824);
      *((_DWORD *)this + 437) += *((_DWORD *)v6 + 1826);
      *((_DWORD *)this + 438) += *((_DWORD *)v6 + 1827);
      v10 = (int *)v6 + 79;
      v11 = (char *)this + 1936;
      v12 = 7;
      do
      {
        v13 = v11;
        v14 = v10;
        v15 = v12;
        do
        {
          v16 = *(v14 - 49);
          v17 = *v14++;
          *v13 += v16;
          v13[98] += v17;
          *((_DWORD *)this + 631) += v16;
          ++v13;
          --v15;
        }
        while (v15);
        ++v7;
        --v12;
        v10 += 8;
        v11 += 32;
      }
      while (v7 != 7);
      *((int32x2_t *)this + 316) = vadd_s32(*(int32x2_t *)((char *)this + 2528), (int32x2_t)v6[899]);
      *((_DWORD *)this + 638) += *((_DWORD *)v6 + 1797);
      *v8 = 0;
      *(_OWORD *)(v6 + 15) = 0u;
      v18 = v6 + 15;
      *((_DWORD *)v18 + 1769) = 0;
      *((_OWORD *)v18 + 1) = 0u;
      *((_OWORD *)v18 + 2) = 0u;
      *((_OWORD *)v18 + 3) = 0u;
      *((_OWORD *)v18 + 4) = 0u;
      *((_OWORD *)v18 + 5) = 0u;
      *((_OWORD *)v18 + 6) = 0u;
      *((_OWORD *)v18 + 7) = 0u;
      *((_OWORD *)v18 + 8) = 0u;
      *((_OWORD *)v18 + 9) = 0u;
      *((_OWORD *)v18 + 10) = 0u;
      *((_OWORD *)v18 + 11) = 0u;
      *((_OWORD *)v18 + 12) = 0u;
      *((_OWORD *)v18 + 13) = 0u;
      *((_OWORD *)v18 + 14) = 0u;
      *((_OWORD *)v18 + 15) = 0u;
      *((_OWORD *)v18 + 16) = 0u;
      *((_OWORD *)v18 + 17) = 0u;
      *((_OWORD *)v18 + 18) = 0u;
      *((_OWORD *)v18 + 19) = 0u;
      *((_OWORD *)v18 + 20) = 0u;
      *((_OWORD *)v18 + 21) = 0u;
      *((_OWORD *)v18 + 22) = 0u;
      *((_OWORD *)v18 + 23) = 0u;
      v18[48] = 0;
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::combine1<physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::OR>((uint64_t)this + 1704, (int *)v18[893], v18[894] & 0x7FFFFFFF);
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::combine1<physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::OR>((uint64_t)this + 1720, (int *)v18[895], v18[896] & 0x7FFFFFFF);
      *((_DWORD *)this + 653) += *((_DWORD *)v18 + 1774);
      v19 = *((_DWORD *)this + 652);
      if (v19 <= *((_DWORD *)v18 + 1773))
        v19 = *((_DWORD *)v18 + 1773);
      *((_DWORD *)this + 652) = v19;
      v8[3] = 0;
      v6 = v9;
    }
    while (v9);
    do
    {
      v20 = (_QWORD *)*v4;
      v21 = *((_QWORD *)this + 55);
      pthread_mutex_lock((pthread_mutex_t *)(v21 + 8));
      *v4 = *(_QWORD *)v21;
      *(_QWORD *)v21 = v4;
      result = pthread_mutex_unlock((pthread_mutex_t *)(v21 + 8));
      v4 = v20;
    }
    while (v20);
  }
  return result;
}

uint64_t physx::PxsContext::resetThreadContexts(physx::PxsContext *this)
{
  uint64_t v2;
  physx::PxcNpThreadContext *v3;
  uint64_t result;
  physx::PxcNpThreadContext *v5;
  physx::PxcNpThreadContext *v6;
  physx::PxcNpThreadContext *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 55);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  v3 = *(physx::PxcNpThreadContext **)v2;
  *(_QWORD *)v2 = 0;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v3)
  {
    v5 = v3;
    do
    {
      v6 = *(physx::PxcNpThreadContext **)v5;
      physx::PxcNpThreadContext::reset(v5, 32 * *((_DWORD *)this + 428));
      v5 = v6;
    }
    while (v6);
    do
    {
      v7 = *(physx::PxcNpThreadContext **)v3;
      v8 = *((_QWORD *)this + 55);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
      *(_QWORD *)v3 = *(_QWORD *)v8;
      *(_QWORD *)v8 = v3;
      result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
      v3 = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t physx::PxsContext::fillManagerTouchEvents(uint64_t a1, char *a2, _DWORD *a3, char *a4, _DWORD *a5, char *a6, _DWORD *a7)
{
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v7 = a4;
  v8 = a6;
  v9 = a2;
  v10 = *(_DWORD *)(a1 + 1712) & 0x7FFFFFFF;
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int **)(a1 + 1704);
    v12 = *v11;
    if (*v11)
    {
      LODWORD(v13) = 0;
LABEL_7:
      v9 = a2;
      v8 = a6;
      v7 = a4;
      while (1)
      {
        v14 = v13;
        v15 = v12;
        v12 &= v12 - 1;
        if (!v12)
        {
          if ((int)v13 + 1 > v10)
            LODWORD(v13) = v13 + 1;
          else
            LODWORD(v13) = v10;
          v16 = v14;
          while ((_DWORD)v13 - 1 != v16)
          {
            v12 = v11[++v16];
            if (v12)
            {
              LODWORD(v13) = v16;
              goto LABEL_17;
            }
          }
          v12 = 0;
        }
LABEL_17:
        v17 = __clz(__rbit32(v15)) | (32 * v14);
        if (v17 == -1)
          break;
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 488) + 8 * (v17 >> *(_DWORD *)(a1 + 464)));
        v19 = (*(_DWORD *)(a1 + 456) - 1) & v17;
        v20 = v18 + 120 * v19;
        v21 = *(_BYTE *)(v20 + 83);
        if ((v21 & 2) != 0)
        {
          v23 = (uint64_t *)(v18 + 120 * v19 + 24);
          if ((*(_BYTE *)(v20 + 83) & 0x10) != 0)
          {
            v25 = *v23;
            *(_QWORD *)v8 = v20;
            *((_QWORD *)v8 + 1) = v25;
            v8 += 16;
            *(_BYTE *)(v20 + 83) = v21 & 0xEF;
            if (!v12)
              break;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)v9 = v20;
            *((_QWORD *)v9 + 1) = v24;
            v9 += 16;
            if (!v12)
              break;
          }
        }
        else
        {
          v22 = *(_QWORD *)(v18 + 120 * v19 + 24);
          *(_QWORD *)v7 = v20;
          *((_QWORD *)v7 + 1) = v22;
          v7 += 16;
          if (!v12)
            break;
        }
      }
    }
    else
    {
      v13 = 0;
      while (v10 - 1 != v13)
      {
        v12 = v11[++v13];
        if (v12)
          goto LABEL_7;
      }
      v7 = a4;
      v8 = a6;
      v9 = a2;
    }
  }
  *a3 = (unint64_t)(v9 - a2) >> 4;
  *a5 = (unint64_t)(v7 - a4) >> 4;
  *a7 = (unint64_t)(v8 - a6) >> 4;
  return 1;
}

uint64_t physx::PxsContext::fillManagerPatchChangedEvents(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4, _DWORD *a5)
{
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD v28[5];

  v10 = *(_DWORD *)(a1 + 1728);
  v11 = v10 & 0x7FFFFFFF;
  if ((v10 & 0x7FFFFFFF) != 0)
  {
    v12 = *(unsigned int **)(a1 + 1720);
    v13 = *v12;
    if (*v12)
    {
      LODWORD(v11) = 0;
      goto LABEL_9;
    }
    v14 = 0;
    v15 = v12 + 1;
    while (v11 - 1 != v14)
    {
      v13 = v15[v14++];
      if (v13)
      {
        LODWORD(v11) = v14;
        goto LABEL_9;
      }
    }
  }
  v13 = 0;
LABEL_9:
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 1776) + 168))(v28);
  v16 = a4;
  v17 = a2;
  if (v13)
  {
    v18 = *(_DWORD *)(a1 + 1728) & 0x7FFFFFFF;
    v17 = a2;
    v16 = a4;
    do
    {
      v19 = v11;
      v20 = v13;
      v13 &= v13 - 1;
      if (!v13)
      {
        if ((int)v11 + 1 > v18)
          LODWORD(v11) = v11 + 1;
        else
          LODWORD(v11) = v18;
        v21 = v19;
        while ((_DWORD)v11 - 1 != v21)
        {
          v13 = *(_DWORD *)(*(_QWORD *)(a1 + 1720) + 4 * ++v21);
          if (v13)
          {
            LODWORD(v11) = v21;
            goto LABEL_20;
          }
        }
        v13 = 0;
      }
LABEL_20:
      v22 = __clz(__rbit32(v20)) | (32 * v19);
      if (v22 == -1)
        break;
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 488) + 8 * (v22 >> *(_DWORD *)(a1 + 464)))
          + 120 * ((*(_DWORD *)(a1 + 456) - 1) & v22);
      v24 = v28[4]
          + 32 * (*((_DWORD *)v28 + (*(_DWORD *)(v23 + 108) & 7)) + (*(_DWORD *)(v23 + 108) >> 3));
      v25 = *(unsigned __int8 *)(v24 + 25);
      v26 = *(unsigned __int8 *)(v24 + 27);
      if (v25 <= v26)
      {
        if (v25 < v26)
          *v16++ = v23;
      }
      else
      {
        *v17++ = v23;
      }
    }
    while (v13);
  }
  *a3 = (unint64_t)((char *)v17 - (char *)a2) >> 3;
  *a5 = (unint64_t)((char *)v16 - (char *)a4) >> 3;
  return 1;
}

void physx::PxsDefaultMemoryManager::~PxsDefaultMemoryManager(physx::PxsDefaultMemoryManager *this)
{
  unint64_t v2;
  void (***v3)(_QWORD);
  int v4;

  *(_QWORD *)this = &off_24ED8B6C0;
  if (*((_DWORD *)this + 4))
  {
    v2 = 0;
    do
    {
      v3 = *(void (****)(_QWORD))(*((_QWORD *)this + 1) + 8 * v2);
      (**v3)(v3);
      if (*(_QWORD *)(*((_QWORD *)this + 1) + 8 * v2))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 4));
  }
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 1) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

{
  physx::PxsDefaultMemoryManager::~PxsDefaultMemoryManager(this);
  JUMPOUT(0x2276933B8);
}

_QWORD *physx::PxsDefaultMemoryManager::createHostMemoryAllocator(physx::PxsDefaultMemoryManager *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsDefaultMemoryManager.cpp", 47);
  v3 = v2;
  *v2 = &off_24ED8B8B8;
  v6 = v2;
  v4 = *((unsigned int *)this + 4);
  if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v4)
  {
    physx::shdfnd::Array<physx::shdfnd::VirtualAllocatorCallback *,physx::shdfnd::ReflectionAllocator<physx::shdfnd::VirtualAllocatorCallback *>>::growAndPushBack((uint64_t)this + 8, &v6);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4) = v2;
    *((_DWORD *)this + 4) = v4 + 1;
  }
  return v3;
}

uint64_t physx::PxsDefaultMemoryManager::createDeviceMemoryAllocator(physx::PxsDefaultMemoryManager *this)
{
  return 0;
}

uint64_t physx::PxsDefaultMemoryManager::destroyMemoryAllocator(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t (***v3)(_QWORD);

  if (*(_DWORD *)(this + 16))
  {
    v1 = this;
    v2 = 0;
    do
    {
      v3 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(v1 + 8) + 8 * v2);
      this = (**v3)(v3);
      if (*(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v2))
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 16));
  }
  return this;
}

uint64_t physx::PxLightCpuTask::addReference(physx::PxLightCpuTask *this)
{
  return (*(uint64_t (**)(_QWORD, physx::PxLightCpuTask *))(**((_QWORD **)this + 2) + 152))(*((_QWORD *)this + 2), this);
}

uint64_t physx::PxLightCpuTask::getReference(physx::PxLightCpuTask *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::PxLightCpuTask::release(physx::PxLightCpuTask *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t physx::Cm::FlushPool::allocateNotThreadSafe(physx::Cm::FlushPool *this, int a2, unsigned int a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  v6 = (char *)this + 8;
  v5 = *((_QWORD *)this + 1);
  v8 = *((unsigned int *)this + 6);
  v7 = *((unsigned int *)this + 7);
  v9 = *(_QWORD *)(v5 + 8 * v8);
  v10 = a3 - 1;
  v11 = a3 - 1 + v9 + v7;
  v12 = -(uint64_t)a3;
  v13 = (v11 & v12) - (v9 + v7);
  v14 = a2 + (v11 & v12) - v9;
  v15 = *((unsigned int *)this + 8);
  if (v14 > v15)
  {
    v16 = v8 + 1;
    *((_QWORD *)this + 3) = (v8 + 1);
    v17 = *((_DWORD *)this + 4);
    if ((int)v8 + 1 >= v17)
    {
      if ((_DWORD)v15)
      {
        v19 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, v15, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmFlushPool.h", 88);
        v17 = *((_DWORD *)this + 4);
      }
      else
      {
        v19 = 0;
      }
      v21 = v19;
      if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v17)
      {
        physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)v6, &v21);
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v17) = v19;
        *((_DWORD *)this + 4) = v17 + 1;
      }
      v5 = *((_QWORD *)this + 1);
      v16 = *((_DWORD *)this + 6);
      v18 = *((_DWORD *)this + 7);
    }
    else
    {
      v18 = 0;
    }
    v9 = *(_QWORD *)(v5 + 8 * v16);
    v13 = ((v10 + v9) & v12) - v9;
    v7 = v18;
    v14 = v18 + a2 + v13;
  }
  result = v9 + v7 + v13;
  *((_DWORD *)this + 7) = v14;
  return result;
}

void physx::PxsCCDSweepTask::~PxsCCDSweepTask(physx::PxsCCDSweepTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Cm::Task::run(physx::Cm::Task *this)
{
  return (*(uint64_t (**)(physx::Cm::Task *))(*(_QWORD *)this + 64))(this);
}

const char *physx::PxsCCDSweepTask::getName(physx::PxsCCDSweepTask *this)
{
  return "PxsContext.CCDSweep";
}

void physx::PxsCCDSweepTask::runInternal(physx::PxsCCDSweepTask *this)
{
  unint64_t v2;
  physx::PxsCCDPair *v3;

  if (*((_DWORD *)this + 12))
  {
    v2 = 0;
    do
    {
      v3 = *(physx::PxsCCDPair **)(*((_QWORD *)this + 5) + 8 * v2);
      physx::PxsCCDPair::sweepEstimateToi(v3, *((float *)this + 13));
      *((_DWORD *)v3 + 29) = 0;
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 12));
  }
}

void physx::PxsCCDAdvanceTask::~PxsCCDAdvanceTask(physx::PxsCCDAdvanceTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::PxsCCDAdvanceTask::getName(physx::PxsCCDAdvanceTask *this)
{
  return "PxsContext.CCDAdvance";
}

uint64_t physx::PxsCCDAdvanceTask::runInternal(physx::PxsCCDAdvanceTask *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int *v11;
  double PoseToToi;
  float v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t i;
  uint64_t v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  int v59;
  int v60;
  uint64_t v61;
  float32x2_t *v62;
  uint64_t v63;
  int v64;
  int v65;
  BOOL v66;
  int v67;
  int **v68;
  int *v69;
  int **v70;
  float32x2_t *v71;
  float32x2_t *v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  __n128 v81;
  float v82;
  int v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  int v97;
  float v98;
  unsigned __int16 v99;
  uint64_t v100;
  float32x2_t *v101;
  unsigned __int16 v102;
  float32x2_t *v103;
  float v104;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  void (***v115)(_QWORD, __int128 *, uint64_t);
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  float32x2_t *v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  float *v124;
  float *v125;
  float *v126;
  uint64_t v127;
  char *v128;
  _BOOL4 v129;
  uint64_t v130;
  float32x2_t *v131;
  _BOOL4 v132;
  float32x2_t *v133;
  _BOOL4 v134;
  float v135;
  int v136;
  float *v137;
  float *v138;
  int v139;
  char v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  float32x2_t *v145;
  float32x2_t v146;
  int v147;
  uint64_t *v148;
  float v149;
  uint64_t v150;
  unsigned int v151;
  float32x2_t *v152;
  float32x2_t *v153;
  unsigned int v154;
  uint64_t v155;
  float32x2_t *v156;
  float32x2_t *v157;
  BOOL v158;
  BOOL v159;
  BOOL v160;
  BOOL v161;
  float v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  int v174;
  uint64_t v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float *v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float *v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  _DWORD *v224;
  _BOOL4 v225;
  float32x2_t v226;
  float v227;
  float v228;
  char v229;
  float32x2_t v230;
  float v231;
  float v232;
  char v233;
  _BOOL4 v234;
  unsigned int *v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v239;
  float v240;
  float v241;
  uint64_t v242;
  int v243;
  int v244;
  float v245;
  uint64_t v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  int v252;
  int v253;
  float v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned __int16 v258;
  unsigned __int16 v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  float v263;
  __n128 v264;
  float v265;
  float v266;
  float v267;
  void *v268[2];
  unint64_t v269;
  float v270;
  __int128 v271;
  __int128 *v272;
  char *v273;
  __int128 v274;
  unint64_t v275;
  float v276;
  __int128 v277;
  unint64_t v278;
  float v279;
  int v280;
  __int128 *v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;

  v290 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 7);
  v3 = (uint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 440));
  if (!v3)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpThreadContext>::getName() [T = physx::PxcNpThreadContext]";
    else
      v5 = "<allocation names disabled>";
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 7335, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v3 - 8) = v3 - v6;
    }
    else
    {
      v3 = 0;
    }
    physx::PxcNpThreadContext::PxcNpThreadContext(v3, *(_QWORD *)(v2 + 448));
  }
  v7 = *((unsigned int *)this + 22);
  LODWORD(v8) = *((_DWORD *)this + 23) + v7;
  v9 = *((_DWORD *)this + 24);
  if (v8 >= v9)
    v8 = v9;
  else
    v8 = v8;
  v239 = v8;
  v246 = v3;
  if (v7 < v8)
  {
    v253 = 0;
    v245 = *(float *)(*((_QWORD *)this + 8) + 472);
    LODWORD(v10) = *((_DWORD *)this + 25);
    v11 = (int *)(v3 + 7208);
    HIDWORD(PoseToToi) = 32;
    v13 = 1.0;
    v256 = v3 + 7208;
    while (1)
    {
      v14 = *((unsigned int *)this + 12);
      if (v10 >= v14)
        goto LABEL_327;
      v15 = v10;
      v16 = v10 + 1;
      LODWORD(v10) = v16;
      v255 = v7;
      if (v16 < v14)
      {
        v17 = *((_QWORD *)this + 5);
        v10 = v15 + 1;
        while (v7 == *(_DWORD *)(*(_QWORD *)(v17 + 8 * v10) + 80))
        {
          if (++v10 >= v14)
          {
            LODWORD(v10) = *((_DWORD *)this + 12);
            break;
          }
        }
        if (v10 > v16)
        {
          LOBYTE(v268[1]) = 0;
          v268[0] = &v282;
          HIDWORD(PoseToToi) = 32;
          *(_QWORD *)((char *)&v271 + 4) = 0x2000000000;
          v272 = &v282;
          LOBYTE(v273) = 0;
          v18 = v10 + ~v15;
          if (v18 >= 1)
          {
            v19 = 0;
            v20 = 0;
            HIDWORD(PoseToToi) = 0;
            v288 = 0u;
            v289 = 0u;
            v21 = v17 + 8 * v15;
            v286 = 0u;
            v287 = 0u;
            v284 = 0u;
            v285 = 0u;
            v22 = v21 + 8;
            v23 = &v282;
            v282 = 0u;
            v283 = 0u;
            while (1)
            {
              if (v18 > v20)
              {
                if ((v18 - v20) < 5)
                {
LABEL_65:
                  v47 = v20;
                  v48 = v20 + 1;
                  v49 = v22 + 8 * v20;
                  do
                  {
                    v50 = 0;
                    v51 = v47++;
                    v52 = v51;
                    do
                    {
                      v53 = *(_QWORD *)(v49 + 8 * v50);
                      v54 = *(float *)(v53 + 44);
                      v55 = *(_QWORD *)(v21 + 8 * v52);
                      v56 = *(float *)(v55 + 44);
                      if (v54 < v56 || v54 == v56 && *(_QWORD *)(v53 + 8) && !*(_QWORD *)(v55 + 8))
                        v52 = v48 + v50;
                      ++v50;
                    }
                    while (v51 + v50 < v18);
                    if (v52 != (_DWORD)v51)
                    {
                      v57 = *(_QWORD *)(v21 + 8 * v52);
                      *(_QWORD *)(v21 + 8 * v52) = *(_QWORD *)(v21 + 8 * v51);
                      *(_QWORD *)(v21 + 8 * v51) = v57;
                    }
                    ++v48;
                    v49 += 8;
                  }
                  while (v47 != v18);
                }
                else
                {
                  while (1)
                  {
                    v24 = (uint64_t)(v18 + v20 + (v18 + v20 < 0)) >> 1;
                    v25 = *(_QWORD *)(v21 + 8 * ((v18 + v20) / 2));
                    v26 = *(float *)(v25 + 44);
                    v27 = *(_QWORD *)(v21 + 8 * v20);
                    v28 = *(float *)(v27 + 44);
                    if (v26 < v28 || v26 == v28 && *(_QWORD *)(v25 + 8) && !*(_QWORD *)(v27 + 8))
                    {
                      *(_QWORD *)(v21 + 8 * v20) = v25;
                      *(_QWORD *)(v21 + 8 * v24) = v27;
                      v25 = v27;
                      v27 = *(_QWORD *)(v21 + 8 * v20);
                      v28 = *(float *)(v27 + 44);
                    }
                    v29 = *(_QWORD *)(v21 + 8 * v18);
                    v30 = *(float *)(v29 + 44);
                    if (v30 < v28 || v30 == v28 && *(_QWORD *)(v29 + 8) && !*(_QWORD *)(v27 + 8))
                    {
                      *(_QWORD *)(v21 + 8 * v20) = v29;
                      *(_QWORD *)(v21 + 8 * v18) = v27;
                      v25 = *(_QWORD *)(v21 + 8 * v24);
                    }
                    else
                    {
                      v28 = *(float *)(v29 + 44);
                      v27 = *(_QWORD *)(v21 + 8 * v18);
                    }
                    v31 = *(float *)(v25 + 44);
                    if (v28 < v31 || v28 == v31 && *(_QWORD *)(v27 + 8) && !*(_QWORD *)(v25 + 8))
                    {
                      *(_QWORD *)(v21 + 8 * v24) = v27;
                      *(_QWORD *)(v21 + 8 * v18) = v25;
                      v25 = *(_QWORD *)(v21 + 8 * v24);
                    }
                    v32 = v18 - 1;
                    *(_QWORD *)(v21 + 8 * v24) = *(_QWORD *)(v21 + 8 * v32);
                    *(_QWORD *)(v21 + 8 * v32) = v25;
                    v33 = v20;
                    v34 = v18 - 1;
                    while (1)
                    {
                      v35 = 0;
                      v36 = *(float *)(v25 + 44);
                      v37 = v33;
                      v38 = v22 + 8 * v33;
                      while (1)
                      {
                        v39 = *(_QWORD *)(v38 + 8 * v35);
                        v40 = *(float *)(v39 + 44);
                        if (v40 >= v36 && (v40 != v36 || !*(_QWORD *)(v39 + 8) || *(_QWORD *)(v25 + 8)))
                          break;
                        ++v35;
                      }
                      v33 = v35 + v37 + 1;
                      for (i = v21 - 8 + 8 * v34--; ; i -= 8)
                      {
                        v42 = *(_QWORD *)i;
                        v43 = *(float *)(*(_QWORD *)i + 44);
                        if (v36 >= v43 && (v36 != v43 || !*(_QWORD *)(v25 + 8) || *(_QWORD *)(v42 + 8)))
                          break;
                        --v34;
                      }
                      if (v33 >= v34)
                        break;
                      *(_QWORD *)(v22 + 8 * v37 + 8 * v35) = v42;
                      *(_QWORD *)i = v39;
                      v25 = *(_QWORD *)(v21 + 8 * v32);
                    }
                    *(_QWORD *)(v22 + 8 * v37 + 8 * v35) = v25;
                    *(_QWORD *)(v21 + 8 * v32) = v39;
                    v44 = DWORD2(v271) - 1;
                    if ((int)v37 - v20 + (int)v35 + 1 >= ~(_DWORD)v37 + v18 - (int)v35)
                    {
                      if (v19 >= v44)
                      {
                        physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow((uint64_t)&v271);
                        v19 = DWORD1(v271);
                        v23 = v272;
                      }
                      *((_DWORD *)v23 + v19) = v35 + v37 + 2;
                      v46 = v19 + 1;
                      v19 += 2;
                      DWORD1(v271) = v19;
                      *((_DWORD *)v23 + v46) = v18;
                      v18 = v37 + v35;
                    }
                    else
                    {
                      if (v19 >= v44)
                      {
                        physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow((uint64_t)&v271);
                        v19 = DWORD1(v271);
                        v23 = v272;
                      }
                      v45 = v19 + 1;
                      *((_DWORD *)v23 + v19) = v20;
                      v19 += 2;
                      DWORD1(v271) = v19;
                      *((_DWORD *)v23 + v45) = v35 + v37;
                      v20 = v37 + v35 + 2;
                    }
                    if (v18 <= v20)
                      break;
                    if ((v18 - v20) <= 4)
                      goto LABEL_65;
                  }
                }
              }
              if (!v19)
                break;
              DWORD1(v271) = v19 - 1;
              v18 = *((_DWORD *)v23 + v19 - 1);
              v19 -= 2;
              DWORD1(v271) = v19;
              v20 = *((_DWORD *)v23 + v19);
            }
            if ((_BYTE)v273)
              _ZF = v23 == 0;
            else
              _ZF = 1;
            LODWORD(v7) = v255;
            v11 = (int *)v256;
            if (!_ZF)
            {
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v23);
              if (LOBYTE(v268[1]))
                physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v268, (char *)v268[0]);
            }
          }
        }
      }
      if (v15 < v10)
        break;
LABEL_324:
      v7 = v255 + 1;
      if (v255 + 1 == v239)
        goto LABEL_327;
    }
    v254 = *((float *)this + 18);
    v242 = (v7 - 1);
    v59 = v10 - 1;
    v60 = 1;
    while (1)
    {
      v61 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v15);
      LODWORD(PoseToToi) = *(_DWORD *)(v61 + 44);
      if (*(float *)&PoseToToi > v13)
        goto LABEL_324;
      v62 = *(float32x2_t **)v61;
      if (*(_QWORD *)v61)
        LODWORD(v62) = *(unsigned __int8 *)(*(_QWORD *)&v62[4] + 34) == 0;
      v63 = *(_QWORD *)(v61 + 8);
      if (v63)
        LODWORD(v63) = *(unsigned __int8 *)(*(_QWORD *)(v63 + 32) + 34) == 0;
      if ((v62 | v63) != 1)
        goto LABEL_242;
      if (!*(_DWORD *)(v61 + 128))
        break;
LABEL_150:
      if (*(float *)&PoseToToi > v13)
        goto LABEL_324;
      if (*(float *)&PoseToToi <= 3.4028e38)
      {
        if (*(_BYTE *)(v61 + 93))
        {
          v115 = *(void (****)(_QWORD, __int128 *, uint64_t))(*((_QWORD *)this + 8) + 168);
          if (v115)
          {
            __asm { FMOV            V0.4S, #1.0 }
            v282 = _Q0;
            *(_QWORD *)&v283 = *(_QWORD *)(v61 + 32);
            v117 = *(_DWORD *)(v61 + 104);
            v118 = *(_DWORD *)(v61 + 108);
            DWORD2(v283) = *(_DWORD *)(v61 + 40);
            *(_QWORD *)&v284 = __PAIR64__(v118, v117);
            HIDWORD(v284) = *(_DWORD *)(v61 + 100);
            DWORD2(v284) = 256;
            *(_QWORD *)&v285 = *(_QWORD *)(v61 + 52);
            *((_QWORD *)&v285 + 1) = *(unsigned int *)(v61 + 60);
            *(_QWORD *)&v287 = *(_QWORD *)(v61 + 32);
            LODWORD(_Q0) = *(_DWORD *)(v61 + 40);
            DWORD1(v288) = HIDWORD(v284);
            *((_QWORD *)&v288 + 1) = __PAIR64__(v117, v118);
            *((_QWORD *)&v287 + 1) = __PAIR64__(*(_DWORD *)(v61 + 112), _Q0);
            LODWORD(v288) = 0;
            *(_QWORD *)&v286 = 0;
            *((_QWORD *)&v286 + 1) = 0x7F7FFFFF00000000;
            v120 = *(float32x2_t **)v61;
            v119 = *(_QWORD *)(v61 + 8);
            v122 = *(_QWORD *)(v61 + 16);
            v121 = *(_QWORD *)(v61 + 24);
            v124 = *(float **)(v121 + 96);
            v123 = *(float **)(v121 + 104);
            v125 = *(float **)(v122 + 96);
            v126 = *(float **)(v122 + 104);
            v272 = (__int128 *)((char *)v125 + physx::gPxvOffsetTable);
            v273 = (char *)v124 + physx::gPxvOffsetTable;
            if (v120)
              v127 = *((_QWORD *)&physx::gPxvOffsetTable + 1);
            else
              v127 = qword_25582F930;
            v128 = (char *)v126 + v127;
            v129 = v119 != 0;
            if (v119)
              v130 = *((_QWORD *)&physx::gPxvOffsetTable + 1);
            else
              v130 = qword_25582F930;
            *(_QWORD *)&v271 = v128;
            *((_QWORD *)&v271 + 1) = (char *)v123 + v130;
            v274 = *(_OWORD *)v268;
            v275 = v269;
            v276 = v270;
            v277 = *(_OWORD *)v268;
            v278 = v269;
            v279 = v270;
            v280 = 1;
            v281 = &v285;
            (**v115)(v115, &v271, 1);
            if ((BYTE11(v284) & 0x20) != 0)
              *(_DWORD *)(v61 + 124) = HIDWORD(v286);
            *(int32x2_t *)(v61 + 104) = vrev64_s32(*(int32x2_t *)((char *)&v288 + 8));
            *(_DWORD *)(v61 + 112) = HIDWORD(v287);
            *(_QWORD *)(v61 + 52) = v285;
            *(_DWORD *)(v61 + 60) = DWORD2(v285);
            HIDWORD(PoseToToi) = DWORD1(v287);
            *(_QWORD *)(v61 + 32) = v287;
            *(_DWORD *)(v61 + 40) = DWORD2(v287);
          }
        }
      }
      v131 = *(float32x2_t **)v61;
      v132 = *(_QWORD *)v61 == 0;
      if (*(_QWORD *)v61 && !*(_BYTE *)(*(_QWORD *)&v131[4] + 34))
        v132 = 1;
      v133 = *(float32x2_t **)(v61 + 8);
      v134 = v133 == 0;
      if (v133 && !*(_BYTE *)(*(_QWORD *)&v133[4] + 34))
        v134 = 1;
      v135 = *(float *)(v61 + 44);
      if (v132 && v134 && v135 <= v13)
        *(_BYTE *)(v61 + 92) = 1;
      v136 = *((unsigned __int8 *)this + 128);
      v138 = *(float **)(v61 + 16);
      v137 = *(float **)(v61 + 24);
      if (v131 && !*(_BYTE *)(*(_QWORD *)&v131[4] + 34))
      {
        if (*(float *)(*(_QWORD *)&v131[5] + 124) == 0.0)
        {
          if (!v133)
            goto LABEL_176;
LABEL_246:
          v139 = 0;
          if (v135 >= v13 || *(float *)(*(_QWORD *)&v133[5] + 124) == 0.0)
            goto LABEL_177;
          goto LABEL_250;
        }
      }
      else
      {
        if (!v133 || *(_BYTE *)(*(_QWORD *)&v133[4] + 34))
        {
LABEL_176:
          v139 = 0;
          goto LABEL_177;
        }
        if (!v131 || *(float *)(*(_QWORD *)&v131[5] + 124) == 0.0)
          goto LABEL_246;
      }
      if (v135 >= v13)
        goto LABEL_176;
LABEL_250:
      v175 = *(_QWORD *)(v61 + 72);
      if ((*(_WORD *)(v175 + 80) & 0x800) != 0)
        goto LABEL_252;
      v176 = *(float *)(v61 + 124);
      if (v176 == 0.0)
        goto LABEL_252;
      v177 = *(float *)(v61 + 32);
      if ((~LODWORD(v177) & 0x7F800000) != 0)
      {
        v178 = *(float *)(v61 + 36);
        if ((~LODWORD(v178) & 0x7F800000) != 0)
        {
          v179 = *(float *)(v61 + 40);
          if ((~LODWORD(v179) & 0x7F800000) != 0
            && fabsf(sqrtf((float)((float)(v178 * v178) + (float)(v177 * v177)) + (float)(v179 * v179)) + -1.0) < 0.0001)
          {
            v180 = 0.0;
            v181 = 0.0;
            v182 = 0.0;
            v183 = 0.0;
            v184 = 0.0;
            if (v131)
            {
              LOBYTE(v184) = *(_BYTE *)(v175 + 84);
              v185 = (float *)v131[5];
              v186 = v138[14] - v185[4];
              v187 = v138[15] - v185[5];
              v188 = v138[16] - v185[6];
              v190 = v185[21];
              v189 = v185[22];
              v191 = v185[20];
              v192 = (float)(v190 * v188) - (float)(v189 * v187);
              v193 = (float)(v189 * v186) - (float)(v191 * v188);
              v194 = (float)(v191 * v187) - (float)(v190 * v186);
              v181 = v185[16] + v192;
              v182 = v185[17] + v193;
              v183 = v194 + v185[18];
              v184 = v185[31] * (float)LODWORD(v184);
            }
            v195 = 0.0;
            v196 = 0.0;
            v197 = 0.0;
            if (v133)
            {
              LOBYTE(v197) = *(_BYTE *)(v175 + 85);
              v198 = (float *)v133[5];
              v199 = v137[14] - v198[4];
              v200 = v137[15] - v198[5];
              v201 = v137[16] - v198[6];
              v203 = v198[21];
              v202 = v198[22];
              v204 = v198[20];
              v205 = (float)(v203 * v201) - (float)(v202 * v200);
              v206 = (float)(v202 * v199) - (float)(v204 * v201);
              v207 = (float)(v204 * v200) - (float)(v203 * v199);
              v180 = v198[16] + v205;
              v195 = v198[17] + v206;
              v196 = v207 + v198[18];
              v197 = v198[31] * (float)LODWORD(v197);
            }
            v208 = v180 - v181;
            v209 = v195 - v182;
            v210 = v196 - v183;
            v211 = (float)((float)(v178 * v209) + (float)((float)(v180 - v181) * v177)) + (float)(v210 * v179);
            v212 = v211 - (float)(*(float *)(v61 + 64) * 10.0);
            if (v212 >= -0.000001)
              goto LABEL_278;
            v213 = -v176;
            v214 = (float)((float)(*(float *)(v61 + 112) + v13) * v212) / (float)(v184 + v197);
            if (v214 >= v213)
              v215 = v214;
            else
              v215 = v213;
            v216 = v177 * v215;
            v217 = v178 * v215;
            v218 = v179 * v215;
            if (*(_BYTE *)(v61 + 132))
            {
              v219 = v208 - (float)(v177 * v211);
              v220 = v209 - (float)(v178 * v211);
              v221 = v210 - (float)(v179 * v211);
              v222 = sqrtf((float)((float)(v220 * v220) + (float)(v219 * v219)) + (float)(v221 * v221));
              if (v222 > 0.0)
              {
                v219 = v219 * (float)(v13 / v222);
                v220 = v220 * (float)(v13 / v222);
                v221 = v221 * (float)(v13 / v222);
              }
              v223 = v222 / (float)(v184 + v197);
              if (fabsf(*(float *)(v61 + 108) * v215) < v223)
                v223 = -(float)(v215 * *(float *)(v61 + 104));
              v216 = v216 + (float)(v223 * v219);
              v217 = v217 + (float)(v223 * v220);
              v218 = v218 + (float)(v223 * v221);
            }
            if (v215 >= 0.0)
              goto LABEL_278;
            *(float *)(v61 + 120) = -v215;
            if (v131 && *(_BYTE *)(*(_QWORD *)&v131[4] + 34) || v133 && *(_BYTE *)(*(_QWORD *)&v133[4] + 34))
            {
              v224 = (_DWORD *)(v61 + 48);
              goto LABEL_277;
            }
            if (!v131)
              goto LABEL_291;
            v226 = v131[5];
            v227 = (float)(v184 * v217) + *(float *)(*(_QWORD *)&v226 + 68);
            v228 = *(float *)(*(_QWORD *)&v226 + 72);
            *(float *)(*(_QWORD *)&v226 + 64) = (float)(v184 * v216) + *(float *)(*(_QWORD *)&v226 + 64);
            *(float *)(*(_QWORD *)&v226 + 68) = v227;
            *(float *)(*(_QWORD *)&v226 + 72) = (float)(v184 * v218) + v228;
            v229 = *(_BYTE *)(*(_QWORD *)&v226 + 158);
            if (!v229)
              goto LABEL_291;
            if ((*(_BYTE *)(*(_QWORD *)&v226 + 158) & 1) == 0)
            {
              if ((*(_BYTE *)(*(_QWORD *)&v226 + 158) & 2) == 0)
                goto LABEL_289;
LABEL_319:
              *(_DWORD *)(*(_QWORD *)&v226 + 68) = 0;
              if ((v229 & 4) == 0)
                goto LABEL_291;
LABEL_290:
              *(_DWORD *)(*(_QWORD *)&v226 + 72) = 0;
              goto LABEL_291;
            }
            *(_DWORD *)(*(_QWORD *)&v226 + 64) = 0;
            if ((v229 & 2) != 0)
              goto LABEL_319;
LABEL_289:
            if ((v229 & 4) != 0)
              goto LABEL_290;
LABEL_291:
            if (!v133)
              goto LABEL_278;
            v230 = v133[5];
            v231 = *(float *)(*(_QWORD *)&v230 + 72);
            v224 = (_DWORD *)(*(_QWORD *)&v230 + 72);
            v232 = *(float *)(*(_QWORD *)&v230 + 68) - (float)(v197 * v217);
            *(float *)(*(_QWORD *)&v230 + 64) = *(float *)(*(_QWORD *)&v230 + 64) - (float)(v197 * v216);
            *(float *)(*(_QWORD *)&v230 + 68) = v232;
            *(float *)(*(_QWORD *)&v230 + 72) = v231 - (float)(v197 * v218);
            v233 = *(_BYTE *)(*(_QWORD *)&v230 + 158);
            if (!v233)
              goto LABEL_278;
            if ((*(_BYTE *)(*(_QWORD *)&v230 + 158) & 1) != 0)
            {
              *(_DWORD *)(*(_QWORD *)&v230 + 64) = 0;
              if ((v233 & 2) != 0)
                goto LABEL_322;
LABEL_295:
              if ((v233 & 4) == 0)
              {
LABEL_278:
                if (v131 && !*(_BYTE *)(*(_QWORD *)&v131[4] + 34))
                {
                  *(float *)&PoseToToi = v135;
                  physx::PxsRigidBody::advancePrevPoseToToi(v131, PoseToToi);
                  if (v136)
                    v225 = *(float *)(v61 + 48) == 0.0;
                  else
                    v225 = 0;
                  physx::PxsRigidBody::advanceToToi(v131, v135, v254, v225);
                  ++*(_DWORD *)(*(_QWORD *)&v131[4] + 56);
                }
                if (v133 && !*(_BYTE *)(*(_QWORD *)&v133[4] + 34))
                {
                  *(float *)&PoseToToi = v135;
                  physx::PxsRigidBody::advancePrevPoseToToi(v133, PoseToToi);
                  if (v136)
                    v234 = *(float *)(v61 + 48) == 0.0;
                  else
                    v234 = 0;
                  physx::PxsRigidBody::advanceToToi(v133, v135, v254, v234);
                  ++*(_DWORD *)(*(_QWORD *)&v133[4] + 56);
                }
                LODWORD(PoseToToi) = *(_DWORD *)(v61 + 48);
                if (*(float *)&PoseToToi > 0.0)
                {
                  if (v131)
                  {
                    if (!*(_BYTE *)(*(_QWORD *)&v131[4] + 34))
                    {
                      PoseToToi = physx::PxsRigidBody::advancePrevPoseToToi(v131, PoseToToi);
                      if (v136)
                        physx::PxsRigidBody::advanceToToi(v131, *(float *)(v61 + 48), v254, 1);
                    }
                  }
                  if (v133)
                  {
                    if (!*(_BYTE *)(*(_QWORD *)&v133[4] + 34))
                    {
                      LODWORD(PoseToToi) = *(_DWORD *)(v61 + 48);
                      PoseToToi = physx::PxsRigidBody::advancePrevPoseToToi(v133, PoseToToi);
                      if (v136)
                        physx::PxsRigidBody::advanceToToi(v133, *(float *)(v61 + 48), v254, 1);
                    }
                  }
                }
                if (v131)
                  *(_WORD *)(*(_QWORD *)&v131[4] + 34) = 257;
                if (v133)
                  *(_WORD *)(*(_QWORD *)&v133[4] + 34) = 257;
LABEL_252:
                v139 = 1;
                goto LABEL_177;
              }
            }
            else
            {
              if ((*(_BYTE *)(*(_QWORD *)&v230 + 158) & 2) == 0)
                goto LABEL_295;
LABEL_322:
              *(_DWORD *)(*(_QWORD *)&v230 + 68) = 0;
              if ((v233 & 4) == 0)
                goto LABEL_278;
            }
LABEL_277:
            *v224 = 0;
            goto LABEL_278;
          }
        }
      }
      if (!v131 || *(_BYTE *)(*(_QWORD *)&v131[4] + 34))
        goto LABEL_252;
      *(float *)&PoseToToi = v135;
      physx::PxsRigidBody::advancePrevPoseToToi(v131, PoseToToi);
      v139 = 1;
      physx::PxsRigidBody::advanceToToi(v131, v135, v254, 1);
      ++*(_DWORD *)(*(_QWORD *)&v131[4] + 56);
LABEL_177:
      LODWORD(PoseToToi) = *(_DWORD *)(v61 + 44);
      if (*(float *)&PoseToToi >= 0.0)
      {
        if (*(float *)&PoseToToi <= v13)
          v140 = v139;
        else
          v140 = 0;
        v11 = (int *)v256;
        if ((v140 & 1) != 0)
        {
LABEL_184:
          v141 = *((_QWORD *)this + 14);
          if (v255)
            v142 = *(unsigned __int16 *)(v141 + 2 * v242);
          else
            v142 = 0;
          if (*(float *)&PoseToToi > 0.0)
          {
            v143 = *(unsigned __int16 *)(v141 + 2 * v255);
            if (v142 < v143)
            {
              do
              {
                v144 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v142);
                if (!*(_BYTE *)(v144 + 34))
                {
                  v145 = *(float32x2_t **)(v144 + 40);
                  PoseToToi = physx::PxsRigidBody::advancePrevPoseToToi(v145, PoseToToi);
                  v146 = v145[4];
                  LODWORD(PoseToToi) = *(_DWORD *)(v61 + 44);
                  *(float *)(*(_QWORD *)&v146 + 36) = fmaxf(*(float *)(*(_QWORD *)&v146 + 36)* (float)(v13 - *(float *)&PoseToToi), 0.01);
                  ++*(_DWORD *)(*(_QWORD *)&v146 + 56);
                }
                ++v142;
              }
              while (v143 != v142);
            }
            v254 = v254 - (float)(v254 * *(float *)&PoseToToi);
            if (v15 + 1 < v10)
            {
              v147 = v59 - v15;
              v148 = (uint64_t *)(*((_QWORD *)this + 5) + 8 * (v15 + 1));
              v149 = v13 / (float)(v13 - *(float *)&PoseToToi);
              do
              {
                v150 = *v148++;
                *(float *)(v150 + 44) = v149 * (float)(*(float *)(v150 + 44) - *(float *)(v61 + 44));
                --v147;
              }
              while (v147);
            }
          }
          if (!*((_BYTE *)this + 129)
            && (*(_WORD *)(*(_QWORD *)(v61 + 72) + 80) & 0x800) == 0
            && *(float *)(v61 + 124) != 0.0)
          {
            v151 = v15 + 1;
            if (v15 + 1 < v10)
            {
              v153 = *(float32x2_t **)v61;
              v152 = *(float32x2_t **)(v61 + 8);
              v154 = v15;
              do
              {
                v155 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v151);
                v156 = *(float32x2_t **)v155;
                if (*(_QWORD *)v155)
                {
                  v157 = *(float32x2_t **)(v155 + 8);
                  if (v157)
                  {
                    v158 = v156 != v153 || v157 == v152;
                    if (!v158
                      || (v157 == v153 ? (v159 = v156 == v152) : (v159 = 1),
                          !v159
                       || (v156 == v152 ? (v160 = v157 == v153) : (v160 = 1),
                           !v160 || (v157 == v152 ? (v161 = v156 == v153) : (v161 = 1), !v161))))
                    {
                      if (v60 != *(_DWORD *)(v155 + 116))
                      {
                        *(_DWORD *)(v155 + 116) = v60;
                        v162 = *(float *)(v155 + 44);
                        physx::PxsCCDPair::sweepEstimateToi((physx::PxsCCDPair *)v155, v245);
                        if (*(float *)&PoseToToi >= v162)
                        {
                          if (*(float *)&PoseToToi > v162)
                          {
                            v168 = v151 + 1;
                            if (v168 >= v10
                              || (v169 = *((_QWORD *)this + 5),
                                  v170 = (uint64_t *)(v169 + 8 * v168),
                                  v171 = *v170,
                                  *(float *)(*v170 + 44) >= *(float *)&PoseToToi))
                            {
                              v174 = 0;
                            }
                            else
                            {
                              v172 = 8 * v168 + 8;
                              v173 = v151;
                              do
                              {
                                *v170 = *(_QWORD *)(v169 + 8 * v173);
                                *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v173) = v171;
                                if ((_DWORD)v10 - 2 == v173)
                                  break;
                                ++v168;
                                v169 = *((_QWORD *)this + 5);
                                v170 = (uint64_t *)(v169 + 8 * v168);
                                v171 = *(_QWORD *)(v169 + v172);
                                ++v173;
                                v172 += 8;
                              }
                              while (*(float *)(v171 + 44) < *(float *)&PoseToToi);
                              v174 = -1;
                            }
                            v151 += v174;
                          }
                        }
                        else if (v154 > v15)
                        {
                          v163 = 8 * v154;
                          v164 = v151;
                          do
                          {
                            v165 = *((_QWORD *)this + 5);
                            v166 = *(_QWORD *)(v165 + v163);
                            if (*(float *)(v166 + 44) <= *(float *)&PoseToToi)
                              break;
                            v167 = v154;
                            *(_QWORD *)(v165 + v163) = *(_QWORD *)(v165 + 8 * v164);
                            *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v164) = v166;
                            --v154;
                            v163 -= 8;
                            v164 = v167;
                          }
                          while (v15 < v154);
                        }
                      }
                    }
                  }
                }
                v154 = v151++;
              }
              while (v151 < v10);
            }
          }
          ++v253;
          ++v60;
          v11 = (int *)v256;
        }
      }
      else
      {
        *(_DWORD *)(v61 + 44) = 0;
        LODWORD(PoseToToi) = 0;
        v11 = (int *)v256;
        if (v139)
          goto LABEL_184;
      }
LABEL_242:
      if (++v15 >= v10)
        goto LABEL_324;
    }
    v252 = v60;
    physx::PxsCCDPair::updateShapes((physx::PxsCCDPair *)v61);
    v64 = *(_DWORD *)(v61 + 84);
    v65 = *(_DWORD *)(v61 + 88);
    v66 = v65 < v64;
    if (v65 < v64)
      v67 = *(_DWORD *)(v61 + 84);
    else
      v67 = *(_DWORD *)(v61 + 88);
    if (v65 < v64)
      v64 = *(_DWORD *)(v61 + 88);
    v243 = v67;
    v244 = v64;
    if (v66)
      v68 = *(int ***)(v61 + 16);
    else
      v68 = *(int ***)(v61 + 24);
    v69 = v11;
    if (v66)
      v70 = *(int ***)(v61 + 24);
    else
      v70 = *(int ***)(v61 + 16);
    if (v66)
      v71 = *(float32x2_t **)v61;
    else
      v71 = *(float32x2_t **)(v61 + 8);
    if (v66)
      v72 = *(float32x2_t **)(v61 + 8);
    else
      v72 = *(float32x2_t **)v61;
    v282 = *(_OWORD *)(v70 + 5);
    v250 = *((float *)v70 + 15);
    v251 = *((float *)v70 + 14);
    *(_QWORD *)&v283 = __PAIR64__(LODWORD(v250), LODWORD(v251));
    v248 = *((float *)v70 + 16);
    *((float *)&v283 + 2) = v248;
    *(_OWORD *)v268 = *(_OWORD *)((char *)v70 + 12);
    v73 = *((float *)v70 + 8);
    v249 = *((float *)v70 + 7);
    v269 = __PAIR64__(LODWORD(v73), LODWORD(v249));
    v247 = v73;
    v74 = *((float *)v70 + 9);
    v270 = v74;
    v271 = *(_OWORD *)(v68 + 5);
    v76 = *((float *)v68 + 14);
    v75 = *((float *)v68 + 15);
    v272 = (__int128 *)__PAIR64__(LODWORD(v75), LODWORD(v76));
    v77 = *((float *)v68 + 16);
    *(float *)&v273 = v77;
    v81 = *(__n128 *)((char *)v68 + 12);
    v264 = v81;
    v79 = *((float *)v68 + 7);
    v78 = *((float *)v68 + 8);
    v265 = v79;
    v266 = v78;
    v80 = *((float *)v68 + 9);
    v267 = v80;
    v262 = 0;
    v263 = 0.0;
    v260 = 0;
    v261 = 0;
    v81.n128_u64[0] = *(unsigned int *)(*(_QWORD *)(v61 + 72) + 92);
    v81.n128_f32[0] = fmaxf(v81.n128_f32[0], 0.0);
    *(float *)(v246 + 7200) = v254;
    *(_DWORD *)(v246 + 7208) = -1;
    v240 = *((float *)v70 + 2);
    v241 = *((float *)v68 + 2);
    if ((float)(v240 + v241) >= v245)
      v82 = v245;
    else
      v82 = v240 + v241;
    *(float *)&PoseToToi = ((float (*)(int **, int **, __int128 *, __int128 *, void **, __n128 *, uint64_t *, uint64_t *, __n128, float, float, int *))*(&physx::Gu::g_SweepMethodTable[7 * **v70] + **v68))(v70, v68, &v282, &v271, v268, &v264, &v262, &v260, v81, *(float *)(v61 + 44), v82, v69);
    if (*(float *)&PoseToToi >= 1.0)
    {
      *(_DWORD *)(v61 + 128) = 1;
      *(_DWORD *)(v61 + 64) = 0;
      HIDWORD(PoseToToi) = 0;
      *(_QWORD *)(v61 + 44) = 2139095039;
      goto LABEL_119;
    }
    v83 = *v69;
    *(_DWORD *)(v61 + 96) = *v69;
    v84 = v262;
    v85 = v263;
    v86 = v263;
    v87 = *((float *)&v262 + 1);
    v88 = *(float *)&v262;
    if (*(_DWORD *)(v61 + 88) >= *(_DWORD *)(v61 + 84))
    {
      v88 = -*(float *)&v262;
      v87 = -*((float *)&v262 + 1);
      v86 = -v263;
      *(float *)&v262 = -*(float *)&v262;
      *((float *)&v262 + 1) = -*((float *)&v84 + 1);
      v263 = -v263;
    }
    v89 = (float)((float)-(float)(*((float *)&v84 + 1) * (float)((float)(v250 - v247) - (float)(v75 - v78)))
                - (float)((float)((float)(v251 - v249) - (float)(v76 - v79)) * *(float *)&v84))
        - (float)((float)((float)(v248 - v74) - (float)(v77 - v80)) * v85);
    *(_DWORD *)(v61 + 128) = 1;
    if (v89 < v82)
    {
      *(_DWORD *)(v61 + 44) = 2139095039;
LABEL_119:
      LODWORD(PoseToToi) = 2139095039;
      v13 = 1.0;
      goto LABEL_143;
    }
    v13 = 1.0;
    if (*(float *)&PoseToToi <= 0.0)
    {
      v91 = 1.0;
      v92 = 1.0;
      if (v72)
        v92 = *(float *)(*(_QWORD *)&v72[4] + 36);
      v93 = v241;
      if (v71)
        v91 = *(float *)(*(_QWORD *)&v71[4] + 36);
      if (v92 >= v91)
        v92 = v91;
      v90 = -*(float *)&PoseToToi;
      LODWORD(PoseToToi) = 0;
      if (v92 == 1.0)
      {
        v94 = 1.0;
        v95 = 1.0;
        if (v72)
          v95 = *(float *)(*(_QWORD *)&v72[5] + 60);
        if (v71)
          v94 = *(float *)(*(_QWORD *)&v71[5] + 60);
        else
          v93 = 3.4028e38;
        v97 = v243;
        if (v95 < v94)
          v94 = v95;
        v98 = v240;
        if (v240 >= v93)
          v98 = v93;
        v96 = (float)(v98 * v94) / v89;
        goto LABEL_140;
      }
    }
    else
    {
      v90 = 0.0;
    }
    v96 = 0.0;
    v97 = v243;
LABEL_140:
    *(_DWORD *)(v61 + 44) = LODWORD(PoseToToi);
    *(float *)(v61 + 48) = v96;
    *(_QWORD *)(v61 + 52) = v260;
    *(_DWORD *)(v61 + 60) = v261;
    *(float *)(v61 + 64) = v90;
    *(float *)(v61 + 32) = v88;
    *(float *)(v61 + 36) = v87;
    *(float *)(v61 + 40) = v86;
    if ((v97 - 5) >= 2)
      v83 = -1;
    *(_DWORD *)(v246 + 4656) = 1;
    *(float *)(v246 + 560) = v88;
    *(float *)(v246 + 564) = v87;
    *(float *)(v246 + 568) = v86;
    *(_QWORD *)(v246 + 576) = *(_QWORD *)(v61 + 52);
    *(_DWORD *)(v246 + 584) = *(_DWORD *)(v61 + 60);
    *(_DWORD *)(v246 + 572) = 0;
    *(_DWORD *)(v246 + 612) = v83;
    ((void (*)(int *, _QWORD, uint64_t, unsigned __int16 *))physx::g_GetSingleMaterialMethodTable[v244])(v70[12], 0, v246, &v258);
    ((void (*)(int *, uint64_t, uint64_t, unsigned __int16 *))physx::g_GetSingleMaterialMethodTable[v97])(v68[12], 1, v246, &v258);
    v99 = v258;
    v100 = **(_QWORD **)(v246 + 7256);
    v101 = (float32x2_t *)(v100 + 32 * v258);
    v102 = v259;
    v103 = (float32x2_t *)(v100 + 32 * v259);
    v104 = physx::PxsMaterialCombiner::combineRestitution((uint64_t)v101, (uint64_t)v103);
    __asm { FMOV            V0.2S, #1.0 }
    v257 = _D0;
    v109 = physx::PxsMaterialCombiner::combineIsotropicFriction((float *)&v257, v101, v103);
    *(_WORD *)(v61 + 100) = v99;
    *(_WORD *)(v61 + 102) = v102;
    *(_DWORD *)(v61 + 104) = HIDWORD(v109);
    *(_DWORD *)(v61 + 108) = v109;
    *(float *)(v61 + 112) = v104;
    LODWORD(PoseToToi) = *(_DWORD *)(v61 + 44);
LABEL_143:
    v110 = v15 + 1;
    v11 = (int *)v256;
    v60 = v252;
    if (v110 < v10
      && *(float *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v110) + 44) < *(float *)&PoseToToi)
    {
      v111 = 8 * v110;
      v112 = v15;
      while (1)
      {
        v113 = *((_QWORD *)this + 5);
        v114 = *(_QWORD *)(v113 + v111);
        if (*(float *)(v114 + 44) >= *(float *)&PoseToToi)
          break;
        *(_QWORD *)(v113 + 8 * v112++) = v114;
        v111 += 8;
        if (v59 == v112)
        {
          v113 = *((_QWORD *)this + 5);
          v112 = v10 - 1;
          break;
        }
      }
      *(_QWORD *)(v113 + 8 * v112) = v61;
      --v15;
      goto LABEL_242;
    }
    goto LABEL_150;
  }
  v253 = 0;
LABEL_327:
  v235 = (unsigned int *)*((_QWORD *)this + 15);
  do
    v236 = __ldaxr(v235);
  while (__stlxr(v236 + v253, v235));
  v237 = *(_QWORD *)(*((_QWORD *)this + 7) + 440);
  pthread_mutex_lock((pthread_mutex_t *)(v237 + 8));
  *(_QWORD *)v246 = *(_QWORD *)v237;
  *(_QWORD *)v237 = v246;
  return pthread_mutex_unlock((pthread_mutex_t *)(v237 + 8));
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>::getName() [T = physx::PxsCCDPair *]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

physx::PxcScratchAllocator *physx::PxcScratchAllocator::PxcScratchAllocator(physx::PxcScratchAllocator *this)
{
  uint64_t v2;
  const char *v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v3 = "<allocation names disabled>";
  v4 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 72, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)this = v4;
  physx::shdfnd::MutexImpl::MutexImpl(v4);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::recreate((uint64_t)this + 8, 0x40u);
  v5 = *((unsigned int *)this + 4);
  v6 = *((_DWORD *)this + 5);
  v8 = 0;
  if ((v6 & 0x7FFFFFFFu) <= v5)
  {
    physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)this + 8, &v8);
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v5) = 0;
    *((_DWORD *)this + 4) = v5 + 1;
  }
  return this;
}

void physx::Cm::RenderBuffer::~RenderBuffer(physx::Cm::RenderBuffer *this)
{
  uint64_t v2;

  physx::Cm::RenderBuffer::~RenderBuffer(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Cm::RenderBuffer *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

{
  int v2;
  int v4;
  int v6;
  int v8;
  int v9;

  *(_QWORD *)this = off_24ED8B800;
  v2 = *((_DWORD *)this + 21);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 9) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 17);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 7) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((_DWORD *)this + 13);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 5) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 9);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 1))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::Cm::RenderBuffer::getNbPoints(physx::Cm::RenderBuffer *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t physx::Cm::RenderBuffer::getPoints(physx::Cm::RenderBuffer *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t physx::Cm::RenderBuffer::getNbLines(physx::Cm::RenderBuffer *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t physx::Cm::RenderBuffer::getLines(physx::Cm::RenderBuffer *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t physx::Cm::RenderBuffer::getNbTriangles(physx::Cm::RenderBuffer *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t physx::Cm::RenderBuffer::getTriangles(physx::Cm::RenderBuffer *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t physx::Cm::RenderBuffer::getNbTexts(physx::Cm::RenderBuffer *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t physx::Cm::RenderBuffer::getTexts(physx::Cm::RenderBuffer *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t physx::Cm::RenderBuffer::append(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;

  v4 = a1 + 8;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  physx::Cm::RenderBuffer::append<physx::PxDebugPoint>(a1, v4, v5, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  physx::Cm::RenderBuffer::append<physx::PxDebugLine>(a1, a1 + 24, v7, v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  physx::Cm::RenderBuffer::append<physx::PxDebugTriangle>(a1, a1 + 40, v9, v10);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  return physx::Cm::RenderBuffer::append<physx::PxDebugText>(a1, a1 + 56, v11, v12);
}

_DWORD *physx::Cm::RenderBuffer::clear(_DWORD *this)
{
  this[4] = 0;
  this[8] = 0;
  this[12] = 0;
  this[16] = 0;
  this[20] = 0;
  return this;
}

uint64_t physx::Cm::RenderBuffer::append<physx::PxDebugPoint>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + a4;
  if ((v7 & 0x7FFFFFFFu) < v8)
    result = physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::recreate(a2, v8);
  if (a4)
  {
    v10 = a3 + 16 * a4;
    do
    {
      v11 = *(unsigned int *)(a2 + 8);
      if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v11)
      {
        result = physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::growAndPushBack((uint64_t *)a2, a3);
      }
      else
      {
        v12 = *(_QWORD *)a2 + 16 * v11;
        *(_QWORD *)v12 = *(_QWORD *)a3;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(v12 + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a2 + 8) = v11 + 1;
      }
      a3 += 16;
    }
    while (a3 < v10);
  }
  return result;
}

uint64_t physx::Cm::RenderBuffer::append<physx::PxDebugLine>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + a4;
  if ((v7 & 0x7FFFFFFFu) < v8)
    result = physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(a2, v8);
  if (a4)
  {
    v10 = a3 + 32 * a4;
    do
    {
      v11 = *(unsigned int *)(a2 + 8);
      if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v11)
      {
        result = physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::growAndPushBack((uint64_t *)a2, a3);
      }
      else
      {
        v12 = *(_QWORD *)a2 + 32 * v11;
        *(_QWORD *)v12 = *(_QWORD *)a3;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(v12 + 12) = *(_DWORD *)(a3 + 12);
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(a3 + 16);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(v12 + 28) = *(_DWORD *)(a3 + 28);
        *(_DWORD *)(a2 + 8) = v11 + 1;
      }
      a3 += 32;
    }
    while (a3 < v10);
  }
  return result;
}

uint64_t physx::Cm::RenderBuffer::append<physx::PxDebugTriangle>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v8;
  uint64_t result;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + a4;
  if ((v7 & 0x7FFFFFFFu) < v8)
    result = physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::recreate(a2, v8);
  if (a4)
  {
    v10 = a3 + 48 * a4;
    do
    {
      v11 = *(_DWORD *)(a2 + 8);
      if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v11)
      {
        result = physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::growAndPushBack((uint64_t *)a2, a3);
      }
      else
      {
        v12 = *(_QWORD *)a2 + 48 * v11;
        *(_QWORD *)v12 = *(_QWORD *)a3;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(v12 + 12) = *(_DWORD *)(a3 + 12);
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(a3 + 16);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(a3 + 24);
        *(_DWORD *)(v12 + 28) = *(_DWORD *)(a3 + 28);
        *(_QWORD *)(v12 + 32) = *(_QWORD *)(a3 + 32);
        *(_DWORD *)(v12 + 40) = *(_DWORD *)(a3 + 40);
        *(_DWORD *)(v12 + 44) = *(_DWORD *)(a3 + 44);
        *(_DWORD *)(a2 + 8) = v11 + 1;
      }
      a3 += 48;
    }
    while (a3 < v10);
  }
  return result;
}

uint64_t physx::Cm::RenderBuffer::append<physx::PxDebugText>(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v7 = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 8) + a4;
  if ((v7 & 0x7FFFFFFFu) < v8)
    result = physx::shdfnd::Array<physx::PxDebugText,physx::shdfnd::ReflectionAllocator<physx::PxDebugText>>::recreate(a2, v8);
  if (a4)
  {
    v10 = a3 + 32 * a4;
    do
    {
      v11 = *(unsigned int *)(a2 + 8);
      if ((*(_DWORD *)(a2 + 12) & 0x7FFFFFFFu) <= v11)
      {
        result = physx::shdfnd::Array<physx::PxDebugText,physx::shdfnd::ReflectionAllocator<physx::PxDebugText>>::growAndPushBack((uint64_t *)a2, a3);
      }
      else
      {
        v12 = *(_QWORD *)a2 + 32 * v11;
        *(_QWORD *)v12 = *(_QWORD *)a3;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(a3 + 8);
        v13 = *(_OWORD *)(a3 + 12);
        *(_DWORD *)(v12 + 28) = *(_DWORD *)(a3 + 28);
        *(_OWORD *)(v12 + 12) = v13;
        ++*(_DWORD *)(a2 + 8);
      }
      a3 += 32;
    }
    while (a3 < v10);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>::getName() [T = physx::PxDebugPoint]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 16 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(_QWORD *)v3;
  if ((_DWORD)v7)
  {
    v9 = v6 + 16 * v7;
    v10 = *(_QWORD *)v3;
    v11 = v6;
    do
    {
      *(_QWORD *)v11 = *(_QWORD *)v10;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v11 + 12) = *(_DWORD *)(v10 + 12);
      v11 += 16;
      v10 += 16;
    }
    while (v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxDebugPoint,physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>>::growAndPushBack(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugPoint>::getName() [T = physx::PxDebugPoint]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((unsigned int *)a1 + 2);
  v10 = v8 + 16 * v9;
  v11 = *a1;
  if ((_DWORD)v9)
  {
    v12 = *a1;
    v13 = v8;
    do
    {
      *(_QWORD *)v13 = *(_QWORD *)v12;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v12 + 12);
      v13 += 16;
      v12 += 16;
    }
    while (v13 < v10);
  }
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v8 + 16 * v9 + 12) = *(_DWORD *)(a2 + 12);
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *((unsigned int *)a1 + 2);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 2) = v9 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v8 + 16 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>::getName() [T = physx::PxDebugLine]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 32 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(_QWORD *)v3;
  if ((_DWORD)v7)
  {
    v9 = v6 + 32 * v7;
    v10 = *(_QWORD *)v3;
    v11 = v6;
    do
    {
      *(_QWORD *)v11 = *(_QWORD *)v10;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v11 + 12) = *(_DWORD *)(v10 + 12);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v11 + 28) = *(_DWORD *)(v10 + 28);
      v11 += 32;
      v10 += 32;
    }
    while (v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxDebugLine,physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>>::growAndPushBack(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugLine>::getName() [T = physx::PxDebugLine]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((unsigned int *)a1 + 2);
  v10 = v8 + 32 * v9;
  v11 = *a1;
  if ((_DWORD)v9)
  {
    v12 = *a1;
    v13 = v8;
    do
    {
      *(_QWORD *)v13 = *(_QWORD *)v12;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v12 + 12);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(v12 + 24);
      *(_DWORD *)(v13 + 28) = *(_DWORD *)(v12 + 28);
      v13 += 32;
      v12 += 32;
    }
    while (v13 < v10);
  }
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v10 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v10 + 28) = *(_DWORD *)(a2 + 28);
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *((unsigned int *)a1 + 2);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 2) = v9 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v8 + 32 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>::getName() [T = physx::PxDebugTriangle]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 48 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(_QWORD *)v3;
  if (v7)
  {
    v9 = v6 + 48 * v7;
    v10 = *(_QWORD *)v3;
    v11 = v6;
    do
    {
      *(_QWORD *)v11 = *(_QWORD *)v10;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v10 + 8);
      *(_DWORD *)(v11 + 12) = *(_DWORD *)(v10 + 12);
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 24);
      *(_DWORD *)(v11 + 28) = *(_DWORD *)(v10 + 28);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v10 + 32);
      *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
      *(_DWORD *)(v11 + 44) = *(_DWORD *)(v10 + 44);
      v11 += 48;
      v10 += 48;
    }
    while (v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxDebugTriangle,physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>>::growAndPushBack(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugTriangle>::getName() [T = physx::PxDebugTriangle]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 48 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_DWORD *)a1 + 2);
  v10 = v8 + 48 * v9;
  v11 = *a1;
  if (v9)
  {
    v12 = *a1;
    v13 = v8;
    do
    {
      *(_QWORD *)v13 = *(_QWORD *)v12;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v12 + 12);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_DWORD *)(v13 + 24) = *(_DWORD *)(v12 + 24);
      *(_DWORD *)(v13 + 28) = *(_DWORD *)(v12 + 28);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v12 + 32);
      *(_DWORD *)(v13 + 40) = *(_DWORD *)(v12 + 40);
      *(_DWORD *)(v13 + 44) = *(_DWORD *)(v12 + 44);
      v13 += 48;
      v12 += 48;
    }
    while (v13 < v10);
  }
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 + 8);
  v14 = v8 + 48 * v9;
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(v14 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v14 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v14 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v14 + 44) = *(_DWORD *)(a2 + 44);
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *((_DWORD *)a1 + 2);
  }
  *a1 = v8;
  *((_DWORD *)a1 + 2) = v9 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v8 + 48 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxDebugText,physx::shdfnd::ReflectionAllocator<physx::PxDebugText>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugText>::getName() [T = physx::PxDebugText]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 32 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(_QWORD *)v3;
  if ((_DWORD)v7)
  {
    v9 = v6 + 32 * v7;
    v10 = v6;
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)v8;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v8 + 8);
      v11 = *(_OWORD *)(v8 + 12);
      *(_DWORD *)(v10 + 28) = *(_DWORD *)(v8 + 28);
      *(_OWORD *)(v10 + 12) = v11;
      v10 += 32;
      v8 += 32;
    }
    while (v10 < v9);
    v8 = *(_QWORD *)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxDebugText,physx::shdfnd::ReflectionAllocator<physx::PxDebugText>>::growAndPushBack(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v4 = *((_DWORD *)a1 + 3);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxDebugText>::getName() [T = physx::PxDebugText]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v9)
  {
    v10 = v8 + 32 * v9;
    v11 = *a1;
    v12 = v8;
    do
    {
      *(_QWORD *)v12 = *(_QWORD *)v11;
      *(_DWORD *)(v12 + 8) = *(_DWORD *)(v11 + 8);
      v13 = *(_OWORD *)(v11 + 12);
      *(_DWORD *)(v12 + 28) = *(_DWORD *)(v11 + 28);
      *(_OWORD *)(v12 + 12) = v13;
      v12 += 32;
      v11 += 32;
    }
    while (v12 < v10);
    v14 = *((unsigned int *)a1 + 2);
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 32 * v14;
  *(_QWORD *)v15 = *(_QWORD *)a2;
  *(_DWORD *)(v15 + 8) = *(_DWORD *)(a2 + 8);
  v16 = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(v15 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(v15 + 12) = v16;
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && *a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  v17 = *((unsigned int *)a1 + 2);
  *((_DWORD *)a1 + 2) = v17 + 1;
  *((_DWORD *)a1 + 3) = v5;
  return v8 + 32 * v17;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::getName() "
           "[T = physx::Gu::SpherePersistentContactManifold]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::getName() "
           "[T = physx::Gu::SpherePersistentContactManifold]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

char *physx::shdfnd::sort<void *,physx::shdfnd::Less<void *>,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>(char *result, int a2)
{
  int v2;
  char *v3;
  int v4;
  char *v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _BYTE v34[4];
  uint64_t v35;
  _OWORD *v36;
  char v37;
  void *v38;
  char v39;
  _OWORD v40[8];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v39 = 0;
  v38 = v40;
  v35 = 0x2000000000;
  v36 = v40;
  v37 = 0;
  v2 = a2 - 1;
  if (a2 - 1 < 1)
    return result;
  v3 = result;
  v4 = 0;
  v5 = result + 8;
  v6 = v40;
  memset(v40, 0, sizeof(v40));
  while (1)
  {
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_36;
      if ((v2 - v4) <= 4)
        break;
      v7 = v4 + v2;
      if (v4 + v2 < 0 != __OFADD__(v4, v2))
        ++v7;
      v8 = (uint64_t)v7 >> 1;
      v9 = *(_QWORD *)&v3[8 * (v7 >> 1)];
      v10 = *(_QWORD *)&v3[8 * v4];
      if (v9 < v10)
      {
        *(_QWORD *)&v3[8 * v4] = v9;
        *(_QWORD *)&v3[8 * v8] = v10;
        v9 = v10;
        v10 = *(_QWORD *)&v3[8 * v4];
      }
      v11 = *(_QWORD *)&v3[8 * v2];
      if (v11 >= v10)
      {
        v10 = *(_QWORD *)&v3[8 * v2];
      }
      else
      {
        *(_QWORD *)&v3[8 * v4] = v11;
        *(_QWORD *)&v3[8 * v2] = v10;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      if (v10 < v9)
      {
        *(_QWORD *)&v3[8 * v8] = v10;
        *(_QWORD *)&v3[8 * v2] = v9;
        v9 = *(_QWORD *)&v3[8 * v8];
      }
      v12 = v2 - 1;
      *(_QWORD *)&v3[8 * v8] = *(_QWORD *)&v3[8 * v12];
      *(_QWORD *)&v3[8 * v12] = v9;
      v13 = v4;
      v14 = v2 - 1;
      while (1)
      {
        v15 = &v3[8 * v13];
        do
        {
          v17 = *((_QWORD *)v15 + 1);
          v15 += 8;
          v16 = v17;
          ++v13;
        }
        while (v17 < v9);
        v18 = &v3[8 * v14];
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          v19 = v20;
          --v14;
        }
        while (v9 < v20);
        if (v13 >= v14)
          break;
        *(_QWORD *)v15 = v19;
        *(_QWORD *)v18 = v16;
        v9 = *(_QWORD *)&v3[8 * v12];
      }
      *(_QWORD *)v15 = v9;
      *(_QWORD *)&v3[8 * v12] = v16;
      v21 = v35;
      v22 = HIDWORD(v35) - 1;
      if (v13 - v4 >= v2 - v13)
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v13 + 1;
        v24 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v24) = v2;
        v2 = v13 - 1;
      }
      else
      {
        if (v35 >= v22)
        {
          result = (char *)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::grow((uint64_t)v34);
          v21 = v35;
          v6 = v36;
        }
        LODWORD(v35) = v21 + 1;
        *((_DWORD *)v6 + v21) = v4;
        v23 = v35;
        LODWORD(v35) = v35 + 1;
        *((_DWORD *)v6 + v23) = v13 - 1;
        v4 = v13 + 1;
      }
    }
    v25 = v4;
    v26 = v4 + 1;
    v27 = &v5[8 * v4];
    do
    {
      v28 = 0;
      v29 = v25++;
      v30 = v29;
      do
      {
        if (*(_QWORD *)&v27[8 * v28] < *(_QWORD *)&v3[8 * v30])
          v30 = v26 + v28;
        ++v28;
      }
      while (v29 + v28 < v2);
      if (v30 != (_DWORD)v29)
      {
        v31 = *(_QWORD *)&v3[8 * v30];
        *(_QWORD *)&v3[8 * v30] = *(_QWORD *)&v3[8 * v29];
        *(_QWORD *)&v3[8 * v29] = v31;
      }
      ++v26;
      v27 += 8;
    }
    while (v25 != v2);
LABEL_36:
    v32 = v35;
    if (!(_DWORD)v35)
      break;
    LODWORD(v35) = v35 - 1;
    v2 = *((_DWORD *)v6 + (v32 - 1));
    LODWORD(v35) = v32 - 2;
    v4 = *((_DWORD *)v6 + (v32 - 2));
  }
  if (v37)
    v33 = v6 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
    if (v39)
      return (char *)physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v38, (char *)v38);
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::getName() ["
           "T = physx::Gu::LargePersistentContactManifold]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::getName() ["
           "T = physx::Gu::LargePersistentContactManifold]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

void physx::PxsDefaultMemoryAllocator::~PxsDefaultMemoryAllocator(physx::PxsDefaultMemoryAllocator *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t physx::PxsDefaultMemoryAllocator::allocate(physx::PxsDefaultMemoryAllocator *this, uint64_t a2, const char *a3)
{
  if (a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/include/PxsDefaultMemoryManager.h", 67);
  else
    return 0;
}

uint64_t physx::PxsDefaultMemoryAllocator::deallocate(physx::PxsDefaultMemoryAllocator *this, void *a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return result;
}

pthread_mutex_t **physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT(pthread_mutex_t **a1)
{
  pthread_mutex_destroy(*a1);
  if (*a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return a1;
}

uint64_t physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char *>::getName() [T = unsigned char *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned char *>::getName() [T = unsigned char *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>::getName() [T = physx::PxcNpMemBlock *]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxcNpMemBlock *,physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpMemBlock *>::getName() [T = physx::PxcNpMemBlock *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

void physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(uint64_t a1, int a2)
{
  unsigned int v2;
  char *v4;
  char *v5;
  int v6;

  v2 = (a2 + 31) >> 5;
  if (v2 > (*(_DWORD *)(a1 + 8) & 0x7FFFFFFFu))
  {
    v4 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBitMap.h", 438);
    v5 = v4;
    v6 = *(_DWORD *)(a1 + 8);
    if (*(_QWORD *)a1)
    {
      memcpy(v4, *(const void **)a1, (4 * v6));
      v6 = *(_DWORD *)(a1 + 8);
      if ((v6 & 0x80000000) == 0)
      {
        if (*(_QWORD *)a1)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          v6 = *(_DWORD *)(a1 + 8);
        }
      }
    }
    bzero(&v5[4 * (v6 & 0x7FFFFFFF)], 4 * (v2 - v6));
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 8) = v2;
  }
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDSweep>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDSweep>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDSweep>::runInternal(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(physx::PxsCCDAdvanceTask *__hidden);

  v1 = *(_QWORD *)(result + 40);
  v2 = *(unsigned int *)(v1 + 416);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(result + 24);
    do
    {
      v6 = 0;
      v7 = v4;
      v8 = v4++;
      if (v2 <= v4)
        v9 = v7 + 1;
      else
        v9 = v2;
      while (1)
      {
        v6 += *(_DWORD *)(*(_QWORD *)(v1 + 408) + 4 * v8);
        if (v6 > *(_DWORD *)(v1 + 432))
          break;
        if (++v8 >= v2)
          goto LABEL_10;
      }
      v4 = v8 + 1;
      v9 = v8;
LABEL_10:
      if (v9 == (_DWORD)v2)
      {
        v4 = v2;
        if (!v6)
          break;
      }
      v10 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*(_QWORD *)(v1 + 440) + 1920), 136, 0x10u);
      v11 = *(_DWORD *)(v1 + 180);
      v12 = v11 == *(_DWORD *)(v1 + 436) - 1;
      v13 = *(_QWORD *)(v1 + 392);
      v14 = *(_DWORD *)(v1 + 400);
      v15 = *(_QWORD *)(v1 + 440);
      v16 = *(_DWORD *)(*(_QWORD *)(v1 + 424) + 7200);
      v17 = *(_QWORD *)(v1 + 264);
      v18 = *(_QWORD *)(v1 + 280);
      v19 = *(_BYTE *)(v1 + 176);
      v20 = *(_QWORD *)(v15 + 2616);
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_QWORD *)(v10 + 8) = v20;
      *(_QWORD *)v10 = &off_24ED8B790;
      *(_QWORD *)(v10 + 40) = v13;
      *(_DWORD *)(v10 + 48) = v14;
      *(_QWORD *)(v10 + 56) = v15;
      *(_QWORD *)(v10 + 64) = v1;
      *(_DWORD *)(v10 + 72) = v16;
      *(_DWORD *)(v10 + 76) = v11;
      *(_QWORD *)(v10 + 80) = v1 + 192;
      *(_DWORD *)(v10 + 88) = v7;
      *(_DWORD *)(v10 + 92) = v4 - v7;
      *(_DWORD *)(v10 + 96) = v2;
      *(_DWORD *)(v10 + 100) = v3;
      *(_QWORD *)(v10 + 104) = v17;
      *(_QWORD *)(v10 + 112) = v18;
      *(_QWORD *)(v10 + 120) = v1 + 184;
      *(_BYTE *)(v10 + 128) = v12;
      *(_BYTE *)(v10 + 129) = v19;
      v21 = *(_QWORD *)(*(_QWORD *)(v1 + 440) + 1912);
      *(_DWORD *)(v10 + 32) = 1;
      *(_QWORD *)(v10 + 16) = v21;
      *(_QWORD *)(v10 + 24) = v5;
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        v22 = *(void (***)(physx::PxsCCDAdvanceTask *__hidden))v10;
      }
      else
      {
        v22 = &off_24ED8B790;
      }
      v3 += v6;
      result = ((uint64_t (*)(uint64_t))v22[5])(v10);
    }
    while (v4 < v2);
  }
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDAdvance>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDAdvance>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDAdvance>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  char v38;
  char v39;
  __int16 v40;
  float v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned __int16 v44[6];

  v1 = *(_QWORD *)(a1 + 40);
  v33 = *(unsigned int *)(v1 + 416);
  if ((_DWORD)v33)
  {
    v2 = 0;
    v3 = 0;
    v35 = 0;
    v4 = 0;
    do
    {
      v5 = *(_DWORD *)(*(_QWORD *)(v1 + 408) + 4 * v2);
      v34 = v5 + v4;
      if (v4 < v5 + v4)
      {
        v6 = 8 * v4;
        do
        {
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 392) + v6);
          if (*(float *)(v7 + 44) > 1.0)
            break;
          if (*(_BYTE *)(v7 + 92))
          {
            v8 = *(_QWORD *)(v7 + 72);
            *(_DWORD *)(v8 + 16) |= 4u;
            v9 = *(_BYTE *)(v8 + 83);
            v10 = *(_QWORD *)(v1 + 440);
            v11 = *(unsigned int *)(v8 + 88);
            physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v10 + 1704, v11 + 1);
            *(_DWORD *)(*(_QWORD *)(v10 + 1704) + ((v11 >> 3) & 0x1FFFFFFC)) |= 1 << v11;
            v12 = *(_QWORD *)(v7 + 72);
            v13 = *(_BYTE *)(v12 + 83);
            if ((v9 & 2) != 0)
            {
              *(_BYTE *)(v12 + 83) = v13 | 0x10;
              ++v35;
            }
            else
            {
              *(_BYTE *)(v12 + 83) = v13 & 0xFC | 2;
              (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 456) + 72))(*(_QWORD *)(v1 + 456));
              (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v1 + 456) + 56))(*(_QWORD *)(v1 + 456), *(_QWORD *)(v7 + 72), 1, 0);
              ++v3;
              v12 = *(_QWORD *)(v7 + 72);
            }
            v14 = *(_WORD *)(v12 + 80);
            if ((v14 & 1) != 0
              || (*(_WORD *)(v12 + 80) & 0x100) != 0
              && ((v14 & 0x20) != 0 && *(_DWORD *)(*(_QWORD *)(v12 + 32) + 92) != 2139095039
               || (v14 & 0x40) != 0 && *(_DWORD *)(*(_QWORD *)(v12 + 40) + 92) != 2139095039))
            {
              v15 = *(_QWORD *)(v1 + 440);
              v16 = *(unsigned int *)(v12 + 88);
              physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v15 + 1688, v16 + 1);
              *(_DWORD *)(*(_QWORD *)(v15 + 1688) + ((v16 >> 3) & 0x1FFFFFFC)) |= 1 << v16;
              v17 = *(_QWORD *)(v1 + 424);
              *(_QWORD *)(v17 + 576) = *(_QWORD *)(v7 + 52);
              *(_DWORD *)(v17 + 584) = *(_DWORD *)(v7 + 60);
              v18 = -*(float *)(v7 + 40);
              *(float32x2_t *)(v17 + 560) = vneg_f32(*(float32x2_t *)(v7 + 32));
              *(float *)(v17 + 568) = v18;
              v19 = *(_DWORD *)(v7 + 96);
              *(_DWORD *)(v17 + 612) = v19;
              *(_DWORD *)(v17 + 572) = 0;
              *(_DWORD *)(v17 + 620) = *(_DWORD *)(v7 + 112);
              *(_DWORD *)(v17 + 616) = *(_DWORD *)(v7 + 104);
              *(_DWORD *)(v17 + 604) = *(_DWORD *)(v7 + 108);
              *(_OWORD *)(v17 + 588) = xmmword_2261A6A10;
              v44[0] = *(_WORD *)(v7 + 100);
              v44[1] = *(_WORD *)(v7 + 102);
              v42 = 0;
              v43 = 0;
              v40 = 0;
              v20 = *(_QWORD *)(v7 + 72);
              v21 = *(_QWORD *)(v20 + 64);
              if (physx::writeCompressedContact((float *)(v17 + 560), 1u, v17, &v39, &v42, &v41, &v40, (uint64_t *)&v43, 4, *(_QWORD **)(v17 + 7256), (*(_WORD *)(v20 + 80) & 0x80) != 0, 1u, v44, &v38, 0x10u, 0, 0, 0, 0,
                                   0,
                                   0,
                                   v19 != -1))
              {
                v22 = v42;
                *(_WORD *)(v42 + 8) = v40;
                *(_WORD *)(v22 + 10) = 0;
                *(_QWORD *)(*(_QWORD *)(v7 + 72) + 64) = v22;
                if (v21)
                  *(_WORD *)(v21 + 10) = 1;
                *(_QWORD *)v22 = v21;
                *v43 = *(_DWORD *)(v7 + 120);
              }
              else if (v21)
              {
                *(_WORD *)(v21 + 10) = 1;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v7 + 72) + 64) = 0;
              }
              if ((*(_WORD *)(*(_QWORD *)(v7 + 72) + 80) & 0x18) == 0 && *(float *)(v7 + 120) != 0.0)
              {
                DWORD2(v36) = *(_DWORD *)(v7 + 120);
                DWORD2(v37) = 0;
                if (*(_QWORD *)v7)
                  v23 = *(float *)(*(_QWORD *)(*(_QWORD *)v7 + 40) + 92);
                else
                  v23 = 3.4028e38;
                v24 = *(_QWORD *)(v7 + 8);
                if (v24)
                  v25 = *(float *)(*(_QWORD *)(v24 + 40) + 92);
                else
                  v25 = 3.4028e38;
                if (v23 >= v25)
                  v23 = v25;
                *((float *)&v36 + 3) = v23;
                v26 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 112);
                v27 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 112);
                *(_QWORD *)&v37 = __PAIR64__(v27, v26);
                if (v27 < v26)
                  *(_QWORD *)&v37 = __PAIR64__(v26, v27);
                v28 = *(_QWORD *)(v1 + 448);
                v29 = *(unsigned int *)(v28 + 16);
                if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFFFu) <= v29)
                {
                  physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::growAndPushBack((_QWORD *)v28, &v36);
                }
                else
                {
                  v30 = (_OWORD *)(*(_QWORD *)(v28 + 8) + 32 * v29);
                  v31 = v37;
                  *v30 = v36;
                  v30[1] = v31;
                  ++*(_DWORD *)(v28 + 16);
                }
              }
            }
          }
          v6 += 8;
          --v5;
        }
        while (v5);
      }
      ++v2;
      v4 = v34;
    }
    while (v2 != v33);
  }
  else
  {
    v35 = 0;
    v3 = 0;
  }
  v32 = *(_QWORD *)(v1 + 440);
  *(_DWORD *)(v32 + 1740) += v3;
  *(_DWORD *)(v32 + 1744) += v35;
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDDepenetrate>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDDepenetrate>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t physx::Cm::DelegateTask<physx::PxsCCDContext,&physx::PxsCCDContext::postCCDDepenetrate>::runInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int i;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(v1 + 192);
  v3 = *(_DWORD *)(v2 + 16 * *(unsigned int *)(v1 + 208) + 8) + (*(_DWORD *)(v1 + 208) << 7);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(_QWORD *)(v2 + 16 * (i >> 7)) + ((unint64_t)(i & 0x7F) << 6);
      *(_QWORD *)(v5 + 48) = 0;
      *(_DWORD *)(v5 + 60) = 0;
    }
  }
  *(_DWORD *)(v1 + 232) = 0;
  *(_DWORD *)(*(_QWORD *)(v1 + 216) + 8) = 0;
  physx::PxsCCDContext::updateCCDEnd(v1);
  v6 = *(_QWORD **)(v1 + 424);
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 440) + 440);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 8));
  *v6 = *(_QWORD *)v7;
  *(_QWORD *)v7 = v6;
  return pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody,128>::BlockInfo>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::BlockI"
           "nfo>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDBody, 128>::BlockInfo]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap,128>::BlockInfo>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::Blo"
           "ckInfo>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDOverlap, 128>::BlockInfo]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape,128>::BlockInfo>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::Block"
           "Info>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDShape, 128>::BlockInfo]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*> const,physx::PxsCCDShape *>,physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::internal::HashMapBase<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>,physx::PxsCCDShape *,physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  int v20;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v20 = *(_DWORD *)(a1 + 32);
  v8 = (float)(*(float *)(a1 + 40) * (float)v3);
  v9 = ((-4 * (v3 + v8)) & 0xC) + 4 * (v3 + v8);
  v10 = v9 + 24 * v8;
  if ((_DWORD)v10)
    v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  result = (uint64_t)memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v14 = 0;
    v15 = v3 - 1;
    v16 = &v11[v9 + 8];
    v17 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 8);
    do
    {
      v18 = *((_QWORD *)v17 - 1);
      *((_QWORD *)v16 - 1) = v18;
      v19 = *v17;
      v17 = (_OWORD *)((char *)v17 + 24);
      result = physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(v18, v19);
      *(_DWORD *)&v12[4 * v14] = *(_DWORD *)&v11[4 * (result & v15)];
      *(_DWORD *)&v11[4 * (result & v15)] = v14;
      *(_OWORD *)v16 = v19;
      v16 += 24;
      ++v14;
    }
    while (v14 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = &v11[v9];
  *(_DWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v20;
  return result;
}

uint64_t physx::shdfnd::Hash<physx::shdfnd::Pair<physx::PxsRigidCore const*,physx::PxsShapeCore const*>>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  v5 = (~(a1 << 32) + a1) ^ ((unint64_t)(~(a1 << 32) + a1) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  return (1000007 * ((v7 >> 31) ^ v7 ^ 0xFC955B95)) ^ (v4 >> 31) ^ v4;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair,128>::BlockInfo>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::BlockI"
           "nfo>::getName() [T = physx::PxsCCDBlockArray<physx::PxsCCDPair, 128>::BlockInfo]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>::getName() [T = physx::PxsRigidBody *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDPair *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>::getName() [T = physx::PxsCCDPair *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDPair *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDPair *>::getName() [T = physx::PxsCCDPair *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(uint64_t result, int a2)
{
  _QWORD *v3;
  _OWORD *v4;
  uint64_t v5;
  __int128 *v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v3 = (_QWORD *)result;
  if (a2)
  {
    result = (*(uint64_t (**)(void))(**(_QWORD **)result + 16))();
    v4 = (_OWORD *)result;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((unsigned int *)v3 + 4);
  v6 = (__int128 *)v3[1];
  if ((_DWORD)v5)
  {
    v7 = (unint64_t)&v4[2 * v5];
    v8 = v4;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 2;
      *v8 = v9;
      v8[1] = v10;
      v8 += 2;
    }
    while ((unint64_t)v8 < v7);
    v6 = (__int128 *)v3[1];
  }
  if ((*((_DWORD *)v3 + 5) & 0x80000000) == 0 && v6)
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  v3[1] = v4;
  *((_DWORD *)v3 + 5) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int *v10;
  _DWORD *v11;
  int v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 4 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_DWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(int **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = *(int **)v3;
    v11 = v6;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBody const*,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody const*>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<const physx::PxsCCDBody *>::getName() [T = const physx::PxsCCDBody *]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned short,physx::shdfnd::ReflectionAllocator<unsigned short>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _WORD *v6;
  uint64_t v7;
  __int16 *v8;
  unint64_t v9;
  __int16 *v10;
  _WORD *v11;
  __int16 v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned short>::getName() [T = unsigned short]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 2 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_WORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(__int16 **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = *(__int16 **)v3;
    v11 = v6;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsCCDBody *,physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsCCDBody *>::getName() [T = physx::PxsCCDBody *]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::growAndPushBack(_QWORD *a1, _OWORD *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;

  v4 = *((_DWORD *)a1 + 5);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
    v6 = (*(uint64_t (**)(void))(*(_QWORD *)*a1 + 16))();
  else
    v6 = 0;
  v7 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v7)
  {
    v8 = v6 + 32 * v7;
    v9 = (__int128 *)a1[1];
    v10 = (_OWORD *)v6;
    do
    {
      v11 = *v9;
      v12 = v9[1];
      v9 += 2;
      *v10 = v11;
      v10[1] = v12;
      v10 += 2;
    }
    while ((unint64_t)v10 < v8);
    v13 = *((unsigned int *)a1 + 4);
  }
  else
  {
    v13 = 0;
  }
  v14 = (_OWORD *)(v6 + 32 * v13);
  v15 = a2[1];
  *v14 = *a2;
  v14[1] = v15;
  if ((*((_DWORD *)a1 + 5) & 0x80000000) == 0 && a1[1])
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  a1[1] = v6;
  v16 = *((unsigned int *)a1 + 4);
  *((_DWORD *)a1 + 4) = v16 + 1;
  *((_DWORD *)a1 + 5) = v5;
  return v6 + 32 * v16;
}

uint64_t *physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::SListT(uint64_t *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;

  v2 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v3 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>::getName() [T = physx::shdfnd::SListImpl]";
  else
    v3 = "<allocation names disabled>";
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v2 + 24) + 16))(v2 + 24, 72, v3, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSList.h", 103);
  *a1 = v4;
  *(_QWORD *)v4 = 0;
  pthread_mutex_init((pthread_mutex_t *)(v4 + 8), 0);
  return a1;
}

uint64_t physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT(uint64_t a1)
{
  pthread_mutex_destroy((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  if (*(_QWORD *)a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return a1;
}

uint64_t physx::Cm::PoolList<physx::PxsContactManager,physx::PxsContext>::extend(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  const void *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  v1 = *a1;
  if (!(_DWORD)v1)
    return 0;
  v3 = 120 * v1;
  v4 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::getName() [T = physx::PxsContactManager]";
  else
    v5 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 237);
  if (result)
  {
    v7 = result;
    v9 = *a1;
    v8 = a1[1];
    v10 = v8 + 1;
    if (*a1 * (v8 + 1) <= 32 * a1[14])
    {
      v16 = (void *)*((_QWORD *)a1 + 4);
    }
    else
    {
      v11 = 2 * v10;
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)(a1 + 12), 2 * v10 * v9);
      if (*((_QWORD *)a1 + 2))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      if (*a1 * v11)
      {
        v12 = 8 * *a1 * v11;
        v13 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v14 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::getName() [T = physx::P"
                "xsContactManager]";
        else
          v14 = "<allocation names disabled>";
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v13 + 24)
                                                                                               + 16))(v13 + 24, v12, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 249);
      }
      else
      {
        v15 = 0;
      }
      *((_QWORD *)a1 + 2) = v15;
      if (v11)
      {
        v17 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager>::getName() [T = physx::P"
                "xsContactManager]";
        else
          v18 = "<allocation names disabled>";
        v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v17 + 24) + 16))(v17 + 24, 16 * v10, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPool.h", 251);
      }
      else
      {
        v16 = 0;
      }
      v19 = (const void *)*((_QWORD *)a1 + 4);
      if (v19)
      {
        memcpy(v16, v19, 8 * v10);
        if (*((_QWORD *)a1 + 4))
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      *((_QWORD *)a1 + 4) = v16;
      v9 = *a1;
      v8 = a1[1];
      v10 = v8 + 1;
    }
    a1[1] = v10;
    *((_QWORD *)v16 + v8) = v7;
    v20 = a1[6];
    if (v9 - 1 < 0)
    {
      v25 = a1[6];
    }
    else
    {
      v21 = 120 * (v9 - 1);
      v22 = v9 + v9 * v8 - 1;
      v23 = -120;
      do
      {
        v24 = v7 + v21;
        *(_DWORD *)(v24 + 16) = 0;
        *(_QWORD *)(v24 + 32) = 0;
        *(_QWORD *)(v24 + 40) = 0;
        *(_WORD *)(v24 + 84) = 257;
        *(_QWORD *)(v24 + 72) = 0;
        v25 = v20 + 1;
        *(_QWORD *)(*((_QWORD *)a1 + 2) + 8 * v20) = v7 + v21;
        v23 += 120;
        *(_DWORD *)(v24 + 88) = v22;
        *(_DWORD *)(v24 + 92) = 0;
        *(_BYTE *)(v24 + 82) = 0;
        --v22;
        v7 -= 120;
        ++v20;
      }
      while (v21 != v23);
    }
    a1[6] = v25;
    return 1;
  }
  return result;
}

uint64_t physx::shdfnd::PoolBase<physx::Gu::SpherePersistentContactManifold,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::getName() "
           "[T = physx::Gu::SpherePersistentContactManifold]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = v5 + 144 * *(unsigned int *)(v1 + 544) - 144;
  if (v7 >= v5)
  {
    v8 = *(_QWORD *)(v1 + 560);
    v9 = (unint64_t *)(v5 + 144 * *(unsigned int *)(v1 + 544) - 144);
    do
    {
      *v9 = v8;
      v9 -= 18;
      v8 = v7;
      v7 = (unint64_t)v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 18;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::SpherePersistentContactManifold>::getName() [T"
         " = physx::Gu::SpherePersistentContactManifold]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

uint64_t physx::shdfnd::PoolBase<physx::Gu::LargePersistentContactManifold,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>::allocateSlab(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v1 = result;
  v2 = *(unsigned int *)(result + 552);
  if ((_DWORD)v2)
  {
    v3 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v4 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::getName() ["
           "T = physx::Gu::LargePersistentContactManifold]";
    else
      v4 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v3 + 24)
                                                                                              + 16))(v3 + 24, v2, v4, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsPool.h", 180);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v10 = v5;
  v6 = *(unsigned int *)(v1 + 536);
  if ((*(_DWORD *)(v1 + 540) & 0x7FFFFFFFu) <= v6)
  {
    result = physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>>::growAndPushBack(v1 + 8, &v10);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 528) + 8 * v6) = v5;
    *(_DWORD *)(v1 + 536) = v6 + 1;
  }
  v7 = (_QWORD *)(v5 + 288 * *(unsigned int *)(v1 + 544) - 288);
  if ((unint64_t)v7 >= v5)
  {
    v8 = *(_QWORD **)(v1 + 560);
    do
    {
      *v7 = v8;
      v9 = v7 - 36;
      v8 = v7;
      v7 = v9;
    }
    while ((unint64_t)v9 >= v5);
    *(_QWORD *)(v1 + 560) = v9 + 36;
  }
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::InlineAllocator<512u,physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 532);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x200 && *(_BYTE *)(a1 + 512) == 0)
  {
    *(_BYTE *)(a1 + 512) = 1;
    v9 = a1;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::LargePersistentContactManifold>::getName() [T "
         "= physx::Gu::LargePersistentContactManifold]";
  else
    v8 = "<allocation names disabled>";
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
LABEL_16:
  v10 = *(unsigned int *)(a1 + 528);
  v11 = (_QWORD *)(v9 + 8 * v10);
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(a1 + 520);
    v13 = (_QWORD *)v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(a1 + 532) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 520);
    if (v15 == a1)
    {
      *(_BYTE *)(a1 + 512) = 0;
    }
    else if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v10 = *(unsigned int *)(a1 + 528);
    }
  }
  *(_QWORD *)(a1 + 520) = v9;
  *(_DWORD *)(a1 + 532) = v5;
  *(_DWORD *)(a1 + 528) = v10 + 1;
  return v9 + 8 * v10;
}

void physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::combine1<physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::OR>(uint64_t a1, int *a2, unsigned int a3)
{
  uint64_t v6;
  _DWORD *v7;
  int v8;

  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1, 32 * a3);
  LODWORD(v6) = *(_DWORD *)(a1 + 8) & 0x7FFFFFFF;
  if (v6 >= a3)
    v6 = a3;
  else
    v6 = v6;
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    do
    {
      v8 = *a2++;
      *v7++ |= v8;
      --v6;
    }
    while (v6);
  }
}

uint64_t physx::shdfnd::Array<physx::shdfnd::VirtualAllocatorCallback *,physx::shdfnd::ReflectionAllocator<physx::shdfnd::VirtualAllocatorCallback *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::VirtualAllocatorCallback *>::getName() ["
           "T = physx::shdfnd::VirtualAllocatorCallback *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

double physx::IG::IslandSim::IslandSim(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 2048;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 2048;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 600) = a2;
  *(_QWORD *)(a1 + 608) = a3;
  *(_QWORD *)(a1 + 616) = a4;
  *(_QWORD *)(a1 + 632) = a5;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  return result;
}

_DWORD *physx::Cm::BlockArray<physx::IG::Edge>::reserve(_DWORD *result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v2 = result[5];
  if (v2 < a2)
  {
    v3 = (uint64_t)result;
    v4 = result[6];
    v5 = (a2 + v4 - 1) / v4;
    v6 = result[2];
    v7 = v5 - v6;
    result[5] = v2 + (v5 - v6) * v4;
    if (v5 != v6)
    {
      do
      {
        v8 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v8)
          result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        else
          result = 0;
        v10 = result;
        v9 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v9)
        {
          result = (_DWORD *)physx::shdfnd::Array<physx::IG::Edge *,physx::shdfnd::ReflectionAllocator<physx::IG::Edge *>>::growAndPushBack(v3, &v10);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v9) = result;
          *(_DWORD *)(v3 + 8) = v9 + 1;
        }
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

_DWORD *physx::Cm::BlockArray<physx::IG::EdgeInstance>::reserve(_DWORD *result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v2 = result[5];
  if (v2 < a2)
  {
    v3 = (uint64_t)result;
    v4 = result[6];
    v5 = (a2 + v4 - 1) / v4;
    v6 = result[2];
    v7 = v5 - v6;
    result[5] = v2 + (v5 - v6) * v4;
    if (v5 != v6)
    {
      do
      {
        v8 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v8)
          result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        else
          result = 0;
        v10 = result;
        v9 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v9)
        {
          result = (_DWORD *)physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::growAndPushBack(v3, &v10);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v9) = result;
          *(_DWORD *)(v3 + 8) = v9 + 1;
        }
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

void physx::IG::IslandSim::addNode(uint64_t a1, int a2, int a3, int a4, unsigned int a5)
{
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int32x2_t *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v10 = a5 >> 7;
  v11 = a1 + 24;
  if (a5 >> 7 == (*(_DWORD *)(a1 + 36) & 0x7FFFFFFF))
  {
    if (2 * v10 <= 0x100)
      v12 = 256;
    else
      v12 = 2 * v10;
    physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::recreate(a1 + 24, v12);
    if ((*(_DWORD *)(a1 + 284) & 0x7FFFFFFFu) < v12)
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 272, v12);
    if ((*(_DWORD *)(a1 + 268) & 0x7FFFFFFFu) < v12)
      physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::recreate(a1 + 256, v12);
    if ((*(_DWORD *)(a1 + 252) & 0x7FFFFFFFu) < v12)
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 240, v12);
    if ((*(_DWORD *)(a1 + 52) & 0x7FFFFFFFu) < v12)
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 40, v12);
  }
  if (v10 + 1 > *(_DWORD *)(a1 + 32))
    v13 = v10 + 1;
  else
    v13 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)&v27 = 0x8FFFFFFFFLL;
  *((_QWORD *)&v27 + 1) = 0x7F0000007FLL;
  LODWORD(v28) = 0;
  v29 = 0;
  physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::resize(v11, v13, &v27);
  LODWORD(v27) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 272, v13, &v27);
  LODWORD(v27) = -128;
  physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::resize(a1 + 256, v13, &v27);
  LODWORD(v27) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 240, v13, &v27);
  LODWORD(v27) = 0;
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 40, v13, &v27);
  v14 = v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v10) = 0x1FFFFFF;
  v15 = *(_QWORD *)(a1 + 24) + 32 * v10;
  *(_BYTE *)(v15 + 5) = a4;
  v16 = a2 ^ 1;
  if (a3)
    v16 = a2 ^ 1 | 4;
  *(_BYTE *)(v15 + 4) = v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4 * v10) = -1;
  *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v10) = -128;
  *(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * v10) = 0;
  if ((a3 & 1) == 0)
  {
    v17 = *(_DWORD *)(a1 + 8);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = *(_DWORD *)(*(_QWORD *)a1 + 4 * v18);
      *(_DWORD *)(a1 + 8) = v18;
    }
    else
    {
      v19 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v19 + 1;
    }
    if (v19 == (*(_DWORD *)(a1 + 132) & 0x7FFFFFFF))
    {
      v20 = 2 * v19 <= 0x100 ? 256 : 2 * v19;
      physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::recreate(a1 + 120, v20);
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 288, v20);
      if ((*(_DWORD *)(a1 + 148) & 0x7FFFFFFFu) < v20)
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 136, v20);
    }
    v21 = v19 + 1;
    v22 = *(_DWORD *)(a1 + 128);
    *(_QWORD *)&v27 = 0x7F0000007FLL;
    if (v19 + 1 > v22)
      v23 = v19 + 1;
    else
      v23 = v22;
    v28 = -1;
    v29 = -1;
    v30 = -1;
    v31 = 0;
    *((_QWORD *)&v27 + 1) = 0;
    physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::resize(a1 + 120, v23, &v27);
    if (v21 > *(_DWORD *)(a1 + 128))
      v24 = v19 + 1;
    else
      v24 = *(_DWORD *)(a1 + 128);
    LODWORD(v27) = 0;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 136, v24, &v27);
    if (v21 > *(_DWORD *)(a1 + 128))
      v25 = v19 + 1;
    else
      v25 = *(_DWORD *)(a1 + 128);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 288, v25 + 1);
    *(_DWORD *)(*(_QWORD *)(a1 + 288) + 4 * (v25 >> 5)) &= ~(1 << v25);
    v26 = (int32x2_t *)(*(_QWORD *)(a1 + 120) + 44 * v19);
    *v26 = vdup_n_s32(a5);
    v26[1].i32[a4] = 1;
    *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4 * v14) = v19;
    *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v19) = 0;
  }
  if (a2)
    physx::IG::IslandSim::activateNode(a1, a5);
}

uint64_t physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 32 * a2;
    v8 = (_OWORD *)(*(_QWORD *)v5 + 32 * v6);
    do
    {
      v9 = a3[1];
      *v8 = *a3;
      v8[1] = v9;
      v8 += 2;
    }
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 4 * a2;
    v8 = (_DWORD *)(*(_QWORD *)v5 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::resize(uint64_t result, uint64_t a2, __int128 *a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v4 = a2;
  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::recreate(result, a2);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    v7 = *(_QWORD *)v5 + 44 * v4;
    v8 = (_OWORD *)(*(_QWORD *)v5 + 44 * v6);
    do
    {
      v9 = *a3;
      v10 = a3[1];
      *(_OWORD *)((char *)v8 + 28) = *(__int128 *)((char *)a3 + 28);
      *v8 = v9;
      v8[1] = v10;
      v8 = (_OWORD *)((char *)v8 + 44);
    }
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

uint64_t physx::IG::IslandSim::activateNode(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v18 = a2;
  v2 = a2 >> 7;
  if (a2 >> 7 != 0x1FFFFFF)
  {
    v3 = *(_QWORD *)(result + 24);
    v4 = v2;
    v5 = v3 + 32 * v2;
    v8 = *(unsigned __int8 *)(v5 + 4);
    v7 = (char *)(v5 + 4);
    v6 = v8;
    if ((v8 & 0x22222222) == 0)
    {
      v9 = *(_QWORD *)(result + 40);
      if ((v6 & 4) != 0 && *(_DWORD *)(v9 + 4 * v4) != 0x1FFFFFF)
      {
        v10 = v3 + 32 * v4;
        v13 = *(_DWORD *)(v10 + 16);
        v11 = (_DWORD *)(v10 + 16);
        v12 = v13;
        *v11 = 0;
        v6 &= ~2u;
        v14 = *(_DWORD *)(v9 + 4 * v4);
        if (v14 != 0x1FFFFFF)
        {
          v15 = *(_QWORD *)(result + 184);
          v16 = *(unsigned int *)(v15 + 4 * (*(_DWORD *)(result + 192) - 1));
          *(_DWORD *)(v9 + ((v16 >> 5) & 0x7FFFFFC)) = v14;
          *(_DWORD *)(v15 + 4 * *(unsigned int *)(v9 + 4 * v4)) = v16;
          --*(_DWORD *)(result + 192);
          *(_DWORD *)(v9 + 4 * v4) = 0x1FFFFFF;
        }
        *v11 = v12;
      }
      v6 |= 0x20u;
      *v7 = v6;
      *(_DWORD *)(v9 + 4 * v4) = *(_DWORD *)(result + 440);
      v17 = *(unsigned int *)(result + 440);
      if ((*(_DWORD *)(result + 444) & 0x7FFFFFFFu) <= v17)
      {
        result = physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(result + 432, &v18);
        v6 = *v7;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(result + 432) + 4 * v17) = a2;
        ++*(_DWORD *)(result + 440);
      }
    }
    *v7 = v6 & 0xBE;
  }
  return result;
}

_QWORD *physx::IG::IslandSim::addConnection(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  _DWORD *v8;
  unsigned int v9;
  _QWORD *result;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int16 *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21;

  v21 = a5;
  v8 = (_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 76) <= a5)
  {
    physx::Cm::BlockArray<physx::IG::Edge>::reserve((_DWORD *)(a1 + 56), a5 + 2048);
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 304, *(_DWORD *)(a1 + 76));
  }
  if (*(_DWORD *)(a1 + 72) <= a5 + 1)
    v9 = a5 + 1;
  else
    v9 = *(_DWORD *)(a1 + 72);
  result = physx::Cm::BlockArray<physx::IG::Edge>::reserve(v8, v9);
  v11 = *(_DWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 56);
  if (v11 < v9)
  {
    do
    {
      v13 = *(_QWORD *)(v12 + 8 * (v11 / *(_DWORD *)(a1 + 80))) + 16 * (v11 % *(_DWORD *)(a1 + 80));
      *(_DWORD *)v13 = 0;
      *(_WORD *)(v13 + 4) = 16;
      *(_QWORD *)(v13 + 8) = -1;
      ++v11;
    }
    while (v9 != v11);
  }
  *(_DWORD *)(a1 + 72) = v9;
  *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * (a5 >> 5)) &= ~(1 << a5);
  v14 = *(_QWORD *)(v12 + 8 * (a5 / *(_DWORD *)(a1 + 80))) + 16 * (a5 % *(_DWORD *)(a1 + 80));
  v16 = (__int16 *)(v14 + 4);
  v15 = *(_WORD *)(v14 + 4);
  if ((v15 & 2) != 0)
  {
    v20 = v15 & 0xFFFD;
  }
  else
  {
    if ((v15 & 8) != 0)
      return result;
    v17 = v15 & 0xFFEF;
    *v16 = v17;
    *(_DWORD *)v14 = a4;
    v18 = a1 + 16 * a4;
    result = (_QWORD *)(v18 + 376);
    v19 = *(unsigned int *)(v18 + 384);
    if ((*(_DWORD *)(v18 + 388) & 0x7FFFFFFFu) <= v19)
    {
      result = (_QWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)result, &v21);
      v17 = *v16;
    }
    else
    {
      *(_DWORD *)(*result + 4 * v19) = a5;
      ++*(_DWORD *)(v18 + 384);
    }
    v20 = v17 & 0xFFB7 | 8;
  }
  *v16 = v20;
  return result;
}

void physx::IG::IslandSim::removeConnectionFromGraph(physx::IG::IslandSim *this, int a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;

  v3 = (uint64_t *)*((_QWORD *)this + 76);
  v4 = *((_DWORD *)v3 + 6);
  v5 = *v3;
  v6 = *(_QWORD *)(v5 + 8 * (2 * a2 / v4));
  v7 = *(unsigned int *)(v6 + 4 * (2 * a2 % v4));
  v8 = *(unsigned int *)(*(_QWORD *)(v5 + 8 * (((2 * a2) | 1u) / v4)) + 4 * (((2 * a2) | 1u) % v4));
  v9 = v7 >> 7;
  if (*(_DWORD *)(v6 + 4 * (2 * a2 % v4)) >> 7 != 0x1FFFFFF)
  {
    v10 = *((_QWORD *)this + 3);
    v11 = *((_QWORD *)this + 32);
    if ((*(_DWORD *)(v11 + 4 * v9) ^ v8) <= 0x7F)
      *(_DWORD *)(v11 + 4 * v9) = -128;
    v12 = v10 + 32 * v9;
    v14 = *(_BYTE *)(v12 + 4);
    v13 = (_BYTE *)(v12 + 4);
    if ((v14 & 0x10) == 0)
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 408, v9 + 1);
      *(_DWORD *)(*((_QWORD *)this + 51) + ((v7 >> 10) & 0x3FFFFC)) |= 1 << (v7 >> 7);
      *v13 |= 0x10u;
    }
  }
  v15 = v8 >> 7;
  if ((v8 >> 7) != 0x1FFFFFF)
  {
    v16 = *((_QWORD *)this + 3);
    v17 = *((_QWORD *)this + 32);
    if ((_DWORD)v9 == *(_DWORD *)(v17 + 4 * v15) >> 7)
      *(_DWORD *)(v17 + 4 * v15) = -128;
    v18 = v16 + 32 * v15;
    v20 = *(_BYTE *)(v18 + 4);
    v19 = (_BYTE *)(v18 + 4);
    if ((v20 & 0x10) == 0)
    {
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 408, v15 + 1);
      *(_DWORD *)(*((_QWORD *)this + 51) + ((v8 >> 10) & 0x3FFFFC)) |= 1 << (v8 >> 7);
      *v19 |= 0x10u;
    }
  }
}

double physx::IG::IslandSim::disconnectEdge(uint64_t a1, unsigned int *a2, int a3, unsigned int *a4)
{
  unsigned int v4;
  double result;

  if (*a4 == a3)
  {
    v4 = *a2;
    *a4 = *a2;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (a2[1] / *(_DWORD *)(a1 + 112)))
              + 8 * (a2[1] % *(_DWORD *)(a1 + 112))) = *a2;
    v4 = *a2;
  }
  if (v4 != -1)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v4 / *(_DWORD *)(a1 + 112)))
              + 8 * (v4 % *(_DWORD *)(a1 + 112))
              + 4) = a2[1];
  result = NAN;
  *(_QWORD *)a2 = -1;
  return result;
}

uint64_t physx::IG::IslandSim::removeConnection(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  __int16 v3;
  __int16 *v4;
  __int16 v5;
  uint64_t v6;
  unsigned int v7;

  v7 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8 * (a2 / *(_DWORD *)(this + 80))) + 16 * (a2 % *(_DWORD *)(this + 80));
  v5 = *(_WORD *)(v2 + 4);
  v4 = (__int16 *)(v2 + 4);
  v3 = v5;
  if ((v5 & 2) == 0)
  {
    v6 = *(unsigned int *)(this + 456);
    if ((*(_DWORD *)(this + 460) & 0x7FFFFFFFu) <= v6)
    {
      this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(this + 448, &v7);
      v3 = *v4;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(this + 448) + 4 * v6) = a2;
      ++*(_DWORD *)(this + 456);
    }
  }
  *v4 = v3 | 2;
  return this;
}

double physx::IG::IslandSim::removeConnectionInternal(physx::IG::IslandSim *this, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double result;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;

  v3 = 2 * a2;
  v4 = (uint64_t *)*((_QWORD *)this + 76);
  v5 = *((_DWORD *)v4 + 6);
  v6 = *v4;
  v7 = *(_QWORD *)(v6 + 8 * (2 * a2 / v5));
  v8 = (unint64_t)*(unsigned int *)(v7 + 4 * (2 * a2 % v5)) >> 7;
  if (*(_DWORD *)(v7 + 4 * (2 * a2 % v5)) >> 7 != 0x1FFFFFF)
  {
    result = physx::IG::IslandSim::disconnectEdge((uint64_t)this, (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v3 / *((_DWORD *)this + 28)))+ 8 * (v3 % *((_DWORD *)this + 28))), v3, (unsigned int *)(*((_QWORD *)this + 3) + 32 * v8));
    v10 = (uint64_t *)*((_QWORD *)this + 76);
    v5 = *((_DWORD *)v10 + 6);
    v6 = *v10;
  }
  v11 = v3 | 1;
  v12 = (unint64_t)*(unsigned int *)(*(_QWORD *)(v6 + 8 * (v11 / v5)) + 4 * (v11 % v5)) >> 7;
  if ((_DWORD)v12 != 0x1FFFFFF && (_DWORD)v8 != (_DWORD)v12)
    return physx::IG::IslandSim::disconnectEdge((uint64_t)this, (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v11 / *((_DWORD *)this + 28)))+ 8 * (v11 % *((_DWORD *)this + 28))), v11, (unsigned int *)(*((_QWORD *)this + 3) + 32 * v12));
  return result;
}

uint64_t physx::IG::IslandSim::deactivateNode(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v13 = a2;
  v2 = a2 >> 7;
  if (a2 >> 7 != 0x1FFFFFF)
  {
    v3 = v2;
    v4 = *(_QWORD *)(result + 24) + 32 * v2;
    v7 = *(_BYTE *)(v4 + 4);
    v6 = (char *)(v4 + 4);
    v5 = v7;
    if ((v7 & 0x20) != 0)
    {
      v8 = v5 & 0xDF;
      v9 = *(_QWORD *)(result + 432);
      v10 = *(unsigned int *)(v9 + 4 * (*(_DWORD *)(result + 440) - 1));
      *v6 = v5 & 0xDF;
      v11 = *(_QWORD *)(result + 40);
      *(_DWORD *)(v11 + ((v10 >> 5) & 0x7FFFFFC)) = *(_DWORD *)(v11 + 4 * v3);
      *(_DWORD *)(v9 + 4 * *(unsigned int *)(v11 + 4 * v3)) = v10;
      --*(_DWORD *)(result + 440);
      *(_DWORD *)(v11 + 4 * v3) = 0x1FFFFFF;
      if ((v5 & 4) != 0)
      {
        *(_DWORD *)(v11 + 4 * v3) = *(_DWORD *)(result + 192);
        v12 = *(unsigned int *)(result + 192);
        if ((*(_DWORD *)(result + 196) & 0x7FFFFFFFu) <= v12)
        {
          result = physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(result + 184, &v13);
          v8 = *v6;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(result + 184) + 4 * v12) = a2;
          ++*(_DWORD *)(result + 192);
        }
      }
    }
    else
    {
      v8 = v5;
    }
    *v6 = v8 | 1;
  }
  return result;
}

unsigned int *physx::IG::IslandSim::activateNodeInternal(unsigned int *result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  char v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  __int16 v13;
  _WORD *v14;
  uint64_t v15;
  unsigned int *v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;

  v2 = *((_QWORD *)result + 3);
  v3 = a2 >> 7;
  v4 = v2 + 32 * v3;
  v7 = *(_BYTE *)(v4 + 4);
  v6 = (char *)(v4 + 4);
  v5 = v7;
  if ((v7 & 2) == 0)
  {
    v9 = result;
    v10 = *(_DWORD *)(v2 + 32 * v3);
    if (v10 != -1)
    {
      v47 = (uint64_t)(result + 46);
      do
      {
        v11 = v10 >> 1;
        v12 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)v9 + 7) + 8 * (v11 / v9[20])) + 16 * (v11 % v9[20]));
        v14 = v12 + 1;
        v13 = *((_WORD *)v12 + 2);
        if ((v13 & 4) == 0)
        {
          v48 = v10 >> 1;
          *v14 = v13 | 0x40;
          v15 = *v12;
          v16 = &v9[4 * v15];
          v19 = v16[52];
          v17 = v16 + 52;
          v18 = v19;
          result = v17 - 2;
          if ((v17[1] & 0x7FFFFFFFu) <= v19)
          {
            result = (unsigned int *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)result, &v48);
            v15 = *v12;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)result + 4 * v18) = v11;
            ++*v17;
          }
          ++v9[v15 + 58];
          if (!(_DWORD)v15)
            *(_DWORD *)(*((_QWORD *)v9 + 38) + (((unint64_t)v48 >> 3) & 0x1FFFFFFC)) |= 1 << v48;
          v20 = (uint64_t *)*((_QWORD *)v9 + 76);
          v21 = *((_DWORD *)v20 + 6);
          v22 = *v20;
          v23 = *(_QWORD *)(v22 + 8 * (2 * v48 / v21));
          v24 = *(unsigned int *)(v23 + 4 * (2 * v48 % v21));
          v25 = *(unsigned int *)(*(_QWORD *)(v22 + 8 * (((2 * v48) | 1) / v21)) + 4 * (((2 * v48) | 1) % v21));
          v26 = v24 >> 7;
          v27 = v25 >> 7;
          if (*(_DWORD *)(v23 + 4 * (2 * v48 % v21)) >> 7 != 0x1FFFFFF && (_DWORD)v27 != 0x1FFFFFF)
          {
            v29 = *((_QWORD *)v9 + 3);
            v30 = v29 + 32 * v26;
            v33 = *(_DWORD *)(v30 + 16);
            v32 = (int *)(v30 + 16);
            v31 = v33;
            if (!v33)
            {
              if ((*(_BYTE *)(v29 + 32 * v26 + 4) & 0x26) == 4)
              {
                v49 = v24;
                if (!*v32)
                {
                  v34 = *((_QWORD *)v9 + 5);
                  if (*(_DWORD *)(v34 + 4 * v26) == 0x1FFFFFF)
                  {
                    *(_DWORD *)(v34 + 4 * v26) = v9[48];
                    v35 = v9[48];
                    if ((v9[49] & 0x7FFFFFFF) <= v35)
                    {
                      result = (unsigned int *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v47, &v49);
                      v29 = *((_QWORD *)v9 + 3);
                    }
                    else
                    {
                      *(_DWORD *)(*((_QWORD *)v9 + 23) + 4 * v35) = v49;
                      ++v9[48];
                    }
                  }
                }
                v31 = *v32;
              }
              else
              {
                v31 = 0;
              }
            }
            *v32 = v31 + 1;
            v36 = v29 + 32 * v27;
            v38 = (int *)(v36 + 16);
            v37 = *(_DWORD *)(v36 + 16);
            if (!v37)
            {
              if ((*(_BYTE *)(v36 + 4) & 0x26) == 4)
              {
                v49 = v25;
                if (!*v38)
                {
                  v39 = *((_QWORD *)v9 + 5);
                  if (*(_DWORD *)(v39 + 4 * v27) == 0x1FFFFFF)
                  {
                    *(_DWORD *)(v39 + 4 * v27) = v9[48];
                    v40 = v9[48];
                    if ((v9[49] & 0x7FFFFFFF) <= v40)
                    {
                      result = (unsigned int *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v47, &v49);
                    }
                    else
                    {
                      *(_DWORD *)(*((_QWORD *)v9 + 23) + 4 * v40) = v49;
                      ++v9[48];
                    }
                  }
                }
                v37 = *v38;
              }
              else
              {
                v37 = 0;
              }
            }
            *v38 = v37 + 1;
          }
          *v14 |= 4u;
        }
        v10 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 11) + 8 * (v10 / v9[28])) + 8 * (v10 % v9[28]));
      }
      while (v10 != -1);
      v5 = *v6;
    }
    if ((v5 & 4) != 0)
    {
      v49 = a2;
      if (*(_DWORD *)(*((_QWORD *)v9 + 3) + 32 * v3 + 16))
        goto LABEL_45;
      v45 = *((_QWORD *)v9 + 5);
      if (*(_DWORD *)(v45 + 4 * v3) != 0x1FFFFFF)
        goto LABEL_45;
      *(_DWORD *)(v45 + 4 * v3) = v9[48];
      v46 = v9[48];
      if ((v9[49] & 0x7FFFFFFF) > v46)
      {
        *(_DWORD *)(*((_QWORD *)v9 + 23) + 4 * v46) = a2;
        ++v9[48];
        goto LABEL_45;
      }
      result = v9 + 46;
    }
    else
    {
      v49 = a2;
      v41 = &v9[4 * *(unsigned __int8 *)(*((_QWORD *)v9 + 3) + 32 * v3 + 5)];
      v43 = v41[40];
      v42 = v41 + 40;
      result = v42 - 2;
      *(_DWORD *)(*((_QWORD *)v9 + 5) + 4 * v3) = v43;
      v44 = *v42;
      if ((v42[1] & 0x7FFFFFFF) > v44)
      {
        *(_DWORD *)(*(_QWORD *)result + 4 * v44) = a2;
        ++*v42;
LABEL_45:
        *v6 |= 2u;
        return result;
      }
    }
    result = (unsigned int *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)result, &v49);
    goto LABEL_45;
  }
  return result;
}

uint64_t physx::IG::IslandSim::removeEdgeFromActivatingList(uint64_t this, unsigned int a2)
{
  unsigned int *v2;
  __int16 v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(this + 56) + 8 * (a2 / *(_DWORD *)(this + 80)))
                      + 16 * (a2 % *(_DWORD *)(this + 80)));
  v3 = *((_WORD *)v2 + 2);
  if ((v3 & 0x40) != 0)
  {
    v4 = this + 16 * *v2;
    v7 = *(_DWORD *)(v4 + 208);
    v5 = (_DWORD *)(v4 + 208);
    v6 = v7;
    if (v7)
    {
      v8 = *(_DWORD **)(this + 16 * *v2 + 200);
      v9 = v6;
      v10 = v8;
      while (*v10 != a2)
      {
        ++v10;
        if (!--v9)
          goto LABEL_8;
      }
      v11 = v6 - 1;
      *v5 = v11;
      *v10 = v8[v11];
    }
LABEL_8:
    *((_WORD *)v2 + 2) = v3 & 0xFFBF;
  }
  v12 = *(uint64_t **)(this + 608);
  v13 = *((_DWORD *)v12 + 6);
  v14 = *v12;
  v15 = *(unsigned int *)(*(_QWORD *)(*v12 + 8 * (2 * a2 / v13)) + 4 * (2 * a2 % v13));
  if (v15 <= 0xFFFFFF7F)
  {
    v16 = *(unsigned int *)(*(_QWORD *)(v14 + 8 * (((2 * a2) | 1) / v13)) + 4 * (((2 * a2) | 1) % v13));
    if (v16 <= 0xFFFFFF7F)
    {
      v17 = *(_QWORD *)(this + 24);
      --*(_DWORD *)(v17 + ((v15 >> 2) & 0x3FFFFFE0) + 16);
      --*(_DWORD *)(v17 + ((v16 >> 2) & 0x3FFFFFE0) + 16);
    }
  }
  if (!*v2)
    *(_DWORD *)(*(_QWORD *)(this + 304) + 4 * (a2 >> 5)) &= ~(1 << a2);
  return this;
}

unsigned int *physx::IG::IslandSim::activateIsland(unsigned int *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)this + 15);
  v6 = *(unsigned int *)(v4 + 44 * a2);
  v7 = v6 >> 7;
  if (v6 >> 7 != 0x1FFFFFF)
  {
    do
    {
      this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v3, v6);
      v6 = *(unsigned int *)(*(_QWORD *)(v3 + 24) + 32 * v7 + 8);
      v7 = v6 >> 7;
    }
    while (v6 >> 7 != 0x1FFFFFF);
    v4 = *(_QWORD *)(v3 + 120);
  }
  v9 = a2;
  *(_DWORD *)(*(_QWORD *)(v3 + 288) + 4 * (a2 >> 5)) |= 1 << a2;
  v8 = *(unsigned int *)(v3 + 328);
  *(_DWORD *)(v4 + 44 * a2 + 16) = v8;
  if ((*(_DWORD *)(v3 + 332) & 0x7FFFFFFFu) <= v8)
    return (unsigned int *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v3 + 320, &v9);
  *(_DWORD *)(*(_QWORD *)(v3 + 320) + 4 * v8) = a2;
  ++*(_DWORD *)(v3 + 328);
  return this;
}

_DWORD *physx::IG::IslandSim::wakeIslands(_DWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int i;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  __int16 v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t j;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  int v67;

  v1 = (uint64_t)this;
  v2 = 0;
  v3 = this[82];
  v4 = 1;
  do
  {
    v5 = v4;
    v6 = &this[4 * v2];
    v7 = v6[52];
    if ((_DWORD)v7)
    {
      v8 = (unsigned int *)*((_QWORD *)v6 + 25);
      v9 = this[20];
      v10 = *((_QWORD *)this + 7);
      do
      {
        v11 = *v8++;
        v12 = *(_QWORD *)(v10 + 8 * (v11 / v9)) + 16 * (v11 % v9);
        *(_WORD *)(v12 + 4) &= ~0x40u;
        --v7;
      }
      while (v7);
    }
    v4 = 0;
    v2 = 1;
  }
  while ((v5 & 1) != 0);
  this[52] = 0;
  this[56] = 0;
  if (this[110])
  {
    v13 = 0;
    v64 = (uint64_t)(this + 80);
    v62 = v3;
    v63 = (uint64_t)(this + 46);
    do
    {
      v65 = *(_DWORD *)(*(_QWORD *)(v1 + 432) + 4 * v13);
      v14 = (unint64_t)v65 >> 7;
      v15 = *(unsigned int *)(*(_QWORD *)(v1 + 272) + 4 * v14);
      v16 = *(_QWORD *)(v1 + 24) + 32 * v14;
      v17 = *(_BYTE *)(v16 + 4) & 0xDF;
      *(_BYTE *)(v16 + 4) = v17;
      if ((_DWORD)v15 == -1)
      {
        *(_BYTE *)(v16 + 4) = v17 | 2;
        *(_DWORD *)(*(_QWORD *)(v1 + 40) + 4 * v14) = *(_DWORD *)(v1 + 192);
        v21 = *(unsigned int *)(v1 + 192);
        if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v21)
        {
          this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v63, &v65);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v1 + 184) + 4 * v21) = v65;
          ++*(_DWORD *)(v1 + 192);
        }
        for (i = *(_DWORD *)v16; i != -1; i = *(_DWORD *)(v24 + 8 * (i % v23)))
        {
          v23 = *(_DWORD *)(v1 + 112);
          v24 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * (i / v23));
          v25 = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(v1 + 608)
                                            + 8 * ((i ^ 1) / *(_DWORD *)(*(_QWORD *)(v1 + 608) + 24)))
                                + 4 * ((i ^ 1) % *(_DWORD *)(*(_QWORD *)(v1 + 608) + 24)));
          if (v25 > 0xFFFFFF7F
            || (v26 = *(unsigned int *)(*(_QWORD *)(v1 + 272) + ((v25 >> 5) & 0x7FFFFFC)), (_DWORD)v26 == -1))
          {
            v30 = i >> 1;
            v31 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * (v30 / *(_DWORD *)(v1 + 80)))
                                 + 16 * (v30 % *(_DWORD *)(v1 + 80)));
            v33 = v31 + 1;
            v32 = *((_WORD *)v31 + 2);
            if ((v32 & 4) == 0)
            {
              v34 = *v31;
              if ((_DWORD)v34 != 1)
              {
                v66 = i >> 1;
                *v33 = v32 | 0x40;
                v35 = v1 + 16 * v34;
                v38 = *(_DWORD *)(v35 + 208);
                v36 = (_DWORD *)(v35 + 208);
                v37 = v38;
                this = v36 - 2;
                if ((v36[1] & 0x7FFFFFFFu) <= v38)
                {
                  this = (_DWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)this, &v66);
                  v34 = *v31;
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)this + 4 * v37) = v30;
                  ++*v36;
                }
                ++*(_DWORD *)(v1 + 4 * v34 + 232);
                if (!(_DWORD)v34)
                  *(_DWORD *)(*(_QWORD *)(v1 + 304) + (((unint64_t)v66 >> 3) & 0x1FFFFFFC)) |= 1 << v66;
                v39 = *(uint64_t **)(v1 + 608);
                v40 = *((_DWORD *)v39 + 6);
                v41 = *v39;
                v42 = *(unsigned int *)(*(_QWORD *)(*v39 + 8 * (2 * v66 / v40)) + 4 * (2 * v66 % v40));
                v43 = v42 >> 7;
                if ((v42 >> 7) != 0x1FFFFFF)
                {
                  v44 = *(unsigned int *)(*(_QWORD *)(v41 + 8 * (((2 * v66) | 1) / v40))
                                        + 4 * (((2 * v66) | 1) % v40));
                  v45 = v44 >> 7;
                  if (*(_DWORD *)(*(_QWORD *)(v41 + 8 * (((2 * v66) | 1) / v40)) + 4 * (((2 * v66) | 1) % v40)) >> 7 != 0x1FFFFFF)
                  {
                    v46 = *(_QWORD *)(v1 + 24);
                    v47 = v46 + 32 * v43;
                    v50 = *(_DWORD *)(v47 + 16);
                    v49 = (int *)(v47 + 16);
                    v48 = v50;
                    if (!v50)
                    {
                      if ((*(_BYTE *)(v46 + 32 * v43 + 4) & 0x26) == 4)
                      {
                        v67 = v42;
                        if (!*v49)
                        {
                          v51 = *(_QWORD *)(v1 + 40);
                          if (*(_DWORD *)(v51 + 4 * v43) == 0x1FFFFFF)
                          {
                            *(_DWORD *)(v51 + 4 * v43) = *(_DWORD *)(v1 + 192);
                            v52 = *(unsigned int *)(v1 + 192);
                            if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v52)
                            {
                              this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v63, &v67);
                              v46 = *(_QWORD *)(v1 + 24);
                            }
                            else
                            {
                              *(_DWORD *)(*(_QWORD *)(v1 + 184) + 4 * v52) = v67;
                              ++*(_DWORD *)(v1 + 192);
                            }
                          }
                        }
                        v48 = *v49;
                      }
                      else
                      {
                        v48 = 0;
                      }
                    }
                    *v49 = v48 + 1;
                    v53 = v46 + 32 * v45;
                    v55 = (int *)(v53 + 16);
                    v54 = *(_DWORD *)(v53 + 16);
                    if (!v54)
                    {
                      if ((*(_BYTE *)(v53 + 4) & 0x26) == 4)
                      {
                        v67 = v44;
                        if (!*v55)
                        {
                          v56 = *(_QWORD *)(v1 + 40);
                          if (*(_DWORD *)(v56 + 4 * v45) == 0x1FFFFFF)
                          {
                            *(_DWORD *)(v56 + 4 * v45) = *(_DWORD *)(v1 + 192);
                            v57 = *(unsigned int *)(v1 + 192);
                            if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v57)
                            {
                              this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v63, &v67);
                            }
                            else
                            {
                              *(_DWORD *)(*(_QWORD *)(v1 + 184) + 4 * v57) = v67;
                              ++*(_DWORD *)(v1 + 192);
                            }
                          }
                        }
                        v54 = *v55;
                      }
                      else
                      {
                        v54 = 0;
                      }
                    }
                    *v55 = v54 + 1;
                  }
                }
                *v33 |= 4u;
              }
            }
          }
          else
          {
            v27 = *(_QWORD *)(v1 + 288);
            if ((*(_DWORD *)(v27 + 4 * (v26 >> 5)) & (1 << v26)) == 0)
            {
              v67 = v26;
              v28 = *(_QWORD *)(v1 + 120);
              *(_DWORD *)(v27 + 4 * (v26 >> 5)) |= 1 << v26;
              v29 = *(unsigned int *)(v1 + 328);
              *(_DWORD *)(v28 + 44 * v26 + 16) = v29;
              if ((*(_DWORD *)(v1 + 332) & 0x7FFFFFFFu) <= v29)
              {
                this = (_DWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v64, &v67);
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)(v1 + 320) + 4 * v29) = v67;
                ++*(_DWORD *)(v1 + 328);
              }
            }
          }
        }
      }
      else
      {
        v18 = *(_QWORD *)(v1 + 288);
        if ((*(_DWORD *)(v18 + 4 * (v15 >> 5)) & (1 << v15)) == 0)
        {
          v67 = v15;
          v19 = *(_QWORD *)(v1 + 120);
          *(_DWORD *)(v18 + 4 * (v15 >> 5)) |= 1 << v15;
          v20 = *(unsigned int *)(v1 + 328);
          *(_DWORD *)(v19 + 44 * v15 + 16) = v20;
          if ((*(_DWORD *)(v1 + 332) & 0x7FFFFFFFu) <= v20)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v64, &v67);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v1 + 320) + 4 * v20) = v67;
            ++*(_DWORD *)(v1 + 328);
          }
          v14 = (unint64_t)v65 >> 7;
        }
        *(_DWORD *)(*(_QWORD *)(v1 + 40) + 4 * v14) = 0x1FFFFFF;
        this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v1, v65);
      }
      ++v13;
    }
    while (v13 < *(unsigned int *)(v1 + 440));
    v58 = *(unsigned int *)(v1 + 328);
    *(_DWORD *)(v1 + 336) = *(_DWORD *)(v1 + 160);
    *(_DWORD *)(v1 + 340) = *(_DWORD *)(v1 + 176);
    *(_DWORD *)(v1 + 440) = 0;
    for (j = v62; j < v58; ++j)
    {
      v60 = *(unsigned int *)(*(_QWORD *)(v1 + 120) + 44 * *(unsigned int *)(*(_QWORD *)(v1 + 320) + 4 * j));
      v61 = v60 >> 7;
      if (v60 >> 7 != 0x1FFFFFF)
      {
        do
        {
          this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v1, v60);
          v60 = *(unsigned int *)(*(_QWORD *)(v1 + 24) + 32 * v61 + 8);
          v61 = v60 >> 7;
        }
        while (v60 >> 7 != 0x1FFFFFF);
        v58 = *(unsigned int *)(v1 + 328);
      }
    }
  }
  else
  {
    this[84] = this[40];
    this[85] = this[44];
    this[110] = 0;
  }
  return this;
}

_DWORD *physx::IG::IslandSim::wakeIslands2(_DWORD *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int i;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  __int16 v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t j;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;

  v1 = (uint64_t)this;
  if (this[110])
  {
    v2 = 0;
    v51 = this[82];
    v52 = (uint64_t)(this + 46);
    v53 = (uint64_t)(this + 80);
    do
    {
      v54 = *(_DWORD *)(*(_QWORD *)(v1 + 432) + 4 * v2);
      v3 = (unint64_t)v54 >> 7;
      v4 = *(unsigned int *)(*(_QWORD *)(v1 + 272) + 4 * v3);
      v5 = *(_QWORD *)(v1 + 24) + 32 * v3;
      v6 = *(_BYTE *)(v5 + 4) & 0xDF;
      *(_BYTE *)(v5 + 4) = v6;
      if ((_DWORD)v4 == -1)
      {
        *(_BYTE *)(v5 + 4) = v6 | 2;
        *(_DWORD *)(*(_QWORD *)(v1 + 40) + 4 * v3) = *(_DWORD *)(v1 + 192);
        v10 = *(unsigned int *)(v1 + 192);
        if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v10)
        {
          this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v52, &v54);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(v1 + 184) + 4 * v10) = v54;
          ++*(_DWORD *)(v1 + 192);
        }
        for (i = *(_DWORD *)v5; i != -1; i = *(_DWORD *)(v13 + 8 * (i % v12)))
        {
          v12 = *(_DWORD *)(v1 + 112);
          v13 = *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * (i / v12));
          v14 = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(v1 + 608)
                                            + 8 * ((i ^ 1) / *(_DWORD *)(*(_QWORD *)(v1 + 608) + 24)))
                                + 4 * ((i ^ 1) % *(_DWORD *)(*(_QWORD *)(v1 + 608) + 24)));
          if (v14 > 0xFFFFFF7F
            || (v15 = *(unsigned int *)(*(_QWORD *)(v1 + 272) + ((v14 >> 5) & 0x7FFFFFC)), (_DWORD)v15 == -1))
          {
            v19 = i >> 1;
            v20 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * (v19 / *(_DWORD *)(v1 + 80)))
                                 + 16 * (v19 % *(_DWORD *)(v1 + 80)));
            v22 = v20 + 1;
            v21 = *((_WORD *)v20 + 2);
            if ((v21 & 4) == 0)
            {
              v23 = *v20;
              if ((_DWORD)v23 != 1)
              {
                v55 = i >> 1;
                *v22 = v21 | 0x40;
                v24 = v1 + 16 * v23;
                v27 = *(_DWORD *)(v24 + 208);
                v25 = (_DWORD *)(v24 + 208);
                v26 = v27;
                this = v25 - 2;
                if ((v25[1] & 0x7FFFFFFFu) <= v27)
                {
                  this = (_DWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)this, &v55);
                  v23 = *v20;
                }
                else
                {
                  *(_DWORD *)(*(_QWORD *)this + 4 * v26) = v19;
                  ++*v25;
                }
                ++*(_DWORD *)(v1 + 4 * v23 + 232);
                if (!(_DWORD)v23)
                  *(_DWORD *)(*(_QWORD *)(v1 + 304) + (((unint64_t)v55 >> 3) & 0x1FFFFFFC)) |= 1 << v55;
                v28 = *(uint64_t **)(v1 + 608);
                v29 = *((_DWORD *)v28 + 6);
                v30 = *v28;
                v31 = *(unsigned int *)(*(_QWORD *)(*v28 + 8 * (2 * v55 / v29)) + 4 * (2 * v55 % v29));
                v32 = v31 >> 7;
                if ((v31 >> 7) != 0x1FFFFFF)
                {
                  v33 = *(unsigned int *)(*(_QWORD *)(v30 + 8 * (((2 * v55) | 1) / v29))
                                        + 4 * (((2 * v55) | 1) % v29));
                  v34 = v33 >> 7;
                  if (*(_DWORD *)(*(_QWORD *)(v30 + 8 * (((2 * v55) | 1) / v29)) + 4 * (((2 * v55) | 1) % v29)) >> 7 != 0x1FFFFFF)
                  {
                    v35 = *(_QWORD *)(v1 + 24);
                    v36 = v35 + 32 * v32;
                    v39 = *(_DWORD *)(v36 + 16);
                    v38 = (int *)(v36 + 16);
                    v37 = v39;
                    if (!v39)
                    {
                      if ((*(_BYTE *)(v35 + 32 * v32 + 4) & 0x26) == 4)
                      {
                        v56 = v31;
                        if (!*v38)
                        {
                          v40 = *(_QWORD *)(v1 + 40);
                          if (*(_DWORD *)(v40 + 4 * v32) == 0x1FFFFFF)
                          {
                            *(_DWORD *)(v40 + 4 * v32) = *(_DWORD *)(v1 + 192);
                            v41 = *(unsigned int *)(v1 + 192);
                            if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v41)
                            {
                              this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v52, &v56);
                              v35 = *(_QWORD *)(v1 + 24);
                            }
                            else
                            {
                              *(_DWORD *)(*(_QWORD *)(v1 + 184) + 4 * v41) = v56;
                              ++*(_DWORD *)(v1 + 192);
                            }
                          }
                        }
                        v37 = *v38;
                      }
                      else
                      {
                        v37 = 0;
                      }
                    }
                    *v38 = v37 + 1;
                    v42 = v35 + 32 * v34;
                    v44 = (int *)(v42 + 16);
                    v43 = *(_DWORD *)(v42 + 16);
                    if (!v43)
                    {
                      if ((*(_BYTE *)(v42 + 4) & 0x26) == 4)
                      {
                        v56 = v33;
                        if (!*v44)
                        {
                          v45 = *(_QWORD *)(v1 + 40);
                          if (*(_DWORD *)(v45 + 4 * v34) == 0x1FFFFFF)
                          {
                            *(_DWORD *)(v45 + 4 * v34) = *(_DWORD *)(v1 + 192);
                            v46 = *(unsigned int *)(v1 + 192);
                            if ((*(_DWORD *)(v1 + 196) & 0x7FFFFFFFu) <= v46)
                            {
                              this = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(v52, &v56);
                            }
                            else
                            {
                              *(_DWORD *)(*(_QWORD *)(v1 + 184) + 4 * v46) = v56;
                              ++*(_DWORD *)(v1 + 192);
                            }
                          }
                        }
                        v43 = *v44;
                      }
                      else
                      {
                        v43 = 0;
                      }
                    }
                    *v44 = v43 + 1;
                  }
                }
                *v22 |= 4u;
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v1 + 288);
            if ((*(_DWORD *)(v16 + 4 * (v15 >> 5)) & (1 << v15)) == 0)
            {
              v56 = v15;
              v17 = *(_QWORD *)(v1 + 120);
              *(_DWORD *)(v16 + 4 * (v15 >> 5)) |= 1 << v15;
              v18 = *(unsigned int *)(v1 + 328);
              *(_DWORD *)(v17 + 44 * v15 + 16) = v18;
              if ((*(_DWORD *)(v1 + 332) & 0x7FFFFFFFu) <= v18)
              {
                this = (_DWORD *)physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v53, &v56);
              }
              else
              {
                *(_DWORD *)(*(_QWORD *)(v1 + 320) + 4 * v18) = v56;
                ++*(_DWORD *)(v1 + 328);
              }
            }
          }
        }
      }
      else
      {
        v7 = *(_QWORD *)(v1 + 288);
        if ((*(_DWORD *)(v7 + 4 * (v4 >> 5)) & (1 << v4)) == 0)
        {
          v56 = v4;
          v8 = *(_QWORD *)(v1 + 120);
          *(_DWORD *)(v7 + 4 * (v4 >> 5)) |= 1 << v4;
          v9 = *(unsigned int *)(v1 + 328);
          *(_DWORD *)(v8 + 44 * v4 + 16) = v9;
          if ((*(_DWORD *)(v1 + 332) & 0x7FFFFFFFu) <= v9)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v53, &v56);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v1 + 320) + 4 * v9) = v56;
            ++*(_DWORD *)(v1 + 328);
          }
          v3 = (unint64_t)v54 >> 7;
        }
        *(_DWORD *)(*(_QWORD *)(v1 + 40) + 4 * v3) = 0x1FFFFFF;
        this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v1, v54);
      }
      ++v2;
    }
    while (v2 < *(unsigned int *)(v1 + 440));
    v47 = *(unsigned int *)(v1 + 328);
    *(_DWORD *)(v1 + 440) = 0;
    for (j = v51; j < v47; ++j)
    {
      v49 = *(unsigned int *)(*(_QWORD *)(v1 + 120) + 44 * *(unsigned int *)(*(_QWORD *)(v1 + 320) + 4 * j));
      v50 = v49 >> 7;
      if (v49 >> 7 != 0x1FFFFFF)
      {
        do
        {
          this = physx::IG::IslandSim::activateNodeInternal((unsigned int *)v1, v49);
          v49 = *(unsigned int *)(*(_QWORD *)(v1 + 24) + 32 * v50 + 8);
          v50 = v49 >> 7;
        }
        while (v49 >> 7 != 0x1FFFFFF);
        v47 = *(unsigned int *)(v1 + 328);
      }
    }
  }
  else
  {
    this[110] = 0;
  }
  return this;
}

void physx::IG::IslandSim::removeDestroyedEdges(physx::IG::IslandSim *this)
{
  unint64_t v1;
  unint64_t i;
  unsigned int v4;

  v1 = *((unsigned int *)this + 114);
  if ((_DWORD)v1)
  {
    for (i = 0; i < v1; ++i)
    {
      v4 = *(_DWORD *)(*((_QWORD *)this + 56) + 4 * i);
      if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * (v4 / *((_DWORD *)this + 20)))
                     + 16 * (v4 % *((_DWORD *)this + 20))
                     + 4) & 0xB) == 3)
      {
        physx::IG::IslandSim::removeConnectionInternal(this, *(_DWORD *)(*((_QWORD *)this + 56) + 4 * i));
        physx::IG::IslandSim::removeConnectionFromGraph(this, v4);
        v1 = *((unsigned int *)this + 114);
      }
    }
  }
}

uint64_t physx::IG::IslandSim::processNewEdges(physx::IG::IslandSim *this)
{
  uint64_t v2;
  char v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  _WORD *v11;
  __int16 v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  __int16 v45;
  char *v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t result;
  char v77;
  char *v78;
  uint64_t v79;
  unsigned int *v80;
  _QWORD *v81;
  unsigned int v82;
  uint64_t *v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  _BOOL4 v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  int v123;
  char *v124;
  _QWORD *v125;
  char v126;
  char v127;
  _DWORD *v128;
  uint64_t *v129;
  unsigned int v130;
  int v131;

  v128 = (_DWORD *)((char *)this + 88);
  physx::Cm::BlockArray<physx::IG::EdgeInstance>::reserve((_DWORD *)this + 22, 2 * *((_DWORD *)this + 19));
  v2 = 0;
  v124 = (char *)this + 184;
  v3 = 1;
  do
  {
    v126 = v3;
    v4 = (char *)this + 16 * v2;
    v5 = *((unsigned int *)v4 + 96);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = (unsigned int *)(v4 + 384);
      v8 = v4 + 376;
      while (1)
      {
        v9 = *(_DWORD *)(*v8 + 4 * v6);
        v10 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * (v9 / *((_DWORD *)this + 20)))
            + 16 * (v9 % *((_DWORD *)this + 20));
        v12 = *(_WORD *)(v10 + 4);
        v11 = (_WORD *)(v10 + 4);
        if ((v12 & 3) == 0)
          break;
LABEL_55:
        if (++v6 >= v5)
          goto LABEL_56;
      }
      v13 = 2 * v9;
      if (2 * v9 + 2 <= *((_DWORD *)this + 26))
        v14 = *((_DWORD *)this + 26);
      else
        v14 = 2 * v9 + 2;
      physx::Cm::BlockArray<physx::IG::EdgeInstance>::reserve(v128, v14);
      v15 = *((_DWORD *)this + 26);
      if (v15 < v14)
      {
        do
        {
          *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v15 / *((_DWORD *)this + 28)))
                    + 8 * (v15 % *((_DWORD *)this + 28))) = -1;
          ++v15;
        }
        while (v14 != v15);
      }
      *((_DWORD *)this + 26) = v14;
      v16 = *((_DWORD *)this + 20);
      v17 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * (v9 / v16));
      v18 = (uint64_t *)*((_QWORD *)this + 76);
      v19 = *((_DWORD *)v18 + 6);
      v20 = *v18;
      v21 = v13 | 1;
      v22 = *(unsigned int *)(*(_QWORD *)(v20 + 8 * (v21 / v19)) + 4 * (v21 % v19));
      v23 = (unint64_t)*(unsigned int *)(*(_QWORD *)(v20 + 8 * (v13 / v19)) + 4 * (v13 % v19)) >> 7;
      if ((_DWORD)v23 == 0x1FFFFFF)
      {
        v24 = 0;
        v25 = 1;
      }
      else
      {
        v26 = *((_QWORD *)this + 3) + 32 * v23;
        v27 = *((_DWORD *)this + 28);
        v28 = *((_QWORD *)this + 11);
        v29 = *(_QWORD *)(v28 + 8 * (v13 / v27));
        v30 = *(_DWORD *)v26;
        *(_DWORD *)(v29 + 8 * (v13 % v27)) = *(_DWORD *)v26;
        if (v30 != -1)
          *(_DWORD *)(*(_QWORD *)(v28 + 8 * (v30 / v27)) + 8 * (v30 % v27) + 4) = v13;
        *(_DWORD *)v26 = v13;
        *(_DWORD *)(v29 + 8 * (v13 % v27) + 4) = -1;
        v31 = *(unsigned __int8 *)(v26 + 4);
        v24 = (v31 & 0x22) != 0;
        v25 = (v31 >> 2) & 1;
      }
      v32 = v22 >> 7;
      if ((_DWORD)v23 != (_DWORD)v32 && (_DWORD)v32 != 0x1FFFFFF)
      {
        v33 = *((_QWORD *)this + 3);
        v34 = (unsigned int *)(v33 + 32 * v32);
        v35 = *((_DWORD *)this + 28);
        v36 = *((_QWORD *)this + 11);
        v37 = *(_QWORD *)(v36 + 8 * (v21 / v35));
        v38 = *v34;
        *(_DWORD *)(v37 + 8 * (v21 % v35)) = *v34;
        if (v38 != -1)
          *(_DWORD *)(*(_QWORD *)(v36 + 8 * (v38 / v35)) + 8 * (v38 % v35) + 4) = v21;
        *v34 = v21;
        *(_DWORD *)(v37 + 8 * (v21 % v35) + 4) = -1;
        if ((v24 & 1) == 0)
        {
          v39 = *(unsigned __int8 *)(v33 + 32 * v32 + 4);
          if ((v39 & 2) == 0)
          {
            v24 = (v39 >> 5) & 1;
            if (!v25)
              goto LABEL_22;
LABEL_25:
            if ((v24 & 1) == 0)
            {
LABEL_54:
              *v11 |= 1u;
              v5 = *v7;
              goto LABEL_55;
            }
            v25 = (*(unsigned __int8 *)(v33 + 32 * v32 + 4) >> 2) & 1;
LABEL_27:
            v40 = v9 % v16;
            v41 = (unsigned int *)(v17 + 16 * v40);
            v42 = *v41;
            if (!v25 || !(_DWORD)v42)
            {
              v130 = v9;
              v43 = v17 + 16 * v40;
              v45 = *(_WORD *)(v43 + 4);
              v44 = (_WORD *)(v43 + 4);
              *v44 = v45 | 0x40;
              v46 = (char *)this + 16 * v42;
              v49 = *((_DWORD *)v46 + 52);
              v47 = v46 + 208;
              v48 = v49;
              v50 = v47 - 2;
              if ((v47[1] & 0x7FFFFFFFu) <= v49)
              {
                physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v50, &v130);
                v42 = *v41;
                v9 = v130;
              }
              else
              {
                *(_DWORD *)(*v50 + 4 * v48) = v9;
                ++*v47;
              }
              ++*((_DWORD *)this + v42 + 58);
              if (!(_DWORD)v42)
              {
                *(_DWORD *)(*((_QWORD *)this + 38) + 4 * (v9 >> 5)) |= 1 << v9;
                v9 = v130;
              }
              v51 = (uint64_t *)*((_QWORD *)this + 76);
              v52 = *((_DWORD *)v51 + 6);
              v53 = *v51;
              v54 = *(unsigned int *)(*(_QWORD *)(*v51 + 8 * (2 * v9 / v52)) + 4 * (2 * v9 % v52));
              v55 = v54 >> 7;
              if ((v54 >> 7) != 0x1FFFFFF)
              {
                v56 = (2 * v9) | 1;
                v57 = *(_QWORD *)(v53 + 8 * (v56 / v52));
                v58 = v56 % v52;
                v59 = *(unsigned int *)(v57 + 4 * v58);
                v60 = v59 >> 7;
                if (*(_DWORD *)(v57 + 4 * v58) >> 7 != 0x1FFFFFF)
                {
                  v61 = *((_QWORD *)this + 3);
                  v62 = v61 + 32 * v55;
                  v65 = *(_DWORD *)(v62 + 16);
                  v64 = (int *)(v62 + 16);
                  v63 = v65;
                  if (!v65)
                  {
                    if ((*(_BYTE *)(v61 + 32 * v55 + 4) & 0x26) == 4)
                    {
                      v131 = v54;
                      v66 = *((_QWORD *)this + 5);
                      if (*(_DWORD *)(v66 + 4 * v55) == 0x1FFFFFF)
                      {
                        *(_DWORD *)(v66 + 4 * v55) = *((_DWORD *)this + 48);
                        v67 = *((unsigned int *)this + 48);
                        if ((*((_DWORD *)this + 49) & 0x7FFFFFFFu) <= v67)
                        {
                          v123 = v59;
                          physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)v124, &v131);
                          LODWORD(v59) = v123;
                          v61 = *((_QWORD *)this + 3);
                        }
                        else
                        {
                          *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v67) = v54;
                          ++*((_DWORD *)this + 48);
                        }
                      }
                      v63 = *v64;
                    }
                    else
                    {
                      v63 = 0;
                    }
                  }
                  *v64 = v63 + 1;
                  v68 = v61 + 32 * v60;
                  v70 = (int *)(v68 + 16);
                  v69 = *(_DWORD *)(v68 + 16);
                  if (!v69)
                  {
                    if ((*(_BYTE *)(v68 + 4) & 0x26) == 4)
                    {
                      v131 = v59;
                      v71 = *((_QWORD *)this + 5);
                      if (*(_DWORD *)(v71 + 4 * v60) == 0x1FFFFFF)
                      {
                        *(_DWORD *)(v71 + 4 * v60) = *((_DWORD *)this + 48);
                        v72 = *((unsigned int *)this + 48);
                        if ((*((_DWORD *)this + 49) & 0x7FFFFFFFu) <= v72)
                        {
                          physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)v124, &v131);
                        }
                        else
                        {
                          *(_DWORD *)(*((_QWORD *)this + 23) + 4 * v72) = v59;
                          ++*((_DWORD *)this + 48);
                        }
                      }
                      v69 = *v70;
                    }
                    else
                    {
                      v69 = 0;
                    }
                  }
                  *v70 = v69 + 1;
                }
              }
              *v44 |= 4u;
            }
            goto LABEL_54;
          }
        }
        v24 = 1;
        if (v25)
          goto LABEL_25;
      }
LABEL_22:
      if (!v24)
        goto LABEL_54;
      goto LABEL_27;
    }
LABEL_56:
    v3 = 0;
    v2 = 1;
  }
  while ((v126 & 1) != 0);
  v73 = *((_DWORD *)this + 8);
  v131 = 0;
  v129 = (uint64_t *)((char *)this + 240);
  physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 240, v73, &v131);
  v74 = *((_DWORD *)this + 8);
  v131 = -128;
  v125 = (_QWORD *)((char *)this + 256);
  physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::resize((uint64_t)this + 256, v74, &v131);
  v75 = 0;
  result = 0x1FFFFFFLL;
  v77 = 1;
  do
  {
    v127 = v77;
    v78 = (char *)this + 16 * v75;
    if (*((_DWORD *)v78 + 96))
    {
      v79 = 0;
      v80 = (unsigned int *)(v78 + 384);
      v81 = v78 + 376;
      while (1)
      {
        v82 = *(_DWORD *)(*v81 + 4 * v79);
        if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8 * (v82 / *((_DWORD *)this + 20)))
                       + 16 * (v82 % *((_DWORD *)this + 20))
                       + 4) & 2) != 0)
          goto LABEL_118;
        v83 = (uint64_t *)*((_QWORD *)this + 76);
        v84 = *((_DWORD *)v83 + 6);
        v85 = *v83;
        v86 = *(unsigned int *)(*(_QWORD *)(*v83 + 8 * (2 * v82 / v84)) + 4 * (2 * v82 % v84));
        v87 = v86 >> 7;
        v88 = (v86 >> 7) == 0x1FFFFFF ? -1 : *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v87);
        v89 = *(unsigned int *)(*(_QWORD *)(v85 + 8 * (((2 * v82) | 1) / v84)) + 4 * (((2 * v82) | 1) % v84));
        v90 = v89 >> 7;
        v91 = (v89 >> 7) == 0x1FFFFFF ? -1 : *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v90);
        v92 = (_DWORD)v87 != 0x1FFFFFF
           && (*(unsigned __int8 *)(*((_QWORD *)this + 3) + 32 * v87 + 4) >> 1) & 1;
        v93 = (_DWORD)v90 != 0x1FFFFFF
           && (*(unsigned __int8 *)(*((_QWORD *)this + 3) + 32 * v90 + 4) >> 1) & 1;
        if (v88 == -1 && v91 == -1)
          goto LABEL_118;
        if (v88 != v91)
          break;
        v94 = *v129;
        v95 = *(_DWORD *)(*v129 + 4 * v87);
        v96 = *(_DWORD *)(*v129 + 4 * v90);
        if (v95 + 1 >= v96)
        {
          if (v96 + 1 < v95)
          {
            *(_DWORD *)(v94 + 4 * v87) = v96 + 1;
            *(_DWORD *)(*v125 + 4 * v87) = v89;
          }
        }
        else
        {
          *(_DWORD *)(v94 + 4 * v90) = v95 + 1;
          *(_DWORD *)(*v125 + 4 * v90) = v86;
        }
LABEL_113:
        if (v88 != -1)
          goto LABEL_114;
LABEL_118:
        if (++v79 >= (unint64_t)*v80)
          goto LABEL_123;
      }
      if (v88 != -1)
      {
        if (v91 != -1)
        {
          if (v92 || v93)
          {
            v97 = *((_QWORD *)this + 36);
            if (((*(_DWORD *)(v97 + 4 * (v88 >> 5)) >> v88) & 1) == 0)
            {
              physx::IG::IslandSim::activateIsland((unsigned int *)this, v88);
              v97 = *((_QWORD *)this + 36);
            }
            if (((*(_DWORD *)(v97 + 4 * (v91 >> 5)) >> v91) & 1) == 0)
              physx::IG::IslandSim::activateIsland((unsigned int *)this, v91);
          }
          v98 = *((_QWORD *)this + 15);
          v99 = (unsigned int *)(v98 + 44 * v88);
          v100 = (unsigned int *)(v98 + 44 * v91);
          if (v99[3] + v99[2] <= v100[3] + v100[2])
          {
            physx::IG::IslandSim::mergeIslandsInternal((uint64_t)this, v100, v99, v91, v88, v89, v86);
            v101 = v88;
            v102 = v86;
            LODWORD(v86) = v89;
            v88 = v91;
          }
          else
          {
            physx::IG::IslandSim::mergeIslandsInternal((uint64_t)this, v99, v100, v88, v91, v86, v89);
            v101 = v91;
            v102 = v89;
          }
          *(_DWORD *)(*((_QWORD *)this + 36) + 4 * (v101 >> 5)) &= ~(1 << v101);
          physx::IG::HandleManager<unsigned int>::freeHandle((uint64_t)this, v101);
          *(_DWORD *)(*((_QWORD *)this + 32) + ((v102 >> 5) & 0x7FFFFFC)) = v86;
          result = 0x1FFFFFFLL;
          goto LABEL_114;
        }
        v104 = *((_QWORD *)this + 3);
        if ((_DWORD)v90 == 0x1FFFFFF)
        {
          ++*(_WORD *)(v104 + 32 * v87 + 6);
          ++*(_DWORD *)(*((_QWORD *)this + 17) + 4 * v88);
LABEL_114:
          v111 = *((_QWORD *)this + 15);
          v112 = *((_DWORD *)this + 20);
          v113 = *((_QWORD *)this + 7);
          v114 = *(_QWORD *)(v113 + 8 * (v82 / v112));
          v115 = v82 % v112;
          v116 = *(unsigned int *)(v114 + 16 * v115);
          v117 = v111 + 44 * v88 + 4 * v116;
          v120 = *(_DWORD *)(v117 + 28);
          v118 = (int *)(v117 + 28);
          v119 = v120;
          if (v120 == -1)
          {
            *(_DWORD *)(v111 + 44 * v88 + 4 * v116 + 20) = v82;
            v121 = -1;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v113 + 8 * (v119 / v112)) + 16 * (v119 % v112) + 8) = v82;
            v121 = *v118;
          }
          *(_DWORD *)(v114 + 16 * v115 + 12) = v121;
          *v118 = v82;
          v122 = v111 + 44 * v88 + 4 * v116;
          ++*(_DWORD *)(v122 + 36);
          goto LABEL_118;
        }
        v108 = v104 + 32 * v90;
        if ((*(_BYTE *)(v108 + 4) & 4) != 0)
        {
          if (!v93 || v92)
            goto LABEL_114;
          physx::IG::IslandSim::activateIsland((unsigned int *)this, v88);
        }
        else
        {
          v109 = *((_QWORD *)this + 15) + 44 * v88;
          *(_DWORD *)(v104 + (((unint64_t)*(unsigned int *)(v109 + 4) >> 2) & 0x3FFFFFE0) + 8) = v89;
          *(_DWORD *)(v108 + 12) = *(_DWORD *)(v109 + 4);
          *(_DWORD *)(v109 + 4) = v89;
          v110 = v109 + 4 * *(unsigned __int8 *)(v108 + 5);
          ++*(_DWORD *)(v110 + 8);
          *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v90) = v88;
          *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v90) = *(_DWORD *)(*((_QWORD *)this + 30)
                                                                                    + 4 * v87)
                                                                        + 1;
          *(_DWORD *)(*((_QWORD *)this + 32) + 4 * v90) = v86;
          if (!v92 && !v93)
            goto LABEL_114;
          if (((*(_DWORD *)(*((_QWORD *)this + 36) + 4 * (v88 >> 5)) >> v88) & 1) != 0)
          {
            if (v92)
              goto LABEL_114;
          }
          else
          {
            physx::IG::IslandSim::activateIsland((unsigned int *)this, v88);
            result = 0x1FFFFFFLL;
            if (v92)
              goto LABEL_114;
          }
          physx::IG::IslandSim::activateNodeInternal((unsigned int *)this, v89);
        }
        result = 0x1FFFFFFLL;
        goto LABEL_114;
      }
      v103 = *((_QWORD *)this + 3);
      if ((_DWORD)v87 == 0x1FFFFFF)
      {
        ++*(_WORD *)(v103 + 32 * v90 + 6);
        ++*(_DWORD *)(*((_QWORD *)this + 17) + 4 * v91);
LABEL_112:
        v88 = v91;
        goto LABEL_113;
      }
      v105 = v103 + 32 * v87;
      if ((*(_BYTE *)(v105 + 4) & 4) != 0)
      {
        if (!v92 || v93)
          goto LABEL_112;
        physx::IG::IslandSim::activateIsland((unsigned int *)this, v91);
      }
      else
      {
        v106 = *((_QWORD *)this + 15) + 44 * v91;
        *(_DWORD *)(v103 + (((unint64_t)*(unsigned int *)(v106 + 4) >> 2) & 0x3FFFFFE0) + 8) = v86;
        *(_DWORD *)(v105 + 12) = *(_DWORD *)(v106 + 4);
        *(_DWORD *)(v106 + 4) = v86;
        v107 = v106 + 4 * *(unsigned __int8 *)(v105 + 5);
        ++*(_DWORD *)(v107 + 8);
        *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v87) = v91;
        *(_DWORD *)(*((_QWORD *)this + 30) + 4 * v87) = *(_DWORD *)(*((_QWORD *)this + 30)
                                                                                  + 4 * v90)
                                                                      + 1;
        *(_DWORD *)(*((_QWORD *)this + 32) + 4 * v87) = v89;
        if (!v92 && !v93)
          goto LABEL_112;
        if (((*(_DWORD *)(*((_QWORD *)this + 36) + 4 * (v91 >> 5)) >> v91) & 1) != 0)
        {
          if (v92)
            goto LABEL_112;
        }
        else
        {
          physx::IG::IslandSim::activateIsland((unsigned int *)this, v91);
          result = 0x1FFFFFFLL;
          if (v92)
            goto LABEL_112;
        }
        physx::IG::IslandSim::activateNodeInternal((unsigned int *)this, v86);
      }
      result = 0x1FFFFFFLL;
      goto LABEL_112;
    }
LABEL_123:
    v77 = 0;
    v75 = 1;
  }
  while ((v127 & 1) != 0);
  return result;
}

void physx::IG::IslandSim::processLostEdges(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  void *v11;
  const void *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _WORD *v20;
  __int16 v21;
  __int16 v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  int *v35;
  unsigned int v36;
  _DWORD *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  const char *v87;
  void *v88;
  void *v89;
  const void *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  unsigned int **v100;
  unsigned int *v101;
  unsigned int **v102;
  unsigned int *v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  unsigned int **v112;
  unsigned int **v113;
  unsigned int *v114;
  unsigned int **v115;
  unsigned int i;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  const char *v138;
  void *v139;
  void *v140;
  const void *v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  unsigned int *v153;
  _DWORD *v154;
  unint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  unint64_t v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int *v169;
  int *v170;
  unsigned int v171;
  _DWORD *v172;
  unsigned int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int32x2_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unsigned int *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  unsigned int *v187;
  unint64_t v188;
  unsigned int *v189;
  unsigned int *v190;
  unint64_t v191;
  int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _DWORD *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  _DWORD *v216;
  int v217;
  unint64_t v218;
  char v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  _DWORD **v223;
  _DWORD *v224;
  _DWORD *v225;
  unsigned int v226;
  uint64_t v227;
  _DWORD *v228;
  uint64_t v229;
  uint64_t v230;
  _DWORD *v231;
  unint64_t j;
  uint64_t v233;
  unsigned int *v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _DWORD *v248;
  unint64_t v249;
  _DWORD *v250;
  _DWORD *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _DWORD *v256;
  int v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _DWORD *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  unint64_t v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  _BYTE *v283;
  char v284;
  char v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  int v303;
  int v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  unint64_t v315;
  int *v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  _DWORD *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  _DWORD *v329;
  unint64_t v330;
  unsigned int v331;
  unsigned int v332;
  uint64_t v333;
  unint64_t v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _WORD *v339;
  __int16 v340;
  __int16 v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t v349;
  char v350;
  char v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int v355;
  uint64_t v356;
  unsigned int v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  unsigned int v361;
  _BYTE *v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  int v366;
  unsigned int *v367;
  uint64_t v368;
  _QWORD *v369;
  int v370;
  int v371;
  uint64_t v372;
  int v373;
  unsigned int v374;
  int v375;
  unsigned int **v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  _DWORD *v381;
  __int128 v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  unsigned int v387;
  _QWORD v388[3];

  v388[1] = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)(a1 + 520);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extendUninitialized(a1 + 520, *(_DWORD *)(a1 + 32));
  bzero(*(void **)(a1 + 520), (4 * *(_DWORD *)(a1 + 528)));
  if (*(_DWORD *)(a1 + 496) <= 0x3FFu)
  {
    v8 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v9 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::QueueElement>::getName() [T = physx::IG::QueueElement]";
    else
      v9 = "<allocation names disabled>";
    v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v8 + 24) + 16))(v8 + 24, 0x4000, v9, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPriorityQueue.h", 219);
    v11 = v10;
    v12 = *(const void **)(a1 + 488);
    if (v12)
    {
      memcpy(v10, v12, (16 * *(_DWORD *)(a1 + 480)));
      if (*(_QWORD *)(a1 + 488))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(_QWORD *)(a1 + 488) = v11;
    *(_DWORD *)(a1 + 496) = 1024;
  }
  if ((*(_DWORD *)(a1 + 548) & 0x7FFFFC00) == 0)
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 536, 0x400u);
  if ((*(_DWORD *)(a1 + 564) & 0x7FFFFC00) == 0)
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate(a1 + 552, 0x400u);
  v376 = (unsigned int **)(a1 + 504);
  v13 = *(_DWORD *)(a1 + 32);
  if ((*(_DWORD *)(a1 + 516) & 0x7FFFFFFFu) < v13)
    physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::recreate((uint64_t)v376, v13);
  v14 = *(unsigned int *)(a1 + 456);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 448);
    v17 = *(_QWORD *)(a1 + 56);
    while (1)
    {
      v18 = *(_DWORD *)(v16 + 4 * v15);
      v19 = *(_QWORD *)(v17 + 8 * (v18 / *(_DWORD *)(a1 + 80))) + 16 * (v18 % *(_DWORD *)(a1 + 80));
      v22 = *(_WORD *)(v19 + 4);
      v20 = (_WORD *)(v19 + 4);
      v21 = v22;
      if ((v22 & 0xA) == 2)
        break;
LABEL_42:
      if (++v15 >= v14)
        goto LABEL_45;
    }
    if ((v21 & 0x21) == 1)
    {
      v23 = *(uint64_t **)(a1 + 608);
      v24 = *((_DWORD *)v23 + 6);
      v25 = *v23;
      v26 = (unint64_t)*(unsigned int *)(*(_QWORD *)(*v23 + 8 * (2 * v18 / v24)) + 4 * (2 * v18 % v24)) >> 7;
      v27 = (unint64_t)*(unsigned int *)(*(_QWORD *)(v25 + 8 * (((2 * v18) | 1) / v24))
                                              + 4 * (((2 * v18) | 1) % v24)) >> 7;
      v28 = (_DWORD)v26 == 0x1FFFFFF || (_DWORD)v27 == 0x1FFFFFF;
      if (!v28)
      {
        v30 = *(_QWORD *)(a1 + 272);
        if (*(_DWORD *)(v30 + 4 * v26) == -1)
          v26 = v27;
        v31 = *(unsigned int *)(v30 + 4 * v26);
        goto LABEL_33;
      }
      if ((_DWORD)v26 == 0x1FFFFFF)
      {
        if ((_DWORD)v27 == 0x1FFFFFF)
          goto LABEL_41;
        v26 = v27;
        v29 = *(_QWORD *)(a1 + 24) + 32 * v27;
      }
      else
      {
        v26 = v26;
        v29 = *(_QWORD *)(a1 + 24) + 32 * v26;
      }
      if ((*(_BYTE *)(v29 + 4) & 4) == 0)
      {
        v31 = *(unsigned int *)(*(_QWORD *)(a1 + 272) + 4 * v26);
        --*(_WORD *)(v29 + 6);
        --*(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v31);
LABEL_33:
        if (v31 != 0xFFFFFFFFLL)
        {
          v32 = *(_QWORD *)(a1 + 120);
          v33 = *(_DWORD *)(a1 + 80);
          v34 = (unsigned int *)(*(_QWORD *)(v17 + 8 * (v18 / v33)) + 16 * (v18 % v33));
          v35 = (int *)(v34 + 2);
          v36 = v34[2];
          if (v36 == -1)
            v37 = (_DWORD *)(v32 + 44 * v31 + 4 * *v34 + 28);
          else
            v37 = (_DWORD *)(*(_QWORD *)(v17 + 8 * (v36 / v33)) + 16 * (v36 % v33) + 12);
          *v37 = v34[3];
          v38 = v34[3];
          v39 = *v35;
          if (v38 == -1)
          {
            v40 = *v34;
            *(_DWORD *)(v32 + 44 * v31 + 4 * v40 + 20) = v39;
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(v17 + 8 * (v38 / *(_DWORD *)(a1 + 80))) + 16 * (v38 % *(_DWORD *)(a1 + 80)) + 8) = v39;
            v40 = *v34;
          }
          v41 = v32 + 44 * v31 + 4 * v40;
          --*(_DWORD *)(v41 + 36);
          *(_QWORD *)v35 = -1;
        }
      }
    }
LABEL_41:
    *v20 = v21 & 0xFFFE;
    v14 = *(unsigned int *)(a1 + 456);
    goto LABEL_42;
  }
  v14 = 0;
LABEL_45:
  v370 = a4;
  v374 = a3;
  if ((a3 & 1) != 0)
  {
    v42 = *(_DWORD *)(a1 + 416);
    if ((v42 & 0x7FFFFFFF) != 0)
    {
      v43 = *(unsigned int **)(a1 + 408);
      v44 = *v43;
      if (*v43)
      {
        v45 = 0;
LABEL_52:
        v359 = (_QWORD *)(a1 + 288);
        v369 = v7;
        while (1)
        {
          v47 = v44;
          v48 = v45;
          v42 = *(_DWORD *)(a1 + 416);
          v44 &= v44 - 1;
          if (!v44)
          {
            if ((int)v45 + 1 > (v42 & 0x7FFFFFFFu))
              v45 = (v45 + 1);
            else
              v45 = v42 & 0x7FFFFFFF;
            LODWORD(v49) = v48;
            while ((_DWORD)v45 - 1 != (_DWORD)v49)
            {
              v49 = (v49 + 1);
              v44 = *(_DWORD *)(*(_QWORD *)(a1 + 408) + 4 * v49);
              if (v44)
              {
                v45 = v49;
                goto LABEL_62;
              }
            }
            v44 = 0;
          }
LABEL_62:
          v50 = __clz(__rbit32(v47));
          v51 = v50 | (32 * v48);
          if (v51 == -1)
            goto LABEL_212;
          *(_DWORD *)(a1 + 480) = 0;
          *(_DWORD *)(a1 + 512) = 0;
          v52 = v51 & 0x1FFFFFF;
          v53 = *(_QWORD *)(a1 + 24) + 32 * v52;
          v55 = *(_BYTE *)(v53 + 4);
          v54 = (_BYTE *)(v53 + 4);
          if ((v55 & 0xC) == 0)
          {
            v56 = *v7;
            v57 = 1 << v50;
            if ((*(_DWORD *)(*v7 + 4 * (v52 >> 5)) & (1 << v50)) == 0)
            {
              v58 = *(_QWORD *)(a1 + 272);
              v59 = *(unsigned int *)(v58 + 4 * v52);
              v60 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 44 * v59) >> 7;
              if (v60 != (_DWORD)v52)
              {
                v61 = v51 << 7;
                v62 = *(_QWORD *)(a1 + 256);
                v362 = v54;
                v363 = v52;
                v378 = *(unsigned int *)(v58 + 4 * v52);
                v371 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 44 * v59) >> 7;
                v360 = *(_QWORD *)(a1 + 24);
                v361 = v61;
                if (*(_DWORD *)(v62 + 4 * v52) > 0xFFFFFF7F)
                  goto LABEL_86;
                v63 = a3;
                v64 = 0;
                v65 = v61;
                while (1)
                {
                  v66 = v65 >> 7;
                  v67 = v65 >> 12;
                  v68 = 1 << (v65 >> 7);
                  if ((v68 & *(_DWORD *)(v56 + 4 * v67)) != 0)
                    break;
                  v69 = v66 == v60;
                  if (v66 != v60)
                  {
                    v70 = *(unsigned int *)(a1 + 512);
                    *(_QWORD *)&v382 = __PAIR64__(v70, v65);
                    DWORD2(v382) = v70 - 1;
                    HIDWORD(v382) = v64;
                    if ((*(_DWORD *)(a1 + 516) & 0x7FFFFFFFu) <= v70)
                    {
                      physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::growAndPushBack((uint64_t)v376, &v382);
                      v60 = v371;
                      v59 = v378;
                    }
                    else
                    {
                      *(_OWORD *)(*(_QWORD *)(a1 + 504) + 16 * v70) = v382;
                      ++*(_DWORD *)(a1 + 512);
                    }
                    v58 = *(_QWORD *)(a1 + 272);
                    *(_DWORD *)(v58 + 4 * v66) = -1;
                    v56 = *(_QWORD *)(a1 + 520);
                    *(_DWORD *)(v56 + 4 * v67) |= v68;
                    v62 = *(_QWORD *)(a1 + 256);
                    v65 = *(_DWORD *)(v62 + 4 * v66);
                    ++v64;
                    if (v65 < 0xFFFFFF80)
                      continue;
                  }
                  goto LABEL_76;
                }
                v69 = *(_DWORD *)(v58 + 4 * v66) != -1;
LABEL_76:
                a3 = v63;
                if (*(_DWORD *)(a1 + 512))
                {
                  v71 = 0;
                  v72 = *v376;
                  v54 = v362;
                  v52 = v363;
                  do
                  {
                    v73 = *v72;
                    v72 += 4;
                    *(_DWORD *)(v58 + (((unint64_t)v73 >> 5) & 0x7FFFFFC)) = v59;
                    ++v71;
                    v74 = *(unsigned int *)(a1 + 512);
                  }
                  while (v71 < v74);
                  v7 = v369;
                  if (!v69)
                  {
                    if (*(_DWORD *)(a1 + 512))
                    {
                      v75 = 0;
                      v76 = *v376;
                      do
                      {
                        v77 = *v76;
                        v76 += 4;
                        *(_DWORD *)(v56 + (((unint64_t)v77 >> 10) & 0x3FFFFC)) &= ~(1 << (v77 >> 7));
                        ++v75;
                      }
                      while (v75 < *(unsigned int *)(a1 + 512));
                    }
LABEL_85:
                    *(_DWORD *)(a1 + 512) = 0;
                    v61 = v361;
LABEL_86:
                    *(_DWORD *)(v58 + 4 * v52) = -1;
                    v78 = *(unsigned int *)(a1 + 512);
                    *(_QWORD *)&v382 = __PAIR64__(v78, v61);
                    *((_QWORD *)&v382 + 1) = 0x1FFFFFFLL;
                    if ((*(_DWORD *)(a1 + 516) & 0x7FFFFFFFu) <= v78)
                    {
                      v82 = physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::growAndPushBack((uint64_t)v376, &v382);
                      v60 = v371;
                      v59 = v378;
                      v81 = v82;
                    }
                    else
                    {
                      *(_OWORD *)(*(_QWORD *)(a1 + 504) + 16 * v78) = v382;
                      v79 = *(_QWORD *)(a1 + 504);
                      v80 = *(unsigned int *)(a1 + 512);
                      *(_DWORD *)(a1 + 512) = v80 + 1;
                      v81 = v79 + 16 * v80;
                    }
                    *(_DWORD *)(*(_QWORD *)(a1 + 520) + 4 * (v61 >> 12)) |= v57;
                    v83 = *(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * v363);
                    v84 = *(_DWORD *)(a1 + 480);
                    if (v84 == *(_DWORD *)(a1 + 496))
                    {
                      v85 = 2 * v84 + 2;
                      if (v84 < v85)
                      {
                        v86 = physx::shdfnd::Foundation::mInstance;
                        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance
                                                                              + 40))(physx::shdfnd::Foundation::mInstance, 44))
                        {
                          v87 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::QueueElement>::getName("
                                ") [T = physx::IG::QueueElement]";
                        }
                        else
                        {
                          v87 = "<allocation names disabled>";
                        }
                        v88 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v86 + 24) + 16))(v86 + 24, 16 * v85, v87, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPriorityQueue.h", 219);
                        v89 = v88;
                        v90 = *(const void **)(a1 + 488);
                        if (v90)
                        {
                          memcpy(v88, v90, (16 * *(_DWORD *)(a1 + 480)));
                          if (*(_QWORD *)(a1 + 488))
                            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24);
                        }
                        *(_QWORD *)(a1 + 488) = v89;
                        *(_DWORD *)(a1 + 496) = v85;
                        v84 = *(_DWORD *)(a1 + 480);
                        v7 = v369;
                        v59 = v378;
                        v60 = v371;
                      }
                    }
                    if (v84)
                    {
                      while (1)
                      {
                        v91 = v84 - 1;
                        v92 = (v84 - 1) >> 1;
                        v93 = *(_QWORD *)(a1 + 488);
                        if (v83 >= *(_DWORD *)(v93 + 16 * v92 + 8))
                          break;
                        v94 = (uint64_t *)(v93 + 16 * v92);
                        v95 = *v94;
                        v96 = v93 + 16 * v84;
                        *(_DWORD *)(v96 + 8) = *((_DWORD *)v94 + 2);
                        *(_QWORD *)v96 = v95;
                        v84 = v91 >> 1;
                        if (v91 <= 1)
                          goto LABEL_104;
                      }
                      LODWORD(v92) = v84;
                    }
                    else
                    {
                      LODWORD(v92) = 0;
                    }
LABEL_104:
                    v97 = *(_QWORD *)(a1 + 488) + 16 * v92;
                    *(_QWORD *)v97 = v81;
                    *(_DWORD *)(v97 + 8) = v83;
                    v98 = *(_DWORD *)(a1 + 480) + 1;
                    v368 = v45;
                    while (2)
                    {
                      v99 = v98 - 1;
                      *(_DWORD *)(a1 + 480) = v98 - 1;
                      v100 = *(unsigned int ***)(a1 + 488);
                      v101 = *v100;
                      v102 = &v100[2 * (v98 - 1)];
                      v103 = *v102;
                      v104 = *((_DWORD *)v102 + 2);
                      if (v99 < 2)
                      {
                        v106 = 0;
                      }
                      else
                      {
                        v105 = 0;
                        v106 = 0;
                        v107 = 1;
                        while (1)
                        {
                          v108 = v105 + 2;
                          v110 = v105 + 2 >= v99;
                          v100 = *(unsigned int ***)(a1 + 488);
                          v109 = v100[2 * v108 + 1];
                          v110 = v110 || v109 >= LODWORD(v100[2 * v107 + 1]);
                          v111 = v110 ? v107 : v107 + 1;
                          if (v104 < LODWORD(v100[2 * v111 + 1]))
                            break;
                          v112 = &v100[2 * v111];
                          v113 = &v100[2 * v106];
                          v114 = *v112;
                          *((_DWORD *)v113 + 2) = *((_DWORD *)v112 + 2);
                          *v113 = v114;
                          v105 = 2 * v111;
                          v107 = (2 * v111) | 1;
                          v106 = v111;
                          if (v107 >= v99)
                          {
                            v100 = *(unsigned int ***)(a1 + 488);
                            v106 = v111;
                            break;
                          }
                        }
                      }
                      v115 = &v100[2 * v106];
                      *v115 = v103;
                      *((_DWORD *)v115 + 2) = v104;
                      for (i = *(_DWORD *)(*(_QWORD *)(a1 + 24) + (((unint64_t)*v101 >> 2) & 0x3FFFFFE0));
                            i != -1;
                            i = *(_DWORD *)(v118 + 8 * (i % v117)))
                      {
                        v117 = *(_DWORD *)(a1 + 112);
                        v118 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (i / v117));
                        v119 = *(_QWORD *)(a1 + 608);
                        v120 = *(_DWORD *)(v119 + 24);
                        v121 = *(_QWORD *)(*(_QWORD *)v119 + 8 * ((i ^ 1) / v120));
                        v122 = (i ^ 1) % v120;
                        v123 = *(unsigned int *)(v121 + 4 * v122);
                        v124 = v123 >> 7;
                        if (*(_DWORD *)(v121 + 4 * v122) >> 7 != 0x1FFFFFF
                          && (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 32 * v124 + 4) & 4) == 0)
                        {
                          if ((_DWORD)v124 == v60)
                          {
                            v178 = v101[1];
                            v179 = *(_QWORD *)(a1 + 504);
                            v180 = *(_QWORD *)(a1 + 240);
                            v58 = *(_QWORD *)(a1 + 272);
                            v181 = 1;
                            v62 = *(_QWORD *)(a1 + 256);
                            do
                            {
                              v182 = (unsigned int *)(v179 + 16 * v178);
                              *(_DWORD *)(v180 + (((unint64_t)*v182 >> 5) & 0x7FFFFFC)) = v181;
                              *(_DWORD *)(v58 + (((unint64_t)*v182 >> 5) & 0x7FFFFFC)) = v59;
                              *(_DWORD *)(v62 + (((unint64_t)*v182 >> 5) & 0x7FFFFFC)) = v123;
                              v178 = v182[2];
                              LODWORD(v123) = *v182;
                              ++v181;
                            }
                            while ((_DWORD)v178 != 0x1FFFFFF);
                            goto LABEL_174;
                          }
                          v125 = v123 >> 12;
                          v126 = 1 << (v123 >> 7);
                          if ((*(_DWORD *)(*v7 + 4 * (v123 >> 12)) & v126) != 0)
                          {
                            v58 = *(_QWORD *)(a1 + 272);
                            if (*(_DWORD *)(v58 + 4 * v124) != -1)
                            {
                              v183 = v101[1];
                              v184 = *(_QWORD *)(a1 + 240);
                              v185 = *(_QWORD *)(a1 + 504);
                              v62 = *(_QWORD *)(a1 + 256);
                              v186 = *(_DWORD *)(v184 + 4 * v124) + 1;
                              do
                              {
                                v187 = (unsigned int *)(v185 + 16 * v183);
                                *(_DWORD *)(v184 + (((unint64_t)*v187 >> 5) & 0x7FFFFFC)) = v186;
                                *(_DWORD *)(v58 + (((unint64_t)*v187 >> 5) & 0x7FFFFFC)) = v59;
                                *(_DWORD *)(v62 + (((unint64_t)*v187 >> 5) & 0x7FFFFFC)) = v123;
                                v183 = v187[2];
                                LODWORD(v123) = *v187;
                                ++v186;
                              }
                              while ((_DWORD)v183 != 0x1FFFFFF);
LABEL_174:
                              a3 = v374;
                              v45 = v368;
                              v54 = v362;
                              v74 = *(unsigned int *)(a1 + 512);
                              goto LABEL_175;
                            }
                          }
                          else
                          {
                            v127 = *(unsigned int *)(a1 + 512);
                            v128 = v101[1];
                            v129 = v101[3] + 1;
                            *(_QWORD *)&v382 = __PAIR64__(v127, v123);
                            *((_QWORD *)&v382 + 1) = __PAIR64__(v129, v128);
                            if ((*(_DWORD *)(a1 + 516) & 0x7FFFFFFFu) <= v127)
                            {
                              v133 = v101;
                              v134 = 1 << (v123 >> 7);
                              v132 = physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::growAndPushBack((uint64_t)v376, &v382);
                              v126 = v134;
                              v7 = v369;
                              v101 = v133;
                              v60 = v371;
                              v59 = v378;
                            }
                            else
                            {
                              *(_OWORD *)(*(_QWORD *)(a1 + 504) + 16 * v127) = v382;
                              v130 = *(_QWORD *)(a1 + 504);
                              v131 = *(unsigned int *)(a1 + 512);
                              *(_DWORD *)(a1 + 512) = v131 + 1;
                              v132 = v130 + 16 * v131;
                            }
                            v135 = *(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * v124);
                            v136 = *(_DWORD *)(a1 + 480);
                            if (v136 == *(_DWORD *)(a1 + 496) && v136 < 2 * v136 + 2)
                            {
                              v364 = 2 * v136 + 2;
                              v365 = v132;
                              v366 = v126;
                              v367 = v101;
                              v137 = physx::shdfnd::Foundation::mInstance;
                              if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, 44, v59))
                              {
                                v138 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::QueueElement>::g"
                                       "etName() [T = physx::IG::QueueElement]";
                              }
                              else
                              {
                                v138 = "<allocation names disabled>";
                              }
                              v139 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v137 + 24) + 16))(v137 + 24, 16 * v364, v138, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmPriorityQueue.h", 219);
                              v140 = v139;
                              v141 = *(const void **)(a1 + 488);
                              if (v141)
                              {
                                memcpy(v139, v141, (16 * *(_DWORD *)(a1 + 480)));
                                if (*(_QWORD *)(a1 + 488))
                                  (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24);
                              }
                              *(_QWORD *)(a1 + 488) = v140;
                              v132 = v365;
                              *(_DWORD *)(a1 + 496) = v364;
                              v136 = *(_DWORD *)(a1 + 480);
                              v7 = v369;
                              v59 = v378;
                              v60 = v371;
                              v101 = v367;
                              v126 = v366;
                            }
                            if (v136)
                            {
                              while (1)
                              {
                                v142 = v136 - 1;
                                v143 = (v136 - 1) >> 1;
                                v144 = *(_QWORD *)(a1 + 488);
                                if (v135 >= *(_DWORD *)(v144 + 16 * v143 + 8))
                                  break;
                                v145 = (uint64_t *)(v144 + 16 * v143);
                                v146 = *v145;
                                v147 = v144 + 16 * v136;
                                *(_DWORD *)(v147 + 8) = *((_DWORD *)v145 + 2);
                                *(_QWORD *)v147 = v146;
                                v136 = v142 >> 1;
                                if (v142 <= 1)
                                  goto LABEL_143;
                              }
                              LODWORD(v143) = v136;
                            }
                            else
                            {
                              LODWORD(v143) = 0;
                            }
LABEL_143:
                            v148 = *(_QWORD *)(a1 + 488) + 16 * v143;
                            *(_QWORD *)v148 = v132;
                            *(_DWORD *)(v148 + 8) = v135;
                            ++*(_DWORD *)(a1 + 480);
                            *(_DWORD *)(*(_QWORD *)(a1 + 520) + 4 * v125) |= v126;
                            *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4 * v124) = -1;
                          }
                        }
                      }
                      v98 = *(_DWORD *)(a1 + 480);
                      v45 = v368;
                      if (v98)
                        continue;
                      break;
                    }
                    v149 = *(_QWORD *)(a1 + 120);
                    *(_DWORD *)(a1 + 544) = 0;
                    *(_DWORD *)(a1 + 560) = 0;
                    v388[0] = 0;
                    if (*(_DWORD *)(a1 + 512))
                    {
                      v150 = 0;
                      v151 = 0;
                      v372 = v149 + 44 * v59 + 4;
                      do
                      {
                        v152 = *(_QWORD *)(a1 + 24);
                        v153 = (unsigned int *)(v152
                                              + 32
                                              * ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 504) + 16 * v150) >> 7));
                        v154 = v153 + 2;
                        v155 = (unint64_t)v153[2] >> 7;
                        v156 = v152 + 32 * v155 + 12;
                        v28 = (_DWORD)v155 == 0x1FFFFFF;
                        v157 = (_DWORD *)v372;
                        if (!v28)
                          v157 = (_DWORD *)v156;
                        *v157 = v153[3];
                        v158 = (unint64_t)v153[3] >> 7;
                        if ((_DWORD)v158 != 0x1FFFFFF)
                          *(_DWORD *)(v152 + 32 * v158 + 8) = *v154;
                        ++*((_DWORD *)v388 + *((unsigned __int8 *)v153 + 5));
                        *(_QWORD *)v154 = 0x7F0000007FLL;
                        v159 = *((unsigned __int16 *)v153 + 3);
                        v160 = *v153;
                        if (*v153 != -1)
                        {
                          v161 = *(_QWORD *)(a1 + 56);
                          do
                          {
                            v162 = *(_DWORD *)(a1 + 112);
                            v163 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v160 / v162));
                            LODWORD(v382) = v160 >> 1;
                            if ((v160 & 1) == 0
                              || (v164 = (unint64_t)*(unsigned int *)(*(_QWORD *)(**(_QWORD **)(a1 + 608)
                                                                                       + 8
                                                                                       * ((v160 & 0xFFFFFFFE)
                                                                                        / *(_DWORD *)(*(_QWORD *)(a1 + 608) + 24)))
                                                                           + 4
                                                                           * ((v160 & 0xFFFFFFFE)
                                                                            % *(_DWORD *)(*(_QWORD *)(a1 + 608) + 24))) >> 7,
                                  (_DWORD)v164 == 0x1FFFFFF)
                              || (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 32 * v164 + 4) & 4) != 0)
                            {
                              v165 = a1
                                   + 16
                                   * *(unsigned int *)(*(_QWORD *)(v161 + 8 * ((v160 >> 1) / *(_DWORD *)(a1 + 80)))
                                                     + 16 * ((v160 >> 1) % *(_DWORD *)(a1 + 80)));
                              v166 = (_QWORD *)(v165 + 536);
                              v167 = *(unsigned int *)(v165 + 544);
                              if ((*(_DWORD *)(v165 + 548) & 0x7FFFFFFFu) <= v167)
                              {
                                physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v166, &v382);
                                v59 = v378;
                                v161 = *(_QWORD *)(a1 + 56);
                              }
                              else
                              {
                                *(_DWORD *)(*v166 + 4 * v167) = v160 >> 1;
                                ++*(_DWORD *)(v165 + 544);
                              }
                              v168 = *(_DWORD *)(a1 + 80);
                              v169 = (unsigned int *)(*(_QWORD *)(v161 + 8 * (v382 / v168))
                                                    + 16 * (v382 % v168));
                              v170 = (int *)(v169 + 2);
                              v171 = v169[2];
                              if (v171 == -1)
                                v172 = (_DWORD *)(v149 + 44 * v59 + 4 * *v169 + 28);
                              else
                                v172 = (_DWORD *)(*(_QWORD *)(v161 + 8 * (v171 / v168)) + 16 * (v171 % v168) + 12);
                              *v172 = v169[3];
                              v173 = v169[3];
                              v174 = *v170;
                              if (v173 == -1)
                              {
                                v175 = *v169;
                                *(_DWORD *)(v149 + 44 * v59 + 4 * v175 + 20) = v174;
                              }
                              else
                              {
                                *(_DWORD *)(*(_QWORD *)(v161 + 8 * (v173 / *(_DWORD *)(a1 + 80)))
                                          + 16 * (v173 % *(_DWORD *)(a1 + 80))
                                          + 8) = v174;
                                v175 = *v169;
                              }
                              v176 = v149 + 44 * v59 + 4 * v175;
                              --*(_DWORD *)(v176 + 36);
                              *(_QWORD *)v170 = -1;
                            }
                            v160 = *(_DWORD *)(v163 + 8 * (v160 % v162));
                          }
                          while (v160 != -1);
                        }
                        v151 += v159;
                        ++v150;
                      }
                      while (v150 < *(unsigned int *)(a1 + 512));
                      v177 = (int32x2_t)v388[0];
                      v45 = v368;
                      v7 = v369;
                    }
                    else
                    {
                      v151 = 0;
                      v177 = 0;
                    }
                    *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v59) -= v151;
                    *(int32x2_t *)(v149 + 44 * v59 + 8) = vsub_s32(*(int32x2_t *)(v149+ 44 * v59+ 8), v177);
                    v387 = 0;
                    v192 = *(_DWORD *)(a1 + 8);
                    if (v192)
                    {
                      v193 = v192 - 1;
                      v194 = *(_DWORD *)(*(_QWORD *)a1 + 4 * (v192 - 1));
                      *(_DWORD *)(a1 + 8) = v193;
                      v195 = v194 + 1;
                    }
                    else
                    {
                      v194 = *(_DWORD *)(a1 + 16);
                      v195 = v194 + 1;
                      *(_DWORD *)(a1 + 16) = v194 + 1;
                    }
                    v387 = v194;
                    v196 = *(_DWORD *)(a1 + 128);
                    if (v195 <= v196)
                      v197 = v196;
                    else
                      v197 = v195;
                    v382 = 0x7F0000007FuLL;
                    v383 = -1;
                    v384 = -1;
                    v385 = -1;
                    v386 = 0;
                    physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::resize(a1 + 120, v197, &v382);
                    if (v387 + 1 > *(_DWORD *)(a1 + 144))
                      v198 = v387 + 1;
                    else
                      v198 = *(_DWORD *)(a1 + 144);
                    LODWORD(v382) = 0;
                    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(a1 + 136, v198, &v382);
                    v199 = v387;
                    v200 = *(_QWORD *)(a1 + 120);
                    if (((*(_DWORD *)(*(_QWORD *)(a1 + 288) + ((v378 >> 3) & 0x1FFFFFFC)) >> v378) & 1) != 0)
                    {
                      v201 = *(unsigned int *)(a1 + 328);
                      *(_DWORD *)(v200 + 44 * v387 + 16) = v201;
                      if ((*(_DWORD *)(a1 + 332) & 0x7FFFFFFFu) <= v201)
                      {
                        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(a1 + 320, &v387);
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * v201) = v387;
                        ++*(_DWORD *)(a1 + 328);
                      }
                      v202 = v387;
                      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v359, v387 + 1);
                      *(_DWORD *)(*v359 + ((v202 >> 3) & 0x1FFFFFFC)) |= 1 << v202;
                    }
                    else
                    {
                      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v359, v387 + 1);
                      *(_DWORD *)(*v359 + 4 * (v199 >> 5)) &= ~(1 << v199);
                    }
                    *(_DWORD *)(v200 + 44 * v199) = v361;
                    v203 = *(_QWORD *)(a1 + 240);
                    *(_DWORD *)(v203 + 4 * v363) = 0;
                    v204 = *(_QWORD *)(a1 + 272);
                    *(_DWORD *)(v204 + 4 * v363) = v387;
                    v205 = *(_QWORD *)(a1 + 24);
                    *(_DWORD *)(v205 + 32 * v363 + 12) = -128;
                    v206 = *(_QWORD *)(a1 + 256);
                    *(_DWORD *)(v206 + 4 * v363) = -128;
                    v388[0] = 0;
                    *((_DWORD *)v388 + *(unsigned __int8 *)(v360 + 32 * v363 + 5)) = 1;
                    v207 = *(_QWORD *)(a1 + 504);
                    if (*(_DWORD *)(a1 + 512) >= 2u)
                    {
                      v208 = (_DWORD *)(v207 + 28);
                      v209 = 1;
                      do
                      {
                        v210 = *(v208 - 3);
                        v211 = v210 >> 7;
                        v212 = *(v208 - 7);
                        v213 = v205 + 32 * (v210 >> 7);
                        *(_DWORD *)(v213 + 12) = v212;
                        *(_DWORD *)(v205 + ((v212 >> 2) & 0x3FFFFFE0) + 8) = v210;
                        ++*((_DWORD *)v388 + *(unsigned __int8 *)(v213 + 5));
                        *(_DWORD *)(v204 + 4 * v211) = v387;
                        *(_DWORD *)(v203 + 4 * v211) = *v208;
                        *(_DWORD *)(v206 + 4 * v211) = *(_DWORD *)(v207 + 16 * *(v208 - 1));
                        ++v209;
                        v208 += 4;
                      }
                      while (v209 < *(unsigned int *)(a1 + 512));
                    }
                    v214 = 0;
                    v215 = v388[0];
                    v216 = (_DWORD *)(v200 + 44 * v199);
                    v216[2] = v388[0];
                    v217 = HIDWORD(v388[0]);
                    v216[3] = HIDWORD(v388[0]);
                    v218 = *(unsigned int *)(v207 + 16 * (*(_DWORD *)(a1 + 512) - 1));
                    *(_DWORD *)(v205 + ((v218 >> 2) & 0x3FFFFFE0) + 8) = -128;
                    v216[1] = v218;
                    *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v387) = v151;
                    v216[2] = v215;
                    v216[3] = v217;
                    v219 = 1;
                    do
                    {
                      v220 = v219;
                      v221 = a1 + 16 * v214;
                      v222 = *(unsigned int *)(v221 + 544);
                      if ((_DWORD)v222)
                      {
                        v223 = (_DWORD **)(v221 + 536);
                        LODWORD(v382) = -1;
                        if ((*(_DWORD *)(v221 + 548) & 0x7FFFFFFFu) <= v222)
                        {
                          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(v221 + 536, &v382);
                          v225 = *v223;
                        }
                        else
                        {
                          v224 = (_DWORD *)(v221 + 544);
                          v225 = *v223;
                          (*v223)[v222] = -1;
                          ++*v224;
                        }
                        v226 = *(_DWORD *)(a1 + 80);
                        v227 = *(_QWORD *)(a1 + 56);
                        *(_DWORD *)(*(_QWORD *)(v227 + 8 * (*v225 / v226)) + 16 * (*v225 % v226) + 8) = v225[1];
                        if (v222 >= 2)
                        {
                          v228 = v225 + 2;
                          v229 = v222 - 1;
                          do
                          {
                            v230 = *(_QWORD *)(v227 + 8 * (*(v228 - 1) / v226)) + 16 * (*(v228 - 1) % v226);
                            *(_DWORD *)(v230 + 8) = *v228;
                            *(_DWORD *)(v230 + 12) = *(v228 - 2);
                            ++v228;
                            --v229;
                          }
                          while (v229);
                        }
                        v231 = (_DWORD *)(v200 + 44 * v199 + 4 * v214);
                        v231[5] = *v225;
                        v231[7] = v225[(v222 - 1)];
                        v231[9] = v222;
                      }
                      v219 = 0;
                      v214 = 1;
                    }
                    while ((v220 & 1) != 0);
                    a3 = v374;
                    v54 = v362;
                    goto LABEL_180;
                  }
LABEL_175:
                  if (v74)
                  {
                    v188 = 0;
                    v189 = *v376;
                    v190 = *v376;
                    do
                    {
                      v191 = (unint64_t)*v190 >> 7;
                      if (*(_DWORD *)(v58 + 4 * v191) == -1)
                      {
                        *(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * v191) = *(_DWORD *)(*(_QWORD *)(a1 + 240)
                                                                                  + (((unint64_t)v189[4 * v190[2]] >> 5) & 0x7FFFFFC))
                                                                      + 1;
                        *(_DWORD *)(v62 + (((unint64_t)*v190 >> 5) & 0x7FFFFFC)) = v189[4 * v190[2]];
                        *(_DWORD *)(v58 + (((unint64_t)*v190 >> 5) & 0x7FFFFFC)) = v59;
                        v74 = *(unsigned int *)(a1 + 512);
                      }
                      ++v188;
                      v190 += 4;
                    }
                    while (v188 < v74);
                  }
                }
                else
                {
                  v7 = v369;
                  v54 = v362;
                  v52 = v363;
                  if (!v69)
                    goto LABEL_85;
                }
              }
            }
          }
LABEL_180:
          *v54 &= ~0x10u;
          if (!v44)
          {
            v42 = *(_DWORD *)(a1 + 416);
            goto LABEL_212;
          }
        }
      }
      v45 = 0;
      v46 = v43 + 1;
      while ((v42 & 0x7FFFFFFF) - 1 != v45)
      {
        v44 = v46[v45++];
        if (v44)
          goto LABEL_52;
      }
    }
LABEL_212:
    bzero(*(void **)(a1 + 408), (4 * v42));
    v14 = *(unsigned int *)(a1 + 456);
  }
  if (v14)
  {
    for (j = 0; j < v14; ++j)
    {
      v233 = *(unsigned int *)(*(_QWORD *)(a1 + 448) + 4 * j);
      v234 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v233 / *(_DWORD *)(a1 + 80)))
                            + 16 * (v233 % *(_DWORD *)(a1 + 80)));
      if ((v234[1] & 2) != 0)
      {
        *(_QWORD *)&v382 = 0;
        v235 = *(_QWORD **)(a1 + 600);
        if (v235)
        {
          v236 = *(_QWORD *)(*v235 + 8 * v233);
          *(_QWORD *)&v382 = v236;
          if (v236)
          {
            v237 = *(_QWORD *)(a1 + 616);
            v238 = *(unsigned int *)(v237 + 8);
            if ((*(_DWORD *)(v237 + 12) & 0x7FFFFFFFu) <= v238)
            {
              physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::growAndPushBack(v237, &v382);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v237 + 8 * v238) = v236;
              *(_DWORD *)(v237 + 8) = v238 + 1;
            }
            *(_QWORD *)(**(_QWORD **)(a1 + 600) + 8 * v233) = 0;
          }
        }
        if ((v234[1] & 4) != 0)
        {
          physx::IG::IslandSim::removeEdgeFromActivatingList(a1, v233);
          --*(_DWORD *)(a1 + 4 * *v234 + 232);
        }
        *v234 = 0;
        *((_WORD *)v234 + 2) = 16;
        *((_QWORD *)v234 + 1) = -1;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 304, v233 + 1);
        *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * (v233 >> 5)) &= ~(1 << v233);
        v14 = *(unsigned int *)(a1 + 456);
      }
    }
  }
  *(_DWORD *)(a1 + 456) = 0;
  v239 = a2;
  if (*(_DWORD *)(a2 + 8))
  {
    v240 = 0;
    while (1)
    {
      v241 = *(unsigned int *)(*(_QWORD *)v239 + 4 * v240);
      v242 = v241 >> 7;
      v243 = *(_QWORD *)(a1 + 272);
      v244 = *(unsigned int *)(v243 + 4 * (v241 >> 7));
      v245 = *(_QWORD *)(a1 + 24);
      v246 = v245 + 32 * (v241 >> 7);
      if ((_DWORD)v244 != -1)
      {
        v247 = *(_QWORD *)(a1 + 120);
        v248 = (_DWORD *)(v246 + 8);
        v249 = *(unsigned int *)(v246 + 8);
        v250 = (_DWORD *)(v247 + 44 * v244);
        v251 = v249 >= 0xFFFFFF80 ? v250 + 1 : (_DWORD *)(v245 + ((v249 >> 2) & 0x3FFFFFE0) + 12);
        *v251 = *(_DWORD *)(v246 + 12);
        v252 = *(unsigned int *)(v246 + 12);
        if (v252 > 0xFFFFFF7F)
          *v250 = *v248;
        else
          *(_DWORD *)(v245 + ((v252 >> 2) & 0x3FFFFFE0) + 8) = *v248;
        v253 = *(unsigned __int8 *)(v245 + 32 * v242 + 5);
        v254 = v247 + 44 * v244;
        --*(_DWORD *)(v254 + 8 + 4 * v253);
        *(_QWORD *)v248 = 0x7F0000007FLL;
        *(_DWORD *)(v243 + 4 * v242) = -1;
        if (!(*(_DWORD *)(v254 + 8) + *(_DWORD *)(v254 + 12)))
        {
          physx::IG::HandleManager<unsigned int>::freeHandle(a1, v244);
          v255 = v247 + 44 * v244;
          v258 = *(_DWORD *)(v255 + 16);
          v256 = (_DWORD *)(v255 + 16);
          v257 = v258;
          if (v258 != -1)
          {
            v259 = *(_QWORD *)(a1 + 320);
            v260 = *(_DWORD *)(v259 + 4 * (*(_DWORD *)(a1 + 328) - 1));
            *(_DWORD *)(*(_QWORD *)(a1 + 120) + 44 * v260 + 16) = v257;
            *(_DWORD *)(v259 + 4 * *v256) = v260;
            --*(_DWORD *)(a1 + 328);
            *v256 = -1;
            *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v244) -= *(unsigned __int16 *)(v245 + 32 * v242 + 6);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 288) + ((v244 >> 3) & 0x1FFFFFFC)) &= ~(1 << v244);
          *(_QWORD *)v250 = 0x7F0000007FLL;
          *v256 = -1;
          v239 = a2;
        }
      }
      v261 = *(_QWORD *)(a1 + 40);
      v262 = *(unsigned int *)(v261 + 4 * v242);
      if ((*(_BYTE *)(v246 + 4) & 4) != 0)
        break;
      if ((_DWORD)v262 != 0x1FFFFFF)
      {
        v263 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 32 * v242 + 5);
        v264 = a1 + 16 * v263;
        v265 = a1 + 4 * v263;
        v266 = *(_DWORD *)(v265 + 336);
        v267 = *(_QWORD *)(v264 + 152);
        if (v262 < v266)
        {
          v268 = *(unsigned int *)(v267 + 4 * (v266 - 1));
          v269 = (v268 >> 5) & 0x7FFFFFC;
          *(_DWORD *)(v261 + 4 * v242) = *(_DWORD *)(v261 + v269);
          *(_DWORD *)(v261 + v269) = v262;
          *(_DWORD *)(v267 + 4 * v262) = v268;
          *(_DWORD *)(v267 + 4 * *(unsigned int *)(v261 + 4 * v242)) = v241;
          --*(_DWORD *)(v265 + 336);
          LODWORD(v262) = *(_DWORD *)(v261 + 4 * v242);
        }
        v270 = (_DWORD *)(v264 + 160);
LABEL_247:
        v271 = *(unsigned int *)(v267 + 4 * (*v270 - 1));
        *(_DWORD *)(v261 + ((v271 >> 5) & 0x7FFFFFC)) = v262;
        *(_DWORD *)(v267 + 4 * *(unsigned int *)(v261 + 4 * v242)) = v271;
        --*v270;
        *(_DWORD *)(v261 + 4 * v242) = 0x1FFFFFF;
      }
LABEL_248:
      *(_DWORD *)v246 = -1;
      *(_BYTE *)(v246 + 4) = 8;
      v272 = v245 + 32 * v242;
      *(_QWORD *)(v272 + 24) = 0;
      *(_DWORD *)(v272 + 16) = 0;
      *(_WORD *)(v272 + 6) = 0;
      if (++v240 >= (unint64_t)*(unsigned int *)(v239 + 8))
        goto LABEL_249;
    }
    if ((_DWORD)v262 == 0x1FFFFFF || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32 * v242 + 16))
      goto LABEL_248;
    v267 = *(_QWORD *)(a1 + 184);
    v270 = (_DWORD *)(a1 + 192);
    goto LABEL_247;
  }
LABEL_249:
  if (!v374)
    goto LABEL_305;
  if (*(_DWORD *)(a1 + 328))
  {
    v273 = 0;
    v274 = *(_QWORD *)(a1 + 320);
    v275 = *(_QWORD *)(a1 + 288);
    v276 = v370;
    do
    {
      *(_DWORD *)(v275 + (((unint64_t)*(unsigned int *)(v274 + 4 * v273) >> 3) & 0x1FFFFFFC)) &= ~(1 << *(_DWORD *)(v274 + 4 * v273));
      ++v273;
      v277 = *(unsigned int *)(a1 + 328);
    }
    while (v273 < v277);
  }
  else
  {
    LODWORD(v277) = 0;
    v276 = v370;
  }
  v278 = *(_DWORD *)(a1 + 192);
  v381 = (_DWORD *)(a1 + 192);
  if (v278)
  {
    v279 = *(_QWORD *)(a1 + 184);
    v280 = *(_QWORD *)(a1 + 24);
    do
    {
      v281 = (unint64_t)*(unsigned int *)(v279 + 4 * --v278) >> 7;
      v282 = v280 + 32 * v281;
      v285 = *(_BYTE *)(v282 + 4);
      v283 = (_BYTE *)(v282 + 4);
      v284 = v285;
      if ((v285 & 1) != 0)
      {
        if (v276)
        {
          *v283 = v284 & 0xFD;
          if (!*(_DWORD *)(v280 + 32 * v281 + 16))
          {
            v294 = *(_QWORD *)(a1 + 40);
            v295 = *(_DWORD *)(v294 + 4 * v281);
            if (v295 != 0x1FFFFFF)
            {
              v296 = *(unsigned int *)(v279 + 4 * (*v381 - 1));
              *(_DWORD *)(v294 + ((v296 >> 5) & 0x7FFFFFC)) = v295;
              *(_DWORD *)(v279 + 4 * *(unsigned int *)(v294 + 4 * v281)) = v296;
              --*v381;
              *(_DWORD *)(v294 + 4 * v281) = 0x1FFFFFF;
            }
          }
        }
      }
      else
      {
        v286 = *(_DWORD *)(v280 + 32 * v281);
        if (v286 != -1)
        {
          v287 = *(_QWORD *)(a1 + 88);
          v288 = *(uint64_t **)(a1 + 608);
          v289 = *v288;
          do
          {
            v290 = *(_DWORD *)(a1 + 112);
            v291 = *(_QWORD *)(v287 + 8 * (v286 / v290));
            v292 = (unint64_t)*(unsigned int *)(*(_QWORD *)(v289 + 8 * ((v286 ^ 1) / *((_DWORD *)v288 + 6)))
                                                     + 4 * ((v286 ^ 1) % *((_DWORD *)v288 + 6))) >> 7;
            if ((_DWORD)v292 != 0x1FFFFFF)
            {
              v293 = *(unsigned int *)(*(_QWORD *)(a1 + 272) + 4 * v292);
              if ((_DWORD)v293 != -1)
                *(_DWORD *)(*(_QWORD *)(a1 + 288) + ((v293 >> 3) & 0x1FFFFFFC)) |= 1 << v293;
            }
            v286 = *(_DWORD *)(v291 + 8 * (v286 % v290));
          }
          while (v286 != -1);
        }
      }
    }
    while (v278);
    LODWORD(v277) = *(_DWORD *)(a1 + 328);
  }
  if (!(_DWORD)v277)
    goto LABEL_305;
  v297 = *(_QWORD *)(a1 + 320);
  v298 = *(_QWORD *)(a1 + 120);
  v299 = *(_QWORD *)(a1 + 288);
  v300 = v277;
  do
  {
    v301 = *(unsigned int *)(v297 + 4 * --v300);
    v302 = v301 >> 5;
    v303 = *(_DWORD *)(v299 + 4 * (v301 >> 5));
    v304 = 1 << v301;
    *(_DWORD *)(v299 + 4 * (v301 >> 5)) = v303 | (1 << v301);
    if ((v303 & (1 << v301)) != 0)
      continue;
    v305 = *(unsigned int *)(v298 + 44 * v301);
    v306 = v305 >> 7;
    if (v305 >> 7 == 0x1FFFFFF)
    {
      LODWORD(v388[0]) = *(_DWORD *)(v298 + 44 * v301);
      goto LABEL_303;
    }
    v307 = v305 >> 7;
    do
    {
      v308 = *(_QWORD *)(a1 + 24) + 32 * v307;
      if ((*(_BYTE *)(v308 + 4) & 1) == 0)
        goto LABEL_304;
      v307 = (unint64_t)*(unsigned int *)(v308 + 8) >> 7;
    }
    while (v307 != 0x1FFFFFF);
    v373 = v301;
    v375 = 1 << v301;
    v377 = v301 >> 5;
    v379 = v300;
    LODWORD(v388[0]) = *(_DWORD *)(v298 + 44 * v301);
    do
    {
      v309 = *(_QWORD *)(a1 + 24);
      v310 = a1 + 16 * *(unsigned __int8 *)(v309 + 32 * v306 + 5);
      v311 = (_QWORD *)(v310 + 344);
      v312 = *(unsigned int *)(v310 + 352);
      if ((*(_DWORD *)(v310 + 356) & 0x7FFFFFFFu) <= v312)
      {
        physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)v311, v388);
        v313 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        *(_DWORD *)(*v311 + 4 * v312) = v305;
        ++*(_DWORD *)(v310 + 352);
        v313 = v309;
      }
      v314 = v388[0];
      v315 = (unint64_t)LODWORD(v388[0]) >> 7;
      v316 = (int *)(v313 + 32 * v315);
      v317 = *((_BYTE *)v316 + 4);
      if ((v317 & 2) == 0)
        goto LABEL_284;
      v318 = v313 + 32 * v315;
      if ((v316[1] & 4) == 0)
      {
        v319 = *(unsigned __int8 *)(v318 + 5);
        v320 = a1 + 16 * v319;
        v321 = a1 + 4 * v319;
        v322 = *(_DWORD *)(v321 + 336);
        v323 = *(_QWORD *)(a1 + 40);
        v324 = (_DWORD *)(v323 + 4 * v315);
        v325 = *v324;
        v326 = *(_QWORD *)(v320 + 152);
        if (v325 < v322)
        {
          v327 = *(unsigned int *)(v326 + 4 * (v322 - 1));
          v328 = (v327 >> 5) & 0x7FFFFFC;
          *v324 = *(_DWORD *)(v323 + v328);
          *(_DWORD *)(v323 + v328) = v325;
          *(_DWORD *)(v326 + 4 * v325) = v327;
          *(_DWORD *)(v326 + 4 * *v324) = v314;
          --*(_DWORD *)(v321 + 336);
          LODWORD(v325) = *v324;
        }
        v329 = (_DWORD *)(v320 + 160);
        goto LABEL_290;
      }
      if (!*(_DWORD *)(v318 + 16))
      {
        v323 = *(_QWORD *)(a1 + 40);
        v324 = (_DWORD *)(v323 + 4 * v315);
        LODWORD(v325) = *v324;
        if (*v324 != 0x1FFFFFF)
        {
          v326 = *(_QWORD *)(a1 + 184);
          v329 = (_DWORD *)(a1 + 192);
LABEL_290:
          v330 = *(unsigned int *)(v326 + 4 * (*v329 - 1));
          *(_DWORD *)(v323 + ((v330 >> 5) & 0x7FFFFFC)) = v325;
          *(_DWORD *)(v326 + 4 * *v324) = v330;
          --*v329;
          *v324 = 0x1FFFFFF;
        }
      }
      *((_BYTE *)v316 + 4) = v317 & 0xDD;
      while (1)
      {
        v331 = *v316;
        if (*v316 == -1)
          break;
        v332 = *(_DWORD *)(a1 + 112);
        v333 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v331 / v332));
        v334 = (unint64_t)*(unsigned int *)(*(_QWORD *)(**(_QWORD **)(a1 + 608)
                                                             + 8
                                                             * ((v331 ^ 1)
                                                              / *(_DWORD *)(*(_QWORD *)(a1 + 608) + 24)))
                                                 + 4 * ((v331 ^ 1) % *(_DWORD *)(*(_QWORD *)(a1 + 608) + 24))) >> 7;
        if ((_DWORD)v334 == 0x1FFFFFF || (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 32 * v334 + 4) & 2) == 0)
        {
          LODWORD(v382) = v331 >> 1;
          v335 = *(_DWORD *)(a1 + 80);
          v336 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * ((v331 >> 1) / v335));
          v337 = (v331 >> 1) % v335;
          v338 = v336 + 16 * v337;
          v341 = *(_WORD *)(v338 + 4);
          v339 = (_WORD *)(v338 + 4);
          v340 = v341;
          if ((v341 & 4) != 0)
          {
            v342 = 16 * v337;
            *v339 = v340 & 0xFFFB;
            v343 = a1 + 4 * *(unsigned int *)(v336 + 16 * v337);
            --*(_DWORD *)(v343 + 232);
            physx::IG::IslandSim::removeEdgeFromActivatingList(a1, v331 >> 1);
            v344 = a1 + 16 * *(unsigned int *)(v336 + v342);
            v345 = (_QWORD *)(v344 + 568);
            v346 = *(unsigned int *)(v344 + 576);
            if ((*(_DWORD *)(v344 + 580) & 0x7FFFFFFFu) <= v346)
            {
              physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v345, &v382);
            }
            else
            {
              *(_DWORD *)(*v345 + 4 * v346) = v382;
              ++*(_DWORD *)(v344 + 576);
            }
          }
        }
        v316 = (int *)(v333 + 8 * (v331 % v332));
      }
LABEL_284:
      LODWORD(v388[0]) = *(_DWORD *)(v309 + 32 * v306 + 8);
      LODWORD(v305) = v388[0];
      v306 = (unint64_t)LODWORD(v388[0]) >> 7;
    }
    while (v306 != 0x1FFFFFF);
    v298 = *(_QWORD *)(a1 + 120);
    v297 = *(_QWORD *)(a1 + 320);
    v299 = *(_QWORD *)(a1 + 288);
    v302 = v377;
    v300 = v379;
    v304 = v375;
    LODWORD(v301) = v373;
LABEL_303:
    v347 = *(_DWORD *)(v297 + 4 * (*(_DWORD *)(a1 + 328) - 1));
    v348 = v298 + 44 * v301;
    *(_DWORD *)(v298 + 44 * v347 + 16) = *(_DWORD *)(v348 + 16);
    *(_DWORD *)(v297 + 4 * *(unsigned int *)(v348 + 16)) = v347;
    --*(_DWORD *)(a1 + 328);
    *(_DWORD *)(v348 + 16) = -1;
    *(_DWORD *)(v299 + 4 * v302) &= ~v304;
LABEL_304:
    ;
  }
  while ((_DWORD)v300);
LABEL_305:
  v349 = 0;
  v350 = 1;
  do
  {
    v351 = v350;
    v352 = a1 + 16 * v349;
    v353 = *(unsigned int *)(v352 + 384);
    if ((_DWORD)v353)
    {
      v354 = *(unsigned int **)(v352 + 376);
      v355 = *(_DWORD *)(a1 + 80);
      v356 = *(_QWORD *)(a1 + 56);
      do
      {
        v357 = *v354++;
        v358 = *(_QWORD *)(v356 + 8 * (v357 / v355)) + 16 * (v357 % v355);
        *(_WORD *)(v358 + 4) &= ~8u;
        --v353;
      }
      while (v353);
    }
    v350 = 0;
    *(_DWORD *)(v352 + 384) = 0;
    v349 = 1;
  }
  while ((v351 & 1) != 0);
}

uint64_t physx::IG::HandleManager<unsigned int>::freeHandle(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;

  v3 = a2;
  if (*(_DWORD *)(result + 16) == a2)
  {
    *(_DWORD *)(result + 16) = a2 - 1;
  }
  else
  {
    v2 = *(unsigned int *)(result + 8);
    if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) <= v2)
    {
      return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result, &v3);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)result + 4 * v2) = a2;
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t physx::IG::IslandSim::mergeIslandsInternal(uint64_t result, unsigned int *a2, unsigned int *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  char v19;
  unsigned int *v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;

  v7 = *(_QWORD *)(result + 240);
  v8 = a6 >> 7;
  v9 = a7 >> 7;
  v10 = (unint64_t)*a3 >> 7;
  if (v10 == 0x1FFFFFF)
  {
    v11 = *(_QWORD *)(result + 24);
  }
  else
  {
    v12 = *(_QWORD *)(result + 272);
    v11 = *(_QWORD *)(result + 24);
    v13 = *(_DWORD *)(v7 + 4 * v9) + *(_DWORD *)(v7 + 4 * v8) + 1;
    do
    {
      *(_DWORD *)(v7 + 4 * v10) += v13;
      *(_DWORD *)(v12 + 4 * v10) = a4;
      v10 = (unint64_t)*(unsigned int *)(v11 + 32 * v10 + 8) >> 7;
    }
    while (v10 != 0x1FFFFFF);
  }
  v14 = 0;
  *(_DWORD *)(v7 + 4 * v9) = *(_DWORD *)(v7 + 4 * v8) + 1;
  v15 = *a3;
  *(_DWORD *)(v11 + (((unint64_t)a2[1] >> 2) & 0x3FFFFFE0) + 8) = v15;
  *(_DWORD *)(v11 + ((v15 >> 2) & 0x3FFFFFE0) + 12) = a2[1];
  a2[1] = a3[1];
  v16 = a2[3];
  a2[2] += a3[2];
  a2[3] = v16 + a3[3];
  v17 = *(_QWORD *)(result + 136);
  *(_DWORD *)(v17 + 4 * a4) += *(_DWORD *)(v17 + 4 * a5);
  v18 = 1;
  do
  {
    v19 = v18;
    v20 = &a2[v14];
    v23 = v20[7];
    v21 = v20 + 7;
    v22 = v23;
    if (v23 == -1)
      v24 = &a2[v14 + 5];
    else
      v24 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(result + 56) + 8 * (v22 / *(_DWORD *)(result + 80)))
                           + 16 * (v22 % *(_DWORD *)(result + 80))
                           + 8);
    v25 = &a3[v14];
    v27 = v25[5];
    v26 = v25 + 5;
    *v24 = v27;
    if (*v26 != -1)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 56) + 8 * (*v26 / *(_DWORD *)(result + 80)))
                + 16 * (*v26 % *(_DWORD *)(result + 80))
                + 12) = *v21;
      *v21 = a3[v14 + 7];
    }
    v18 = 0;
    v28 = &a3[v14];
    a2[v14 + 9] += v28[9];
    *v26 = -1;
    v28[7] = -1;
    v28[9] = 0;
    v14 = 1;
  }
  while ((v19 & 1) != 0);
  *(_OWORD *)a3 = xmmword_2261A6CC0;
  *(_DWORD *)(v17 + 4 * a5) = 0;
  if (a3[4] != -1)
  {
    v29 = *(_QWORD *)(result + 120);
    v30 = *(_QWORD *)(result + 320);
    v31 = *(_DWORD *)(v30 + 4 * (*(_DWORD *)(result + 328) - 1));
    v32 = v29 + 44 * a5;
    *(_DWORD *)(v29 + 44 * v31 + 16) = *(_DWORD *)(v32 + 16);
    *(_DWORD *)(v30 + 4 * *(unsigned int *)(v32 + 16)) = v31;
    --*(_DWORD *)(result + 328);
    *(_DWORD *)(v32 + 16) = -1;
    *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * (a5 >> 5)) &= ~(1 << a5);
  }
  return result;
}

void physx::IG::IslandSim::setKinematic(physx::IG::IslandSim *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  char v5;
  char *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  int *v42;
  unsigned int v43;
  _DWORD *v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  __int16 v51;
  __int16 v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int v69;

  v69 = a2;
  v2 = *((_QWORD *)this + 3);
  v3 = a2 >> 7;
  v4 = (int *)(v2 + 32 * v3);
  v6 = (char *)(v4 + 1);
  v5 = *((_BYTE *)v4 + 4);
  if ((v5 & 4) != 0)
    return;
  v8 = *((_QWORD *)this + 34);
  v9 = *(unsigned int *)(v8 + 4 * v3);
  v10 = *((_QWORD *)this + 15);
  *(_DWORD *)(v8 + 4 * v3) = -1;
  v11 = v4 + 2;
  v12 = v4[2];
  if (v12 >= 0xFFFFFF80)
    v13 = (_DWORD *)(v10 + 44 * v9 + 4);
  else
    v13 = (_DWORD *)(v2 + ((v12 >> 2) & 0x3FFFFFE0) + 12);
  *v13 = v4[3];
  v14 = v4[3];
  if (v14 > 0xFFFFFF7F)
    *(_DWORD *)(v10 + 44 * v9) = *v11;
  else
    *(_DWORD *)(v2 + ((v14 >> 2) & 0x3FFFFFE0) + 8) = *v11;
  v15 = *(unsigned __int8 *)(v2 + 32 * v3 + 5);
  v16 = v10 + 44 * v9 + 4 * v15;
  --*(_DWORD *)(v16 + 8);
  *(_QWORD *)v11 = 0x7F0000007FLL;
  if ((v5 & 2) != 0)
  {
    v23 = (char *)this + 16 * v15;
    v24 = (char *)this + 4 * v15;
    v25 = *((_DWORD *)v24 + 84);
    v20 = *((_QWORD *)this + 5);
    v21 = (_DWORD *)(v20 + 4 * v3);
    v22 = *v21;
    v18 = *((_QWORD *)v23 + 19);
    if (v22 < v25)
    {
      v26 = *(unsigned int *)(v18 + 4 * (v25 - 1));
      v27 = (v26 >> 5) & 0x7FFFFFC;
      *v21 = *(_DWORD *)(v20 + v27);
      *(_DWORD *)(v20 + v27) = v22;
      *(_DWORD *)(v18 + 4 * v22) = v26;
      *(_DWORD *)(v18 + 4 * *v21) = a2;
      --*((_DWORD *)v24 + 84);
      LODWORD(v22) = *v21;
    }
    v28 = *((_DWORD *)v23 + 40);
    v17 = v23 + 160;
    v19 = (unsigned int *)(v18 + 4 * (v28 - 1));
    goto LABEL_14;
  }
  if ((v5 & 0x20) != 0)
  {
    v5 &= ~0x20u;
    v17 = (_DWORD *)((char *)this + 440);
    v18 = *((_QWORD *)this + 54);
    v19 = (unsigned int *)(v18 + 4 * (*((_DWORD *)this + 110) - 1));
    v20 = *((_QWORD *)this + 5);
    v21 = (_DWORD *)(v20 + 4 * v3);
    LODWORD(v22) = *v21;
LABEL_14:
    v29 = *v19;
    *(_DWORD *)(v20 + ((v29 >> 5) & 0x7FFFFFC)) = v22;
    *(_DWORD *)(v18 + 4 * *v21) = v29;
    --*v17;
    *v21 = 0x1FFFFFF;
  }
  v30 = v5 & 0xF9 | 4;
  *v6 = v30;
  if (*(_DWORD *)(v2 + 32 * v3 + 16))
  {
    *(_DWORD *)(*((_QWORD *)this + 5) + 4 * v3) = *((_DWORD *)this + 110);
    v31 = *((unsigned int *)this + 110);
    if ((*((_DWORD *)this + 111) & 0x7FFFFFFFu) <= v31)
    {
      physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack((uint64_t)this + 432, &v69);
      v30 = *v6;
    }
    else
    {
      *(_DWORD *)(*((_QWORD *)this + 54) + 4 * v31) = a2;
      ++*((_DWORD *)this + 110);
    }
    *v6 = v30 | 0x20;
  }
  v32 = v10 + 44 * v9;
  v33 = *(_DWORD *)(v32 + 8);
  v34 = *(_DWORD *)(v32 + 12);
  v35 = *v4;
  if (*v4 != -1)
  {
    while (1)
    {
      v36 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v35 / *((_DWORD *)this + 28)))
                      + 8 * (v35 % *((_DWORD *)this + 28)));
      v68 = v35 >> 1;
      v37 = *((_DWORD *)this + 20);
      v38 = *((_QWORD *)this + 7);
      v39 = *(_QWORD *)(v38 + 8 * ((v35 >> 1) / v37));
      v40 = (v35 >> 1) % v37;
      v41 = (unsigned int *)(v39 + 16 * v40);
      v42 = (int *)(v41 + 2);
      v43 = v41[2];
      if (v43 == -1)
        v44 = (_DWORD *)(v10 + 44 * v9 + 4 * *v41 + 28);
      else
        v44 = (_DWORD *)(*(_QWORD *)(v38 + 8 * (v43 / v37)) + 16 * (v43 % v37) + 12);
      *v44 = v41[3];
      v45 = v41[3];
      v46 = *v42;
      if (v45 == -1)
      {
        v47 = *v41;
        *(_DWORD *)(v10 + 44 * v9 + 4 * v47 + 20) = v46;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v38 + 8 * (v45 / *((_DWORD *)this + 20))) + 16 * (v45 % *((_DWORD *)this + 20)) + 8) = v46;
        v47 = *v41;
      }
      v48 = v10 + 44 * v9 + 4 * v47;
      --*(_DWORD *)(v48 + 36);
      *(_QWORD *)v42 = -1;
      physx::IG::IslandSim::removeConnectionInternal(this, v68);
      physx::IG::IslandSim::removeConnectionFromGraph(this, v68);
      v49 = v39 + 16 * v40;
      v51 = *(_WORD *)(v49 + 4);
      v50 = (__int16 *)(v49 + 4);
      v52 = v51 & 0xFFFE;
      *v50 = v51 & 0xFFFE;
      if ((v51 & 4) != 0)
      {
        physx::IG::IslandSim::removeEdgeFromActivatingList((uint64_t)this, v68);
        v52 = *v50 & 0xFFFB;
        *v50 = v52;
        --*((_DWORD *)this + *v41 + 58);
      }
      if ((v52 & 2) != 0)
        break;
      if ((v52 & 8) == 0)
      {
        v53 = (char *)this + 16 * *v41;
        v54 = v53 + 376;
        v55 = *((unsigned int *)v53 + 96);
        if ((*((_DWORD *)v53 + 97) & 0x7FFFFFFFu) <= v55)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v54, &v68);
          v52 = *v50;
        }
        else
        {
          *(_DWORD *)(*v54 + 4 * v55) = v68;
          ++*((_DWORD *)v53 + 96);
        }
        v56 = v52 | 8;
        goto LABEL_36;
      }
LABEL_37:
      v35 = v36;
      if (v36 == -1)
        goto LABEL_38;
    }
    v56 = v52 | 0x20;
LABEL_36:
    *v50 = v56;
    goto LABEL_37;
  }
LABEL_38:
  if (!(v33 + v34))
  {
    v57 = *((_QWORD *)this + 17);
    v58 = v10 + 44 * v9;
    *(_QWORD *)&v59 = -1;
    *((_QWORD *)&v59 + 1) = -1;
    *(_OWORD *)(v58 + 20) = v59;
    *(_DWORD *)(v58 + 36) = 0;
    *(_DWORD *)(v58 + 40) = 0;
    *(_DWORD *)(v57 + 4 * v9) = 0;
    if (*(_DWORD *)(v58 + 16) == -1)
    {
      v65 = *((_QWORD *)this + 36);
      v64 = ~(1 << v9);
      v66 = v9 >> 5;
      v67 = *(_DWORD *)(v65 + 4 * (v9 >> 5));
    }
    else
    {
      v60 = *((_QWORD *)this + 15);
      v61 = *((_QWORD *)this + 40);
      v62 = *(_DWORD *)(v61 + 4 * (*((_DWORD *)this + 82) - 1));
      v63 = v60 + 44 * v9;
      *(_DWORD *)(v60 + 44 * v62 + 16) = *(_DWORD *)(v63 + 16);
      *(_DWORD *)(v61 + 4 * *(unsigned int *)(v63 + 16)) = v62;
      --*((_DWORD *)this + 82);
      *(_DWORD *)(v63 + 16) = -1;
      v64 = ~(1 << v9);
      v65 = *((_QWORD *)this + 36);
      v66 = v9 >> 5;
      v67 = *(_DWORD *)(v65 + 4 * v66) & v64;
      *(_DWORD *)(v65 + 4 * v66) = v67;
    }
    *(_DWORD *)(v65 + 4 * v66) = v67 & v64;
    physx::IG::HandleManager<unsigned int>::freeHandle((uint64_t)this, v9);
  }
}

uint64_t physx::IG::IslandSim::setDynamic(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  unsigned int v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int16 *v32;
  __int16 v33;
  __int16 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int32x2_t *v53;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  v2 = *(_QWORD *)(this + 24);
  v3 = a2 >> 7;
  v4 = v2 + 32 * v3;
  v7 = *(_BYTE *)(v4 + 4);
  v6 = (char *)(v4 + 4);
  v5 = v7;
  if ((v7 & 4) != 0)
  {
    v8 = a2;
    v9 = this;
    v10 = *(_DWORD *)(v2 + 32 * v3);
    if (v10 != -1)
    {
      while (1)
      {
        v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 88) + 8 * (v10 / *(_DWORD *)(v9 + 112)))
                        + 8 * (v10 % *(_DWORD *)(v9 + 112)));
        v12 = *(unsigned int *)(*(_QWORD *)(**(_QWORD **)(v9 + 608)
                                          + 8 * ((v10 ^ 1) / *(_DWORD *)(*(_QWORD *)(v9 + 608) + 24)))
                              + 4 * ((v10 ^ 1) % *(_DWORD *)(*(_QWORD *)(v9 + 608) + 24)));
        v13 = v10 >> 1;
        LODWORD(v55) = v10 >> 1;
        v14 = *(_DWORD *)(v9 + 80);
        v15 = *(_QWORD *)(v9 + 56);
        v16 = *(_QWORD *)(v15 + 8 * ((v10 >> 1) / v14));
        v17 = (v10 >> 1) % v14;
        v18 = (unsigned int *)(v16 + 16 * v17);
        if (v12 <= 0xFFFFFF7F)
        {
          v19 = *(_DWORD *)(*(_QWORD *)(v9 + 272) + ((v12 >> 5) & 0x7FFFFFC));
          if (v19 != -1)
          {
            v20 = *(_QWORD *)(v9 + 120);
            v21 = v16 + 16 * v17;
            v24 = *(_DWORD *)(v21 + 8);
            v22 = (int *)(v21 + 8);
            v23 = v24;
            if (v24 == -1)
              v25 = (_DWORD *)(v20 + 44 * v19 + 4 * *v18 + 28);
            else
              v25 = (_DWORD *)(*(_QWORD *)(v15 + 8 * (v23 / v14)) + 16 * (v23 % v14) + 12);
            *v25 = v22[1];
            v26 = v22[1];
            v27 = *v22;
            if (v26 == -1)
            {
              v28 = *v18;
              *(_DWORD *)(v20 + 44 * v19 + 4 * v28 + 20) = v27;
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)(v15 + 8 * (v26 / *(_DWORD *)(v9 + 80))) + 16 * (v26 % *(_DWORD *)(v9 + 80)) + 8) = v27;
              v28 = *v18;
            }
            v29 = v20 + 44 * v19 + 4 * v28;
            --*(_DWORD *)(v29 + 36);
            *(_QWORD *)v22 = -1;
            v13 = v55;
          }
        }
        physx::IG::IslandSim::removeConnectionInternal((physx::IG::IslandSim *)v9, v13);
        physx::IG::IslandSim::removeConnectionFromGraph((physx::IG::IslandSim *)v9, v55);
        v30 = v16 + 16 * v17;
        v33 = *(_WORD *)(v30 + 4);
        v32 = (__int16 *)(v30 + 4);
        v31 = v33;
        v34 = v33 & 0xFFFE;
        *v32 = v33 & 0xFFFE;
        if ((v33 & 4) != 0)
        {
          *v32 = v31 & 0xFFFA;
          physx::IG::IslandSim::removeEdgeFromActivatingList(v9, v55);
          --*(_DWORD *)(v9 + 4 * *v18 + 232);
          v34 = *v32;
        }
        if ((v34 & 2) != 0)
          break;
        if ((v34 & 8) == 0)
        {
          v35 = v9 + 16 * *v18;
          v36 = (_QWORD *)(v35 + 376);
          v37 = *(unsigned int *)(v35 + 384);
          if ((*(_DWORD *)(v35 + 388) & 0x7FFFFFFFu) <= v37)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)v36, &v55);
            v34 = *v32;
          }
          else
          {
            *(_DWORD *)(*v36 + 4 * v37) = v55;
            ++*(_DWORD *)(v35 + 384);
          }
          v38 = v34 | 8;
          goto LABEL_21;
        }
LABEL_22:
        v10 = v11;
        if (v11 == -1)
        {
          v5 = *v6;
          v8 = a2;
          goto LABEL_24;
        }
      }
      v38 = v34 | 0x20;
LABEL_21:
      *v32 = v38;
      goto LABEL_22;
    }
LABEL_24:
    if ((v5 & 0x20) == 0)
    {
      v39 = *(_QWORD *)(v9 + 40);
      if (*(_DWORD *)(v39 + 4 * v3) != 0x1FFFFFF)
      {
        v40 = v2 + 32 * v3;
        v43 = *(_DWORD *)(v40 + 16);
        v41 = (_DWORD *)(v40 + 16);
        v42 = v43;
        *v41 = 0;
        if (!*(_DWORD *)(*(_QWORD *)(v9 + 24) + 32 * v3 + 16))
        {
          v44 = *(_DWORD *)(v39 + 4 * v3);
          if (v44 != 0x1FFFFFF)
          {
            v45 = *(_QWORD *)(v9 + 184);
            v46 = *(unsigned int *)(v45 + 4 * (*(_DWORD *)(v9 + 192) - 1));
            *(_DWORD *)(v39 + ((v46 >> 5) & 0x7FFFFFC)) = v44;
            *(_DWORD *)(v45 + 4 * *(unsigned int *)(v39 + 4 * v3)) = v46;
            --*(_DWORD *)(v9 + 192);
            *(_DWORD *)(v39 + 4 * v3) = 0x1FFFFFF;
          }
        }
        *v41 = v42;
      }
    }
    *v6 = v5 & 0xFB;
    v47 = *(_DWORD *)(v9 + 8);
    if (v47)
    {
      v48 = v47 - 1;
      v49 = *(_DWORD *)(*(_QWORD *)v9 + 4 * v48);
      *(_DWORD *)(v9 + 8) = v48;
    }
    else
    {
      v49 = *(_DWORD *)(v9 + 16);
      *(_DWORD *)(v9 + 16) = v49 + 1;
    }
    if (v49 == (*(_DWORD *)(v9 + 132) & 0x7FFFFFFF))
    {
      if (v49 < ((2 * v49) | 1))
        physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::recreate(v9 + 120, (2 * v49) | 1);
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(v9 + 288, (2 * v49) | 1);
      LODWORD(v55) = 0;
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v9 + 136, (2 * v49) | 1, &v55);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 288) + 4 * (v49 >> 5)) &= ~(1 << v49);
    v50 = *(_DWORD *)(v9 + 128);
    *(_QWORD *)&v55 = 0x7F0000007FLL;
    if (v49 + 1 > v50)
      v51 = v49 + 1;
    else
      v51 = v50;
    v56 = -1;
    v57 = -1;
    v58 = -1;
    v59 = 0;
    *((_QWORD *)&v55 + 1) = 0;
    physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::resize(v9 + 120, v51, &v55);
    if (v49 + 1 > *(_DWORD *)(v9 + 128))
      v52 = v49 + 1;
    else
      v52 = *(_DWORD *)(v9 + 128);
    LODWORD(v55) = 0;
    this = physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v9 + 136, v52, &v55);
    v53 = (int32x2_t *)(*(_QWORD *)(v9 + 120) + 44 * v49);
    *v53 = vdup_n_s32(v8);
    v53[1].i32[*(unsigned __int8 *)(v2 + 32 * v3 + 5)] = 1;
    *(_DWORD *)(*(_QWORD *)(v9 + 272) + 4 * v3) = v49;
    *(_DWORD *)(*(_QWORD *)(v9 + 136) + 4 * v49) = 0;
    if ((*v6 & 2) != 0)
    {
      *v6 &= ~2u;
      return physx::IG::IslandSim::activateNode(v9, v8);
    }
  }
  return this;
}

float physx::PxsMaterialCombiner::combineRestitution(uint64_t a1, uint64_t a2)
{
  int v2;
  float result;
  float v4;

  v2 = *(_BYTE *)(a1 + 14) & 0xF;
  if (v2 <= (*(_BYTE *)(a2 + 14) & 0xF))
    v2 = *(_BYTE *)(a2 + 14) & 0xF;
  result = *(float *)(a1 + 8);
  v4 = *(float *)(a2 + 8);
  switch(v2)
  {
    case 0:
      result = result + v4;
      v4 = 0.5;
      goto LABEL_5;
    case 1:
      if (result >= v4)
        result = *(float *)(a2 + 8);
      break;
    case 2:
LABEL_5:
      result = result * v4;
      break;
    case 3:
      if (result <= v4)
        result = *(float *)(a2 + 8);
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

unint64_t physx::PxsMaterialCombiner::combineIsotropicFriction(float *a1, float32x2_t *a2, float32x2_t *a3)
{
  int v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  float v11;
  float v12;
  float v13;

  if (((a3[1].i16[2] | a2[1].i16[2]) & 1) != 0)
    return 0;
  v3 = a2[1].u8[6] >> 4;
  if (v3 <= a3[1].u8[6] >> 4)
    v3 = a3[1].u8[6] >> 4;
  switch(v3)
  {
    case 0:
      v4 = vadd_f32(*a2, *a3);
      v5 = (float32x2_t)0x3F0000003F000000;
      goto LABEL_10;
    case 1:
      v8 = (int8x8_t)*a2;
      v9 = (int8x8_t)*a3;
      v10 = (int8x8_t)vcgt_f32(*a3, *a2);
      goto LABEL_12;
    case 2:
      v4 = *a2;
      v5 = *a3;
LABEL_10:
      v7 = vmul_f32(v4, v5);
      break;
    case 3:
      v8 = (int8x8_t)*a2;
      v9 = (int8x8_t)*a3;
      v10 = (int8x8_t)vcgt_f32(*a2, *a3);
LABEL_12:
      v7 = (float32x2_t)vbsl_s8(v10, v8, v9);
      break;
    default:
      v7 = 0;
      break;
  }
  v11 = a1[1] * v7.f32[0];
  v12 = vmuls_lane_f32(*a1, v7, 1);
  v13 = fmaxf(v11, 0.0);
  if ((float)(v12 - v13) < 0.0)
    v12 = v13;
  return LODWORD(v12) | ((unint64_t)LODWORD(v13) << 32);
}

uint64_t PxsCMUpdateTask::release(PxsCMUpdateTask *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 3);
  result = (**(uint64_t (***)(PxsCMUpdateTask *))this)(this);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  return result;
}

uint64_t physx::PxsNphaseImplementationContext::processContactManager(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t NotThreadSafe;
  void (***v11)(PxsCMDiscreteUpdateTask *__hidden);
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(PxsCMDiscreteUpdateTask *__hidden);

  v7 = result;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_lock(**(pthread_mutex_t ***)(*(_QWORD *)(result + 8) + 1920));
  v8 = *(_DWORD *)(v7 + 72);
  if (v8)
  {
    v9 = 0;
    do
    {
      NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe(*(physx::Cm::FlushPool **)(*(_QWORD *)(v7 + 8) + 1920), 88, 0x10u);
      v11 = (void (***)(PxsCMDiscreteUpdateTask *__hidden))NotThreadSafe;
      v12 = *(_QWORD *)(v7 + 8);
      if (v8 - v9 >= 0x80)
        v13 = 128;
      else
        v13 = v8 - v9;
      v14 = *(_QWORD *)(v7 + 80);
      v15 = *(_QWORD *)(v7 + 152);
      v16 = *(_QWORD *)(v7 + 64) + 8 * v9;
      *(_QWORD *)(NotThreadSafe + 8) = *(_QWORD *)(v12 + 2616);
      *(_QWORD *)(NotThreadSafe + 16) = 0;
      *(_DWORD *)(NotThreadSafe + 32) = 0;
      *(_QWORD *)(NotThreadSafe + 40) = v16;
      *(_QWORD *)(NotThreadSafe + 48) = a2 + 32 * v9;
      *(_QWORD *)(NotThreadSafe + 56) = v14 + 16 * v9;
      *(_DWORD *)(NotThreadSafe + 64) = v13;
      *(float *)(NotThreadSafe + 68) = a4;
      *(_QWORD *)(NotThreadSafe + 72) = v12;
      *(_QWORD *)(NotThreadSafe + 80) = v15;
      *(_QWORD *)NotThreadSafe = &off_24ED8BE68;
      *(_DWORD *)(NotThreadSafe + 32) = 1;
      *(_QWORD *)(NotThreadSafe + 24) = a3;
      if (a3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
        v11[2] = (void (**)(PxsCMDiscreteUpdateTask *__hidden))v11[3][2];
        v17 = *v11;
      }
      else
      {
        v17 = &off_24ED8BE68;
      }
      v9 += v13;
      result = ((uint64_t (*)(_QWORD *))v17[5])(v11);
    }
    while (v9 < v8);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(**(pthread_mutex_t ***)(*(_QWORD *)(v7 + 8) + 1920));
  return result;
}

uint64_t `non-virtual thunk to'physx::PxsNphaseImplementationContext::processContactManager(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return physx::PxsNphaseImplementationContext::processContactManager(a1 - 16, a2, a3, a4);
}

uint64_t physx::PxsNphaseImplementationContext::processContactManagerSecondPass(uint64_t this, float a2, physx::PxBaseTask *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t NotThreadSafe;
  void (***v9)(PxsCMDiscreteUpdateTask *__hidden);
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(PxsCMDiscreteUpdateTask *__hidden);

  v5 = this;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    this = pthread_mutex_lock(**(pthread_mutex_t ***)(*(_QWORD *)(this + 8) + 1920));
  v6 = *(_DWORD *)(v5 + 128);
  if (v6)
  {
    v7 = 0;
    do
    {
      NotThreadSafe = physx::Cm::FlushPool::allocateNotThreadSafe(*(physx::Cm::FlushPool **)(*(_QWORD *)(v5 + 8) + 1920), 88, 0x10u);
      v9 = (void (***)(PxsCMDiscreteUpdateTask *__hidden))NotThreadSafe;
      v10 = *(_QWORD *)(v5 + 8);
      if (v6 - v7 >= 0x80)
        v11 = 128;
      else
        v11 = v6 - v7;
      v12 = *(_QWORD *)(v5 + 136);
      v13 = *(_QWORD *)(v5 + 104) + 32 * v7;
      v14 = *(_QWORD *)(v5 + 152);
      v15 = *(_QWORD *)(v5 + 120) + 8 * v7;
      *(_QWORD *)(NotThreadSafe + 8) = *(_QWORD *)(v10 + 2616);
      *(_QWORD *)(NotThreadSafe + 16) = 0;
      *(_DWORD *)(NotThreadSafe + 32) = 0;
      *(_QWORD *)(NotThreadSafe + 40) = v15;
      *(_QWORD *)(NotThreadSafe + 48) = v13;
      *(_QWORD *)(NotThreadSafe + 56) = v12 + 16 * v7;
      *(_DWORD *)(NotThreadSafe + 64) = v11;
      *(float *)(NotThreadSafe + 68) = a2;
      *(_QWORD *)(NotThreadSafe + 72) = v10;
      *(_QWORD *)(NotThreadSafe + 80) = v14;
      *(_QWORD *)NotThreadSafe = &off_24ED8BE68;
      *(_DWORD *)(NotThreadSafe + 32) = 1;
      *(_QWORD *)(NotThreadSafe + 24) = a3;
      if (a3)
      {
        (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a3 + 32))(a3);
        v9[2] = (void (**)(PxsCMDiscreteUpdateTask *__hidden))v9[3][2];
        v16 = *v9;
      }
      else
      {
        v16 = &off_24ED8BE68;
      }
      v7 += v11;
      this = ((uint64_t (*)(_QWORD *))v16[5])(v9);
    }
    while (v7 < v6);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(**(pthread_mutex_t ***)(*(_QWORD *)(v5 + 8) + 1920));
  return this;
}

uint64_t `non-virtual thunk to'physx::PxsNphaseImplementationContext::processContactManagerSecondPass(physx::PxsNphaseImplementationContext *this, float a2, physx::PxBaseTask *a3)
{
  return physx::PxsNphaseImplementationContext::processContactManagerSecondPass((uint64_t)this - 16, a2, a3);
}

uint64_t physx::PxsNphaseImplementationContext::updateContactManager(uint64_t *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)a6 + 40))(a6);
  v9 = a1[1];
  bzero(*(void **)(v9 + 1704), (4 * *(_DWORD *)(v9 + 1712)));
  bzero(*(void **)(v9 + 1720), (4 * *(_DWORD *)(v9 + 1728)));
  *(_DWORD *)(v9 + 1752) = 0;
  *(_OWORD *)(v9 + 1736) = 0u;
  v11 = *a1;
  v10 = a1[1];
  *(_DWORD *)(v10 + 2524) = 0;
  *(_QWORD *)(v10 + 2528) = 0;
  *(_QWORD *)(v10 + 2608) = 0;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, float))(v11 + 264))(a1, a1[6], a5, a2);
}

uint64_t physx::PxsNphaseImplementationContext::secondPassUpdateContactManager(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
}

uint64_t physx::PxsNphaseImplementationContext::create(physx::PxsNphaseImplementationContext *this, physx::PxsContext *a2, physx::IG::IslandSim *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  pthread_mutex_t *v9;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, 176, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsNphaseImplementationContext.cpp", 604);
  v6 = v5;
  if (v5)
  {
    *(_QWORD *)v5 = &off_24ED8BC10;
    *(_QWORD *)(v5 + 8) = this;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 120) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = &unk_24ED8BD38;
    *(_DWORD *)(v5 + 40) = 0;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_DWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 152) = 0;
    *(_QWORD *)(v5 + 160) = a2;
    v7 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
    else
      v8 = "<allocation names disabled>";
    v9 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, 72, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
    *(_QWORD *)(v6 + 168) = v9;
    physx::shdfnd::MutexImpl::MutexImpl(v9);
  }
  return v6;
}

uint64_t physx::PxsNphaseImplementationContext::destroy(physx::PxsNphaseImplementationContext *this)
{
  (**(void (***)(physx::PxsNphaseImplementationContext *))this)(this);
  return (*(uint64_t (**)(uint64_t, physx::PxsNphaseImplementationContext *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                                 + 24)
                                                                                     + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::PxsNphaseImplementationContext::registerContactManagers(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v4 = result;
    v5 = a3;
    do
    {
      v6 = *a2++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 56))(v4, v6, 0, 0);
      --v5;
    }
    while (v5);
  }
  return result;
}

void physx::PxsNphaseImplementationContext::registerContactManager(uint64_t a1, uint64_t a2, int a3, char a4)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = a2;
  v8 = *(unsigned __int8 *)(a2 + 86);
  v9 = *(unsigned __int8 *)(a2 + 87);
  DWORD2(v16) = 0;
  *(_QWORD *)&v16 = 0;
  physx::PxsContext::createCache(*(_QWORD *)(a1 + 8), (uint64_t)&v16, a2, v8, v9);
  v17 = 0u;
  v18 = 0u;
  BYTE9(v18) = a4;
  v10 = (a3 >> 31) | 0x20;
  if (a3 > 0)
    LOBYTE(v10) = 34;
  BYTE10(v18) = v10 & 0xF7 | (8 * ((*(_BYTE *)(a2 + 80) & 2) != 0));
  if ((*(_BYTE *)(a2 + 83) & 2) != 0)
    *(_BYTE *)(a2 + 83) |= 0x40u;
  v11 = *(unsigned int *)(a1 + 112);
  if ((*(_DWORD *)(a1 + 116) & 0x7FFFFFFFu) <= v11)
  {
    physx::shdfnd::Array<physx::PxsContactManagerOutput,physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>>::growAndPushBack(a1 + 104, &v17);
  }
  else
  {
    v12 = (_OWORD *)(*(_QWORD *)(a1 + 104) + 32 * v11);
    v13 = v18;
    *v12 = v17;
    v12[1] = v13;
    ++*(_DWORD *)(a1 + 112);
  }
  v14 = *(unsigned int *)(a1 + 144);
  if ((*(_DWORD *)(a1 + 148) & 0x7FFFFFFFu) <= v14)
  {
    physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::growAndPushBack(a1 + 136, &v16);
  }
  else
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 136) + 16 * v14) = v16;
    ++*(_DWORD *)(a1 + 144);
  }
  v15 = *(unsigned int *)(a1 + 128);
  if ((*(_DWORD *)(a1 + 132) & 0x7FFFFFFFu) <= v15)
  {
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::growAndPushBack(a1 + 120, &v19);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v15) = a2;
    *(_DWORD *)(a1 + 128) = v15 + 1;
  }
  *(_DWORD *)(a2 + 108) = *(_DWORD *)(a1 + 96) | (8 * *(_DWORD *)(a1 + 112) + 2147483640) | 0x80000000;
}

void `non-virtual thunk to'physx::PxsNphaseImplementationContext::registerContactManager(uint64_t a1, uint64_t a2, int a3, char a4)
{
  physx::PxsNphaseImplementationContext::registerContactManager(a1 - 16, a2, a3, a4);
}

_DWORD *physx::PxsNphaseImplementationContext::removeContactManagersFallback(_DWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  _OWORD *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  _BYTE v37[4];
  uint64_t v38;
  _OWORD *v39;
  char v40;
  void *v41;
  char v42;
  _OWORD v43[8];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!result[8])
    return result;
  v3 = (uint64_t)result;
  (*(void (**)(_DWORD *))(*(_QWORD *)result + 208))(result);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_DWORD *)(v3 + 32);
  v42 = 0;
  v41 = v43;
  v38 = 0x2000000000;
  v39 = v43;
  v40 = 0;
  v6 = v5 - 1;
  if (v5 - 1 < 1)
    goto LABEL_45;
  v7 = 0;
  v8 = v43;
  memset(v43, 0, sizeof(v43));
  while (1)
  {
    while (1)
    {
      if (v6 <= v7)
        goto LABEL_37;
      if ((v6 - v7) <= 4)
        break;
      v9 = v7 + v6;
      if (v7 + v6 < 0 != __OFADD__(v7, v6))
        ++v9;
      v10 = (uint64_t)v9 >> 1;
      v11 = *(_DWORD *)(v4 + 4 * (v9 >> 1));
      v12 = *(_DWORD *)(v4 + 4 * v7);
      if (v11 > v12)
      {
        *(_DWORD *)(v4 + 4 * v7) = v11;
        *(_DWORD *)(v4 + 4 * v10) = v12;
        v11 = v12;
        v12 = *(_DWORD *)(v4 + 4 * v7);
      }
      v13 = *(_DWORD *)(v4 + 4 * v6);
      if (v13 <= v12)
      {
        v12 = *(_DWORD *)(v4 + 4 * v6);
      }
      else
      {
        *(_DWORD *)(v4 + 4 * v7) = v13;
        *(_DWORD *)(v4 + 4 * v6) = v12;
        v11 = *(_DWORD *)(v4 + 4 * v10);
      }
      if (v12 > v11)
      {
        *(_DWORD *)(v4 + 4 * v10) = v12;
        *(_DWORD *)(v4 + 4 * v6) = v11;
        v11 = *(_DWORD *)(v4 + 4 * v10);
      }
      v14 = v6 - 1;
      *(_DWORD *)(v4 + 4 * v10) = *(_DWORD *)(v4 + 4 * v14);
      *(_DWORD *)(v4 + 4 * v14) = v11;
      v15 = v7;
      v16 = v6 - 1;
      while (1)
      {
        v17 = (unsigned int *)(v4 + 4 * v15);
        do
        {
          v19 = v17[1];
          ++v17;
          v18 = v19;
          ++v15;
        }
        while (v19 > v11);
        v20 = (unsigned int *)(v4 + 4 * v16);
        do
        {
          v22 = *--v20;
          v21 = v22;
          --v16;
        }
        while (v11 > v22);
        if (v15 >= v16)
          break;
        *v17 = v21;
        *v20 = v18;
        v11 = *(_DWORD *)(v4 + 4 * v14);
      }
      *v17 = v11;
      *(_DWORD *)(v4 + 4 * v14) = v18;
      v23 = v38;
      v24 = HIDWORD(v38) - 1;
      if (v15 - v7 >= v6 - v15)
      {
        if (v38 >= v24)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v37);
          v23 = v38;
          v8 = v39;
        }
        LODWORD(v38) = v23 + 1;
        *((_DWORD *)v8 + v23) = v15 + 1;
        v26 = v38;
        LODWORD(v38) = v38 + 1;
        *((_DWORD *)v8 + v26) = v6;
        v6 = v15 - 1;
      }
      else
      {
        if (v38 >= v24)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v37);
          v23 = v38;
          v8 = v39;
        }
        LODWORD(v38) = v23 + 1;
        *((_DWORD *)v8 + v23) = v7;
        v25 = v38;
        LODWORD(v38) = v38 + 1;
        *((_DWORD *)v8 + v25) = v15 - 1;
        v7 = v15 + 1;
      }
    }
    v27 = v7;
    v28 = v7 + 1;
    v29 = v4 + 4 + 4 * v7;
    do
    {
      v30 = 0;
      v31 = v27++;
      v32 = v31;
      do
      {
        if (*(_DWORD *)(v29 + 4 * v30) > *(_DWORD *)(v4 + 4 * v32))
          v32 = v28 + v30;
        ++v30;
      }
      while (v31 + v30 < v6);
      if (v32 != (_DWORD)v31)
      {
        v33 = *(_DWORD *)(v4 + 4 * v32);
        *(_DWORD *)(v4 + 4 * v32) = *(_DWORD *)(v4 + 4 * v31);
        *(_DWORD *)(v4 + 4 * v31) = v33;
      }
      ++v28;
      v29 += 4;
    }
    while (v27 != v6);
LABEL_37:
    v34 = v38;
    if (!(_DWORD)v38)
      break;
    LODWORD(v38) = v38 - 1;
    v6 = *((_DWORD *)v8 + (v34 - 1));
    LODWORD(v38) = v34 - 2;
    v7 = *((_DWORD *)v8 + (v34 - 2));
  }
  if (v40)
    v35 = v8 == 0;
  else
    v35 = 1;
  if (!v35)
  {
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
    if (v42)
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v41, (char *)v41);
  }
LABEL_45:
  if (*(_DWORD *)(v3 + 32))
  {
    v36 = 0;
    do
      physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(v3, *(_DWORD *)(*(_QWORD *)(v3 + 24) + 4 * v36++), v3 + 40, a2);
    while (v36 < *(unsigned int *)(v3 + 32));
  }
  *(_DWORD *)(v3 + 32) = 0;
  return (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 216))(v3);
}

uint64_t physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;

  v8 = (a2 >> 3) & 0xFFFFFFF;
  v9 = (*(_DWORD *)(a3 + 32) - 1);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v9);
  result = physx::PxsContext::destroyCache(*(_QWORD *)(a1 + 8), (_BYTE *)(*(_QWORD *)(a3 + 40) + 16 * v8));
  *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v8) = v10;
  v12 = *(_QWORD *)(a3 + 40);
  v13 = v12 + 16 * v9;
  v14 = v12 + 16 * v8;
  v15 = *(_DWORD *)(v13 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v13;
  *(_DWORD *)(v14 + 8) = v15;
  v16 = (_OWORD *)(a4 + 32 * v9);
  v17 = (_OWORD *)(a4 + 32 * v8);
  v18 = v16[1];
  *v17 = *v16;
  v17[1] = v18;
  v19 = *(_QWORD *)(a3 + 40) + 16 * v9;
  *(_DWORD *)(v19 + 8) = 0;
  *(_QWORD *)v19 = 0;
  v20 = *(_QWORD *)(a1 + 160);
  v21 = *(_QWORD *)(v20 + 624);
  *(_DWORD *)(v10 + 108) = a2;
  if ((*(_BYTE *)(v10 + 83) & 2) != 0 && (*(_WORD *)(v10 + 80) & 0x800) == 0)
  {
    for (i = *(_QWORD *)(**(_QWORD **)(v20 + 600) + 8 * *(unsigned int *)(v10 + 104)); i; i = *(_QWORD *)(i + 16))
      *(_DWORD *)(v21 + 4 * *(unsigned int *)(i + 24)) = *(_DWORD *)(v10 + 108);
  }
  *(_DWORD *)(a3 + 32) = v9;
  *(_DWORD *)(a3 + 48) = v9;
  return result;
}

_DWORD *`non-virtual thunk to'physx::PxsNphaseImplementationContext::removeContactManagersFallback(uint64_t a1, uint64_t a2)
{
  return physx::PxsNphaseImplementationContext::removeContactManagersFallback((_DWORD *)(a1 - 16), a2);
}

uint64_t physx::PxsNphaseImplementationContext::unregisterContactManager(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  _DWORD *v5;

  v3 = *(_DWORD *)(a2 + 108);
  if ((v3 & 0x80000000) != 0)
  {
    result = physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(a1, v3, a1 + 96, *(_QWORD *)(a1 + 104));
    v5 = (_DWORD *)(a1 + 112);
  }
  else
  {
    result = physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(a1, v3, a1 + 40, *(_QWORD *)(a1 + 48));
    v5 = (_DWORD *)(a1 + 56);
  }
  --*v5;
  return result;
}

uint64_t physx::PxsNphaseImplementationContext::refreshContactManager(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(unsigned int *)(a2 + 108);
  if ((v4 & 0x80000000) != 0)
  {
    v10 = a1[13];
    v11 = v10 + 32 * ((v4 >> 3) & 0xFFFFFFF);
    v7 = *(unsigned __int8 *)(v11 + 25);
    v8 = *(_BYTE *)(v11 + 26);
    physx::PxsNphaseImplementationContext::unregisterContactManagerInternal((uint64_t)a1, v4, (uint64_t)(a1 + 12), v10);
    v9 = a1 + 14;
  }
  else
  {
    v5 = a1[6];
    v6 = v5 + 32 * (v4 >> 3);
    v7 = *(unsigned __int8 *)(v6 + 25);
    v8 = *(_BYTE *)(v6 + 26);
    physx::PxsNphaseImplementationContext::unregisterContactManagerInternal((uint64_t)a1, v4, (uint64_t)(a1 + 5), v5);
    v9 = a1 + 7;
  }
  --*v9;
  if ((v8 & 2) != 0)
    v12 = 1;
  else
    v12 = -(v8 & 1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1 + 56))(a1, a2, v12, v7);
}

uint64_t physx::PxsNphaseImplementationContext::unregisterContactManagerFallback(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 108);
  v5 = v3;
  if ((v3 & 0x80000000) != 0)
  {
    result = physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(result, v3, result + 96, *(_QWORD *)(result + 104));
    --*(_DWORD *)(v2 + 112);
  }
  else
  {
    v4 = *(unsigned int *)(result + 32);
    if ((*(_DWORD *)(result + 36) & 0x7FFFFFFFu) <= v4)
    {
      return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(result + 24, &v5);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(result + 24) + 4 * v4) = v3;
      ++*(_DWORD *)(result + 32);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'physx::PxsNphaseImplementationContext::unregisterContactManagerFallback(uint64_t a1, uint64_t a2)
{
  return physx::PxsNphaseImplementationContext::unregisterContactManagerFallback(a1 - 16, a2);
}

uint64_t physx::PxsNphaseImplementationContext::refreshContactManagerFallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(unsigned int *)(a2 + 108);
  if ((v5 & 0x80000000) != 0)
  {
    v10 = *(_QWORD *)(a1 + 104);
    v11 = v10 + 32 * ((v5 >> 3) & 0xFFFFFFF);
    v7 = *(unsigned __int8 *)(v11 + 25);
    v8 = *(_BYTE *)(v11 + 26);
    physx::PxsNphaseImplementationContext::unregisterContactManagerInternal(a1, v5, a1 + 96, v10);
    --*(_DWORD *)(a1 + 112);
    if ((v8 & 2) == 0)
      goto LABEL_3;
LABEL_5:
    *(_BYTE *)(a2 + 83) |= 0x40u;
    v9 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, v9, v7);
  }
  v6 = a3 + ((4 * v5) & 0x3FFFFFFE0);
  v7 = *(unsigned __int8 *)(v6 + 25);
  v8 = *(_BYTE *)(v6 + 26);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2);
  if ((v8 & 2) != 0)
    goto LABEL_5;
LABEL_3:
  v9 = -(v8 & 1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, v9, v7);
}

uint64_t `non-virtual thunk to'physx::PxsNphaseImplementationContext::refreshContactManagerFallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return physx::PxsNphaseImplementationContext::refreshContactManagerFallback(a1 - 16, a2, a3);
}

void *physx::PxsNphaseImplementationContext::appendContactManagers(physx::PxsNphaseImplementationContext *this)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  void *result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_DWORD *)this + 32);
  v3 = *((unsigned int *)this + 18);
  v4 = v2 + v3;
  v5 = *((_DWORD *)this + 19) & 0x7FFFFFFF;
  if (v2 + (int)v3 > v5)
  {
    v6 = (char *)this + 64;
    v7 = 2 * v5;
    if (v7 <= v4)
      v7 = v2 + v3;
    if (v7 <= 0x100)
      v8 = 256;
    else
      v8 = v7;
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate((uint64_t)v6, v8);
    if ((*((_DWORD *)this + 15) & 0x7FFFFFFFu) < v8)
      physx::shdfnd::Array<physx::PxsContactManagerOutput,physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>>::recreate((uint64_t)this + 48, v8);
    if ((*((_DWORD *)this + 23) & 0x7FFFFFFFu) < v8)
      physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::recreate((uint64_t)this + 80, v8);
  }
  *((_DWORD *)this + 18) = v4;
  *((_DWORD *)this + 14) = v4;
  *((_DWORD *)this + 22) = v4;
  memcpy((void *)(*((_QWORD *)this + 8) + 8 * v3), *((const void **)this + 15), (8 * v2));
  memcpy((void *)(*((_QWORD *)this + 6) + 32 * v3), *((const void **)this + 13), (32 * v2));
  result = memcpy((void *)(*((_QWORD *)this + 10) + 16 * v3), *((const void **)this + 17), (16 * v2));
  v10 = *((unsigned int *)this + 32);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = *((_QWORD *)this + 20);
    v13 = *(_QWORD *)(v12 + 624);
    v14 = *((_QWORD *)this + 15);
    do
    {
      v15 = *(_QWORD *)(v14 + 8 * v11);
      *(_DWORD *)(v15 + 108) = *((_DWORD *)this + 10) | (8 * (v3 + v11));
      if ((*(_BYTE *)(v15 + 83) & 0x40) != 0)
      {
        *(_BYTE *)(v15 + 83) &= ~0x40u;
        if ((*(_BYTE *)(v15 + 81) & 8) == 0)
        {
          v16 = *(_QWORD *)(**(_QWORD **)(v12 + 600) + 8 * *(unsigned int *)(v15 + 104));
          if (v16)
          {
            do
            {
              *(_DWORD *)(v13 + 4 * *(unsigned int *)(v16 + 24)) = *(_DWORD *)(v15 + 108);
              v16 = *(_QWORD *)(v16 + 16);
            }
            while (v16);
            v10 = *((unsigned int *)this + 32);
          }
        }
      }
      ++v11;
    }
    while (v11 < v10);
  }
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_DWORD *)this + 36) = 0;
  return result;
}

void *physx::PxsNphaseImplementationContext::appendContactManagersFallback(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_DWORD *)(a1 + 128);
  v5 = *(unsigned int *)(a1 + 72);
  v6 = v4 + v5;
  v7 = *(_DWORD *)(a1 + 76) & 0x7FFFFFFF;
  if (v4 + (int)v5 > v7)
  {
    v8 = a1 + 64;
    v9 = 2 * v7;
    v10 = v9 <= v6 ? v4 + v5 : v9;
    physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(v8, v10);
    if ((*(_DWORD *)(a1 + 92) & 0x7FFFFFFFu) < v10)
      physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::recreate(a1 + 80, v10);
  }
  *(_DWORD *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 88) = v6;
  memcpy((void *)(*(_QWORD *)(a1 + 64) + 8 * v5), *(const void **)(a1 + 120), (8 * v4));
  memcpy((void *)(a2 + 32 * v5), *(const void **)(a1 + 104), (32 * v4));
  result = memcpy((void *)(*(_QWORD *)(a1 + 80) + 16 * v5), *(const void **)(a1 + 136), (16 * v4));
  v12 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 160);
    v15 = *(_QWORD *)(v14 + 624);
    v16 = *(_QWORD *)(a1 + 120);
    do
    {
      v17 = *(_QWORD *)(v16 + 8 * v13);
      *(_DWORD *)(v17 + 108) = *(_DWORD *)(a1 + 40) | (8 * (v5 + v13));
      if ((*(_BYTE *)(v17 + 83) & 0x40) != 0)
      {
        *(_BYTE *)(v17 + 83) &= ~0x40u;
        if ((*(_BYTE *)(v17 + 81) & 8) == 0)
        {
          v18 = *(_QWORD *)(**(_QWORD **)(v14 + 600) + 8 * *(unsigned int *)(v17 + 104));
          if (v18)
          {
            do
            {
              *(_DWORD *)(v15 + 4 * *(unsigned int *)(v18 + 24)) = *(_DWORD *)(v17 + 108);
              v18 = *(_QWORD *)(v18 + 16);
            }
            while (v18);
            v12 = *(unsigned int *)(a1 + 128);
          }
        }
      }
      ++v13;
    }
    while (v13 < v12);
  }
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  return result;
}

void *`non-virtual thunk to'physx::PxsNphaseImplementationContext::appendContactManagersFallback(uint64_t a1, uint64_t a2)
{
  return physx::PxsNphaseImplementationContext::appendContactManagersFallback(a1 - 16, a2);
}

uint64_t physx::PxsNphaseImplementationContext::getNewContactManagerOutput(physx::PxsNphaseImplementationContext *this, unsigned int a2)
{
  return *((_QWORD *)this + 13) + 32 * ((a2 >> 3) & 0xFFFFFFF);
}

uint64_t `non-virtual thunk to'physx::PxsNphaseImplementationContext::getNewContactManagerOutput(physx::PxsNphaseImplementationContext *this, unsigned int a2)
{
  return *((_QWORD *)this + 11) + 32 * ((a2 >> 3) & 0xFFFFFFF);
}

uint64_t physx::PxsNphaseImplementationContext::getContactManagerOutputs@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(this + 48);
  *(_DWORD *)a2 = 0;
  return this;
}

physx::IG::SimpleIslandManager *physx::IG::SimpleIslandManager::SimpleIslandManager(physx::IG::SimpleIslandManager *this, int a2, uint64_t a3)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 2048;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  v6 = (char *)this + 112;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 9) = 0u;
  v7 = (char *)this + 144;
  *((_DWORD *)this + 42) = 2048;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 50) = 2048;
  *((_QWORD *)this + 26) = 0;
  v8 = (char *)this + 224;
  *((_DWORD *)this + 54) = 0;
  physx::IG::IslandSim::IslandSim((uint64_t)this + 224, (uint64_t)this + 112, (uint64_t)this + 144, (uint64_t)this + 128, a3);
  physx::IG::IslandSim::IslandSim((uint64_t)this + 864, 0, (uint64_t)v7, 0, a3);
  *((_QWORD *)this + 191) = 0;
  *((_QWORD *)this + 190) = 0;
  *((_DWORD *)this + 384) = 0;
  *((_QWORD *)this + 189) = a3;
  *((_QWORD *)this + 188) = &off_24ED8BB60;
  *((_QWORD *)this + 193) = this;
  *((_QWORD *)this + 194) = v9;
  *((_QWORD *)this + 198) = 0;
  *((_QWORD *)this + 197) = 0;
  *((_DWORD *)this + 398) = 0;
  *((_QWORD *)this + 196) = a3;
  *((_QWORD *)this + 195) = &off_24ED8BB60;
  *((_QWORD *)this + 200) = this;
  *((_QWORD *)this + 201) = v8;
  *((_QWORD *)this + 205) = 0;
  *((_QWORD *)this + 204) = 0;
  *((_DWORD *)this + 412) = 0;
  *((_QWORD *)this + 203) = a3;
  *((_QWORD *)this + 202) = &off_24ED8BBB8;
  *((_QWORD *)this + 207) = this;
  *((_QWORD *)this + 209) = a3;
  v12 = 0;
  physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::resize((uint64_t)v6, 0x400u, &v12);
  if (a2)
    v10 = -1;
  else
    v10 = 1000;
  *((_DWORD *)this + 416) = v10;
  return this;
}

uint64_t physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

void physx::IG::SimpleIslandManager::~SimpleIslandManager(physx::IG::SimpleIslandManager *this)
{
  unint64_t v2;
  unint64_t i;
  int v4;
  unint64_t v5;
  unint64_t j;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t k;
  int v13;
  int v14;
  int v15;
  int v16;

  *((_QWORD *)this + 202) = off_24ED8BB00;
  *((_QWORD *)this + 204) = 0;
  *((_QWORD *)this + 195) = off_24ED8BB00;
  *((_QWORD *)this + 197) = 0;
  *((_QWORD *)this + 188) = off_24ED8BB00;
  *((_QWORD *)this + 190) = 0;
  physx::IG::IslandSim::~IslandSim((physx::IG::SimpleIslandManager *)((char *)this + 864));
  physx::IG::IslandSim::~IslandSim((physx::IG::SimpleIslandManager *)((char *)this + 224));
  if (*((_QWORD *)this + 26) && (*((_DWORD *)this + 54) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 26) = 0;
  v2 = *((unsigned int *)this + 46);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 22) + 8 * i))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v2 = *((unsigned int *)this + 46);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 176);
  v4 = *((_DWORD *)this + 47);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 22))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v5 = *((unsigned int *)this + 38);
  if ((_DWORD)v5)
  {
    for (j = 0; j < v5; ++j)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 18) + 8 * j))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v5 = *((unsigned int *)this + 38);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 144);
  v7 = *((_DWORD *)this + 39);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 18))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 35);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 16))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 31);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 14))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 27);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 12))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((unsigned int *)this + 18);
  if ((_DWORD)v11)
  {
    for (k = 0; k < v11; ++k)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 8) + 8 * k))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v11 = *((unsigned int *)this + 18);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 64);
  v13 = *((_DWORD *)this + 19);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 8))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v14 = *((_DWORD *)this + 15);
  if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v15 = *((_DWORD *)this + 9);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v16 = *((_DWORD *)this + 3);
  if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0)
  {
    if (*(_QWORD *)this)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

void physx::IG::PostThirdPassTask::~PostThirdPassTask(physx::IG::PostThirdPassTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

void physx::IG::ThirdPassTask::~ThirdPassTask(physx::IG::ThirdPassTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

unint64_t physx::IG::SimpleIslandManager::addRigidBody(physx::IG::SimpleIslandManager *this, physx::PxsRigidBody *a2, int a3, int a4)
{
  int v8;
  int v9;
  int v10;
  unint64_t v11;

  v8 = *((_DWORD *)this + 2);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = *(_DWORD *)(*(_QWORD *)this + 4 * (v8 - 1));
    *((_DWORD *)this + 2) = v9;
  }
  else
  {
    v10 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v10 + 1;
  }
  v11 = (v10 << 7);
  physx::IG::IslandSim::addNode((uint64_t)this + 224, a4, a3, 0, v10 << 7);
  *(_QWORD *)(*((_QWORD *)this + 31) + (v11 >> 2) + 24) = a2;
  physx::IG::IslandSim::addNode((uint64_t)this + 864, a4, a3, 0, v11);
  *(_QWORD *)(*((_QWORD *)this + 111) + (v11 >> 2) + 24) = a2;
  return v11;
}

uint64_t physx::IG::SimpleIslandManager::removeNode(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;

  v3 = a2;
  v2 = *(unsigned int *)(result + 56);
  if ((*(_DWORD *)(result + 60) & 0x7FFFFFFFu) <= v2)
    return physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(result + 48, &v3);
  *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * v2) = a2;
  ++*(_DWORD *)(result + 56);
  return result;
}

unint64_t physx::IG::SimpleIslandManager::addArticulation(physx::IG::SimpleIslandManager *this, physx::Sc::ArticulationSim *a2, physx::Dy::ArticulationV *a3, int a4)
{
  int v7;
  int v8;
  int v9;
  unint64_t v10;

  v7 = *((_DWORD *)this + 2);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = *(_DWORD *)(*(_QWORD *)this + 4 * (v7 - 1));
    *((_DWORD *)this + 2) = v8;
  }
  else
  {
    v9 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v9 + 1;
  }
  v10 = (v9 << 7);
  physx::IG::IslandSim::addNode((uint64_t)this + 224, a4, 0, 1, v9 << 7);
  *(_QWORD *)(*((_QWORD *)this + 31) + (v10 >> 2) + 24) = a3;
  physx::IG::IslandSim::addNode((uint64_t)this + 864, a4, 0, 1, v10);
  *(_QWORD *)(*((_QWORD *)this + 111) + (v10 >> 2) + 24) = a3;
  return v10;
}

uint64_t physx::IG::SimpleIslandManager::addContactManager(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;

  v7 = a3;
  v10 = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * v11);
    *(_DWORD *)(a1 + 32) = v11;
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12 + 1;
  }
  v13 = 2 * v12;
  if (*(_DWORD *)(a1 + 160) == 2 * (_DWORD)v12)
  {
    physx::Cm::BlockArray<physx::IG::NodeIndex>::resize((_DWORD *)(a1 + 144), v13 + 2048);
    physx::Cm::BlockArray<void *>::resize((_DWORD *)(a1 + 176), v13 + 2048);
    physx::Cm::BlockArray<physx::Sc::Interaction *>::resize((_DWORD *)(a1 + 64), v13 + 2048);
  }
  v14 = *(_QWORD *)(a1 + 144);
  *(_DWORD *)(*(_QWORD *)(v14 + 8 * (v13 / *(_DWORD *)(a1 + 168))) + 4 * (v13 % *(_DWORD *)(a1 + 168))) = v7;
  *(_DWORD *)(*(_QWORD *)(v14 + 8 * ((v13 | 1) / *(_DWORD *)(a1 + 168))) + 4 * ((v13 | 1) % *(_DWORD *)(a1 + 168))) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * (v12 / *(_DWORD *)(a1 + 200)))
            + 8 * (v12 % *(_DWORD *)(a1 + 200))) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * (v12 / *(_DWORD *)(a1 + 88)))
            + 8 * (v12 % *(_DWORD *)(a1 + 88))) = a5;
  physx::IG::IslandSim::addConnection(a1 + 864, a2, a3, 0, v12);
  if (a2)
    *(_DWORD *)(a2 + 104) = v12;
  if ((_DWORD)v12 == 32 * *(_DWORD *)(a1 + 216))
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 208, v13 + 2);
  if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFF) == (_DWORD)v12)
  {
    v16 = 0;
    physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::resize(a1 + 112, v13 + 2, &v16);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * (v12 >> 5)) &= ~(1 << v12);
  return v12;
}

_DWORD *physx::Cm::BlockArray<physx::IG::NodeIndex>::resize(_DWORD *result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;

  v3 = (uint64_t)result;
  v4 = result[5];
  if (v4 < a2)
  {
    v5 = result[6];
    v6 = (a2 + v5 - 1) / v5;
    v7 = result[2];
    v8 = v6 - v7;
    result[5] = v4 + (v6 - v7) * v5;
    if (v6 != v7)
    {
      do
      {
        v9 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v9)
          result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        else
          result = 0;
        v13 = result;
        v10 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v10)
        {
          result = (_DWORD *)physx::shdfnd::Array<physx::IG::NodeIndex *,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex *>>::growAndPushBack(v3, &v13);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v10) = result;
          *(_DWORD *)(v3 + 8) = v10 + 1;
        }
        --v8;
      }
      while (v8);
    }
  }
  v11 = *(_DWORD *)(v3 + 16);
  if (v11 < a2)
  {
    v12 = *(_QWORD *)v3;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v12 + 8 * (v11 / *(_DWORD *)(v3 + 24))) + 4 * (v11 % *(_DWORD *)(v3 + 24))) = -128;
      ++v11;
    }
    while (a2 != v11);
  }
  *(_DWORD *)(v3 + 16) = a2;
  return result;
}

_DWORD *physx::Cm::BlockArray<void *>::resize(_DWORD *result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  v3 = (uint64_t)result;
  v4 = result[5];
  if (v4 < a2)
  {
    v5 = result[6];
    v6 = (a2 + v5 - 1) / v5;
    v7 = result[2];
    v8 = v6 - v7;
    result[5] = v4 + (v6 - v7) * v5;
    if (v6 != v7)
    {
      do
      {
        v9 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v9)
          result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        else
          result = 0;
        v13 = result;
        v10 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v10)
        {
          result = (_DWORD *)physx::shdfnd::Array<void **,physx::shdfnd::ReflectionAllocator<void **>>::growAndPushBack(v3, &v13);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v10) = result;
          *(_DWORD *)(v3 + 8) = v10 + 1;
        }
        --v8;
      }
      while (v8);
    }
  }
  v11 = *(_DWORD *)(v3 + 16);
  if (v11 < a2)
  {
    v12 = *(_DWORD *)(v3 + 24);
    do
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8 * (v11 / v12)) + 8 * (v11 % v12)) = 0;
      ++v11;
    }
    while (a2 != v11);
  }
  *(_DWORD *)(v3 + 16) = a2;
  return result;
}

_DWORD *physx::Cm::BlockArray<physx::Sc::Interaction *>::resize(_DWORD *result, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  v3 = (uint64_t)result;
  v4 = result[5];
  if (v4 < a2)
  {
    v5 = result[6];
    v6 = (a2 + v5 - 1) / v5;
    v7 = result[2];
    v8 = v6 - v7;
    result[5] = v4 + (v6 - v7) * v5;
    if (v6 != v7)
    {
      do
      {
        v9 = *(unsigned int *)(v3 + 24);
        if ((_DWORD)v9)
          result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBlockArray.h", 84);
        else
          result = 0;
        v13 = result;
        v10 = *(unsigned int *)(v3 + 8);
        if ((*(_DWORD *)(v3 + 12) & 0x7FFFFFFFu) <= v10)
        {
          result = (_DWORD *)physx::shdfnd::Array<physx::Sc::Interaction **,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction **>>::growAndPushBack(v3, &v13);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v3 + 8 * v10) = result;
          *(_DWORD *)(v3 + 8) = v10 + 1;
        }
        --v8;
      }
      while (v8);
    }
  }
  v11 = *(_DWORD *)(v3 + 16);
  if (v11 < a2)
  {
    v12 = *(_DWORD *)(v3 + 24);
    do
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8 * (v11 / v12)) + 8 * (v11 % v12)) = 0;
      ++v11;
    }
    while (a2 != v11);
  }
  *(_DWORD *)(v3 + 16) = a2;
  return result;
}

uint64_t physx::IG::SimpleIslandManager::addConstraint(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;

  v7 = a3;
  v10 = *(_DWORD *)(a1 + 32);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * v11);
    *(_DWORD *)(a1 + 32) = v11;
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12 + 1;
  }
  v13 = 2 * v12;
  if (*(_DWORD *)(a1 + 160) == 2 * (_DWORD)v12)
  {
    physx::Cm::BlockArray<physx::IG::NodeIndex>::resize((_DWORD *)(a1 + 144), 4 * v12 + 4);
    physx::Cm::BlockArray<void *>::resize((_DWORD *)(a1 + 176), v13 + 2);
    physx::Cm::BlockArray<physx::Sc::Interaction *>::resize((_DWORD *)(a1 + 64), v13 + 2);
  }
  v14 = *(_QWORD *)(a1 + 144);
  *(_DWORD *)(*(_QWORD *)(v14 + 8 * (v13 / *(_DWORD *)(a1 + 168))) + 4 * (v13 % *(_DWORD *)(a1 + 168))) = v7;
  *(_DWORD *)(*(_QWORD *)(v14 + 8 * ((v13 | 1) / *(_DWORD *)(a1 + 168))) + 4 * ((v13 | 1) % *(_DWORD *)(a1 + 168))) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * (v12 / *(_DWORD *)(a1 + 200)))
            + 8 * (v12 % *(_DWORD *)(a1 + 200))) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * (v12 / *(_DWORD *)(a1 + 88)))
            + 8 * (v12 % *(_DWORD *)(a1 + 88))) = a5;
  physx::IG::IslandSim::addConnection(a1 + 224, a2, a3, 1u, v12);
  physx::IG::IslandSim::addConnection(a1 + 864, v15, v16, 1u, v12);
  v17 = *(_DWORD *)(a1 + 216);
  if ((_DWORD)v12 == 32 * v17)
    physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend(a1 + 208, (v17 << 6) | 2);
  if ((*(_DWORD *)(a1 + 124) & 0x7FFFFFFF) == (_DWORD)v12)
  {
    v19 = 0;
    physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::resize(a1 + 112, v13 + 2, &v19);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 208) + 4 * (v12 >> 5)) |= 1 << v12;
  return v12;
}

uint64_t physx::IG::SimpleIslandManager::deactivateNode(uint64_t a1, unsigned int a2)
{
  physx::IG::IslandSim::deactivateNode(a1 + 224, a2);
  return physx::IG::IslandSim::deactivateNode(a1 + 864, a2);
}

uint64_t physx::IG::SimpleIslandManager::putNodeToSleep(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  if ((~a2 & 0xFFFFFF80) != 0)
  {
    v2 = result;
    physx::IG::IslandSim::deactivateNode(result + 224, a2);
    return physx::IG::IslandSim::deactivateNode(v2 + 864, a2);
  }
  return result;
}

uint64_t physx::IG::SimpleIslandManager::removeConnection(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v5 = a2;
  if (a2 != -1)
  {
    v2 = this;
    v3 = *(unsigned int *)(this + 104);
    if ((*(_DWORD *)(this + 108) & 0x7FFFFFFFu) <= v3)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(this + 96, &v5);
      a2 = v5;
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)(this + 96) + 4 * v3) = a2;
      ++*(_DWORD *)(this + 104);
    }
    this = physx::IG::IslandSim::removeConnection(v2 + 864, a2);
    v4 = v5;
    if (((*(_DWORD *)(*(_QWORD *)(v2 + 208) + (((unint64_t)v5 >> 3) & 0x1FFFFFFC)) >> v5) & 1) != 0)
    {
      this = physx::IG::IslandSim::removeConnection(v2 + 224, v5);
      *(_DWORD *)(*(_QWORD *)(v2 + 208) + (((unint64_t)v5 >> 3) & 0x1FFFFFFC)) &= ~(1 << v5);
      v4 = v5;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 176) + 8 * (v4 / *(_DWORD *)(v2 + 200)))
              + 8 * (v4 % *(_DWORD *)(v2 + 200))) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 8 * (v4 / *(_DWORD *)(v2 + 88))) + 8
                                                                                      * (v4 % *(_DWORD *)(v2 + 88))) = 0;
  }
  return this;
}

void physx::IG::SimpleIslandManager::firstPassIslandGen(physx::IG::SimpleIslandManager *this)
{
  physx::IG::IslandSim *v2;

  *((_DWORD *)this + 304) = 0;
  v2 = (physx::IG::SimpleIslandManager *)((char *)this + 864);
  *((_DWORD *)this + 308) = 0;
  *((_DWORD *)this + 360) = 0;
  *((_DWORD *)this + 364) = 0;
  physx::IG::IslandSim::wakeIslands((_DWORD *)this + 216);
  physx::IG::IslandSim::processNewEdges(v2);
  physx::IG::IslandSim::removeDestroyedEdges(v2);
  physx::IG::IslandSim::processLostEdges((uint64_t)v2, (uint64_t)this + 48, 0, 0);
}

void physx::IG::SimpleIslandManager::secondPassIslandGen(physx::IG::SimpleIslandManager *this)
{
  physx::IG::IslandSim *v2;
  unint64_t v3;

  v2 = (physx::IG::SimpleIslandManager *)((char *)this + 224);
  physx::IG::IslandSim::wakeIslands((_DWORD *)this + 56);
  physx::IG::IslandSim::processNewEdges(v2);
  physx::IG::IslandSim::removeDestroyedEdges(v2);
  physx::IG::IslandSim::processLostEdges((uint64_t)v2, (uint64_t)this + 48, 0, 0);
  if (*((_DWORD *)this + 14))
  {
    v3 = 0;
    do
      physx::IG::HandleManager<unsigned int>::freeHandle((uint64_t)this, *(_DWORD *)(*((_QWORD *)this + 6) + 4 * v3++) >> 7);
    while (v3 < *((unsigned int *)this + 14));
  }
  *((_DWORD *)this + 14) = 0;
}

void physx::IG::ThirdPassTask::runInternal(physx::IG::IslandSim **this)
{
  physx::IG::IslandSim::removeDestroyedEdges(this[6]);
  physx::IG::IslandSim::processLostEdges((uint64_t)this[6], (uint64_t)this[5] + 48, 1, 1);
}

uint64_t physx::IG::PostThirdPassTask::runInternal(physx::IG::PostThirdPassTask *this)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  result = *((_QWORD *)this + 5);
  if (*(_DWORD *)(result + 56))
  {
    v3 = 0;
    do
    {
      physx::IG::HandleManager<unsigned int>::freeHandle(result, *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * v3++) >> 7);
      result = *((_QWORD *)this + 5);
    }
    while (v3 < *(unsigned int *)(result + 56));
  }
  *(_DWORD *)(result + 56) = 0;
  if (*(_DWORD *)(result + 104))
  {
    v4 = 0;
    do
    {
      physx::IG::HandleManager<unsigned int>::freeHandle(result + 24, *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v4++));
      result = *((_QWORD *)this + 5);
    }
    while (v4 < *(unsigned int *)(result + 104));
  }
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t physx::IG::SimpleIslandManager::thirdPassIslandGen(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 1648) = 1;
  *(_QWORD *)(a1 + 1640) = a2;
  if (a2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    *(_QWORD *)(a1 + 1632) = *(_QWORD *)(*(_QWORD *)(a1 + 1640) + 16);
  }
  *(_DWORD *)(a1 + 1536) = 1;
  *(_QWORD *)(a1 + 1528) = a1 + 1616;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 1616) + 32))(a1 + 1616);
  *(_QWORD *)(a1 + 1520) = *(_QWORD *)(*(_QWORD *)(a1 + 1528) + 16);
  *(_DWORD *)(a1 + 1592) = 1;
  *(_QWORD *)(a1 + 1584) = a1 + 1616;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 1616) + 32))(a1 + 1616);
  *(_QWORD *)(a1 + 1576) = *(_QWORD *)(*(_QWORD *)(a1 + 1584) + 16);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1520) + 144))(*(_QWORD *)(a1 + 1520), a1 + 1504);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1576) + 144))(*(_QWORD *)(a1 + 1576), a1 + 1560);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1632) + 144))(*(_QWORD *)(a1 + 1632), a1 + 1616);
}

_QWORD *physx::IG::SimpleIslandManager::setEdgeConnected(_QWORD *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;

  v3 = a2 >> 5;
  v4 = 1 << a2;
  if ((*(_DWORD *)(this[26] + 4 * v3) & (1 << a2)) == 0)
  {
    v5 = this;
    this = physx::IG::IslandSim::addConnection((uint64_t)(this + 28), a2, a3, 0, a2);
    *(_DWORD *)(v5[26] + 4 * v3) |= v4;
  }
  return this;
}

uint64_t physx::IG::SimpleIslandManager::deactivateEdge(uint64_t this, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)(*(_QWORD *)(this + 112) + 8 * a2);
  if (*v3)
  {
    v4 = this;
    v5 = a2;
    v6 = *(unsigned int *)(this + 136);
    if ((*(_DWORD *)(this + 140) & 0x7FFFFFFFu) <= v6)
    {
      this = physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::growAndPushBack(this + 128, v3);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(this + 128) + 8 * v6) = *v3;
      *(_DWORD *)(this + 136) = v6 + 1;
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 112) + 8 * v5) = 0;
  }
  return this;
}

uint64_t physx::IG::SimpleIslandManager::setEdgeDisconnected(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = a2 >> 5;
  v3 = 1 << a2;
  if ((*(_DWORD *)(*(_QWORD *)(this + 208) + 4 * v2) & (1 << a2)) != 0)
  {
    v4 = this;
    this = physx::IG::IslandSim::removeConnection(this + 224, a2);
    *(_DWORD *)(*(_QWORD *)(v4 + 208) + 4 * v2) &= ~v3;
  }
  return this;
}

uint64_t physx::IG::SimpleIslandManager::clearEdgeRigidCM(uint64_t this, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 176) + 8 * (a2 / *(_DWORD *)(this + 200)))
            + 8 * (a2 % *(_DWORD *)(this + 200))) = 0;
  v3 = (_QWORD *)(*(_QWORD *)(this + 112) + 8 * a2);
  if (*v3)
  {
    v4 = this;
    v5 = a2;
    v6 = *(unsigned int *)(this + 136);
    if ((*(_DWORD *)(this + 140) & 0x7FFFFFFFu) <= v6)
    {
      this = physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::growAndPushBack(this + 128, v3);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(this + 128) + 8 * v6) = *v3;
      *(_DWORD *)(this + 136) = v6 + 1;
    }
    *(_QWORD *)(*(_QWORD *)(v4 + 112) + 8 * v5) = 0;
  }
  return this;
}

void physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext(physx::PxsNphaseImplementationContext *this)
{
  physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext(this);
  JUMPOUT(0x2276933B8);
}

{
  int v2;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  *(_QWORD *)this = &off_24ED8BC10;
  *((_QWORD *)this + 2) = &unk_24ED8BD38;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this + 21);
  v2 = *((_DWORD *)this + 37);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 17) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 33);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 15) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((_DWORD *)this + 29);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 13))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v7 = *((_DWORD *)this + 23);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 10))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 19);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 8))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 15);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 9);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 3))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::PxsNphaseImplementationContext::getGPUContactManagerOutputBase(physx::PxsNphaseImplementationContext *this)
{
  return 0;
}

uint64_t physx::PxsNphaseImplementationContext::setContactModifyCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 152) = a2;
  return result;
}

uint64_t physx::PxsNphaseImplementationContext::lock(uint64_t this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_lock(*(pthread_mutex_t **)(this + 168));
  return this;
}

uint64_t physx::PxsNphaseImplementationContext::unlock(uint64_t this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(this + 168));
  return this;
}

void `non-virtual thunk to'physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext(physx::PxsNphaseImplementationContext *this)
{
  physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext((physx::PxsNphaseImplementationContext *)((char *)this - 16));
}

{
  physx::PxsNphaseImplementationContext::~PxsNphaseImplementationContext((physx::PxsNphaseImplementationContext *)((char *)this - 16));
  JUMPOUT(0x2276933B8);
}

uint64_t `non-virtual thunk to'physx::PxsNphaseImplementationContext::setContactModifyCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 136) = a2;
  return result;
}

uint64_t `non-virtual thunk to'physx::PxsNphaseImplementationContext::lock(uint64_t this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_lock(*(pthread_mutex_t **)(this + 152));
  return this;
}

uint64_t `non-virtual thunk to'physx::PxsNphaseImplementationContext::unlock(uint64_t this)
{
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(this + 152));
  return this;
}

const char *physx::IG::ThirdPassTask::getName(physx::IG::ThirdPassTask *this)
{
  return "ThirdPassIslandGenTask";
}

const char *physx::IG::PostThirdPassTask::getName(physx::IG::PostThirdPassTask *this)
{
  return "PostThirdPassTask";
}

void PxsCMDiscreteUpdateTask::~PxsCMDiscreteUpdateTask(PxsCMDiscreteUpdateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *PxsCMDiscreteUpdateTask::getName(PxsCMDiscreteUpdateTask *this)
{
  return "PxsContext.contactManagerDiscreteUpdate";
}

uint64_t PxsCMDiscreteUpdateTask::runInternal(PxsCMDiscreteUpdateTask *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 9);
  v3 = (uint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(v2 + 440));
  if (!v3)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxcNpThreadContext>::getName() [T = physx::PxcNpThreadContext]";
    else
      v5 = "<allocation names disabled>";
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24) + 16))(v4 + 24, 7335, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v6)
    {
      v3 = (v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v3 - 8) = v3 - v6;
    }
    else
    {
      v3 = 0;
    }
    physx::PxcNpThreadContext::PxcNpThreadContext(v3, *(_QWORD *)(v2 + 448));
  }
  *(_DWORD *)(v3 + 7200) = *((_DWORD *)this + 17);
  v7 = *((_QWORD *)this + 9);
  v8 = *(unsigned __int8 *)(v7 + 2584);
  *(_BYTE *)(v3 + 7184) = v8;
  *(_BYTE *)(v3 + 7187) = *(_BYTE *)(v7 + 2586);
  *(_BYTE *)(v3 + 7185) = *(_BYTE *)(v7 + 2585);
  *(_QWORD *)(v3 + 7168) = *(_QWORD *)(v7 + 2592);
  *(_QWORD *)(v3 + 7176) = *(_QWORD *)(*(_QWORD *)(v7 + 2600) + 8);
  if (v8)
    PxsCMDiscreteUpdateTask::processCms<&(physx::PxcDiscreteNarrowPhasePCM(physx::PxcNpThreadContext &,physx::PxcNpWorkUnit const&,physx::Gu::Cache &,physx::PxsContactManagerOutput &))>((uint64_t)this, v3);
  else
    PxsCMDiscreteUpdateTask::processCms<&(physx::PxcDiscreteNarrowPhase(physx::PxcNpThreadContext &,physx::PxcNpWorkUnit const&,physx::Gu::Cache &,physx::PxsContactManagerOutput &))>((uint64_t)this, v3);
  v9 = *(_QWORD *)(*((_QWORD *)this + 9) + 440);
  pthread_mutex_lock((pthread_mutex_t *)(v9 + 8));
  *(_QWORD *)v3 = *(_QWORD *)v9;
  *(_QWORD *)v9 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
}

void PxsCMDiscreteUpdateTask::processCms<&(physx::PxcDiscreteNarrowPhasePCM(physx::PxcNpThreadContext &,physx::PxcNpWorkUnit const&,physx::Gu::Cache &,physx::PxsContactManagerOutput &))>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  PxsCMDiscreteUpdateTask *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v19;
  uint64_t v22;
  uint64_t v27;
  uint64_t v32;
  unsigned __int8 *v33;
  char v34;
  unsigned __int8 v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  PxsCMDiscreteUpdateTask *v68;
  uint64_t v69;
  _BYTE v70[20];
  unsigned int v71;
  unsigned int v72[2];
  uint64_t v73;

  v2 = a2;
  v73 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a1 + 64);
  v68 = (PxsCMDiscreteUpdateTask *)a1;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v72 = 0;
  v5 = *(_DWORD *)(a2 + 7212);
  v71 = v5;
  v6 = (4 * v3);
  if (v6 >= 0x401)
  {
    v64 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v70, (4 * v3), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsNphaseImplementationContext.cpp", 407);
    if ((_DWORD)v3)
      goto LABEL_3;
LABEL_37:
    v55 = 0;
    v54 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_39;
  }
  MEMORY[0x24BDAC7A8](a1);
  v64 = (uint64_t *)((char *)&v56 - ((v6 + 15) & 0x1FFFFFFF0));
  bzero(v64, (4 * v3));
  if (!(_DWORD)v3)
    goto LABEL_37;
LABEL_3:
  v66 = 0;
  v67 = v5;
  v57 = (4 * v3);
  v58 = v4;
  v7 = 0;
  v8 = 0;
  v61 = 0;
  v62 = 0;
  v9 = 0;
  v63 = 0;
  v60 = (_QWORD *)(v2 + 7264);
  v59 = (uint64_t *)(v2 + 7280);
  v10 = v3 - 1;
  v69 = 32 * v3;
  v65 = v2;
  v11 = v68;
  do
  {
    if ((int)v9 + 1 < v10)
      v12 = v9 + 1;
    else
      v12 = v10;
    if ((int)v9 + 2 >= v10)
      v13 = v10;
    else
      v13 = (v9 + 2);
    _X8 = *(_QWORD *)(v4 + 8 * v13);
    __asm { PRFM            #0, [X8] }
    v19 = *((_QWORD *)v11 + 6);
    _X10 = v19 + 32 * v13;
    __asm { PRFM            #0, [X10] }
    v22 = *(_QWORD *)(v4 + 8 * v12);
    _X10 = *(_QWORD *)(v22 + 48);
    __asm { PRFM            #0, [X10] }
    _X10 = *(_QWORD *)(v22 + 56);
    __asm { PRFM            #0, [X10] }
    v27 = *(_QWORD *)(*(_QWORD *)(v2 + 7168) + 8);
    _X11 = v27 + 32 * *(unsigned int *)(v22 + 96);
    __asm { PRFM            #0, [X11] }
    _X9 = v27 + 32 * *(unsigned int *)(v22 + 100);
    __asm { PRFM            #0, [X9] }
    v32 = *(_QWORD *)(v4 + 8 * v9);
    if (v32)
    {
      v33 = (unsigned __int8 *)(v19 + v7);
      *(_BYTE *)(v19 + v7 + 27) = *(_BYTE *)(v19 + v7 + 25);
      v34 = *(_BYTE *)(v19 + v7 + 26);
      physx::PxcDiscreteNarrowPhasePCM(v2, v32 + 32, *((_QWORD *)v11 + 7) + v8, v19 + v7);
      v35 = v33[26];
      v36 = v33[25];
      if (v33[25] && (*(_WORD *)(v32 + 80) & 0x80) != 0)
      {
        v37 = v66;
        *((_DWORD *)v64 + v66) = v9;
        v66 = v37 + 1;
      }
      else
      {
        v38 = v67;
        if (v67 <= v36)
          v38 = v33[25];
        v67 = v38;
        if (v33[27] != v36)
        {
          v39 = *(unsigned int *)(*(_QWORD *)(v4 + 8 * v9) + 88);
          v40 = v59;
          physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v59, v39 + 1);
          v41 = 1 << v39;
          v42 = *v40;
          v4 = v58;
          v43 = v39 >> 3;
          v2 = v65;
          *(_DWORD *)(v42 + (v43 & 0x1FFFFFFC)) |= v41;
          _CF = v33[27] >= v33[25];
          v45 = v61;
          v46 = v62;
          if (v33[27] < v33[25])
            v47 = v61 + 1;
          else
            v47 = HIDWORD(v62);
          v48 = HIDWORD(v61);
          if (v33[27] >= v33[25])
            v46 = HIDWORD(v61) + 1;
          v62 = __PAIR64__(v47, v46);
          if (_CF)
            v48 = HIDWORD(v61) + 1;
          else
            v45 = v61 + 1;
          v61 = __PAIR64__(v48, v45);
        }
      }
      v49 = v35 & 2;
      if (v49 == (v34 & 2))
      {
        v11 = v68;
        if ((v34 & 3) == 0)
          *(_BYTE *)(v32 + 83) = *(_BYTE *)(v32 + 83) & 0x40 | v33[26];
      }
      else
      {
        *(_BYTE *)(v32 + 83) = *(_BYTE *)(v32 + 83) & 0x40 | v33[26];
        v50 = *(unsigned int *)(*(_QWORD *)(v4 + 8 * v9) + 88);
        v51 = v60;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v60, v50 + 1);
        *(_DWORD *)(*v51 + ((v50 >> 3) & 0x1FFFFFFC)) |= 1 << v50;
        if (v49)
          LODWORD(v63) = v63 + 1;
        else
          ++HIDWORD(v63);
        v2 = v65;
        v11 = v68;
      }
    }
    v8 += 16;
    v7 += 32;
    ++v9;
  }
  while (v69 != v7);
  v5 = v67;
  v72[1] = v62;
  v71 = v67;
  v72[0] = HIDWORD(v62);
  LODWORD(v6) = v57;
  if (v66)
  {
    PxsCMDiscreteUpdateTask::runModifiableContactManagers(v11, (unsigned int *)v64, v66, (physx::PxcNpThreadContext *)v2, v72, &v72[1], &v71);
    v53 = v72[0];
    v52 = v72[1];
    v5 = v71;
    v55 = v63;
    v54 = HIDWORD(v63);
  }
  else
  {
    v55 = v63;
    v54 = HIDWORD(v63);
    v53 = v61;
    v52 = HIDWORD(v61);
  }
LABEL_39:
  *(_DWORD *)(v2 + 7296) += v55;
  *(_DWORD *)(v2 + 7300) += v54;
  *(_DWORD *)(v2 + 7304) += v53;
  *(_DWORD *)(v2 + 7308) += v52;
  *(_DWORD *)(v2 + 7212) = v5;
  if (v6 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v70, (char *)v64);
}

void PxsCMDiscreteUpdateTask::processCms<&(physx::PxcDiscreteNarrowPhase(physx::PxcNpThreadContext &,physx::PxcNpWorkUnit const&,physx::Gu::Cache &,physx::PxsContactManagerOutput &))>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  PxsCMDiscreteUpdateTask *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v19;
  uint64_t v22;
  uint64_t v27;
  uint64_t v32;
  unsigned __int8 *v33;
  char v34;
  unsigned __int8 v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  PxsCMDiscreteUpdateTask *v68;
  uint64_t v69;
  _BYTE v70[20];
  unsigned int v71;
  unsigned int v72[2];
  uint64_t v73;

  v2 = a2;
  v73 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a1 + 64);
  v68 = (PxsCMDiscreteUpdateTask *)a1;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v72 = 0;
  v5 = *(_DWORD *)(a2 + 7212);
  v71 = v5;
  v6 = (4 * v3);
  if (v6 >= 0x401)
  {
    v64 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v70, (4 * v3), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsNphaseImplementationContext.cpp", 407);
    if ((_DWORD)v3)
      goto LABEL_3;
LABEL_37:
    v55 = 0;
    v54 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_39;
  }
  MEMORY[0x24BDAC7A8](a1);
  v64 = (uint64_t *)((char *)&v56 - ((v6 + 15) & 0x1FFFFFFF0));
  bzero(v64, (4 * v3));
  if (!(_DWORD)v3)
    goto LABEL_37;
LABEL_3:
  v66 = 0;
  v67 = v5;
  v57 = (4 * v3);
  v58 = v4;
  v7 = 0;
  v8 = 0;
  v61 = 0;
  v62 = 0;
  v9 = 0;
  v63 = 0;
  v60 = (_QWORD *)(v2 + 7264);
  v59 = (uint64_t *)(v2 + 7280);
  v10 = v3 - 1;
  v69 = 32 * v3;
  v65 = v2;
  v11 = v68;
  do
  {
    if ((int)v9 + 1 < v10)
      v12 = v9 + 1;
    else
      v12 = v10;
    if ((int)v9 + 2 >= v10)
      v13 = v10;
    else
      v13 = (v9 + 2);
    _X8 = *(_QWORD *)(v4 + 8 * v13);
    __asm { PRFM            #0, [X8] }
    v19 = *((_QWORD *)v11 + 6);
    _X10 = v19 + 32 * v13;
    __asm { PRFM            #0, [X10] }
    v22 = *(_QWORD *)(v4 + 8 * v12);
    _X10 = *(_QWORD *)(v22 + 48);
    __asm { PRFM            #0, [X10] }
    _X10 = *(_QWORD *)(v22 + 56);
    __asm { PRFM            #0, [X10] }
    v27 = *(_QWORD *)(*(_QWORD *)(v2 + 7168) + 8);
    _X11 = v27 + 32 * *(unsigned int *)(v22 + 96);
    __asm { PRFM            #0, [X11] }
    _X9 = v27 + 32 * *(unsigned int *)(v22 + 100);
    __asm { PRFM            #0, [X9] }
    v32 = *(_QWORD *)(v4 + 8 * v9);
    if (v32)
    {
      v33 = (unsigned __int8 *)(v19 + v7);
      *(_BYTE *)(v19 + v7 + 27) = *(_BYTE *)(v19 + v7 + 25);
      v34 = *(_BYTE *)(v19 + v7 + 26);
      physx::PxcDiscreteNarrowPhase(v2, v32 + 32, *((_QWORD *)v11 + 7) + v8, v19 + v7);
      v35 = v33[26];
      v36 = v33[25];
      if (v33[25] && (*(_WORD *)(v32 + 80) & 0x80) != 0)
      {
        v37 = v66;
        *((_DWORD *)v64 + v66) = v9;
        v66 = v37 + 1;
      }
      else
      {
        v38 = v67;
        if (v67 <= v36)
          v38 = v33[25];
        v67 = v38;
        if (v33[27] != v36)
        {
          v39 = *(unsigned int *)(*(_QWORD *)(v4 + 8 * v9) + 88);
          v40 = v59;
          physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v59, v39 + 1);
          v41 = 1 << v39;
          v42 = *v40;
          v4 = v58;
          v43 = v39 >> 3;
          v2 = v65;
          *(_DWORD *)(v42 + (v43 & 0x1FFFFFFC)) |= v41;
          _CF = v33[27] >= v33[25];
          v45 = v61;
          v46 = v62;
          if (v33[27] < v33[25])
            v47 = v61 + 1;
          else
            v47 = HIDWORD(v62);
          v48 = HIDWORD(v61);
          if (v33[27] >= v33[25])
            v46 = HIDWORD(v61) + 1;
          v62 = __PAIR64__(v47, v46);
          if (_CF)
            v48 = HIDWORD(v61) + 1;
          else
            v45 = v61 + 1;
          v61 = __PAIR64__(v48, v45);
        }
      }
      v49 = v35 & 2;
      if (v49 == (v34 & 2))
      {
        v11 = v68;
        if ((v34 & 3) == 0)
          *(_BYTE *)(v32 + 83) = *(_BYTE *)(v32 + 83) & 0x40 | v33[26];
      }
      else
      {
        *(_BYTE *)(v32 + 83) = *(_BYTE *)(v32 + 83) & 0x40 | v33[26];
        v50 = *(unsigned int *)(*(_QWORD *)(v4 + 8 * v9) + 88);
        v51 = v60;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v60, v50 + 1);
        *(_DWORD *)(*v51 + ((v50 >> 3) & 0x1FFFFFFC)) |= 1 << v50;
        if (v49)
          LODWORD(v63) = v63 + 1;
        else
          ++HIDWORD(v63);
        v2 = v65;
        v11 = v68;
      }
    }
    v8 += 16;
    v7 += 32;
    ++v9;
  }
  while (v69 != v7);
  v5 = v67;
  v72[1] = v62;
  v71 = v67;
  v72[0] = HIDWORD(v62);
  LODWORD(v6) = v57;
  if (v66)
  {
    PxsCMDiscreteUpdateTask::runModifiableContactManagers(v11, (unsigned int *)v64, v66, (physx::PxcNpThreadContext *)v2, v72, &v72[1], &v71);
    v53 = v72[0];
    v52 = v72[1];
    v5 = v71;
    v55 = v63;
    v54 = HIDWORD(v63);
  }
  else
  {
    v55 = v63;
    v54 = HIDWORD(v63);
    v53 = v61;
    v52 = HIDWORD(v61);
  }
LABEL_39:
  *(_DWORD *)(v2 + 7296) += v55;
  *(_DWORD *)(v2 + 7300) += v54;
  *(_DWORD *)(v2 + 7304) += v53;
  *(_DWORD *)(v2 + 7308) += v52;
  *(_DWORD *)(v2 + 7212) = v5;
  if (v6 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v70, (char *)v64);
}

void PxsCMDiscreteUpdateTask::runModifiableContactManagers(PxsCMDiscreteUpdateTask *this, unsigned int *a2, uint64_t a3, physx::PxcNpThreadContext *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  PxsCMDiscreteUpdateTask *v7;
  uint64_t v8;
  size_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  __int16 v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  float v29;
  float v30;
  float *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void **v38;
  uint64_t v39;
  const void **v40;
  const void **v41;
  unsigned int v42;
  _BYTE *v43;
  int v44;
  _WORD *v45;
  char *v46;
  unsigned int v47;
  unsigned __int8 i;
  _WORD *v49;
  _BYTE *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  float *v56;
  uint64_t v57;
  unsigned int v58;
  _WORD *v59;
  __int128 v60;
  _WORD *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  const void **v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  float *v71;
  float v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  const void **v78;
  uint64_t v79;
  int v80;
  int v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  signed int v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  const void **v93;
  unsigned int v94;
  signed int v95;
  uint64_t *v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  int v102;
  int v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v110;
  _QWORD *v111;
  void *v112;
  const void **v113;
  unsigned int v114;
  char v115;
  _BYTE *v116;
  uint64_t v117;
  _OWORD *v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 *v123;
  __int128 v124;
  unsigned int *v125;
  unsigned int *v126;
  unsigned int *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  const void **v131;
  unsigned int v132;
  PxsCMDiscreteUpdateTask *v133;
  _QWORD *v134;
  unsigned int v135;
  const void **v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int *v139;
  physx::PxcNpThreadContext *v140;
  _BYTE *v141;
  char v142;
  _BYTE v143[16];
  uint64_t v144;

  v139 = a2;
  v7 = this;
  v144 = *MEMORY[0x24BDAC8D0];
  v125 = a5;
  v132 = *a5;
  v126 = a6;
  v137 = *a6;
  v127 = a7;
  v135 = *a7;
  v140 = a4;
  v134 = (_QWORD *)((char *)a4 + 7280);
  v8 = *((_QWORD *)this + 10);
  v138 = a3;
  if (!v8)
    goto LABEL_33;
  v10 = (104 * a3);
  v143[8] = v10 > 0x400;
  if (v10 < 0x401)
  {
    MEMORY[0x24BDAC7A8](this);
    v11 = (unsigned int **)((char *)&v125 - ((v10 + 15) & 0x1FFFFFFF0));
    bzero(v11, v10);
  }
  else
  {
    v11 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v142, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/software/src/PxsNphaseImplementationContext.cpp", 144);
  }
  v12 = 0;
  v13 = *(_QWORD *)(*((_QWORD *)v7 + 9) + 2592);
  do
  {
    v14 = v139[v12];
    v15 = *((_QWORD *)v7 + 6) + 32 * v14;
    LODWORD(v16) = *(unsigned __int8 *)(v15 + 24);
    if (!*(_BYTE *)(v15 + 24))
      goto LABEL_30;
    v17 = *(_QWORD *)(*((_QWORD *)v7 + 5) + 8 * v14);
    v18 = &v11[13 * v12];
    v20 = &qword_25582F930;
    v19 = physx::gPxvOffsetTable;
    v18[2] = *(_QWORD *)(v17 + 48) + physx::gPxvOffsetTable;
    v18[3] = *(_QWORD *)(v17 + 56) + v19;
    v21 = *(_WORD *)(v17 + 80);
    if ((v21 & 0x20) != 0)
      v22 = (uint64_t *)&physx::gPxvOffsetTable + 1;
    else
      v22 = &qword_25582F930;
    *v18 = *(_QWORD *)(v17 + 32) + *v22;
    if ((v21 & 0x40) != 0)
      v20 = (uint64_t *)&physx::gPxvOffsetTable + 1;
    v18[1] = *(_QWORD *)(v17 + 40) + *v20;
    v23 = *(_QWORD *)(v13 + 8);
    v24 = v23 + 32 * *(unsigned int *)(v17 + 96);
    *((_OWORD *)v18 + 2) = *(_OWORD *)v24;
    *((_DWORD *)v18 + 12) = *(_DWORD *)(v24 + 16);
    *(_QWORD *)&v25 = *(_QWORD *)(v24 + 20);
    v26 = v23 + 32 * *(unsigned int *)(v17 + 100);
    *((_QWORD *)&v25 + 1) = *(_QWORD *)v26;
    *(_OWORD *)((char *)v18 + 52) = v25;
    *(_OWORD *)((char *)v18 + 68) = *(_OWORD *)(v26 + 8);
    *((_DWORD *)v18 + 21) = *(_DWORD *)(v26 + 24);
    v27 = *(_QWORD *)(v15 + 8);
    *((_DWORD *)v18 + 22) = v16;
    v18[12] = v27;
    v28 = *(_WORD *)(v17 + 80);
    if ((v28 & 0x20) != 0)
    {
      v29 = *(float *)(*(_QWORD *)(v17 + 32) + 128);
      if ((v28 & 0x40) == 0)
      {
LABEL_16:
        v30 = 3.4028e38;
        goto LABEL_17;
      }
    }
    else
    {
      v29 = 3.4028e38;
      if ((v28 & 0x40) == 0)
        goto LABEL_16;
    }
    v30 = *(float *)(*(_QWORD *)(v17 + 40) + 128);
LABEL_17:
    if (v29 >= v30)
      v29 = v30;
    if (v16 <= 1)
      v16 = 1;
    else
      v16 = v16;
    v31 = (float *)(v27 + 28);
    do
    {
      *v31 = v29;
      v31 += 16;
      --v16;
    }
    while (v16);
    v32 = *(unsigned __int8 *)(v17 + 86);
    v33 = *(unsigned __int8 *)(v17 + 87);
    if (v32 >= v33)
      v34 = v33;
    else
      v34 = v32;
    if (v32 > v33)
      v33 = v32;
    v35 = (uint64_t)v140 + 28 * v34 + 4 * v33;
    ++*(_DWORD *)(v35 + 316);
LABEL_30:
    ++v12;
  }
  while (v12 != v138);
  (***((void (****)(_QWORD, _QWORD *, uint64_t))v7 + 10))(*((_QWORD *)v7 + 10), v11, a3);
  if (v10 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)v143, (char *)v11);
LABEL_33:
  v36 = 0;
  v133 = v7;
  while (2)
  {
    v37 = v139[v36];
    v38 = (const void **)*((_QWORD *)v7 + 6);
    v39 = *(_QWORD *)(*((_QWORD *)v7 + 5) + 8 * v37);
    v40 = &v38[4 * v37];
    v41 = v40;
    v43 = (char *)v40 + 25;
    v42 = *((unsigned __int8 *)v40 + 25);
    v44 = *((unsigned __int8 *)v40 + 24);
    v141 = v40 + 3;
    v136 = v38;
    if (v44)
    {
      v45 = *v40;
      v46 = (char *)v40[1];
      if ((*((_BYTE *)*v40 + 43) & 0x40) != 0 && v42)
      {
        v47 = 0;
        for (i = 0; i < v42; v47 = ++i)
        {
          v49 = &v45[24 * i];
          v52 = *((unsigned __int8 *)v49 + 41);
          v50 = (char *)v49 + 41;
          v51 = v52;
          v53 = *(v50 - 1);
          v54 = &v46[64 * v53];
          *(int32x2_t *)(v50 - 9) = vrev64_s32(*(int32x2_t *)(v54 + 56));
          *(_OWORD *)(v50 - 25) = *((_OWORD *)v54 + 2);
          if (v52 >= 2uLL)
          {
            v55 = -1;
            v56 = (float *)&v46[64 * v53 + 104];
            while ((float)((float)((float)(*((float *)v54 + 9) * *(v56 - 1)) + (float)(*((float *)v54 + 8) * *(v56 - 2)))
                          + (float)(*((float *)v54 + 10) * *v56)) >= 0.999
                 || *((float *)v54 + 7) <= 0.0)
            {
              --v55;
              v56 += 16;
              if (-v51 == v55)
                goto LABEL_49;
            }
            if (v42 - 1 > v47)
            {
              v57 = (uint64_t)&v45[24 * v42 - 10];
              v58 = v42;
              do
              {
                v59 = &v45[24 * v58];
                *(_OWORD *)v59 = *(_OWORD *)(v57 - 28);
                *((_QWORD *)v59 + 2) = *(_QWORD *)(v57 - 12);
                *((_DWORD *)v59 + 6) = *(_DWORD *)(v57 - 4);
                v60 = *(_OWORD *)v57;
                *((_DWORD *)v59 + 11) = *(_DWORD *)(v57 + 16);
                *(_OWORD *)(v59 + 14) = v60;
                LODWORD(v59) = v58 - 2;
                --v58;
                v57 -= 48;
              }
              while (v47 < v59);
              LOBYTE(v51) = *v50;
            }
            ++v42;
            v61 = &v45[24 * v47 + 24];
            v61[21] = v45[24 * i + 21];
            *((_BYTE *)v61 + 40) = v53 - v55;
            *((_BYTE *)v61 + 41) = v51 + v55;
            *v50 = -(char)v55;
          }
LABEL_49:
          ;
        }
      }
      if (v42 > BYTE3(v38[4 * v37 + 3]))
      {
        ++v132;
        v62 = *(unsigned int *)(v39 + 88);
        v63 = v134;
        v131 = (const void **)((char *)v40 + 25);
        v64 = v36;
        v65 = v37;
        v66 = &v38[4 * v37];
        v67 = v39;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v134, v62 + 1);
        v39 = v67;
        v41 = v66;
        v37 = v65;
        v36 = v64;
        v43 = v131;
        *(_DWORD *)(*v63 + ((v62 >> 3) & 0x1FFFFFFC)) |= 1 << v62;
      }
      v68 = v135;
      if (v135 <= v42)
        v68 = v42;
      v135 = v68;
      *v43 = v42;
      v69 = *v141;
      if (*v141)
      {
        v70 = 0;
        v71 = (float *)(v46 + 28);
        do
        {
          v72 = *v71;
          v71 += 16;
          if (v72 != 0.0)
            ++v70;
          --v69;
        }
        while (v69);
      }
      else
      {
        v70 = 0;
      }
      v42 = v42;
    }
    else
    {
      v70 = 0;
    }
    v74 = *((unsigned __int8 *)v40 + 27);
    v73 = (char *)v40 + 27;
    if (v42 < v74)
    {
      ++v137;
      v75 = v39;
      v76 = *(unsigned int *)(v39 + 88);
      v77 = v134;
      v78 = v41;
      physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v134, v76 + 1);
      v41 = v78;
      *(_DWORD *)(*v77 + ((v76 >> 3) & 0x1FFFFFFC)) |= 1 << v76;
      if (v70)
        goto LABEL_65;
LABEL_82:
      *(_BYTE *)(v75 + 82) = 0;
      *(_QWORD *)(v75 + 64) = 0;
      *(_QWORD *)(v75 + 72) = 0;
      *v43 = 0;
      *v141 = 0;
      if (*v73)
      {
        ++v137;
        v110 = *(unsigned int *)(v75 + 88);
        v111 = v134;
        physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)v134, v110 + 1);
        *(_DWORD *)(*v111 + ((v110 >> 3) & 0x1FFFFFFC)) |= 1 << v110;
      }
      goto LABEL_84;
    }
    v75 = v39;
    if (!v70)
      goto LABEL_82;
LABEL_65:
    v79 = *((_QWORD *)v140 + 903);
    if (v79)
    {
      v80 = 48 * *v43;
      v81 = 32 * *v141;
      v82 = (unsigned int *)(v79 + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 + v81, v82));
      v84 = v37;
      v85 = v81 + v83;
      v86 = (uint64_t *)*((_QWORD *)v140 + 903);
      v87 = *((unsigned int *)v86 + 3);
      v88 = *((_DWORD *)v86 + 4) + *((_DWORD *)v86 + 2);
      v89 = *v86;
      v90 = -(uint64_t)v85;
      v91 = *v86 + v87 - v85;
      v92 = (unsigned int *)(*((_QWORD *)v140 + 904) + 8);
      v93 = v136;
      do
      {
        v94 = __ldaxr(v92);
        v95 = v94 + v80;
      }
      while (__stlxr(v95, v92));
      v96 = (uint64_t *)*((_QWORD *)v140 + 904);
      v97 = *((unsigned int *)v96 + 3);
      v98 = *((_DWORD *)v96 + 4) + *((_DWORD *)v96 + 2);
      v99 = *v96;
      v100 = -(uint64_t)v95;
      v101 = (_OWORD *)(*v96 + v97 - v95);
      v102 = *((unsigned __int8 *)*v41 + 43);
      v103 = 4 * *v141;
      v104 = (unsigned int *)(*((_QWORD *)v140 + 905) + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 + v103, v104));
      v106 = *((_QWORD *)v140 + 905);
      v107 = *(unsigned int *)(v106 + 12);
      if (*(_DWORD *)(v106 + 16) + *(_DWORD *)(v106 + 8) >= v107
        || v98 >= v97
        || v88 >= v87)
      {
        *v41 = 0;
        v41[1] = 0;
        *((_WORD *)v41 + 12) = 0;
        v41[2] = 0;
        goto LABEL_84;
      }
      v128 = v102;
      v129 = v90;
      v130 = v89;
      v112 = (void *)(*(_QWORD *)v106 + v107 - (int)(v105 + v103));
      v131 = &v93[4 * v84];
      v131[2] = v112;
      v113 = v41;
      bzero(v112, 4 * *v141);
      v136 = v113;
      memcpy(v101, *v113, 48 * *v43);
      v114 = *v43;
      if (*v43)
      {
        v115 = v128 | 0x80;
        v116 = (_BYTE *)(v99 + v97 + v100 + 43);
        v117 = *v43;
        do
        {
          *v116 = v115;
          v116 += 48;
          --v117;
        }
        while (v117);
        if (v114 >= 2)
        {
          v118 = (_OWORD *)(v99 + v97 + v100 + 48);
          v119 = 1;
          do
          {
            *v118 = *v101;
            v118 += 3;
            ++v119;
          }
          while (v119 < *v43);
        }
      }
      v120 = (uint64_t *)(v131 + 1);
      v121 = *v141;
      v7 = v133;
      if (*v141)
      {
        v122 = (_OWORD *)(v130 + v87 + v129 + 16);
        v123 = (__int128 *)((char *)v131[1] + 16);
        do
        {
          *(v122 - 1) = *(v123 - 1);
          v124 = *v123;
          v123 += 4;
          *v122 = v124;
          v122 += 2;
          --v121;
        }
        while (v121);
      }
      *v136 = v101;
      *v120 = v91;
    }
    else
    {
LABEL_84:
      v7 = v133;
    }
    if (++v36 != v138)
      continue;
    break;
  }
  *v125 = v132;
  *v126 = v137;
  *v127 = v135;
}

void physx::IG::IslandSim::~IslandSim(physx::IG::IslandSim *this)
{
  uint64_t i;
  int v3;
  uint64_t j;
  int v6;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t k;
  int v16;
  int v18;
  int v20;
  int v21;
  int v22;
  uint64_t m;
  int v24;
  int v26;
  uint64_t n;
  int v29;
  int v31;
  int v33;
  unint64_t v34;
  unint64_t ii;
  int v36;
  unint64_t v37;
  unint64_t jj;
  int v39;
  int v40;
  int v41;
  int v42;

  for (i = 0; i != -32; i -= 16)
  {
    v3 = *(_DWORD *)((char *)this + i + 596);
    if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + i + 584) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  for (j = 0; j != -32; j -= 16)
  {
    v6 = *(_DWORD *)((char *)this + j + 564);
    if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + j + 552) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  if (*((_QWORD *)this + 65) && (*((_DWORD *)this + 132) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 65) = 0;
  v8 = *((_DWORD *)this + 129);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 63))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 61))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 119);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 58))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 115);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 56))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((_DWORD *)this + 111);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 54))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 51) && (*((_DWORD *)this + 104) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v12 = 0;
  *((_QWORD *)this + 51) = 0;
  do
  {
    v13 = *(_DWORD *)((char *)this + v12 + 404);
    if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + v12 + 392) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v12 -= 16;
  }
  while (v12 != -32);
  for (k = 0; k != -32; k -= 16)
  {
    v16 = *(_DWORD *)((char *)this + k + 372);
    if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + k + 360) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v18 = *((_DWORD *)this + 83);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 40) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 38) && (*((_DWORD *)this + 78) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 38) = 0;
  if (*((_QWORD *)this + 36) && (*((_DWORD *)this + 74) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 36) = 0;
  v20 = *((_DWORD *)this + 71);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 34))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v21 = *((_DWORD *)this + 67);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 32))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v22 = *((_DWORD *)this + 63);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 30))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  for (m = 0; m != -32; m -= 16)
  {
    v24 = *(_DWORD *)((char *)this + m + 228);
    if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + m + 216) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v26 = *((_DWORD *)this + 49);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 23) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  for (n = 0; n != -32; n -= 16)
  {
    v29 = *(_DWORD *)((char *)this + n + 180);
    if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + n + 168) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v31 = *((_DWORD *)this + 37);
  if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 17) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v33 = *((_DWORD *)this + 33);
  if ((v33 & 0x80000000) == 0 && (v33 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 15))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v34 = *((unsigned int *)this + 24);
  if ((_DWORD)v34)
  {
    for (ii = 0; ii < v34; ++ii)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 11) + 8 * ii))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v34 = *((unsigned int *)this + 24);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 88);
  v36 = *((_DWORD *)this + 25);
  if ((v36 & 0x80000000) == 0 && (v36 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 11))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v37 = *((unsigned int *)this + 16);
  if ((_DWORD)v37)
  {
    for (jj = 0; jj < v37; ++jj)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 7) + 8 * jj))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        v37 = *((unsigned int *)this + 16);
      }
    }
  }
  physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 56);
  v39 = *((_DWORD *)this + 17);
  if ((v39 & 0x80000000) == 0 && (v39 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 7))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v40 = *((_DWORD *)this + 13);
  if ((v40 & 0x80000000) == 0 && (v40 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 5))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v41 = *((_DWORD *)this + 9);
  if ((v41 & 0x80000000) == 0 && (v41 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v42 = *((_DWORD *)this + 3);
  if ((v42 & 0x80000000) == 0 && (v42 & 0x7FFFFFFF) != 0)
  {
    if (*(_QWORD *)this)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

uint64_t physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(uint64_t a1, _DWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 4 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(int **)a1;
  if ((_DWORD)v9)
  {
    v11 = v8 + 4 * v9;
    v12 = *(int **)a1;
    v13 = (_DWORD *)v8;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    v15 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v15 = 0;
  }
  *(_DWORD *)(v8 + 4 * v15) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  v16 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v16 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 4 * v16;
}

uint64_t physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::growAndPushBack(uint64_t a1, _DWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>::getName() [T = physx::IG::NodeIndex]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 4 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(int **)a1;
  if ((_DWORD)v9)
  {
    v11 = v8 + 4 * v9;
    v12 = *(int **)a1;
    v13 = (_DWORD *)v8;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    v15 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v15 = 0;
  }
  *(_DWORD *)(v8 + 4 * v15) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  v16 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v16 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 4 * v16;
}

uint64_t physx::shdfnd::Array<physx::IG::Node,physx::shdfnd::ReflectionAllocator<physx::IG::Node>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;

  v4 = 32 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::Node>::getName() [T = physx::IG::Node]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 32 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      v10 += 2;
      *v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::Edge *,physx::shdfnd::ReflectionAllocator<physx::IG::Edge *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::Edge *>::getName() [T = physx::IG::Edge *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>::getName() [T = physx::IG::EdgeInstance *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::NodeIndex,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  _DWORD *v13;
  int v14;

  v4 = 4 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex>::getName() [T = physx::IG::NodeIndex]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(int **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 4 * v9;
    v12 = *(int **)a1;
    v13 = (_DWORD *)result;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::Island,physx::shdfnd::ReflectionAllocator<physx::IG::Island>>::recreate(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;

  v2 = a2;
  v4 = 44 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::Island>::getName() [T = physx::IG::Island]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if (v9)
  {
    v11 = result + 44 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      *(_OWORD *)((char *)v12 + 28) = *(__int128 *)((char *)v10 + 28);
      *v12 = v13;
      v12[1] = v14;
      v12 = (_OWORD *)((char *)v12 + 44);
      v10 = (__int128 *)((char *)v10 + 44);
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extendUninitialized(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;

  v2 = (a2 + 31) >> 5;
  v3 = *(_DWORD *)(result + 8);
  if (v2 > (v3 & 0x7FFFFFFFu))
  {
    v4 = result;
    if ((v3 & 0x80000000) == 0)
    {
      if (*(_QWORD *)result)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
    *(_DWORD *)(v4 + 8) = v2;
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmBitMap.h", 461);
    *(_QWORD *)v4 = result;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>::getName() [T = physx::IG::TraversalState]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8 + 16 * v9;
    v11 = *(__int128 **)a1;
    v12 = (_OWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  *(_OWORD *)(v8 + 16 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 16 * v15;
}

uint64_t physx::shdfnd::Array<physx::IG::TraversalState,physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v4 = 16 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::TraversalState>::getName() [T = physx::IG::TraversalState]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 16 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>::getName() [T = physx::PartitionEdge *]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_QWORD *)(v8 + 8 * v9);
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v9;
}

uint64_t physx::shdfnd::Array<physx::PxsContactManagerOutput,physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>::getName() [T = physx::"
           "PxsContactManagerOutput]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[2 * v9];
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      v14 = v11[1];
      v11 += 2;
      *v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v10);
    v15 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = &v8[2 * v15];
  v17 = a2[1];
  *v16 = *a2;
  v16[1] = v17;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::growAndPushBack(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>::getName() [T = physx::Gu::Cache]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 16 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>::getName() [T = physx::PxsC"
           "ontactManager *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsContactManager *,physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManager *>::getName() [T = physx::PxsC"
           "ontactManager *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxsContactManagerOutput,physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;

  v4 = 32 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxsContactManagerOutput>::getName() [T = physx::Px"
         "sContactManagerOutput]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 32 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      v10 += 2;
      *v12 = v13;
      v12[1] = v14;
      v12 += 2;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Gu::Cache,physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v4 = 16 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Gu::Cache>::getName() [T = physx::Gu::Cache]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 16 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PartitionEdge *,physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v4 = 8 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PartitionEdge *>::getName() [T = physx::PartitionEdge *]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(uint64_t **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 8 * v9;
    v12 = (_QWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(uint64_t **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::IG::NodeIndex *,physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::IG::NodeIndex *>::getName() [T = physx::IG::NodeIndex *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<void **,physx::shdfnd::ReflectionAllocator<void **>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<void **>::getName() [T = void **]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Sc::Interaction **,physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction **>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Sc::Interaction **>::getName() [T = physx::Sc::Interaction **]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void BitArray::resize(BitArray *this, int a2)
{
  unsigned int v3;
  char *v4;
  int v5;

  if ((a2 & 0x1F) != 0)
    v3 = ((a2 + 128) >> 5) + 1;
  else
    v3 = (a2 + 128) >> 5;
  if (v3)
    v4 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 274);
  else
    v4 = 0;
  v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    memcpy(v4, *(const void **)this, (4 * v5));
    v5 = *((_DWORD *)this + 2);
  }
  if (v3 != v5)
    bzero(&v4[4 * v5], 4 * (v3 - v5));
  if (*(_QWORD *)this)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 2) = v3;
}

uint64_t MBP_PairManager::addPair(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;

  v4 = *(_QWORD *)(this + 48);
  v3 = *(_QWORD *)(this + 56);
  v5 = *(_DWORD *)(v4 + 4 * *(unsigned int *)(v3 + 12 * (a2 >> 2)));
  v6 = *(_DWORD *)(v4 + 4 * *(unsigned int *)(v3 + 12 * (a3 >> 2)));
  if (v5 != v6)
  {
    v7 = this;
    if (*(_BYTE *)(*(_QWORD *)(this + 64) + (v6 & 3 | (4 * (v5 & 3)))))
    {
      if (a2 >= a3)
        v8 = a3;
      else
        v8 = a2;
      if (a2 <= a3)
        v9 = a3;
      else
        v9 = a2;
      v10 = 9
          * ((((unsigned __int16)v8 | ((unsigned __int16)v9 << 16))
            + ~(((unsigned __int16)v8 | ((unsigned __int16)v9 << 16)) << 15)) ^ ((((unsigned __int16)v8 | ((unsigned __int16)v9 << 16))
                                                                                              + ~(((unsigned __int16)v8 | ((unsigned __int16)v9 << 16)) << 15)) >> 10));
      v11 = ((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) ^ (((v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11)) >> 16);
      this = *(_DWORD *)(this + 4) & v11;
      v12 = *(_QWORD *)(v7 + 16);
      if (!v12 || (v13 = *(unsigned int *)(v12 + 4 * this), (_DWORD)v13 == -1))
      {
LABEL_15:
        v19 = *(_DWORD *)(v7 + 8);
        if (v19 >= *(_DWORD *)v7)
        {
          this = physx::Bp::PairManagerData::growPairs((physx::Bp::PairManagerData *)v7, v11);
          v19 = *(_DWORD *)(v7 + 8);
          v12 = *(_QWORD *)(v7 + 16);
        }
        *(_DWORD *)(v7 + 8) = v19 + 1;
        v20 = *(_QWORD *)(v7 + 24);
        v21 = (unsigned int *)(*(_QWORD *)(v7 + 32) + 8 * v19);
        *v21 = v8 | 0x80000000;
        v21[1] = v9;
        *(_DWORD *)(v20 + 4 * v19) = *(_DWORD *)(v12 + 4 * this);
        *(_DWORD *)(v12 + 4 * this) = v19;
      }
      else
      {
        v14 = *(_QWORD *)(v7 + 32);
        while (1)
        {
          if ((*(_DWORD *)(v14 + 8 * v13) & 0x7FFFFFFF) == v8)
          {
            v15 = v14 + 8 * v13;
            v18 = *(_DWORD *)(v15 + 4);
            v16 = (unsigned int *)(v15 + 4);
            v17 = v18;
            if ((v18 & 0x7FFFFFFF) == v9)
              break;
          }
          v13 = *(unsigned int *)(*(_QWORD *)(v7 + 24) + 4 * v13);
          if ((_DWORD)v13 == -1)
            goto LABEL_15;
        }
        *v16 = v17 | 0x80000000;
      }
    }
  }
  return this;
}

void Region::~Region(Region *this)
{
  Region *v2;
  Region *v3;
  Region *v4;

  if (*((_QWORD *)this + 16))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 16) = 0;
  }
  if (*((_QWORD *)this + 23))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 23) = 0;
  }
  if (*((_QWORD *)this + 22))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 22) = 0;
  }
  if (*((_QWORD *)this + 21))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 21) = 0;
  }
  if (*((_QWORD *)this + 20))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 20) = 0;
  }
  if (*((_QWORD *)this + 19))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 19) = 0;
  }
  v2 = (Region *)*((_QWORD *)this + 1637);
  if (v2 != (Region *)((char *)this + 12576) && v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 1637) = 0;
  }
  v3 = (Region *)*((_QWORD *)this + 1638);
  if (v3 != (Region *)((char *)this + 288) && v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 1638) = 0;
  }
  v4 = (Region *)*((_QWORD *)this + 1639);
  if (v4 != (Region *)((char *)this + 6432) && v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 1639) = 0;
  }
  *((_QWORD *)this + 27) = &off_24ED90D50;
  *((_QWORD *)this + 1636) = 0;
  physx::Cm::RadixSortBuffered::reset((uint64_t)this + 216);
  if (*((_QWORD *)this + 25))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
}

uint64_t Region::addObject(uint64_t a1, __int128 *a2, unsigned int a3, int a4)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v8 = *(_DWORD *)(a1 + 120);
  if (v8 != -1)
  {
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 8 * (unsigned __int16)*(_DWORD *)(a1 + 120));
    v9 = *(_DWORD *)(a1 + 112);
    goto LABEL_17;
  }
  v9 = *(_DWORD *)(a1 + 112);
  v10 = *(_DWORD *)(a1 + 116);
  LOWORD(v8) = v9;
  if (v10 == v9)
  {
    v11 = v10 + 128;
    if (v10 == -128)
    {
      v15 = 0;
      v17 = -128;
    }
    else
    {
      v12 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v13 = "static const char *physx::shdfnd::ReflectionAllocator<MBPEntry>::getName() [T = MBPEntry]";
      else
        v13 = "<allocation names disabled>";
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24)
                                                                                             + 16))(v12 + 24, 8 * v11, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 870);
      v15 = (void *)v14;
      v16 = 0;
      do
      {
        *(_DWORD *)(v14 + v16 + 4) = -1;
        v16 += 8;
      }
      while (8 * v11 != v16);
      v17 = *(_DWORD *)(a1 + 112);
      if (!v17)
        goto LABEL_14;
    }
    memcpy(v15, *(const void **)(a1 + 128), (8 * v17));
LABEL_14:
    if (*(_QWORD *)(a1 + 128))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(a1 + 128) = v15;
    *(_DWORD *)(a1 + 116) = v11;
    v9 = *(_DWORD *)(a1 + 112);
    LOWORD(v8) = v9;
  }
LABEL_17:
  *(_DWORD *)(a1 + 112) = v9 + 1;
  if (a4)
  {
    v18 = *(_DWORD *)(a1 + 136);
    v19 = *(_DWORD *)(a1 + 140);
    if (v18 == v19)
    {
      v20 = v18 + 128;
      *(_QWORD *)(a1 + 152) = resizeBoxes(v18, (v18 + 128), *(const void **)(a1 + 152));
      *(_QWORD *)(a1 + 168) = resizeMapping(*(_DWORD *)(a1 + 140), v20, *(unsigned __int16 **)(a1 + 168));
      *(_DWORD *)(a1 + 136) = v20;
      v19 = *(_DWORD *)(a1 + 140);
    }
    *(_DWORD *)(a1 + 140) = v19 + 1;
    v21 = *(_QWORD *)(a1 + 152) + 24 * v19;
    v22 = *a2;
    *(_QWORD *)(v21 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v21 = v22;
    *(_WORD *)(*(_QWORD *)(a1 + 168) + 2 * v19) = v8;
    *(_BYTE *)(a1 + 280) = 1;
    if (v19 >> 5 >= *(_DWORD *)(a1 + 208))
      BitArray::resize((BitArray *)(a1 + 200), v19);
    *(_DWORD *)(*(_QWORD *)(a1 + 200) + 4 * (v19 >> 5)) |= 1 << v19;
    v23 = (unsigned int *)(*(_QWORD *)(a1 + 128) + 8 * (unsigned __int16)v8);
    *v23 = v19;
    v23[1] = a3;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 144);
    v24 = *(_DWORD *)(a1 + 148);
    if (v25 == v24)
    {
      *(_QWORD *)(a1 + 160) = resizeBoxes(*(_DWORD *)(a1 + 144), (v25 + 128), *(const void **)(a1 + 160));
      *(_QWORD *)(a1 + 176) = resizeMapping(*(_DWORD *)(a1 + 148), v25 + 128, *(unsigned __int16 **)(a1 + 176));
      *(_DWORD *)(a1 + 144) = v25 + 128;
      if (*(_QWORD *)(a1 + 184))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *(_QWORD *)(a1 + 184) = 0;
      }
      if (v25 == -129)
        v26 = 0;
      else
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (v25 + 129), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 974);
      *(_QWORD *)(a1 + 184) = v26;
      v24 = *(_DWORD *)(a1 + 148);
    }
    *(_DWORD *)(a1 + 148) = v24 + 1;
    v27 = *(_QWORD *)(a1 + 160) + 24 * v24;
    v28 = *a2;
    *(_QWORD *)(v27 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v27 = v28;
    v29 = *(_QWORD *)(a1 + 176);
    *(_WORD *)(v29 + 2 * v24) = v8;
    v30 = *(_QWORD *)(a1 + 128);
    v31 = (unsigned int *)(v30 + 8 * (unsigned __int16)v8);
    *v31 = v24;
    v31[1] = a3;
    v32 = *(_QWORD *)(a1 + 160);
    v33 = *(unsigned int *)(a1 + 192);
    if (v24 == (_DWORD)v33)
    {
      v34 = *a2;
      v35 = v32 + 24 * v24;
      *(_QWORD *)(v35 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v35 = v34;
    }
    else
    {
      v36 = (__int128 *)(v32 + 24 * v33);
      v37 = *v36;
      v38 = *((_QWORD *)v36 + 2);
      v39 = *((_QWORD *)a2 + 2);
      *v36 = *a2;
      *((_QWORD *)v36 + 2) = v39;
      v40 = v32 + 24 * v24;
      *(_QWORD *)(v40 + 16) = v38;
      *(_OWORD *)v40 = v37;
      v41 = *(unsigned __int16 *)(v29 + 2 * v33);
      *(_WORD *)(v29 + 2 * v33) = *(_WORD *)(v29 + 2 * v24);
      *(_WORD *)(v29 + 2 * v24) = v41;
      *(_DWORD *)(v30 + 8 * v41) = v24;
      *v31 = v33;
    }
    ++*(_DWORD *)(a1 + 192);
    *(_DWORD *)(a1 + 196) = 0;
    *(_BYTE *)(a1 + 281) = 1;
  }
  return (unsigned __int16)v8;
}

void *resizeBoxes(int a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void *v8;

  if ((_DWORD)a2)
  {
    v5 = 24 * a2;
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
    {
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::getName() [T = physx::Bp::IAABB]";
    }
    else
    {
      v7 = "<allocation names disabled>";
    }
    v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                                  + 16))(v6 + 24, v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 884);
    if (!a1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = 0;
  if (a1)
LABEL_6:
    memcpy(v8, a3, (24 * a1));
LABEL_7:
  if (a3)
    (*(void (**)(uint64_t, const void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a3);
  return v8;
}

void *resizeMapping(int a1, unsigned int a2, unsigned __int16 *a3)
{
  void *v5;

  if (a2)
  {
    v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 893);
    if (!a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  if (a1)
LABEL_3:
    memcpy(v5, a3, (2 * a1));
LABEL_4:
  if (a3)
    (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a3);
  return v5;
}

__n128 Region::removeObject(Region *this, unsigned int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  __n128 result;

  v4 = *((_QWORD *)this + 16);
  v5 = (unsigned int *)(v4 + 8 * a2);
  v6 = *v5;
  if ((v5[1] & 1) != 0)
  {
    *((_BYTE *)this + 280) = 1;
    if ((v6 >> 5) >= *((_DWORD *)this + 52))
      BitArray::resize((Region *)((char *)this + 200), v6);
    *(_DWORD *)(*((_QWORD *)this + 25) + 4 * (v6 >> 5)) |= 1 << v6;
    v15 = *((_QWORD *)this + 21);
    v16 = *((_QWORD *)this + 19);
    v17 = *((_DWORD *)this + 35) - 1;
    *((_DWORD *)this + 35) = v17;
  }
  else
  {
    *((_DWORD *)this + 49) = 0;
    *((_BYTE *)this + 281) = 1;
    v7 = *((_DWORD *)this + 48);
    if (v6 < v7)
    {
      if (v7 != *((_DWORD *)this + 37))
      {
        v8 = v7 - 1;
        v9 = *((_QWORD *)this + 22);
        v10 = *((_QWORD *)this + 20);
        v11 = *(unsigned __int16 *)(v9 + 2 * v8);
        v12 = (__int128 *)(v10 + 24 * v8);
        v13 = v10 + 24 * v6;
        v14 = *v12;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
        *(_OWORD *)v13 = v14;
        *(_WORD *)(v9 + 2 * v6) = v11;
        *(_DWORD *)(v4 + 8 * v11) = v6;
        v7 = *((_DWORD *)this + 48);
        LODWORD(v6) = v8;
      }
      *((_DWORD *)this + 48) = v7 - 1;
    }
    v15 = *((_QWORD *)this + 22);
    v16 = *((_QWORD *)this + 20);
    v17 = *((_DWORD *)this + 37) - 1;
    *((_DWORD *)this + 37) = v17;
  }
  v18 = *((_QWORD *)this + 16);
  v19 = *(unsigned __int16 *)(v15 + 2 * v17);
  v20 = (__n128 *)(v16 + 24 * v17);
  v21 = (__n128 *)(v16 + 24 * v6);
  result = *v20;
  v21[1].n128_u64[0] = v20[1].n128_u64[0];
  *v21 = result;
  *(_WORD *)(v15 + 2 * v6) = v19;
  *(_DWORD *)(v18 + 8 * v19) = v6;
  *v5 = *((_DWORD *)this + 30);
  v5[1] = -1;
  *((_DWORD *)this + 30) = a2;
  --*((_DWORD *)this + 28);
  return result;
}

void Region::updateObject(uint64_t a1, __int128 *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = (unsigned int *)(v3 + 8 * a3);
  if ((v4[1] & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 152) + 24 * *v4;
    v11 = *a2;
    *(_QWORD *)(v10 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v10 = v11;
    *(_BYTE *)(a1 + 280) = 1;
    v12 = (_QWORD *)(a1 + 200);
    v13 = *v4;
    if (*v4 >> 5 >= *(_DWORD *)(a1 + 208))
      BitArray::resize((BitArray *)(a1 + 200), v13);
    *(_DWORD *)(*v12 + 4 * (v13 >> 5)) |= 1 << v13;
  }
  else
  {
    v5 = *v4;
    if (v5 >= *(_DWORD *)(a1 + 196))
      *(_BYTE *)(a1 + 281) = 1;
    v6 = *(unsigned int *)(a1 + 192);
    v7 = *(_QWORD *)(a1 + 160);
    if (v5 >= v6)
    {
      if ((_DWORD)v5 == (_DWORD)v6)
      {
        v14 = *a2;
        v15 = v7 + 24 * v5;
        *(_QWORD *)(v15 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v15 = v14;
      }
      else
      {
        v16 = *(_QWORD *)(a1 + 176);
        v17 = (__int128 *)(v7 + 24 * v6);
        v18 = *v17;
        v19 = *((_QWORD *)v17 + 2);
        v20 = *((_QWORD *)a2 + 2);
        *v17 = *a2;
        *((_QWORD *)v17 + 2) = v20;
        v21 = v7 + 24 * v5;
        *(_QWORD *)(v21 + 16) = v19;
        *(_OWORD *)v21 = v18;
        v22 = *(unsigned __int16 *)(v16 + 2 * v6);
        *(_WORD *)(v16 + 2 * v6) = *(_WORD *)(v16 + 2 * v5);
        *(_WORD *)(v16 + 2 * v5) = v22;
        *(_DWORD *)(v3 + 8 * v22) = v5;
        *v4 = v6;
      }
      ++*(_DWORD *)(a1 + 192);
    }
    else
    {
      v8 = *a2;
      v9 = v7 + 24 * v5;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v9 = v8;
    }
  }
}

uint64_t MBP::addToOutOfBoundsArray(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;

  v3 = a2;
  v2 = *(unsigned int *)(this + 5304);
  if ((*(_DWORD *)(this + 5308) & 0x7FFFFFFFu) <= v2)
    return physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack(this + 5296, &v3);
  *(_DWORD *)(*(_QWORD *)(this + 5296) + 4 * v2) = a2;
  ++*(_DWORD *)(this + 5304);
  return this;
}

_DWORD *setupOverlapFlags(_DWORD *result, uint64_t a2)
{
  unint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;

  if ((_DWORD)result)
  {
    v2 = result;
    v3 = (_DWORD *)(a2 + 40);
    v4 = result;
    do
    {
      *v3 = 0;
      v3 += 14;
      --v4;
    }
    while (v4);
    v5 = 0;
    v6 = (_DWORD)result - 1;
    v7 = a2 + 60;
    do
    {
      v8 = v5 + 1;
      if (*(_QWORD *)(a2 + 56 * v5 + 32))
        v9 = v8 >= v2;
      else
        v9 = 1;
      if (!v9)
      {
        v10 = (_DWORD *)(a2 + 56 * v5);
        v11 = v10 + 4;
        v12 = v10 + 1;
        v13 = v10 + 5;
        v14 = v10 + 2;
        result = v10 + 6;
        v15 = v10 + 3;
        v16 = v10 + 10;
        v17 = v7;
        v18 = v6;
        do
        {
          if (*(_QWORD *)(v17 + 28)
            && *v11 > *(_DWORD *)v17
            && *(_DWORD *)(v17 + 12) > *v12
            && *v13 > *(_DWORD *)(v17 + 4)
            && *(_DWORD *)(v17 + 16) > *v14
            && *result > *(_DWORD *)(v17 + 8)
            && *(_DWORD *)(v17 + 20) > *v15)
          {
            *v16 = 1;
            *(_DWORD *)(v17 + 36) = 1;
          }
          v17 += 56;
          --v18;
        }
        while (v18);
      }
      --v6;
      v7 += 56;
      v5 = v8;
    }
    while (v8 != v2);
  }
  return result;
}

char *MBP::storeHandles(char *result, uint64_t a2, int a3, _DWORD *__src)
{
  char *v6;
  char *v7;
  uint64_t v8;
  _DWORD *v9;
  char *v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  if (a3)
  {
    if (a3 == 1)
    {
      *(_DWORD *)(a2 + 8) = *__src;
    }
    else
    {
      v6 = &result[16 * a3 + 152];
      v7 = &result[4 * a3];
      v8 = *((unsigned int *)v7 + 1066);
      if ((_DWORD)v8 == -1)
      {
        v10 = &result[16 * a3];
        v12 = *((_DWORD *)v10 + 40);
        v11 = (unsigned int *)(v10 + 160);
        *(_DWORD *)(a2 + 8) = v12;
        v13 = *v11;
        v14 = v11[1] & 0x7FFFFFFF;
        v15 = *v11 + a3;
        if (v15 > v14)
        {
          v16 = 2 * v11[1];
          if (!v14)
            v16 = 2;
          if (v15 <= v16)
            v17 = v16;
          else
            v17 = *v11 + a3;
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)&result[16 * a3 + 152], v17);
          v13 = *v11;
        }
        v9 = (_DWORD *)(*(_QWORD *)v6 + 4 * v13);
        *v11 = v15;
      }
      else
      {
        *(_DWORD *)(a2 + 8) = v8;
        v9 = (_DWORD *)(*(_QWORD *)v6 + 4 * v8);
        *((_DWORD *)v7 + 1066) = *v9;
      }
      return (char *)memcpy(v9, __src, (4 * a3));
    }
  }
  return result;
}

_QWORD *MBP::findOverlaps(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t *v20;
  _DWORD *v21;
  int32x2_t *v22;
  int32x2_t *v23;
  uint64_t v24;
  int8x8_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int32x2_t *v37;
  _DWORD *v38;
  int32x2_t *v39;
  int32x2_t *v40;
  uint64_t v41;
  int8x8_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int32x2_t *v53;
  _DWORD *v54;
  int32x2_t *v55;
  int32x2_t *v56;
  uint64_t v57;
  uint64_t v58;
  int8x8_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int32x2_t *v73;
  _DWORD *v74;
  int32x2_t *v75;
  int32x2_t *v76;
  uint64_t v77;
  int8x8_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  int32x2_t *v90;
  _DWORD *v91;
  int32x2_t *v92;
  int32x2_t *v93;
  uint64_t v94;
  int8x8_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  MBP_PairManager *v111;

  v3 = *(unsigned int *)result;
  v4 = result[2];
  v5 = result[4];
  result[12] = a2;
  result[13] = v5;
  result[14] = a3;
  if ((_DWORD)v3)
  {
    v6 = 0;
    v111 = (MBP_PairManager *)(result + 6);
    v97 = v4;
    v98 = v3;
    while (1)
    {
      v7 = *(uint64_t **)(v4 + 56 * v6 + 32);
      if (v7)
      {
        if (*((_DWORD *)v7 + 48))
          break;
      }
LABEL_65:
      if (++v6 == v3)
        return result;
    }
    v99 = v6;
    v100 = *(uint64_t **)(v4 + 56 * v6 + 32);
    if (*((_BYTE *)v7 + 48))
    {
      v8 = v7[1];
      v107 = v7[3];
      v109 = *v7;
      v103 = *((unsigned int *)v7 + 10);
      v101 = *((unsigned int *)v7 + 11);
      if (!(_DWORD)v101)
      {
LABEL_28:
        v7 = v100;
        if ((_DWORD)v103)
        {
          v44 = 0;
          LODWORD(v45) = 0;
          do
          {
            v46 = (unsigned int *)(v8 + 24 * v44);
            v47 = v46[3];
            v48 = *v46;
            v49 = v45 + 2;
            do
            {
              v50 = v49;
              v51 = 24 * v45;
              v45 = (v45 + 1);
              v52 = *(_DWORD *)(v8 + v51);
              v49 = v50 + 1;
            }
            while (v52 < v48);
            if (v45 >= v103)
              break;
            if (*(_DWORD *)(v8 + 24 * v45) <= v47)
            {
              v53 = (int32x2_t *)(v8 + 24 * v44);
              v54 = (_DWORD *)v53 + 1;
              v55 = v53 + 1;
              v56 = v53 + 2;
              v57 = v45;
              do
              {
                v58 = v8 + 24 * v57;
                v59 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v56, *(int32x2_t *)(v58 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
                if (!((*(_DWORD *)(v58 + 16) - *v54) & 0x80000000 | ((*(_DWORD *)(v58 + 20) - v55->i32[0]) >> 31 << 30) | v59.i32[0] | v59.i32[1]))
                  result = (_QWORD *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v107 + 2 * v44) + 4), *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v107 + 2 * v57) + 4));
                v57 = v50;
                v60 = *(_DWORD *)(v8 + 24 * v50++);
              }
              while (v60 <= v47);
            }
            ++v44;
          }
          while (v44 != v103);
        }
        goto LABEL_39;
      }
      if ((_DWORD)v103)
      {
        v9 = 0;
        v10 = 0;
        v11 = v100[2];
        v105 = v100[4];
        do
        {
          v12 = (unsigned int *)(v8 + 24 * v9);
          v13 = v12[3];
          v14 = *v12;
          v15 = v10 + 1;
          do
          {
            v16 = v10;
            v17 = v15;
            v18 = *(_DWORD *)(v11 + 24 * v10++);
            ++v15;
          }
          while (v18 < v14);
          if (v18 <= v13)
          {
            v19 = v16;
            v20 = (int32x2_t *)(v8 + 24 * v9);
            v21 = (_DWORD *)v20 + 1;
            v22 = v20 + 1;
            v23 = v20 + 2;
            do
            {
              v24 = v11 + 24 * v19;
              v25 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v23, *(int32x2_t *)(v24 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
              if (!((*(_DWORD *)(v24 + 16) - *v21) & 0x80000000 | ((*(_DWORD *)(v24 + 20) - v22->i32[0]) >> 31 << 30) | v25.i32[0] | v25.i32[1]))
                result = (_QWORD *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v107 + 2 * v9) + 4), *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v105 + 2 * v19) + 4));
              v19 = v17;
              v26 = *(_DWORD *)(v11 + 24 * v17++);
            }
            while (v26 <= v13);
          }
          if (--v10 >= v101)
            break;
          ++v9;
        }
        while (v9 < v103);
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = (unsigned int *)(v11 + 24 * v27);
          v30 = v29[3];
          v31 = *v29;
          v32 = v28 + 1;
          do
          {
            v33 = v28;
            v34 = v32;
            v35 = *(_DWORD *)(v8 + 24 * v28++);
            ++v32;
          }
          while (v35 <= v31);
          if (v35 <= v30)
          {
            v36 = v33;
            v37 = (int32x2_t *)(v11 + 24 * v27);
            v38 = (_DWORD *)v37 + 1;
            v39 = v37 + 1;
            v40 = v37 + 2;
            do
            {
              v41 = v8 + 24 * v36;
              v42 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v40, *(int32x2_t *)(v41 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
              if (!((*(_DWORD *)(v41 + 16) - *v38) & 0x80000000 | ((*(_DWORD *)(v41 + 20) - v39->i32[0]) >> 31 << 30) | v42.i32[0] | v42.i32[1]))
                result = (_QWORD *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v107 + 2 * v36) + 4), *(_DWORD *)(v109 + 8 * *(unsigned __int16 *)(v105 + 2 * v27) + 4));
              v36 = v34;
              v43 = *(_DWORD *)(v8 + 24 * v34++);
            }
            while (v43 <= v30);
          }
          if (--v28 >= v103)
            break;
          ++v27;
        }
        while (v27 < v101);
        goto LABEL_28;
      }
    }
LABEL_39:
    if (*((_BYTE *)v7 + 104))
    {
      v104 = *((unsigned int *)v100 + 16);
      v62 = v100[9];
      v61 = v100[10];
      v108 = v100[11];
      v110 = v100[7];
      v106 = v100[12];
      v102 = *((unsigned int *)v100 + 17);
      if ((_DWORD)v102 && (_DWORD)v104)
      {
        v63 = 0;
        v64 = 0;
        do
        {
          v65 = (unsigned int *)(v62 + 24 * v63);
          v66 = v65[3];
          v67 = *v65;
          v68 = v64 + 1;
          do
          {
            v69 = v64;
            v70 = v68;
            v71 = *(_DWORD *)(v61 + 24 * v64++);
            ++v68;
          }
          while (v71 < v67);
          if (v71 <= v66)
          {
            v72 = v69;
            v73 = (int32x2_t *)(v62 + 24 * v63);
            v74 = (_DWORD *)v73 + 1;
            v75 = v73 + 1;
            v76 = v73 + 2;
            do
            {
              v77 = v61 + 24 * v72;
              v78 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v76, *(int32x2_t *)(v77 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
              if (!((*(_DWORD *)(v77 + 16) - *v74) & 0x80000000 | ((*(_DWORD *)(v77 + 20) - v75->i32[0]) >> 31 << 30) | v78.i32[0] | v78.i32[1]))
                result = (_QWORD *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v110 + 8 * *(unsigned __int16 *)(v106 + 2 * v63) + 4), *(_DWORD *)(v110 + 8 * *(unsigned __int16 *)(v108 + 2 * v72) + 4));
              v72 = v70;
              v79 = *(_DWORD *)(v61 + 24 * v70++);
            }
            while (v79 <= v66);
          }
          if (--v64 >= v102)
            break;
          ++v63;
        }
        while (v63 < v104);
      }
      if ((_DWORD)v104 && (_DWORD)v102)
      {
        v80 = 0;
        v81 = 0;
        do
        {
          v82 = (unsigned int *)(v61 + 24 * v80);
          v83 = v82[3];
          v84 = *v82;
          v85 = v81 + 1;
          do
          {
            v86 = v81;
            v87 = v85;
            v88 = *(_DWORD *)(v62 + 24 * v81++);
            ++v85;
          }
          while (v88 <= v84);
          if (v88 <= v83)
          {
            v89 = v86;
            v90 = (int32x2_t *)(v61 + 24 * v80);
            v91 = (_DWORD *)v90 + 1;
            v92 = v90 + 1;
            v93 = v90 + 2;
            do
            {
              v94 = v62 + 24 * v89;
              v95 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vsub_s32(*v93, *(int32x2_t *)(v94 + 4)), (uint32x2_t)0xFFFFFFFDFFFFFFFELL), (int8x8_t)0x1000000020000000);
              if (!((*(_DWORD *)(v94 + 16) - *v91) & 0x80000000 | ((*(_DWORD *)(v94 + 20) - v92->i32[0]) >> 31 << 30) | v95.i32[0] | v95.i32[1]))
                result = (_QWORD *)MBP_PairManager::addPair((uint64_t)v111, *(_DWORD *)(v110 + 8 * *(unsigned __int16 *)(v106 + 2 * v89) + 4), *(_DWORD *)(v110 + 8 * *(unsigned __int16 *)(v108 + 2 * v80) + 4));
              v89 = v87;
              v96 = *(_DWORD *)(v62 + 24 * v87++);
            }
            while (v96 <= v83);
          }
          if (++v80 >= v102)
            break;
          --v81;
        }
        while (v81 < v104);
      }
    }
    v6 = v99;
    *((_DWORD *)v100 + 48) = 0;
    v4 = v97;
    v3 = v98;
    goto LABEL_65;
  }
  return result;
}

physx::Bp::BroadPhaseMBP *physx::Bp::BroadPhaseMBP::BroadPhaseMBP(physx::Bp::BroadPhaseMBP *this, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  char *v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  size_t v18;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 2) = a6;
  *(_QWORD *)this = off_24ED8BED8;
  *((_QWORD *)this + 1) = off_24ED8C058;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 9) = off_24ED8C100;
  *((_QWORD *)this + 10) = a6;
  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 10) = 0u;
  v10 = (char *)this + 160;
  *((_OWORD *)this + 11) = 0u;
  v11 = (char *)this + 176;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 12) = 0u;
  v12 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v13 = "static const char *physx::shdfnd::ReflectionAllocator<MBP>::getName() [T = MBP]";
  else
    v13 = "<allocation names disabled>";
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v12 + 24) + 16))(v12 + 24, 5328, v13, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2956);
  *(_QWORD *)v14 = 0xFFFFFFFF00000000;
  *(_DWORD *)(v14 + 8) = -1;
  *(_QWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_DWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 136) = 0;
  *(_DWORD *)(v14 + 144) = 0;
  bzero((void *)(v14 + 152), 0x1010uLL);
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 128) = 0;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_QWORD *)(v14 + 5296) = 0;
  *(_QWORD *)(v14 + 5312) = 0;
  *(_QWORD *)(v14 + 5304) = 0;
  *(_DWORD *)(v14 + 5320) = 0;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 44) = 0u;
  memset((void *)(v14 + 4264), 255, 0x404uLL);
  *((_QWORD *)this + 17) = v14;
  v15 = (a5 + a4);
  if ((_DWORD)a2)
    physx::shdfnd::Array<RegionData,physx::shdfnd::ReflectionAllocator<RegionData>>::recreate((uint64_t *)(v14 + 16), a2);
  if ((_DWORD)v15)
  {
    *(_DWORD *)(v14 + 40) = 0;
    if ((*(_DWORD *)(v14 + 44) & 0x7FFFFFFFu) < v15)
      physx::shdfnd::Array<MBP_Object,physx::shdfnd::ReflectionAllocator<MBP_Object>>::recreate((uint64_t *)(v14 + 32), v15);
    v16 = v15 >> 5;
    if ((v15 & 0x1F) != 0)
      ++v16;
    *(_DWORD *)(v14 + 5320) = v16;
    if (*(_QWORD *)(v14 + 5312))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *(_QWORD *)(v14 + 5312) = 0;
      v16 = *(_DWORD *)(v14 + 5320);
    }
    if (v16)
    {
      v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 254);
      v18 = (4 * *(_DWORD *)(v14 + 5320));
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    *(_QWORD *)(v14 + 5312) = v17;
    bzero(v17, v18);
    bzero(*(void **)(v14 + 5312), (4 * *(_DWORD *)(v14 + 5320)));
    physx::Bp::PairManagerData::reserveMemory((unsigned int *)(v14 + 48), a3);
    physx::Bp::BroadPhaseMBP::allocateMappingArray((char *)this, v15);
  }
  else
  {
    physx::Bp::PairManagerData::reserveMemory((unsigned int *)(v14 + 48), a3);
  }
  if ((*((_DWORD *)this + 43) & 0x7FFFFC00) == 0)
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate((uint64_t)v10, 0x400u);
  if ((*((_DWORD *)this + 47) & 0x7FFFFC00) == 0)
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate((uint64_t)v11, 0x400u);
  return this;
}

char *physx::Bp::BroadPhaseMBP::allocateMappingArray(char *this, unsigned int a2)
{
  uint64_t v3;
  char *v4;
  unsigned int v5;

  v3 = (uint64_t)this;
  if (a2)
  {
    this = (char *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2977);
    v4 = this;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_DWORD *)(v3 + 152);
  if (v5)
  {
    this = (char *)memcpy(v4, *(const void **)(v3 + 144), 4 * v5);
    v5 = *(_DWORD *)(v3 + 152);
  }
  if (v5 < a2)
    this = (char *)memset(&v4[4 * v5], 255, 4 * (~v5 + a2) + 4);
  if (*(_QWORD *)(v3 + 144))
    this = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(v3 + 144) = v4;
  *(_DWORD *)(v3 + 152) = a2;
  return this;
}

void physx::Bp::BroadPhaseMBP::~BroadPhaseMBP(physx::Bp::BroadPhaseMBP *this)
{
  int *v2;
  int v3;
  Region **v4;
  Region *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v15;

  *(_QWORD *)this = off_24ED8BED8;
  v2 = (int *)*((_QWORD *)this + 17);
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = (Region **)(*((_QWORD *)v2 + 2) + 32);
      do
      {
        v5 = *v4;
        if (*v4)
        {
          Region::~Region(*v4);
          (*(void (**)(uint64_t, Region *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v5);
          *v4 = 0;
        }
        v4 += 7;
        --v3;
      }
      while (v3);
    }
    v6 = 0;
    *(_QWORD *)v2 = 0xFFFFFFFF00000000;
    v2[2] = -1;
    do
    {
      v2[v6 * 4 + 40] = 0;
      v2[v6 + 1066] = -1;
      ++v6;
    }
    while (v6 != 257);
    v2[6] = 0;
    v2[10] = 0;
    physx::Bp::PairManagerData::purge((uint64_t)(v2 + 12));
    if (*((_QWORD *)v2 + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)v2 + 15) = 0;
    v2[32] = 0;
    if (*((_QWORD *)v2 + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)v2 + 17) = 0;
    v2[36] = 0;
    v2[1326] = 0;
    if (*((_QWORD *)v2 + 664))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v2[1330] = 0;
    *((_QWORD *)v2 + 664) = 0;
    v7 = v2[1327];
    if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((_QWORD *)v2 + 662))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v8 = 1028;
    do
    {
      v9 = v2[v8 + 37];
      if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *(_QWORD *)&v2[v8 + 34] != 0)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v8 -= 4;
    }
    while (v8 * 4);
    if (*((_QWORD *)v2 + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)v2 + 17) = 0;
    v2[36] = 0;
    if (*((_QWORD *)v2 + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)v2 + 15) = 0;
    v2[32] = 0;
    physx::Bp::PairManagerData::purge((uint64_t)(v2 + 12));
    v11 = v2[11];
    if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((_QWORD *)v2 + 4))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v12 = v2[7];
    if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((_QWORD *)v2 + 2))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    (*(void (**)(uint64_t, int *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    *((_QWORD *)this + 17) = 0;
  }
  if (*((_QWORD *)this + 18))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v13 = *((_DWORD *)this + 47);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 22) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v15 = *((_DWORD *)this + 43);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 20))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 9) = off_24ED8BB00;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 1) = off_24ED8BB00;
  *((_QWORD *)this + 3) = 0;
}

{
  uint64_t v2;

  physx::Bp::BroadPhaseMBP::~BroadPhaseMBP(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Bp::BroadPhaseMBP *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void physx::MBPPostUpdateWorkTask::~MBPPostUpdateWorkTask(physx::MBPPostUpdateWorkTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  (*(void (**)(uint64_t, physx::MBPPostUpdateWorkTask *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                  + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void physx::MBPUpdateWorkTask::~MBPUpdateWorkTask(physx::MBPUpdateWorkTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  (*(void (**)(uint64_t, physx::MBPUpdateWorkTask *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Bp::BroadPhaseMBP::getCaps(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = 256;
  *(_BYTE *)(a2 + 8) = 1;
  return 1;
}

uint64_t physx::Bp::BroadPhaseMBP::getNbRegions(physx::Bp::BroadPhaseMBP *this)
{
  return **((unsigned int **)this + 17);
}

uint64_t physx::Bp::BroadPhaseMBP::getRegions(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  int32x2_t *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  char v26;
  uint64_t v27;

  v4 = *(unsigned int **)(a1 + 136);
  if (*v4 >= a3)
    result = a3;
  else
    result = *v4;
  if ((_DWORD)result)
  {
    v6 = 0;
    v7 = *((_QWORD *)v4 + 2) + 56 * a4 + 24;
    v8 = vdup_n_s32(0xFE7FFFFF);
    do
    {
      v9 = (int32x2_t *)(a2 + v6);
      v10 = 2 * *(_DWORD *)(v7 - 20);
      if ((*(_DWORD *)(v7 - 20) & 0x40000000) != 0)
        v11 = v10 & 0x7FFFFFFE;
      else
        v11 = ~v10;
      v9->i32[0] = v11;
      v12 = 2 * *(_DWORD *)(v7 - 16);
      if ((*(_DWORD *)(v7 - 16) & 0x40000000) != 0)
        v13 = v12 & 0x7FFFFFFE;
      else
        v13 = ~v12;
      v9->i32[1] = v13;
      v14 = 2 * *(_DWORD *)(v7 - 12);
      if ((*(_DWORD *)(v7 - 12) & 0x40000000) != 0)
        v15 = v14 & 0x7FFFFFFE;
      else
        v15 = ~v14;
      v9[1].i32[0] = v15;
      v16 = 2 * *(_DWORD *)(v7 - 8);
      if ((*(_DWORD *)(v7 - 8) & 0x40000000) != 0)
        v17 = v16 & 0x7FFFFFFE;
      else
        v17 = ~v16;
      v9[1].i32[1] = v17;
      v18 = 2 * *(_DWORD *)(v7 - 4);
      if ((*(_DWORD *)(v7 - 4) & 0x40000000) != 0)
        v19 = v18 & 0x7FFFFFFE;
      else
        v19 = ~v18;
      v9[2].i32[0] = v19;
      v20 = 2 * *(_DWORD *)v7;
      if ((*(_DWORD *)v7 & 0x40000000) != 0)
        v21 = v20 & 0x7FFFFFFE;
      else
        v21 = ~v20;
      v9[2].i32[1] = v21;
      v22 = *(_QWORD *)(v7 + 8);
      if (v22)
      {
        v23 = *(_QWORD *)(v7 + 24);
        v24 = *(_DWORD *)(v7 + 16) != 0;
        v25 = *(_DWORD *)(v22 + 140);
        LODWORD(v22) = *(_DWORD *)(v22 + 148);
        v26 = 1;
      }
      else
      {
        v23 = 0;
        v26 = 0;
        v24 = 0;
        v25 = 0;
        v9[2] = v8;
        *(_OWORD *)(a2 + v6) = xmmword_2261A6E10;
      }
      v27 = a2 + v6;
      *(_QWORD *)(v27 + 24) = v23;
      v7 += 56;
      *(_BYTE *)(v27 + 40) = v26;
      *(_BYTE *)(v27 + 41) = v24;
      v6 += 48;
      *(_DWORD *)(v27 + 32) = v25;
      *(_DWORD *)(v27 + 36) = v22;
    }
    while (48 * result != v6);
  }
  return result;
}

uint64_t physx::Bp::BroadPhaseMBP::addRegion(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  const float *v52;
  float32x4_t v53;
  int8x16_t v54;
  unsigned int v55;
  unsigned __int32 v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  __int16 v68;
  _WORD *v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v79;
  BitArray *v80;
  unsigned int v81;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  int v86[2];
  uint32x4_t v87;
  uint32x2_t v88;
  _DWORD __dst[257];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t **)(a1 + 136);
  v11 = *((unsigned int *)v10 + 2);
  *(_QWORD *)v86 = v10;
  if ((_DWORD)v11 == -1)
  {
    v11 = *(unsigned int *)v10;
    if (v11 >= 0x100)
    {
      physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2106, "MBP::addRegion: max number of regions reached.", a6, a7, a8, v73);
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)v10 = v11 + 1;
    v13 = *((_DWORD *)v10 + 6);
    v14 = *((_DWORD *)v10 + 7) & 0x7FFFFFFF;
    v15 = v13 + 1;
    if (v13 + 1 > v14)
    {
      v16 = 2 * *((_DWORD *)v10 + 7);
      if (!v14)
        v16 = 2;
      if (v15 <= v16)
        v17 = v16;
      else
        v17 = v15;
      physx::shdfnd::Array<RegionData,physx::shdfnd::ReflectionAllocator<RegionData>>::recreate(v10 + 2, v17);
      v10 = *(uint64_t **)v86;
      v13 = *(_DWORD *)(*(_QWORD *)v86 + 24);
    }
    v12 = v10[2] + 56 * v13;
    *((_DWORD *)v10 + 6) = v15;
  }
  else
  {
    v12 = v10[2] + 56 * v11;
    *((_DWORD *)v10 + 2) = *(_QWORD *)(v12 + 48);
  }
  v18 = v10;
  v19 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v20 = "static const char *physx::shdfnd::ReflectionAllocator<Region>::getName() [T = Region]";
  else
    v20 = "<allocation names disabled>";
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v19 + 24) + 16))(v19 + 24, 13120, v20, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2114);
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  *(_BYTE *)(v21 + 104) = 0;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_BYTE *)(v21 + 48) = 0;
  *(_QWORD *)(v21 + 112) = 0;
  *(_DWORD *)(v21 + 120) = -1;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 176) = 0u;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_DWORD *)(v21 + 208) = 0;
  *(_QWORD *)(v21 + 264) = 0;
  *(_OWORD *)(v21 + 248) = 0u;
  *(_OWORD *)(v21 + 232) = 0u;
  *(_BYTE *)(v21 + 272) = 1;
  *(_DWORD *)(v21 + 224) = 0x80000000;
  *(_QWORD *)(v21 + 216) = &off_24ED90D50;
  *(_WORD *)(v21 + 280) = 256;
  *(_OWORD *)(v21 + 13088) = 0u;
  *(_OWORD *)(v21 + 13104) = 0u;
  if (*(int *)a2 < 0)
    v22 = ~*(_DWORD *)a2;
  else
    v22 = *(_DWORD *)a2 | 0x80000000;
  *(_DWORD *)(v12 + 4) = v22 >> 1;
  v23 = *(_DWORD *)(a2 + 4);
  if (v23 < 0)
    v24 = ~v23;
  else
    v24 = v23 | 0x80000000;
  *(_DWORD *)(v12 + 8) = v24 >> 1;
  v25 = *(_DWORD *)(a2 + 8);
  if (v25 < 0)
    v26 = ~v25;
  else
    v26 = v25 | 0x80000000;
  *(_DWORD *)(v12 + 12) = v26 >> 1;
  v27 = *(_DWORD *)(a2 + 12);
  if (v27 < 0)
    v28 = ~v27;
  else
    v28 = v27 | 0x80000000;
  *(_DWORD *)(v12 + 16) = v28 >> 1;
  v29 = *(_DWORD *)(a2 + 16);
  if (v29 < 0)
    v30 = ~v29;
  else
    v30 = v29 | 0x80000000;
  *(_DWORD *)(v12 + 20) = v30 >> 1;
  v31 = *(_DWORD *)(a2 + 20);
  if (v31 < 0)
    v32 = ~v31;
  else
    v32 = v31 | 0x80000000;
  *(_DWORD *)(v12 + 24) = v32 >> 1;
  v76 = v21;
  *(_QWORD *)(v12 + 32) = v21;
  *(_QWORD *)(v12 + 48) = *(_QWORD *)(a2 + 24);
  setupOverlapFlags((_DWORD *)*(unsigned int *)v18, v18[2]);
  if (a3)
  {
    v33 = v18[664];
    if (v33)
    {
      v34 = (char *)v18;
      v35 = v18[2];
      v36 = v18[4];
      v37 = 1;
      v38 = *((unsigned int *)v34 + 1330);
      v40 = a4;
      v39 = a5;
      do
      {
        if (!v38)
          goto LABEL_40;
        v41 = v38 - 1;
      }
      while (!*(_DWORD *)(v33 - 4 + 4 * v38--));
      v37 = (v41 & 0x7FFFFFF) + 1;
LABEL_40:
      v43 = 0;
      v80 = (BitArray *)(v34 + 120);
      v74 = v37;
      v75 = v33;
      v83 = v11;
      while (1)
      {
        v44 = *(_DWORD *)(v33 + 4 * v43);
        if (v44)
          break;
LABEL_70:
        if (++v43 == v37)
          return v11;
      }
      while (1)
      {
        v45 = __clz(__rbit32(v44)) | (32 * v43);
        v46 = *(unsigned __int16 *)(v36 + 12 * v45 + 4);
        if (*(_WORD *)(v36 + 12 * v45 + 4))
        {
          v47 = v36 + 12 * v45;
          if ((_DWORD)v46 == 1)
            v48 = (unsigned __int16 *)(v47 + 8);
          else
            v48 = (unsigned __int16 *)(*(_QWORD *)&v34[16 * v46 + 152] + 4 * *(unsigned int *)(v47 + 8));
          v57 = *(_QWORD *)(v35 + 56 * v48[1] + 32);
          v59 = (unsigned int *)(*(_QWORD *)(v57 + 128) + 8 * *v48);
          v58 = *v59;
          v55 = v59[1];
          if ((v55 & 1) != 0)
            v60 = 152;
          else
            v60 = 160;
          v61 = *(_QWORD *)(v57 + v60) + 24 * v58;
          v87 = *(uint32x4_t *)v61;
          v88 = *(uint32x2_t *)(v61 + 16);
          v56 = v87.u32[3];
        }
        else
        {
          v49 = (unsigned int *)(v36 + 12 * v45);
          v50 = *v49;
          v51 = v40 + 24 * v50;
          v52 = (const float *)(v39 + 4 * v50);
          v53 = vld1q_dup_f32(v52);
          v54 = (int8x16_t)vsubq_f32(*(float32x4_t *)v51, v53);
          v54.i32[3] = vaddq_f32(*(float32x4_t *)v51, v53).i32[3];
          v87 = vshrq_n_u32((uint32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)v54), vmvnq_s8(v54), (int8x16_t)(*(_OWORD *)&v54 | __PAIR128__(0x8000000080000000, 0x8000000080000000))), 1uLL);
          *(float32x2_t *)v53.f32 = vadd_f32(*(float32x2_t *)(v51 + 16), *(float32x2_t *)v53.f32);
          v88 = vshr_n_u32((uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v53.f32), vmvn_s8(*(int8x8_t *)v53.f32), (int8x8_t)(v53.i64[0] | 0x8000000080000000)), 1uLL);
          v55 = v49[2];
          v56 = v87.u32[3];
        }
        if (v56 < *(_DWORD *)(v12 + 4)
          || *(_DWORD *)(v12 + 16) < v87.i32[0]
          || v88.i32[0] < *(_DWORD *)(v12 + 8)
          || *(_DWORD *)(v12 + 20) < v87.i32[1]
          || v88.i32[1] < *(_DWORD *)(v12 + 12)
          || *(_DWORD *)(v12 + 24) < v87.i32[2])
        {
          goto LABEL_67;
        }
        v62 = v55 >> 2;
        v63 = *((_QWORD *)v34 + 4);
        v84 = v63;
        v85 = v55 >> 2;
        if (v55 >> 7 >= *((_DWORD *)v34 + 32))
        {
          BitArray::resize(v80, v85);
          v63 = v84;
          v62 = v55 >> 2;
          v34 = *(char **)v86;
        }
        *(_DWORD *)(*(_QWORD *)v80 + 4 * (v55 >> 7)) |= 1 << v62;
        v64 = v63 + 12 * v62;
        v65 = *(unsigned __int16 *)(v64 + 4);
        v81 = *(unsigned __int16 *)(v64 + 4);
        v82 = (_WORD *)(v64 + 4);
        v66 = (unsigned int *)(v64 + 8);
        v79 = (unsigned int *)(v64 + 8);
        if (v81 == 1)
        {
          v65 = 1;
        }
        else
        {
          if (!*(_WORD *)(v64 + 4))
          {
            v67 = 0;
            goto LABEL_64;
          }
          v66 = (unsigned int *)(*(_QWORD *)&v34[16 * v65 + 152] + 4 * *v66);
        }
        v67 = v65;
        memcpy(__dst, v66, 4 * v65);
LABEL_64:
        v68 = Region::addObject(v76, (__int128 *)v87.i8, v55, v55 & 1);
        v69 = &__dst[v67];
        *v69 = v68;
        v69[1] = v83;
        if (v81 >= 2)
        {
          v70 = *v79;
          v71 = *(_QWORD *)v86 + 4 * v67;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v86 + 16 * v67 + 152) + 4 * v70) = *(_DWORD *)(v71 + 4264);
          *(_DWORD *)(v71 + 4264) = v70;
        }
        MBP::storeHandles(*(char **)v86, v84 + 12 * v85, v81 + 1, __dst);
        v34 = *(char **)v86;
        v11 = v83;
        *v82 = v81 + 1;
        v40 = a4;
        v39 = a5;
        v37 = v74;
        v33 = v75;
LABEL_67:
        v44 &= v44 - 1;
        if (!v44)
          goto LABEL_70;
      }
    }
  }
  return v11;
}

uint64_t physx::Bp::BroadPhaseMBP::removeRegion(physx::Bp::BroadPhaseMBP *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v36;
  BitArray *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD __src[257];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = (unsigned int *)*((_QWORD *)this + 17);
  if (*v8 <= a2)
  {
    v31 = physx::shdfnd::Foundation::mInstance;
    v32 = 2139;
LABEL_26:
    physx::shdfnd::Foundation::error(v31, 4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", v32, "MBP::removeRegion: invalid handle.", a6, a7, a8, v33);
    return 0;
  }
  v9 = *((_QWORD *)v8 + 2);
  v10 = v9 + 56 * a2;
  v13 = *(_QWORD *)(v10 + 32);
  v11 = (_QWORD *)(v10 + 32);
  v12 = v13;
  if (!v13)
  {
    v31 = physx::shdfnd::Foundation::mInstance;
    v32 = 2149;
    goto LABEL_26;
  }
  v34 = v11;
  v36 = *((_QWORD *)v8 + 2);
  v14 = v9 + 56 * a2;
  *(_OWORD *)(v14 + 4) = xmmword_2261A6E20;
  *(_QWORD *)(v14 + 20) = 0xC0000000C00000;
  v40 = *(unsigned int *)(v12 + 116);
  if ((_DWORD)v40)
  {
    v15 = 0;
    v39 = *(_QWORD *)(v12 + 128);
    v38 = (BitArray *)(v8 + 1328);
    while (1)
    {
      v16 = *(unsigned int *)(v39 + 8 * v15 + 4);
      if ((_DWORD)v16 != -1)
        break;
LABEL_22:
      if (++v15 == v40)
        goto LABEL_23;
    }
    v17 = *((_QWORD *)v8 + 2);
    v18 = *((_QWORD *)v8 + 4) + 12 * (*(_DWORD *)(v39 + 8 * v15 + 4) >> 2);
    v19 = (_DWORD *)(v18 + 8);
    v21 = (_WORD *)(v18 + 4);
    v20 = *(unsigned __int16 *)(v18 + 4);
    if (*(_WORD *)(v18 + 4) == 1)
    {
      v22 = 1;
      v23 = v18 + 8;
    }
    else
    {
      if (!*(_WORD *)(v18 + 4))
      {
        *v21 = 0;
LABEL_19:
        *v19 = v16;
        MBP::addToOutOfBoundsArray((uint64_t)v8, *(_DWORD *)v18);
        if ((v16 >> 7) >= v8[1330])
          BitArray::resize(v38, v16 >> 2);
        *(_DWORD *)(*(_QWORD *)v38 + 4 * (v16 >> 7)) |= 1 << (v16 >> 2);
        goto LABEL_22;
      }
      v23 = *(_QWORD *)&v8[4 * v20 + 38] + 4 * *v19;
      v22 = *(unsigned __int16 *)(v18 + 4);
    }
    v24 = 0;
    v25 = (unsigned __int16 *)(v23 + 2);
    v26 = v22;
    do
    {
      if (*(_QWORD *)(v17 + 56 * *v25 + 32) != v12)
        __src[v24++] = *(_DWORD *)(v25 - 1);
      v25 += 2;
      --v26;
    }
    while (v26);
    if (v20 >= 2)
    {
      v27 = *v19;
      v28 = *(_QWORD *)&v8[4 * v22 + 38];
      v29 = &v8[v22];
      *(_DWORD *)(v28 + 4 * v27) = v29[1066];
      v29[1066] = v27;
    }
    MBP::storeHandles((char *)v8, v18, v24, __src);
    *v21 = v24;
    if (v24)
      goto LABEL_22;
    goto LABEL_19;
  }
LABEL_23:
  Region::~Region((Region *)v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
  *v34 = 0;
  *(_QWORD *)(v36 + 56 * a2 + 48) = v8[2];
  v8[2] = a2;
  setupOverlapFlags((_DWORD *)*v8, *((_QWORD *)v8 + 2));
  return 1;
}

void physx::Bp::BroadPhaseMBP::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 40))(a6);
  physx::Bp::BroadPhaseMBP::setUpdateData(a1);
  MBP::findOverlaps(*(_QWORD **)(a1 + 136), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200));
  physx::Bp::BroadPhaseMBP::postUpdate((physx::Bp::BroadPhaseMBP *)a1);
}

void physx::Bp::BroadPhaseMBP::setUpdateData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  const float *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint32x2_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  _BOOL4 v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned __int32 v62;
  unsigned __int32 v63;
  unsigned __int32 v64;
  unsigned __int32 v65;
  uint64_t v66;
  unsigned __int32 v67;
  unsigned __int32 v68;
  unsigned __int32 v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  char v75;
  char v76;
  uint64_t v77;
  __int16 *v78;
  _QWORD *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int *v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  const float *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  uint64_t v106;
  _WORD *v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int *v113;
  char v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  char *v126;
  uint64_t v127;
  int v128;
  char *v129;
  unsigned int v130;
  uint64_t v131;
  float32x4_t *v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  __int16 v136;
  _WORD *v137;
  int *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  BOOL v145;
  uint64_t *v146;
  uint64_t v147;
  int v148;
  uint64_t *v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  int v156;
  uint64_t v157;
  float32x4_t *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  _BYTE *v167;
  unsigned int **v168;
  unsigned int *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  _DWORD *v191;
  int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  uint64_t (*v204)(uint64_t, uint64_t, const char *, const char *, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  __int128 *v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t (*v217)(uint64_t, uint64_t, const char *, const char *, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 *v223;
  __int128 v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  unsigned int v230;
  unsigned __int32 v231;
  uint64_t v232;
  unsigned int v233;
  char v234;
  unsigned int v235;
  _DWORD *v236;
  uint64_t v237;
  _WORD *v238;
  uint64_t v239;
  unsigned int *v240;
  __int16 v241;
  int v242;
  unsigned int v243[2];
  int v244;
  int v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  float32x4_t *v263;
  unsigned int *v264;
  uint32x2_t v265;
  char v266;
  unsigned int v267[4];
  unint64_t v268;
  uint64_t v269;
  _BYTE v270[20];
  unsigned int v271;
  _BYTE __src[32];
  __int128 v273;
  uint64_t v274;
  char v275;
  float32x4_t v276;
  uint64_t v277;

  MEMORY[0x24BDAC7A8](a1);
  v6 = v1;
  v277 = *MEMORY[0x24BDAC8D0];
  v247 = v7;
  v8 = *(_DWORD *)(v7 + 80);
  if (v8 > *(_DWORD *)(v1 + 152))
    physx::Bp::BroadPhaseMBP::allocateMappingArray((char *)v1, v8);
  *(_OWORD *)(v6 + 192) = *(_OWORD *)(v247 + 56);
  v9 = *(unsigned int **)(v247 + 32);
  v10 = *(_DWORD *)(v247 + 40);
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  v248 = v6;
  if (!v11)
  {
    v12 = *(_QWORD *)(v6 + 144);
    do
    {
      v264 = v9 + 1;
      v259 = *v9;
      v13 = *(unsigned int *)(v12 + 4 * v259);
      v14 = *(_QWORD *)(v6 + 136);
      v15 = v13 >> 2;
      v16 = *(_QWORD *)(v14 + 32);
      v17 = v16 + 12 * (*(_DWORD *)(v12 + 4 * v259) >> 2);
      v20 = *(unsigned __int16 *)(v17 + 4);
      v19 = (_WORD *)(v17 + 4);
      v18 = v20;
      if (v20)
      {
        v255 = *(unsigned int *)(v12 + 4 * *v9);
        v21 = v16 + 12 * v15;
        if ((_DWORD)v18 == 1)
        {
          v22 = v21 + 8;
          v23 = 1;
        }
        else
        {
          v22 = *(_QWORD *)(v14 + 16 * v18 + 152) + 4 * *(unsigned int *)(v21 + 8);
          v23 = v18;
        }
        v24 = *(_QWORD *)(v14 + 16);
        v25 = (unsigned __int16 *)(v22 + 2);
        v250 = v23;
        do
        {
          Region::removeObject(*(Region **)(v24 + 56 * *v25 + 32), *(v25 - 1));
          v25 += 2;
          --v23;
        }
        while (v23);
        v6 = v248;
        v13 = v255;
        if (v18 >= 2)
        {
          v26 = *(unsigned int *)(v16 + 12 * v15 + 8);
          v27 = v14 + 4 * v250;
          *(_DWORD *)(*(_QWORD *)(v14 + 16 * v250 + 152) + 4 * v26) = *(_DWORD *)(v27 + 4264);
          *(_DWORD *)(v27 + 4264) = v26;
        }
      }
      *v19 = 0;
      v28 = v16 + 12 * v15;
      *(_WORD *)(v28 + 6) |= 4u;
      *(_DWORD *)(v28 + 8) = *(_DWORD *)(v14 + 4);
      v29 = v13 >> 7;
      if ((v13 >> 7) >= *(_DWORD *)(v14 + 128))
        BitArray::resize((BitArray *)(v14 + 120), v15);
      v30 = 1 << (v13 >> 2);
      *(_DWORD *)(*(_QWORD *)(v14 + 120) + 4 * v29) |= v30;
      *(_DWORD *)(v14 + 4) = v15;
      if (v29 >= *(_DWORD *)(v14 + 144))
        BitArray::resize((BitArray *)(v14 + 136), v15);
      *(_DWORD *)(*(_QWORD *)(v14 + 136) + 4 * v29) |= v30;
      if (v29 >= *(_DWORD *)(v14 + 5320))
        BitArray::resize((BitArray *)(v14 + 5312), v15);
      *(_DWORD *)(*(_QWORD *)(v14 + 5312) + 4 * v29) &= ~v30;
      v12 = *(_QWORD *)(v6 + 144);
      *(_DWORD *)(v12 + 4 * v259) = -1;
      --v10;
      v9 = v264;
    }
    while (v10);
  }
  v31 = *(unsigned int **)v247;
  if (*(_QWORD *)v247)
  {
    v32 = *(_DWORD *)(v247 + 8);
    if (v32)
    {
      v237 = *(_QWORD *)(v247 + 56);
      v239 = *(_QWORD *)(v247 + 48);
      do
      {
        v35 = *v31;
        v33 = v31 + 1;
        v34 = v35;
        v36 = v239 + 24 * v35;
        v37 = (const float *)(*(_QWORD *)(v247 + 72) + 4 * v35);
        v38 = vld1q_dup_f32(v37);
        v39 = vsubq_f32(*(float32x4_t *)v36, v38);
        v40 = vaddq_f32(*(float32x4_t *)(v36 + 12), v38);
        v276 = v39;
        *(float32x4_t *)v270 = v40;
        v41 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)(*(_QWORD *)&vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v39.f32), vmvn_s8(*(int8x8_t *)v39.f32), (int8x8_t)(v39.i64[0] | 0x8000000080000000)) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0xF0000000FLL), 1uLL);
        *(uint32x2_t *)__src = v41;
        if (v39.i32[2] < 0)
          v42 = ~v39.i32[2];
        else
          v42 = v39.i32[2] | 0x80000000;
        v43 = ((v42 & 0xFFFFFFF0) - 16) >> 1;
        *(_DWORD *)&__src[8] = v43;
        v44 = *(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)(*(_QWORD *)&vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v270), vmvn_s8(*(int8x8_t *)v270), (int8x8_t)(*(_QWORD *)v270 | 0x8000000080000000)) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0x1000000010), 1uLL) | 0x200000002;
        *(_QWORD *)&__src[12] = v44;
        if (*(int *)&v270[8] < 0)
          v45 = ~*(_DWORD *)&v270[8];
        else
          v45 = *(_DWORD *)&v270[8] | 0x80000000;
        v46 = (((v45 & 0xFFFFFFF0) + 16) >> 1) | 2;
        *(_DWORD *)&__src[20] = v46;
        v47 = *(_DWORD *)(v237 + 4 * v34);
        v48 = *(uint64_t **)(v6 + 136);
        v49 = *((_DWORD *)v48 + 1);
        v251 = v33;
        v245 = v32;
        if (v49 == -1)
        {
          v49 = *((_DWORD *)v48 + 10);
          v52 = *((_DWORD *)v48 + 11) & 0x7FFFFFFF;
          v53 = v49 + 1;
          v54 = v49;
          if (v49 + 1 > v52)
          {
            if (v52)
              v55 = 2 * *((_DWORD *)v48 + 11);
            else
              v55 = 2;
            if (v53 <= v55)
              v56 = v55;
            else
              v56 = v53;
            v57 = v43;
            v58 = v46;
            v260 = v44;
            v265 = v41;
            physx::shdfnd::Array<MBP_Object,physx::shdfnd::ReflectionAllocator<MBP_Object>>::recreate(v48 + 4, v56);
            v44 = v260;
            v41 = v265;
            v46 = v58;
            v43 = v57;
            v54 = *((_DWORD *)v48 + 10);
          }
          v51 = 0;
          v50 = v48[4] + 12 * v54;
          *((_DWORD *)v48 + 10) = v53;
        }
        else
        {
          v50 = v48[4] + 12 * v49;
          *((_DWORD *)v48 + 1) = *(_DWORD *)(v50 + 8);
          v51 = (*(_WORD *)(v50 + 6) & 2) == 0;
        }
        *(_QWORD *)v243 = v34;
        v261 = v47;
        v241 = 2 * v51;
        v256 = (2 * v51) | (4 * v49) | (v47 == 0);
        v59 = *(unsigned int *)v48;
        if ((_DWORD)v59)
        {
          v60 = 0;
          v61 = 0;
          v62 = v41.u32[1];
          v63 = v41.i32[0];
          v64 = v44;
          v65 = HIDWORD(v44);
          v66 = v48[2] + 16;
          v266 = 1;
          do
          {
            if (*(_DWORD *)v66 >= v63)
            {
              v67 = *(_DWORD *)(v66 - 12);
              if (v64 >= v67)
              {
                v68 = *(_DWORD *)(v66 + 4);
                if (v68 >= v62)
                {
                  v69 = *(_DWORD *)(v66 - 8);
                  if (v65 >= v69)
                  {
                    v70 = *(_DWORD *)(v66 + 8);
                    if (v70 >= v43)
                    {
                      v71 = *(_DWORD *)(v66 - 4);
                      if (v46 >= v71)
                      {
                        v233 = v46;
                        v235 = v43;
                        v72 = *(_DWORD *)v66 < v64 || v71 > v43;
                        v231 = v65;
                        v75 = !v72 && v68 >= v65 && v70 >= v46;
                        if (v69 > v62)
                          v75 = 0;
                        if (v67 <= v63)
                          v76 = v75;
                        else
                          v76 = 0;
                        v266 &= v76;
                        v77 = *(_QWORD *)(v66 + 16);
                        if (*(_DWORD *)(v77 + 112) == 0xFFFF)
                        {
                          physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 2355, "MBP::addObject: 64K objects in single region reached. Some collisions might be lost.", v2, v3, v4, v229);
                        }
                        else
                        {
                          v230 = v61 + 1;
                          v78 = &v276.i16[2 * v61];
                          *v78 = Region::addObject(v77, (__int128 *)__src, v256, v261 == 0);
                          v78[1] = v60;
                          v61 = v230;
                        }
                        v46 = v233;
                        v43 = v235;
                        v65 = v231;
                      }
                    }
                  }
                }
              }
            }
            ++v60;
            v66 += 56;
          }
          while (v59 != v60);
        }
        else
        {
          v61 = 0;
          v266 = 1;
        }
        MBP::storeHandles((char *)v48, v50, v61, &v276);
        *(_WORD *)(v50 + 4) = v61;
        v79 = v48 + 664;
        v80 = v49 >> 5;
        v81 = *((_DWORD *)v48 + 1330);
        v82 = 1 << v49;
        if (v61 && (v266 & 1) != 0)
        {
          v83 = v256;
          if (v80 >= v81)
            BitArray::resize((BitArray *)(v48 + 664), v49);
          *(_DWORD *)(*v79 + 4 * v80) &= ~v82;
        }
        else
        {
          v83 = v256;
          if (v80 >= v81)
            BitArray::resize((BitArray *)(v48 + 664), v49);
          *(_DWORD *)(*v79 + 4 * v80) |= v82;
          if (!v61)
          {
            *(_DWORD *)(v50 + 8) = v256;
            MBP::addToOutOfBoundsArray((uint64_t)v48, v243[0]);
          }
        }
        v6 = v248;
        if (v261)
        {
          if (v80 >= *((_DWORD *)v48 + 32))
            BitArray::resize((BitArray *)(v48 + 15), v49);
          *(_DWORD *)(v48[15] + 4 * v80) |= v82;
        }
        *(_WORD *)(v50 + 6) = v241;
        *(_DWORD *)v50 = v243[0];
        *(_DWORD *)(*(_QWORD *)(v248 + 144) + 4 * *(_QWORD *)v243) = v83;
        v32 = v245 - 1;
        v31 = v251;
      }
      while (v245 != 1);
    }
  }
  v84 = *(unsigned int **)(v247 + 16);
  if (v84)
  {
    v85 = *(_DWORD *)(v247 + 24);
    if (v85)
    {
      v232 = *(_QWORD *)(v247 + 48);
      do
      {
        v244 = v85;
        v87 = *v84++;
        v86 = v87;
        v88 = v232 + 24 * v87;
        v89 = (const float *)(*(_QWORD *)(v247 + 72) + 4 * v87);
        v90 = vld1q_dup_f32(v89);
        v91 = vsubq_f32(*(float32x4_t *)v88, v90);
        v92 = vaddq_f32(*(float32x4_t *)(v88 + 12), v90);
        v276 = v91;
        *(float32x4_t *)__src = v92;
        *(uint32x2_t *)&v5 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)(*(_QWORD *)&vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v91.f32), vmvn_s8(*(int8x8_t *)v91.f32), (int8x8_t)(v91.i64[0] | 0x8000000080000000)) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0xF0000000FLL), 1uLL);
        *(_QWORD *)v270 = v5;
        if (v91.i32[2] < 0)
          v93 = ~v91.i32[2];
        else
          v93 = v91.i32[2] | 0x80000000;
        v94 = ((v93 & 0xFFFFFFF0) - 16) >> 1;
        *(_DWORD *)&v270[8] = v94;
        v95 = *(_QWORD *)&vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)(*(_QWORD *)&vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)__src), vmvn_s8(*(int8x8_t *)__src), (int8x8_t)(*(_QWORD *)__src | 0x8000000080000000)) & 0xFFFFFFF0FFFFFFF0), (int32x2_t)0x1000000010), 1uLL) | 0x200000002;
        *(_QWORD *)&v270[12] = v95;
        if (*(int *)&__src[8] < 0)
          v96 = ~*(_DWORD *)&__src[8];
        else
          v96 = *(_DWORD *)&__src[8] | 0x80000000;
        v97 = (((v96 & 0xFFFFFFF0) + 16) >> 1) | 2;
        v271 = v97;
        v98 = *(unsigned int **)(v6 + 136);
        v99 = *(unsigned int *)(*(_QWORD *)(v6 + 144) + 4 * v86);
        v100 = *v98;
        v101 = *((_QWORD *)v98 + 2);
        v257 = *((_QWORD *)v98 + 4);
        v262 = (uint64_t)v98;
        v102 = v98 + 30;
        if (*(_DWORD *)(*(_QWORD *)(v6 + 144) + 4 * v86) >> 7 >= v98[32])
        {
          v103 = v6;
          v104 = v84;
          v105 = v94;
          *(_OWORD *)v267 = v5;
          v252 = v95;
          BitArray::resize((BitArray *)(v98 + 30), v99 >> 2);
          v95 = v252;
          v5 = *(_OWORD *)v267;
          v94 = v105;
          v84 = v104;
          v6 = v103;
        }
        v242 = 1 << (v99 >> 2);
        v246 = v99 >> 7;
        *(_DWORD *)(*v102 + 4 * (v99 >> 7)) |= v242;
        v268 = v99 >> 2;
        v106 = v257 + 12 * (v99 >> 2);
        v108 = *(unsigned __int16 *)(v106 + 4);
        v107 = (_WORD *)(v106 + 4);
        v253 = v108;
        if (v108 == 1)
        {
          v109 = v257 + 12 * v268;
          v110 = *(unsigned __int16 *)(v109 + 10);
          if (!*(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 40)
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 4) <= v5
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 8) <= DWORD1(v5)
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 12) <= v94
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 16) >= v95
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 20) >= HIDWORD(v95)
            && *(_DWORD *)(v101 + 56 * *(unsigned __int16 *)(v109 + 10) + 24) >= v97)
          {
            if (v246 >= *(_DWORD *)(v262 + 5320))
              BitArray::resize((BitArray *)(v262 + 5312), v268);
            *(_DWORD *)(*(_QWORD *)(v262 + 5312) + 4 * v246) &= ~v242;
            Region::updateObject(*(_QWORD *)(v101 + 56 * v110 + 32), (__int128 *)v270, *(unsigned __int16 *)(v109 + 8));
            v142 = v244;
            goto LABEL_169;
          }
        }
        if ((_DWORD)v100)
        {
          v111 = 0;
          v112 = 0;
          v113 = (unsigned int *)(v101 + 12);
          v114 = 1;
          v115 = v99 >> 2;
          v116 = v253;
          do
          {
            v117 = v113[1];
            if (v117 >= v5)
            {
              v118 = *(v113 - 2);
              if (v95 >= v118)
              {
                v119 = v113[2];
                if (v119 >= DWORD1(v5))
                {
                  v120 = *(v113 - 1);
                  if (HIDWORD(v95) >= v120)
                  {
                    v121 = v113[3];
                    if (v121 >= v94 && v97 >= *v113)
                    {
                      v122 = 0;
                      if (v118 <= v5 && v120 <= DWORD1(v5))
                        v122 = *v113 <= v94 && v117 >= v95 && v119 >= HIDWORD(v95) && v121 >= v97;
                      v114 &= v122;
                      v276.i32[v112++] = v111;
                    }
                  }
                }
              }
            }
            ++v111;
            v113 += 14;
          }
          while (v100 != v111);
        }
        else
        {
          v112 = 0;
          v114 = 1;
          v115 = v99 >> 2;
          v116 = v253;
        }
        v238 = v107;
        v240 = v84;
        v234 = v114;
        v236 = (_DWORD *)(v257 + 12 * v115 + 8);
        if ((_DWORD)v116 == 1)
        {
          v116 = 1;
          v126 = (char *)(v257 + 12 * v115 + 8);
        }
        else
        {
          v126 = (char *)(*(_QWORD *)(v262 + 16 * v116 + 152) + 4 * *(unsigned int *)(v257 + 12 * v115 + 8));
          if (!(_DWORD)v116)
          {
            v128 = 0;
            if (!v112)
              goto LABEL_150;
            goto LABEL_146;
          }
        }
        v127 = 0;
        v128 = 0;
        do
        {
          v129 = &v126[4 * v127];
          v130 = *((unsigned __int16 *)v129 + 1);
          if (v112)
          {
            v131 = v112;
            v132 = &v276;
            while (v132->i32[0] != v130)
            {
              v132 = (float32x4_t *)((char *)v132 + 4);
              if (!--v131)
                goto LABEL_142;
            }
            v132->i32[0] = v276.i32[--v112];
            Region::updateObject(*(_QWORD *)(v101 + 56 * v130 + 32), (__int128 *)v270, *(unsigned __int16 *)v129);
            *(_DWORD *)&__src[4 * v128++] = *(_DWORD *)v129;
          }
          else
          {
LABEL_142:
            Region::removeObject(*(Region **)(v101 + 56 * *((unsigned __int16 *)v129 + 1) + 32), *(unsigned __int16 *)v129);
          }
          ++v127;
        }
        while (v127 != v116);
        if (!v112)
        {
LABEL_150:
          v6 = v248;
          goto LABEL_151;
        }
LABEL_146:
        v133 = v112;
        v134 = (unsigned int *)&v276;
        v6 = v248;
        do
        {
          v135 = *v134++;
          v136 = Region::addObject(*(_QWORD *)(v101 + 56 * v135 + 32), (__int128 *)v270, v99, v99 & 1);
          v137 = &__src[4 * v128];
          *v137 = v136;
          v137[1] = v135;
          ++v128;
          --v133;
        }
        while (v133);
LABEL_151:
        v138 = (int *)(v257 + 12 * v268);
        if (v128 == (_DWORD)v253)
        {
          v84 = v240;
          v139 = v99 >> 7;
          if (!(_DWORD)v253)
          {
            *v238 = 0;
            v143 = 1 << (v99 >> 2);
            v142 = v244;
            goto LABEL_161;
          }
          memcpy(v126, __src, 4 * v253);
        }
        else
        {
          v84 = v240;
          v139 = v99 >> 7;
          if (v253 >= 2)
          {
            v140 = *v236;
            v141 = v262 + 4 * v253;
            *(_DWORD *)(*(_QWORD *)(v262 + 16 * v253 + 152) + 4 * v140) = *(_DWORD *)(v141 + 4264);
            *(_DWORD *)(v141 + 4264) = v140;
          }
          MBP::storeHandles((char *)v262, (uint64_t)v138, v128, __src);
        }
        v143 = 1 << (v99 >> 2);
        v142 = v244;
        *v238 = v128;
        if ((_DWORD)v253 && !v128)
        {
          *v236 = v99;
          v144 = v262;
          MBP::addToOutOfBoundsArray(v262, *v138);
          goto LABEL_165;
        }
LABEL_161:
        v145 = v128 == 0;
        v144 = v262;
        if (!v145 && (v234 & 1) != 0)
        {
          v146 = (uint64_t *)(v262 + 5312);
          if (v139 >= *(_DWORD *)(v262 + 5320))
            BitArray::resize((BitArray *)(v262 + 5312), v268);
          v147 = *v146;
          v148 = *(_DWORD *)(*v146 + 4 * v139) & ~v143;
          goto LABEL_168;
        }
LABEL_165:
        v149 = (uint64_t *)(v144 + 5312);
        if (v139 >= *(_DWORD *)(v144 + 5320))
          BitArray::resize((BitArray *)(v144 + 5312), v268);
        v147 = *v149;
        v148 = *(_DWORD *)(*v149 + 4 * v139) | v143;
LABEL_168:
        *(_DWORD *)(v147 + 4 * v139) = v148;
LABEL_169:
        v85 = v142 - 1;
      }
      while (v85);
    }
  }
  v150 = *(unsigned int **)(v6 + 136);
  v151 = *v150;
  if (!(_DWORD)v151)
    return;
  v152 = 0;
  v153 = *((_QWORD *)v150 + 2);
  v249 = v153;
  v258 = *v150;
  do
  {
    v154 = *(_QWORD *)(v153 + 56 * v152 + 32);
    if (!v154)
      goto LABEL_291;
    v155 = *(_DWORD *)(v154 + 192);
    if (v155)
    {
      if (!*(_BYTE *)(v154 + 280))
      {
        v156 = *(_DWORD *)(v154 + 196);
        goto LABEL_234;
      }
    }
    else if (!*(_BYTE *)(v154 + 280))
    {
      goto LABEL_291;
    }
    *(_BYTE *)(v154 + 280) = 0;
    v157 = *(unsigned int *)(v154 + 140);
    if (!(_DWORD)v157)
    {
      if (*(_QWORD *)(v154 + 200))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *(_QWORD *)(v154 + 200) = 0;
      *(_DWORD *)(v154 + 208) = 0;
      goto LABEL_233;
    }
    if ((16 * v157) > 0x2000)
      v158 = (float32x4_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24);
    else
      v158 = &v276;
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v163 = &v158->u32[v157];
    v164 = (char *)v158 + 12 * v157;
    v165 = (char *)v158 + 8 * v157;
    do
    {
      if (v160 >> 5 >= *(_DWORD *)(v154 + 208))
      {
        v166 = *(_QWORD *)(v154 + 152);
      }
      else
      {
        v166 = *(_QWORD *)(v154 + 152);
        if (((*(_DWORD *)(*(_QWORD *)(v154 + 200) + 4 * (v160 >> 5)) >> v160) & 1) != 0)
        {
          v158->i32[v162] = *(_DWORD *)(v166 + v159);
          *(_DWORD *)&v165[4 * v162++] = v160;
          goto LABEL_194;
        }
      }
      v163[v161] = *(_DWORD *)(v166 + v159);
      *(_DWORD *)&v164[4 * v161++] = v160;
LABEL_194:
      ++v160;
      v159 += 24;
    }
    while (v157 != v160);
    v274 = 0;
    *(_OWORD *)&__src[16] = 0u;
    v273 = 0u;
    v275 = 1;
    *(_DWORD *)&__src[8] = 0x80000000;
    if (v162 >= 0x400)
      v167 = __src;
    else
      v167 = (_BYTE *)(v154 + 216);
    *(_QWORD *)__src = &off_24ED90D50;
    if (v162 >= 0x400)
      v168 = (unsigned int **)&__src[16];
    else
      v168 = (unsigned int **)(v154 + 232);
    v263 = v158;
    physx::Cm::RadixSortBuffered::Sort((uint64_t)v167);
    v169 = *v168;
    v170 = *(unsigned int *)(v154 + 136);
    v269 = v152;
    if ((_DWORD)v170)
    {
      v171 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                              + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v170, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 791);
      if (*(_DWORD *)(v154 + 136) != -2)
      {
        v172 = 24 * (*(_DWORD *)(v154 + 136) + 2);
        goto LABEL_205;
      }
      v175 = 0;
    }
    else
    {
      v171 = 0;
      v172 = 48;
LABEL_205:
      v254 = v172;
      v173 = physx::shdfnd::Foundation::mInstance;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
        v174 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::getName() [T = physx::Bp::IAABB]";
      else
        v174 = "<allocation names disabled>";
      v175 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v173 + 24)
                                                                                              + 16))(v173 + 24, v254, v174, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 793);
    }
    v176 = -1;
    *(_DWORD *)(v175 + 24 * v157) = -1;
    *(_DWORD *)(v175 + 24 * (v157 + 1)) = -1;
    if (v162)
      v176 = v263->u32[*v169];
    if (v161)
      v177 = *v163;
    else
      v177 = -1;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = v175;
    do
    {
      if (v176 >= v177)
      {
        v182 = *(unsigned int *)&v164[4 * v180++];
        if (v180 >= v161)
          v177 = -1;
        else
          v177 = v163[v180];
      }
      else
      {
        v182 = *(unsigned int *)&v165[4 * v169[v179++]];
        if (v179 >= v162)
          v176 = -1;
        else
          v176 = v263->u32[v169[v179]];
      }
      v183 = *(unsigned __int16 *)(*(_QWORD *)(v154 + 168) + 2 * v182);
      v184 = *(_QWORD *)(v154 + 152) + 24 * v182;
      v185 = *(_OWORD *)v184;
      *(_QWORD *)(v181 + 16) = *(_QWORD *)(v184 + 16);
      *(_OWORD *)v181 = v185;
      v181 += 24;
      *(_WORD *)(v171 + 2 * v178) = v183;
      *(_DWORD *)(*(_QWORD *)(v154 + 128) + 8 * v183) = v178++;
    }
    while (v157 != v178);
    if (v263 != &v276)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v151 = v258;
    v153 = v249;
    if (*(_QWORD *)(v154 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v154 + 152) = v175;
    if (*(_QWORD *)(v154 + 168))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v154 + 168) = v171;
    v152 = v269;
    if (*(_QWORD *)(v154 + 200))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v154 + 200) = 0;
    *(_DWORD *)(v154 + 208) = 0;
    *(_QWORD *)__src = &off_24ED90D50;
    physx::Cm::RadixSortBuffered::reset((uint64_t)__src);
LABEL_233:
    v156 = 0;
    v155 = *(_DWORD *)(v154 + 148);
    *(_BYTE *)(v154 + 281) = 1;
LABEL_234:
    *(_DWORD *)(v154 + 192) = 0;
    if (v156 != v155)
      *(_BYTE *)(v154 + 281) = 1;
    LODWORD(v186) = *(_DWORD *)(v154 + 148);
    if (!(_DWORD)v186)
    {
      *(_BYTE *)(v154 + 48) = 0;
      *(_DWORD *)(v154 + 196) = 0;
LABEL_249:
      *(_BYTE *)(v154 + 281) = 1;
      goto LABEL_290;
    }
    v187 = *(_QWORD *)(v154 + 160);
    v188 = *(_QWORD *)(v154 + 184);
    if (v155)
    {
      v189 = v155;
      v190 = *(int **)(v154 + 160);
      v191 = *(_DWORD **)(v154 + 184);
      do
      {
        v192 = *v190;
        v190 += 6;
        *v191++ = v192;
        --v189;
      }
      while (v189);
    }
    v193 = v186 - v155;
    v194 = *(unsigned __int8 *)(v154 + 281);
    if ((_DWORD)v186 != v155 && *(_BYTE *)(v154 + 281))
    {
      v195 = v155;
      v196 = v186 - v155;
      do
      {
        *(_DWORD *)(v188 + 4 * v195) = *(_DWORD *)(v187 + 24 * v195);
        ++v195;
        --v196;
      }
      while (v196);
    }
    *(_DWORD *)(v154 + 192) = v155;
    if (!v155)
    {
      LOBYTE(v186) = 0;
      *(_BYTE *)(v154 + 48) = 0;
      *(_DWORD *)(v154 + 196) = 0;
      goto LABEL_249;
    }
    *(_DWORD *)(v154 + 196) = v155;
    if ((_DWORD)v186 == v155)
    {
      v197 = 0;
      v198 = 0;
      *(_BYTE *)(v154 + 281) = 1;
    }
    else if (v194)
    {
      physx::Cm::RadixSortBuffered::Sort(v154 + 216);
      v199 = *(_QWORD *)(v154 + 232);
      v197 = *(_QWORD *)(v154 + 13096);
      if (*(_DWORD *)(v154 + 13088) < v193)
      {
        if (v197 != v154 + 12576 && v197)
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, *(_QWORD *)(v154 + 13096));
          *(_QWORD *)(v154 + 13096) = 0;
        }
        v200 = *(_QWORD *)(v154 + 13104);
        if (v200 != v154 + 288 && v200)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          *(_QWORD *)(v154 + 13104) = 0;
        }
        if ((v193 + 2) > 0x100)
        {
          v201 = v152;
          v202 = physx::shdfnd::Foundation::mInstance;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
            v203 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::getName() [T = physx::Bp::IAABB]";
          else
            v203 = "<allocation names disabled>";
          v204 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v202 + 24) + 16);
          v205 = v202 + 24;
          v152 = v201;
          *(_QWORD *)(v154 + 13104) = v204(v205, 24 * (v193 + 2), v203, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 1260);
          v153 = v249;
          v197 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, 2 * v193, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 1261);
        }
        else
        {
          *(_QWORD *)(v154 + 13104) = v154 + 288;
          v197 = v154 + 12576;
        }
        *(_QWORD *)(v154 + 13096) = v197;
        *(_DWORD *)(v154 + 13088) = v193;
      }
      v206 = 0;
      v198 = *(_QWORD *)(v154 + 13104);
      v207 = v198;
      do
      {
        v208 = *(_DWORD *)(v199 + 4 * v206) + v155;
        v209 = (__int128 *)(v187 + 24 * v208);
        v210 = *v209;
        *(_QWORD *)(v207 + 16) = *((_QWORD *)v209 + 2);
        *(_OWORD *)v207 = v210;
        v207 += 24;
        *(_WORD *)(v197 + 2 * v206++) = *(_WORD *)(*(_QWORD *)(v154 + 176) + 2 * v208);
      }
      while (v193 != v206);
      *(_DWORD *)(v198 + 24 * v193) = -1;
      *(_DWORD *)(v198 + 24 * (v193 + 1)) = -1;
      *(_BYTE *)(v154 + 281) = 0;
    }
    else
    {
      v198 = *(_QWORD *)(v154 + 13104);
      v197 = *(_QWORD *)(v154 + 13096);
    }
    physx::Cm::RadixSortBuffered::Sort(v154 + 216);
    v211 = *(_QWORD *)(v154 + 232);
    v212 = *(_QWORD *)(v154 + 13112);
    if (*(_DWORD *)(v154 + 13092) < v155)
    {
      v213 = v154 + 6432;
      if (v212 != v154 + 6432 && v212)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *(_QWORD *)(v154 + 13112) = 0;
      }
      if (v155 + 2 >= 0x101)
      {
        v214 = v152;
        v215 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v216 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::IAABB>::getName() [T = physx::Bp::IAABB]";
        else
          v216 = "<allocation names disabled>";
        v217 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v215 + 24) + 16);
        v218 = v215 + 24;
        v152 = v214;
        v153 = v249;
        v213 = v217(v218, 24 * (v155 + 2), v216, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseMBP.cpp", 1277);
      }
      *(_QWORD *)(v154 + 13112) = v213;
      *(_DWORD *)(v154 + 13092) = v155;
      v212 = v213;
    }
    v219 = 0;
    v186 = *(_QWORD *)(v154 + 240);
    if (v155 <= 1)
      v220 = 1;
    else
      v220 = v155;
    v221 = v212;
    do
    {
      v222 = *(unsigned int *)(v211 + 4 * v219);
      v223 = (__int128 *)(v187 + 24 * v222);
      v224 = *v223;
      *(_QWORD *)(v221 + 16) = *((_QWORD *)v223 + 2);
      *(_OWORD *)v221 = v224;
      v221 += 24;
      *(_WORD *)(v186 + 2 * v219++) = *(_WORD *)(*(_QWORD *)(v154 + 176) + 2 * v222);
    }
    while (v220 != v219);
    *(_DWORD *)(v212 + 24 * v155) = -1;
    *(_DWORD *)(v212 + 24 * (v155 + 1)) = -1;
    v225 = *(_QWORD *)(v154 + 128);
    *(_QWORD *)v154 = v225;
    *(_QWORD *)(v154 + 8) = v212;
    *(_QWORD *)(v154 + 16) = v198;
    *(_QWORD *)(v154 + 24) = v186;
    *(_QWORD *)(v154 + 32) = v197;
    *(_DWORD *)(v154 + 40) = v155;
    *(_DWORD *)(v154 + 44) = v193;
    *(_BYTE *)(v154 + 48) = 1;
    LODWORD(v186) = *(_DWORD *)(v154 + 192);
    if ((_DWORD)v186)
    {
      v226 = *(_DWORD *)(v154 + 140);
      v151 = v258;
      if (v226)
      {
        v227 = *(_QWORD *)(v154 + 13112);
        *(_QWORD *)(v154 + 56) = v225;
        *(_DWORD *)(v154 + 64) = v186;
        *(_DWORD *)(v154 + 68) = v226;
        v186 = *(_QWORD *)(v154 + 152);
        *(_QWORD *)(v154 + 72) = v227;
        *(_QWORD *)(v154 + 80) = v186;
        v228 = *(_QWORD *)(v154 + 240);
        LOBYTE(v186) = 1;
        *(_QWORD *)(v154 + 88) = *(_QWORD *)(v154 + 168);
        *(_QWORD *)(v154 + 96) = v228;
      }
      else
      {
        LOBYTE(v186) = 0;
      }
    }
    else
    {
      v151 = v258;
    }
LABEL_290:
    *(_BYTE *)(v154 + 104) = v186;
LABEL_291:
    ++v152;
  }
  while (v152 != v151);
}

void physx::Bp::BroadPhaseMBP::postUpdate(physx::Bp::BroadPhaseMBP *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  char *v25;
  unint64_t v26;

  v2 = (unsigned int *)*((_QWORD *)this + 17);
  v3 = *v2;
  if ((_DWORD)v3)
  {
    v4 = *((_QWORD *)v2 + 2) + 32;
    do
    {
      if (*(_QWORD *)v4)
        *(_DWORD *)(*(_QWORD *)v4 + 192) = 0;
      v4 += 56;
      --v3;
    }
    while (v3);
  }
  v5 = v2[14];
  if (v5)
  {
    v6 = 0;
    v7 = *((_QWORD *)v2 + 4);
    v24 = (char *)this + 176;
    v25 = (char *)this + 160;
    do
    {
      v8 = (unsigned int *)(*((_QWORD *)v2 + 10) + 8 * v6);
      v9 = *v8;
      v10 = v8[1];
      if ((v9 & 0x80000000) != 0)
      {
        v18 = *(_DWORD *)(v7 + 12 * ((v9 >> 2) & 0x1FFFFFFF));
        v19 = *(_DWORD *)(v7 + 12 * ((v10 >> 2) & 0x1FFFFFFF));
        if (v18 >= v19)
          v20 = *(_DWORD *)(v7 + 12 * ((v10 >> 2) & 0x1FFFFFFF));
        else
          v20 = *(_DWORD *)(v7 + 12 * ((v9 >> 2) & 0x1FFFFFFF));
        if (v18 <= v19)
          v18 = *(_DWORD *)(v7 + 12 * ((v10 >> 2) & 0x1FFFFFFF));
        v26 = __PAIR64__(v18, v20);
        v21 = *((unsigned int *)this + 42);
        if ((*((_DWORD *)this + 43) & 0x7FFFFFFFu) <= v21)
        {
          physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack((uint64_t)v25, &v26);
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v21) = v26;
          ++*((_DWORD *)this + 42);
        }
        *(_QWORD *)v8 &= 0x7FFFFFFF7FFFFFFFuLL;
      }
      else if ((v10 & 0x80000000) != 0)
      {
        v8[1] = v10 & 0x7FFFFFFF;
      }
      else
      {
        v11 = v9 >> 7;
        v12 = v2[32];
        if (*v8 >> 7 < v12 && ((*(_DWORD *)(*((_QWORD *)v2 + 15) + 4 * v11) >> (v9 >> 2)) & 1) != 0
          || v8[1] >> 7 < v12
          && ((*(_DWORD *)(*((_QWORD *)v2 + 15) + 4 * (v10 >> 7)) >> (v10 >> 2)) & 1) != 0)
        {
          v13 = v2[36];
          if ((v11 >= v13
             || ((*(_DWORD *)(*((_QWORD *)v2 + 17) + 4 * v11) >> (v9 >> 2)) & 1) == 0)
            && (v8[1] >> 7 >= v13
             || ((*(_DWORD *)(*((_QWORD *)v2 + 17) + 4 * (v10 >> 7)) >> (v10 >> 2)) & 1) == 0))
          {
            v14 = *(_DWORD *)(v7 + 12 * (*v8 >> 2));
            v15 = *(_DWORD *)(v7 + 12 * (v8[1] >> 2));
            if (v14 >= v15)
              v16 = *(_DWORD *)(v7 + 12 * (v8[1] >> 2));
            else
              v16 = *(_DWORD *)(v7 + 12 * (*v8 >> 2));
            if (v14 <= v15)
              v14 = *(_DWORD *)(v7 + 12 * (v8[1] >> 2));
            v26 = __PAIR64__(v14, v16);
            v17 = *((unsigned int *)this + 46);
            if ((*((_DWORD *)this + 47) & 0x7FFFFFFFu) <= v17)
            {
              physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack((uint64_t)v24, &v26);
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v17) = v26;
              ++*((_DWORD *)this + 46);
            }
          }
          v22 = ((unsigned __int16)v9 | ((unsigned __int16)v10 << 16))
              + ~(((unsigned __int16)v9 | ((unsigned __int16)v10 << 16)) << 15);
          v23 = (9 * (v22 ^ (v22 >> 10))) ^ ((9 * (v22 ^ (v22 >> 10))) >> 6);
          physx::Bp::PairManagerData::removePair((uint64_t)(v2 + 12), v9, v10, v2[13] & ((v23 + ~(v23 << 11)) ^ ((v23 + ~(v23 << 11)) >> 16)), v6);
          --v5;
          continue;
        }
      }
      ++v6;
    }
    while (v6 < v5);
  }
  physx::Bp::PairManagerData::shrinkMemory(v2 + 12);
  bzero(*((void **)v2 + 15), 4 * v2[32]);
}

void physx::Bp::BroadPhaseMBP::singleThreadedUpdate(uint64_t a1)
{
  physx::Bp::BroadPhaseMBP::setUpdateData(a1);
  MBP::findOverlaps(*(_QWORD **)(a1 + 136), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200));
  physx::Bp::BroadPhaseMBP::postUpdate((physx::Bp::BroadPhaseMBP *)a1);
}

_QWORD *physx::MBPUpdateWorkTask::runInternal(physx::MBPUpdateWorkTask *this)
{
  return MBP::findOverlaps(*(_QWORD **)(*((_QWORD *)this + 5) + 136), *(_QWORD *)(*((_QWORD *)this + 5) + 192), *(_QWORD *)(*((_QWORD *)this + 5) + 200));
}

void physx::MBPPostUpdateWorkTask::runInternal(physx::Bp::BroadPhaseMBP **this)
{
  physx::Bp::BroadPhaseMBP::postUpdate(this[5]);
}

uint64_t physx::Bp::BroadPhaseMBP::getNbCreatedPairs(physx::Bp::BroadPhaseMBP *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t physx::Bp::BroadPhaseMBP::getCreatedPairs(physx::Bp::BroadPhaseMBP *this)
{
  return *((_QWORD *)this + 20);
}

uint64_t physx::Bp::BroadPhaseMBP::getNbDeletedPairs(physx::Bp::BroadPhaseMBP *this)
{
  return *((unsigned int *)this + 46);
}

uint64_t physx::Bp::BroadPhaseMBP::getDeletedPairs(physx::Bp::BroadPhaseMBP *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t physx::Bp::BroadPhaseMBP::getNbOutOfBoundsObjects(physx::Bp::BroadPhaseMBP *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 17) + 5304);
}

uint64_t physx::Bp::BroadPhaseMBP::getOutOfBoundsObjects(physx::Bp::BroadPhaseMBP *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 17) + 5296);
}

uint64_t physx::Bp::BroadPhaseMBP::freeBuffers(physx::Bp::BroadPhaseMBP *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 17);
  if (*(_QWORD *)(v2 + 136))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 5304) = 0;
  freeBuffer((uint64_t)this + 160);
  return freeBuffer((uint64_t)this + 176);
}

uint64_t freeBuffer(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = result;
  if (*(_DWORD *)(result + 8) < 0x401u)
  {
    *(_DWORD *)(result + 8) = 0;
  }
  else
  {
    v2 = 0xC0000000C0000000;
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::resize(result, 0, &v2);
    result = physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate(v1, *(_DWORD *)(v1 + 8));
    if ((*(_DWORD *)(v1 + 12) & 0x7FFFFC00) == 0)
      return physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate(v1, 0x400u);
  }
  return result;
}

uint64_t physx::Bp::BroadPhaseMBP::shiftOrigin(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  const float *v20;
  float32x4_t v21;
  int32x4_t v22;
  uint32x4_t v23;
  uint32x2_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(unsigned int **)(result + 136);
  v5 = *v4;
  v6 = *((_QWORD *)v4 + 2);
  if ((_DWORD)v5)
  {
    v7 = *(float32x2_t *)(a2 + 4);
    *(int32x2_t *)v8.f32 = vzip1_s32(*(int32x2_t *)a2, (int32x2_t)v7);
    v8.i32[2] = vdup_lane_s32((int32x2_t)v7, 1).u32[0];
    v8.i32[3] = v8.i32[0];
    v9 = v6 + 20;
    do
    {
      if (*(_QWORD *)(v9 + 12))
      {
        v10 = vaddq_s32(*(int32x4_t *)(v9 - 16), *(int32x4_t *)(v9 - 16));
        v11 = (int32x4_t)vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v10), (int8x16_t)(*(_OWORD *)&v10 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vmvnq_s8((int8x16_t)v10)), v8);
        *(uint32x4_t *)(v9 - 16) = vshrq_n_u32((uint32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v11), vmvnq_s8((int8x16_t)v11), (int8x16_t)(*(_OWORD *)&v11 | __PAIR128__(0x8000000080000000, 0x8000000080000000))), 1uLL);
        *(int32x2_t *)v11.i8 = vadd_s32(*(int32x2_t *)v9, *(int32x2_t *)v9);
        *(float32x2_t *)v11.i8 = vsub_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v11.i8), (int8x8_t)(v11.i64[0] & 0x7FFFFFFF7FFFFFFFLL), vmvn_s8(*(int8x8_t *)v11.i8)), v7);
        *(uint32x2_t *)v9 = vshr_n_u32((uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v11.i8), vmvn_s8(*(int8x8_t *)v11.i8), (int8x8_t)(v11.i64[0] | 0x8000000080000000)), 1uLL);
      }
      v9 += 56;
      --v5;
    }
    while (v5);
  }
  v12 = v4[10];
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *((_QWORD *)v4 + 4);
    do
    {
      result = *(unsigned __int16 *)(v14 + 12 * v13 + 4);
      if (*(_WORD *)(v14 + 12 * v13 + 4))
      {
        v15 = (unsigned int *)(v14 + 12 * v13);
        v18 = *v15;
        v16 = v15 + 2;
        v17 = v18;
        if ((_DWORD)result == 1)
          result = 1;
        else
          v16 = (unsigned int *)(*(_QWORD *)&v4[4 * result + 38] + 4 * *v16);
        v19 = a3 + 24 * v17;
        v20 = (const float *)(a4 + 4 * v17);
        v21 = vld1q_dup_f32(v20);
        v22 = (int32x4_t)vsubq_f32(*(float32x4_t *)v19, v21);
        v22.i32[3] = vaddq_f32(*(float32x4_t *)v19, v21).i32[3];
        v23 = vshrq_n_u32((uint32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v22), vmvnq_s8((int8x16_t)v22), (int8x16_t)(*(_OWORD *)&v22 | __PAIR128__(0x8000000080000000, 0x8000000080000000))), 1uLL);
        *(float32x2_t *)v21.f32 = vadd_f32(*(float32x2_t *)(v19 + 16), *(float32x2_t *)v21.f32);
        v24 = vshr_n_u32((uint32x2_t)vbsl_s8((int8x8_t)vcltz_s32(*(int32x2_t *)v21.f32), vmvn_s8(*(int8x8_t *)v21.f32), (int8x8_t)(v21.i64[0] | 0x8000000080000000)), 1uLL);
        v25 = (unsigned __int16 *)v16 + 1;
        do
        {
          v26 = *(_QWORD *)(v6 + 56 * *v25 + 32);
          if ((*(_DWORD *)(*(_QWORD *)(v26 + 128) + 8 * *(v25 - 1) + 4) & 1) != 0)
            v27 = 152;
          else
            v27 = 160;
          v28 = *(_QWORD *)(v26 + v27) + 24 * *(unsigned int *)(*(_QWORD *)(v26 + 128) + 8 * *(v25 - 1));
          *(uint32x4_t *)v28 = v23;
          *(uint32x2_t *)(v28 + 16) = v24;
          v25 += 2;
          --result;
        }
        while (result);
      }
      ++v13;
    }
    while (v13 != v12);
  }
  return result;
}

physx::Bp::BroadPhaseSap *physx::Bp::BroadPhaseSap::BroadPhaseSap(physx::Bp::BroadPhaseSap *this, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  __n128 v10;
  char *v11;
  _OWORD *v12;
  uint64_t i;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;

  v7 = 0;
  *(_QWORD *)this = off_24ED8BF98;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 2) = &off_24ED8C750;
  *((_QWORD *)this + 3) = a5;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 9) = &off_24ED8C7A8;
  *((_QWORD *)this + 10) = a5;
  v8 = (_QWORD *)((char *)this + 360);
  v9 = (uint64_t *)((char *)this + 392);
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_DWORD *)this + 96) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_DWORD *)this + 104) = 0;
  v10 = 0uLL;
  *((_QWORD *)this + 51) = 0;
  do
  {
    v11 = (char *)this + v7;
    *((_QWORD *)v11 + 60) = 0;
    *((_QWORD *)v11 + 61) = 0;
    *((_DWORD *)v11 + 124) = 0;
    *((_QWORD *)v11 + 58) = &off_24ED8C1A8;
    *((_QWORD *)v11 + 59) = 0;
    *((_QWORD *)v11 + 63) = 0;
    *((_DWORD *)v11 + 128) = -1;
    v12 = (_OWORD *)((char *)this + v7 + 520);
    v7 += 72;
    *v12 = 0uLL;
  }
  while (v7 != 216);
  *((_QWORD *)this + 85) = a5;
  for (i = 472; i != 688; i += 72)
    *(_QWORD *)((char *)this + i) = a5;
  *((_QWORD *)this + 41) = 0;
  v14 = (a3 + a4 + 31) & 0xFFFFFFE0;
  *((_DWORD *)this + 52) = v14;
  v15 = 8 * v14;
  if (!(_DWORD)v15)
  {
    *((_QWORD *)this + 27) = 0;
    v16 = (uint64_t *)((char *)this + 216);
    goto LABEL_10;
  }
  *((_QWORD *)this + 27) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v15, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 69);
  v16 = (uint64_t *)((char *)this + 216);
  v14 = *((_DWORD *)this + 52);
  v17 = 8 * v14 + 15;
  if ((v17 & 0xFFFFFFF0) == 0)
  {
LABEL_10:
    v20 = 0;
    *((_QWORD *)this + 28) = 0;
    v18 = (uint64_t *)((char *)this + 224);
    goto LABEL_11;
  }
  *((_QWORD *)this + 28) = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 70);
  v18 = (uint64_t *)((char *)this + 224);
  v14 = *((_DWORD *)this + 52);
  v19 = 8 * v14 + 15;
  if ((v19 & 0xFFFFFFF0) != 0)
  {
    v20 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v19 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 71);
    v14 = *((_DWORD *)this + 52);
  }
  else
  {
    v20 = 0;
  }
LABEL_11:
  *((_QWORD *)this + 29) = v20;
  if (!v14)
  {
    v26 = (unsigned int *)((char *)this + 336);
    *((_DWORD *)this + 84) = 2;
    *((_QWORD *)this + 36) = 0;
    v28 = 16;
LABEL_19:
    v29 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v28, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 86);
    v25 = *v26;
    goto LABEL_21;
  }
  v21 = 0;
  v22 = *v16;
  v23 = *v18;
  v10.n128_u64[0] = 0xC0000000C0000000;
  do
  {
    *(_QWORD *)(v22 + 8 * v21) = 0xC0000000C0000000;
    *(_QWORD *)(v23 + 8 * v21) = 0xC0000000C0000000;
    *(_QWORD *)(v20 + 8 * v21++) = 0xC0000000C0000000;
    v24 = *((unsigned int *)this + 52);
  }
  while (v21 < v24);
  v25 = 2 * v24 + 2;
  v26 = (unsigned int *)((char *)this + 336);
  *((_DWORD *)this + 84) = v25;
  if ((((_DWORD)v24 + 15) & 0xFFFFFFF0) != 0)
  {
    v27 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, ((_DWORD)v24 + 15) & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 85, v10);
    v25 = *v26;
  }
  else
  {
    v27 = 0;
  }
  *((_QWORD *)this + 36) = v27;
  v28 = (4 * v25 + 15) & 0xFFFFFFF0;
  if (v28)
    goto LABEL_19;
  v29 = 0;
LABEL_21:
  *((_QWORD *)this + 37) = v29;
  v30 = 8 * v25 + 15;
  if ((v30 & 0xFFFFFFF0) != 0)
  {
    v31 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v30 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 87);
    v25 = *v26;
  }
  else
  {
    v31 = 0;
  }
  *((_QWORD *)this + 38) = v31;
  v32 = 4 * v25 + 15;
  if ((v32 & 0xFFFFFFF0) == 0)
  {
    *((_QWORD *)this + 30) = 0;
    goto LABEL_31;
  }
  v33 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, v32 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 89);
  v34 = 4 * *((_DWORD *)this + 84) + 15;
  *((_QWORD *)this + 30) = v33;
  if ((v34 & 0xFFFFFFF0) == 0)
  {
LABEL_31:
    *((_QWORD *)this + 31) = 0;
    goto LABEL_32;
  }
  v35 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, v34 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 90);
  v36 = 4 * *((_DWORD *)this + 84) + 15;
  *((_QWORD *)this + 31) = v35;
  if ((v36 & 0xFFFFFFF0) == 0)
  {
LABEL_32:
    *((_QWORD *)this + 32) = 0;
    goto LABEL_33;
  }
  v37 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                        + 16))(physx::shdfnd::Foundation::mInstance + 24, v36 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 91);
  v38 = 4 * *((_DWORD *)this + 84) + 15;
  *((_QWORD *)this + 32) = v37;
  if ((v38 & 0xFFFFFFF0) != 0)
  {
    v39 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v38 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 92);
    v40 = 4 * *((_DWORD *)this + 84) + 15;
    *((_QWORD *)this + 33) = v39;
    if ((v40 & 0xFFFFFFF0) != 0)
    {
      v41 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, v40 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 93);
      v42 = (4 * *v26 + 15) & 0xFFFFFFF0;
    }
    else
    {
      v42 = 0;
      v41 = 0;
    }
    goto LABEL_34;
  }
LABEL_33:
  v42 = 0;
  v41 = 0;
  *((_QWORD *)this + 33) = 0;
LABEL_34:
  *((_QWORD *)this + 34) = v41;
  v43 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v42, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 94);
  v44 = (_DWORD *)*((_QWORD *)this + 30);
  v48 = (_DWORD *)*((_QWORD *)this + 31);
  *v44 = 0;
  v46 = (_DWORD *)*((_QWORD *)this + 32);
  v45 = (_DWORD *)*((_QWORD *)this + 33);
  *v45 = 1073741822;
  v44[1] = -1;
  v45[1] = 0x3FFFFFFF;
  v47 = (_DWORD *)*((_QWORD *)this + 34);
  *v48 = 0;
  *v47 = 1073741822;
  v48[1] = -1;
  *((_QWORD *)this + 35) = v43;
  v47[1] = 0x3FFFFFFF;
  *v46 = 0;
  *v43 = 1073741822;
  v46[1] = -1;
  v43[1] = 0x3FFFFFFF;
  LODWORD(v48) = *((_DWORD *)this + 84);
  v49 = 4 * (_DWORD)v48 + 15;
  if ((v49 & 0xFFFFFFF0) != 0)
  {
    v50 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v49 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 104);
    LODWORD(v48) = *((_DWORD *)this + 84);
    v51 = 4 * (_DWORD)v48 + 15;
    *((_QWORD *)this + 39) = v50;
    if ((v51 & 0xFFFFFFF0) != 0)
    {
      v52 = (_DWORD *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v51 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 105);
      LODWORD(v48) = *((_DWORD *)this + 84);
      v50 = *((_QWORD *)this + 39);
    }
    else
    {
      v52 = 0;
    }
  }
  else
  {
    v50 = 0;
    v52 = 0;
    *((_QWORD *)this + 39) = 0;
  }
  *((_QWORD *)this + 40) = v52;
  if (v48 >= 2)
  {
    v53 = 0;
    do
    {
      *(_DWORD *)(v50 + 4 * v53) = v53 + 1;
      v52[v53 + 1] = v53;
      v48 = (_DWORD *)*v26;
      v54 = v53 + 2;
      ++v53;
    }
    while (v54 < (unint64_t)v48);
  }
  *(_DWORD *)(v50 + 4 * ((_DWORD)v48 - 1)) = (_DWORD)v48 - 1;
  *v52 = 0;
  if (a2 <= 0x40)
    v55 = 64;
  else
    v55 = a2;
  *((_DWORD *)this + 85) = v55;
  v56 = 4 * v55 + 15;
  v57 = v56 & 0xFFFFFFF0;
  if ((v56 & 0xFFFFFFF0) != 0)
  {
    *v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v57, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 103);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, v57, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 104);
  }
  else
  {
    v58 = 0;
    *v8 = 0;
  }
  *((_QWORD *)this + 46) = v58;
  v59 = 8 * v55 + 15;
  if ((v59 & 0xFFFFFFF0) != 0)
    v60 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, v59 & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 105);
  else
    v60 = 0;
  *v9 = v60;
  if (((v55 + 15) & 0xFFFFFFF0) != 0)
    v61 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, (v55 + 15) & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 106);
  else
    v61 = 0;
  *((_QWORD *)this + 50) = v61;
  *((_DWORD *)this + 95) = v55;
  *((_DWORD *)this + 96) = v55;
  *((_DWORD *)this + 103) = v55;
  *((_QWORD *)this + 81) = this;
  *((_DWORD *)this + 164) = 2;
  *((_QWORD *)this + 72) = this;
  *((_DWORD *)this + 146) = 1;
  *((_QWORD *)this + 63) = this;
  *((_DWORD *)this + 128) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_DWORD *)this + 169) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_DWORD *)this + 151) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_DWORD *)this + 133) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_DWORD *)this + 114) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  return this;
}

void physx::Bp::BroadPhaseSap::~BroadPhaseSap(physx::Bp::BroadPhaseSap *this)
{
  uint64_t v2;
  char *v3;

  *(_QWORD *)this = off_24ED8BF98;
  if (*((_QWORD *)this + 27))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 28))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 29))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 30))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 31))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 32))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 33))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 34))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 35))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 39))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 40))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 37))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 38))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 36))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 45))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 46))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 49))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 50))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v2 = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_DWORD *)this + 96) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_QWORD *)this + 65) = 0;
  *((_DWORD *)this + 133) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_DWORD *)this + 151) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_DWORD *)this + 169) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 55) = 0;
  do
  {
    v3 = (char *)this + v2;
    *((_QWORD *)v3 + 76) = off_24ED8BB00;
    *((_QWORD *)v3 + 78) = 0;
    v2 -= 72;
  }
  while (v2 != -216);
  *((_QWORD *)this + 9) = off_24ED8BB00;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 2) = off_24ED8BB00;
  *((_QWORD *)this + 4) = 0;
}

{
  uint64_t v2;

  physx::Bp::BroadPhaseSap::~BroadPhaseSap(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Bp::BroadPhaseSap *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void physx::Bp::BroadPhaseBatchUpdateWorkTask::~BroadPhaseBatchUpdateWorkTask(physx::Bp::BroadPhaseBatchUpdateWorkTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Bp::BroadPhaseSap::destroy(physx::Bp::BroadPhaseSap *this)
{
  (**(void (***)(physx::Bp::BroadPhaseSap *))this)(this);
  return (*(uint64_t (**)(uint64_t, physx::Bp::BroadPhaseSap *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                    + 24)
                                                                        + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Bp::BroadPhaseSap::resizeBuffers(physx::Bp::BroadPhaseSap *this)
{
  int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 85);
  *((_QWORD *)this + 53) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_DWORD *)this + 109) = v2;
  *((_DWORD *)this + 108) = 0;
  *((_QWORD *)this + 55) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_DWORD *)this + 113) = v2;
  *((_DWORD *)this + 112) = 0;
  *((_QWORD *)this + 43) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 4 * v2, 1);
  *((_DWORD *)this + 89) = v2;
  *((_DWORD *)this + 88) = 0;
  *((_QWORD *)this + 65) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_DWORD *)this + 133) = v2;
  *((_DWORD *)this + 132) = 0;
  *((_QWORD *)this + 74) = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_DWORD *)this + 151) = v2;
  *((_DWORD *)this + 150) = 0;
  result = physx::PxcScratchAllocator::alloc(*((pthread_mutex_t ***)this + 1), 8 * v2, 1);
  *((_QWORD *)this + 83) = result;
  *((_DWORD *)this + 169) = v2;
  *((_DWORD *)this + 168) = 0;
  return result;
}

uint64_t physx::PxcScratchAllocator::alloc(pthread_mutex_t **this, int a2, int a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (a2 + 15) & 0xFFFFFFF0;
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*this);
  v6 = this[1];
  v7 = *((unsigned int *)this + 4);
  v8 = *(&v6->__sig + (v7 - 1));
  if (v8 - (uint64_t)this[3] >= v5)
  {
    v9 = v8 - v5;
    v11 = v8 - v5;
    if ((*((_DWORD *)this + 5) & 0x7FFFFFFFu) <= v7)
    {
      physx::shdfnd::Array<unsigned char *,physx::shdfnd::ReflectionAllocator<unsigned char *>>::growAndPushBack((uint64_t)(this + 1), &v11);
      v9 = v11;
    }
    else
    {
      *(&v6->__sig + v7) = v9;
      *((_DWORD *)this + 4) = v7 + 1;
    }
  }
  else
  {
    v9 = 0;
    if ((_DWORD)v5 && a3)
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, v5, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcScratchAllocator.h", 99);
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_unlock(*this);
  return v9;
}

const void **physx::Bp::BroadPhaseSap::freeBuffers(physx::Bp::BroadPhaseSap *this)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = (_QWORD *)((char *)this + 424);
  v3 = *((_QWORD *)this + 53);
  if (v3)
    physx::PxcScratchAllocator::free(*((_QWORD *)this + 1), v3);
  *v2 = 0;
  v2[1] = 0;
  v4 = *((_QWORD *)this + 55);
  if (v4)
    physx::PxcScratchAllocator::free(*((_QWORD *)this + 1), v4);
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  v5 = *((_QWORD *)this + 43);
  if (v5)
    physx::PxcScratchAllocator::free(*((_QWORD *)this + 1), v5);
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  v6 = *((_QWORD *)this + 65);
  if (v6)
    physx::PxcScratchAllocator::free(*((_QWORD *)this + 1), v6);
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 66) = 0;
  v7 = *((_QWORD *)this + 74);
  if (v7)
    physx::PxcScratchAllocator::free(*((_QWORD *)this + 1), v7);
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 75) = 0;
  v8 = *((_QWORD *)this + 83);
  if (v8)
    physx::PxcScratchAllocator::free(*((_QWORD *)this + 1), v8);
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 84) = 0;
  return physx::Bp::SapPairManager::shrinkMemory((const void **)this + 45);
}

const void **physx::Bp::SapPairManager::shrinkMemory(const void **this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v7;
  char v8;

  v1 = *((_DWORD *)this + 12) | (*((_DWORD *)this + 12) >> 1);
  v2 = v1 | (v1 >> 2) | ((v1 | (v1 >> 2)) >> 4);
  v3 = (v2 | (v2 >> 8) | ((v2 | (v2 >> 8)) >> 16)) + 1;
  v4 = *((_DWORD *)this + 4);
  if (v3 != v4)
  {
    v5 = *((_DWORD *)this + 6);
    if (v3 >= v5 || v4 != v5)
    {
      if (v3 <= v5)
        v7 = *((_DWORD *)this + 6);
      else
        v7 = v3;
      *((_DWORD *)this + 4) = v7;
      *((_DWORD *)this + 14) = v7 - 1;
      v8 = v5 < v3 || v7 <= *((_DWORD *)this + 5) >> 2 || v7 <= *((_DWORD *)this + 13) >> 2;
      return physx::Bp::SapPairManager::reallocPairs(this, v8);
    }
  }
  return this;
}

uint64_t physx::Bp::BroadPhaseSap::shiftOrigin(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v65;
  int v66;
  int v67;
  int *v68;

  if (*(_DWORD *)(result + 328))
  {
    v1 = *(_QWORD *)(result + 240);
    v2 = *(_QWORD *)(result + 248);
    v3 = *(_QWORD *)(result + 272);
    v4 = *(_QWORD *)(result + 280);
    v6 = *(_QWORD *)(result + 256);
    v5 = *(_QWORD *)(result + 264);
    v7 = *(_DWORD *)(v1 + 4);
    v8 = *(_DWORD *)(v5 + 4);
    v9 = *(_DWORD *)(v2 + 4);
    v10 = *(_DWORD *)(v3 + 4);
    v11 = *(_DWORD *)(v6 + 4);
    v12 = *(_DWORD *)(v4 + 4);
    v68 = &v65;
    if (v7 >= 0)
      v13 = ~v7;
    else
      v13 = v7 & 0x7FFFFFFF;
    v67 = v13;
    v14 = v9 & 0x7FFFFFFF;
    if (v9 >= 0)
      v14 = ~v9;
    v66 = v14;
    v15 = v11 & 0x7FFFFFFF;
    if (v11 >= 0)
      v15 = ~v11;
    v65 = v15;
    if (v67 < 0)
      v16 = ~v67;
    else
      v16 = v67 | 0x80000000;
    v17 = v16 & 0xFFFFFFF0;
    v18 = v17 + 17;
    v19 = (v17 - 15) & 0xFFFFFFF0;
    if ((v8 & 1) != 0)
      v19 = v18;
    *(_DWORD *)(v1 + 4) = v19;
    if (v66 < 0)
      v20 = ~v66;
    else
      v20 = v66 | 0x80000000;
    v21 = v20 & 0xFFFFFFF0;
    v22 = v21 + 17;
    v23 = (v21 - 15) & 0xFFFFFFF0;
    if ((v10 & 1) != 0)
      v23 = v22;
    *(_DWORD *)(v2 + 4) = v23;
    if (v65 < 0)
      v24 = ~v65;
    else
      v24 = v65 | 0x80000000;
    v25 = v24 & 0xFFFFFFF0;
    v26 = v25 + 17;
    v27 = (v25 - 15) & 0xFFFFFFF0;
    if ((v12 & 1) != 0)
      v27 = v26;
    *(_DWORD *)(v6 + 4) = v27;
    if ((*(_DWORD *)(result + 328) & 0x7FFFFFFF) != 0)
    {
      v28 = *(_DWORD *)(v4 + 4) & 1;
      v29 = *(_DWORD *)(v3 + 4) & 1;
      v30 = *(_DWORD *)(v2 + 4);
      v31 = *(_DWORD *)(v5 + 4) & 1;
      v32 = *(_DWORD *)(v1 + 4);
      v33 = 2;
      do
      {
        v34 = *(_DWORD *)(v5 + 4 * v33);
        v35 = *(_DWORD *)(v3 + 4 * v33);
        v36 = *(_DWORD *)(v4 + 4 * v33);
        v37 = *(_DWORD *)(v1 + 4 * v33);
        v38 = *(_DWORD *)(v2 + 4 * v33);
        v39 = *(_DWORD *)(v6 + 4 * v33);
        v65 = 0;
        v68 = &v65;
        if (v37 >= 0)
          v40 = ~v37;
        else
          v40 = v37 & 0x7FFFFFFF;
        v67 = v40;
        v41 = v38 & 0x7FFFFFFF;
        if (v38 >= 0)
          v41 = ~v38;
        v66 = v41;
        v42 = v39 & 0x7FFFFFFF;
        if (v39 >= 0)
          v42 = ~v39;
        v65 = v42;
        if (v67 < 0)
          v43 = ~v67;
        else
          v43 = v67 | 0x80000000;
        v44 = v43 & 0xFFFFFFF0;
        v45 = v44 - 15;
        v46 = v34 & 1;
        v47 = v44 + 17;
        v48 = v45 & 0xFFFFFFF0;
        if (!v46)
          v47 = v48;
        if (v66 < 0)
          v49 = ~v66;
        else
          v49 = v66 | 0x80000000;
        v50 = v49 & 0xFFFFFFF0;
        v51 = v50 - 15;
        v52 = v35 & 1;
        v53 = v50 + 17;
        v54 = v51 & 0xFFFFFFF0;
        if (!v52)
          v53 = v54;
        if (v42 < 0)
          v55 = ~v42;
        else
          v55 = v42 | 0x80000000;
        v56 = v55 & 0xFFFFFFF0;
        v57 = v56 - 15;
        v58 = v36 & 1;
        v59 = v56 + 17;
        v60 = v57 & 0xFFFFFFF0;
        if (!v58)
          v59 = v60;
        if (v31 == v46)
          v61 = v32;
        else
          v61 = v32 + 1;
        if (v47 >= v32)
          v32 = v47;
        else
          v32 = v61;
        if (v29 == v52)
          v62 = v30;
        else
          v62 = v30 + 1;
        if (v53 >= v30)
          v30 = v53;
        else
          v30 = v62;
        if (v28 == v58)
          v63 = v27;
        else
          v63 = v27 + 1;
        if (v59 >= v27)
          v27 = v59;
        else
          v27 = v63;
        *(_DWORD *)(v1 + 4 * v33) = v32;
        *(_DWORD *)(v2 + 4 * v33) = v30;
        *(_DWORD *)(v6 + 4 * v33) = v27;
        v28 = v58;
        v29 = v52;
        v31 = v46;
      }
      while (v33++ < (2 * *(_DWORD *)(result + 328)));
    }
  }
  return result;
}

uint64_t physx::Bp::BroadPhaseSap::update(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;

  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 40))(a6);
  physx::Bp::BroadPhaseSap::setUpdateData(a1, a4);
  *(_QWORD *)(a1 + 8) = a3;
  physx::Bp::BroadPhaseSap::resizeBuffers((physx::Bp::BroadPhaseSap *)a1);
  *(_QWORD *)(a1 + 112) = a1;
  *(_QWORD *)(a1 + 56) = a1;
  *(_DWORD *)(a1 + 120) = a2;
  *(_DWORD *)(a1 + 64) = a2;
  *(_DWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 96) = a5;
  if (a5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 32))(a5);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 16);
  }
  v12 = *(_QWORD *)(a1 + 72);
  v11 = a1 + 72;
  *(_DWORD *)(v11 - 24) = 1;
  *(_QWORD *)(v11 - 32) = v11;
  (*(void (**)(uint64_t))(v12 + 32))(v11);
  *(_QWORD *)(v11 - 40) = *(_QWORD *)(*(_QWORD *)(v11 - 32) + 16);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 16) + 144))(*(_QWORD *)(v11 + 16), v11);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 - 40) + 144))(*(_QWORD *)(v11 - 40), v11 - 56);
}

void physx::Bp::BroadPhaseSap::setUpdateData(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __n128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  void *v32;
  void *__dst;

  *(_QWORD *)(a1 + 128) = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 136) = v3;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 64);
  v4 = *(unsigned int *)(a2 + 80);
  v5 = *(unsigned int *)(a1 + 208);
  if (v4 > v5)
  {
    v6 = 8 * v4 + 15;
    v7 = v6 & 0xFFFFFFF0;
    if ((v6 & 0xFFFFFFF0) != 0)
    {
      v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 540);
      v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 541);
      v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 542);
    }
    else
    {
      v9 = 0;
      v8 = 0;
      v10 = 0;
    }
    memcpy(v8, *(const void **)(a1 + 216), (8 * v5));
    memcpy(v9, *(const void **)(a1 + 224), (8 * v5));
    memcpy(v10, *(const void **)(a1 + 232), (8 * v5));
    v11.n128_u64[0] = 0xC0000000C0000000;
    do
    {
      *((_QWORD *)v8 + v5) = 0xC0000000C0000000;
      *((_QWORD *)v9 + v5) = 0xC0000000C0000000;
      *((_QWORD *)v10 + v5++) = 0xC0000000C0000000;
    }
    while (v4 != v5);
    if (*(_QWORD *)(a1 + 216))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v11);
    if (*(_QWORD *)(a1 + 224))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v11);
    if (*(_QWORD *)(a1 + 232))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v11);
    *(_QWORD *)(a1 + 216) = v8;
    *(_QWORD *)(a1 + 224) = v9;
    *(_QWORD *)(a1 + 232) = v10;
    *(_DWORD *)(a1 + 208) = v4;
    if (*(_QWORD *)(a1 + 288))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v11);
    if ((((_DWORD)v4 + 15) & 0xFFFFFFF0) != 0)
      v12 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, ((_DWORD)v4 + 15) & 0xFFFFFFF0, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 567, v11);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 288) = v12;
    v3 = *(_DWORD *)(a1 + 136);
  }
  v13 = 2 * (*(_DWORD *)(a1 + 328) + v3);
  v14 = (v13 + 2);
  if (v14 > *(_DWORD *)(a1 + 336))
  {
    v15 = 4 * v14 + 15;
    v16 = &unk_25582F000;
    v17 = v15 & 0xFFFFFFF0;
    if ((v15 & 0xFFFFFFF0) != 0)
    {
      __dst = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 575);
      v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 576);
      v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 577);
      v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 578);
      v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 579);
      v16 = (_QWORD *)&unk_25582F000;
      v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 580);
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v19 = 0;
      __dst = 0;
      v18 = 0;
      v20 = 0;
    }
    if (*(_QWORD *)(a1 + 312))
      (*(void (**)(uint64_t))(*(_QWORD *)(v16[327] + 24) + 24))(v16[327] + 24);
    if (*(_QWORD *)(a1 + 320))
      (*(void (**)(uint64_t))(*(_QWORD *)(v16[327] + 24) + 24))(v16[327] + 24);
    if ((_DWORD)v17)
    {
      *(_QWORD *)(a1 + 312) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v16[327] + 24) + 16))(v16[327] + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 585);
      v21 = v16[327];
      v22 = v17;
      v23 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v21 + 24) + 16))(v21 + 24, v17, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 586);
      v24 = *(_QWORD *)(a1 + 312);
    }
    else
    {
      v22 = v17;
      v24 = 0;
      v23 = 0;
      *(_QWORD *)(a1 + 312) = 0;
    }
    v25 = 0;
    *(_QWORD *)(a1 + 320) = v23;
    do
    {
      *(_DWORD *)(v24 + 4 * v25) = v25 + 1;
      v23[v25 + 1] = v25;
      v26 = v25 + 2;
      ++v25;
    }
    while (v26 != v14);
    *(_DWORD *)(v24 + 4 * (v13 | 1u)) = v13 | 1;
    *v23 = 0;
    memcpy(__dst, *(const void **)(a1 + 240), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v18, *(const void **)(a1 + 248), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v19, *(const void **)(a1 + 256), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v32, *(const void **)(a1 + 264), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v31, *(const void **)(a1 + 272), (8 * *(_DWORD *)(a1 + 328) + 8));
    memcpy(v20, *(const void **)(a1 + 280), (8 * *(_DWORD *)(a1 + 328) + 8));
    if (*(_QWORD *)(a1 + 240))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(a1 + 256))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(a1 + 264))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(a1 + 272))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(a1 + 280))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(a1 + 240) = __dst;
    *(_QWORD *)(a1 + 248) = v18;
    *(_QWORD *)(a1 + 256) = v19;
    *(_QWORD *)(a1 + 264) = v32;
    *(_QWORD *)(a1 + 272) = v31;
    *(_QWORD *)(a1 + 280) = v20;
    *(_DWORD *)(a1 + 336) = v14;
    if (*(_QWORD *)(a1 + 296))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if ((_DWORD)v22)
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, v22, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 619);
    else
      v27 = 0;
    *(_QWORD *)(a1 + 296) = v27;
    v28 = (8 * v14);
    if ((_DWORD)v28)
      v29 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, v28, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSap.cpp", 620);
    else
      v29 = 0;
    *(_QWORD *)(a1 + 304) = v29;
  }
  bzero(*(void **)(a1 + 288), *(unsigned int *)(a1 + 208));
  if (*(_DWORD *)(a1 + 168))
  {
    v30 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a1 + 288) + *(unsigned int *)(*(_QWORD *)(a1 + 160) + 4 * v30++)) = 1;
    while (v30 < *(unsigned int *)(a1 + 168));
  }
  *(_DWORD *)(a1 + 328) += *(_DWORD *)(a1 + 136);
}

void physx::Bp::BroadPhaseSap::singleThreadedUpdate(physx::Bp::BroadPhaseSap *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  physx::Bp::DataArray *v9;

  physx::Bp::BroadPhaseSap::setUpdateData((uint64_t)a1, a3);
  *((_QWORD *)a1 + 1) = a2;
  physx::Bp::BroadPhaseSap::resizeBuffers(a1);
  physx::Bp::BroadPhaseSap::batchRemove(a1);
  (*(void (**)(_QWORD *))(*((_QWORD *)a1 + 58) + 64))((_QWORD *)a1 + 58);
  (*(void (**)(_QWORD *))(*((_QWORD *)a1 + 67) + 64))((_QWORD *)a1 + 67);
  (*(void (**)(_QWORD *))(*((_QWORD *)a1 + 76) + 64))((_QWORD *)a1 + 76);
  physx::Bp::BroadPhaseSap::postUpdate(a1, v5, v6, v7, v8, v9);
}

void physx::Bp::BroadPhaseSap::postUpdate(physx::Bp::BroadPhaseSap *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, physx::Bp::DataArray *a6)
{
  uint64_t v7;
  physx::PxcScratchAllocator *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  physx::Bp *v12;
  unsigned int v13;
  pthread_mutex_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = 0;
  v16 = *((_QWORD *)this + 43);
  v17 = *((_QWORD *)this + 44);
  v8 = (physx::Bp::BroadPhaseSap *)((char *)this + 360);
  do
  {
    v9 = (char *)this + 72 * v7;
    v10 = *((unsigned int *)v9 + 132);
    if ((_DWORD)v10)
    {
      v11 = (unsigned int *)(*((_QWORD *)v9 + 65) + 4);
      do
      {
        v12 = (physx::Bp *)*(v11 - 1);
        v13 = *v11;
        v14 = (pthread_mutex_t **)*((_QWORD *)this + 1);
        if (v12 <= *v11)
          physx::Bp::removePair(v12, v13, v14, v8, (physx::Bp::SapPairManager *)&v16, a6);
        else
          physx::Bp::addPair(v12, v13, v14, v8, (physx::Bp::SapPairManager *)&v16, a6);
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    ++v7;
  }
  while (v7 != 3);
  *((_QWORD *)this + 43) = v16;
  *((_QWORD *)this + 44) = v17;
  physx::Bp::BroadPhaseSap::batchCreate(this);
  physx::Bp::ComputeCreatedDeletedPairsLists(v15, *((unsigned int **)this + 43), *((_DWORD *)this + 88), *((pthread_mutex_t ***)this + 1), (const void **)this + 53, (_DWORD *)this + 108, (_DWORD *)this + 109, (const void **)this + 55, (unsigned int *)this + 112, (_DWORD *)this + 113, (unsigned int *)this + 114, (uint64_t)v8);
  *((_DWORD *)this + 83) = *((_DWORD *)this + 82);
}

uint64_t physx::Bp::addPair(physx::Bp *this, unsigned int a2, pthread_mutex_t **a3, physx::PxcScratchAllocator *a4, physx::Bp::SapPairManager *a5, physx::Bp::DataArray *a6)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  result = (uint64_t)physx::Bp::SapPairManager::AddPair(a4, this, a2);
  if (result)
  {
    v10 = result;
    v11 = *((_QWORD *)a4 + 5);
    v12 = (result - *((_QWORD *)a4 + 4)) >> 3;
    v13 = *(_BYTE *)(v11 + v12);
    if ((v13 & 8) != 0)
    {
      *(_BYTE *)(v11 + v12) = 0;
      *(_BYTE *)(*((_QWORD *)a4 + 5) + ((result - *((_QWORD *)a4 + 4)) >> 3)) |= 1u;
      v14 = result - *((_QWORD *)a4 + 4);
      v15 = v14 >> 3;
      v16 = *((_DWORD *)a5 + 2);
      if (v16 == *((_DWORD *)a5 + 3))
      {
        result = physx::Bp::DataArray::Resize(a5, a3);
        v16 = *((_DWORD *)a5 + 2);
        v14 = v10 - *((_QWORD *)a4 + 4);
      }
      v17 = *(_QWORD *)a5;
      *((_DWORD *)a5 + 2) = v16 + 1;
      *(_DWORD *)(v17 + 4 * v16) = v15;
      *(_BYTE *)(*((_QWORD *)a4 + 5) + (v14 >> 3)) |= 4u;
      v11 = *((_QWORD *)a4 + 5);
      v12 = (v10 - *((_QWORD *)a4 + 4)) >> 3;
      v13 = *(_BYTE *)(v11 + v12);
    }
    *(_BYTE *)(v11 + v12) = v13 & 0xFD;
  }
  return result;
}

uint64_t physx::Bp::removePair(physx::Bp *this, unsigned int a2, pthread_mutex_t **a3, physx::PxcScratchAllocator *a4, physx::Bp::SapPairManager *a5, physx::Bp::DataArray *a6)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  result = (uint64_t)physx::Bp::SapPairManager::FindPair(a4, this, a2);
  if (result)
  {
    v10 = result;
    v11 = *((_QWORD *)a4 + 5);
    v12 = (result - *((_QWORD *)a4 + 4)) >> 3;
    v13 = *(_BYTE *)(v11 + v12);
    if ((v13 & 1) == 0)
    {
      *(_BYTE *)(v11 + v12) = v13 | 1;
      v14 = result - *((_QWORD *)a4 + 4);
      v15 = v14 >> 3;
      v16 = *((_DWORD *)a5 + 2);
      if (v16 == *((_DWORD *)a5 + 3))
      {
        result = physx::Bp::DataArray::Resize(a5, a3);
        v16 = *((_DWORD *)a5 + 2);
        v14 = v10 - *((_QWORD *)a4 + 4);
      }
      v17 = *(_QWORD *)a5;
      *((_DWORD *)a5 + 2) = v16 + 1;
      *(_DWORD *)(v17 + 4 * v16) = v15;
      v11 = *((_QWORD *)a4 + 5);
      v12 = v14 >> 3;
      v13 = *(_BYTE *)(v11 + v12);
    }
    *(_BYTE *)(v11 + v12) = v13 | 2;
  }
  return result;
}

void physx::Bp::BroadPhaseSap::batchCreate(physx::Bp::BroadPhaseSap *this)
{
  uint64_t v1;
  physx::Bp::BroadPhaseSap *v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  float *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  size_t v48;
  uint64_t *v49;
  physx::Bp::BroadPhaseSap *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int *v80;
  _QWORD *v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  physx::Bp::BroadPhaseSap *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t *v117;
  uint32x4_t v118;
  uint32x4_t v119;
  unint64_t v120;
  unsigned int v121;
  physx::Bp::BroadPhaseSap *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t *v135;
  int v136;
  uint64_t *v137;
  uint32x4_t v138;
  uint32x4_t v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t *v149;
  int v150;
  uint64_t *v151;
  uint32x4_t v152;
  uint32x4_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  void (**v183)(physx::Cm::RadixSortBuffered *__hidden);
  unsigned int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  char v188;
  _BYTE v189[32];
  unsigned int *v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;

  v1 = *((unsigned int *)this + 34);
  if (!(_DWORD)v1)
    return;
  v2 = this;
  v3 = (unsigned int *)*((_QWORD *)this + 16);
  v4 = *((_QWORD *)this + 22);
  v5 = 2 * v1;
  if ((2 * v1) > 0x20)
  {
    v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, physx::Bp::BroadPhaseSap *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (2 * v1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56, this);
    v197 = v6;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                          + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (2 * v1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
    v2 = this;
    v7 = (_BYTE *)v8;
  }
  else
  {
    v6 = &v192;
    v197 = &v192;
    v7 = v189;
  }
  v9 = 0;
  v191 = v7;
  v187 = 0;
  v186 = 0u;
  v185 = 0u;
  v188 = 1;
  v184 = 0x80000000;
  v183 = &off_24ED90D50;
  do
  {
    v10 = *((_QWORD *)v2 + 25);
    v11 = 1;
    v12 = v3;
    v13 = v1;
    do
    {
      v14 = *v12++;
      v15 = *(float *)(v10 + 4 * v14);
      v16 = (float *)(v4 + 4 * v9 + 24 * v14);
      *(float *)&v178 = *v16 - v15;
      if ((int)v178 < 0)
        v17 = ~(_DWORD)v178;
      else
        v17 = v178 | 0x80000000;
      *((_DWORD *)v6 + v11 - 1) = (v17 & 0xFFFFFFF0) - 16;
      *(float *)&v178 = v15 + v16[3];
      if ((int)v178 < 0)
        v18 = ~(_DWORD)v178;
      else
        v18 = v178 | 0x80000000;
      *((_DWORD *)v6 + v11) = (v18 & 0xFFFFFFF0) + 20;
      v11 += 2;
      --v13;
    }
    while (v13);
    v184 |= 0x80000000;
    physx::Cm::RadixSortBuffered::Sort((uint64_t)&v183);
    v19 = *((_QWORD *)&v185 + 1);
    if (v5)
    {
      v20 = v185;
      v21 = v5 - 1;
      v22 = v7;
      v23 = (_DWORD *)*((_QWORD *)&v185 + 1);
      v24 = (2 * v1);
      do
      {
        v25 = *(unsigned int *)(v20 + 4 * v21);
        *v22++ = *((_DWORD *)v6 + v25);
        *v23++ = v25 & 1 | (2 * *(unsigned int *)((char *)v3 + ((2 * v25) & 0x1FFFFFFFCLL)));
        --v21;
        --v24;
      }
      while (v24);
    }
    v26 = 0;
    v2 = this;
    v27 = (_QWORD *)((char *)this + 8 * v9);
    v28 = v27[30];
    v29 = v27[33];
    v30 = *((_DWORD *)this + 82) - *((_DWORD *)this + 34);
    v31 = v27[27];
    v32 = (2 * v30) | 1;
    v33 = v5 + 2 * v30;
    v34 = v33 | 1;
    *(_DWORD *)(v28 + 4 * v34) = *(_DWORD *)(v28 + 4 * v32);
    v35 = 2 * v30;
    *(_DWORD *)(v29 + 4 * v34) = *(_DWORD *)(v29 + 4 * v32);
    v36 = (_DWORD *)(v29 + 4 * (2 * v30));
    v37 = (unsigned int *)(v28 + 4 * v35);
    v38 = 4 * (int)v33;
    do
    {
      v39 = (_DWORD *)(v19 + 4 * v26);
      v40 = *v37;
      v41 = *(_DWORD *)&v7[4 * v26];
      if ((*v39 & 1) != 0)
        v42 = *v37 <= v41;
      else
        v42 = *v37 < v41;
      if (v42)
        v40 = *(_DWORD *)&v7[4 * v26];
      else
        v39 = v36;
      *(_DWORD *)(v28 + v38) = v40;
      *(_DWORD *)(v29 + v38) = *v39;
      *(_DWORD *)(v31 + ((4 * *v39) & 0x3FFFFFFF8) + 4 * (*v39 & 1)) = v33;
      if (v42)
      {
        if (++v26 >= v5)
          break;
      }
      else
      {
        --v37;
        --v36;
      }
      --v33;
      v38 -= 4;
    }
    while ((unint64_t)v36 >= v29);
    ++v9;
  }
  while (v9 != 3);
  v183 = &off_24ED90D50;
  physx::Cm::RadixSortBuffered::reset((uint64_t)&v183);
  if (v191 != v189 && v191)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (v197 != &v192 && v197)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v43 = *((unsigned int *)this + 34);
  v44 = *((_DWORD *)this + 82);
  if ((v44 - v43) >= 9)
    v45 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * (v44 - v43), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
  else
    v45 = (unsigned int *)v189;
  v190 = v45;
  if (v43 >= 9)
  {
    v46 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v43, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
    v163 = v190;
  }
  else
  {
    v163 = v45;
    v46 = (unsigned int *)&v183;
  }
  *(_QWORD *)&v186 = v46;
  v47 = 2 * *((_DWORD *)this + 52) + 31;
  v48 = (v47 >> 3) & 0x1FFFFFFC;
  if (v47 >= 0x120)
    v49 = (uint64_t *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v48, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
  else
    v49 = &v192;
  v196 = v49;
  bzero(v49, v48);
  v50 = this;
  v51 = *((unsigned int *)this + 34);
  v52 = *((_QWORD *)this + 23);
  v53 = *((_QWORD *)this + 33);
  v54 = (2 * *((_DWORD *)this + 82));
  if ((_DWORD)v51)
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = (unsigned int *)*((_QWORD *)this + 16);
    v60 = *((_QWORD *)this + 28);
    v59 = *((_QWORD *)this + 29);
    v61 = -1;
    v62 = -1;
    v63 = -1;
    v64 = *((_QWORD *)this + 27);
    v65 = v163;
    do
    {
      v67 = *v58++;
      v66 = v67;
      *(_DWORD *)((char *)v49 + (((unint64_t)v67 >> 3) & 0x1FFFFFFC)) |= 1 << v67;
      v68 = (unsigned int *)(v64 + 8 * v67);
      v70 = *v68;
      v69 = v68[1];
      if (v63 >= v70)
        v63 = v70;
      if (v57 <= v69)
        v57 = v69;
      v71 = (unsigned int *)(v59 + 8 * v66);
      v73 = *v71;
      v72 = v71[1];
      if (v62 >= v73)
        v62 = v73;
      if (v56 <= v72)
        v56 = v72;
      v74 = (unsigned int *)(v60 + 8 * v66);
      v76 = *v74;
      v75 = v74[1];
      if (v61 >= v76)
        v61 = v76;
      if (v55 <= v75)
        v55 = v75;
      --v51;
    }
    while (v51);
    if ((_DWORD)v54)
      goto LABEL_61;
  }
  else
  {
    v57 = 0;
    v56 = 0;
    v55 = 0;
    v63 = -1;
    v62 = -1;
    v61 = -1;
    v65 = v163;
    if ((_DWORD)v54)
    {
LABEL_61:
      v165 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = (unsigned int *)(v53 + 4);
      v81 = (_QWORD *)&unk_25582F000;
      do
      {
        v83 = *v80++;
        v82 = v83;
        if ((v83 & 1) == 0)
        {
          v84 = v82 >> 1;
          if (((*(_DWORD *)((char *)v49 + ((v82 >> 4) & 0xFFFFFFC)) >> (v82 >> 1)) & 1) != 0)
          {
            v46[v77++] = v84;
            if (*(_DWORD *)(v52 + 4 * v84))
              ++v78;
          }
          else
          {
            v85 = (unsigned int *)(*((_QWORD *)this + 27) + 8 * v84);
            v87 = *v85;
            v86 = v85[1];
            v88 = (unsigned int *)(*((_QWORD *)this + 29) + 8 * v84);
            v90 = *v88;
            v89 = v88[1];
            v91 = (unsigned int *)(*((_QWORD *)this + 28) + 8 * v84);
            v93 = *v91;
            v92 = v91[1];
            if (v57 >= v87 && v86 >= v63 && v56 >= v90 && v89 >= v62 && v55 >= v93 && v92 >= v61)
            {
              v65[v165] = v84;
              if (*(_DWORD *)(v52 + 4 * v84))
                ++v79;
              ++v165;
            }
          }
        }
        --v54;
      }
      while (v54);
      goto LABEL_91;
    }
  }
  v165 = 0;
  v77 = 0;
  v79 = 0;
  v78 = 0;
  v81 = &unk_25582F000;
LABEL_91:
  if (v196 != &v192 && v196 != 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v81[327] + 24) + 24))(v81[327] + 24);
    v50 = this;
  }
  if (v78 | v79)
  {
    v100 = (uint64_t *)((char *)v50 + 216);
    physx::Bp::AuxData::AuxData((uint64_t)&v178, v77, (uint64_t *)v50 + 27, v46, *((_QWORD *)v50 + 23));
    if (v78 && v182)
    {
      v157 = (uint64_t *)((char *)v50 + 216);
      v159 = v44;
      v161 = v43;
      v101 = 0;
      LODWORD(v102) = 0;
      v103 = this;
      v104 = *((_QWORD *)this + 24);
      v105 = *((_QWORD *)this + 1);
      v173 = *((_QWORD *)this + 43);
      v174 = *((_QWORD *)this + 44);
      v106 = v180;
      v192 = v181;
      v193 = v181;
      v108 = v178;
      v107 = v179;
      v194 = v105;
      v195 = (char *)this + 360;
      v196 = &v173;
      v167 = v182;
      v169 = v179;
      do
      {
        v109 = *(_DWORD *)(v106 + 4 * v101);
        do
        {
          v110 = 8 * v102;
          v102 = (v102 + 1);
        }
        while (*(_DWORD *)(v108 + v110) < *(_DWORD *)(v108 + 8 * v101));
        v111 = *(_DWORD *)(v108 + 8 * v101 + 4);
        if (*(_DWORD *)(v108 + 8 * v102) <= v111)
        {
          v112 = (uint64_t *)(v107 + 16 * v101);
          v113 = v112 + 1;
          v114 = v102;
          v115 = v102;
          do
          {
            v116 = *(_DWORD *)(v106 + 4 * v114);
            if (v109 != v116)
            {
              if (*(_BYTE *)(v104 + (v116 & 3 | (4 * (v109 & 3)))))
              {
                v117 = (uint64_t *)(v107 + 16 * v114);
                v118.i64[0] = *v113;
                v119.i64[0] = *v117;
                v118.i64[1] = v117[1];
                v119.i64[1] = *v112;
                if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(v119, v118))) & 1) == 0)
                {
                  physx::Bp::addPair((uint64_t)&v192, v101, v115);
                  v107 = v169;
                  v113 = v112 + 1;
                  v103 = this;
                }
              }
            }
            v114 = ++v115;
          }
          while (*(_DWORD *)(v108 + 8 * v114) <= v111);
        }
        if (v102 >= v167)
          break;
        ++v101;
      }
      while (v101 < v167);
      *((_QWORD *)v103 + 43) = v173;
      *((_QWORD *)v103 + 44) = v174;
      v81 = (_QWORD *)&unk_25582F000;
      LODWORD(v43) = v161;
      v65 = v163;
      v44 = v159;
      v100 = v157;
    }
    if (v44 != (_DWORD)v43 && v165)
    {
      physx::Bp::AuxData::AuxData((uint64_t)&v173, v165, v100, v65, *((_QWORD *)this + 23));
      v162 = v182;
      if (v182)
      {
        v160 = v177;
        if (v177)
        {
          v120 = 0;
          v121 = 0;
          v122 = this;
          v123 = v173;
          v124 = *((_QWORD *)this + 1);
          v125 = *((_QWORD *)this + 24);
          v198 = *((_QWORD *)this + 43);
          v199 = *((_QWORD *)this + 44);
          v126 = v178;
          v171 = v179;
          v127 = v180;
          v128 = v175;
          v168 = v125;
          v170 = v174;
          v195 = (char *)this + 360;
          v196 = &v198;
          v155 = v176;
          v156 = v181;
          v192 = v181;
          v193 = v176;
          v158 = v124;
          v194 = v124;
          v164 = v175;
          v166 = v180;
          do
          {
            v129 = *(_DWORD *)(v127 + 4 * v120);
            v130 = v121 + 1;
            do
            {
              LODWORD(v131) = v121;
              v132 = v130;
              v133 = *(_DWORD *)(v123 + 8 * v121++);
              ++v130;
            }
            while (v133 < *(_DWORD *)(v126 + 8 * v120));
            v134 = *(_DWORD *)(v126 + 8 * v120 + 4);
            if (v133 <= v134)
            {
              v131 = v131;
              v135 = (uint64_t *)(v171 + 16 * v120);
              do
              {
                v136 = *(_DWORD *)(v128 + 4 * v131);
                if (v129 != v136)
                {
                  if (*(_BYTE *)(v125 + (v136 & 3 | (4 * (v129 & 3)))))
                  {
                    v137 = (uint64_t *)(v170 + 16 * v131);
                    v138.i64[0] = v135[1];
                    v139.i64[0] = *v137;
                    v138.i64[1] = v137[1];
                    v139.i64[1] = *v135;
                    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(v139, v138))) & 1) == 0)
                    {
                      physx::Bp::addPair((uint64_t)&v192, v120, v132 - 1);
                      v128 = v164;
                      v127 = v166;
                      v125 = v168;
                      v122 = this;
                    }
                  }
                }
                v131 = v132;
                v140 = *(_DWORD *)(v123 + 8 * v132++);
              }
              while (v140 <= v134);
            }
            if (--v121 >= v160)
              break;
            ++v120;
          }
          while (v120 < v162);
          v141 = 0;
          v142 = 0;
          v192 = v155;
          v193 = v156;
          v194 = v158;
          v195 = (char *)this + 360;
          v196 = &v198;
          do
          {
            v143 = *(_DWORD *)(v128 + 4 * v141);
            v144 = v142 + 1;
            do
            {
              LODWORD(v145) = v142;
              v146 = v144;
              v147 = *(_DWORD *)(v126 + 8 * v142++);
              ++v144;
            }
            while (v147 <= *(_DWORD *)(v123 + 8 * v141));
            v148 = *(_DWORD *)(v123 + 8 * v141 + 4);
            if (v147 <= v148)
            {
              v145 = v145;
              v149 = (uint64_t *)(v170 + 16 * v141);
              do
              {
                v150 = *(_DWORD *)(v127 + 4 * v145);
                if (v143 != v150)
                {
                  if (*(_BYTE *)(v125 + (v150 & 3 | (4 * (v143 & 3)))))
                  {
                    v151 = (uint64_t *)(v171 + 16 * v145);
                    v152.i64[0] = v149[1];
                    v153.i64[0] = *v151;
                    v152.i64[1] = v151[1];
                    v153.i64[1] = *v149;
                    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(v153, v152))) & 1) == 0)
                    {
                      physx::Bp::addPair((uint64_t)&v192, v141, v146 - 1);
                      v128 = v164;
                      v127 = v166;
                      v125 = v168;
                      v122 = this;
                    }
                  }
                }
                v145 = v146;
                v154 = *(_DWORD *)(v126 + 8 * v146++);
              }
              while (v154 <= v148);
            }
            if (--v142 >= v162)
              break;
            ++v141;
          }
          while (v141 < v160);
          *((_QWORD *)v122 + 43) = v198;
          *((_QWORD *)v122 + 44) = v199;
          v81 = &unk_25582F000;
        }
      }
      physx::Bp::AuxData::~AuxData((physx::Bp::AuxData *)&v173);
    }
    physx::Bp::AuxData::~AuxData((physx::Bp::AuxData *)&v178);
  }
  if ((void (***)(physx::Cm::RadixSortBuffered *__hidden))v186 != &v183 && (_QWORD)v186)
    (*(void (**)(uint64_t))(*(_QWORD *)(v81[327] + 24) + 24))(v81[327] + 24);
  if (v190 != (unsigned int *)v189)
  {
    if (v190)
      (*(void (**)(uint64_t))(*(_QWORD *)(v81[327] + 24) + 24))(v81[327] + 24);
  }
}

void physx::Bp::ComputeCreatedDeletedPairsLists(uint64_t a1, unsigned int *a2, unsigned int a3, pthread_mutex_t **a4, const void **a5, _DWORD *a6, _DWORD *a7, const void **a8, unsigned int *a9, _DWORD *a10, unsigned int *a11, uint64_t a12)
{
  unsigned int *v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  char v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _DWORD *v43;

  v12 = a9;
  if (a3)
  {
    v13 = a10;
    v14 = a3;
    v15 = a2;
    v16 = a3;
    v43 = a6;
    do
    {
      v18 = *v15++;
      v17 = v18;
      v20 = *(_QWORD *)(a12 + 32);
      v19 = *(_QWORD *)(a12 + 40);
      v21 = (unsigned int *)(v20 + 8 * v18);
      v22 = *(_BYTE *)(v19 + v18);
      if ((v22 & 2) != 0)
      {
        if ((v22 & 4) == 0)
        {
          v25 = *v12;
          if (*v12 == *v13)
          {
            v26 = (void *)physx::PxcScratchAllocator::alloc(a4, 16 * v25, 1);
            memcpy(v26, *a8, (8 * *a10));
            physx::PxcScratchAllocator::free((uint64_t)a4, (unint64_t)*a8);
            v12 = a9;
            a6 = v43;
            v13 = a10;
            *a8 = v26;
            *a10 *= 2;
            v25 = *a9;
          }
          else
          {
            v26 = (void *)*a8;
          }
          LODWORD(v30) = *v21;
          v31 = *(_DWORD *)(v20 + 8 * v17 + 4);
          if (*v21 >= v31)
            v32 = v31;
          else
            v32 = v30;
          if (v30 <= v31)
            v30 = v31;
          else
            v30 = v30;
          *v12 = v25 + 1;
          *((_QWORD *)v26 + v25) = v32 | (v30 << 32);
        }
      }
      else
      {
        *(_BYTE *)(v19 + v17) = v22 & 0xFE;
        if ((*(_BYTE *)(*(_QWORD *)(a12 + 40) + (((uint64_t)v21 - *(_QWORD *)(a12 + 32)) >> 3)) & 4) != 0)
        {
          v23 = *a6;
          if (*a6 == *a7)
          {
            v24 = (void *)physx::PxcScratchAllocator::alloc(a4, 16 * v23, 1);
            memcpy(v24, *a5, (8 * *a7));
            physx::PxcScratchAllocator::free((uint64_t)a4, (unint64_t)*a5);
            v12 = a9;
            a6 = v43;
            v13 = a10;
            *a5 = v24;
            *a7 *= 2;
            v23 = *v43;
          }
          else
          {
            v24 = (void *)*a5;
          }
          LODWORD(v27) = *v21;
          v28 = *(_DWORD *)(v20 + 8 * v17 + 4);
          if (*v21 >= v28)
            v29 = v28;
          else
            v29 = v27;
          if (v27 <= v28)
            v27 = v28;
          else
            v27 = v27;
          *a6 = v23 + 1;
          *((_QWORD *)v24 + v23) = v29 | (v27 << 32);
          *(_BYTE *)(*(_QWORD *)(a12 + 40) + (((uint64_t)v21 - *(_QWORD *)(a12 + 32)) >> 3)) &= ~4u;
        }
      }
      --v16;
    }
    while (v16);
    v33 = a2;
    *a11 = *v12;
    do
    {
      v35 = *v33++;
      v34 = v35;
      if ((~*(unsigned __int8 *)(*(_QWORD *)(a12 + 40) + v35) & 6) == 0)
      {
        v36 = *(_QWORD *)(a12 + 32);
        v37 = *a11;
        if (*a11 == *v13)
        {
          v38 = (void *)physx::PxcScratchAllocator::alloc(a4, 16 * v37, 1);
          memcpy(v38, *a8, (8 * *a10));
          physx::PxcScratchAllocator::free((uint64_t)a4, (unint64_t)*a8);
          v13 = a10;
          *a8 = v38;
          *a10 *= 2;
          v37 = *a11;
        }
        else
        {
          v38 = (void *)*a8;
        }
        LODWORD(v39) = *(_DWORD *)(v36 + 8 * v34);
        v40 = *(_DWORD *)(v36 + 8 * v34 + 4);
        if (v39 >= v40)
          v41 = v40;
        else
          v41 = v39;
        if (v39 <= v40)
          v39 = v40;
        else
          v39 = v39;
        *a11 = v37 + 1;
        *((_QWORD *)v38 + v37) = v41 | (v39 << 32);
      }
      --v14;
    }
    while (v14);
  }
  else
  {
    *a11 = *a9;
  }
}

const void **physx::Bp::BroadPhaseSap::deletePairs(const void **this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;

  v1 = *((unsigned int *)this + 114);
  if ((_DWORD)v1)
  {
    v2 = (uint64_t)this;
    v3 = 0;
    v4 = (char *)this[55];
    v5 = (uint64_t *)(this + 45);
    do
    {
      v6 = &v4[8 * v3];
      v7 = *(_DWORD *)v6;
      v8 = *((_DWORD *)v6 + 1);
      if (*(_DWORD *)v6 >= v8)
        v9 = *((_DWORD *)v6 + 1);
      else
        v9 = *(_DWORD *)v6;
      if (v7 <= v8)
        v7 = v8;
      if (*(_DWORD *)(v2 + 376))
      {
        v10 = (v9 | (v7 << 16)) + ~((v9 | (v7 << 16)) << 15);
        v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
        v12 = ((v11 + ~(v11 << 11)) ^ ((v11 + ~(v11 << 11)) >> 16)) & *(_DWORD *)(v2 + 416);
        v13 = *(_DWORD *)(*v5 + 4 * v12);
        if (v13 != 0x3FFFFFFF)
        {
          while (1)
          {
            v14 = v13;
            v15 = (int *)(*(_QWORD *)(v2 + 392) + 8 * v13);
            v17 = *v15;
            v16 = v15[1];
            if (v17 == v9 && v16 == v7)
              break;
            v13 = *(_DWORD *)(*(_QWORD *)(v2 + 368) + 4 * v14);
            if (v13 == 0x3FFFFFFF)
              goto LABEL_17;
          }
          physx::Bp::SapPairManager::RemovePair(v5, v12, v14 & 0x1FFFFFFF);
          this = physx::Bp::SapPairManager::shrinkMemory((const void **)v5);
        }
      }
LABEL_17:
      ++v3;
    }
    while (v3 != v1);
  }
  return this;
}

uint64_t physx::Bp::BroadPhaseBatchUpdateWorkTask::runInternal(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  physx::PxcScratchAllocator *v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  physx::PxcScratchAllocator *v60;
  physx::PxcScratchAllocator *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  BOOL v82;
  int v84;
  char *v85;
  char *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  BOOL v99;
  int v101;
  char *v102;
  pthread_mutex_t **v103;
  char *v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  char v119;
  unint64_t v120;
  uint64_t v121;
  float v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  int v146;
  char *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unint64_t v151;
  unint64_t v152;
  unsigned int *v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  BOOL v159;
  BOOL v160;
  int v162;
  physx::PxcScratchAllocator *v163;
  unsigned int v164;
  unsigned int *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  pthread_mutex_t **v200;
  physx::PxcScratchAllocator *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  physx::PxcScratchAllocator *v210;
  pthread_mutex_t **v211;
  physx::PxcScratchAllocator *v212;
  physx::PxcScratchAllocator *v213;
  int v214;
  pthread_mutex_t **v215;
  char *__src;
  void *__srca;
  int __srcb;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  unint64_t v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  int v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  unsigned int v240;
  void *v241;
  int v242;
  int v243;
  float v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;

  v252 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(this + 64) = 0;
  v1 = *(_QWORD *)(this + 40);
  v2 = *(_DWORD *)(v1 + 168);
  if (!v2)
    return this;
  v3 = *(unsigned int *)(this + 48);
  v4 = *(_DWORD *)(v1 + 328);
  v5 = *(_DWORD *)(this + 68);
  v6 = *(_QWORD *)(v1 + 176);
  v219 = this;
  v220 = *(_QWORD *)(this + 40);
  if (5 * v2 < v4)
  {
    v7 = *(_QWORD *)(v1 + 232);
    v246 = *(_QWORD *)(v1 + 224);
    v247 = v7;
    v8 = *(_QWORD *)(v1 + 216);
    v248 = v7;
    v249 = v8;
    v250 = v8;
    v251 = v246;
    v9 = v1 + 8 * v3;
    v10 = *(_QWORD *)(v9 + 264);
    if (*(_DWORD *)(v10 + 4) >> 1 == 0x1FFFFFFF)
      return this;
    v11 = *(char **)(v1 + 216 + 8 * v3);
    v12 = *(_QWORD *)(v9 + 240);
    v210 = (physx::PxcScratchAllocator *)*(&v246 + (2 * v3));
    v213 = *(physx::PxcScratchAllocator **)(v1 + 184);
    v206 = *(_QWORD *)(v9 + 264);
    v208 = *(&v246 + ((2 * (_DWORD)v3) | 1u));
    v13 = *(_QWORD *)(v1 + 288);
    v14 = v6 + 4 * v3;
    __src = v11;
    v202 = v14;
    v204 = v13;
    if (v2 >= 0x200)
    {
      v47 = 2 * v4;
      if (!(_DWORD)v47)
      {
        v57 = 0;
        v55 = *(unsigned int **)(v1 + 304);
        *(_QWORD *)v55 = 0;
        v59 = (unint64_t)v55;
LABEL_199:
        *(_DWORD *)(this + 64) = v57;
        *(_DWORD *)(this + 68) = v5;
        while ((unint64_t)(v55 + 2) <= v59)
        {
          v185 = v55;
          v55 += 2;
          v186 = v185[2];
          v187 = v185[3];
          if (v186 <= v187)
          {
            v188 = *(_QWORD *)(v1 + 320);
            do
            {
              *(_DWORD *)(v188 + 4 * v186) = v186;
              ++v186;
              v187 = v185[3];
            }
            while (v186 <= v187);
            v186 = *v55;
          }
          if (v186 <= v187)
          {
            LODWORD(v189) = v186 - 1;
            v190 = *(_QWORD *)(v1 + 312);
            do
            {
              v189 = *(unsigned int *)(v190 + 4 * v189);
              if (v186 != (_DWORD)v189)
              {
                v191 = *(_QWORD *)(v1 + 320);
                v192 = *(unsigned int *)(v191 + 4 * v189);
                v193 = *(unsigned int *)(v10 + 4 * v192);
                v194 = *(_DWORD *)(v12 + 4 * v186);
                this = *(unsigned int *)(v10 + 4 * v186);
                *(_DWORD *)(v12 + 4 * v186) = *(_DWORD *)(v12 + 4 * v192);
                *(_DWORD *)(v10 + 4 * v186) = *(_DWORD *)(v10 + 4 * v192);
                *(_DWORD *)(v12 + 4 * v192) = v194;
                *(_DWORD *)(v10 + 4 * v192) = this;
                *(_DWORD *)(v191 + 4 * v192) = *(_DWORD *)(v191 + 4 * v186);
                *(_DWORD *)(v191 + 4 * *(unsigned int *)(v191 + 4 * v186)) = v192;
                *(_DWORD *)&v11[4 * (v193 & 1) + ((4 * v193) & 0x3FFFFFFF8)] = v186;
                v187 = v185[3];
              }
              ++v186;
            }
            while (v186 <= v187);
            v186 = *v55;
          }
          if (v186 - 1 <= v187)
          {
            v196 = *(_QWORD *)(v1 + 312);
            v195 = *(_QWORD *)(v1 + 320);
            do
            {
              *(_DWORD *)(v195 + 4 * v186) = v186 - 1;
              *(_DWORD *)(v196 + 4 * (v186 - 1)) = v186;
              v81 = v186++ > v185[3];
            }
            while (!v81);
          }
        }
        return this;
      }
      v48 = 0;
      v17 = 0;
      do
      {
        v49 = *(unsigned int *)(v10 + 4 + 4 * v48);
        if (v49 >> 1 == 0x1FFFFFFF)
          break;
        v50 = v49 >> 1;
        if (*(_BYTE *)(v13 + (v49 >> 1)))
        {
          v51 = *(float *)(*(_QWORD *)(v1 + 200) + 4 * v50);
          if ((v49 & 1) != 0)
          {
            v244 = v51 + *(float *)(v14 + 24 * v50 + 12);
            v52 = LODWORD(v244);
            v53 = 20;
          }
          else
          {
            v244 = *(float *)(v14 + 24 * v50) - v51;
            v52 = LODWORD(v244);
            v53 = -16;
          }
          if (v52 < 0)
            v54 = ~v52;
          else
            v54 = v52 | 0x80000000;
          *(_DWORD *)(v12 + 4 + 4 * v48) = (v54 & 0xFFFFFFF0) + v53;
          *(_DWORD *)(*(_QWORD *)(v1 + 296) + 4 * v17++) = v48 + 1;
        }
        ++v48;
      }
      while (v47 != v48);
    }
    else
    {
      v15 = v5;
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)(v1 + 160);
      v19 = *(_QWORD *)(v1 + 200);
      v20 = *(_QWORD *)(v1 + 296);
      do
      {
        v21 = *(unsigned int *)(v18 + 4 * v16);
        v22 = (float *)(v14 + 24 * v21);
        v23 = &v11[8 * v21];
        v244 = *v22 - *(float *)(v19 + 4 * v21);
        if (v244 < 0.0)
          v24 = ~LODWORD(v244);
        else
          v24 = LODWORD(v244) | 0x80000000;
        v244 = *(float *)(v19 + 4 * v21) + v22[3];
        if (v244 < 0.0)
          v25 = ~LODWORD(v244);
        else
          v25 = LODWORD(v244) | 0x80000000;
        *(_DWORD *)(v12 + 4 * *(unsigned int *)v23) = (v24 & 0xFFFFFFF0) - 16;
        *(_DWORD *)(v12 + 4 * *((unsigned int *)v23 + 1)) = (v25 & 0xFFFFFFF0) + 20;
        *(_DWORD *)(v20 + 4 * v17) = *(_DWORD *)v23;
        v26 = v17 + 1;
        v17 += 2;
        *(_DWORD *)(v20 + 4 * v26) = *((_DWORD *)v23 + 1);
        ++v16;
      }
      while (v16 < *(unsigned int *)(v1 + 168));
      physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(v20, v17, (uint64_t)&v244, (uint64_t)&v245, 32);
      v13 = v204;
      this = v219;
      v1 = v220;
      v5 = v15;
      v10 = v206;
    }
    v55 = *(unsigned int **)(v1 + 304);
    *(_QWORD *)v55 = 0;
    if (v17)
    {
      v56 = 0;
      v57 = 0;
      v58 = *(_QWORD *)(v1 + 320);
      v59 = (unint64_t)v55;
      v197 = v17;
      v60 = v213;
      v11 = __src;
      v62 = v208;
      v61 = v210;
      do
      {
        v198 = v56;
        v63 = *(unsigned int *)(*(_QWORD *)(v1 + 296) + 4 * v56);
        LODWORD(v64) = *(_DWORD *)(v10 + 4 * v63);
        do
        {
          v65 = v64 >> 1;
          v66 = *(_DWORD *)(v12 + 4 * v63);
          v244 = *(float *)(*(_QWORD *)(v1 + 200) + 4 * v65)
               + *(float *)(v14 + 24 * v65 + 12);
          if (v244 < 0.0)
            v67 = ~LODWORD(v244);
          else
            v67 = LODWORD(v244) | 0x80000000;
          v68 = *(unsigned int *)(v58 + 4 * v63);
          if (*(_DWORD *)(v12 + 4 * v68) > v66)
          {
            v229 = v59;
            v232 = v64 >> 1;
            v242 = *((_DWORD *)v60 + v65);
            v69 = (unsigned int *)((char *)v61 + 8 * v65);
            v70 = (unsigned int *)(v62 + 8 * v65);
            v234 = v63;
            v236 = 4 * (v242 & 3);
            if ((v64 & 1) != 0)
            {
              v72 = v63;
              do
              {
                v90 = *(unsigned int *)(v10 + 4 * v68);
                if ((v90 & 1) == 0)
                {
                  v91 = v90 >> 1;
                  v92 = (unsigned int *)((char *)v61 + 8 * (v90 >> 1));
                  v94 = *v92;
                  v93 = v92[1];
                  v95 = (unsigned int *)(v62 + 8 * (v90 >> 1));
                  v97 = *v95;
                  v96 = v95[1];
                  v98 = v69[1] > v94 && v93 > *v69;
                  v99 = v98 && v70[1] > v97;
                  if (v99 && v96 > *v70)
                  {
                    v101 = *((_DWORD *)v60 + v91);
                    if (v242 != v101)
                    {
                      if (*(_BYTE *)(*(_QWORD *)(v1 + 192) + (v101 & 3 | (unint64_t)v236)))
                      {
                        v102 = *(char **)(this + 56);
                        if (v57 == v5)
                        {
                          v222 = 2 * v5;
                          v239 = v57;
                          v103 = *(pthread_mutex_t ***)(v1 + 8);
                          v226 = v5;
                          v104 = (char *)physx::PxcScratchAllocator::alloc(v103, 16 * v5, 1);
                          memcpy(v104, v102, (8 * v226));
                          v105 = (uint64_t)v103;
                          v57 = v239;
                          physx::PxcScratchAllocator::free(v105, (unint64_t)v102);
                          v14 = v202;
                          v13 = v204;
                          v62 = v208;
                          v61 = v210;
                          v60 = v213;
                          v11 = __src;
                          v10 = v206;
                          this = v219;
                          v1 = v220;
                          *(_QWORD *)(v219 + 56) = v104;
                          v58 = *(_QWORD *)(v220 + 320);
                          v102 = v104;
                          v5 = v222;
                        }
                        if (v232 >= v91)
                          v106 = v91;
                        else
                          v106 = v232;
                        v107 = (unsigned int *)&v102[8 * v57];
                        if (v232 <= v91)
                          v108 = v91;
                        else
                          v108 = v232;
                        *v107 = v106;
                        v107[1] = v108;
                        ++v57;
                        LODWORD(v63) = v234;
                      }
                    }
                  }
                }
                --v72;
                v68 = *(unsigned int *)(v58 + 4 * v68);
              }
              while (v66 < *(_DWORD *)(v12 + 4 * v68));
            }
            else
            {
              v238 = v57;
              v71 = (v67 & 0xFFFFFFF0) + 20;
              v72 = v63;
              do
              {
                v73 = *(unsigned int *)(v10 + 4 * v68);
                if ((v73 & 1) != 0)
                {
                  v74 = v73 >> 1;
                  if (*(_DWORD *)(v12 + 4 * *(unsigned int *)&v11[8 * (v73 >> 1)]) < v71)
                  {
                    v75 = (unsigned int *)((char *)v61 + 8 * v74);
                    v77 = *v75;
                    v76 = v75[1];
                    v78 = (unsigned int *)(v62 + 8 * v74);
                    v80 = *v78;
                    v79 = v78[1];
                    v81 = v69[1] > v77 && v76 > *v69;
                    v82 = v81 && v70[1] > v80;
                    if (v82 && v79 > *v70)
                    {
                      v84 = *((_DWORD *)v60 + v74);
                      if (v242 != v84)
                      {
                        if (*(_BYTE *)(*(_QWORD *)(v1 + 192) + (v84 & 3 | (unint64_t)v236)))
                        {
                          v85 = *(char **)(this + 56);
                          if (v238 == v5)
                          {
                            v221 = 2 * v5;
                            v200 = *(pthread_mutex_t ***)(v1 + 8);
                            v225 = v5;
                            v86 = (char *)physx::PxcScratchAllocator::alloc(v200, 16 * v5, 1);
                            memcpy(v86, v85, (8 * v225));
                            physx::PxcScratchAllocator::free((uint64_t)v200, (unint64_t)v85);
                            v14 = v202;
                            v13 = v204;
                            v62 = v208;
                            v61 = v210;
                            v60 = v213;
                            v11 = __src;
                            v10 = v206;
                            this = v219;
                            v1 = v220;
                            *(_QWORD *)(v219 + 56) = v86;
                            v58 = *(_QWORD *)(v220 + 320);
                            v85 = v86;
                            v5 = v221;
                          }
                          if (v232 <= v74)
                            v87 = v74;
                          else
                            v87 = v232;
                          v88 = (unsigned int *)&v85[8 * v238];
                          if (v232 >= v74)
                            v89 = v74;
                          else
                            v89 = v232;
                          *v88 = v87;
                          v88[1] = v89;
                          ++v238;
                          LODWORD(v63) = v234;
                        }
                      }
                    }
                  }
                }
                --v72;
                v68 = *(unsigned int *)(v58 + 4 * v68);
              }
              while (v66 < *(_DWORD *)(v12 + 4 * v68));
              v57 = v238;
            }
            v109 = *(_QWORD *)(v1 + 312);
            v110 = *(unsigned int *)(v109 + 4 * v63);
            v111 = *(unsigned int *)(v58 + 4 * v63);
            v112 = *(unsigned int *)(v109 + 4 * v68);
            *(_DWORD *)(v109 + 4 * v111) = v110;
            *(_DWORD *)(v58 + 4 * v110) = v111;
            *(_DWORD *)(v109 + 4 * v63) = v112;
            *(_DWORD *)(v58 + 4 * v63) = v68;
            *(_DWORD *)(v58 + 4 * v112) = v63;
            *(_DWORD *)(v109 + 4 * v68) = v63;
            v113 = (unsigned int *)(v229 + 16);
            do
            {
              v114 = *(v113 - 4);
              v113 -= 2;
            }
            while (v72 < v114);
            v55 = *(unsigned int **)(v1 + 304);
            v59 = (unint64_t)(v113 - 2);
            if (v113 - 2 == v55 || v72 > *(v113 - 1) + 1)
            {
              *v113 = v72;
              v59 = (unint64_t)v113;
            }
            *(_DWORD *)(v59 + 4) = v63;
          }
          LODWORD(v63) = v63 + 1;
          v64 = *(unsigned int *)(v10 + 4 * v63);
        }
        while (v64 >> 1 != 0x1FFFFFFF
             && !*(_BYTE *)(v13 + (v64 >> 1))
             && *(_BYTE *)(v13
                         + ((unint64_t)*(unsigned int *)(v10
                                                              + 4 * *(unsigned int *)(v58 + 4 * v63)) >> 1)));
        v56 = v198 + 1;
      }
      while (v198 + 1 != v197);
    }
    else
    {
      v57 = 0;
      v59 = (unint64_t)v55;
      v11 = __src;
    }
    goto LABEL_199;
  }
  v27 = *(_QWORD *)(v1 + 232);
  v246 = *(_QWORD *)(v1 + 224);
  v247 = v27;
  v28 = *(_QWORD *)(v1 + 216);
  v248 = v27;
  v249 = v28;
  v250 = v28;
  v251 = v246;
  v29 = v1 + 8 * v3;
  v30 = *(_QWORD *)(v29 + 264);
  v31 = *(unsigned int *)(v30 + 4);
  if (v31 >> 1 != 0x1FFFFFFF)
  {
    v32 = *(&v246 + (2 * v3));
    v33 = *(&v246 + ((2 * (_DWORD)v3) | 1u));
    v34 = *(_QWORD *)(v1 + 184);
    v35 = *(_QWORD *)(v1 + 216 + 8 * v3);
    v36 = *(_QWORD *)(v29 + 240);
    v37 = v31 >> 1;
    v38 = v6 + 4 * v3;
    v39 = *(physx::PxcScratchAllocator **)(v1 + 288);
    v244 = *(float *)(v38 + 24 * (*(_DWORD *)(v30 + 4) >> 1))
         - *(float *)(*(_QWORD *)(v1 + 200) + 4 * ((unint64_t)*(unsigned int *)(v30 + 4) >> 1));
    if (v244 < 0.0)
      v40 = ~LODWORD(v244);
    else
      v40 = LODWORD(v244) | 0x80000000;
    *(_DWORD *)(v36 + 4) = (v40 & 0xFFFFFFF0) - 16;
    v41 = *((unsigned __int8 *)v39 + v37);
    v42 = *(_DWORD *)(v1 + 168);
    v43 = *(unsigned int **)(v1 + 304);
    *(_QWORD *)v43 = 0;
    v44 = *(_DWORD *)(v30 + 8);
    if (v44 >> 1 == 0x1FFFFFFF)
    {
      v45 = 0;
      v46 = (unint64_t)v43;
    }
    else
    {
      v45 = 0;
      v115 = *((unsigned __int8 *)v39 + v37);
      v116 = 2 * v42 - v41;
      v117 = 2;
      v46 = (unint64_t)v43;
      v207 = v33;
      v209 = v32;
      v203 = v38;
      v205 = v34;
      v201 = v39;
      do
      {
        v118 = v115;
        v119 = v44;
        v120 = (unint64_t)v44 >> 1;
        v115 = *((unsigned __int8 *)v39 + v120);
        if (v115 | v118)
        {
          v121 = *(_QWORD *)(v1 + 200);
          v122 = *(float *)(v121 + 4 * v120);
          if ((v44 & 1) != 0)
          {
            v244 = v122 + *(float *)(v38 + 24 * v120 + 12);
            v123 = LODWORD(v244);
            v124 = 20;
          }
          else
          {
            v244 = *(float *)(v38 + 24 * v120) - v122;
            v123 = LODWORD(v244);
            v124 = -16;
          }
          v116 -= v115;
          if (v123 < 0)
            v125 = ~v123;
          else
            v125 = v123 | 0x80000000;
          v126 = (v125 & 0xFFFFFFF0) + v124;
          *(_DWORD *)(v36 + 4 * v117) = v126;
          v127 = *(_QWORD *)(v1 + 320);
          v128 = *(unsigned int *)(v127 + 4 * v117);
          if (*(_DWORD *)(v36 + 4 * v128) > v126)
          {
            v233 = v116;
            v244 = *(float *)(v121 + 4 * v120) + *(float *)(v38 + 24 * v120 + 12);
            v129 = *(_DWORD *)(v34 + 4 * v120);
            if (v244 < 0.0)
              v130 = ~LODWORD(v244);
            else
              v130 = LODWORD(v244) | 0x80000000;
            v131 = (unsigned int *)(v32 + 8 * v120);
            v235 = v120;
            v132 = (unsigned int *)(v33 + 8 * v120);
            v243 = v129;
            v237 = 4 * (v129 & 3);
            if ((v119 & 1) != 0)
            {
              v134 = v117;
              v224 = v46;
              do
              {
                v151 = *(unsigned int *)(v30 + 4 * v128);
                if ((v151 & 1) == 0)
                {
                  v152 = v151 >> 1;
                  v153 = (unsigned int *)(v32 + 8 * (v151 >> 1));
                  v155 = *v153;
                  v154 = v153[1];
                  v156 = (unsigned int *)(v33 + 8 * (v151 >> 1));
                  v158 = *v156;
                  v157 = v156[1];
                  v159 = v131[1] > v155 && v154 > *v131;
                  v160 = v159 && v132[1] > v158;
                  if (v160 && v157 > *v132)
                  {
                    v162 = *(_DWORD *)(v34 + 4 * v152);
                    if (v243 != v162)
                    {
                      if (*(_BYTE *)(*(_QWORD *)(v1 + 192) + (v162 & 3 | (unint64_t)v237)))
                      {
                        v163 = *(physx::PxcScratchAllocator **)(this + 56);
                        if (v45 == v5)
                        {
                          __srcb = 2 * v5;
                          v215 = *(pthread_mutex_t ***)(v1 + 8);
                          v228 = v5;
                          v231 = v45;
                          v241 = *(void **)(this + 56);
                          v212 = (physx::PxcScratchAllocator *)physx::PxcScratchAllocator::alloc(v215, 16 * v5, 1);
                          memcpy(v212, v241, (8 * v228));
                          physx::PxcScratchAllocator::free((uint64_t)v215, (unint64_t)v241);
                          v39 = v201;
                          v38 = v203;
                          v34 = v205;
                          v33 = v207;
                          v32 = v209;
                          v163 = v212;
                          v45 = v231;
                          v1 = v220;
                          v46 = v224;
                          this = v219;
                          *(_QWORD *)(v219 + 56) = v212;
                          v127 = *(_QWORD *)(v220 + 320);
                          v5 = __srcb;
                        }
                        if (v235 >= v152)
                          v164 = v152;
                        else
                          v164 = v235;
                        v165 = (unsigned int *)((char *)v163 + 8 * v45);
                        if (v235 <= v152)
                          v166 = v152;
                        else
                          v166 = v235;
                        *v165 = v164;
                        v165[1] = v166;
                        ++v45;
                      }
                    }
                  }
                }
                --v134;
                v128 = *(unsigned int *)(v127 + 4 * v128);
              }
              while (v126 < *(_DWORD *)(v36 + 4 * v128));
            }
            else
            {
              v133 = (v130 & 0xFFFFFFF0) + 20;
              v134 = v117;
              v240 = v133;
              do
              {
                v135 = *(unsigned int *)(v30 + 4 * v128);
                if ((v135 & 1) != 0)
                {
                  v136 = v135 >> 1;
                  if (*(_DWORD *)(v36 + 4 * *(unsigned int *)(v35 + 8 * (v135 >> 1))) < v133)
                  {
                    v137 = (unsigned int *)(v32 + 8 * v136);
                    v139 = *v137;
                    v138 = v137[1];
                    v140 = (unsigned int *)(v33 + 8 * v136);
                    v142 = *v140;
                    v141 = v140[1];
                    if (v131[1] > v139 && v138 > *v131 && v132[1] > v142 && v141 > *v132)
                    {
                      v146 = *(_DWORD *)(v34 + 4 * v136);
                      if (v243 != v146)
                      {
                        if (*(_BYTE *)(*(_QWORD *)(v1 + 192) + (v146 & 3 | (unint64_t)v237)))
                        {
                          v147 = *(char **)(this + 56);
                          if (v45 == v5)
                          {
                            v214 = 2 * v5;
                            v211 = *(pthread_mutex_t ***)(v1 + 8);
                            v227 = v5;
                            v230 = v45;
                            v223 = v46;
                            __srca = *(void **)(this + 56);
                            v199 = (char *)physx::PxcScratchAllocator::alloc(v211, 16 * v5, 1);
                            memcpy(v199, __srca, (8 * v227));
                            physx::PxcScratchAllocator::free((uint64_t)v211, (unint64_t)__srca);
                            v39 = v201;
                            v38 = v203;
                            v34 = v205;
                            v33 = v207;
                            v32 = v209;
                            v45 = v230;
                            v1 = v220;
                            v46 = v223;
                            this = v219;
                            v147 = v199;
                            *(_QWORD *)(v219 + 56) = v199;
                            v127 = *(_QWORD *)(v220 + 320);
                            v5 = v214;
                          }
                          if (v235 <= v136)
                            v148 = v136;
                          else
                            v148 = v235;
                          v149 = (unsigned int *)&v147[8 * v45];
                          if (v235 >= v136)
                            v150 = v136;
                          else
                            v150 = v235;
                          *v149 = v148;
                          v149[1] = v150;
                          ++v45;
                        }
                      }
                    }
                    v133 = v240;
                  }
                }
                --v134;
                v128 = *(unsigned int *)(v127 + 4 * v128);
              }
              while (v126 < *(_DWORD *)(v36 + 4 * v128));
            }
            v167 = *(_QWORD *)(v1 + 312);
            v168 = *(unsigned int *)(v167 + 4 * v117);
            v169 = *(unsigned int *)(v127 + 4 * v117);
            v170 = *(unsigned int *)(v167 + 4 * v128);
            *(_DWORD *)(v167 + 4 * v169) = v168;
            *(_DWORD *)(v127 + 4 * v168) = v169;
            *(_DWORD *)(v167 + 4 * v117) = v170;
            *(_DWORD *)(v127 + 4 * v117) = v128;
            *(_DWORD *)(v127 + 4 * v170) = v117;
            *(_DWORD *)(v167 + 4 * v128) = v117;
            v171 = (unsigned int *)(v46 + 16);
            v116 = v233;
            do
            {
              v172 = *(v171 - 4);
              v171 -= 2;
            }
            while (v134 < v172);
            v43 = *(unsigned int **)(v1 + 304);
            v46 = (unint64_t)(v171 - 2);
            if (v171 - 2 == v43 || v134 > *(v171 - 1) + 1)
            {
              *v171 = v134;
              v46 = (unint64_t)v171;
            }
            *(_DWORD *)(v46 + 4) = v117;
            v115 = 1;
          }
        }
        else
        {
          if (!v116)
            break;
          v115 = 0;
        }
        v117 = (v117 + 1);
        v44 = *(_DWORD *)(v30 + 4 * v117);
      }
      while (v44 >> 1 != 0x1FFFFFFF);
    }
    *(_DWORD *)(this + 64) = v45;
    *(_DWORD *)(this + 68) = v5;
    while ((unint64_t)(v43 + 2) <= v46)
    {
      v173 = v43;
      v43 += 2;
      v174 = v173[2];
      v175 = v173[3];
      if (v174 <= v175)
      {
        v176 = *(_QWORD *)(v1 + 320);
        do
        {
          *(_DWORD *)(v176 + 4 * v174) = v174;
          ++v174;
          v175 = v173[3];
        }
        while (v174 <= v175);
        v174 = *v43;
      }
      if (v174 <= v175)
      {
        LODWORD(v177) = v174 - 1;
        v178 = *(_QWORD *)(v1 + 312);
        do
        {
          v177 = *(unsigned int *)(v178 + 4 * v177);
          if (v174 != (_DWORD)v177)
          {
            v179 = *(_QWORD *)(v1 + 320);
            v180 = *(unsigned int *)(v179 + 4 * v177);
            v181 = *(unsigned int *)(v30 + 4 * v180);
            v182 = *(_DWORD *)(v36 + 4 * v174);
            this = *(unsigned int *)(v30 + 4 * v174);
            *(_DWORD *)(v36 + 4 * v174) = *(_DWORD *)(v36 + 4 * v180);
            *(_DWORD *)(v30 + 4 * v174) = *(_DWORD *)(v30 + 4 * v180);
            *(_DWORD *)(v36 + 4 * v180) = v182;
            *(_DWORD *)(v30 + 4 * v180) = this;
            *(_DWORD *)(v179 + 4 * v180) = *(_DWORD *)(v179 + 4 * v174);
            *(_DWORD *)(v179 + 4 * *(unsigned int *)(v179 + 4 * v174)) = v180;
            *(_DWORD *)(v35 + ((4 * v181) & 0x3FFFFFFF8) + 4 * (v181 & 1)) = v174;
            v175 = v173[3];
          }
          ++v174;
        }
        while (v174 <= v175);
        v174 = *v43;
      }
      if (v174 - 1 <= v175)
      {
        v184 = *(_QWORD *)(v1 + 312);
        v183 = *(_QWORD *)(v1 + 320);
        do
        {
          *(_DWORD *)(v183 + 4 * v174) = v174 - 1;
          *(_DWORD *)(v184 + 4 * (v174 - 1)) = v174;
          v81 = v174++ > v173[3];
        }
        while (!v81);
      }
    }
    **(_DWORD **)(v1 + 320) = 0;
  }
  return this;
}

void physx::Bp::BroadPhaseSap::batchRemove(physx::Bp::BroadPhaseSap *this)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v24;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int32x2_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  _BYTE *v37;
  _BYTE *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  _BYTE v49[512];
  _BYTE *v50;

  if (!*((_DWORD *)this + 38))
    return;
  v2 = 0;
  v3 = *((_DWORD *)this + 82);
  *((_DWORD *)this + 82) = *((_DWORD *)this + 83);
  do
  {
    v4 = (_QWORD *)((char *)this + 8 * v2);
    v5 = v4[30];
    v6 = v4[33];
    if (*((_DWORD *)this + 38))
    {
      v7 = 0;
      v8 = v4[27];
      v9 = *((_QWORD *)this + 18);
      v10 = -1;
      do
      {
        v11 = (unsigned int *)(v8 + 8 * *(unsigned int *)(v9 + 4 * v7));
        v12 = *v11;
        v13 = v11[1];
        *(_DWORD *)(v6 + 4 * v12) = 1073741821;
        *(_DWORD *)(v6 + 4 * v13) = 1073741821;
        if (v12 < v10)
          v10 = v12;
        ++v7;
      }
      while (v7 < *((unsigned int *)this + 38));
      v14 = 2 * *((_DWORD *)this + 82) + 2;
      if (v10 == v14)
        goto LABEL_9;
    }
    else
    {
      v14 = 2 * *((_DWORD *)this + 82) + 2;
      v10 = -1;
    }
    v15 = -v14;
    v16 = -v10;
    v17 = v10;
    do
    {
      _X1 = v6 + 128 + 4 * v17;
      __asm { PRFM            #0, [X1] }
      ++v17;
      while (1)
      {
        v24 = v17 - 1;
        _X2 = (_DWORD *)(v6 + 4 * v24);
        if (*_X2 != 1073741821)
          break;
        __asm { PRFM            #0, [X2,#0x80] }
        ++v17;
        if (v15 + v17 == 1)
          goto LABEL_9;
      }
      if (v16 + v17 != 1)
      {
        *(_DWORD *)(v5 + 4 * v10) = *(_DWORD *)(v5 + 4 * v24);
        v27 = *(unsigned int *)(v6 + 4 * v24);
        *(_DWORD *)(v6 + 4 * v10) = v27;
        if (v27 >> 1 != 0x1FFFFFFF)
          *(_DWORD *)(*((_QWORD *)this + v2 + 27) + ((4 * v27) & 0x3FFFFFFF8) + 4 * (v27 & 1)) = v10;
      }
      ++v10;
      --v16;
    }
    while (v15 + v17);
LABEL_9:
    ++v2;
  }
  while (v2 != 3);
  if (*((_DWORD *)this + 38))
  {
    v28 = 0;
    v29 = *((_QWORD *)this + 18);
    v30 = *((_QWORD *)this + 27);
    v31 = *((_QWORD *)this + 28);
    v32 = *((_QWORD *)this + 29);
    v33 = vdup_n_s32(0x3FFFFFFDu);
    do
    {
      v34 = *(unsigned int *)(v29 + 4 * v28);
      *(int32x2_t *)(v30 + 8 * v34) = v33;
      *(int32x2_t *)(v31 + 8 * v34) = v33;
      *(int32x2_t *)(v32 + 8 * v34) = v33;
      ++v28;
    }
    while (v28 < *((unsigned int *)this + 38));
  }
  v35 = *((unsigned int *)this + 52);
  v36 = ((v35 >> 3) & 0x1FFFFFFC) + 4;
  if (v35 >= 0x1000)
    v37 = (_BYTE *)(*(uint64_t (**)(uint64_t, size_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v36, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/common/src/CmTmpMem.h", 56);
  else
    v37 = v49;
  v50 = v37;
  bzero(v37, v36);
  v38 = v50;
  if (*((_DWORD *)this + 38))
  {
    v39 = 0;
    v40 = *((_QWORD *)this + 18);
    do
    {
      *(_DWORD *)&v38[((unint64_t)*(unsigned int *)(v40 + 4 * v39) >> 3) & 0x1FFFFFFC] |= 1 << *(_DWORD *)(v40 + 4 * v39);
      ++v39;
      v41 = *((unsigned int *)this + 38);
    }
    while (v39 < v41);
  }
  else
  {
    LODWORD(v41) = 0;
  }
  v42 = *((_DWORD *)this + 102);
  if (v42)
  {
    v43 = 0;
    do
    {
      v44 = (unsigned int *)(*((_QWORD *)this + 49) + 8 * v43);
      v45 = *v44;
      v46 = v44[1];
      if (((*(_DWORD *)&v38[(v45 >> 3) & 0x1FFFFFFC] >> v45) & 1) != 0
        || ((*(_DWORD *)&v38[(v46 >> 3) & 0x1FFFFFFC] >> v46) & 1) != 0)
      {
        v47 = (v45 | ((_DWORD)v46 << 16)) + ~((v45 | ((_DWORD)v46 << 16)) << 15);
        v48 = (9 * (v47 ^ (v47 >> 10))) ^ ((9 * (v47 ^ (v47 >> 10))) >> 6);
        physx::Bp::SapPairManager::RemovePair((uint64_t *)this + 45, *((_DWORD *)this + 104) & ((v48 + ~(v48 << 11)) ^ ((v48 + ~(v48 << 11)) >> 16)), v43);
        v42 = *((_DWORD *)this + 102);
      }
      else
      {
        ++v43;
      }
    }
    while (v43 < v42);
    LODWORD(v41) = *((_DWORD *)this + 38);
    v38 = v50;
  }
  *((_DWORD *)this + 82) = v3 - v41;
  *((_DWORD *)this + 83) = v3 - v41 - *((_DWORD *)this + 34);
  if (v38 != v49)
  {
    if (v38)
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v38);
  }
}

_DWORD *physx::Bp::SapPairManager::FindPair(physx::Bp::SapPairManager *this, unsigned int a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (!*((_DWORD *)this + 4))
    return 0;
  v3 = a2 >= a3 ? a3 : a2;
  v4 = a2 <= a3 ? a3 : a2;
  v5 = (v3 | (v4 << 16)) + ~((v3 | (v4 << 16)) << 15);
  v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  v7 = *(unsigned int *)(*(_QWORD *)this
                       + 4
                       * (*((_DWORD *)this + 14) & ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16))));
  if ((_DWORD)v7 == 0x3FFFFFFF)
    return 0;
  while (1)
  {
    v8 = (_DWORD *)(*((_QWORD *)this + 4) + 8 * v7);
    if (*v8 == v3 && v8[1] == v4)
      break;
    v7 = *(unsigned int *)(*((_QWORD *)this + 1) + 4 * v7);
    if ((_DWORD)v7 == 0x3FFFFFFF)
      return 0;
  }
  return v8;
}

unsigned int *physx::Bp::SapPairManager::AddPair(physx::Bp::SapPairManager *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int *result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v3 = *((_DWORD *)this + 12);
  if (v3 == 0x3FFFFFFF)
    return 0;
  if (a2 >= a3)
    v6 = a3;
  else
    v6 = a2;
  if (a2 <= a3)
    v7 = a3;
  else
    v7 = a2;
  v8 = 9
     * (((v6 | (v7 << 16)) + ~((v6 | (v7 << 16)) << 15)) ^ ((int)((v6 | (v7 << 16)) + ~((v6 | (v7 << 16)) << 15)) >> 10));
  v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
  v10 = v9 ^ (v9 >> 16);
  v11 = *((_DWORD *)this + 14) & v10;
  v12 = *((_DWORD *)this + 4);
  if (!v12 || (v13 = *(unsigned int *)(*(_QWORD *)this + 4 * v11), (_DWORD)v13 == 0x3FFFFFFF))
  {
LABEL_16:
    if (v3 >= v12)
    {
      v15 = (v3 + 1) | ((v3 + 1) >> 1) | (((v3 + 1) | ((v3 + 1) >> 1)) >> 2);
      v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
      v17 = v16 | HIWORD(v16);
      *((_DWORD *)this + 4) = v17 + 1;
      *((_DWORD *)this + 14) = v17;
      physx::Bp::SapPairManager::reallocPairs((const void **)this, (v17 + 1) > *((_DWORD *)this + 5));
      v11 = *((_DWORD *)this + 14) & v10;
      v3 = *((_DWORD *)this + 12);
    }
    v18 = *((_QWORD *)this + 5);
    result = (unsigned int *)(*((_QWORD *)this + 4) + 8 * v3);
    *result = v6;
    result[1] = v7;
    *(_BYTE *)(v18 + v3) = 8;
    v19 = *(_QWORD *)this;
    *(_DWORD *)(*((_QWORD *)this + 1) + 4 * *((unsigned int *)this + 12)) = *(_DWORD *)(*(_QWORD *)this + 4 * v11);
    v20 = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = v20 + 1;
    *(_DWORD *)(v19 + 4 * v11) = v20;
  }
  else
  {
    while (1)
    {
      result = (unsigned int *)(*((_QWORD *)this + 4) + 8 * v13);
      if (*result == v6 && result[1] == v7)
        break;
      v13 = *(unsigned int *)(*((_QWORD *)this + 1) + 4 * v13);
      if ((_DWORD)v13 == 0x3FFFFFFF)
        goto LABEL_16;
    }
  }
  return result;
}

const void **physx::Bp::SapPairManager::reallocPairs(const void **this, char a2)
{
  const void **v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  uint64_t v8;
  const void **v9;
  uint64_t v10;
  const void **v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;

  v2 = this;
  if ((a2 & 1) != 0)
  {
    if (*this)
      this = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v3 = *((unsigned int *)v2 + 4);
    *((_DWORD *)v2 + 5) = v3;
    *((_DWORD *)v2 + 13) = v3;
    if ((_DWORD)v3)
    {
      this = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 413);
      v4 = *((_DWORD *)v2 + 4);
      *v2 = this;
      if (!v4)
        goto LABEL_19;
      v5 = 0;
      do
      {
        *((_DWORD *)this + v5++) = 0x3FFFFFFF;
        v6 = *((unsigned int *)v2 + 4);
      }
      while (v5 < v6);
      if ((_DWORD)v6)
      {
        this = (const void **)(*(uint64_t (**)(uint64_t, unint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 421);
        v7 = this;
        v8 = *((unsigned int *)v2 + 4);
        if ((_DWORD)v8)
        {
          this = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 422);
          v9 = this;
          v10 = *((unsigned int *)v2 + 4);
          if ((_DWORD)v10)
          {
            this = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 423);
            v11 = this;
            goto LABEL_23;
          }
        }
        else
        {
          v9 = 0;
        }
      }
      else
      {
LABEL_19:
        v9 = 0;
        v7 = 0;
      }
      v11 = 0;
    }
    else
    {
      v9 = 0;
      v7 = 0;
      v11 = 0;
      *v2 = 0;
    }
LABEL_23:
    v22 = *((_DWORD *)v2 + 12);
    if (v22)
    {
      memcpy(v7, v2[4], 8 * v22);
      this = (const void **)memcpy(v11, v2[5], *((unsigned int *)v2 + 12));
      if (*((_DWORD *)v2 + 12))
      {
        v23 = 0;
        v24 = *v2;
        v25 = (char *)v2[4] + 4;
        do
        {
          v26 = *(v25 - 1) | (*v25 << 16);
          v27 = 9 * ((v26 + ~(v26 << 15)) ^ ((v26 + ~(v26 << 15)) >> 10));
          v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
          v29 = (v28 ^ (v28 >> 16)) & (_DWORD)v2[7];
          *((_DWORD *)v9 + v23) = v24[v29];
          v24[v29] = v23++;
          v25 += 2;
        }
        while (v23 < *((unsigned int *)v2 + 12));
      }
    }
    if (v2[1])
      this = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (v2[4])
      this = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (v2[5])
      this = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v2[4] = v7;
    v2[5] = v11;
    v2[1] = v9;
    return this;
  }
  if (*((_DWORD *)this + 4))
  {
    v12 = 0;
    v13 = *this;
    do
      v13[v12++] = 0x3FFFFFFF;
    while (v12 < *((unsigned int *)this + 4));
  }
  if (*((_DWORD *)this + 12))
  {
    v14 = 0;
    v15 = *this;
    v16 = this[1];
    v17 = (char *)this[4] + 4;
    do
    {
      v18 = *(v17 - 1) | (*v17 << 16);
      v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
      v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      v21 = (v20 ^ (v20 >> 16)) & (_DWORD)this[7];
      v16[v14] = v15[v21];
      v15[v21] = v14++;
      v17 += 2;
    }
    while (v14 < *((unsigned int *)this + 12));
  }
  return this;
}

uint64_t *physx::Bp::SapPairManager::RemovePair(uint64_t *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  v4 = *this;
  v3 = this[1];
  v5 = (unsigned int *)(*this + 4 * a2);
  v6 = *v5;
  if (*v5 != a3)
  {
    do
    {
      v7 = v6;
      v6 = *(_DWORD *)(v3 + 4 * v6);
    }
    while (v6 != a3);
    if (v7 != 0x3FFFFFFF)
      v5 = (unsigned int *)(v3 + 4 * v7);
  }
  *v5 = *(_DWORD *)(v3 + 4 * a3);
  v8 = (*((_DWORD *)this + 12) - 1);
  if ((_DWORD)v8 != a3)
  {
    v9 = this[4];
    v10 = *(_DWORD *)(v9 + 8 * v8) | (*(_DWORD *)(v9 + 8 * v8 + 4) << 16);
    v11 = 9 * ((v10 + ~(v10 << 15)) ^ ((v10 + ~(v10 << 15)) >> 10));
    v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
    v13 = (v12 ^ (v12 >> 16)) & (_DWORD)this[7];
    v14 = (unsigned int *)(v4 + 4 * v13);
    v15 = *v14;
    if (*v14 != (_DWORD)v8)
    {
      do
      {
        v16 = v15;
        v15 = *(_DWORD *)(v3 + 4 * v15);
      }
      while (v15 != (_DWORD)v8);
      if (v16 != 0x3FFFFFFF)
        v14 = (unsigned int *)(v3 + 4 * v16);
    }
    *v14 = *(_DWORD *)(v3 + 4 * v8);
    *(_QWORD *)(v9 + 8 * a3) = *(_QWORD *)(v9 + 8 * v8);
    *(_BYTE *)(this[5] + a3) = *(_BYTE *)(this[5] + v8);
    v17 = *this;
    *(_DWORD *)(this[1] + 4 * a3) = *(_DWORD *)(*this + 4 * v13);
    *(_DWORD *)(v17 + 4 * v13) = a3;
    a3 = *((_DWORD *)this + 12) - 1;
  }
  *((_DWORD *)this + 12) = a3;
  return this;
}

uint64_t physx::Bp::DataArray::Resize(physx::Bp::DataArray *this, pthread_mutex_t **a2)
{
  void *v4;
  uint64_t result;

  v4 = (void *)physx::PxcScratchAllocator::alloc(a2, 8 * *((_DWORD *)this + 3), 1);
  memcpy(v4, *(const void **)this, (4 * *((_DWORD *)this + 3)));
  result = physx::PxcScratchAllocator::free((uint64_t)a2, *(_QWORD *)this);
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 3) *= 2;
  return result;
}

uint64_t physx::Bp::AuxData::AuxData(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int *v14;
  char v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  int v28;
  uint64_t v29;

  v7 = a2;
  if (a2 == -1)
  {
    v28 = -1;
    v29 = 0;
    v9 = 0xFFFFFFFFLL;
LABEL_5:
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 743);
    v13 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 744);
    v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 745);
    v15 = 0;
    v11 = v29;
    v7 = v28;
    goto LABEL_7;
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (a2 + 1), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseSapAux.cpp", 742);
  v11 = v10;
  if (v7)
  {
    v29 = v10;
    v28 = v7;
    v9 = v7;
    goto LABEL_5;
  }
  v12 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
LABEL_7:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = v7;
  if ((v15 & 1) == 0)
  {
    v16 = (_DWORD *)(v12 + 8);
    v17 = (_DWORD *)(v11 + 4);
    v18 = v9;
    v19 = *a3;
    v21 = a3[1];
    v20 = a3[2];
    do
    {
      v22 = *a4++;
      *v13++ = *(_DWORD *)(a5 + 4 * v22);
      *v14++ = v22;
      v23 = (_DWORD *)(v19 + 8 * v22);
      *(v17 - 1) = *v23;
      *v17 = v23[1];
      v17 += 2;
      v24 = (_DWORD *)(v20 + 8 * v22);
      *(v16 - 2) = *v24;
      *v16 = v24[1];
      v25 = (_DWORD *)(v21 + 8 * v22);
      *(v16 - 1) = *v25;
      v16[1] = v25[1];
      v16 += 4;
      --v18;
    }
    while (v18);
  }
  *(_DWORD *)(v11 + 8 * v9) = -1;
  return a1;
}

void physx::Bp::AuxData::~AuxData(physx::Bp::AuxData *this)
{
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 1))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*(_QWORD *)this)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

uint64_t physx::Bp::addPair(uint64_t a1, unsigned int a2, unsigned int a3)
{
  physx::Bp::SapPairManager *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v4 = *(physx::Bp::SapPairManager **)(a1 + 24);
  result = (uint64_t)physx::Bp::SapPairManager::AddPair(v4, *(_DWORD *)(*(_QWORD *)a1 + 4 * a2), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a3));
  if (result)
  {
    v6 = result;
    v7 = *((_QWORD *)v4 + 5);
    v8 = (result - *((_QWORD *)v4 + 4)) >> 3;
    v9 = *(_BYTE *)(v7 + v8);
    if ((v9 & 8) != 0)
    {
      *(_BYTE *)(v7 + v8) = 0;
      *(_BYTE *)(*((_QWORD *)v4 + 5) + ((result - *((_QWORD *)v4 + 4)) >> 3)) |= 1u;
      v10 = *(uint64_t **)(a1 + 32);
      v11 = result - *((_QWORD *)v4 + 4);
      v12 = v11 >> 3;
      v13 = *((_DWORD *)v10 + 2);
      if (v13 == *((_DWORD *)v10 + 3))
      {
        result = physx::Bp::DataArray::Resize(*(physx::Bp::DataArray **)(a1 + 32), *(pthread_mutex_t ***)(a1 + 16));
        v13 = *((_DWORD *)v10 + 2);
        v11 = v6 - *((_QWORD *)v4 + 4);
      }
      v14 = *v10;
      *((_DWORD *)v10 + 2) = v13 + 1;
      *(_DWORD *)(v14 + 4 * v13) = v12;
      *(_BYTE *)(*((_QWORD *)v4 + 5) + (v11 >> 3)) |= 4u;
      v7 = *((_QWORD *)v4 + 5);
      v8 = (v6 - *((_QWORD *)v4 + 4)) >> 3;
      v9 = *(_BYTE *)(v7 + v8);
    }
    *(_BYTE *)(v7 + v8) = v9 & 0xFD;
  }
  return result;
}

const char *physx::MBPUpdateWorkTask::getName(physx::MBPUpdateWorkTask *this)
{
  return "BpMBP.updateWork";
}

const char *physx::MBPPostUpdateWorkTask::getName(physx::MBPPostUpdateWorkTask *this)
{
  return "BpMBP.postUpdateWork";
}

uint64_t physx::Bp::BroadPhaseMBP::getType(physx::Bp::BroadPhaseMBP *this)
{
  return 1;
}

uint64_t physx::Bp::BroadPhaseMBP::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t physx::Bp::BroadPhaseMBP::getBroadPhasePairs(physx::Bp::BroadPhaseMBP *this)
{
  return 0;
}

const char *physx::Bp::BroadPhaseBatchUpdateWorkTask::getName(physx::Bp::BroadPhaseBatchUpdateWorkTask *this)
{
  return "BpBroadphaseSap.batchUpdate";
}

uint64_t physx::Bp::BroadPhaseBase::getCaps(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0;
  return 1;
}

uint64_t physx::Bp::BroadPhaseBase::getNbRegions(physx::Bp::BroadPhaseBase *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseBase::getRegions()
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseBase::addRegion()
{
  return 0xFFFFFFFFLL;
}

uint64_t physx::Bp::BroadPhaseBase::removeRegion(physx::Bp::BroadPhaseBase *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseBase::getNbOutOfBoundsObjects(physx::Bp::BroadPhaseBase *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseBase::getOutOfBoundsObjects(physx::Bp::BroadPhaseBase *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseSap::getType(physx::Bp::BroadPhaseSap *this)
{
  return 0;
}

uint64_t physx::Bp::BroadPhaseSap::getNbCreatedPairs(physx::Bp::BroadPhaseSap *this)
{
  return *((unsigned int *)this + 108);
}

uint64_t physx::Bp::BroadPhaseSap::getCreatedPairs(physx::Bp::BroadPhaseSap *this)
{
  return *((_QWORD *)this + 53);
}

uint64_t physx::Bp::BroadPhaseSap::getNbDeletedPairs(physx::Bp::BroadPhaseSap *this)
{
  return *((unsigned int *)this + 112);
}

uint64_t physx::Bp::BroadPhaseSap::getDeletedPairs(physx::Bp::BroadPhaseSap *this)
{
  return *((_QWORD *)this + 55);
}

uint64_t physx::Bp::BroadPhaseSap::getBroadPhasePairs(physx::Bp::BroadPhaseSap *this)
{
  return *((_QWORD *)this + 49);
}

uint64_t physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::resize(uint64_t result, unsigned int a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 8 * a2;
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>::getName() [T = physx::Bp::BroadPhasePair]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<RegionData,physx::shdfnd::ReflectionAllocator<RegionData>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  __int128 *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = a2;
  v4 = 56 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<RegionData>::getName() [T = RegionData]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = (__int128 *)*a1;
  if (v9)
  {
    v11 = result + 56 * v9;
    v12 = result;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      v15 = v10[2];
      *(_QWORD *)(v12 + 48) = *((_QWORD *)v10 + 6);
      *(_OWORD *)(v12 + 16) = v14;
      *(_OWORD *)(v12 + 32) = v15;
      *(_OWORD *)v12 = v13;
      v12 += 56;
      v10 = (__int128 *)((char *)v10 + 56);
    }
    while (v12 < v11);
    v10 = (__int128 *)*a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<MBP_Object,physx::shdfnd::ReflectionAllocator<MBP_Object>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = a2;
  v4 = 12 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<MBP_Object>::getName() [T = MBP_Object]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = (uint64_t *)*a1;
  if (v9)
  {
    v11 = result + 12 * v9;
    v12 = result;
    do
    {
      v13 = *v10;
      *(_DWORD *)(v12 + 8) = *((_DWORD *)v10 + 2);
      *(_QWORD *)v12 = v13;
      v12 += 12;
      v10 = (uint64_t *)((char *)v10 + 12);
    }
    while (v12 < v11);
    v10 = (uint64_t *)*a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack(uint64_t a1, _QWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>::getName() [T = physx::Bp::BroadPhasePair]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = v8 + 8 * v9;
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)(v8 + 8 * v14) = *a2;
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && *(_QWORD *)a1)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  v15 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v15 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 8 * v15;
}

void physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  _BOOL4 v9;
  _QWORD *v10;
  size_t v11;
  int v12;
  int i;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  _BYTE v42[4];
  unsigned int v43;
  int v44;
  _QWORD *v45;
  char v46;
  char *v47;
  BOOL v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v8 = (4 * a5);
  v9 = v8 > 0x400;
  v48 = v8 > 0x400;
  if (v8 < 0x401)
  {
    MEMORY[0x24BDAC7A8](a1);
    v10 = &v42[-((v11 + 15) & 0x1FFFFFFF0) - 8];
    bzero(v10, v11);
  }
  else
  {
    v10 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)v42, v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSort.h", 65);
  }
  v47 = (char *)v10;
  v43 = 0;
  v44 = a5;
  v45 = v10;
  v12 = a2 - 1;
  v46 = 0;
  if (a2 - 1 < 1)
    goto LABEL_46;
  for (i = 0; ; i = *((_DWORD *)v10 + v39 - 2))
  {
    while (1)
    {
      if (v12 <= i)
        goto LABEL_39;
      if ((v12 - i) <= 4)
        break;
      v14 = i + v12;
      if (i + v12 < 0 != __OFADD__(i, v12))
        ++v14;
      v15 = (uint64_t)v14 >> 1;
      v16 = *(_DWORD *)(a1 + 4 * (v14 >> 1));
      v17 = *(_DWORD *)(a1 + 4 * i);
      if (v16 < v17)
      {
        *(_DWORD *)(a1 + 4 * i) = v16;
        *(_DWORD *)(a1 + 4 * v15) = v17;
        v16 = v17;
        v17 = *(_DWORD *)(a1 + 4 * i);
      }
      v18 = *(_DWORD *)(a1 + 4 * v12);
      if (v18 >= v17)
      {
        v17 = *(_DWORD *)(a1 + 4 * v12);
      }
      else
      {
        *(_DWORD *)(a1 + 4 * i) = v18;
        *(_DWORD *)(a1 + 4 * v12) = v17;
        v16 = *(_DWORD *)(a1 + 4 * v15);
      }
      if (v17 < v16)
      {
        *(_DWORD *)(a1 + 4 * v15) = v17;
        *(_DWORD *)(a1 + 4 * v12) = v16;
        v16 = *(_DWORD *)(a1 + 4 * v15);
      }
      v19 = v12 - 1;
      *(_DWORD *)(a1 + 4 * v15) = *(_DWORD *)(a1 + 4 * v19);
      *(_DWORD *)(a1 + 4 * v19) = v16;
      v20 = i;
      v21 = v12 - 1;
      while (1)
      {
        v22 = (unsigned int *)(a1 + 4 * v20);
        do
        {
          v24 = v22[1];
          ++v22;
          v23 = v24;
          ++v20;
        }
        while (v24 < v16);
        v25 = (unsigned int *)(a1 + 4 * v21);
        do
        {
          v27 = *--v25;
          v26 = v27;
          --v21;
        }
        while (v16 < v27);
        if (v20 >= v21)
          break;
        *v22 = v26;
        *v25 = v23;
        v16 = *(_DWORD *)(a1 + 4 * v19);
      }
      *v22 = v16;
      *(_DWORD *)(a1 + 4 * v19) = v23;
      v28 = v43;
      v29 = v44 - 1;
      if (v20 - i >= v12 - v20)
      {
        if (v43 >= v29)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v42);
          v28 = v43;
          v10 = v45;
        }
        v43 = v28 + 1;
        *((_DWORD *)v10 + v28) = v20 + 1;
        v31 = v43++;
        *((_DWORD *)v10 + v31) = v12;
        v12 = v20 - 1;
      }
      else
      {
        if (v43 >= v29)
        {
          physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<unsigned int>>::grow((uint64_t)v42);
          v28 = v43;
          v10 = v45;
        }
        v43 = v28 + 1;
        *((_DWORD *)v10 + v28) = i;
        v30 = v43++;
        *((_DWORD *)v10 + v30) = v20 - 1;
        i = v20 + 1;
      }
    }
    v32 = i;
    v33 = i + 1;
    v34 = a1 + 4 + 4 * i;
    do
    {
      v35 = 0;
      v36 = v32++;
      v37 = v36;
      do
      {
        if (*(_DWORD *)(v34 + 4 * v35) < *(_DWORD *)(a1 + 4 * v37))
          v37 = v33 + v35;
        ++v35;
      }
      while (v36 + v35 < v12);
      if (v37 != (_DWORD)v36)
      {
        v38 = *(_DWORD *)(a1 + 4 * v37);
        *(_DWORD *)(a1 + 4 * v37) = *(_DWORD *)(a1 + 4 * v36);
        *(_DWORD *)(a1 + 4 * v36) = v38;
      }
      ++v33;
      v34 += 4;
    }
    while (v32 != v12);
LABEL_39:
    v39 = v43;
    if (!v43)
      break;
    --v43;
    v12 = *((_DWORD *)v10 + v39 - 1);
    v43 = v39 - 2;
  }
  if (v46)
    v40 = v10 == 0;
  else
    v40 = 1;
  if (!v40)
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
    v9 = v48;
  }
LABEL_46:
  if (v9)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v47, v47);
}

uint64_t physx::Bp::PersistentActorAggregatePair::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 64))
    return 1;
  v4 = *(_QWORD *)(a2 + 264);
  if (*(_DWORD *)(v4 + 4 * *(unsigned int *)(a1 + 68)) == -1)
    return 1;
  v5 = *(unsigned int *)(a1 + 72);
  if (*(_DWORD *)(v4 + 4 * v5) == -1)
    return 1;
  v6 = *(_QWORD *)(a1 + 80);
  if (!*(_DWORD *)(v6 + 16))
    return 1;
  if (*(_DWORD *)(v6 + 32) != -1
    || *(_DWORD *)(a1 + 72) >> 5 < (*(_DWORD *)(a2 + 232) & 0x7FFFFFFFu)
    && ((*(_DWORD *)(*(_QWORD *)(a2 + 224) + 4 * (v5 >> 5)) >> v5) & 1) != 0)
  {
    physx::Bp::AABBManager::updatePairs((unsigned int *)a2, a1, a3);
  }
  return 0;
}

unsigned int *physx::Bp::AABBManager::updatePairs(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  __int128 v57;
  uint64_t v58;

  v4 = result;
  v5 = result[142];
  v6 = *(_DWORD *)(a2 + 8);
  if (!a3)
  {
    if (v6 == v5)
      return result;
    *(_DWORD *)(a2 + 8) = v5;
    v56 = (unsigned int *)(a2 + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v31 = *(_DWORD *)(a2 + 24);
    if (!v31)
      return physx::Bp::PairManagerData::shrinkMemory(v56);
    v32 = 0;
    while (1)
    {
      v33 = (int *)(*(_QWORD *)(a2 + 48) + 8 * v32);
      v34 = *v33;
      v35 = *v33 & 0x7FFFFFFF;
      v36 = v33[1];
      v37 = v36 & 0x7FFFFFFF;
      if (*v33 < 0)
      {
        v46 = *((_QWORD *)v4 + 36);
        v47 = *(_DWORD *)(v46 + 16 * v35) & 3;
        v48 = *(_DWORD *)(v46 + 16 * v37) & 3;
        if (v47 > v48)
          v48 = v47;
        *(_QWORD *)&v57 = v34 & 0x7FFFFFFF;
        *((_QWORD *)&v57 + 1) = v36 & 0x7FFFFFFF;
        v49 = (uint64_t)&v4[4 * v48 + 110];
        v50 = *(_DWORD *)(v49 + 8);
        if ((*(_DWORD *)(v49 + 12) & 0x7FFFFFFFu) <= v50)
        {
          physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v49, &v57);
        }
        else
        {
          v51 = *(_QWORD *)v49 + 24 * v50;
          *(_OWORD *)v51 = v57;
          *(_QWORD *)(v51 + 16) = v58;
          ++*(_DWORD *)(v49 + 8);
        }
        *(_QWORD *)v33 &= 0x7FFFFFFF7FFFFFFFuLL;
      }
      else
      {
        if ((v36 & 0x80000000) == 0)
        {
          v38 = *((_QWORD *)v4 + 36);
          v39 = *(_QWORD *)(v38 + 16 * (*v33 & 0x7FFFFFFF));
          if (v39 >= 4)
          {
            v40 = *(_QWORD *)(v38 + 16 * (v36 & 0x7FFFFFFF));
            if (v40 >= 4)
            {
              v41 = v39 & 3;
              v42 = v40 & 3;
              if (v41 <= v42)
                v41 = v42;
              *(_QWORD *)&v57 = v35;
              *((_QWORD *)&v57 + 1) = v37;
              v43 = (uint64_t)&v4[4 * v41 + 118];
              v44 = *(_DWORD *)(v43 + 8);
              if ((*(_DWORD *)(v43 + 12) & 0x7FFFFFFFu) <= v44)
              {
                physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v43, &v57);
              }
              else
              {
                v45 = *(_QWORD *)v43 + 24 * v44;
                *(_OWORD *)v45 = v57;
                *(_QWORD *)(v45 + 16) = v58;
                ++*(_DWORD *)(v43 + 8);
              }
            }
          }
          v52 = 9
              * ((((unsigned __int16)v34 | ((unsigned __int16)v36 << 16))
                + ~(((unsigned __int16)v34 | ((unsigned __int16)v36 << 16)) << 15)) ^ ((((unsigned __int16)v34 | ((unsigned __int16)v36 << 16)) + ~(((unsigned __int16)v34 | ((unsigned __int16)v36 << 16)) << 15)) >> 10));
          v53 = (v52 ^ (v52 >> 6)) + ~((v52 ^ (v52 >> 6)) << 11);
          physx::Bp::PairManagerData::removePair((uint64_t)v56, v35, v37, *(_DWORD *)(a2 + 20) & (v53 ^ HIWORD(v53)), v32);
          --v31;
          goto LABEL_48;
        }
        v33[1] = v37;
      }
      ++v32;
LABEL_48:
      if (v32 >= v31)
        return physx::Bp::PairManagerData::shrinkMemory(v56);
    }
  }
  if (v6 != v5)
  {
    *(_DWORD *)(a2 + 8) = v5;
    v56 = (unsigned int *)(a2 + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v8 = *(_DWORD *)(a2 + 24);
    if (v8)
    {
      v9 = 0;
      v54 = a3 + 40;
      v55 = a3 + 8;
      while (1)
      {
        v10 = (int *)(*(_QWORD *)(a2 + 48) + 8 * v9);
        v11 = *v10;
        v12 = *v10 & 0x7FFFFFFF;
        v13 = v10[1];
        v14 = v13 & 0x7FFFFFFF;
        if (*v10 < 0)
        {
          v23 = *((_QWORD *)v4 + 36);
          v24 = *(_DWORD *)(v23 + 16 * v12) & 3;
          v25 = *(_DWORD *)(v23 + 16 * v14) & 3;
          if (v24 > v25)
            v25 = v24;
          *(_QWORD *)&v57 = v11 & 0x7FFFFFFF;
          *((_QWORD *)&v57 + 1) = v13 & 0x7FFFFFFF;
          v26 = v55 + 16 * v25;
          v27 = *(_DWORD *)(v26 + 8);
          if ((*(_DWORD *)(v26 + 12) & 0x7FFFFFFFu) <= v27)
          {
            physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v26, &v57);
          }
          else
          {
            v28 = *(_QWORD *)v26 + 24 * v27;
            *(_OWORD *)v28 = v57;
            *(_QWORD *)(v28 + 16) = v58;
            ++*(_DWORD *)(v26 + 8);
          }
          *(_QWORD *)v10 &= 0x7FFFFFFF7FFFFFFFuLL;
        }
        else
        {
          if ((v13 & 0x80000000) == 0)
          {
            v15 = *((_QWORD *)v4 + 36);
            v16 = *(_QWORD *)(v15 + 16 * (*v10 & 0x7FFFFFFF));
            if (v16 >= 4)
            {
              v17 = *(_QWORD *)(v15 + 16 * (v13 & 0x7FFFFFFF));
              if (v17 >= 4)
              {
                v18 = v16 & 3;
                v19 = v17 & 3;
                if ((int)v18 <= v19)
                  v18 = v19;
                *(_QWORD *)&v57 = v12;
                *((_QWORD *)&v57 + 1) = v14;
                v20 = v54 + 16 * v18;
                v21 = *(_DWORD *)(v20 + 8);
                if ((*(_DWORD *)(v20 + 12) & 0x7FFFFFFFu) <= v21)
                {
                  physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v20, &v57);
                }
                else
                {
                  v22 = *(_QWORD *)v20 + 24 * v21;
                  *(_OWORD *)v22 = v57;
                  *(_QWORD *)(v22 + 16) = v58;
                  ++*(_DWORD *)(v20 + 8);
                }
              }
            }
            v29 = 9
                * ((((unsigned __int16)v11 | ((unsigned __int16)v13 << 16))
                  + ~(((unsigned __int16)v11 | ((unsigned __int16)v13 << 16)) << 15)) ^ ((((unsigned __int16)v11 | ((unsigned __int16)v13 << 16)) + ~(((unsigned __int16)v11 | ((unsigned __int16)v13 << 16)) << 15)) >> 10));
            v30 = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
            physx::Bp::PairManagerData::removePair((uint64_t)v56, v12, v14, *(_DWORD *)(a2 + 20) & (v30 ^ HIWORD(v30)), v9);
            --v8;
            goto LABEL_23;
          }
          v10[1] = v14;
        }
        ++v9;
LABEL_23:
        if (v9 >= v8)
          return physx::Bp::PairManagerData::shrinkMemory(v56);
      }
    }
    return physx::Bp::PairManagerData::shrinkMemory(v56);
  }
  return result;
}

uint64_t physx::Bp::PersistentAggregateAggregatePair::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a1 + 64))
    return 1;
  v4 = *(_QWORD *)(a2 + 264);
  if (*(_DWORD *)(v4 + 4 * *(unsigned int *)(a1 + 68)) == -1)
    return 1;
  if (*(_DWORD *)(v4 + 4 * *(unsigned int *)(a1 + 72)) == -1)
    return 1;
  v5 = *(_QWORD *)(a1 + 80);
  if (!*(_DWORD *)(v5 + 16))
    return 1;
  v6 = *(_QWORD *)(a1 + 88);
  if (!*(_DWORD *)(v6 + 16))
    return 1;
  if (*(_DWORD *)(v5 + 32) != -1 || *(_DWORD *)(v6 + 32) != -1)
    physx::Bp::AABBManager::updatePairs((unsigned int *)a2, a1, a3);
  return 0;
}

void physx::Bp::Aggregate::~Aggregate(physx::Bp::Aggregate *this)
{
  uint64_t v2;
  int v3;

  if (*((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 6) = 0;
  if (*((_QWORD *)this + 5))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 5) = 0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 3) = 0;
  }
  v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 1))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

void physx::Bp::Aggregate::sortBounds(physx::Bp::Aggregate *this)
{
  uint64_t v1;
  char *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void (**v24)(physx::Cm::RadixSortBuffered *__hidden);
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 84) = 0;
  v1 = *((unsigned int *)this + 4);
  if (v1 >= 2)
  {
    v3 = (char *)this + 8;
    v4 = v1 + 1;
    v5 = (4 * (v1 + 1));
    if (v5 < 0x401)
    {
      MEMORY[0x24BDAC7A8](this);
      v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0x1FFFFFFF0));
      bzero(v6, (4 * v4));
    }
    else
    {
      v6 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v24, (4 * v4), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 903);
    }
    v7 = (unsigned int *)*((_QWORD *)this + 5);
    v10 = *v7;
    v8 = v7 + 2;
    v9 = v10;
    *(_DWORD *)v6 = v10;
    v11 = 1;
    v12 = 1;
    do
    {
      v13 = *v8;
      v8 += 2;
      v12 &= v13 >= v9;
      *((_DWORD *)v6 + v11++) = v13;
      v9 = v13;
    }
    while (v1 != v11);
    if ((v12 & 1) == 0)
    {
      v28 = 0;
      v27 = 0u;
      v26 = 0u;
      v29 = 1;
      v25 = 0x80000000;
      v24 = &off_24ED90D50;
      *((_DWORD *)v6 + v1) = -1;
      physx::Cm::RadixSortBuffered::Sort((uint64_t)&v24);
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::copy<physx::shdfnd::ReflectionAllocator<unsigned int>>(&v22, (uint64_t)v3);
      if ((_DWORD)v1 == -6)
        v14 = 0;
      else
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (v1 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 945);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v1, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 946);
      v16 = v15;
      v17 = 0;
      v18 = v26;
      do
      {
        v19 = *(unsigned int *)(v18 + 4 * v17);
        *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v17) = *(_DWORD *)(v22 + 4 * v19);
        *(_QWORD *)(v14 + 8 * v17) = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v19);
        *(_OWORD *)(v15 + 16 * v17++) = *(_OWORD *)(*((_QWORD *)this + 6) + 16 * v19);
      }
      while (v1 != v17);
      for (i = 0; i != 6; ++i)
        *(_DWORD *)(v14 + 8 * (v1 + i)) = -1;
      *((_DWORD *)this + 14) = v1;
      if (*((_QWORD *)this + 6))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      if (*((_QWORD *)this + 5))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *((_QWORD *)this + 5) = v14;
      *((_QWORD *)this + 6) = v16;
      if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0 && v22)
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v24 = &off_24ED90D50;
      physx::Cm::RadixSortBuffered::reset((uint64_t)&v24);
    }
    if (v5 >= 0x401)
      physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v24, (char *)v6);
  }
}

uint64_t physx::Bp::Aggregate::allocateBounds(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(this + 16);
  if ((_DWORD)v1 != *(_DWORD *)(this + 56))
  {
    v2 = this;
    *(_DWORD *)(this + 56) = v1;
    if (*(_QWORD *)(this + 48))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if (*(_QWORD *)(v2 + 40))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    if ((_DWORD)v1 == -6)
    {
      *(_QWORD *)(v2 + 40) = 0;
    }
    else
    {
      *(_QWORD *)(v2 + 40) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (v1 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 976);
      if (!(_DWORD)v1)
      {
        this = 0;
LABEL_11:
        *(_QWORD *)(v2 + 48) = this;
        return this;
      }
    }
    this = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * v1, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 977);
    goto LABEL_11;
  }
  return this;
}

uint64_t physx::Bp::Aggregate::computeBounds(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v18;
  const float *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  int v24;
  int *v25;
  int32x4_t *v26;
  int *v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v35;
  const float *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int v42;
  int v43;
  uint64_t v44;

  v3 = *(unsigned int *)(result + 16);
  v4 = *(unsigned int **)(result + 8);
  v5 = *v4;
  v6 = (v3 - 1);
  if (v6 >= 4)
    v7 = 4;
  else
    v7 = v3 - 1;
  if (v7)
  {
    if (v6 >= 4)
      v6 = 4;
    v8 = v4 + 1;
    do
    {
      v9 = *v8++;
      _X15 = a2 + 24 * v9;
      __asm { PRFM            #0, [X15] }
      _X14 = a3 + 4 * v9;
      __asm { PRFM            #0, [X14] }
      --v6;
    }
    while (v6);
  }
  v18 = a2 + 24 * v5;
  v19 = (const float *)(a3 + 4 * v5);
  v20 = vld1q_dup_f32(v19);
  v21 = vsubq_f32(*(float32x4_t *)v18, v20);
  v22 = vaddq_f32(*(float32x4_t *)(v18 + 12), v20);
  if (v21.i32[0] < 0)
    v23 = ~v21.i32[0];
  else
    v23 = v21.i32[0] | 0x80000000;
  if (v22.i32[0] < 0)
    v24 = ~v22.i32[0];
  else
    v24 = v22.i32[0] | 0x80000000;
  v25 = *(int **)(result + 40);
  v26 = *(int32x4_t **)(result + 48);
  *v25 = v23;
  v25[1] = v24;
  *v26 = vzip2q_s32(vzip1q_s32((int32x4_t)v21, (int32x4_t)v22), vtrn1q_s32((int32x4_t)v21, (int32x4_t)v22));
  if (v3 >= 2)
  {
    v27 = v25 + 3;
    for (i = 1; i != v3; ++i)
    {
      v29 = v4[i];
      if ((int)i + 4 < v3)
      {
        v30 = v4[(i + 4)];
        _X17 = a2 + 24 * v30;
        __asm { PRFM            #0, [X17] }
        _X16 = a3 + 4 * v30;
        __asm { PRFM            #0, [X16] }
      }
      v35 = a2 + 24 * v29;
      v36 = (const float *)(a3 + 4 * v29);
      v37 = vld1q_dup_f32(v36);
      v38 = vsubq_f32(*(float32x4_t *)v35, v37);
      v39 = vaddq_f32(*(float32x4_t *)(v35 + 12), v37);
      v21 = vminq_f32(v21, v38);
      v40 = vtrn1q_s32((int32x4_t)v38, (int32x4_t)v39);
      v41 = vzip1q_s32((int32x4_t)v38, (int32x4_t)v39);
      v22 = vmaxq_f32(v22, v39);
      if (v38.i32[0] < 0)
        v42 = ~v38.i32[0];
      else
        v42 = v38.i32[0] | 0x80000000;
      *(v27 - 1) = v42;
      if (v39.i32[0] < 0)
        v43 = ~v39.i32[0];
      else
        v43 = v39.i32[0] | 0x80000000;
      *v27 = v43;
      v27 += 2;
      v26[i] = vzip2q_s32(v41, v40);
    }
  }
  v44 = 0;
  *(_DWORD *)(result + 60) = v21.i32[0];
  *(_QWORD *)(result + 64) = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL).u64[0];
  *(_DWORD *)(result + 72) = v22.i32[0];
  *(_QWORD *)(result + 76) = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL).u64[0];
  do
    v25[2 * (v3 + v44++)] = -1;
  while (v44 != 6);
  *(_BYTE *)(result + 84) = 1;
  return result;
}

void physx::Bp::AABBManager::reserveShapeSpace(physx::Bp::AABBManager *this, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  __int128 v6;

  v3 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
  v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  v5 = (v4 | HIWORD(v4)) + 1;
  LODWORD(v6) = -1;
  physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::VirtualAllocator>::resize((uint64_t)this + 256, v5, &v6);
  v6 = 0uLL;
  physx::shdfnd::Array<physx::Bp::VolumeData,physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>>::resize((uint64_t)this + 288, v5, &v6);
  physx::shdfnd::Array<float,physx::shdfnd::VirtualAllocator>::resizeUninitialized(*((_QWORD *)this + 35), v5);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 192, v5);
  physx::Cm::BitMapBase<physx::shdfnd::NonTrackingAllocator>::extend((uint64_t)this + 208, v5);
}

uint64_t physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::VirtualAllocator>::resize(uint64_t result, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 20) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::VirtualAllocator>::recreate((_QWORD *)result, a2);
  v6 = *(unsigned int *)(v5 + 16);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)(v5 + 8);
    v8 = (_DWORD *)(v7 + 4 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7 + 4 * (unint64_t)a2);
  }
  *(_DWORD *)(v5 + 16) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::VolumeData,physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Bp::VolumeData,physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 16 * a2;
    v8 = (_OWORD *)(*(_QWORD *)v5 + 16 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<float,physx::shdfnd::VirtualAllocator>::resizeUninitialized(uint64_t result, unsigned int a2)
{
  uint64_t v3;

  v3 = result;
  if ((*(_DWORD *)(result + 20) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<float,physx::shdfnd::VirtualAllocator>::recreate((_QWORD *)result, a2);
  *(_DWORD *)(v3 + 16) = a2;
  return result;
}

uint64_t physx::Bp::AABBManager::AABBManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, _QWORD *a7, uint64_t a8, int a9, int a10)
{
  uint64_t v17;
  const char *v18;
  pthread_mutex_t *v19;
  unsigned int v20;

  v17 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v18 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>::getName() [T = physx::shdfnd::MutexImpl]";
  else
    v18 = "<allocation names disabled>";
  v19 = (pthread_mutex_t *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v17 + 24) + 16))(v17 + 24, 72, v18, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsMutex.h", 138);
  *(_QWORD *)a1 = v19;
  physx::shdfnd::MutexImpl::MutexImpl(v19);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 8) = &off_24ED8C428;
  *(_QWORD *)(a1 + 16) = a8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 64) = off_24ED8C6C0;
  *(_QWORD *)(a1 + 72) = a8;
  *(_QWORD *)(a1 + 104) = a1;
  *(_QWORD *)(a1 + 112) = "AABBManager::postBroadPhaseStage3";
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 120) = off_24ED8C398;
  *(_QWORD *)(a1 + 128) = a8;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 240) = *a7;
  *(_QWORD *)(a1 + 256) = *a7;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = a4;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 320) = *a7;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = *a7;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = *a7;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = a2;
  *(_QWORD *)(a1 + 400) = a3;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 517) = 0;
  *(_BYTE *)(a1 + 525) = 1;
  *(_QWORD *)(a1 + 528) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 616) = -3233808384;
  *(_QWORD *)(a1 + 624) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 576, 0x40u, 0);
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 672) = -3233808384;
  *(_QWORD *)(a1 + 680) = 0;
  physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(a1 + 632, 0x40u, 0);
  *(_OWORD *)(a1 + 688) = 0u;
  *(_DWORD *)(a1 + 704) = -2;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 768) = -3233808384;
  *(_QWORD *)(a1 + 776) = 0;
  physx::shdfnd::internal::HashBase<physx::Bp::Pair,physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::internal::HashSetBase<physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(a1 + 728, 0x40u, 0);
  *(_QWORD *)(a1 + 784) = a8;
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::SListT((uint64_t *)(a1 + 792));
  if (a6 <= 1)
    v20 = 1;
  else
    v20 = a6;
  physx::Bp::AABBManager::reserveShapeSpace((physx::Bp::AABBManager *)a1, v20);
  *(_BYTE *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 306) = 257;
  *(_BYTE *)(a1 + 308) = a10 != 2;
  *(_BYTE *)(a1 + 305) = a10 != 2;
  *(_BYTE *)(a1 + 314) = 1;
  *(_BYTE *)(a1 + 309) = a9 != 2;
  *(_DWORD *)(a1 + 310) = 16843009;
  *(_DWORD *)(a1 + 315) = 16843009;
  *(_BYTE *)(a1 + 319) = 1;
  return a1;
}

uint64_t physx::Bp::AABBManager::destroy(physx::Bp::AABBManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t j;
  int v12;
  uint64_t k;
  int v15;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t m;
  int v22;
  uint64_t n;
  int v25;
  int v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;

  v2 = (_QWORD *)((char *)this + 576);
  physx::Bp::releasePairs((uint64_t)this + 576);
  physx::Bp::releasePairs((uint64_t)this + 632);
  v3 = *((unsigned int *)this + 136);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *((unsigned int *)this + 133);
      if ((_DWORD)v5 == -1)
      {
        v6 = *((_QWORD *)this + 67);
LABEL_7:
        v8 = *(_QWORD *)(v6 + 8 * i);
        if (v8)
        {
          physx::Bp::Aggregate::~Aggregate(*(physx::Bp::Aggregate **)(v6 + 8 * i));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v8);
        }
      }
      else
      {
        while (i != v5)
        {
          v6 = *((_QWORD *)this + 67);
          v7 = *(_QWORD *)(v6 + 8 * v5);
          v5 = v7;
          if ((_DWORD)v7 == -1)
            goto LABEL_7;
        }
      }
    }
  }
  v9 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)this + 99));
  if (v9)
  {
    v10 = v9;
    do
    {
      for (j = 0; j != -4; j -= 2)
      {
        v12 = HIDWORD(v10[j + 8]);
        if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && v10[j + 7] != 0)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      for (k = 0; k != -4; k -= 2)
      {
        v15 = HIDWORD(v10[k + 4]);
        if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && v10[k + 3] != 0)
          (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      }
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v10);
      v10 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)this + 99));
    }
    while (v10);
  }
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT((uint64_t)this + 792);
  if (*((_QWORD *)this + 91))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v17 = *((_DWORD *)this + 181);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 89))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v18 = *((_DWORD *)this + 175);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 86))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 79))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*v2)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v19 = *((_DWORD *)this + 141);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 69))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v20 = *((_DWORD *)this + 137);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 67))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  for (m = 0; m != -32; m -= 16)
  {
    v22 = *(_DWORD *)((char *)this + m + 500);
    if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + m + 488) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  for (n = 0; n != -32; n -= 16)
  {
    v25 = *(_DWORD *)((char *)this + n + 468);
    if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && *(_QWORD *)((char *)this + n + 456) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  v27 = *((_DWORD *)this + 109);
  if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 53) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v29 = *((_DWORD *)this + 105);
  if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 51))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v30 = *((_DWORD *)this + 97);
  if ((v30 & 0x80000000) == 0 && (v30 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 47))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 46) + 24))(*((_QWORD *)this + 46));
  v31 = *((_DWORD *)this + 91);
  if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 44))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 43) + 24))(*((_QWORD *)this + 43));
  v32 = *((_DWORD *)this + 85);
  if ((v32 & 0x80000000) == 0 && (v32 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 41))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 40) + 24))(*((_QWORD *)this + 40));
  v33 = *((_DWORD *)this + 75);
  if ((v33 & 0x80000000) == 0 && (v33 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 36))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v34 = *((_DWORD *)this + 69);
  if ((v34 & 0x80000000) == 0 && (v34 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 33))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 32) + 24))(*((_QWORD *)this + 32));
  if (*((_QWORD *)this + 28) && (*((_DWORD *)this + 58) & 0x80000000) == 0)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 30) + 24))(*((_QWORD *)this + 30));
  *((_QWORD *)this + 28) = 0;
  if (*((_QWORD *)this + 26) && (*((_DWORD *)this + 54) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 26) = 0;
  if (*((_QWORD *)this + 24) && (*((_DWORD *)this + 50) & 0x80000000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 15) = off_24ED8BB00;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 8) = off_24ED8BB00;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 1) = off_24ED8BB00;
  *((_QWORD *)this + 3) = 0;
  physx::shdfnd::MutexT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::MutexImpl>>::~MutexT((pthread_mutex_t **)this);
  return (*(uint64_t (**)(uint64_t, physx::Bp::AABBManager *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                  + 24)
                                                                      + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Bp::releasePairs(uint64_t result)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 32))
  {
    v1 = result;
    v2 = *(unsigned int **)(result + 24);
    v3 = *v2;
    if ((_DWORD)v3 == -1)
    {
      v4 = 0;
      while (*(_DWORD *)(result + 36) - 1 != v4)
      {
        v3 = v2[++v4];
        if ((_DWORD)v3 != -1)
          goto LABEL_8;
      }
    }
    else
    {
      LODWORD(v4) = 0;
      do
      {
LABEL_8:
        result = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16 * v3 + 8);
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v3 = *(unsigned int *)(*(_QWORD *)(v1 + 16) + 4 * v3);
      }
      while ((_DWORD)v3 != -1);
      while (*(_DWORD *)(v1 + 36) - 1 != (_DWORD)v4)
      {
        LODWORD(v4) = v4 + 1;
        v3 = *(unsigned int *)(*(_QWORD *)(v1 + 24) + 4 * v4);
        if ((_DWORD)v3 != -1)
          goto LABEL_8;
      }
    }
  }
  return result;
}

void physx::Bp::AABBManager::reserveSpaceForBounds(physx::Bp::AABBManager *this, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2 + 1;
  if (v4 >= *((_DWORD *)this + 74))
    physx::Bp::AABBManager::reserveShapeSpace(this, v4);
  *(_DWORD *)(*((_QWORD *)this + 33) + 4 * a2) = -1;
  v5 = *((_QWORD *)this + 36);
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35) + 8) + 4 * a2) = 0;
  v6 = v5 + 16 * a2;
  *(_DWORD *)(v6 + 8) = -1;
  *(_QWORD *)v6 = 0;
}

uint64_t physx::Bp::AABBManager::addBounds(physx::Bp::AABBManager *this, unsigned int a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6, float a7)
{
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v32;
  unsigned int *v33;

  v14 = a2 + 1;
  if (a2 + 1 >= *((_DWORD *)this + 74))
    physx::Bp::AABBManager::reserveShapeSpace(this, a2 + 1);
  v15 = *((_DWORD *)this + 130);
  if (v14 > v15)
    v15 = v14;
  *((_DWORD *)this + 130) = v15;
  *(_DWORD *)(*((_QWORD *)this + 33) + 4 * a2) = a3;
  v16 = *((_QWORD *)this + 36);
  *(float *)(*(_QWORD *)(*((_QWORD *)this + 35) + 8) + 4 * a2) = a7;
  *(_QWORD *)(v16 + 16 * a2) = a4 & 0xFFFFFFFFFFFFFFFCLL | a6;
  if (a5 == -1)
  {
    *(_DWORD *)(v16 + 16 * a2 + 8) = -1;
    v24 = *((_QWORD *)this + 26);
    v25 = a2 >> 5;
    v26 = *(_DWORD *)(v24 + 4 * v25);
    v27 = 1 << a2;
    if ((v26 & (1 << a2)) != 0)
    {
      v28 = v26 & ~v27;
    }
    else
    {
      v24 = *((_QWORD *)this + 24);
      v28 = *(_DWORD *)(v24 + 4 * v25) | v27;
    }
    *(_DWORD *)(v24 + 4 * v25) = v28;
    *((_BYTE *)this + 525) = 1;
  }
  else
  {
    *(_DWORD *)(v16 + 16 * a2 + 8) = 2 * a5;
    *((_BYTE *)this + 525) = 1;
    v17 = *(unsigned int **)(*((_QWORD *)this + 67) + 8 * a5);
    if (!v17[4])
    {
      v18 = *v17;
      v19 = *((_QWORD *)this + 26);
      v20 = v18 >> 5;
      v21 = *(_DWORD *)(v19 + 4 * (v18 >> 5));
      v22 = 1 << v18;
      if ((v21 & (1 << v18)) != 0)
      {
        v23 = v21 & ~v22;
      }
      else
      {
        v19 = *((_QWORD *)this + 24);
        v23 = *(_DWORD *)(v19 + 4 * v20) | v22;
      }
      *(_DWORD *)(v19 + 4 * v20) = v23;
    }
    v32 = a2;
    v29 = v17[4];
    if ((v17[5] & 0x7FFFFFFF) <= v29)
    {
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::growAndPushBack((uint64_t)(v17 + 2), &v32);
    }
    else
    {
      *(_DWORD *)(*((_QWORD *)v17 + 1) + 4 * v29) = a2;
      ++v17[4];
    }
    if (v17[8] == -1)
    {
      v30 = *((unsigned int *)this + 140);
      v17[8] = v30;
      v33 = v17;
      if ((*((_DWORD *)this + 141) & 0x7FFFFFFFu) <= v30)
      {
        physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack((uint64_t)this + 552, &v33);
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v30) = v17;
        *((_DWORD *)this + 140) = v30 + 1;
      }
    }
  }
  return 1;
}

uint64_t physx::Bp::AABBManager::removeBounds(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;

  v2 = this;
  v3 = *(_QWORD *)(this + 288);
  v4 = a2;
  v5 = *(unsigned int *)(v3 + 16 * a2 + 8);
  if ((_DWORD)v5 == -1)
  {
    v9 = *(_QWORD *)(this + 192);
    v10 = a2 >> 5;
    v11 = *(_DWORD *)(v9 + 4 * v10);
    v12 = 1 << a2;
    if ((v11 & (1 << a2)) != 0)
    {
      v13 = v11 & ~v12;
    }
    else
    {
      v9 = *(_QWORD *)(this + 208);
      v13 = *(_DWORD *)(v9 + 4 * v10) | v12;
    }
    *(_DWORD *)(v9 + 4 * v10) = v13;
    *(_BYTE *)(this + 525) = 1;
  }
  else
  {
    v6 = *(unsigned int **)(*(_QWORD *)(this + 536) + ((4 * v5) & 0x3FFFFFFF8));
    v7 = v6[4];
    if ((_DWORD)v7)
    {
      v8 = 0;
      while (*(_DWORD *)(*((_QWORD *)v6 + 1) + 4 * v8) != a2)
      {
        if (v7 == ++v8)
          goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v8) = 0;
    }
    if ((_DWORD)v8 != (_DWORD)v7)
    {
      v14 = *((_QWORD *)v6 + 1);
      v15 = v7 - 1;
      v6[4] = v15;
      *(_DWORD *)(v14 + 4 * v8) = *(_DWORD *)(v14 + 4 * v15);
      LODWORD(v7) = v6[4];
    }
    if ((_DWORD)v7)
    {
LABEL_13:
      if (v6[8] == -1)
      {
        v16 = *(unsigned int *)(this + 560);
        v6[8] = v16;
        v27 = v6;
        if ((*(_DWORD *)(this + 564) & 0x7FFFFFFFu) <= v16)
        {
          this = physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack(this + 552, &v27);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(this + 552) + 8 * v16) = v6;
          *(_DWORD *)(this + 560) = v16 + 1;
        }
      }
    }
    else
    {
      v17 = *v6;
      v18 = *(_QWORD *)(this + 192);
      v19 = v17 >> 5;
      v20 = *(_DWORD *)(v18 + 4 * (v17 >> 5));
      v21 = 1 << v17;
      if ((v20 & v21) != 0)
      {
        v22 = v20 & ~v21;
      }
      else
      {
        v18 = *(_QWORD *)(this + 208);
        v22 = *(_DWORD *)(v18 + 4 * v19) | v21;
      }
      *(_DWORD *)(v18 + 4 * v19) = v22;
      v23 = v6[8];
      if ((_DWORD)v23 != -1)
      {
        v24 = *(_QWORD *)(this + 552);
        v25 = *(_DWORD *)(this + 560) - 1;
        *(_DWORD *)(this + 560) = v25;
        *(_QWORD *)(v24 + 8 * v23) = *(_QWORD *)(v24 + 8 * v25);
        if (v23 < v25)
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 552) + 8 * v23) + 32) = v23;
        v6[8] = -1;
      }
    }
    *(_BYTE *)(v2 + 525) = 1;
    v3 = *(_QWORD *)(v2 + 288);
  }
  *(_DWORD *)(*(_QWORD *)(v2 + 264) + 4 * v4) = -1;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 280) + 8) + 4 * v4) = 0;
  v26 = v3 + 16 * v4;
  *(_DWORD *)(v26 + 8) = -1;
  *(_QWORD *)v26 = 0;
  return this;
}

uint64_t physx::Bp::AABBManager::createAggregate(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v9 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v10 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate>::getName() [T = physx::Bp::Aggregate]";
  else
    v10 = "<allocation names disabled>";
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v9 + 24) + 16))(v9 + 24, 88, v10, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 1319);
  v12 = 0;
  *(_DWORD *)v11 = a2;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 84) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_DWORD *)(v11 + 56) = 0;
  *(_DWORD *)(v11 + 32) = -1;
  if (a5)
  {
    v13 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v14 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::PersistentSelfCollisionPairs>::getName() [T"
            " = physx::Bp::PersistentSelfCollisionPairs]";
    else
      v14 = "<allocation names disabled>";
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v13 + 24) + 16))(v13 + 24, 80, v14, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 883);
    *(_DWORD *)(v12 + 8) = -1;
    *(_QWORD *)(v12 + 16) = 0;
    *(_DWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_DWORD *)(v12 + 56) = 0;
    *(_BYTE *)(v12 + 64) = 0;
    *(_QWORD *)v12 = off_24ED8C2D8;
    *(_QWORD *)(v12 + 72) = v11;
  }
  *(_QWORD *)(v11 + 24) = v12;
  v27 = v11;
  v15 = *(unsigned int *)(a1 + 532);
  if ((_DWORD)v15 == -1)
  {
    v15 = *(unsigned int *)(a1 + 544);
    if ((*(_DWORD *)(a1 + 548) & 0x7FFFFFFFu) <= v15)
    {
      physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack(a1 + 536, &v27);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 536) + 8 * v15) = v11;
      *(_DWORD *)(a1 + 544) = v15 + 1;
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 536);
    *(_DWORD *)(a1 + 532) = *(_QWORD *)(v16 + 8 * v15);
    *(_QWORD *)(v16 + 8 * v15) = v11;
  }
  v17 = *(_DWORD *)(a1 + 720);
  if (v17)
  {
    v18 = v17 - 1;
    v19 = *(_DWORD *)(*(_QWORD *)(a1 + 712) + 4 * v18);
    *(_DWORD *)(a1 + 720) = v18;
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 704);
    *(_DWORD *)(a1 + 704) = v20 - 1;
    v19 = (4 * v20) | 3;
  }
  if (a2 + 1 >= *(_DWORD *)(a1 + 296))
    physx::Bp::AABBManager::reserveShapeSpace((physx::Bp::AABBManager *)a1, a2 + 1);
  v21 = *(_DWORD *)(a1 + 520);
  if (a2 + 1 > v21)
    v21 = a2 + 1;
  *(_DWORD *)(a1 + 520) = v21;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * a2) = v19;
  v22 = *(_QWORD *)(a1 + 288);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) + 4 * a2) = 0;
  v23 = v22 + 16 * a2;
  *(_QWORD *)v23 = a4;
  *(_DWORD *)(v23 + 8) = (2 * v15) | 1;
  v24 = *(_QWORD *)(a1 + 400);
  v25 = *(_QWORD *)(v24 + 8) + 24 * a2;
  *(_OWORD *)v25 = xmmword_2261A6E10;
  *(int32x2_t *)(v25 + 16) = vdup_n_s32(0xFE7FFFFF);
  *(_BYTE *)(v24 + 24) = 1;
  ++*(_DWORD *)(a1 + 528);
  return v15;
}

uint64_t physx::Bp::AABBManager::destroyAggregate(uint64_t a1, _DWORD *a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v8;
  physx::Bp::Aggregate *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;

  v8 = a4;
  v9 = *(physx::Bp::Aggregate **)(*(_QWORD *)(a1 + 536) + 8 * a4);
  v10 = *(unsigned int *)v9;
  v11 = *((unsigned int *)v9 + 8);
  if ((_DWORD)v11 != -1)
  {
    v12 = *(_QWORD *)(a1 + 552);
    v13 = *(_DWORD *)(a1 + 560) - 1;
    *(_DWORD *)(a1 + 560) = v13;
    *(_QWORD *)(v12 + 8 * v11) = *(_QWORD *)(v12 + 8 * v13);
    if (v11 < v13)
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 552) + 8 * v11) + 32) = v11;
    *((_DWORD *)v9 + 8) = -1;
  }
  v14 = *(_QWORD *)(a1 + 192);
  v15 = v10 >> 5;
  v16 = *(_DWORD *)(v14 + 4 * (v10 >> 5));
  v17 = 1 << v10;
  if ((v16 & (1 << v10)) != 0)
  {
    v18 = v16 & ~v17;
  }
  else
  {
    if (!*((_DWORD *)v9 + 4))
      goto LABEL_10;
    v14 = *(_QWORD *)(a1 + 208);
    v18 = *(_DWORD *)(v14 + 4 * v15) | v17;
  }
  *(_DWORD *)(v14 + 4 * v15) = v18;
LABEL_10:
  physx::Bp::Aggregate::~Aggregate(v9);
  (*(void (**)(uint64_t, physx::Bp::Aggregate *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 536) + 8 * v8) = *(unsigned int *)(a1 + 532);
  *(_DWORD *)(a1 + 532) = a4;
  v19 = *(_QWORD *)(a1 + 264);
  *a3 = *(_DWORD *)(v19 + 4 * v10);
  v20 = *(_DWORD *)(v19 + 4 * v10);
  *a2 = v10;
  v25 = v20;
  v21 = *(unsigned int *)(a1 + 720);
  if ((*(_DWORD *)(a1 + 724) & 0x7FFFFFFFu) <= v21)
  {
    physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::ReflectionAllocator<physx::Bp::FilterGroup::Enum>>::growAndPushBack(a1 + 712, &v25);
    v19 = *(_QWORD *)(a1 + 264);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 712) + 4 * v21) = v20;
    *(_DWORD *)(a1 + 720) = v21 + 1;
  }
  *(_DWORD *)(v19 + 4 * v10) = -1;
  v22 = *(_QWORD *)(a1 + 288);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) + 4 * v10) = 0;
  v23 = v22 + 16 * v10;
  *(_DWORD *)(v23 + 8) = -1;
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(a1 + 525) = 1;
  --*(_DWORD *)(a1 + 528);
  return 1;
}

uint64_t physx::Bp::AggregateBoundsComputationTask::runInternal(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v9;

  v1 = *(_DWORD *)(this + 52);
  if (v1)
  {
    v2 = *(_QWORD *)(this + 40);
    v3 = *(_QWORD *)(*(_QWORD *)(v2 + 280) + 8);
    v4 = (uint64_t *)(*(_QWORD *)(this + 56) + 8 * *(unsigned int *)(this + 48));
    v5 = *(_QWORD *)(v2 + 400);
    v6 = v1 - 1;
    if (v1 == 1)
    {
      v7 = (uint64_t *)(*(_QWORD *)(this + 56) + 8 * *(unsigned int *)(this + 48));
    }
    else
    {
      v7 = (uint64_t *)(*(_QWORD *)(this + 56) + 8 * *(unsigned int *)(this + 48));
      do
      {
        v9 = v7[1];
        ++v7;
        _X9 = v9;
        __asm
        {
          PRFM            #0, [X9]
          PRFM            #0, [X9,#0x40]
        }
        physx::Bp::Aggregate::computeBounds(*v4, *(_QWORD *)(v5 + 8), v3);
        v4 = v7;
        --v6;
      }
      while (v6);
    }
    return physx::Bp::Aggregate::computeBounds(*v7, *(_QWORD *)(v5 + 8), v3);
  }
  return this;
}

uint64_t physx::Bp::FinalizeUpdateTask::runInternal(physx::Bp::FinalizeUpdateTask *this)
{
  return physx::Bp::AABBManager::finalizeUpdate(*((_QWORD *)this + 5), *((_DWORD *)this + 12), *((_QWORD *)this + 7), *((_QWORD *)this + 3), *((_QWORD *)this + 8));
}

uint64_t physx::Bp::AABBManager::finalizeUpdate(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int **v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;

  if (a2 >= 2)
  {
    v5 = *(unsigned int *)(a1 + 560);
    if ((_DWORD)v5)
    {
      v6 = *(unsigned int ***)(a1 + 552);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8);
      do
      {
        v8 = *v6++;
        v9 = (_QWORD *)(v7 + 24 * *v8);
        *v9 = *(_QWORD *)(v8 + 15);
        v9[1] = *(_QWORD *)(v8 + 17);
        v9[2] = *(_QWORD *)(v8 + 19);
        --v5;
      }
      while (v5);
    }
  }
  v10 = *(_DWORD *)(a1 + 336);
  v11 = *(_DWORD *)(a1 + 360);
  v12 = *(_DWORD *)(a1 + 384);
  *(_BYTE *)(a1 + 525) = 0;
  if (v10 || v12 || v11)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 392) + 88))(*(_QWORD *)(a1 + 392));
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 40))(a5);
}

uint64_t physx::Bp::AABBManager::updateAABBsAndBP(physx::Bp::AABBManager *this, unsigned int a2, pthread_mutex_t **a3, physx::PxcScratchAllocator *a4, char a5, physx::PxBaseTask *a6, physx::PxBaseTask *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unsigned int i;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v68;
  unsigned int j;
  int v70;
  uint64_t v71;
  physx::PxcScratchAllocator *v73;
  physx::PxBaseTask *v74;
  physx::PxBaseTask *v75;
  int v76;
  unsigned int *v77;

  if (*((_BYTE *)this + 525))
    a5 = 1;
  *((_BYTE *)this + 525) = a5;
  *((_QWORD *)this + 63) = a4;
  *((_QWORD *)this + 64) = a7;
  if (a2 >= 2)
  {
    *((_QWORD *)this + 20) = this;
    *((_DWORD *)this + 42) = a2;
    *((_QWORD *)this + 22) = a4;
    *((_QWORD *)this + 23) = a7;
    *((_DWORD *)this + 38) = 1;
    *((_QWORD *)this + 18) = a6;
    if (a6)
    {
      (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a6 + 32))(a6);
      *((_QWORD *)this + 17) = *(_QWORD *)(*((_QWORD *)this + 18) + 16);
    }
  }
  v73 = a4;
  v74 = a6;
  v75 = a7;
  physx::Bp::resetOrClear<physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>>((uint64_t)this + 320);
  v14 = *((_QWORD *)this + 24);
  if (v14)
  {
    v15 = *((_DWORD *)this + 50) & 0x7FFFFFFF;
    v16 = 1;
    while (v15)
    {
      v17 = v15 - 1;
      if (*(_DWORD *)(v14 - 4 + 4 * v15--))
      {
        v16 = (v17 & 0x7FFFFFF) + 1;
        break;
      }
    }
    v19 = 0;
    do
    {
      for (i = *(_DWORD *)(v14 + 4 * v19); i; i &= i - 1)
      {
        v21 = __clz(__rbit32(i)) | (32 * v19);
        LODWORD(v77) = v21;
        v22 = *((unsigned int *)this + 84);
        if ((*((_DWORD *)this + 85) & 0x7FFFFFFFu) <= v22)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 80, &v77);
        }
        else
        {
          *(_DWORD *)(*((_QWORD *)this + 41) + 4 * v22) = v21;
          ++*((_DWORD *)this + 84);
        }
      }
      ++v19;
    }
    while (v19 != v16);
  }
  physx::Bp::resetOrClear<physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>>((uint64_t)this + 344);
  if (*((_BYTE *)this + 524))
  {
    *((_WORD *)this + 262) = 256;
    v76 = 0;
    if (*((_DWORD *)this + 130))
    {
      v23 = 0;
      v24 = 8;
      while (1)
      {
        if (*(_DWORD *)(*((_QWORD *)this + 33) + 4 * v23) != -1)
        {
          v25 = *(unsigned int *)(*((_QWORD *)this + 36) + v24);
          if ((_DWORD)v25 == -1)
            goto LABEL_31;
          if ((v25 & 1) != 0)
          {
            v26 = *(unsigned int **)(*((_QWORD *)this + 67) + ((4 * v25) & 0x3FFFFFFF8));
            if (v26[4])
              break;
          }
        }
LABEL_35:
        v76 = ++v23;
        v24 += 16;
        if (v23 >= *((unsigned int *)this + 130))
          goto LABEL_78;
      }
      if (v26[8] == -1)
      {
        v27 = *((unsigned int *)this + 140);
        v26[8] = v27;
        v77 = v26;
        if ((*((_DWORD *)this + 141) & 0x7FFFFFFFu) <= v27)
        {
          physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack((uint64_t)this + 552, &v77);
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v27) = v26;
          *((_DWORD *)this + 140) = v27 + 1;
        }
      }
      physx::Bp::Aggregate::allocateBounds((uint64_t)v26);
      physx::Bp::Aggregate::computeBounds((uint64_t)v26, *(_QWORD *)(*((_QWORD *)this + 50) + 8), *(_QWORD *)(*((_QWORD *)this + 35) + 8));
      v28 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 50) + 8) + 24 * *v26);
      *v28 = *(_QWORD *)(v26 + 15);
      v28[1] = *(_QWORD *)(v26 + 17);
      v28[2] = *(_QWORD *)(v26 + 19);
LABEL_31:
      if (((*(_DWORD *)(*((_QWORD *)this + 24) + 4 * (v23 >> 5)) >> v23) & 1) == 0)
      {
        v29 = *((unsigned int *)this + 90);
        if ((*((_DWORD *)this + 91) & 0x7FFFFFFFu) <= v29)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 86, &v76);
        }
        else
        {
          *(_DWORD *)(*((_QWORD *)this + 44) + 4 * v29) = v23;
          ++*((_DWORD *)this + 90);
        }
      }
      goto LABEL_35;
    }
  }
  else
  {
    v30 = *((_QWORD *)this + 28);
    if (v30)
    {
      v31 = *((_DWORD *)this + 58) & 0x7FFFFFFF;
      v32 = 1;
      while (v31)
      {
        v33 = v31 - 1;
        if (*(_DWORD *)(v30 - 4 + 4 * v31--))
        {
          v32 = (v33 & 0x7FFFFFF) + 1;
          break;
        }
      }
      v35 = 0;
      do
      {
        v36 = *(_DWORD *)(v30 + 4 * v35);
        if (v36)
        {
          v37 = 32 * v35;
          do
          {
            v38 = __clz(__rbit32(v36));
            v39 = v38 | v37;
            v76 = v38 | v37;
            if (((*(_DWORD *)(*((_QWORD *)this + 24) + 4 * v35) >> v38) & 1) == 0)
            {
              v40 = *(unsigned int *)(*((_QWORD *)this + 36) + 16 * v39 + 8);
              if ((_DWORD)v40 == -1)
              {
                v43 = *((unsigned int *)this + 90);
                if ((*((_DWORD *)this + 91) & 0x7FFFFFFFu) <= v43)
                {
                  physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 86, &v76);
                }
                else
                {
                  *(_DWORD *)(*((_QWORD *)this + 44) + 4 * v43) = v39;
                  ++*((_DWORD *)this + 90);
                }
              }
              else
              {
                v41 = *(unsigned int **)(*((_QWORD *)this + 67) + ((4 * v40) & 0x3FFFFFFF8));
                if (v41[8] == -1)
                {
                  v42 = *((unsigned int *)this + 140);
                  v41[8] = v42;
                  v77 = v41;
                  if ((*((_DWORD *)this + 141) & 0x7FFFFFFFu) <= v42)
                  {
                    physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack((uint64_t)this + 552, &v77);
                  }
                  else
                  {
                    *(_QWORD *)(*((_QWORD *)this + 69) + 8 * v42) = v41;
                    *((_DWORD *)this + 140) = v42 + 1;
                  }
                }
              }
            }
            v36 &= v36 - 1;
          }
          while (v36);
        }
        ++v35;
      }
      while (v35 != v32);
    }
    v44 = *((unsigned int *)this + 140);
    if ((_DWORD)v44)
    {
      v45 = 0;
      do
      {
        v46 = *((_QWORD *)this + 69);
        _X26 = *(unsigned int **)(v46 + v45);
        if (8 * (v44 - 1) != v45)
          __asm { PRFM            #0, [X26] }
        physx::Bp::Aggregate::allocateBounds(*(_QWORD *)(v46 + v45));
        if (a2 >= 2)
        {
          v53 = *_X26;
        }
        else
        {
          physx::Bp::Aggregate::computeBounds((uint64_t)_X26, *(_QWORD *)(*((_QWORD *)this + 50) + 8), *(_QWORD *)(*((_QWORD *)this + 35) + 8));
          v53 = *_X26;
          v54 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 50) + 8) + 24 * *_X26);
          *v54 = *(_QWORD *)(_X26 + 15);
          v54[1] = *(_QWORD *)(_X26 + 17);
          v54[2] = *(_QWORD *)(_X26 + 19);
        }
        if (((*(_DWORD *)(*((_QWORD *)this + 24) + 4 * (v53 >> 5)) >> v53) & 1) == 0)
        {
          v55 = *((unsigned int *)this + 90);
          if ((*((_DWORD *)this + 91) & 0x7FFFFFFFu) <= v55)
          {
            physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 86, _X26);
          }
          else
          {
            *(_DWORD *)(*((_QWORD *)this + 44) + 4 * v55) = v53;
            ++*((_DWORD *)this + 90);
          }
        }
        v45 += 8;
      }
      while (8 * v44 != v45);
      if (a2 >= 2)
      {
        v56 = v44;
        if (v44 > a2)
          v56 = v44 / a2;
        v57 = 0;
        do
        {
          v58 = physx::Cm::FlushPool::allocate(a3, 64, 0x10u);
          v59 = (_QWORD *)v58;
          v60 = *((_QWORD *)this + 98);
          *(_QWORD *)(v58 + 16) = 0;
          *(_QWORD *)(v58 + 24) = 0;
          *(_DWORD *)(v58 + 32) = 0;
          *(_QWORD *)v58 = off_24ED8C308;
          *(_QWORD *)(v58 + 8) = v60;
          *(_QWORD *)(v58 + 48) = 0;
          *(_QWORD *)(v58 + 56) = 0;
          *(_QWORD *)(v58 + 40) = 0;
          if (v44 >= v56)
            v61 = v56;
          else
            v61 = v44;
          v62 = *((_QWORD *)this + 69);
          *(_QWORD *)(v58 + 40) = this;
          *(_DWORD *)(v58 + 48) = v57;
          *(_DWORD *)(v58 + 52) = v61;
          *(_QWORD *)(v58 + 56) = v62;
          v57 += v61;
          LODWORD(v44) = v44 - v61;
          *(_DWORD *)(v58 + 32) = 1;
          *(_QWORD *)(v58 + 24) = (char *)this + 120;
          (*(void (**)(char *))(*((_QWORD *)this + 15) + 32))((char *)this + 120);
          v59[2] = *(_QWORD *)(v59[3] + 16);
          (*(void (**)(_QWORD *))(*v59 + 40))(v59);
        }
        while ((_DWORD)v44);
      }
      *((_BYTE *)this + 525) = 1;
      physx::shdfnd::sort<unsigned int,physx::shdfnd::Less<unsigned int>,physx::shdfnd::ReflectionAllocator<unsigned int>>(*((_QWORD *)this + 44), *((_DWORD *)this + 90), (uint64_t)&v77, (uint64_t)&v76, 32);
    }
  }
LABEL_78:
  physx::Bp::resetOrClear<physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>>((uint64_t)this + 368);
  v63 = *((_QWORD *)this + 26);
  if (v63)
  {
    v64 = *((_DWORD *)this + 54) & 0x7FFFFFFF;
    v65 = 1;
    while (v64)
    {
      v66 = v64 - 1;
      if (*(_DWORD *)(v63 - 4 + 4 * v64--))
      {
        v65 = (v66 & 0x7FFFFFF) + 1;
        break;
      }
    }
    v68 = 0;
    do
    {
      for (j = *(_DWORD *)(v63 + 4 * v68); j; j &= j - 1)
      {
        v70 = __clz(__rbit32(j)) | (32 * v68);
        LODWORD(v77) = v70;
        v71 = *((unsigned int *)this + 96);
        if ((*((_DWORD *)this + 97) & 0x7FFFFFFFu) <= v71)
        {
          physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack((_DWORD *)this + 92, &v77);
        }
        else
        {
          *(_DWORD *)(*((_QWORD *)this + 47) + 4 * v71) = v70;
          ++*((_DWORD *)this + 96);
        }
      }
      ++v68;
    }
    while (v68 != v65);
  }
  if (a2 > 1)
    return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 17) + 144))(*((_QWORD *)this + 17), (char *)this + 120);
  else
    return physx::Bp::AABBManager::finalizeUpdate((uint64_t)this, a2, (uint64_t)v73, (uint64_t)v74, (uint64_t)v75);
}

uint64_t physx::Bp::resetOrClear<physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>>(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_DWORD *)(result + 16) >= ((*(_DWORD *)(result + 20) >> 1) & 0x3FFFFFFFu))
  {
    *(_DWORD *)(result + 16) = 0;
  }
  else
  {
    physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::resize(result);
    return physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::recreate(v1, *(_DWORD *)(v1 + 16));
  }
  return result;
}

void physx::Bp::AABBManager::postBroadPhase(physx::Bp::AABBManager *this, physx::PxBaseTask *a2, physx::PxBaseTask *a3, pthread_mutex_t **a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v21;
  unsigned int v22;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int v31;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  char *v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  char *v58;
  _QWORD *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  physx::PxBaseTask *v69;
  __int128 v71;
  uint64_t v72;

  if (a2)
  {
    *((_DWORD *)this + 24) = 1;
    *((_QWORD *)this + 11) = a2;
    (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
    v7 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 10) = *(_QWORD *)(*((_QWORD *)this + 11) + 16);
    *((_DWORD *)this + 10) = 1;
    *((_QWORD *)this + 4) = (char *)this + 64;
    (*(void (**)(char *))(v7 + 32))((char *)this + 64);
    *((_QWORD *)this + 3) = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
  }
  ++*((_DWORD *)this + 142);
  if (*((_DWORD *)this + 84) || *((_DWORD *)this + 90) || *((_DWORD *)this + 96))
    (*(void (**)(_QWORD, physx::PxBaseTask *))(**((_QWORD **)this + 49) + 96))(*((_QWORD *)this + 49), a3);
  physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>((uint64_t)this + 440);
  physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>((uint64_t)this + 472);
  physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>((uint64_t)this + 456);
  physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>((uint64_t)this + 488);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 49) + 120))(*((_QWORD *)this + 49));
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 49) + 128))(*((_QWORD *)this + 49));
  if (v8)
  {
    v10 = (unsigned int *)v9;
    v11 = 0x3FFFFFFF;
    v12 = 0x3FFFFFFF;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      if ((_DWORD)v13 != v12 || (_DWORD)v14 != v11)
      {
        v16 = *((_QWORD *)this + 36);
        v17 = *(_DWORD *)(v16 + 16 * v13 + 8);
        v18 = v16 + 16 * v14;
        v19 = *(_DWORD *)(v18 + 8);
        if (v17 == -1 && v19 == -1)
        {
          v54 = *(_QWORD *)(v16 + 16 * v13);
          if (v54 >= 4)
          {
            v55 = *(_QWORD *)v18;
            if (v55 >= 4)
            {
              v56 = v54 & 3;
              v57 = v55 & 3;
              if (v56 > (int)v57)
                v57 = v56;
              v58 = (char *)this + 16 * v57;
              v59 = v58 + 472;
              *(_QWORD *)&v71 = *v10;
              *((_QWORD *)&v71 + 1) = v14;
              v60 = *((_DWORD *)v58 + 120);
              if ((*((_DWORD *)v58 + 121) & 0x7FFFFFFFu) <= v60)
              {
                physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack((uint64_t)v59, &v71);
              }
              else
              {
                v61 = *v59 + 24 * v60;
                *(_OWORD *)v61 = v71;
                *(_QWORD *)(v61 + 16) = v72;
                ++*((_DWORD *)v58 + 120);
              }
            }
          }
        }
        else
        {
          if (v14 <= v13)
            v21 = *v10;
          else
            v21 = v10[1];
          if (v14 >= v13)
            v22 = *v10;
          else
            v22 = v10[1];
          if (v19 == -1 || v17 == -1)
            v24 = (char *)this + 576;
          else
            v24 = (char *)this + 632;
          v25 = ((unsigned __int16)v22 | ((unsigned __int16)v21 << 16))
              + ~(((unsigned __int16)v22 | ((unsigned __int16)v21 << 16)) << 15);
          v26 = (9 * (v25 ^ (v25 >> 10))) ^ ((9 * (v25 ^ (v25 >> 10))) >> 6);
          v27 = *(unsigned int *)(*((_QWORD *)v24 + 3)
                                + 4
                                * ((*((_DWORD *)v24 + 9) - 1) & ((v26 + ~(v26 << 11)) ^ ((v26 + ~(v26 << 11)) >> 16))));
          v28 = *((_QWORD *)v24 + 1);
          v29 = (int *)(v28 + 16 * v27);
          v31 = *v29;
          v30 = v29[1];
          if (v22 != v31 || v21 != v30)
          {
            v33 = *((_QWORD *)v24 + 2);
            do
            {
              v27 = *(unsigned int *)(v33 + 4 * v27);
              v34 = (int *)(v28 + 16 * v27);
              v36 = *v34;
              v35 = v34[1];
            }
            while (v22 != v36 || v21 != v35);
          }
          v38 = *(_QWORD *)(v28 + 16 * v27 + 8);
          v39 = *(unsigned int *)(v38 + 24);
          if ((_DWORD)v39)
          {
            v40 = 0;
            v41 = 8 * v39;
            do
            {
              v42 = *(_QWORD *)(v38 + 48);
              v43 = *(_DWORD *)(v42 + v40) & 0x7FFFFFFF;
              v44 = *((_QWORD *)this + 36);
              v45 = *(_QWORD *)(v44 + 16 * v43);
              if (v45 >= 4)
              {
                v46 = *(_DWORD *)(v42 + v40 + 4) & 0x7FFFFFFF;
                v47 = *(_QWORD *)(v44 + 16 * v46);
                if (v47 >= 4)
                {
                  v48 = v45 & 3;
                  v49 = v47 & 3;
                  if ((int)v48 <= v49)
                    v48 = v49;
                  v50 = (char *)this + 16 * v48;
                  v51 = v50 + 472;
                  *(_QWORD *)&v71 = v43;
                  *((_QWORD *)&v71 + 1) = v46;
                  v52 = *((_DWORD *)v50 + 120);
                  if ((*((_DWORD *)v50 + 121) & 0x7FFFFFFFu) <= v52)
                  {
                    physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack((uint64_t)v51, &v71);
                  }
                  else
                  {
                    v53 = *v51 + 24 * v52;
                    *(_OWORD *)v53 = v71;
                    *(_QWORD *)(v53 + 16) = v72;
                    ++*((_DWORD *)v50 + 120);
                  }
                }
              }
              v40 += 8;
            }
            while (v41 != v40);
          }
          *(_BYTE *)(v38 + 64) = 1;
        }
        v12 = v13;
        v11 = v14;
      }
      v10 += 2;
      --v8;
    }
    while (v8);
  }
  if (a2)
  {
    v62 = *((_DWORD *)this + 140);
    if (v62)
    {
      v63 = 0;
      v64 = *((_DWORD *)this + 140);
      do
      {
        v65 = v64 - 16;
        if (v64 >= 0x10)
          v66 = 16;
        else
          v66 = v64;
        v67 = physx::Cm::FlushPool::allocate(a4, 56, 0x10u);
        v68 = *((_QWORD *)this + 69) + 8 * v63;
        *(_QWORD *)(v67 + 8) = *((_QWORD *)this + 98);
        *(_QWORD *)(v67 + 16) = 0;
        *(_DWORD *)(v67 + 32) = 0;
        *(_QWORD *)v67 = &off_24ED8C558;
        *(_QWORD *)(v67 + 40) = v68;
        *(_DWORD *)(v67 + 48) = v66;
        *(_DWORD *)(v67 + 32) = 1;
        *(_QWORD *)(v67 + 24) = (char *)this + 8;
        (*(void (**)(char *))(*((_QWORD *)this + 1) + 32))((char *)this + 8);
        *(_QWORD *)(v67 + 16) = *(_QWORD *)(*(_QWORD *)(v67 + 24) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
        v63 += 16;
        v64 = v65;
      }
      while (v63 < v62);
    }
    *((_QWORD *)this + 6) = a4;
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 10) + 144))(*((_QWORD *)this + 10), (char *)this + 64);
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 3) + 144))(*((_QWORD *)this + 3), (char *)this + 8);
  }
  else
  {
    physx::Bp::AABBManager::postBpStage2(this, 0, a4);
    physx::Bp::AABBManager::postBpStage3(this, v69);
  }
}

uint64_t physx::Bp::resetOrClear<physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>>(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_DWORD *)(result + 8) >= ((*(_DWORD *)(result + 12) >> 1) & 0x3FFFFFFFu))
  {
    *(_DWORD *)(result + 8) = 0;
  }
  else
  {
    physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize(result);
    return physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::recreate(v1, *(_DWORD *)(v1 + 8));
  }
  return result;
}

uint64_t physx::Bp::AABBManager::postBpStage2(physx::Bp::AABBManager *this, physx::PxBaseTask *a2, pthread_mutex_t **a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v18;

  v6 = *((_DWORD *)this + 140);
  if (v6)
  {
    v7 = 0;
    v8 = *((_DWORD *)this + 140);
    do
    {
      v9 = v8 - 16;
      if (v8 >= 0x10)
        v10 = 16;
      else
        v10 = v8;
      v11 = physx::Cm::FlushPool::allocate(a3, 128, 0x10u);
      v12 = (_QWORD *)v11;
      v13 = *((_QWORD *)this + 98);
      v14 = *((_QWORD *)this + 69) + 8 * v7;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_DWORD *)(v11 + 32) = 0;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_OWORD *)(v11 + 56) = 0u;
      *(_OWORD *)(v11 + 72) = 0u;
      *(_OWORD *)(v11 + 88) = 0u;
      *(_QWORD *)v11 = &off_24ED8C5C8;
      *(_QWORD *)(v11 + 8) = v13;
      *(_QWORD *)(v11 + 104) = v14;
      *(_DWORD *)(v11 + 112) = v10;
      *(_QWORD *)(v11 + 120) = this;
      if (a2)
      {
        *(_DWORD *)(v11 + 32) = 1;
        *(_QWORD *)(v11 + 24) = a2;
        (*(void (**)(physx::PxBaseTask *))(*(_QWORD *)a2 + 32))(a2);
        v12[2] = *(_QWORD *)(v12[3] + 16);
        (*(void (**)(_QWORD *))(*v12 + 40))(v12);
      }
      else
      {
        physx::Bp::ProcessSelfCollisionPairsParallel::runInternal((physx::Bp::ProcessSelfCollisionPairsParallel *)v11);
      }
      v18 = v12;
      v15 = *((unsigned int *)this + 174);
      if ((*((_DWORD *)this + 175) & 0x7FFFFFFFu) <= v15)
      {
        physx::shdfnd::Array<physx::Bp::ProcessAggPairsBase *,physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>>::growAndPushBack((uint64_t)this + 688, &v18);
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)this + 86) + 8 * v15) = v12;
        *((_DWORD *)this + 174) = v15 + 1;
      }
      v7 += 16;
      v8 = v9;
    }
    while (v7 < v6);
  }
  v16 = (char *)this + 632;
  if (a2)
  {
    physx::Bp::processAggregatePairsParallel((uint64_t)v16, (pthread_mutex_t **)this, a3, (uint64_t)a2, (uint64_t)"AggAggPairs", (uint64_t)this + 688);
    return physx::Bp::processAggregatePairsParallel((uint64_t)this + 576, (pthread_mutex_t **)this, a3, (uint64_t)a2, (uint64_t)"AggActorPairs", (uint64_t)this + 688);
  }
  else
  {
    physx::Bp::processAggregatePairs((uint64_t)v16, (uint64_t)this);
    return physx::Bp::processAggregatePairs((uint64_t)this + 576, (uint64_t)this);
  }
}

void physx::Bp::AABBManager::postBpStage3(physx::Bp::AABBManager *this, physx::PxBaseTask *a2)
{
  physx::Bp::AABBManager *v2;
  uint64_t **v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char *v14;
  _QWORD *v15;
  _DWORD *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unsigned int *v21;
  int v22;
  unint64_t v23;
  int v24;
  char *v25;
  _QWORD *v26;
  _DWORD *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  physx::Bp::AABBManager *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  physx::Bp::AABBManager *i;
  int v42;
  uint64_t v43;
  int8x8_t v44;
  unsigned int *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v60;
  unsigned int v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  int8x8_t v67;
  int32x2_t *v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  const char *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  int *v84;
  int v85;
  int v86;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  int32x2_t v92;
  uint64_t *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  int v99;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t j;
  int *v123;
  int v124;
  int v125;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  char v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  int *v144;
  int v145;
  int v146;
  uint64_t v148;
  unint64_t *v149;
  int v150;
  uint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  physx::Bp::AABBManager *v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  _QWORD *v168;
  __int128 v169;
  uint64_t v170;
  char v171;
  __int128 *v172;
  uint64_t v173;
  uint64_t v174;

  v2 = this;
  v174 = *MEMORY[0x24BDAC8D0];
  v3 = (uint64_t **)((char *)this + 552);
  v4 = *((_DWORD *)this + 140);
  if (v4)
  {
    v5 = *v3;
    v6 = *((unsigned int *)this + 140);
    do
    {
      v7 = *v5++;
      *(_DWORD *)(v7 + 32) = -1;
      --v6;
    }
    while (v6);
  }
  if (v4 >= ((*((_DWORD *)this + 141) >> 1) & 0x3FFFFFFFu))
  {
    *((_DWORD *)this + 140) = 0;
  }
  else
  {
    physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)this + 552);
    physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::recreate((uint64_t)v3, *((_DWORD *)v2 + 140));
  }
  v164 = v2;
  if (*((_DWORD *)v2 + 174))
  {
    v8 = 0;
    do
    {
      v9 = 0;
      v161 = v8;
      v162 = *(_QWORD *)(*((_QWORD *)v2 + 86) + 8 * v8);
      v10 = 1;
      do
      {
        v166 = v10;
        v11 = v162 + 16 * v9;
        if (*(_DWORD *)(v11 + 52))
        {
          v12 = 0;
          v13 = *(_DWORD *)(v11 + 48);
          v14 = (char *)v164 + 16 * v9;
          v15 = v14 + 440;
          v16 = v14 + 452;
          v17 = (unsigned int *)(v14 + 448);
          do
          {
            v18 = **(_QWORD **)(v11 + 40) + 24 * (v13 + v12);
            if ((*v16 & 0x7FFFFFFFu) <= *v17)
            {
              physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack((uint64_t)v15, (__int128 *)v18);
            }
            else
            {
              v19 = *v15 + 24 * *v17;
              v20 = *(_OWORD *)v18;
              *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 16);
              *(_OWORD *)v19 = v20;
              ++*v17;
            }
            ++v12;
          }
          while (v12 < *(unsigned int *)(v11 + 52));
        }
        v22 = *(_DWORD *)(v11 + 84);
        v21 = (unsigned int *)(v11 + 84);
        if (v22)
        {
          v23 = 0;
          v24 = *(v21 - 1);
          v25 = (char *)v164 + 16 * v9;
          v26 = v25 + 472;
          v27 = v25 + 484;
          v28 = (unsigned int *)(v25 + 480);
          do
          {
            v29 = **(_QWORD **)(v21 - 3) + 24 * (v24 + v23);
            if ((*v27 & 0x7FFFFFFFu) <= *v28)
            {
              physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack((uint64_t)v26, (__int128 *)v29);
            }
            else
            {
              v30 = *v26 + 24 * *v28;
              v31 = *(_OWORD *)v29;
              *(_QWORD *)(v30 + 16) = *(_QWORD *)(v29 + 16);
              *(_OWORD *)v30 = v31;
              ++*v28;
            }
            ++v23;
          }
          while (v23 < *v21);
        }
        v10 = 0;
        v9 = 1;
      }
      while ((v166 & 1) != 0);
      v8 = v161 + 1;
      v2 = v164;
    }
    while (v161 + 1 < (unint64_t)*((unsigned int *)v164 + 174));
  }
  *((_DWORD *)v2 + 174) = 0;
  v171 = 1;
  v172 = &v169;
  v173 = 0x1000000000;
  v32 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)v2 + 99));
  v168 = v32;
  if (v32)
  {
    v33 = v32;
    do
    {
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v33 + 1));
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v33 + 3));
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v33 + 5));
      physx::shdfnd::Array<physx::IG::EdgeInstance *,physx::shdfnd::ReflectionAllocator<physx::IG::EdgeInstance *>>::resize((uint64_t)(v33 + 7));
      v34 = v173;
      if ((HIDWORD(v173) & 0x7FFFFFFFu) <= v173)
      {
        physx::shdfnd::Array<physx::Bp::BpCacheData *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::Bp::BpCacheData *>>>::growAndPushBack((uint64_t)&v169, &v168);
      }
      else
      {
        *((_QWORD *)v172 + v173) = v168;
        LODWORD(v173) = v34 + 1;
      }
      v33 = physx::shdfnd::SListImpl::pop(*((physx::shdfnd::SListImpl **)v2 + 99));
      v168 = v33;
    }
    while (v33);
  }
  if ((_DWORD)v173)
  {
    v35 = v2;
    v36 = 0;
    do
    {
      v37 = (_QWORD *)*((_QWORD *)v172 + v36);
      v38 = *((_QWORD *)v35 + 99);
      pthread_mutex_lock((pthread_mutex_t *)(v38 + 8));
      *v37 = *(_QWORD *)v38;
      *(_QWORD *)v38 = v37;
      pthread_mutex_unlock((pthread_mutex_t *)(v38 + 8));
      ++v36;
    }
    while (v36 < v173);
  }
  if ((v173 & 0x8000000000000000) == 0)
  {
    _ZF = (v173 & 0x7FFFFFFF00000000) == 0 || v172 == &v169;
    if (!_ZF && v172 != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  i = v164;
  v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v164 + 49) + 104))(*((_QWORD *)v164 + 49));
  v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)i + 49) + 112))(*((_QWORD *)i + 49));
  if (v42)
  {
    v45 = (unsigned int *)v43;
    v46 = 0x3FFFFFFF;
    v47 = 0x3FFFFFFF;
    do
    {
      v49 = *v45;
      v48 = v45[1];
      if ((_DWORD)v49 == v47 && (_DWORD)v48 == v46)
        goto LABEL_104;
      v51 = *((_QWORD *)i + 36);
      v52 = *(_DWORD *)(v51 + 16 * v49 + 8);
      v53 = *(_DWORD *)(v51 + 16 * v48 + 8);
      if (v52 == -1 && v53 == -1)
      {
        v69 = *(_DWORD *)(v51 + 16 * v49) & 3;
        v70 = *(_DWORD *)(v51 + 16 * v48) & 3;
        if (v69 > v70)
          v70 = v69;
        *(_QWORD *)&v169 = *v45;
        *((_QWORD *)&v169 + 1) = v48;
        v71 = (uint64_t)v164 + 16 * v70 + 440;
        v72 = *(_DWORD *)(v71 + 8);
        if ((*(_DWORD *)(v71 + 12) & 0x7FFFFFFFu) <= v72)
        {
          physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(v71, &v169);
        }
        else
        {
          v73 = *(_QWORD *)v71 + 24 * v72;
          v44 = (int8x8_t)v169;
          *(_OWORD *)v73 = v169;
          *(_QWORD *)(v73 + 16) = v170;
          ++*(_DWORD *)(v71 + 8);
        }
        goto LABEL_103;
      }
      if (v48 <= v49)
        v55 = v49;
      else
        v55 = v48;
      if (v48 >= v49)
        v56 = v49;
      else
        v56 = v48;
      v57 = *((_QWORD *)i + 67);
      v58 = *(_DWORD *)(v51 + 16 * v56 + 8);
      if (v52 == -1 || v53 == -1)
      {
        v60 = (v58 & 1) == 0 || v58 == -1;
        if (v60)
          v61 = v55;
        else
          v61 = v56;
        if (v60)
          v62 = v56;
        else
          v62 = v55;
        v63 = *(_DWORD **)(v57 + ((4 * *(unsigned int *)(v51 + 16 * v61 + 8)) & 0x3FFFFFFF8));
        v64 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v65 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::PersistentActorAggregatePair>::getName("
                ") [T = physx::Bp::PersistentActorAggregatePair]";
        else
          v65 = "<allocation names disabled>";
        v66 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v64 + 24)
                                                                                               + 16))(v64 + 24, 88, v65, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 1809);
        *(_DWORD *)(v66 + 8) = -1;
        *(_QWORD *)(v66 + 16) = 0;
        *(_DWORD *)(v66 + 24) = 0;
        *(_QWORD *)(v66 + 40) = 0;
        *(_QWORD *)(v66 + 48) = 0;
        *(_QWORD *)(v66 + 32) = 0;
        *(_DWORD *)(v66 + 56) = 0;
        *(_BYTE *)(v66 + 64) = 0;
        *(_QWORD *)v66 = off_24ED8C278;
        *(_DWORD *)(v66 + 68) = *v63;
        *(_DWORD *)(v66 + 72) = v62;
        *(_QWORD *)(v66 + 80) = v63;
        v68 = (int32x2_t *)((char *)v164 + 576);
      }
      else
      {
        v74 = *(_DWORD **)(v57 + 8 * (v58 >> 1));
        v75 = *(_DWORD **)(v57 + ((4 * *(unsigned int *)(v51 + 16 * v55 + 8)) & 0x3FFFFFFF8));
        v76 = physx::shdfnd::Foundation::mInstance;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
          v78 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::PersistentAggregateAggregatePair>::getN"
                "ame() [T = physx::Bp::PersistentAggregateAggregatePair]";
        else
          v78 = "<allocation names disabled>";
        v66 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v76 + 24)
                                                                                               + 16))(v76 + 24, 96, v78, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 1822);
        *(_DWORD *)(v66 + 8) = -1;
        *(_QWORD *)(v66 + 16) = 0;
        *(_DWORD *)(v66 + 24) = 0;
        *(_QWORD *)(v66 + 40) = 0;
        *(_QWORD *)(v66 + 48) = 0;
        *(_QWORD *)(v66 + 32) = 0;
        *(_DWORD *)(v66 + 56) = 0;
        *(_BYTE *)(v66 + 64) = 0;
        *(_QWORD *)v66 = off_24ED8C2A8;
        *(_DWORD *)(v66 + 68) = *v74;
        *(_DWORD *)(v66 + 72) = *v75;
        *(_QWORD *)(v66 + 80) = v74;
        *(_QWORD *)(v66 + 88) = v75;
        v68 = (int32x2_t *)((char *)v164 + 632);
      }
      v79 = v68[4].u32[1];
      if (v79)
      {
        v80 = ((unsigned __int16)v56 | ((unsigned __int16)v55 << 16))
            + ~(((unsigned __int16)v56 | ((unsigned __int16)v55 << 16)) << 15);
        v81 = (9 * (v80 ^ (v80 >> 10))) ^ ((9 * (v80 ^ (v80 >> 10))) >> 6);
        v82 = (v79 - 1) & ((v81 + ~(v81 << 11)) ^ ((v81 + ~(v81 << 11)) >> 16));
        v83 = *(unsigned int *)(*(_QWORD *)&v68[3] + 4 * v82);
        for (i = v164; (_DWORD)v83 != -1; v83 = *(unsigned int *)(*(_QWORD *)&v68[2] + 4 * v83))
        {
          v84 = (int *)(*(_QWORD *)&v68[1] + 16 * v83);
          v86 = *v84;
          v85 = v84[1];
          if (v86 == (_DWORD)v56 && v85 == (_DWORD)v55)
            goto LABEL_102;
        }
      }
      else
      {
        v82 = 0;
        i = v164;
      }
      if (v68[6].i32[1] == v68[4].i32[0])
      {
        if (v79)
          v88 = 2 * v79;
        else
          v88 = 16;
        if (v79 < v88)
        {
          physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal((uint64_t)v68, v88, v67);
          v79 = v68[4].u32[1];
        }
        v89 = ((unsigned __int16)v56 | ((unsigned __int16)v55 << 16))
            + ~(((unsigned __int16)v56 | ((unsigned __int16)v55 << 16)) << 15);
        v90 = (9 * (v89 ^ (v89 >> 10))) ^ ((9 * (v89 ^ (v89 >> 10))) >> 6);
        v82 = (v79 - 1) & ((v90 + ~(v90 << 11)) ^ ((v90 + ~(v90 << 11)) >> 16));
      }
      v91 = v68[5].u32[1];
      v68[5].i32[1] = v91 + 1;
      v92 = v68[3];
      *(_DWORD *)(*(_QWORD *)&v68[2] + 4 * v91) = *(_DWORD *)(*(_QWORD *)&v92 + 4 * v82);
      *(_DWORD *)(*(_QWORD *)&v92 + 4 * v82) = v91;
      v68[6] = vadd_s32(v68[6], (int32x2_t)0x100000001);
      v93 = (uint64_t *)(*(_QWORD *)&v68[1] + 16 * v91);
      *v93 = v56 | (v55 << 32);
      v93[1] = v66;
LABEL_102:
      physx::Bp::AABBManager::updatePairs((unsigned int *)i, v66, 0);
LABEL_103:
      v47 = v49;
      v46 = v48;
LABEL_104:
      v45 += 2;
      --v42;
    }
    while (v42);
  }
  v94 = *((_DWORD *)i + 116) + *((_DWORD *)i + 112);
  v167 = (uint64_t)i + 728;
  v95 = *((_DWORD *)i + 191);
  if (v95 && *((_DWORD *)i + 195))
  {
    memset(*((void **)i + 94), 255, 4 * v95);
    v96 = *((_QWORD *)i + 93);
    v97 = (*((_DWORD *)i + 190) - 1);
    if (*((_DWORD *)i + 190) == 1)
    {
      v104 = 0;
    }
    else
    {
      _X10 = v96 + 128;
      v99 = 1;
      do
      {
        __asm { PRFM            #0, [X10] }
        *(_DWORD *)(_X10 - 128) = v99++;
        _X10 += 4;
        --v97;
      }
      while (v97);
      v104 = (*((_DWORD *)i + 190) - 1);
    }
    *(_DWORD *)(v96 + 4 * v104) = -1;
    *((_DWORD *)i + 193) = 0;
    *((_DWORD *)i + 195) = 0;
    v95 = *((_DWORD *)i + 191);
  }
  if (v95 < v94)
    physx::shdfnd::internal::HashBase<physx::Bp::Pair,physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::internal::HashSetBase<physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v167, v94, v44);
  v105 = 0;
  v106 = 1;
  do
  {
    v163 = v106;
    v107 = (uint64_t)i + 16 * v105;
    v108 = *(unsigned int *)(v107 + 480);
    v165 = v107;
    v109 = *(unsigned int *)(v107 + 448);
    if ((_DWORD)v109)
    {
      v110 = 0;
      v111 = (_QWORD *)(v107 + 440);
      do
      {
        v112 = (unint64_t *)(*v111 + 24 * v110);
        v113 = *v112;
        v114 = v112[1];
        v115 = *((_QWORD *)i + 36);
        v116 = *v112;
        *v112 = *(_QWORD *)(v115 + 16 * v116) & 0xFFFFFFFFFFFFFFFCLL;
        v112[1] = *(_QWORD *)(v115 + 16 * v114) & 0xFFFFFFFFFFFFFFFCLL;
        if ((_DWORD)v108)
        {
          v117 = *((_DWORD *)i + 191);
          v118 = (unsigned __int16)v113 | ((unsigned __int16)v114 << 16);
          if (v117)
          {
            v119 = 9 * ((v118 + ~(v118 << 15)) ^ ((v118 + ~(v118 << 15)) >> 10));
            v120 = (v119 ^ (v119 >> 6)) + ~((v119 ^ (v119 >> 6)) << 11);
            v121 = (v117 - 1) & (v120 ^ HIWORD(v120));
            for (j = *(unsigned int *)(*((_QWORD *)i + 94) + 4 * v121);
                  (_DWORD)j != -1;
                  j = *(unsigned int *)(*((_QWORD *)i + 93) + 4 * j))
            {
              v123 = (int *)(*((_QWORD *)i + 92) + 8 * j);
              v125 = *v123;
              v124 = v123[1];
              if (v125 == (_DWORD)v113 && v124 == (_DWORD)v114)
                goto LABEL_137;
            }
          }
          else
          {
            v121 = 0;
          }
          v127 = *((unsigned int *)i + 193);
          if ((_DWORD)v127 == -1)
          {
            if (v117)
              v128 = 2 * v117;
            else
              v128 = 16;
            if (v117 >= v128)
            {
              v127 = 0xFFFFFFFFLL;
            }
            else
            {
              physx::shdfnd::internal::HashBase<physx::Bp::Pair,physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::internal::HashSetBase<physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(v167, v128, v44);
              v117 = *((_DWORD *)i + 191);
              v127 = *((unsigned int *)i + 193);
            }
            v129 = 9 * ((v118 + ~(v118 << 15)) ^ ((v118 + ~(v118 << 15)) >> 10));
            v121 = (v117 - 1) & (((v129 ^ (v129 >> 6)) + ~((v129 ^ (v129 >> 6)) << 11)) ^ (((v129 ^ (v129 >> 6))
                                                                                          + ~((v129 ^ (v129 >> 6)) << 11)) >> 16));
          }
          v130 = *((_QWORD *)i + 93);
          *((_DWORD *)i + 193) = *(_DWORD *)(v130 + 4 * v127);
          v131 = *((_QWORD *)i + 94);
          *(_DWORD *)(v130 + 4 * v127) = *(_DWORD *)(v131 + 4 * v121);
          *(_DWORD *)(v131 + 4 * v121) = v127;
          v44 = (int8x8_t)vadd_s32(*(int32x2_t *)((char *)i + 776), (int32x2_t)0x100000001);
          *((int8x8_t *)i + 97) = v44;
          *(_QWORD *)(*((_QWORD *)i + 92) + 8 * v127) = v116 | (v114 << 32);
        }
LABEL_137:
        ++v110;
      }
      while (v110 != v109);
    }
    if ((_DWORD)v108)
    {
      v132 = 0;
      v133 = 0;
      v134 = v165;
      v135 = *(_QWORD *)(v165 + 472);
      v136 = *((_DWORD *)i + 195);
      v137 = v163;
      do
      {
        v138 = (uint64_t *)(v135 + 24 * v132);
        v140 = *v138;
        v139 = v138[1];
        if (!v136
          || (v141 = ((unsigned __int16)v140 | ((unsigned __int16)v139 << 16))
                   + ~(((unsigned __int16)v140 | ((unsigned __int16)v139 << 16)) << 15),
              v142 = (9 * (v141 ^ (v141 >> 10))) ^ ((9 * (v141 ^ (v141 >> 10))) >> 6),
              v143 = *(unsigned int *)(*((_QWORD *)i + 94)
                                     + 4
                                     * ((*((_DWORD *)i + 191) - 1) & ((v142 + ~(v142 << 11)) ^ ((v142 + ~(v142 << 11)) >> 16)))),
              (_DWORD)v143 == -1))
        {
LABEL_147:
          v148 = *((_QWORD *)i + 36);
          v149 = (unint64_t *)(v135 + 24 * v133);
          *v149 = *(_QWORD *)(v148 + 16 * v140) & 0xFFFFFFFFFFFFFFFCLL;
          v149[1] = *(_QWORD *)(v148 + 16 * v139) & 0xFFFFFFFFFFFFFFFCLL;
          ++v133;
        }
        else
        {
          while (1)
          {
            v144 = (int *)(*((_QWORD *)i + 92) + 8 * v143);
            v146 = *v144;
            v145 = v144[1];
            if (v146 == (_DWORD)v140 && v145 == (_DWORD)v139)
              break;
            v143 = *(unsigned int *)(*((_QWORD *)i + 93) + 4 * v143);
            if ((_DWORD)v143 == -1)
              goto LABEL_147;
          }
        }
        ++v132;
      }
      while (v132 != v108);
    }
    else
    {
      v133 = 0;
      v137 = v163;
      v134 = v165;
    }
    v106 = 0;
    *(_DWORD *)(v134 + 480) = v133;
    v105 = 1;
  }
  while ((v137 & 1) != 0);
  v150 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)i + 49) + 56))(*((_QWORD *)i + 49));
  v151 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)i + 49) + 64))(*((_QWORD *)i + 49));
  if (v150)
  {
    v152 = (unsigned int *)v151;
    do
    {
      v154 = *v152++;
      v153 = v154;
      if (((*(_DWORD *)(*((_QWORD *)i + 26) + (((unint64_t)v154 >> 3) & 0x1FFFFFFC)) >> v154) & 1) == 0)
      {
        v155 = *((_QWORD *)i + 36) + 16 * v153;
        if (*(_DWORD *)(v155 + 8) == -1)
        {
          v158 = *(_QWORD *)v155 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)&v169 = v158;
          v159 = *((unsigned int *)i + 104);
          if ((*((_DWORD *)i + 105) & 0x7FFFFFFFu) <= v159)
          {
            v160 = (uint64_t)i + 408;
            goto LABEL_162;
          }
          *(_QWORD *)(*((_QWORD *)i + 51) + 8 * v159) = v158;
          *((_DWORD *)i + 104) = v159 + 1;
        }
        else
        {
          v156 = *(_QWORD *)v155 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)&v169 = v156;
          v157 = *((unsigned int *)i + 108);
          if ((*((_DWORD *)i + 109) & 0x7FFFFFFFu) <= v157)
          {
            v160 = (uint64_t)i + 424;
LABEL_162:
            physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<void *>>::growAndPushBack(v160, &v169);
            goto LABEL_163;
          }
          *(_QWORD *)(*((_QWORD *)i + 53) + 8 * v157) = v156;
          *((_DWORD *)i + 108) = v157 + 1;
        }
      }
LABEL_163:
      --v150;
    }
    while (v150);
  }
  bzero(*((void **)i + 24), (4 * *((_DWORD *)i + 50)));
  bzero(*((void **)i + 26), (4 * *((_DWORD *)i + 54)));
}

uint64_t physx::Bp::PostBroadPhaseStage2Task::runInternal(physx::Bp::PostBroadPhaseStage2Task *this)
{
  return physx::Bp::AABBManager::postBpStage2(*((physx::Bp::AABBManager **)this + 6), *((physx::PxBaseTask **)this + 3), *((pthread_mutex_t ***)this + 5));
}

uint64_t physx::Bp::processAggregatePairsParallel(uint64_t a1, pthread_mutex_t **a2, pthread_mutex_t **this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  void (**v14)(physx::Bp::ProcessAggPairsParallelTask *__hidden);
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(physx::Bp::ProcessAggPairsParallelTask *__hidden);
  unint64_t v24;
  physx::Cm::FlushPool *v25;
  uint64_t v26;

  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    pthread_mutex_lock(*a2);
  v25 = (physx::Cm::FlushPool *)this;
  result = physx::Cm::FlushPool::allocate(this, 400, 0x10u);
  v13 = result;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  v14 = &off_24ED8C650;
  *(_QWORD *)result = &off_24ED8C650;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 360) = 0;
  *(_QWORD *)(result + 368) = a2;
  *(_QWORD *)(result + 376) = a1;
  *(_QWORD *)(result + 384) = a2;
  *(_QWORD *)(result + 392) = a5;
  v15 = *(unsigned int *)(a6 + 8);
  if (*(_DWORD *)(a1 + 32))
  {
    v16 = *(unsigned int **)(a1 + 24);
    v17 = *v16;
    if ((_DWORD)v17 == -1)
    {
      v18 = 0;
      while (*(_DWORD *)(a1 + 36) - 1 != v18)
      {
        v17 = v16[++v18];
        if ((_DWORD)v17 != -1)
          goto LABEL_11;
      }
    }
    else
    {
      LODWORD(v18) = 0;
LABEL_11:
      v19 = 0;
      do
      {
LABEL_12:
        *(_QWORD *)(v13 + 8 * v19 + 232) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v17);
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v17 + 8);
        v21 = *(unsigned int *)(v13 + 360);
        v19 = v21 + 1;
        *(_DWORD *)(v13 + 360) = v21 + 1;
        *(_QWORD *)(v13 + 8 * v21 + 104) = v20;
        if ((_DWORD)v21 == 15)
        {
          v26 = v13;
          v22 = *(unsigned int *)(a6 + 8);
          v23 = v14;
          if ((*(_DWORD *)(a6 + 12) & 0x7FFFFFFFu) <= v22)
          {
            physx::shdfnd::Array<physx::Bp::ProcessAggPairsBase *,physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>>::growAndPushBack(a6, &v26);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a6 + 8 * v22) = v13;
            *(_DWORD *)(a6 + 8) = v22 + 1;
          }
          *(_DWORD *)(v13 + 32) = 1;
          *(_QWORD *)(v13 + 24) = a4;
          (*(void (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
          result = physx::Cm::FlushPool::allocate((pthread_mutex_t **)v25, 400, 0x10u);
          v13 = result;
          v19 = 0;
          *(_QWORD *)(result + 16) = 0;
          *(_QWORD *)(result + 24) = 0;
          *(_DWORD *)(result + 32) = 0;
          *(_OWORD *)(result + 40) = 0u;
          *(_OWORD *)(result + 56) = 0u;
          *(_OWORD *)(result + 72) = 0u;
          *(_OWORD *)(result + 88) = 0u;
          *(_QWORD *)result = v23;
          *(_QWORD *)(result + 8) = 0;
          v14 = v23;
          *(_DWORD *)(result + 360) = 0;
          *(_QWORD *)(result + 368) = a2;
          *(_QWORD *)(result + 376) = a1;
          *(_QWORD *)(result + 384) = a2;
          *(_QWORD *)(result + 392) = a5;
        }
        v17 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v17);
      }
      while ((_DWORD)v17 != -1);
      while (*(_DWORD *)(a1 + 36) - 1 != (_DWORD)v18)
      {
        LODWORD(v18) = v18 + 1;
        v17 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * v18);
        if ((_DWORD)v17 != -1)
          goto LABEL_12;
      }
    }
  }
  if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
    result = pthread_mutex_unlock(*a2);
  LODWORD(v24) = *(_DWORD *)(a6 + 8);
  if (v15 < v24)
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a6 + 8 * v15) + 40))(*(_QWORD *)(*(_QWORD *)a6 + 8 * v15));
      ++v15;
      v24 = *(unsigned int *)(a6 + 8);
    }
    while (v15 < v24);
  }
  if (*(_DWORD *)(v13 + 360))
  {
    v26 = v13;
    if ((*(_DWORD *)(a6 + 12) & 0x7FFFFFFFu) <= v24)
    {
      physx::shdfnd::Array<physx::Bp::ProcessAggPairsBase *,physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>>::growAndPushBack(a6, &v26);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a6 + 8 * v24) = v13;
      *(_DWORD *)(a6 + 8) = v24 + 1;
    }
    *(_DWORD *)(v13 + 32) = 1;
    *(_QWORD *)(v13 + 24) = a4;
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 16);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  }
  return result;
}

uint64_t physx::Bp::processAggregatePairs(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if (!*(_DWORD *)(result + 32))
  {
LABEL_7:
    v7 = 0;
    goto LABEL_21;
  }
  v3 = result;
  v4 = *(unsigned int **)(result + 24);
  v5 = *v4;
  if ((_DWORD)v5 == -1)
  {
    v6 = 0;
    while (*(_DWORD *)(result + 36) - 1 != v6)
    {
      v5 = v4[++v6];
      if ((_DWORD)v5 != -1)
        goto LABEL_9;
    }
    goto LABEL_7;
  }
  LODWORD(v6) = 0;
  do
  {
LABEL_9:
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * v5 + 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 16))(v8, a2, 0);
    if ((_DWORD)result)
    {
      v9 = (_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * v5);
      v10 = v15;
      if ((HIDWORD(v15) & 0x7FFFFFFFu) <= v15)
      {
        physx::shdfnd::Array<physx::Bp::AggPair,physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>>::growAndPushBack((uint64_t)&v14, v9);
      }
      else
      {
        *(_QWORD *)(v14 + 8 * v15) = *v9;
        LODWORD(v15) = v10 + 1;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    v5 = *(unsigned int *)(*(_QWORD *)(v3 + 16) + 4 * v5);
  }
  while ((_DWORD)v5 != -1);
  while (*(_DWORD *)(v3 + 36) - 1 != (_DWORD)v6)
  {
    LODWORD(v6) = v6 + 1;
    v5 = *(unsigned int *)(*(_QWORD *)(v3 + 24) + 4 * v6);
    if ((_DWORD)v5 != -1)
      goto LABEL_9;
  }
  v7 = v14;
  if ((_DWORD)v15)
  {
    v11 = 0;
    v12 = 8 * v15;
    do
    {
      result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(v3, *(_DWORD *)(v7 + v11), *(_DWORD *)(v7 + v11 + 4));
      v11 += 8;
    }
    while (v12 != v11);
  }
LABEL_21:
  if ((v15 & 0x8000000000000000) == 0 && (v15 & 0x7FFFFFFF00000000) != 0 && v7 != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v7);
  return result;
}

double physx::Bp::AABBManager::getBpCacheData(physx::Bp::AABBManager *this)
{
  double result;
  _OWORD *v2;

  if (!physx::shdfnd::SListImpl::pop(this))
  {
    v2 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 80, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpAABBManager.cpp", 2450);
    result = 0.0;
    *v2 = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
  }
  return result;
}

uint64_t physx::Bp::AABBManager::visualize(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t v10[3];
  char v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v12 = xmmword_2260E5D70;
  v13 = 0;
  v14 = 0;
  result = physx::Cm::RenderOutput::operator<<((uint64_t)a2, (uint64_t)&v12);
  v5 = *(unsigned int *)(a1 + 544);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      v8 = *(unsigned int **)(*(_QWORD *)(a1 + 536) + v6);
      if (v8[4])
      {
        a2[1] = -16711936;
        v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 8) + 24 * *v8);
        v10[0] = *v9;
        v10[1] = v9[1];
        v10[2] = v9[2];
        v11 = 1;
        result = physx::Cm::operator<<(a2, v10);
      }
      v6 += 8;
    }
    while (v7 != v6);
  }
  return result;
}

uint64_t physx::Bp::SapUpdateWorkTask::runInternal(physx::Bp::SapUpdateWorkTask *this)
{
  physx::Bp::BroadPhaseSap *v1;

  v1 = (physx::Bp::BroadPhaseSap *)*((_QWORD *)this + 5);
  physx::Bp::BroadPhaseSap::batchRemove(v1);
  (*(void (**)(_QWORD *))(*((_QWORD *)v1 + 58) + 64))((_QWORD *)v1 + 58);
  (*(void (**)(_QWORD *))(*((_QWORD *)v1 + 67) + 64))((_QWORD *)v1 + 67);
  return (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v1 + 76) + 64))((_QWORD *)v1 + 76);
}

void physx::Bp::SapPostUpdateWorkTask::runInternal(physx::Bp::BroadPhaseSap **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, physx::Bp::DataArray *a6)
{
  physx::Bp::BroadPhaseSap::postUpdate(this[5], a2, a3, a4, a5, a6);
}

void physx::Bp::AggregateBoundsComputationTask::~AggregateBoundsComputationTask(physx::Bp::AggregateBoundsComputationTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  (*(void (**)(uint64_t, physx::Bp::AggregateBoundsComputationTask *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                           + 24)
                                                                               + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

const char *physx::Bp::AggregateBoundsComputationTask::getName(physx::Bp::AggregateBoundsComputationTask *this)
{
  return "AggregateBoundsComputationTask";
}

void physx::Bp::FinalizeUpdateTask::~FinalizeUpdateTask(physx::Bp::FinalizeUpdateTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  (*(void (**)(uint64_t, physx::Bp::FinalizeUpdateTask *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                               + 24)
                                                                   + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

const char *physx::Bp::FinalizeUpdateTask::getName(physx::Bp::FinalizeUpdateTask *this)
{
  return "FinalizeUpdateTask";
}

void physx::Bp::PostBroadPhaseStage2Task::~PostBroadPhaseStage2Task(physx::Bp::PostBroadPhaseStage2Task *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Bp::PostBroadPhaseStage2Task::getName(physx::Bp::PostBroadPhaseStage2Task *this)
{
  return "PostBroadPhaseStage2Task";
}

void physx::Bp::PersistentActorAggregatePair::~PersistentActorAggregatePair(physx::Bp::PersistentActorAggregatePair *this)
{
  *(_QWORD *)this = off_24ED8C528;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
}

{
  *(_QWORD *)this = off_24ED8C528;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
  (*(void (**)(uint64_t, physx::Bp::PersistentActorAggregatePair *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                         + 24)
                                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Bp::PersistentActorAggregatePair::findOverlaps(uint64_t a1, physx::Bp::PairManagerData *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const float *v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t i;
  int32x4_t v30;
  _DWORD v31[14];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(v12 + 84))
  {
    physx::Bp::Aggregate::sortBounds((physx::Bp::Aggregate *)v12);
    v12 = *(_QWORD *)(a1 + 80);
  }
  v14 = *(_DWORD *)(a1 + 72);
  v13 = a1 + 72;
  v15 = a3 + 24 * v14;
  v16 = (const float *)(a4 + 4 * v14);
  v17 = vld1q_dup_f32(v16);
  v18 = (int32x4_t)vsubq_f32(*(float32x4_t *)v15, v17);
  v19 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v15 + 12), v17);
  v20 = vtrn1q_s32(v18, v19);
  v21 = vzip1q_s32(v18, v19);
  v22 = *(_DWORD *)(v12 + 16);
  v23 = *(_QWORD *)(v12 + 8);
  v24 = *(_QWORD *)(v12 + 40);
  v25 = *(_QWORD *)(v12 + 48);
  if (v18.i32[0] < 0)
    v26 = ~v18.i32[0];
  else
    v26 = v18.i32[0] | 0x80000000;
  if (v19.i32[0] < 0)
    v27 = ~v19.i32[0];
  else
    v27 = v19.i32[0] | 0x80000000;
  v31[0] = v26;
  v31[1] = v27;
  v30 = vzip2q_s32(v21, v20);
  for (i = 2; i != 14; i += 2)
    v31[i] = -1;
  physx::Bp::boxPruningKernel<0>((uint64_t)this, a6, v22, v23, v24, v25, 1u, v13, (uint64_t)v31, (uint64_t)&v30, a5);
  return physx::Bp::boxPruningKernel<1>((uint64_t)this, a6, 1u, v13, (uint64_t)v31, (uint64_t)&v30, v22, v23, v24, v25, a5);
}

void physx::Bp::PersistentAggregateAggregatePair::~PersistentAggregateAggregatePair(physx::Bp::PersistentAggregateAggregatePair *this)
{
  *(_QWORD *)this = off_24ED8C528;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
}

{
  *(_QWORD *)this = off_24ED8C528;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
  (*(void (**)(uint64_t, physx::Bp::PersistentAggregateAggregatePair *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                             + 24)
                                                                                 + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Bp::PersistentAggregateAggregatePair::findOverlaps(uint64_t a1, physx::Bp::PairManagerData *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  physx::Bp::Aggregate *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *(physx::Bp::Aggregate **)(a1 + 80);
  if (*((_BYTE *)v9 + 84))
    physx::Bp::Aggregate::sortBounds(v9);
  v10 = *(_QWORD *)(a1 + 88);
  if (*(_BYTE *)(v10 + 84))
  {
    physx::Bp::Aggregate::sortBounds((physx::Bp::Aggregate *)v10);
    v10 = *(_QWORD *)(a1 + 88);
  }
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_DWORD *)(v11 + 16);
  v13 = *(_DWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v11 + 8);
  v15 = *(_QWORD *)(v10 + 8);
  v16 = *(_QWORD *)(v11 + 40);
  v17 = *(_QWORD *)(v11 + 48);
  v19 = *(_QWORD *)(v10 + 40);
  v18 = *(_QWORD *)(v10 + 48);
  physx::Bp::boxPruningKernel<0>((uint64_t)this, a6, v12, v14, v16, v17, v13, v15, v19, v18, a5);
  return physx::Bp::boxPruningKernel<1>((uint64_t)this, a6, v13, v15, v19, v18, v12, v14, v16, v17, a5);
}

void physx::Bp::PersistentSelfCollisionPairs::~PersistentSelfCollisionPairs(physx::Bp::PersistentSelfCollisionPairs *this)
{
  *(_QWORD *)this = off_24ED8C528;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
}

{
  *(_QWORD *)this = off_24ED8C528;
  physx::Bp::PairManagerData::purge((uint64_t)this + 16);
  (*(void (**)(uint64_t, physx::Bp::PersistentSelfCollisionPairs *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                         + 24)
                                                                             + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Bp::PersistentPairs::update()
{
  return 0;
}

void physx::Bp::PersistentSelfCollisionPairs::findOverlaps(uint64_t a1, physx::Bp::PairManagerData *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  int v38;
  int v39;
  unsigned int v40;
  physx::Bp::PairManagerData *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  physx::Bp::PairManagerData *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v7 = *(_QWORD *)(a1 + 72);
  v47 = a5;
  v48 = a6;
  if (*(_BYTE *)(v7 + 84))
  {
    physx::Bp::Aggregate::sortBounds((physx::Bp::Aggregate *)v7);
    a5 = v47;
    a6 = v48;
    v7 = *(_QWORD *)(a1 + 72);
  }
  v9 = *(unsigned int *)(v7 + 16);
  if ((_DWORD)v9)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    v12 = *(_QWORD *)(v7 + 40);
    v13 = *(_QWORD *)(v7 + 48);
    v45 = v7;
    v46 = this;
    do
    {
      v14 = *(_DWORD *)(v12 + 8 * v10 + 4);
      do
      {
        v15 = 8 * v11;
        v11 = (v11 + 1);
      }
      while (*(_DWORD *)(v12 + v15) < *(_DWORD *)(v12 + 8 * v10));
      if (*(_DWORD *)(v12 + 8 * v11) <= v14)
      {
        v16 = (uint64_t *)(v13 + 16 * v10);
        v17 = v11;
        v18 = v11;
        v49 = v10;
        do
        {
          v19 = (uint64_t *)(v13 + 16 * v17);
          v20.i64[0] = v16[1];
          v21.i64[0] = *v19;
          v20.i64[1] = v19[1];
          v21.i64[1] = *v16;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v21, v20))) & 1) == 0)
          {
            v22 = *(_QWORD *)(v7 + 8);
            v23 = *(unsigned int *)(v22 + 4 * v10);
            v24 = *(unsigned int *)(v22 + 4 * v17);
            v25 = *(_DWORD *)(a5 + 4 * v23);
            v26 = *(_DWORD *)(a5 + 4 * v24);
            if (v25 != v26)
            {
              if (*(_BYTE *)(a6 + (v26 & 3 | (4 * (v25 & 3)))))
              {
                if (v23 <= v24)
                  v27 = v24;
                else
                  v27 = v23;
                if (v23 >= v24)
                  v28 = v24;
                else
                  v28 = v23;
                v29 = ((unsigned __int16)v28 | ((unsigned __int16)v27 << 16))
                    + ~(((unsigned __int16)v28 | ((unsigned __int16)v27 << 16)) << 15);
                v30 = (9 * (v29 ^ (v29 >> 10))) ^ ((9 * (v29 ^ (v29 >> 10))) >> 6);
                v31 = (v30 + ~(v30 << 11)) ^ ((v30 + ~(v30 << 11)) >> 16);
                v32 = *((_DWORD *)this + 1) & v31;
                v33 = *((_QWORD *)this + 2);
                if (!v33 || (v34 = *(unsigned int *)(v33 + 4 * v32), (_DWORD)v34 == -1))
                {
LABEL_27:
                  v40 = *((_DWORD *)this + 2);
                  if (v40 >= *(_DWORD *)this)
                  {
                    v41 = this;
                    v42 = v9;
                    v32 = physx::Bp::PairManagerData::growPairs(v41, v31);
                    a6 = v48;
                    v10 = v49;
                    v9 = v42;
                    v7 = v45;
                    this = v46;
                    a5 = v47;
                    v40 = *((_DWORD *)v46 + 2);
                    v33 = *((_QWORD *)v46 + 2);
                  }
                  *((_DWORD *)this + 2) = v40 + 1;
                  v43 = *((_QWORD *)this + 3);
                  v44 = (unsigned int *)(*((_QWORD *)this + 4) + 8 * v40);
                  *v44 = v28 | 0x80000000;
                  v44[1] = v27;
                  *(_DWORD *)(v43 + 4 * v40) = *(_DWORD *)(v33 + 4 * v32);
                  *(_DWORD *)(v33 + 4 * v32) = v40;
                }
                else
                {
                  v35 = *((_QWORD *)this + 4);
                  while (1)
                  {
                    if ((*(_DWORD *)(v35 + 8 * v34) & 0x7FFFFFFF) == v28)
                    {
                      v36 = v35 + 8 * v34;
                      v39 = *(_DWORD *)(v36 + 4);
                      v37 = (unsigned int *)(v36 + 4);
                      v38 = v39;
                      if ((v39 & 0x7FFFFFFF) == v27)
                        break;
                    }
                    v34 = *(unsigned int *)(*((_QWORD *)this + 3) + 4 * v34);
                    if ((_DWORD)v34 == -1)
                      goto LABEL_27;
                  }
                  *v37 = v38 | 0x80000000;
                }
              }
            }
          }
          v17 = ++v18;
        }
        while (*(_DWORD *)(v12 + 8 * v17) <= v14);
      }
      ++v10;
    }
    while (v10 < v9 && v11 < v9);
  }
}

void physx::Bp::SapUpdateWorkTask::~SapUpdateWorkTask(physx::Bp::SapUpdateWorkTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Bp::SapUpdateWorkTask::getName(physx::Bp::SapUpdateWorkTask *this)
{
  return "BpSAP.updateWork";
}

void physx::Bp::SapPostUpdateWorkTask::~SapPostUpdateWorkTask(physx::Bp::SapPostUpdateWorkTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Bp::SapPostUpdateWorkTask::getName(physx::Bp::SapPostUpdateWorkTask *this)
{
  return "BpSAP.postUpdateWork";
}

_QWORD *physx::Cm::DelegateTask<physx::Bp::AABBManager,&physx::Bp::AABBManager::postBpStage3>::~DelegateTask(_QWORD *result)
{
  *result = off_24ED8BB00;
  result[2] = 0;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::ReflectionAllocator<physx::Bp::FilterGroup::Enum>>::growAndPushBack(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int *v12;
  _DWORD *v13;
  int v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::FilterGroup::Enum>::getName() [T = physx::Bp"
           "::FilterGroup::Enum]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 4 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_DWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  v11 = *(int **)v3;
  if ((_DWORD)v9)
  {
    v12 = *(int **)v3;
    v13 = v8;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v11)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void physx::Bp::SortAggregateBoundsParallel::~SortAggregateBoundsParallel(physx::Bp::SortAggregateBoundsParallel *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Bp::SortAggregateBoundsParallel::getName(physx::Bp::SortAggregateBoundsParallel *this)
{
  return "SortAggregateBoundsParallel";
}

void physx::Bp::SortAggregateBoundsParallel::runInternal(physx::Bp::SortAggregateBoundsParallel *this)
{
  unint64_t v1;
  unint64_t i;
  physx::Bp::Aggregate *v4;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1)
  {
    for (i = 0; i < v1; ++i)
    {
      v4 = *(physx::Bp::Aggregate **)(*((_QWORD *)this + 5) + 8 * i);
      if (*((_BYTE *)v4 + 84))
      {
        physx::Bp::Aggregate::sortBounds(v4);
        v1 = *((unsigned int *)this + 12);
      }
    }
  }
}

void physx::Bp::ProcessSelfCollisionPairsParallel::~ProcessSelfCollisionPairsParallel(physx::Bp::ProcessSelfCollisionPairsParallel *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

const char *physx::Bp::ProcessSelfCollisionPairsParallel::getName(physx::Bp::ProcessSelfCollisionPairsParallel *this)
{
  return "ProcessSelfCollisionPairsParallel";
}

uint64_t physx::Bp::ProcessSelfCollisionPairsParallel::runInternal(physx::Bp::ProcessSelfCollisionPairsParallel *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  char v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;

  physx::Bp::AABBManager::getBpCacheData(*(physx::Bp::AABBManager **)(*((_QWORD *)this + 15) + 792));
  v3 = v2;
  v4 = 0;
  v5 = 1;
  do
  {
    v6 = v5;
    v7 = &v2[2 * v4];
    v8 = (char *)this + 16 * v4;
    *((_QWORD *)v8 + 5) = v7 + 1;
    *((_DWORD *)v8 + 12) = *((_DWORD *)v7 + 4);
    *((_QWORD *)v8 + 9) = v7 + 5;
    *((_DWORD *)v8 + 20) = *((_DWORD *)v7 + 12);
    v4 = 1;
    v5 = 0;
  }
  while ((v6 & 1) != 0);
  v9 = *((unsigned int *)this + 28);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; ++i)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8 * i) + 24);
      if (v11)
      {
        physx::Bp::AABBManager::updatePairs(*((unsigned int **)this + 15), v11, (uint64_t)v3);
        v9 = *((unsigned int *)this + 28);
      }
    }
  }
  physx::Bp::ProcessAggPairsBase::updateCounters((uint64_t)this);
  v12 = *(_QWORD *)(*((_QWORD *)this + 15) + 792);
  pthread_mutex_lock((pthread_mutex_t *)(v12 + 8));
  *v3 = *(_QWORD *)v12;
  *(_QWORD *)v12 = v3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v12 + 8));
}

uint64_t physx::Bp::ProcessAggPairsBase::updateCounters(uint64_t this)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;

  v1 = 0;
  v2 = 1;
  do
  {
    v3 = v2;
    v4 = this + 16 * v1;
    *(_DWORD *)(v4 + 52) = *(_DWORD *)(*(_QWORD *)(v4 + 40) + 8) - *(_DWORD *)(v4 + 48);
    *(_DWORD *)(v4 + 84) = *(_DWORD *)(*(_QWORD *)(v4 + 72) + 8) - *(_DWORD *)(v4 + 80);
    v1 = 1;
    v2 = 0;
  }
  while ((v3 & 1) != 0);
  return this;
}

void physx::Bp::ProcessAggPairsParallelTask::~ProcessAggPairsParallelTask(physx::Bp::ProcessAggPairsParallelTask *this)
{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
}

{
  *(_QWORD *)this = off_24ED8BB00;
  *((_QWORD *)this + 2) = 0;
  JUMPOUT(0x2276933B8);
}

uint64_t physx::Bp::ProcessAggPairsParallelTask::getName(physx::Bp::ProcessAggPairsParallelTask *this)
{
  return *((_QWORD *)this + 49);
}

uint64_t physx::Bp::ProcessAggPairsParallelTask::runInternal(physx::Bp::ProcessAggPairsParallelTask *this)
{
  _QWORD *v2;
  __n128 v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  pthread_mutex_t **v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[136];
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v3.n128_f64[0] = physx::Bp::AABBManager::getBpCacheData(*(physx::Bp::AABBManager **)(*((_QWORD *)this + 46) + 792));
  v4 = v2;
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = &v2[2 * v5];
    v9 = (char *)this + 16 * v5;
    *((_QWORD *)v9 + 5) = v8 + 1;
    *((_DWORD *)v9 + 12) = *((_DWORD *)v8 + 4);
    *((_QWORD *)v9 + 9) = v8 + 5;
    *((_DWORD *)v9 + 20) = *((_DWORD *)v8 + 12);
    v5 = 1;
    v6 = 0;
  }
  while ((v7 & 1) != 0);
  v18[128] = 1;
  v19 = v18;
  v20 = 0x1000000000;
  if (*((_DWORD *)this + 90))
  {
    v10 = 0;
    v11 = (_QWORD *)((char *)this + 232);
    do
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD, _QWORD *, __n128))(*(_QWORD *)*(v11 - 16) + 16))(*(v11 - 16), *((_QWORD *)this + 46), v4, v3))
      {
        if ((HIDWORD(v20) & 0x7FFFFFFFu) <= v20)
        {
          physx::shdfnd::Array<physx::Bp::AggPair,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>>>::growAndPushBack((uint64_t)v18, v11);
        }
        else
        {
          *(_QWORD *)&v19[8 * v20] = *v11;
          LODWORD(v20) = v20 + 1;
        }
        v12 = *(v11 - 16);
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      ++v10;
      ++v11;
    }
    while (v10 < *((unsigned int *)this + 90));
  }
  physx::Bp::ProcessAggPairsBase::updateCounters((uint64_t)this);
  v13 = *(_QWORD *)(*((_QWORD *)this + 46) + 792);
  pthread_mutex_lock((pthread_mutex_t *)(v13 + 8));
  *v4 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v4;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v13 + 8));
  if ((_DWORD)v20)
  {
    v15 = (pthread_mutex_t **)*((_QWORD *)this + 48);
    if ((physx::shdfnd::g_alwaysUseLocking & 1) == 0 && !physx::shdfnd::g_isLockingEnabled
      || (result = pthread_mutex_lock(*v15), (_DWORD)v20))
    {
      v16 = 0;
      v17 = 0;
      do
      {
        result = physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(*((_QWORD *)this + 47), *(_DWORD *)&v19[v16], *(_DWORD *)&v19[v16 + 4]);
        ++v17;
        v16 += 8;
      }
      while (v17 < v20);
    }
    if ((physx::shdfnd::g_alwaysUseLocking & 1) != 0 || physx::shdfnd::g_isLockingEnabled)
      result = pthread_mutex_unlock(*v15);
  }
  if ((v20 & 0x8000000000000000) == 0 && (v20 & 0x7FFFFFFF00000000) != 0 && v19 != v18)
  {
    if (v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::AggPair,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 148);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x80 && *(_BYTE *)(result + 128) == 0)
  {
    *(_BYTE *)(result + 128) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>::getName() [T = physx::Bp::AggPair]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 144);
  if ((_DWORD)v10)
  {
    v11 = (unint64_t)&v9[v10];
    v12 = *(uint64_t **)(v3 + 136);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while ((unint64_t)v13 < v11);
    v15 = *(unsigned int *)(v3 + 144);
  }
  else
  {
    v15 = 0;
  }
  v9[v15] = *a2;
  if ((*(_DWORD *)(v3 + 148) & 0x80000000) == 0)
  {
    v16 = *(_QWORD *)(v3 + 136);
    if (v16 == v3)
    {
      *(_BYTE *)(v3 + 128) = 0;
    }
    else if (v16)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *(_QWORD *)(v3 + 136) = v9;
  ++*(_DWORD *)(v3 + 144);
  *(_DWORD *)(v3 + 148) = v5;
  return result;
}

uint64_t physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::erase(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_DWORD *)(result + 52))
  {
    v3 = 9
       * ((((unsigned __int16)a2 | ((unsigned __int16)a3 << 16))
         + ~(((unsigned __int16)a2 | ((unsigned __int16)a3 << 16)) << 15)) ^ ((((unsigned __int16)a2 | ((unsigned __int16)a3 << 16))
                                                                                           + ~(((unsigned __int16)a2 | ((unsigned __int16)a3 << 16)) << 15)) >> 10));
    v4 = (_DWORD *)(*(_QWORD *)(result + 24)
                  + 4
                  * ((*(_DWORD *)(result + 36) - 1) & (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) ^ (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) >> 16))));
    v5 = *v4;
    if ((_DWORD)v5 != -1)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(result + 16);
      v8 = v6 + 16 * v5;
      if (*(_DWORD *)v8 == a2 && *(_DWORD *)(v8 + 4) == a3)
      {
LABEL_14:
        *v4 = *(_DWORD *)(v7 + 4 * v5);
        v12 = *(_DWORD *)(result + 52) - 1;
        ++*(_DWORD *)(result + 48);
        *(_DWORD *)(result + 52) = v12;
        if ((_DWORD)v5 != v12)
        {
          v13 = (uint64_t *)(v6 + 16 * v12);
          v15 = *v13;
          v14 = v13[1];
          *(_QWORD *)v8 = v15;
          v16 = v6 + 16 * v5;
          v18 = *(_QWORD *)(result + 8);
          v17 = *(_QWORD *)(result + 16);
          LODWORD(v15) = *(_DWORD *)(v17 + 4 * *(unsigned int *)(result + 52));
          *(_QWORD *)(v16 + 8) = v14;
          *(_DWORD *)(v17 + 4 * v5) = v15;
          LODWORD(v16) = *(unsigned __int16 *)(v18 + 16 * v5) | (*(_DWORD *)(v18 + 16 * v5 + 4) << 16);
          LODWORD(v16) = 9 * ((v16 + ~((_DWORD)v16 << 15)) ^ ((v16 + ~((_DWORD)v16 << 15)) >> 10));
          LODWORD(v16) = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
          v19 = (_DWORD *)(*(_QWORD *)(result + 24)
                         + 4 * ((v16 ^ WORD1(v16)) & (*(_DWORD *)(result + 36) - 1)));
          v20 = *(unsigned int *)(result + 52);
          v21 = *v19;
          if (v21 != v20)
          {
            do
            {
              v22 = v21;
              v21 = *(unsigned int *)(v17 + 4 * v21);
            }
            while (v21 != v20);
            v19 = (_DWORD *)(v17 + 4 * v22);
          }
          *v19 = v5;
        }
        --*(_DWORD *)(result + 44);
      }
      else
      {
        while (1)
        {
          v10 = v5;
          v5 = *(unsigned int *)(v7 + 4 * v5);
          if ((_DWORD)v5 == -1)
            break;
          v8 = v6 + 16 * v5;
          if (*(_DWORD *)v8 == a2 && *(_DWORD *)(v8 + 4) == a3)
          {
            v4 = (_DWORD *)(v7 + 4 * v10);
            goto LABEL_14;
          }
        }
      }
    }
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::AggPair,physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AggPair>::getName() [T = physx::Bp::AggPair]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v9)
  {
    v10 = (unint64_t)&v8[v9];
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v10);
    v14 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v8[v14] = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>::getName() [T = physx::Bp::AABBOverlap]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 24 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if (v7)
  {
    v9 = v6 + 24 * v7;
    v10 = v6;
    do
    {
      v11 = *v8;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      v10 += 24;
      v8 = (__int128 *)((char *)v8 + 24);
    }
    while (v10 < v9);
    v8 = *(__int128 **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::Bp::boxPruningKernel<0>(uint64_t this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  unint64_t v53;

  if (a3 && a7)
  {
    v12 = a2;
    v13 = this;
    v14 = 0;
    v15 = 0;
    v16 = a11;
    v50 = a3;
    v49 = a8;
    v47 = this;
    do
    {
      v17 = (unsigned int *)(a5 + 8 * v14);
      v18 = *v17;
      v19 = v17[1];
      do
      {
        LODWORD(v20) = v15;
        v21 = *(_DWORD *)(a9 + 8 * v15++);
      }
      while (v21 < v18);
      --v15;
      if (v21 <= v19)
      {
        v20 = v20;
        v22 = (uint64_t *)(a6 + 16 * v14);
        v23 = v15;
        v53 = v14;
        do
        {
          v24 = (uint64_t *)(a10 + 16 * v20);
          v25.i64[0] = v22[1];
          v26.i64[0] = *v24;
          v25.i64[1] = v24[1];
          v26.i64[1] = *v22;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v26, v25))) & 1) == 0)
          {
            v27 = *(unsigned int *)(a4 + 4 * v14);
            v28 = *(unsigned int *)(a8 + 4 * v20);
            v29 = *(_DWORD *)(v16 + 4 * v27);
            v30 = *(_DWORD *)(v16 + 4 * v28);
            if (v29 != v30)
            {
              if (*(_BYTE *)(v12 + (v30 & 3 | (4 * (v29 & 3)))))
              {
                if (v27 <= v28)
                  v31 = v28;
                else
                  v31 = *(_DWORD *)(a4 + 4 * v14);
                if (v27 >= v28)
                  v32 = v28;
                else
                  v32 = *(_DWORD *)(a4 + 4 * v14);
                v33 = ((unsigned __int16)v32 | ((unsigned __int16)v31 << 16))
                    + ~(((unsigned __int16)v32 | ((unsigned __int16)v31 << 16)) << 15);
                v34 = (9 * (v33 ^ (v33 >> 10))) ^ ((9 * (v33 ^ (v33 >> 10))) >> 6);
                v35 = (v34 + ~(v34 << 11)) ^ ((v34 + ~(v34 << 11)) >> 16);
                this = *(_DWORD *)(v13 + 4) & v35;
                v36 = *(_QWORD *)(v13 + 16);
                if (!v36 || (v37 = *(unsigned int *)(v36 + 4 * this), (_DWORD)v37 == -1))
                {
LABEL_26:
                  v43 = *(_DWORD *)(v13 + 8);
                  if (v43 >= *(_DWORD *)v13)
                  {
                    this = physx::Bp::PairManagerData::growPairs((physx::Bp::PairManagerData *)v13, v35);
                    v16 = a11;
                    v13 = v47;
                    v14 = v53;
                    v12 = a2;
                    a8 = v49;
                    v43 = *(_DWORD *)(v47 + 8);
                    v36 = *(_QWORD *)(v47 + 16);
                  }
                  *(_DWORD *)(v13 + 8) = v43 + 1;
                  v44 = *(_QWORD *)(v13 + 24);
                  v45 = (unsigned int *)(*(_QWORD *)(v13 + 32) + 8 * v43);
                  *v45 = v32 | 0x80000000;
                  v45[1] = v31;
                  *(_DWORD *)(v44 + 4 * v43) = *(_DWORD *)(v36 + 4 * this);
                  *(_DWORD *)(v36 + 4 * this) = v43;
                }
                else
                {
                  v38 = *(_QWORD *)(v13 + 32);
                  while (1)
                  {
                    if ((*(_DWORD *)(v38 + 8 * v37) & 0x7FFFFFFF) == v32)
                    {
                      v39 = v38 + 8 * v37;
                      v42 = *(_DWORD *)(v39 + 4);
                      v40 = (unsigned int *)(v39 + 4);
                      v41 = v42;
                      if ((v42 & 0x7FFFFFFF) == v31)
                        break;
                    }
                    v37 = *(unsigned int *)(*(_QWORD *)(v13 + 24) + 4 * v37);
                    if ((_DWORD)v37 == -1)
                      goto LABEL_26;
                  }
                  *v40 = v41 | 0x80000000;
                }
              }
            }
          }
          v20 = ++v23;
        }
        while (*(_DWORD *)(a9 + 8 * v20) <= v19);
      }
      ++v14;
    }
    while (v14 < v50 && v15 < a7);
  }
  return this;
}

uint64_t physx::Bp::boxPruningKernel<1>(uint64_t this, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  unint64_t v53;

  if (a3 && a7)
  {
    v12 = a2;
    v13 = this;
    v14 = 0;
    v15 = 0;
    v16 = a11;
    v50 = a3;
    v49 = a8;
    v47 = this;
    do
    {
      v17 = (unsigned int *)(a5 + 8 * v14);
      v18 = *v17;
      v19 = v17[1];
      do
      {
        LODWORD(v20) = v15;
        v21 = *(_DWORD *)(a9 + 8 * v15++);
      }
      while (v21 <= v18);
      --v15;
      if (v21 <= v19)
      {
        v20 = v20;
        v22 = (uint64_t *)(a6 + 16 * v14);
        v23 = v15;
        v53 = v14;
        do
        {
          v24 = (uint64_t *)(a10 + 16 * v20);
          v25.i64[0] = v22[1];
          v26.i64[0] = *v24;
          v25.i64[1] = v24[1];
          v26.i64[1] = *v22;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v26, v25))) & 1) == 0)
          {
            v27 = *(unsigned int *)(a4 + 4 * v14);
            v28 = *(unsigned int *)(a8 + 4 * v20);
            v29 = *(_DWORD *)(v16 + 4 * v27);
            v30 = *(_DWORD *)(v16 + 4 * v28);
            if (v29 != v30)
            {
              if (*(_BYTE *)(v12 + (v30 & 3 | (4 * (v29 & 3)))))
              {
                if (v27 <= v28)
                  v31 = v28;
                else
                  v31 = *(_DWORD *)(a4 + 4 * v14);
                if (v27 >= v28)
                  v32 = v28;
                else
                  v32 = *(_DWORD *)(a4 + 4 * v14);
                v33 = ((unsigned __int16)v32 | ((unsigned __int16)v31 << 16))
                    + ~(((unsigned __int16)v32 | ((unsigned __int16)v31 << 16)) << 15);
                v34 = (9 * (v33 ^ (v33 >> 10))) ^ ((9 * (v33 ^ (v33 >> 10))) >> 6);
                v35 = (v34 + ~(v34 << 11)) ^ ((v34 + ~(v34 << 11)) >> 16);
                this = *(_DWORD *)(v13 + 4) & v35;
                v36 = *(_QWORD *)(v13 + 16);
                if (!v36 || (v37 = *(unsigned int *)(v36 + 4 * this), (_DWORD)v37 == -1))
                {
LABEL_26:
                  v43 = *(_DWORD *)(v13 + 8);
                  if (v43 >= *(_DWORD *)v13)
                  {
                    this = physx::Bp::PairManagerData::growPairs((physx::Bp::PairManagerData *)v13, v35);
                    v16 = a11;
                    v13 = v47;
                    v14 = v53;
                    v12 = a2;
                    a8 = v49;
                    v43 = *(_DWORD *)(v47 + 8);
                    v36 = *(_QWORD *)(v47 + 16);
                  }
                  *(_DWORD *)(v13 + 8) = v43 + 1;
                  v44 = *(_QWORD *)(v13 + 24);
                  v45 = (unsigned int *)(*(_QWORD *)(v13 + 32) + 8 * v43);
                  *v45 = v32 | 0x80000000;
                  v45[1] = v31;
                  *(_DWORD *)(v44 + 4 * v43) = *(_DWORD *)(v36 + 4 * this);
                  *(_DWORD *)(v36 + 4 * this) = v43;
                }
                else
                {
                  v38 = *(_QWORD *)(v13 + 32);
                  while (1)
                  {
                    if ((*(_DWORD *)(v38 + 8 * v37) & 0x7FFFFFFF) == v32)
                    {
                      v39 = v38 + 8 * v37;
                      v42 = *(_DWORD *)(v39 + 4);
                      v40 = (unsigned int *)(v39 + 4);
                      v41 = v42;
                      if ((v42 & 0x7FFFFFFF) == v31)
                        break;
                    }
                    v37 = *(unsigned int *)(*(_QWORD *)(v13 + 24) + 4 * v37);
                    if ((_DWORD)v37 == -1)
                      goto LABEL_26;
                  }
                  *v40 = v41 | 0x80000000;
                }
              }
            }
          }
          v20 = ++v23;
        }
        while (*(_DWORD *)(a9 + 8 * v20) <= v19);
      }
      ++v14;
    }
    while (v14 < v50 && v15 < a7);
  }
  return this;
}

uint64_t physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>::getName() [T = physx::Bp::Aggregate *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

_DWORD *physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::copy<physx::shdfnd::ReflectionAllocator<unsigned int>>(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  _DWORD *v9;
  int *v10;
  int v11;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    result[2] = v3;
    result[3] = v3;
    v5 = 4 * v3;
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<unsigned int>::getName() [T = unsigned int]";
    else
      v7 = "<allocation names disabled>";
    result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    *(_QWORD *)v2 = result;
    v8 = v2[2];
    if ((_DWORD)v8)
    {
      v9 = &result[v8];
      v10 = *(int **)a2;
      do
      {
        v11 = *v10++;
        *result++ = v11;
      }
      while (result < v9);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
  }
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::FilterGroup::Enum,physx::shdfnd::VirtualAllocator>::recreate(_QWORD *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  _DWORD *v10;
  int v11;

  result = (*(uint64_t (**)(_QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 4 * a2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = *((unsigned int *)a1 + 4);
  v7 = a1[1];
  if ((_DWORD)v6)
  {
    v8 = result + 4 * v6;
    v9 = (int *)a1[1];
    v10 = (_DWORD *)result;
    do
    {
      v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
  }
  if ((*((_DWORD *)a1 + 5) & 0x80000000) == 0 && v7)
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  a1[1] = v5;
  *((_DWORD *)a1 + 5) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::VolumeData,physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;

  v4 = 16 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::VolumeData>::getName() [T = physx::Bp::VolumeData]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 16 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10++;
      *v12++ = v13;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<float,physx::shdfnd::VirtualAllocator>::recreate(_QWORD *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  _DWORD *v10;
  int v11;

  result = (*(uint64_t (**)(_QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, 4 * a2, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v5 = result;
  v6 = *((unsigned int *)a1 + 4);
  v7 = a1[1];
  if ((_DWORD)v6)
  {
    v8 = result + 4 * v6;
    v9 = (int *)a1[1];
    v10 = (_DWORD *)result;
    do
    {
      v11 = *v9++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v8);
  }
  if ((*((_DWORD *)a1 + 5) & 0x80000000) == 0 && v7)
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  a1[1] = v5;
  *((_DWORD *)a1 + 5) = a2;
  return result;
}

uint64_t physx::Cm::DelegateTask<physx::Bp::AABBManager,&physx::Bp::AABBManager::postBpStage3>::~DelegateTask(_QWORD *a1)
{
  *a1 = off_24ED8BB00;
  a1[2] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, a1);
}

uint64_t physx::Cm::DelegateTask<physx::Bp::AABBManager,&physx::Bp::AABBManager::postBpStage3>::getName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void physx::Cm::DelegateTask<physx::Bp::AABBManager,&physx::Bp::AABBManager::postBpStage3>::runInternal(uint64_t a1, physx::PxBaseTask *a2)
{
  physx::Bp::AABBManager::postBpStage3(*(physx::Bp::AABBManager **)(a1 + 40), a2);
}

void *physx::shdfnd::internal::HashBase<physx::shdfnd::Pair<physx::Bp::AggPair const,physx::Bp::PersistentPairs *>,physx::Bp::AggPair,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::internal::HashMapBase<physx::Bp::AggPair,physx::Bp::PersistentPairs *,physx::shdfnd::Hash<physx::Bp::AggPair>,physx::shdfnd::NonTrackingAllocator>::GetKey,physx::shdfnd::NonTrackingAllocator,true>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *result;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 32);
  v9 = (float)(*(float *)(a1 + 40) * (float)v3);
  v10 = ((-4 * (v3 + v9)) & 0xC) + 4 * (v3 + v9);
  if ((_DWORD)v10 + 16 * v9)
    v11 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v10 + 16 * v9, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v11 = 0;
  v12 = &v11[4 * v3];
  v13 = &v11[v10];
  result = memset(v11, 255, 4 * v3);
  if (*(_DWORD *)(a1 + 52))
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = (unsigned __int16 *)(*(_QWORD *)(a1 + 8) + v15);
      v18 = *v17 | (*((_DWORD *)v17 + 1) << 16);
      v19 = 9 * ((v18 + ~(v18 << 15)) ^ ((v18 + ~(v18 << 15)) >> 10));
      v20 = (v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11);
      v21 = (v20 ^ HIWORD(v20)) & (v3 - 1);
      *(_DWORD *)&v12[4 * v16] = *(_DWORD *)&v11[4 * v21];
      *(_DWORD *)&v11[4 * v21] = v16;
      v22 = &v13[v15];
      *(_QWORD *)v22 = *(_QWORD *)v17;
      *((_QWORD *)v22 + 1) = *((_QWORD *)v17 + 1);
      ++v16;
      v15 += 16;
    }
    while (v16 < *(unsigned int *)(a1 + 52));
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v3;
  if (*(_DWORD *)(a1 + 44) == -1)
    *(_DWORD *)(a1 + 44) = v8;
  return result;
}

void *physx::shdfnd::internal::HashBase<physx::Bp::Pair,physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::internal::HashSetBase<physx::Bp::Pair,physx::shdfnd::Hash<physx::Bp::Pair>,physx::shdfnd::NonTrackingAllocator,false>::GetKey,physx::shdfnd::NonTrackingAllocator,false>::reserveInternal(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *result;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;

  v3 = a2;
  a3.i32[0] = a2;
  v5 = (uint8x8_t)vcnt_s8(a3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.i32[0] != 1)
  {
    v6 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    v3 = (v7 | HIWORD(v7)) + 1;
  }
  v8 = *(_DWORD *)(a1 + 44);
  v9 = *(unsigned int *)(a1 + 32);
  v10 = (float)(*(float *)(a1 + 40) * (float)v3);
  v11 = 4 * v3;
  v12 = ((-4 * (v3 + v10)) & 0xC) + 4 * (v3 + v10);
  if ((_DWORD)v12 + 8 * v10)
    v13 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                  + 16))(physx::shdfnd::Foundation::mInstance + 24, v12 + 8 * v10, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsHashInternals.h", 372);
  else
    v13 = 0;
  v14 = &v13[v11];
  v15 = &v13[v12];
  result = memset(v13, 255, 4 * v3);
  if (v8 == -1)
  {
    if (*(_DWORD *)(a1 + 52))
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = (unsigned __int16 *)(*(_QWORD *)(a1 + 8) + v25);
        v28 = *v27 | (*((_DWORD *)v27 + 1) << 16);
        v29 = 9 * ((v28 + ~(v28 << 15)) ^ ((v28 + ~(v28 << 15)) >> 10));
        v30 = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
        v31 = (v30 ^ HIWORD(v30)) & (v3 - 1);
        *(_DWORD *)&v14[4 * v26] = *(_DWORD *)&v13[4 * v31];
        *(_DWORD *)&v13[4 * v31] = v26;
        *(_QWORD *)&v15[8 * v26++] = *(_QWORD *)v27;
        v25 += 8;
      }
      while (v26 < *(unsigned int *)(a1 + 52));
    }
  }
  else
  {
    result = memcpy(&v13[v11], *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 32)));
    v17 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v17)
    {
      for (i = 0; i < v17; ++i)
      {
        v19 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 4 * i);
        if ((_DWORD)v19 != -1)
        {
          do
          {
            v20 = (unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 8 * v19);
            v21 = *v20 | (*((_DWORD *)v20 + 1) << 16);
            v22 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
            v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
            v24 = (v23 ^ HIWORD(v23)) & (v3 - 1);
            *(_DWORD *)&v14[4 * v19] = *(_DWORD *)&v13[4 * v24];
            *(_DWORD *)&v13[4 * v24] = v19;
            *(_QWORD *)&v15[8 * v19] = *(_QWORD *)v20;
            v19 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v19);
          }
          while ((_DWORD)v19 != -1);
          v17 = *(unsigned int *)(a1 + 36);
        }
      }
    }
  }
  if (*(_QWORD *)a1)
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v15;
  v32 = v10 - 1;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v3;
  if (v32 > v9)
  {
    v33 = v9;
    do
    {
      *(_DWORD *)&v14[4 * v33] = v33 + 1;
      ++v33;
    }
    while (v32 != v33);
  }
  *(_DWORD *)&v14[4 * v32] = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v9;
  return result;
}

_DWORD *physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::growAndPushBack(_DWORD *result, _DWORD *a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;

  v3 = result;
  v4 = result[5];
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    result = (_DWORD *)(*(uint64_t (**)(void))(**(_QWORD **)result + 16))();
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *((unsigned int *)v3 + 4);
  v8 = v3[1];
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = (int *)v3[1];
    v11 = v6;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
    v13 = *((unsigned int *)v3 + 4);
  }
  else
  {
    v13 = 0;
  }
  v6[v13] = *a2;
  if ((*((_DWORD *)v3 + 5) & 0x80000000) == 0 && v8)
    result = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  v3[1] = v6;
  ++*((_DWORD *)v3 + 4);
  *((_DWORD *)v3 + 5) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::resize(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t physx::shdfnd::Array<unsigned int,physx::shdfnd::VirtualAllocator>::recreate(uint64_t result, int a2)
{
  _QWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  int v10;

  v3 = (_QWORD *)result;
  if (a2)
  {
    result = (*(uint64_t (**)(void))(**(_QWORD **)result + 16))();
    v4 = (_DWORD *)result;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((unsigned int *)v3 + 4);
  v6 = v3[1];
  if ((_DWORD)v5)
  {
    v7 = (unint64_t)&v4[v5];
    v8 = (int *)v3[1];
    v9 = v4;
    do
    {
      v10 = *v8++;
      *v9++ = v10;
    }
    while ((unint64_t)v9 < v7);
  }
  if ((*((_DWORD *)v3 + 5) & 0x80000000) == 0 && v6)
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
  v3[1] = v4;
  *((_DWORD *)v3 + 5) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::AABBOverlap,physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>>::growAndPushBack(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  __int128 v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::AABBOverlap>::getName() [T = physx::Bp::AABBOverlap]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 24 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = v8 + 24 * v9;
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v12 = v13;
      v12 += 24;
      v11 = (__int128 *)((char *)v11 + 24);
    }
    while (v12 < v10);
    v14 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = v8 + 24 * v14;
  v16 = *a2;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v15 = v16;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::ProcessAggPairsBase *,physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::ProcessAggPairsBase *>::getName() [T = physx"
           "::Bp::ProcessAggPairsBase *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::Aggregate *,physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::Aggregate *>::getName() [T = physx::Bp::Aggregate *]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 8 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_QWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(uint64_t **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = v6;
    do
    {
      v11 = *v8++;
      *v10++ = v11;
    }
    while ((unint64_t)v10 < v9);
    v8 = *(uint64_t **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Bp::BpCacheData *,physx::shdfnd::InlineAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::Bp::BpCacheData *>>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_DWORD *)(result + 148);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (!v5)
    goto LABEL_14;
  if ((8 * v5) <= 0x80 && *(_BYTE *)(result + 128) == 0)
  {
    *(_BYTE *)(result + 128) = 1;
    v9 = (_QWORD *)result;
    goto LABEL_16;
  }
  if (!(8 * v5))
  {
LABEL_14:
    v9 = 0;
    goto LABEL_16;
  }
  v7 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v8 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BpCacheData *>::getName() [T = physx::Bp::BpCacheData *]";
  else
    v8 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v7 + 24) + 16))(v7 + 24, (8 * v5), v8, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v9 = (_QWORD *)result;
LABEL_16:
  v10 = *(unsigned int *)(v3 + 144);
  v11 = &v9[v10];
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)(v3 + 136);
    v13 = v9;
    do
    {
      v14 = *v12++;
      *v13++ = v14;
    }
    while (v13 < v11);
  }
  *v11 = *a2;
  if ((*(_DWORD *)(v3 + 148) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(v3 + 136);
    if (v15 == v3)
    {
      *(_BYTE *)(v3 + 128) = 0;
    }
    else if (v15)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      LODWORD(v10) = *(_DWORD *)(v3 + 144);
    }
  }
  *(_QWORD *)(v3 + 136) = v9;
  *(_DWORD *)(v3 + 144) = v10 + 1;
  *(_DWORD *)(v3 + 148) = v5;
  return result;
}

uint64_t physx::shdfnd::Array<void *,physx::shdfnd::ReflectionAllocator<void *>>::growAndPushBack(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<void *>::getName() [T = void *]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 8 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_QWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v3 + 8);
  v10 = &v8[v9];
  if ((_DWORD)v9)
  {
    v11 = *(uint64_t **)v3;
    v12 = v8;
    do
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    while (v12 < v10);
  }
  *v10 = *a2;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    LODWORD(v9) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)v3 = v8;
  *(_DWORD *)(v3 + 8) = v9 + 1;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t internalABP::ABP_MM::frameAlloc(pthread_mutex_t **this, unsigned int a2)
{
  if (this)
    return physx::PxcScratchAllocator::alloc(this, a2, 1);
  if (a2)
    return (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                           + 16))(physx::shdfnd::Foundation::mInstance + 24, a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 373);
  return 0;
}

uint64_t internalABP::ABP_MM::frameFree(uint64_t this, unint64_t a2)
{
  if (this)
    return physx::PxcScratchAllocator::free(this, a2);
  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  return this;
}

_QWORD *internalABP::SplitBoxes::reset(_QWORD *this)
{
  _QWORD *v1;

  v1 = this;
  if (this[2])
  {
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v1[2] = 0;
  }
  if (v1[1])
    this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return this;
}

BOOL internalABP::SplitBoxes::allocate(internalABP::SplitBoxes *this, unsigned int a2)
{
  unsigned int v3;
  uint64_t v5;

  v3 = *(_DWORD *)this;
  if (*(_DWORD *)this < a2)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *((_QWORD *)this + 2) = 0;
    }
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *((_QWORD *)this + 1) = 0;
    }
    if (a2 == -6)
      v5 = 0;
    else
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (a2 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 643);
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 644);
    *(_DWORD *)this = a2;
    *((_DWORD *)this + 1) = a2;
  }
  return v3 < a2;
}

void internalABP::BitArray::resize(internalABP::BitArray *this, int a2)
{
  unsigned int v3;
  char *v4;
  int v5;

  if ((a2 & 0x1F) != 0)
    v3 = ((a2 + 128) >> 5) + 1;
  else
    v3 = (a2 + 128) >> 5;
  if (v3)
    v4 = (char *)(*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                                 + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v3, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 855);
  else
    v4 = 0;
  v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    memcpy(v4, *(const void **)this, (4 * v5));
    v5 = *((_DWORD *)this + 2);
  }
  if (v3 != v5)
    bzero(&v4[4 * v5], 4 * (v3 - v5));
  if (*(_QWORD *)this)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 2) = v3;
}

_DWORD *internalABP::ABP_SharedData::resize(_DWORD *this, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  void *v8;

  v2 = (uint64_t)this;
  v3 = this[2];
  v4 = 2 * v3;
  if (!v3)
    v4 = 256;
  if (v4 <= a2 + 1)
    v5 = a2 + 1;
  else
    v5 = v4;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<internalABP::ABP_Object>::getName() [T = internalABP::ABP_Object]";
    else
      v7 = "<allocation names disabled>";
    v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                                  + 16))(v6 + 24, 4 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 949);
    this = memset(v8, 255, 4 * v5);
  }
  else
  {
    v8 = 0;
  }
  if (*(_QWORD *)v2)
  {
    this = memcpy(v8, *(const void **)v2, (4 * v3));
    if (*(_QWORD *)v2)
      this = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
  *(_QWORD *)v2 = v8;
  *(_DWORD *)(v2 + 8) = v5;
  return this;
}

void internalABP::BoxManager::~BoxManager(internalABP::BoxManager *this)
{
  internalABP::BoxManager::reset(this);
  internalABP::SplitBoxes::reset((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  internalABP::SplitBoxes::reset((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
}

_QWORD *internalABP::BoxManager::reset(internalABP::BoxManager *this)
{
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 7) = 0;
  if (*((_QWORD *)this + 6))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 6) = 0;
  if (*((_QWORD *)this + 11))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)this + 11) = 0;
  internalABP::SplitBoxes::reset((_QWORD *)this + 8);
  return internalABP::SplitBoxes::reset((_QWORD *)this + 13);
}

unsigned int *internalABP::BoxManager::addObjects(unsigned int *this, unsigned int *a2, int a3, internalABP::ABP_SharedData *a4)
{
  int v5;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  const void *v12;
  unsigned int *v13;
  unsigned int *v14;
  unint64_t v15;
  unsigned int v16;

  v5 = a3;
  v7 = this;
  v9 = this[14];
  v8 = this[15];
  v10 = v9 + a3;
  if ((int)v9 + a3 <= v8)
  {
    v13 = (unsigned int *)*((_QWORD *)this + 6);
  }
  else
  {
    if (v10 <= 2 * v8)
      v11 = 2 * v8;
    else
      v11 = v9 + a3;
    if (v11 <= 0x400)
      v11 = 1024;
    this[15] = v11;
    v12 = (const void *)*((_QWORD *)this + 6);
    this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 890);
    v13 = this;
    if ((_DWORD)v9)
      this = (unsigned int *)memcpy(this, v12, (4 * v9));
    if (v12)
      this = (unsigned int *)(*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                          + 24)
                                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24, v12);
  }
  *((_QWORD *)v7 + 6) = v13;
  v7[14] = v10;
  v14 = &v13[v9];
  do
  {
    v16 = *a2++;
    v15 = v16;
    *v14++ = v16 | 0x80000000;
    if (a4)
      *(_DWORD *)(*((_QWORD *)a4 + 2) + ((v15 >> 3) & 0x1FFFFFFC)) |= 1 << v15;
    --v5;
  }
  while (v5);
  return this;
}

_QWORD *internalABP::BoxManager::purgeRemovedFromSleeping(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  internalABP::SplitBoxes *v27;

  v2 = result;
  v4 = (unsigned int *)(result + 16);
  v3 = *((_DWORD *)result + 32);
  v6 = (unsigned int *)(result + 12);
  v5 = *((_DWORD *)result + 24);
  v7 = v5 - v3;
  if (v5 == v3)
  {
    result = internalABP::SplitBoxes::reset(result + 13);
    if (v2[11])
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v2[11] = 0;
    *((_DWORD *)v2 + 32) = 0;
  }
  else
  {
    if (v7 >= *((_DWORD *)result + 27) >> 1)
    {
      v20 = result[14];
      if (v5)
      {
        v21 = 0;
        v22 = 0;
        v23 = result[15];
        v24 = result[11];
        do
        {
          v25 = *(unsigned int *)(v24 + 4 * v21);
          if ((_DWORD)v25 != -1)
          {
            if (v21 != v22)
            {
              *(_DWORD *)(v24 + 4 * v22) = v25;
              *(_QWORD *)(v20 + 8 * v22) = *(_QWORD *)(v20 + 8 * v21);
              *(_OWORD *)(v23 + 16 * v22) = *(_OWORD *)(v23 + 16 * v21);
              v5 = *v6;
            }
            *(_DWORD *)(a2 + 4 * v25) = *(_DWORD *)result | (8 * v22++) | 4;
          }
          ++v21;
        }
        while (v21 < v5);
      }
      for (i = 0; i != 6; ++i)
        *(_DWORD *)(v20 + 8 * (v7 + i)) = -1;
      *((_DWORD *)result + 26) = v7;
    }
    else
    {
      v27 = (internalABP::SplitBoxes *)(result + 13);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (v7 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1282);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * (v7 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1283);
      for (j = 0; j != 6; ++j)
        *(_DWORD *)(v9 + 8 * (v7 + j)) = -1;
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                             + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v7, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1285);
      v13 = *((unsigned int *)v2 + 24);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = 0;
        v16 = v2[14];
        v17 = v2[15];
        v18 = v2[11];
        do
        {
          v19 = *(unsigned int *)(v18 + 4 * v14);
          if ((_DWORD)v19 != -1)
          {
            *(_DWORD *)(v12 + 4 * v15) = v19;
            *(_QWORD *)(v9 + 8 * v15) = *(_QWORD *)(v16 + 8 * v14);
            *(_OWORD *)(v10 + 16 * v15) = *(_OWORD *)(v17 + 16 * v14);
            *(_DWORD *)(a2 + 4 * v19) = *(_DWORD *)v2 | (8 * v15++) | 4;
            v13 = *((unsigned int *)v2 + 24);
          }
          ++v14;
        }
        while (v14 < v13);
      }
      result = internalABP::SplitBoxes::reset(v27);
      *((_DWORD *)v2 + 26) = v7;
      *((_DWORD *)v2 + 27) = v7;
      v2[14] = v9;
      v2[15] = v10;
      if (v2[11])
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24);
      v2[11] = v12;
    }
    *v6 = v7;
    v6 = v4;
  }
  *v6 = 0;
  return result;
}

void internalABP::BoxManager::prepareData(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  __n128 v3;
  pthread_mutex_t ***v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t i;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int32x4_t *v44;
  unsigned int v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  const float *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int v58;
  int v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  pthread_mutex_t ***v84;
  uint64_t v85;
  void (**v86)(physx::Cm::RadixSort *__hidden);
  unsigned int v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  char v91;
  _OWORD v92[128];
  char v93;
  uint64_t v94;

  v3.n128_f64[0] = MEMORY[0x24BDAC7A8](a1);
  v84 = v4;
  v81 = v2;
  v5 = v1;
  v94 = *MEMORY[0x24BDAC8D0];
  v6 = v1[14];
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = *((_QWORD *)v1 + 6);
    v13 = *((_QWORD *)v1 + 2);
    v83 = *((_QWORD *)v1 + 1);
    v85 = v13;
    do
    {
      v14 = *(_DWORD *)(v12 + 4 * v7);
      if (v14 != -1)
      {
        if (v14 < 0)
        {
          if (!v8)
          {
            v8 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1402, v3);
            v13 = v85;
          }
          v15 = v14 & 0x7FFFFFFF;
          v3.n128_f32[0] = *(float *)(v83 + 24 * v15) - *(float *)(v13 + 4 * v15);
          v8[v10] = v3.n128_f32[0];
          if (!v9)
          {
            v9 = (unsigned int *)internalABP::ABP_MM::frameAlloc(*v84, 4 * (int)v6);
            v13 = v85;
          }
          v9[v6 + ~v10++] = v15;
        }
        else
        {
          if (!v9)
          {
            v9 = (unsigned int *)internalABP::ABP_MM::frameAlloc(*v84, 4 * (int)v6);
            v13 = v85;
          }
          v9[v11++] = v7;
        }
      }
      ++v7;
    }
    while (v6 != v7);
    v16 = v5[24];
    if (v11)
    {
      if (!v16)
      {
        if (internalABP::SplitBoxes::allocate((internalABP::SplitBoxes *)(v5 + 26), v11))
        {
          v26 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v11, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1604);
          if (*((_QWORD *)v5 + 11))
            (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
          *((_QWORD *)v5 + 11) = v26;
        }
        else
        {
          v26 = (_DWORD *)*((_QWORD *)v5 + 11);
        }
        v61 = 0;
        v62 = *((_QWORD *)v5 + 9);
        v63 = *((_QWORD *)v5 + 10);
        v64 = *((_QWORD *)v5 + 14);
        v65 = (_OWORD *)*((_QWORD *)v5 + 15);
        do
          *(_DWORD *)(v64 + 8 * (v11 + v61++)) = -1;
        while (v61 != 6);
        v66 = 0;
        if (v11 <= 1)
          v67 = 1;
        else
          v67 = v11;
        v68 = 8 * v67;
        v69 = v9;
        do
        {
          v70 = *v69++;
          v71 = *(unsigned int *)(v12 + 4 * v70);
          *v26++ = v71;
          *(_QWORD *)(v64 + v66) = *(_QWORD *)(v62 + 8 * v70);
          *v65++ = *(_OWORD *)(v63 + 16 * v70);
          *(_DWORD *)(v81 + 4 * v71) = v66 | *v5 | 4;
          v66 += 8;
        }
        while (v68 != v66);
        v5[24] = v11;
        v24 = &unk_25582F000;
        v25 = v83;
        if (v10)
          goto LABEL_52;
        goto LABEL_85;
      }
      v77 = *((_QWORD *)v5 + 6);
      v78 = *((_QWORD *)v5 + 10);
      v79 = *((_QWORD *)v5 + 9);
      v74 = *((_QWORD *)v5 + 11);
      v75 = *((_QWORD *)v5 + 15);
      v76 = (unsigned int *)*((_QWORD *)v5 + 14);
      v17 = *v76;
      v18 = *(_DWORD *)(v79 + 8 * *v9);
      v19 = v16 + v11;
      v20 = v5[32];
      v82 = v16 + v11 - v20;
      v80 = v5[24];
      if (v82 == -6)
      {
        v21 = 0;
        v23 = 0;
      }
      else
      {
        v72 = v5[32];
        v21 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t, __n128))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * (v82 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1521, v3);
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 16 * (v82 + 6), "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1522);
        v20 = v72;
        v16 = v80;
        v23 = v22;
      }
      for (i = 0; i != 6; ++i)
        *(_DWORD *)(v21 + 8 * (v16 - v20 + v11 + i)) = -1;
      if (v19 == v20)
      {
        v28 = 0;
      }
      else
      {
        v73 = v23;
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                               + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v82, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 1525);
        v23 = v73;
        v16 = v80;
      }
      if (v19)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        do
        {
          if (v17 >= v18)
          {
            v33 = v9[v31];
            v32 = *(unsigned int *)(v77 + 4 * v33);
            *(_DWORD *)(v28 + 4 * v29) = v32;
            *(_QWORD *)(v21 + 8 * v29) = *(_QWORD *)(v79 + 8 * v33);
            *(_OWORD *)(v23 + 16 * v29) = *(_OWORD *)(v78 + 16 * v33);
            if (++v31 >= v11)
              v18 = -1;
            else
              v18 = *(_DWORD *)(v79 + 8 * v9[v31]);
          }
          else
          {
            v32 = *(unsigned int *)(v74 + 4 * v30);
            if ((_DWORD)v32 != -1)
            {
              *(_DWORD *)(v28 + 4 * v29) = v32;
              *(_QWORD *)(v21 + 8 * v29) = *(_QWORD *)&v76[2 * v30];
              *(_OWORD *)(v23 + 16 * v29) = *(_OWORD *)(v75 + 16 * v30);
            }
            if (++v30 >= v16)
              v17 = -1;
            else
              v17 = v76[2 * v30];
          }
          if (v32 != 0xFFFFFFFFLL)
            *(_DWORD *)(v81 + 4 * v32) = *v5 | (8 * v29++) | 4;
          --v19;
        }
        while (v19);
      }
      v34 = v28;
      v35 = v23;
      internalABP::SplitBoxes::reset((_QWORD *)v5 + 13);
      v5[26] = v82;
      v5[27] = v82;
      *((_QWORD *)v5 + 14) = v21;
      *((_QWORD *)v5 + 15) = v35;
      v24 = &unk_25582F000;
      if (*((_QWORD *)v5 + 11))
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
      *((_QWORD *)v5 + 11) = v34;
      v5[24] = v82;
      v5[32] = 0;
      v25 = v83;
    }
    else
    {
      v24 = (_QWORD *)&unk_25582F000;
      v25 = v83;
      if (v16 && v5[32])
      {
        internalABP::BoxManager::purgeRemovedFromSleeping(v5, v81);
        if (v10)
          goto LABEL_52;
        goto LABEL_85;
      }
    }
    if (v10)
    {
LABEL_52:
      v36 = internalABP::ABP_MM::frameAlloc(*v84, 4 * v10);
      v37 = internalABP::ABP_MM::frameAlloc(*v84, 4 * v10);
      v38 = v37;
      v86 = &off_24ED90D30;
      v88 = 0u;
      v89 = 0u;
      v90 = 0;
      v91 = 1;
      v87 = 0x80000000;
      memset(v92, 0, 512);
      if (v36 && v37)
      {
        *(_QWORD *)&v88 = v36;
        *((_QWORD *)&v88 + 1) = v37;
        *(_QWORD *)&v89 = &v93;
        *((_QWORD *)&v89 + 1) = v92;
        v91 = 0;
        v87 = 0x80000000;
      }
      v39 = (int *)*((_QWORD *)physx::Cm::RadixSort::Sort((physx::Cm::RadixSort *)&v86, v8, v10) + 2);
      if (internalABP::SplitBoxes::allocate((internalABP::SplitBoxes *)(v5 + 16), v10))
      {
        if (*((_QWORD *)v5 + 6))
          (*(void (**)(uint64_t))(*(_QWORD *)(v24[327] + 24) + 24))(v24[327] + 24);
        *((_QWORD *)v5 + 6) = v8;
      }
      else
      {
        if (v8)
          (*(void (**)(uint64_t, float *))(*(_QWORD *)(v24[327] + 24) + 24))(v24[327] + 24, v8);
        v8 = (float *)*((_QWORD *)v5 + 6);
      }
      v40 = 0;
      v41 = *((_QWORD *)v5 + 9);
      do
        *(_DWORD *)(v41 + 8 * (v10 + v40++)) = -1;
      while (v40 != 6);
      v42 = 0;
      v43 = *v5;
      v44 = (int32x4_t *)*((_QWORD *)v5 + 10);
      if (v10 <= 1)
        v45 = 1;
      else
        v45 = v10;
      v46 = 8 * v45;
      v47 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      v48.i64[0] = 0x80000000800000;
      v48.i64[1] = 0x80000000800000;
      do
      {
        v49 = *v39++;
        v50 = v9[(v6 + ~v49)];
        *(_DWORD *)v8++ = v50;
        *(_DWORD *)(v81 + 4 * v50) = v42 | v43;
        v51 = v25 + 24 * v50;
        v52 = (const float *)(v85 + 4 * v50);
        v53 = vld1q_dup_f32(v52);
        v54 = vsubq_f32(*(float32x4_t *)v51, v53);
        v55 = vaddq_f32(*(float32x4_t *)(v51 + 12), v53);
        v47 = vminq_f32(v47, v54);
        v56 = vtrn1q_s32((int32x4_t)v54, (int32x4_t)v55);
        v57 = vzip1q_s32((int32x4_t)v54, (int32x4_t)v55);
        v48 = vmaxq_f32(v48, v55);
        if (v54.i32[0] < 0)
          v58 = ~v54.i32[0];
        else
          v58 = v54.i32[0] | 0x80000000;
        if (v55.i32[0] < 0)
          v59 = ~v55.i32[0];
        else
          v59 = v55.i32[0] | 0x80000000;
        v60 = (int *)(v41 + v42);
        *v60 = v58;
        v60[1] = v59;
        *v44++ = vzip2q_s32(v57, v56);
        v42 += 8;
      }
      while (v46 != v42);
      v47.i32[3] = v48.i32[0];
      *(float32x4_t *)(v5 + 6) = v47;
      *((_QWORD *)v5 + 5) = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL).u64[0];
      internalABP::ABP_MM::frameFree((uint64_t)*v84, v38);
      internalABP::ABP_MM::frameFree((uint64_t)*v84, v36);
LABEL_89:
      v5[14] = v10;
      v5[15] = v10;
      if (v9)
      {
        if (*v84)
          physx::PxcScratchAllocator::free((uint64_t)*v84, (unint64_t)v9);
        else
          (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)(v24[327] + 24) + 24))(v24[327] + 24, v9);
      }
      return;
    }
LABEL_85:
    if (v8)
      (*(void (**)(uint64_t, float *))(*(_QWORD *)(v24[327] + 24) + 24))(v24[327] + 24, v8);
    internalABP::SplitBoxes::reset((_QWORD *)v5 + 8);
    if (*((_QWORD *)v5 + 6))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(v24[327] + 24) + 24))(v24[327] + 24);
      *((_QWORD *)v5 + 6) = 0;
    }
    goto LABEL_89;
  }
  if (v1[32])
    internalABP::BoxManager::purgeRemovedFromSleeping(v1, v2);
}

uint64_t internalABP::ABP_PairManager::addPair(uint64_t this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;

  v3 = *(_QWORD *)(this + 48);
  v4 = *(unsigned int *)(*(_QWORD *)(this + 56) + 4 * a2);
  v5 = *(unsigned int *)(*(_QWORD *)(this + 64) + 4 * a3);
  v6 = *(_DWORD *)(v3 + 4 * v4);
  v7 = *(_DWORD *)(v3 + 4 * v5);
  if (v6 != v7)
  {
    v8 = this;
    if (*(_BYTE *)(*(_QWORD *)(this + 80) + (v7 & 3 | (4 * (v6 & 3)))))
    {
      if (v4 >= v5)
        v9 = *(_DWORD *)(*(_QWORD *)(this + 64) + 4 * a3);
      else
        v9 = *(_DWORD *)(*(_QWORD *)(this + 56) + 4 * a2);
      if (v4 <= v5)
        v10 = *(_DWORD *)(*(_QWORD *)(this + 64) + 4 * a3);
      else
        v10 = *(_DWORD *)(*(_QWORD *)(this + 56) + 4 * a2);
      v11 = 9
          * ((((unsigned __int16)v9 | ((unsigned __int16)v10 << 16))
            + ~(((unsigned __int16)v9 | ((unsigned __int16)v10 << 16)) << 15)) ^ ((((unsigned __int16)v9 | ((unsigned __int16)v10 << 16))
                                                                                               + ~(((unsigned __int16)v9 | ((unsigned __int16)v10 << 16)) << 15)) >> 10));
      v12 = ((v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11)) ^ (((v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11)) >> 16);
      this = *(_DWORD *)(this + 4) & v12;
      v13 = *(_QWORD *)(v8 + 16);
      if (!v13 || (v14 = *(unsigned int *)(v13 + 4 * this), (_DWORD)v14 == -1))
      {
LABEL_15:
        v20 = *(_DWORD *)(v8 + 8);
        if (v20 >= *(_DWORD *)v8)
        {
          this = physx::Bp::PairManagerData::growPairs((physx::Bp::PairManagerData *)v8, v12);
          v20 = *(_DWORD *)(v8 + 8);
          v13 = *(_QWORD *)(v8 + 16);
        }
        *(_DWORD *)(v8 + 8) = v20 + 1;
        v21 = *(_QWORD *)(v8 + 24);
        v22 = (unsigned int *)(*(_QWORD *)(v8 + 32) + 8 * v20);
        *v22 = v9 | 0x80000000;
        v22[1] = v10;
        *(_DWORD *)(v21 + 4 * v20) = *(_DWORD *)(v13 + 4 * this);
        *(_DWORD *)(v13 + 4 * this) = v20;
      }
      else
      {
        v15 = *(_QWORD *)(v8 + 32);
        while (1)
        {
          if ((*(_DWORD *)(v15 + 8 * v14) & 0x7FFFFFFF) == v9)
          {
            v16 = v15 + 8 * v14;
            v19 = *(_DWORD *)(v16 + 4);
            v17 = (unsigned int *)(v16 + 4);
            v18 = v19;
            if ((v19 & 0x7FFFFFFF) == v10)
              break;
          }
          v14 = *(unsigned int *)(*(_QWORD *)(v8 + 24) + 4 * v14);
          if ((_DWORD)v14 == -1)
            goto LABEL_15;
        }
        *v17 = v18 | 0x80000000;
      }
    }
  }
  return this;
}

_QWORD *internalABP::ABP::Region_findOverlaps(internalABP::ABP *this, internalABP::ABP_PairManager *a2)
{
  uint64_t v4;
  char v5;
  const internalABP::BoxManager *v6;
  internalABP::ABP_PairManager *v7;
  const internalABP::ABP_SharedData *v8;
  _QWORD *result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;

  v4 = *((_QWORD *)this + 76);
  v5 = *(_BYTE *)(v4 + 4);
  v6 = (const internalABP::BoxManager *)*(unsigned __int8 *)(v4 + 5);
  v7 = (internalABP::ABP *)((char *)this + 480);
  v8 = (internalABP::ABP *)((char *)this + 8);
  internalABP::findAllOverlaps((pthread_mutex_t ***)this, a2, (internalABP::ABP *)((char *)this + 480), (internalABP::ABP *)((char *)this + 8), (internalABP::ABP *)((char *)this + 144), (const internalABP::BoxManager *)1, 1);
  result = internalABP::findAllOverlaps((pthread_mutex_t ***)this, a2, v7, v8, (internalABP::ABP *)((char *)this + 344), v6, v5);
  v10 = *((_DWORD *)this + 50);
  v11 = *((_DWORD *)this + 60);
  v12 = *((_DWORD *)this + 100);
  if (v10)
  {
    v13 = *((_DWORD *)this + 110);
    if (v12)
      result = internalABP::doBipartiteBoxPruning_Leaf(a2, *((_QWORD *)this + 60), v10, v12, *((_QWORD *)this + 27), *((_QWORD *)this + 52), *((_QWORD *)this + 28), *((_QWORD *)this + 53), *((_QWORD *)this + 24), *((_QWORD *)this + 49));
    if (v13)
      result = internalABP::doBipartiteBoxPruning_Leaf(a2, *((_QWORD *)this + 60), v10, v13, *((_QWORD *)this + 27), *((_QWORD *)this + 57), *((_QWORD *)this + 28), *((_QWORD *)this + 58), *((_QWORD *)this + 24), *((_QWORD *)this + 54));
  }
  if (v12)
    v14 = v11 == 0;
  else
    v14 = 1;
  if (!v14)
    return internalABP::doBipartiteBoxPruning_Leaf(a2, *((_QWORD *)this + 60), v11, v12, *((_QWORD *)this + 32), *((_QWORD *)this + 52), *((_QWORD *)this + 33), *((_QWORD *)this + 53), *((_QWORD *)this + 29), *((_QWORD *)this + 49));
  return result;
}

pthread_mutex_t ***internalABP::findAllOverlaps(pthread_mutex_t ***this, internalABP::ABP_MM *a2, internalABP::ABP_PairManager *a3, const internalABP::ABP_SharedData *a4, const internalABP::BoxManager *a5, const internalABP::BoxManager *a6, char a7)
{
  const internalABP::BoxManager *v8;
  uint64_t v12;
  pthread_mutex_t ***v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  unint64_t v23;
  uint64_t v24;
  float *v25;
  _BOOL8 v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t i;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t j;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char v56;
  const internalABP::BoxManager *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  _OWORD v64[2];
  int v65[2];
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;

  v8 = a5;
  v71 = *MEMORY[0x24BDAC8D0];
  v12 = *((unsigned int *)a5 + 14);
  if (!(_DWORD)a6)
  {
LABEL_17:
    if ((a7 & 1) == 0)
      return this;
    goto LABEL_18;
  }
  if (!(_DWORD)v12)
  {
    if ((a7 & 1) == 0)
      return this;
    goto LABEL_23;
  }
  v13 = this;
  v14 = *(_QWORD *)a3;
  v15 = *((_DWORD *)a5 + 24);
  v17 = *((_QWORD *)a5 + 9);
  v16 = *((_QWORD *)a5 + 10);
  if (v15)
    internalABP::doBipartiteBoxPruning_Leaf(a2, v14, v12, v15, v17, *((_QWORD *)a5 + 14), v16, *((_QWORD *)a5 + 15), *((_QWORD *)a5 + 6), *((_QWORD *)a5 + 11));
  v61 = v14;
  v18 = *((_QWORD *)v8 + 6);
  if (v12 < 0x1389)
  {
    this = (pthread_mutex_t ***)internalABP::doCompleteBoxPruning_Leaf(a2, v12, v17, v16, *((_QWORD *)v8 + 6), v61);
    goto LABEL_17;
  }
  v60 = (char *)internalABP::ABP_MM::frameAlloc(*v13, 8 * (int)v12 + 240);
  v59 = (char *)internalABP::ABP_MM::frameAlloc(*v13, 16 * (int)v12);
  v19 = *((float *)v8 + 10) + *((float *)v8 + 7);
  v20 = *((float *)v8 + 11) + *((float *)v8 + 8);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v21 = v19 * 0.5;
  v22 = v20 * 0.5;
  v58 = (char *)internalABP::ABP_MM::frameAlloc(*v13, 4 * (int)v12);
  v23 = internalABP::ABP_MM::frameAlloc(*v13, v12);
  v24 = 0;
  v25 = (float *)(v16 + 8);
  do
  {
    v26 = *(v25 - 1) > v22;
    v27 = *(v25 - 2) > v21;
    v29 = *v25;
    v28 = v25[1];
    v25 += 4;
    v30 = internalABP::gCodes[v27 | (4 * v26) | (8 * (v28 < v22)) | (2 * (v29 < v21))];
    LODWORD(v27) = *((_DWORD *)&v68 + v30);
    *(_BYTE *)(v23 + v24) = v30;
    *((_DWORD *)&v68 + v30) = v27 + 1;
    ++v24;
  }
  while (v12 != v24);
  v31 = 0;
  v67 = 0;
  memset(v66, 0, sizeof(v66));
  *(_QWORD *)v65 = 0;
  memset(v64, 0, sizeof(v64));
  v63 = 0;
  v32 = v58;
  v33 = v59;
  v34 = v60;
  memset(v62, 0, sizeof(v62));
  do
  {
    v35 = *((unsigned int *)&v68 + v31);
    *((_QWORD *)v66 + v31) = v34;
    *((_QWORD *)v64 + v31) = v33;
    *((_QWORD *)v62 + v31) = v32;
    v34 += 8 * (v35 + 6);
    v33 += 16 * v35;
    v32 += 4 * v35;
    ++v31;
  }
  while (v31 != 5);
  v36 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  do
  {
    v37 = *(unsigned __int8 *)(v23 + v36);
    v38 = *((unsigned int *)&v68 + v37);
    *((_DWORD *)&v68 + v37) = v38 + 1;
    v39 = *((_QWORD *)v66 + v37);
    v40 = *((_QWORD *)v64 + v37);
    *(_DWORD *)(*((_QWORD *)v62 + v37) + 4 * v38) = *(_DWORD *)(v18 + 4 * v36);
    *(_QWORD *)(v39 + 8 * v38) = *(_QWORD *)(v17 + 8 * v36);
    *(_OWORD *)(v40 + 16 * v38) = *(_OWORD *)(v16 + 16 * v36++);
  }
  while (v12 != v36);
  if (*v13)
    physx::PxcScratchAllocator::free((uint64_t)*v13, v23);
  else
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v23);
  for (i = 0; i != 5; ++i)
  {
    v46 = 0;
    v47 = *((_QWORD *)v66 + i);
    v48 = *((_DWORD *)&v68 + i);
    do
      *(_DWORD *)(v47 + 8 * (v48 + v46++)) = -1;
    while (v46 != 6);
  }
  v55 = (uint64_t *)v13;
  v56 = a7;
  v57 = v8;
  for (j = 0; j != 5; ++j)
    internalABP::doCompleteBoxPruning_Leaf(a2, *((_DWORD *)&v68 + j), *((_QWORD *)v66 + j), *((_QWORD *)v64 + j), *((_QWORD *)v62 + j), v61);
  v50 = 0;
  v51 = v70;
  v52 = v67;
  v53 = *(_QWORD *)v65;
  v54 = v63;
  do
  {
    internalABP::doBipartiteBoxPruning_Leaf(a2, v61, *((_DWORD *)&v68 + v50), v51, *((_QWORD *)v66 + v50), v52, *((_QWORD *)v64 + v50), v53, *((_QWORD *)v62 + v50), v54);
    ++v50;
  }
  while (v50 != 4);
  internalABP::ABP_MM::frameFree(*v55, (unint64_t)v58);
  internalABP::ABP_MM::frameFree(*v55, (unint64_t)v59);
  this = (pthread_mutex_t ***)internalABP::ABP_MM::frameFree(*v55, (unint64_t)v60);
  v8 = v57;
  if ((v56 & 1) != 0)
  {
LABEL_18:
    if ((_DWORD)v12)
    {
      v41 = *((_DWORD *)a4 + 14);
      if (v41)
        this = (pthread_mutex_t ***)internalABP::doBipartiteBoxPruning_Leaf(a2, *(_QWORD *)a3, v12, v41, *((_QWORD *)v8 + 9), *((_QWORD *)a4 + 9), *((_QWORD *)v8 + 10), *((_QWORD *)a4 + 10), *((_QWORD *)v8 + 6), *((_QWORD *)a4 + 6));
      v42 = *((_DWORD *)a4 + 24);
      if (v42)
        this = (pthread_mutex_t ***)internalABP::doBipartiteBoxPruning_Leaf(a2, *(_QWORD *)a3, v12, v42, *((_QWORD *)v8 + 9), *((_QWORD *)a4 + 14), *((_QWORD *)v8 + 10), *((_QWORD *)a4 + 15), *((_QWORD *)v8 + 6), *((_QWORD *)a4 + 11));
    }
LABEL_23:
    v43 = *((_DWORD *)a4 + 14);
    if (v43)
    {
      v44 = *((_DWORD *)v8 + 24);
      if (v44)
        return (pthread_mutex_t ***)internalABP::doBipartiteBoxPruning_Leaf(a2, *(_QWORD *)a3, v44, v43, *((_QWORD *)v8 + 14), *((_QWORD *)a4 + 9), *((_QWORD *)v8 + 15), *((_QWORD *)a4 + 10), *((_QWORD *)v8 + 11), *((_QWORD *)a4 + 6));
    }
  }
  return this;
}

double internalABP::ABP::ABP(internalABP::ABP *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_DWORD *)this + 36) = 2;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_QWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_BYTE *)this + 336) = 1;
  *((_DWORD *)this + 72) = 0x80000000;
  *((_QWORD *)this + 35) = &off_24ED90D50;
  *((_DWORD *)this + 86) = 1;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_DWORD *)this + 118) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_DWORD *)this + 122) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_DWORD *)this + 126) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_DWORD *)this + 130) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_DWORD *)this + 134) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_DWORD *)this + 142) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  return result;
}

unsigned int *internalABP::ABP::preallocate(internalABP::ABP *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  const char *v7;
  void *v8;

  if (a2)
  {
    if (*((_QWORD *)this + 60))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 60) = 0;
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<internalABP::ABP_Object>::getName() [T = internalABP::ABP_Object]";
    else
      v7 = "<allocation names disabled>";
    v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                                  + 16))(v6 + 24, 4 * a2, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 2858);
    memset(v8, 255, 4 * a2);
    *((_QWORD *)this + 60) = v8;
    *((_DWORD *)this + 122) = a2;
  }
  return physx::Bp::PairManagerData::reserveMemory((unsigned int *)this + 132, a3);
}

unsigned int *physx::Bp::PairManagerData::reserveMemory(unsigned int *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;

  if (a2)
  {
    if ((a2 & (a2 - 1)) != 0)
    {
      v2 = a2 | (a2 >> 1) | ((a2 | (a2 >> 1)) >> 2);
      v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
      a2 = (v3 | HIWORD(v3)) + 1;
    }
    *this = a2;
    this[1] = a2 - 1;
    this[10] = a2;
    return physx::Bp::PairManagerData::reallocPairs(this);
  }
  return this;
}

unsigned int *internalABP::ABP::addStaticObjects(internalABP::ABP *this, unsigned int *a2, int a3, int a4)
{
  if (*((_DWORD *)this + 122) < (a4 + 1))
    internalABP::ABP_SharedData::resize((_DWORD *)this + 120, a4);
  return internalABP::BoxManager::addObjects((unsigned int *)this + 2, a2, a3, 0);
}

unsigned int *internalABP::ABP::addDynamicObjects(internalABP::ABP *this, unsigned int *a2, int a3, unsigned int a4)
{
  internalABP::ABP_SharedData *v8;

  v8 = (internalABP::ABP *)((char *)this + 480);
  if (*((_DWORD *)this + 122) < a4 + 1)
    internalABP::ABP_SharedData::resize((_DWORD *)this + 120, a4);
  if (*((_DWORD *)this + 126) <= a4 >> 5)
    internalABP::BitArray::resize((internalABP::ABP *)((char *)this + 496), a4);
  return internalABP::BoxManager::addObjects((unsigned int *)this + 36, a2, a3, v8);
}

unsigned int *internalABP::ABP::addKinematicObjects(internalABP::ABP *this, unsigned int *a2, int a3, unsigned int a4)
{
  internalABP::ABP_SharedData *v8;

  v8 = (internalABP::ABP *)((char *)this + 480);
  if (*((_DWORD *)this + 122) < a4 + 1)
    internalABP::ABP_SharedData::resize((_DWORD *)this + 120, a4);
  if (*((_DWORD *)this + 126) <= a4 >> 5)
    internalABP::BitArray::resize((internalABP::ABP *)((char *)this + 496), a4);
  return internalABP::BoxManager::addObjects((unsigned int *)this + 86, a2, a3, v8);
}

unsigned int *internalABP::ABP_PairManager::computeCreatedDeletedPairs(internalABP::ABP_PairManager *this, physx::Bp::BroadPhaseABP *a2, const internalABP::BitArray *a3, const internalABP::BitArray *a4)
{
  unsigned int v5;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  char *v30;
  unint64_t v31;

  v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    v9 = 0;
    v10 = (char *)a2 + 16;
    v30 = (char *)a2 + 32;
    do
    {
      v11 = *((_QWORD *)this + 4);
      v12 = (_QWORD *)(v11 + 8 * v9);
      v13 = *(unsigned int *)v12;
      if ((v13 & 0x80000000) != 0)
      {
        v24 = *(_DWORD *)(v11 + 8 * v9 + 4) & 0x7FFFFFFF;
        if ((v13 & 0x7FFFFFFF) >= v24)
          v25 = v24;
        else
          v25 = v13 & 0x7FFFFFFF;
        if ((v13 & 0x7FFFFFFF) > v24)
          v24 = v13 & 0x7FFFFFFF;
        v31 = __PAIR64__(v24, v25);
        v26 = *((unsigned int *)a2 + 6);
        if ((*((_DWORD *)a2 + 7) & 0x7FFFFFFFu) <= v26)
        {
          physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack((uint64_t)v10, &v31);
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v26) = v31;
          ++*((_DWORD *)a2 + 6);
        }
        *v12 &= 0x7FFFFFFF7FFFFFFFuLL;
      }
      else
      {
        v14 = v11 + 8 * v9;
        v17 = *(_DWORD *)(v14 + 4);
        v15 = (_DWORD *)(v14 + 4);
        v16 = v17;
        if ((v17 & 0x80000000) != 0)
        {
          *v15 = v16 & 0x7FFFFFFF;
        }
        else
        {
          v18 = v13 >> 5;
          v19 = *((_DWORD *)a3 + 2);
          if ((v13 >> 5) < v19 && ((*(_DWORD *)(*(_QWORD *)a3 + 4 * v18) >> v13) & 1) != 0
            || (v16 >> 5) < v19 && ((*(_DWORD *)(*(_QWORD *)a3 + 4 * (v16 >> 5)) >> v16) & 1) != 0)
          {
            v20 = *((_DWORD *)a4 + 2);
            if ((v18 >= v20 || ((*(_DWORD *)(*(_QWORD *)a4 + 4 * v18) >> v13) & 1) == 0)
              && ((v16 >> 5) >= v20 || ((*(_DWORD *)(*(_QWORD *)a4 + 4 * (v16 >> 5)) >> v16) & 1) == 0))
            {
              if (v13 >= v16)
                v21 = v16;
              else
                v21 = v13;
              if (v13 <= v16)
                v22 = v16;
              else
                v22 = v13;
              v31 = __PAIR64__(v22, v21);
              v23 = *((unsigned int *)a2 + 10);
              if ((*((_DWORD *)a2 + 11) & 0x7FFFFFFFu) <= v23)
              {
                physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::growAndPushBack((uint64_t)v30, &v31);
              }
              else
              {
                *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v23) = v31;
                ++*((_DWORD *)a2 + 10);
              }
            }
            v27 = 9
                * ((((unsigned __int16)v13 | ((unsigned __int16)v16 << 16))
                  + ~(((unsigned __int16)v13 | ((unsigned __int16)v16 << 16)) << 15)) ^ ((((unsigned __int16)v13 | ((unsigned __int16)v16 << 16)) + ~(((unsigned __int16)v13 | ((unsigned __int16)v16 << 16)) << 15)) >> 10));
            v28 = (v27 ^ (v27 >> 6)) + ~((v27 ^ (v27 >> 6)) << 11);
            physx::Bp::PairManagerData::removePair((uint64_t)this, a2, a3, *((_DWORD *)this + 1) & (v28 ^ HIWORD(v28)), v9);
            --v5;
            continue;
          }
        }
      }
      ++v9;
    }
    while (v9 < v5);
  }
  return physx::Bp::PairManagerData::shrinkMemory((unsigned int *)this);
}

uint64_t physx::Bp::PairManagerData::removePair(uint64_t this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  v6 = *(_QWORD *)(this + 16);
  v5 = *(_QWORD *)(this + 24);
  v7 = (unsigned int *)(v6 + 4 * a4);
  v8 = *v7;
  if (*v7 != a5)
  {
    do
    {
      v9 = v8;
      v8 = *(_DWORD *)(v5 + 4 * v8);
    }
    while (v8 != a5);
    if (v9 != -1)
      v7 = (unsigned int *)(v5 + 4 * v9);
  }
  *v7 = *(_DWORD *)(v5 + 4 * a5);
  v10 = (*(_DWORD *)(this + 8) - 1);
  if ((_DWORD)v10 != a5)
  {
    v11 = *(_QWORD *)(this + 32);
    v12 = *(unsigned __int16 *)(v11 + 8 * v10) | (*(_DWORD *)(v11 + 8 * v10 + 4) << 16);
    v13 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
    v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
    v15 = (v14 ^ HIWORD(v14)) & *(_DWORD *)(this + 4);
    v16 = (unsigned int *)(v6 + 4 * v15);
    v17 = *v16;
    if (*v16 != (_DWORD)v10)
    {
      do
      {
        v18 = v17;
        v17 = *(_DWORD *)(v5 + 4 * v17);
      }
      while (v17 != (_DWORD)v10);
      if (v18 != -1)
        v16 = (unsigned int *)(v5 + 4 * v18);
    }
    *v16 = *(_DWORD *)(v5 + 4 * v10);
    *(_QWORD *)(v11 + 8 * a5) = *(_QWORD *)(v11 + 8 * v10);
    v19 = *(_QWORD *)(this + 16);
    *(_DWORD *)(*(_QWORD *)(this + 24) + 4 * a5) = *(_DWORD *)(v19 + 4 * v15);
    *(_DWORD *)(v19 + 4 * v15) = a5;
    a5 = *(_DWORD *)(this + 8) - 1;
  }
  *(_DWORD *)(this + 8) = a5;
  return this;
}

unsigned int *physx::Bp::PairManagerData::shrinkMemory(unsigned int *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = this[2] | (this[2] >> 1);
  v2 = v1 | (v1 >> 2) | ((v1 | (v1 >> 2)) >> 4);
  v3 = v2 | (v2 >> 8) | ((v2 | (v2 >> 8)) >> 16);
  v4 = v3 + 1;
  if (*this != v3 + 1 && v4 >= this[10])
  {
    *this = v4;
    this[1] = v3;
    return physx::Bp::PairManagerData::reallocPairs(this);
  }
  return this;
}

uint64_t physx::Bp::PairManagerData::purge(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  if (*(_QWORD *)(this + 24))
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v1 + 24) = 0;
  }
  if (*(_QWORD *)(v1 + 32))
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v1 + 32) = 0;
  }
  if (*(_QWORD *)(v1 + 16))
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v1 + 16) = 0;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  return this;
}

physx::Bp::BroadPhaseABP *physx::Bp::BroadPhaseABP::BroadPhaseABP(physx::Bp::BroadPhaseABP *this, unsigned int a2, int a3, int a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  internalABP::ABP *v12;
  internalABP::ABP *v13;

  *((_OWORD *)this + 1) = 0u;
  v8 = (char *)this + 16;
  *((_OWORD *)this + 2) = 0u;
  v9 = (char *)this + 32;
  *(_QWORD *)this = off_24ED8C800;
  *((_OWORD *)this + 3) = 0u;
  v10 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v11 = "static const char *physx::shdfnd::ReflectionAllocator<internalABP::ABP>::getName() [T = internalABP::ABP]";
  else
    v11 = "<allocation names disabled>";
  v12 = (internalABP::ABP *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 616, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 3102);
  internalABP::ABP::ABP(v12);
  *((_QWORD *)this + 1) = v13;
  internalABP::ABP::preallocate(v13, a4 + a3, a2);
  if ((*((_DWORD *)this + 7) & 0x7FFFFC00) == 0)
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate((uint64_t)v8, 0x400u);
  if ((*((_DWORD *)this + 11) & 0x7FFFFC00) == 0)
    physx::shdfnd::Array<physx::Bp::BroadPhasePair,physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhasePair>>::recreate((uint64_t)v9, 0x400u);
  return this;
}

void physx::Bp::BroadPhaseABP::~BroadPhaseABP(physx::Bp::BroadPhaseABP *this)
{
  uint64_t v2;
  int v3;
  int v5;

  *(_QWORD *)this = off_24ED8C800;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    internalABP::BoxManager::reset((internalABP::BoxManager *)(v2 + 8));
    internalABP::BoxManager::reset((internalABP::BoxManager *)(v2 + 144));
    internalABP::BoxManager::reset((internalABP::BoxManager *)(v2 + 344));
    if (*(_QWORD *)(v2 + 480))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v2 + 480) = 0;
    *(_DWORD *)(v2 + 488) = 0;
    physx::Bp::PairManagerData::purge(v2 + 528);
    if (*(_QWORD *)(v2 + 496))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v2 + 496) = 0;
    *(_DWORD *)(v2 + 504) = 0;
    if (*(_QWORD *)(v2 + 512))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v2 + 512) = 0;
    *(_DWORD *)(v2 + 520) = 0;
    physx::Bp::PairManagerData::purge(v2 + 528);
    if (*(_QWORD *)(v2 + 512))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v2 + 512) = 0;
    *(_DWORD *)(v2 + 520) = 0;
    if (*(_QWORD *)(v2 + 496))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *(_QWORD *)(v2 + 496) = 0;
    *(_DWORD *)(v2 + 504) = 0;
    internalABP::BoxManager::~BoxManager((internalABP::BoxManager *)(v2 + 344));
    *(_QWORD *)(v2 + 280) = &off_24ED90D50;
    physx::Cm::RadixSortBuffered::reset(v2 + 280);
    internalABP::BoxManager::~BoxManager((internalABP::BoxManager *)(v2 + 144));
    internalABP::BoxManager::~BoxManager((internalABP::BoxManager *)(v2 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v2);
    *((_QWORD *)this + 1) = 0;
  }
  v3 = *((_DWORD *)this + 11);
  if ((v3 & 0x80000000) == 0 && (v3 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 4) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v5 = *((_DWORD *)this + 7);
  if ((v5 & 0x80000000) == 0 && (v5 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 2) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

{
  uint64_t v2;

  physx::Bp::BroadPhaseABP::~BroadPhaseABP(this);
  if (v2)
    (*(void (**)(uint64_t, physx::Bp::BroadPhaseABP *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

void physx::Bp::BroadPhaseABP::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v8;
  uint64_t v9;
  void **v10;

  **(_QWORD **)(a1 + 8) = a3;
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 40))(a6);
  physx::Bp::BroadPhaseABP::setUpdateData(a1, a4);
  v8 = *(_QWORD **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 56);
  v8[72] = *(_QWORD *)(a1 + 48);
  v8[76] = v9;
  internalABP::ABP::Region_findOverlaps((internalABP::ABP *)v8, (internalABP::ABP_PairManager *)(v8 + 66));
  v10 = *(void ***)(a1 + 8);
  internalABP::ABP_PairManager::computeCreatedDeletedPairs((internalABP::ABP_PairManager *)(v10 + 66), (physx::Bp::BroadPhaseABP *)a1, (const internalABP::BitArray *)(v10 + 62), (const internalABP::BitArray *)(v10 + 64));
  bzero(v10[62], (4 * *((_DWORD *)v10 + 126)));
}

void physx::Bp::BroadPhaseABP::setUpdateData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  internalABP::ABP *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  unsigned int v41[2];
  unsigned int v42[128];
  unsigned int v43[2];
  unsigned int v44[128];
  unsigned int v45[2];
  unsigned int v46[128];
  _QWORD v47[6];

  v47[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(v4 + 152) = v5;
  *(_QWORD *)(v4 + 160) = v6;
  *(_QWORD *)(v4 + 352) = v5;
  *(_QWORD *)(v4 + 360) = v6;
  v7 = *(_DWORD *)(a2 + 80);
  if (*(_DWORD *)(v4 + 488) < (v7 + 1))
    internalABP::ABP_SharedData::resize((_DWORD *)(v4 + 480), v7);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 40);
  if (v8)
  {
    v9 = *(unsigned int **)(a2 + 32);
    do
    {
      v11 = *v9++;
      v10 = v11;
      v12 = *(_QWORD *)(a1 + 8);
      v13 = (unint64_t)v11 >> 5;
      if (v13 >= *(_DWORD *)(v12 + 504))
        internalABP::BitArray::resize((internalABP::BitArray *)(v12 + 496), v10);
      *(_DWORD *)(*(_QWORD *)(v12 + 496) + 4 * v13) |= 1 << v10;
      if (v13 >= *(_DWORD *)(v12 + 520))
        internalABP::BitArray::resize((internalABP::BitArray *)(v12 + 512), v10);
      *(_DWORD *)(*(_QWORD *)(v12 + 512) + 4 * v13) |= 1 << v10;
      v14 = *(_QWORD *)(v12 + 480);
      v15 = *(unsigned int *)(v14 + 4 * v10);
      v16 = v12 + 144;
      if ((v15 & 3) == 0)
        v16 = v12 + 8;
      if ((*(_DWORD *)(v14 + 4 * v10) & 3) == 1)
        v17 = v12 + 344;
      else
        v17 = v16;
      v18 = v15 >> 3;
      if ((v15 & 4) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(v17 + 88) + 4 * v18) = -1;
        ++*(_DWORD *)(v17 + 128);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v17 + 48) + 4 * v18) = -1;
      }
      *(_DWORD *)(v14 + 4 * v10) = -1;
      --v8;
    }
    while (v8);
  }
  v19 = *(_DWORD *)(a2 + 8);
  if (v19)
  {
    v20 = *(unsigned int **)a2;
    v21 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)v45 = 0;
    *(_QWORD *)v43 = 0;
    *(_QWORD *)v41 = 0;
    v47[2] = v43;
    v47[3] = v43;
    v47[0] = v45;
    v47[1] = v41;
    do
    {
      v23 = *v20++;
      v22 = v23;
      v24 = *(_DWORD *)(v21 + 4 * v23) & 3;
      v25 = (unsigned int *)v47[v24];
      v26 = *(internalABP::ABP **)(a1 + 8);
      v27 = *v25;
      if (v25[1] <= v23)
        v28 = v22;
      else
        v28 = v25[1];
      v25[1] = v28;
      v29 = v25 + 2;
      v25[v27 + 2] = v22;
      if ((_DWORD)v27 == 127)
      {
        *v25 = 0;
        if ((_DWORD)v24 == 1)
        {
          internalABP::ABP::addKinematicObjects(v26, v29, 128, v28);
        }
        else if ((_DWORD)v24)
        {
          internalABP::ABP::addDynamicObjects(v26, v29, 128, v28);
        }
        else
        {
          internalABP::ABP::addStaticObjects(v26, v29, 128, v28);
        }
        v25[1] = 0;
      }
      else
      {
        *v25 = v27 + 1;
      }
      --v19;
    }
    while (v19);
    if (v45[0])
      internalABP::ABP::addStaticObjects(*(internalABP::ABP **)(a1 + 8), v46, v45[0], v45[1]);
    if (v41[0])
      internalABP::ABP::addKinematicObjects(*(internalABP::ABP **)(a1 + 8), v42, v41[0], v41[1]);
    if (v43[0])
      internalABP::ABP::addDynamicObjects(*(internalABP::ABP **)(a1 + 8), v44, v43[0], v43[1]);
  }
  v30 = *(unsigned int **)(a2 + 16);
  if (v30)
  {
    for (i = *(_DWORD *)(a2 + 24); i; --i)
    {
      v33 = *v30++;
      v32 = v33;
      v34 = *(_QWORD *)(a1 + 8);
      v35 = (unint64_t)v33 >> 5;
      if (v35 >= *(_DWORD *)(v34 + 504))
        internalABP::BitArray::resize((internalABP::BitArray *)(v34 + 496), v32);
      *(_DWORD *)(*(_QWORD *)(v34 + 496) + 4 * v35) |= 1 << v32;
      v36 = *(unsigned int *)(*(_QWORD *)(v34 + 480) + 4 * v32);
      v37 = v34 + 144;
      if ((v36 & 3) == 0)
        v37 = v34 + 8;
      if ((*(_DWORD *)(*(_QWORD *)(v34 + 480) + 4 * v32) & 3) == 1)
        v38 = v34 + 344;
      else
        v38 = v37;
      v45[0] = v32;
      v39 = v36 >> 3;
      if ((v36 & 4) != 0)
      {
        *(_DWORD *)(*(_QWORD *)(v38 + 88) + 4 * v39) = -1;
        ++*(_DWORD *)(v38 + 128);
        internalABP::BoxManager::addObjects((unsigned int *)v38, v45, 1, 0);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v38 + 48) + 4 * v39) |= 0x80000000;
      }
    }
  }
  v40 = *(_DWORD **)(a1 + 8);
  if (v40[50] || v40[68] || v40[100] || v40[118] || v40[16] || v40[34])
  {
    if (v40[16] || v40[34])
      internalABP::BoxManager::prepareData((uint64_t)(v40 + 2));
    internalABP::BoxManager::prepareData((uint64_t)(v40 + 36));
    internalABP::BoxManager::prepareData((uint64_t)(v40 + 86));
    physx::Cm::RadixSortBuffered::reset((uint64_t)(v40 + 70));
  }
}

void physx::Bp::BroadPhaseABP::singleThreadedUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;

  **(_QWORD **)(a1 + 8) = a2;
  physx::Bp::BroadPhaseABP::setUpdateData(a1, a3);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 56);
  v4[72] = *(_QWORD *)(a1 + 48);
  v4[76] = v5;
  internalABP::ABP::Region_findOverlaps((internalABP::ABP *)v4, (internalABP::ABP_PairManager *)(v4 + 66));
  v6 = *(void ***)(a1 + 8);
  internalABP::ABP_PairManager::computeCreatedDeletedPairs((internalABP::ABP_PairManager *)(v6 + 66), (physx::Bp::BroadPhaseABP *)a1, (const internalABP::BitArray *)(v6 + 62), (const internalABP::BitArray *)(v6 + 64));
  bzero(v6[62], (4 * *((_DWORD *)v6 + 126)));
}

uint64_t physx::Bp::BroadPhaseABP::getNbCreatedPairs(physx::Bp::BroadPhaseABP *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t physx::Bp::BroadPhaseABP::getCreatedPairs(physx::Bp::BroadPhaseABP *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t physx::Bp::BroadPhaseABP::getNbDeletedPairs(physx::Bp::BroadPhaseABP *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t physx::Bp::BroadPhaseABP::getDeletedPairs(physx::Bp::BroadPhaseABP *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t physx::Bp::BroadPhaseABP::freeBuffers(physx::Bp::BroadPhaseABP *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)(v2 + 512))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)(v2 + 512) = 0;
  *(_DWORD *)(v2 + 520) = 0;
  freeBuffer((uint64_t)this + 16);
  return freeBuffer((uint64_t)this + 32);
}

physx::Bp::BroadPhaseMBP *physx::Bp::BroadPhase::create(int a1, uint64_t a2, unsigned int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v10;
  const char *v11;
  physx::Bp::BroadPhaseABP *v12;
  uint64_t v15;
  const char *v16;
  physx::Bp::BroadPhaseMBP *v17;
  uint64_t v18;
  const char *v19;
  physx::Bp::BroadPhaseSap *v20;

  if (a1 == 1)
  {
    v15 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v16 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhaseMBP>::getName() [T = physx::Bp::BroadPhaseMBP]";
    else
      v16 = "<allocation names disabled>";
    v17 = (physx::Bp::BroadPhaseMBP *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v15 + 24) + 16))(v15 + 24, 208, v16, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhase.cpp", 66);
    return physx::Bp::BroadPhaseMBP::BroadPhaseMBP(v17, a2, a3, a4, a5, a6);
  }
  else if (a1 == 2)
  {
    v10 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v11 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhaseABP>::getName() [T = physx::Bp::BroadPhaseABP]";
    else
      v11 = "<allocation names disabled>";
    v12 = (physx::Bp::BroadPhaseABP *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v10 + 24) + 16))(v10 + 24, 64, v11, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseABP.cpp", 3401);
    return physx::Bp::BroadPhaseABP::BroadPhaseABP(v12, a3, a4, a5);
  }
  else
  {
    v18 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v19 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Bp::BroadPhaseSap>::getName() [T = physx::Bp::BroadPhaseSap]";
    else
      v19 = "<allocation names disabled>";
    v20 = (physx::Bp::BroadPhaseSap *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v18 + 24) + 16))(v18 + 24, 688, v19, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhase.cpp", 68);
    return physx::Bp::BroadPhaseSap::BroadPhaseSap(v20, a3, a4, a5, a6);
  }
}

unsigned int *physx::Bp::PairManagerData::reallocPairs(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v1 = this;
  if (*((_QWORD *)this + 2))
  {
    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)v1 + 2) = 0;
  }
  v2 = *v1;
  if (!(_DWORD)v2)
  {
    v5 = 0;
    v7 = 0;
    *((_QWORD *)v1 + 2) = 0;
    goto LABEL_11;
  }
  this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseShared.cpp", 83);
  v3 = *v1;
  *((_QWORD *)v1 + 2) = this;
  if (!(_DWORD)v3 || (this = (unsigned int *)memset(this, 255, 4 * v3), v4 = *v1, !(_DWORD)v4))
  {
    v5 = 0;
    goto LABEL_10;
  }
  this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8 * v4, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseShared.cpp", 87);
  v5 = this;
  v6 = *v1;
  if (!(_DWORD)v6)
  {
LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  this = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 4 * v6, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevelaabb/src/BpBroadPhaseShared.cpp", 88);
  v7 = this;
LABEL_11:
  v8 = v1[2];
  if (v8)
  {
    this = (unsigned int *)memcpy(v5, *((const void **)v1 + 4), 8 * v8);
    if (v1[2])
    {
      v9 = 0;
      v10 = *((_QWORD *)v1 + 2);
      v11 = (int *)(*((_QWORD *)v1 + 4) + 4);
      do
      {
        v12 = *((unsigned __int16 *)v11 - 2);
        v13 = *v11;
        v11 += 2;
        v14 = (v12 | (v13 << 16)) + ~((v12 | (v13 << 16)) << 15);
        v15 = (9 * (v14 ^ (v14 >> 10))) ^ ((9 * (v14 ^ (v14 >> 10))) >> 6);
        v16 = ((v15 + ~(v15 << 11)) ^ ((v15 + ~(v15 << 11)) >> 16)) & v1[1];
        v7[v9] = *(_DWORD *)(v10 + 4 * v16);
        *(_DWORD *)(v10 + 4 * v16) = v9++;
      }
      while (v9 < v1[2]);
    }
  }
  if (*((_QWORD *)v1 + 3))
  {
    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)v1 + 3) = 0;
  }
  if (*((_QWORD *)v1 + 4))
    this = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *((_QWORD *)v1 + 3) = v7;
  *((_QWORD *)v1 + 4) = v5;
  return this;
}

uint64_t physx::Bp::PairManagerData::growPairs(physx::Bp::PairManagerData *this, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v4 = (*((_DWORD *)this + 2) + 1) | ((*((_DWORD *)this + 2) + 1) >> 1);
  v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
  v6 = v5 | (v5 >> 8) | ((v5 | (v5 >> 8)) >> 16);
  *(_DWORD *)this = v6 + 1;
  *((_DWORD *)this + 1) = v6;
  physx::Bp::PairManagerData::reallocPairs((unsigned int *)this);
  return *((_DWORD *)this + 1) & a2;
}

uint64_t physx::Bp::BroadPhaseABP::getType(physx::Bp::BroadPhaseABP *this)
{
  return 2;
}

uint64_t physx::Bp::BroadPhaseABP::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t physx::Bp::BroadPhaseABP::getBroadPhasePairs(physx::Bp::BroadPhaseABP *this)
{
  return 0;
}

_QWORD *internalABP::doCompleteBoxPruning_Leaf(_QWORD *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  float32x4_t v19;
  float32x4_t v20;

  this[7] = a5;
  this[8] = a5;
  this[9] = a6;
  if (a2)
  {
    v9 = (uint64_t)this;
    v10 = 0;
    LODWORD(v11) = 0;
    v12 = a2;
    do
    {
      v13 = *(_DWORD *)(a3 + 8 * v10 + 4);
      do
      {
        v14 = 8 * v11;
        v11 = (v11 + 1);
      }
      while (*(_DWORD *)(a3 + v14) < *(_DWORD *)(a3 + 8 * v10));
      if (*(_DWORD *)(a3 + 8 * v11) <= v13)
      {
        v15 = (uint64_t *)(a4 + 16 * v10);
        v16 = v11;
        v17 = v11;
        do
        {
          v18 = (uint64_t *)(a4 + 16 * v16);
          v19.i64[0] = v15[1];
          v20.i64[0] = *v18;
          v19.i64[1] = v18[1];
          v20.i64[1] = *v15;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v20, v19))) & 1) == 0)
            this = (_QWORD *)internalABP::ABP_PairManager::addPair(v9, v10, v17);
          v16 = ++v17;
        }
        while (*(_DWORD *)(a3 + 8 * v16) <= v13);
      }
      ++v10;
    }
    while (v10 < v12 && v11 < a2);
  }
  return this;
}

_QWORD *internalABP::doBipartiteBoxPruning_Leaf(_QWORD *this, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v15;
  unsigned int i;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  unsigned int v40;

  v10 = this;
  this[7] = a9;
  this[8] = a10;
  this[9] = a2;
  if (a3 && a4)
  {
    v15 = 0;
    for (i = 0; i < a4; --i)
    {
      v17 = *(_DWORD *)(a5 + 8 * v15 + 4);
      v18 = i + 1;
      do
      {
        v19 = i;
        v20 = v18;
        v21 = *(_DWORD *)(a6 + 8 * i++);
        ++v18;
      }
      while (v21 < *(_DWORD *)(a5 + 8 * v15));
      if (v21 <= v17)
      {
        v22 = v19;
        v23 = (uint64_t *)(a7 + 16 * v15);
        do
        {
          v24 = (uint64_t *)(a8 + 16 * v22);
          v25.i64[0] = v23[1];
          v26.i64[0] = *v24;
          v25.i64[1] = v24[1];
          v26.i64[1] = *v23;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v26, v25))) & 1) == 0)
            this = (_QWORD *)internalABP::ABP_PairManager::addPair((uint64_t)v10, v15, v20 - 1);
          v22 = v20;
          v27 = *(_DWORD *)(a6 + 8 * v20++);
        }
        while (v27 <= v17);
      }
      if (++v15 >= (unint64_t)a3)
        break;
    }
    v28 = 0;
    v29 = 0;
    v10[7] = a10;
    v10[8] = a9;
    v10[9] = a2;
    do
    {
      v30 = *(_DWORD *)(a6 + 8 * v28 + 4);
      v31 = v29 + 1;
      do
      {
        v32 = v29;
        v33 = v31;
        v34 = *(_DWORD *)(a5 + 8 * v29++);
        ++v31;
      }
      while (v34 <= *(_DWORD *)(a6 + 8 * v28));
      if (v34 <= v30)
      {
        v35 = v32;
        v36 = (uint64_t *)(a8 + 16 * v28);
        do
        {
          v37 = (uint64_t *)(a7 + 16 * v35);
          v38.i64[0] = v36[1];
          v39.i64[0] = *v37;
          v38.i64[1] = v37[1];
          v39.i64[1] = *v36;
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_f32(v39, v38))) & 1) == 0)
            this = (_QWORD *)internalABP::ABP_PairManager::addPair((uint64_t)v10, v28, v33 - 1);
          v35 = v33;
          v40 = *(_DWORD *)(a5 + 8 * v33++);
        }
        while (v40 <= v30);
      }
      if (++v28 >= (unint64_t)a4)
        break;
      --v29;
    }
    while (v29 < a3);
  }
  else
  {
    this[7] = a10;
    this[8] = a9;
  }
  return this;
}

float32x4_t physx::Dy::PxcLtbFactor(unsigned __int16 *a1)
{
  float32x4_t *v1;
  int v2;
  uint64_t v3;
  float32x4_t v5;
  char *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x8_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  unsigned int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int8x8_t v33;
  int32x2_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  unsigned __int32 v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  int v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float32x2_t v86;
  int8x8_t v87;
  int32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  unsigned __int32 v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x2_t v96;
  int v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int8x8_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x2_t v146;
  int8x8_t v147;
  int32x2_t v148;
  float32x4_t v149;
  float32x2_t v150;
  float32x2_t v151;
  float32x2_t v152;
  unsigned __int32 v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x2_t v156;
  float32x2_t v157;
  int v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t *v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t *v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  int8x8_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  int8x16_t v227;
  float32x4_t v228;
  int8x16_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x2_t v237;
  float32x2_t v238;
  float32x2_t v239;
  int8x8_t v240;
  int32x2_t v241;
  float32x4_t v242;
  float32x2_t v243;
  int32x2_t v244;
  unsigned __int32 v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x2_t v249;
  float32x2_t v250;
  int v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  int8x16_t v291;
  int8x16_t v292;
  float32x2_t v293;
  float32x2_t v294;
  float32x2_t v295;
  int8x8_t v296;
  int32x2_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x2_t v301;
  float32x2_t v302;
  int v303;
  float32x2_t v304;
  int8x8_t v305;
  float32x4_t v306;
  float32x2_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  int8x8_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t result;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349[6];
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;

  v1 = (float32x4_t *)((char *)a1 + a1[8]);
  v2 = *a1;
  v3 = (v2 - 1);
  if (v2 != 1)
  {
    v5.i64[0] = 0x3F0000003F000000;
    v5.i64[1] = 0x3F0000003F000000;
    do
    {
      v6 = (char *)&v1[25 * v3];
      v7 = *((float32x4_t *)v6 + 6);
      v8 = *((float32x4_t *)v6 + 7);
      v9 = *((float32x4_t *)v6 + 8);
      *(int8x8_t *)v10.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 0), *(int8x8_t *)v8.f32, 4uLL);
      v10.i64[1] = v9.i64[0];
      v11 = vext_s8(*(int8x8_t *)v7.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v8.f32, 1), 4uLL);
      *(int32x2_t *)&v25.u32[2] = vdup_lane_s32(*(int32x2_t *)v9.f32, 1);
      *(int8x8_t *)v12.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v7, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL), 4uLL);
      v12.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
      v13 = vaddq_f32(v7, v10);
      v14 = vaddq_f32(v8, v25);
      v15 = vaddq_f32(v9, v12);
      v16 = vmulq_f32(v13, v5);
      v17 = v16;
      v17.i32[3] = 0;
      v18 = vmulq_f32(v14, v5);
      v19 = (int8x16_t)v18;
      v19.i32[3] = 0;
      v20 = vmulq_f32(v15, v5);
      v21 = (int8x16_t)v20;
      v21.i32[3] = 0;
      v22 = *((unsigned __int8 *)a1 + v3 + 64);
      v23 = *((float32x4_t *)v6 + 1);
      v24 = *((float32x4_t *)v6 + 2);
      *(int8x8_t *)v25.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v6, 0), *(int8x8_t *)v23.f32, 4uLL);
      *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v6, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v23.f32, 1), 4uLL);
      *(int32x2_t *)&v26.u32[2] = vdup_lane_s32(*(int32x2_t *)v24.f32, 1);
      *(int8x8_t *)v27.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)v6, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), 4uLL);
      v27.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
      v28 = vaddq_f32(v23, v26);
      v29 = vaddq_f32(v24, v27);
      v19.i64[0] = vextq_s8(v19, v19, 8uLL).u64[0];
      v30 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
      v31 = (float32x2_t)vext_s8(*(int8x8_t *)v20.f32, (int8x8_t)v30, 4uLL);
      v32 = (float32x2_t)vext_s8(*(int8x8_t *)v18.f32, *(int8x8_t *)v19.i8, 4uLL);
      v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v19.i8), *(float32x2_t *)v18.f32, v30);
      v34 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, v31), v32, *(float32x2_t *)v20.f32);
      *(int8x8_t *)v35.f32 = vext_s8((int8x8_t)v34, v33, 4uLL);
      v34.i32[1] = 0;
      v35.i64[1] = v34.u32[0];
      v36 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      v37 = (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v36, 4uLL);
      *(int32x2_t *)v39.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, v30), *(float32x2_t *)v20.f32, v36), 0);
      v38 = vmls_f32(vmul_f32(*(float32x2_t *)v20.f32, v37), v31, *(float32x2_t *)v16.f32).u32[0];
      v39.i64[1] = v38;
      v40 = vmulq_f32(v28, v5);
      v41 = vmulq_f32(v17, v35);
      v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
      v42 = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32);
      v43 = vrecpe_f32(v42);
      v44 = 4;
      do
      {
        v43 = vmul_f32(v43, vrecps_f32(v42, v43));
        --v44;
      }
      while (v44);
      v25.i64[1] = *((_QWORD *)v6 + 4);
      v45 = vmulq_f32(vaddq_f32(*(float32x4_t *)v6, v25), v5);
      v45.i32[3] = 0;
      v40.i32[3] = 0;
      v46 = vmulq_f32(v29, v5);
      v46.i32[3] = 0;
      v39.i32[0] = v33.i32[0];
      *(int8x8_t *)v47.f32 = vext_s8((int8x8_t)vdup_lane_s32(v34, 0), (int8x8_t)v38, 4uLL);
      *(float32x2_t *)&v47.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, v32), v37, *(float32x2_t *)v18.f32);
      v48 = vmulq_n_f32(v35, v43.f32[0]);
      v49 = vmulq_n_f32(v39, v43.f32[0]);
      v50 = *((float32x4_t *)v6 + 3);
      v51 = *((float32x4_t *)v6 + 4);
      v52 = vnegq_f32(v50);
      v52.i32[3] = 0;
      v53 = vnegq_f32(v51);
      v53.i32[3] = 0;
      v54 = *((float32x4_t *)v6 + 5);
      v55 = vnegq_f32(v54);
      v55.i32[3] = 0;
      v56 = vmulq_n_f32(v52, v48.f32[0]);
      v56.i32[3] = 0;
      v57 = vmulq_lane_f32(v53, *(float32x2_t *)v48.f32, 1);
      v57.i32[3] = 0;
      v58 = vmulq_laneq_f32(v55, v48, 2);
      v58.i32[3] = 0;
      v59 = vmulq_n_f32(v47, v43.f32[0]);
      v60 = vaddq_f32(vaddq_f32(v56, v57), v58);
      v61 = vmulq_n_f32(v52, v49.f32[0]);
      v61.i32[3] = 0;
      v62 = vmulq_lane_f32(v53, *(float32x2_t *)v49.f32, 1);
      v62.i32[3] = 0;
      v63 = vmulq_laneq_f32(v55, v49, 2);
      v63.i32[3] = 0;
      v64 = vmulq_n_f32(v52, v59.f32[0]);
      v64.i32[3] = 0;
      v65 = vmulq_lane_f32(v53, *(float32x2_t *)v59.f32, 1);
      v65.i32[3] = 0;
      v66 = vaddq_f32(v61, v62);
      v67 = vmulq_laneq_f32(v55, v59, 2);
      v67.i32[3] = 0;
      v68 = vaddq_f32(v66, v63);
      *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v50.f32, 0), *(int8x8_t *)v51.f32, 4uLL);
      v55.i64[1] = vdup_lane_s32(*(int32x2_t *)v54.f32, 0).u32[0];
      *(int8x8_t *)v62.f32 = vext_s8(*(int8x8_t *)v50.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v51.f32, 1), 4uLL);
      v62.i64[1] = vdup_lane_s32(*(int32x2_t *)v54.f32, 1).u32[0];
      v69 = vaddq_f32(vaddq_f32(v64, v65), v67);
      *(int8x8_t *)v50.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v50, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), 4uLL);
      v50.i64[1] = vdup_laneq_s32((int32x4_t)v54, 2).u32[0];
      v70 = vmulq_n_f32(v60, v55.f32[0]);
      v70.i32[3] = 0;
      v71 = vmulq_lane_f32(v68, *(float32x2_t *)v55.f32, 1);
      v71.i32[3] = 0;
      v72 = vmulq_laneq_f32(v69, v55, 2);
      v72.i32[3] = 0;
      v73 = vaddq_f32(v70, v71);
      v74 = vmulq_n_f32(v60, v62.f32[0]);
      v74.i32[3] = 0;
      v75 = vmulq_lane_f32(v68, *(float32x2_t *)v62.f32, 1);
      v75.i32[3] = 0;
      v76 = vmulq_laneq_f32(v69, v62, 2);
      v76.i32[3] = 0;
      v77 = vaddq_f32(v72, v73);
      v78 = vaddq_f32(v76, vaddq_f32(v74, v75));
      v79 = vmulq_n_f32(v60, v50.f32[0]);
      v79.i32[3] = 0;
      v80 = vmulq_lane_f32(v68, *(float32x2_t *)v50.f32, 1);
      v80.i32[3] = 0;
      v81 = vmulq_laneq_f32(v69, v50, 2);
      v81.i32[3] = 0;
      v82 = vaddq_f32(v81, vaddq_f32(v79, v80));
      v83 = vaddq_f32(v45, v77);
      v84 = (int8x16_t)vaddq_f32(v40, v78);
      v85 = (int8x16_t)vaddq_f32(v46, v82);
      v63.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
      v64.i64[0] = vextq_s8(v85, v85, 4uLL).u64[0];
      v86 = (float32x2_t)vextq_s8(v84, v84, 4uLL).u64[0];
      v87 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), *(float32x2_t *)v85.i8), *(float32x2_t *)v84.i8, *(float32x2_t *)v63.f32);
      v88 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v64.f32), v86, *(float32x2_t *)v85.i8);
      *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)v88, v87, 4uLL);
      v88.i32[1] = 0;
      v89.i64[1] = v88.u32[0];
      v90 = (float32x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL).u64[0];
      v91 = vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v83.f32);
      v92 = vmls_f32(vmul_f32(*(float32x2_t *)v85.i8, v90), *(float32x2_t *)v64.f32, *(float32x2_t *)v83.f32).u32[0];
      *(int32x2_t *)v93.f32 = vdup_lane_s32((int32x2_t)vmls_f32(v91, *(float32x2_t *)v85.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL)), 0);
      v93.i64[1] = v92;
      v94 = vmulq_f32(v83, v89);
      v94.i64[0] = vpaddq_f32(v94, v94).u64[0];
      v95 = vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32);
      v96 = vrecpe_f32(v95);
      v97 = 4;
      do
      {
        v96 = vmul_f32(v96, vrecps_f32(v95, v96));
        --v97;
      }
      while (v97);
      v48.i32[3] = 0;
      v49.i32[3] = 0;
      v59.i32[3] = 0;
      v93.i32[0] = v87.i32[0];
      v98 = vmls_f32(vmul_f32(*(float32x2_t *)v83.f32, v86), v90, *(float32x2_t *)v84.i8);
      *(int8x8_t *)v99.f32 = vext_s8((int8x8_t)vdup_lane_s32(v88, 0), (int8x8_t)v92, 4uLL);
      *(float32x2_t *)&v99.u32[2] = v98;
      v100 = vmulq_n_f32(v89, v96.f32[0]);
      v101 = vmulq_n_f32(v100, v60.f32[0]);
      v102 = vmulq_n_f32(v100, v68.f32[0]);
      v103 = v100;
      v103.i32[3] = 0;
      v104 = vmulq_n_f32(v100, v69.f32[0]);
      v105 = vmulq_n_f32(v93, v96.f32[0]);
      v106 = vmulq_lane_f32(v105, *(float32x2_t *)v60.f32, 1);
      v107 = vmulq_lane_f32(v105, *(float32x2_t *)v68.f32, 1);
      v108 = vmulq_lane_f32(v105, *(float32x2_t *)v69.f32, 1);
      v109 = v105;
      v109.i32[3] = 0;
      v110 = vmulq_n_f32(v99, v96.f32[0]);
      v111 = vmulq_laneq_f32(v110, v60, 2);
      v112 = vmulq_laneq_f32(v110, v68, 2);
      v113 = v110;
      v113.i32[3] = 0;
      v114 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v60, 2).u64[0];
      v101.i32[3] = 0;
      v106.i32[3] = 0;
      v111.i32[3] = 0;
      v115 = vmulq_laneq_f32(v110, v69, 2);
      v116 = vaddq_f32(v101, v106);
      v106.i64[0] = vdupq_lane_s32(*(int32x2_t *)v68.f32, 1).u64[0];
      v102.i32[3] = 0;
      v117 = vaddq_f32(v111, v116);
      v107.i32[3] = 0;
      v112.i32[3] = 0;
      v118 = vaddq_f32(v102, v107);
      v104.i32[3] = 0;
      v108.i32[3] = 0;
      v115.i32[3] = 0;
      v107.i64[0] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u64[0];
      *(int8x8_t *)v119.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v60.f32, 0), *(int8x8_t *)v68.f32, 4uLL);
      v119.i64[1] = vdupq_lane_s32(*(int32x2_t *)v69.f32, 0).u32[0];
      v120 = vaddq_f32(v112, v118);
      *(int8x8_t *)v121.f32 = vext_s8(*(int8x8_t *)v60.f32, *(int8x8_t *)v106.f32, 4uLL);
      v121.i64[1] = vdupq_lane_s32(*(int32x2_t *)v69.f32, 1).u32[0];
      v122 = vaddq_f32(v104, v108);
      *(int8x8_t *)v104.f32 = vext_s8(v114, *(int8x8_t *)v107.f32, 4uLL);
      v104.i64[1] = vdupq_laneq_s32((int32x4_t)v69, 2).u32[0];
      v123 = vmulq_n_f32(v119, v117.f32[0]);
      v123.i32[3] = 0;
      v124 = vmulq_lane_f32(v121, *(float32x2_t *)v117.f32, 1);
      v124.i32[3] = 0;
      v125 = vaddq_f32(v115, v122);
      v126 = vmulq_laneq_f32(v104, v117, 2);
      v126.i32[3] = 0;
      v127 = vaddq_f32(v126, vaddq_f32(v123, v124));
      v128 = vmulq_n_f32(v119, v120.f32[0]);
      v128.i32[3] = 0;
      v129 = vmulq_lane_f32(v121, *(float32x2_t *)v120.f32, 1);
      v129.i32[3] = 0;
      v130 = vmulq_laneq_f32(v104, v120, 2);
      v130.i32[3] = 0;
      v131 = vaddq_f32(v130, vaddq_f32(v128, v129));
      v132 = vmulq_n_f32(v119, v125.f32[0]);
      v132.i32[3] = 0;
      v133 = vmulq_lane_f32(v121, *(float32x2_t *)v125.f32, 1);
      v133.i32[3] = 0;
      v134 = vmulq_laneq_f32(v104, v125, 2);
      v134.i32[3] = 0;
      v348 = v103;
      v349[0] = v103;
      v346 = v113;
      v347 = v109;
      v349[1] = v109;
      v349[2] = v113;
      v344 = v120;
      v345 = v117;
      v349[3] = v117;
      v349[4] = v120;
      v342 = vaddq_f32(v59, vaddq_f32(v134, vaddq_f32(v132, v133)));
      v343 = v125;
      v349[5] = v125;
      v350 = vaddq_f32(v48, v127);
      v340 = vaddq_f32(v49, v131);
      v341 = v350;
      v351 = v340;
      v352 = v342;
      *(int8x8_t *)v135.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v349, (float32x2_t *)&v1[25 * v3 + 15], &v1[25 * v3 + 15]);
      v136 = vnegq_f32(v135);
      v137 = v136;
      v137.i32[3] = 0;
      v139 = vnegq_f32(v138);
      v140 = (int8x16_t)v139;
      v140.i32[3] = 0;
      v142 = vnegq_f32(v141);
      v143 = (int8x16_t)v142;
      v143.i32[3] = 0;
      v140.i64[0] = vextq_s8(v140, v140, 8uLL).u64[0];
      v144 = (float32x2_t)vextq_s8(v143, v143, 8uLL).u64[0];
      v145 = (float32x2_t)vext_s8(*(int8x8_t *)v142.f32, (int8x8_t)v144, 4uLL);
      v146 = (float32x2_t)vext_s8(*(int8x8_t *)v139.f32, *(int8x8_t *)v140.i8, 4uLL);
      v147 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v140.i8), *(float32x2_t *)v139.f32, v144);
      v148 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v139.f32, v145), v146, *(float32x2_t *)v142.f32);
      *(int8x8_t *)v149.f32 = vext_s8((int8x8_t)v148, v147, 4uLL);
      v148.i32[1] = 0;
      v149.i64[1] = v148.u32[0];
      v150 = (float32x2_t)vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
      v151 = (float32x2_t)vext_s8(*(int8x8_t *)v136.f32, (int8x8_t)v150, 4uLL);
      v152 = vmul_f32(*(float32x2_t *)v136.f32, v144);
      v153 = vmls_f32(vmul_f32(*(float32x2_t *)v142.f32, v151), v145, *(float32x2_t *)v136.f32).u32[0];
      *(int32x2_t *)v154.f32 = vdup_lane_s32((int32x2_t)vmls_f32(v152, *(float32x2_t *)v142.f32, v150), 0);
      v154.i64[1] = v153;
      v155 = vmulq_f32(v137, v149);
      v155.i64[0] = vpaddq_f32(v155, v155).u64[0];
      v156 = vpadd_f32(*(float32x2_t *)v155.f32, *(float32x2_t *)v155.f32);
      v157 = vrecpe_f32(v156);
      v158 = 4;
      do
      {
        v157 = vmul_f32(v157, vrecps_f32(v156, v157));
        --v158;
      }
      while (v158);
      v154.i32[0] = v147.i32[0];
      *(int8x8_t *)v159.f32 = vext_s8((int8x8_t)vdup_lane_s32(v148, 0), (int8x8_t)v153, 4uLL);
      *(float32x2_t *)&v159.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v136.f32, v146), v151, *(float32x2_t *)v139.f32);
      v160 = vmulq_n_f32(v149, v157.f32[0]);
      v161 = &v1[25 * v3];
      v163 = v161[9];
      v162 = v161[10];
      v165 = v161[11];
      v164 = v161[12];
      v167 = v161[13];
      v166 = v161[14];
      v168 = vmulq_laneq_f32(v167, v160, 2);
      v168.i32[3] = 0;
      v169 = vmlaq_lane_f32(v168, v165, *(float32x2_t *)v160.f32, 1);
      v169.i64[1] = vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL).u32[0];
      v170 = vmlaq_n_f32(v169, v163, v160.f32[0]);
      v171 = vmulq_laneq_f32(v166, v160, 2);
      v171.i32[3] = 0;
      v172 = vmlaq_lane_f32(v171, v164, *(float32x2_t *)v160.f32, 1);
      v172.i64[1] = vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL).u32[0];
      v173 = vmlaq_n_f32(v172, v162, v160.f32[0]);
      v160.i32[3] = 0;
      v174 = vmulq_n_f32(v154, v157.f32[0]);
      v175 = vmulq_laneq_f32(v167, v174, 2);
      v175.i32[3] = 0;
      v176 = vmlaq_lane_f32(v175, v165, *(float32x2_t *)v174.f32, 1);
      v176.i64[1] = vextq_s8((int8x16_t)v176, (int8x16_t)v176, 8uLL).u32[0];
      v177 = vmlaq_n_f32(v176, v163, v174.f32[0]);
      v178 = vmulq_laneq_f32(v166, v174, 2);
      v178.i32[3] = 0;
      v179 = vmlaq_lane_f32(v178, v164, *(float32x2_t *)v174.f32, 1);
      v179.i64[1] = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u32[0];
      v180 = vmlaq_n_f32(v179, v162, v174.f32[0]);
      v174.i32[3] = 0;
      v181 = vmulq_n_f32(v159, v157.f32[0]);
      v182 = vmulq_laneq_f32(v167, v181, 2);
      v182.i32[3] = 0;
      v183 = vmlaq_lane_f32(v182, v165, *(float32x2_t *)v181.f32, 1);
      v183.i64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u32[0];
      v184 = vmlaq_n_f32(v183, v163, v181.f32[0]);
      v185 = vmulq_laneq_f32(v166, v181, 2);
      v185.i32[3] = 0;
      v186 = vmlaq_lane_f32(v185, v164, *(float32x2_t *)v181.f32, 1);
      v186.i64[1] = vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u32[0];
      v187 = vmlaq_n_f32(v186, v162, v181.f32[0]);
      v181.i32[3] = 0;
      *(float32x4_t *)v6 = v348;
      *((float32x4_t *)v6 + 1) = v347;
      *((float32x4_t *)v6 + 2) = v346;
      *((float32x4_t *)v6 + 3) = v345;
      *((float32x4_t *)v6 + 4) = v344;
      *((float32x4_t *)v6 + 5) = v343;
      v170.i64[1] = vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL).u32[0];
      v177.i64[1] = vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u32[0];
      *((float32x4_t *)v6 + 6) = v341;
      *((float32x4_t *)v6 + 7) = v340;
      v184.i64[1] = vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL).u32[0];
      *((float32x4_t *)v6 + 8) = v342;
      v173.i64[1] = vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL).u32[0];
      v188 = &v1[25 * v22];
      v180.i64[1] = vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL).u32[0];
      v187.i64[1] = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u32[0];
      v189 = vmlsq_lane_f32(*v188, v170, *(float32x2_t *)v163.f32, 0);
      v189.i64[1] = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u32[0];
      v190 = vmlsq_lane_f32(v188[3], v170, *(float32x2_t *)v162.f32, 0);
      v190.i64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u32[0];
      v191 = vmlsq_lane_f32(v188[6], v173, *(float32x2_t *)v162.f32, 0);
      v191.i64[1] = vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL).u32[0];
      v192 = vmlsq_lane_f32(v188[1], v170, *(float32x2_t *)v163.f32, 1);
      v192.i64[1] = vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL).u32[0];
      v193 = vmlsq_lane_f32(v188[4], v170, *(float32x2_t *)v162.f32, 1);
      v193.i64[1] = vextq_s8((int8x16_t)v193, (int8x16_t)v193, 8uLL).u32[0];
      v194 = vmlsq_lane_f32(v188[7], v173, *(float32x2_t *)v162.f32, 1);
      v194.i64[1] = vextq_s8((int8x16_t)v194, (int8x16_t)v194, 8uLL).u32[0];
      v195 = vmlsq_laneq_f32(v188[2], v170, v163, 2);
      v195.i64[1] = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u32[0];
      v196 = vmlsq_laneq_f32(v188[5], v170, v162, 2);
      v196.i64[1] = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u32[0];
      v197 = vmlsq_laneq_f32(v188[8], v173, v162, 2);
      v197.i64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u32[0];
      v198 = vmlsq_lane_f32(v189, v177, *(float32x2_t *)v165.f32, 0);
      v198.i64[1] = vextq_s8((int8x16_t)v198, (int8x16_t)v198, 8uLL).u32[0];
      v199 = vmlsq_lane_f32(v190, v177, *(float32x2_t *)v164.f32, 0);
      v199.i64[1] = vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL).u32[0];
      v200 = vmlsq_lane_f32(v191, v180, *(float32x2_t *)v164.f32, 0);
      v200.i64[1] = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u32[0];
      v201 = vmlsq_lane_f32(v192, v177, *(float32x2_t *)v165.f32, 1);
      v201.i64[1] = vextq_s8((int8x16_t)v201, (int8x16_t)v201, 8uLL).u32[0];
      v202 = vmlsq_lane_f32(v193, v177, *(float32x2_t *)v164.f32, 1);
      v202.i64[1] = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u32[0];
      v203 = vmlsq_lane_f32(v194, v180, *(float32x2_t *)v164.f32, 1);
      v203.i64[1] = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u32[0];
      v204 = vmlsq_laneq_f32(v195, v177, v165, 2);
      v204.i64[1] = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u32[0];
      v205 = vmlsq_laneq_f32(v196, v177, v164, 2);
      v205.i64[1] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u32[0];
      v206 = vmlsq_laneq_f32(v197, v180, v164, 2);
      v206.i64[1] = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u32[0];
      v207 = (int8x16_t)vmlsq_lane_f32(v198, v184, *(float32x2_t *)v167.f32, 0);
      v207.i64[1] = vextq_s8(v207, v207, 8uLL).u32[0];
      v208 = (int8x16_t)vmlsq_lane_f32(v199, v184, *(float32x2_t *)v166.f32, 0);
      v208.i64[1] = vextq_s8(v208, v208, 8uLL).u32[0];
      v209 = (int8x16_t)vmlsq_lane_f32(v200, v187, *(float32x2_t *)v166.f32, 0);
      v209.i64[1] = vextq_s8(v209, v209, 8uLL).u32[0];
      v210 = (int8x16_t)vmlsq_lane_f32(v201, v184, *(float32x2_t *)v167.f32, 1);
      v210.i64[1] = vextq_s8(v210, v210, 8uLL).u32[0];
      v211 = (int8x16_t)vmlsq_lane_f32(v202, v184, *(float32x2_t *)v166.f32, 1);
      v211.i64[1] = vextq_s8(v211, v211, 8uLL).u32[0];
      v212 = (int8x16_t)vmlsq_lane_f32(v203, v187, *(float32x2_t *)v166.f32, 1);
      v212.i64[1] = vextq_s8(v212, v212, 8uLL).u32[0];
      v213 = (int8x16_t)vmlsq_laneq_f32(v204, v184, v167, 2);
      v213.i64[1] = vextq_s8(v213, v213, 8uLL).u32[0];
      v214 = (int8x16_t)vmlsq_laneq_f32(v205, v184, v166, 2);
      v214.i64[1] = vextq_s8(v214, v214, 8uLL).u32[0];
      v215 = (int8x16_t)vmlsq_laneq_f32(v206, v187, v166, 2);
      v215.i64[1] = vextq_s8(v215, v215, 8uLL).u32[0];
      v161[9] = v170;
      v161[10] = v173;
      v161[11] = v177;
      v161[12] = v180;
      v161[13] = v184;
      v161[14] = v187;
      *v188 = (float32x4_t)v207;
      v188[1] = (float32x4_t)v210;
      v188[2] = (float32x4_t)v213;
      v188[3] = (float32x4_t)v208;
      v188[4] = (float32x4_t)v211;
      v188[5] = (float32x4_t)v214;
      v188[6] = (float32x4_t)v209;
      v188[7] = (float32x4_t)v212;
      v188[8] = (float32x4_t)v215;
      v161[21] = v160;
      v161[22] = v174;
      v161[23] = v181;
      --v3;
      v5.i64[0] = 0x3F0000003F000000;
      v5.i64[1] = 0x3F0000003F000000;
    }
    while ((_DWORD)v3);
  }
  v216 = v1[6];
  v217 = v1[7];
  v218 = v1[8];
  *(int8x8_t *)v219.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v216.f32, 0), *(int8x8_t *)v217.f32, 4uLL);
  v219.i64[1] = v218.i64[0];
  v220 = vext_s8(*(int8x8_t *)v216.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v217.f32, 1), 4uLL);
  *(int32x2_t *)&v232.u32[2] = vdup_lane_s32(*(int32x2_t *)v218.f32, 1);
  *(int8x8_t *)v221.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v216, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL), 4uLL);
  v221.i64[1] = vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u64[0];
  v222 = vaddq_f32(v216, v219);
  v223 = vaddq_f32(v218, v221);
  v221.i64[0] = 0x3F0000003F000000;
  v221.i64[1] = 0x3F0000003F000000;
  v224 = vmulq_f32(v222, v221);
  v225 = v224;
  v225.i32[3] = 0;
  v226 = vmulq_f32(vaddq_f32(v217, v232), v221);
  v227 = (int8x16_t)v226;
  v227.i32[3] = 0;
  v228 = vmulq_f32(v223, v221);
  v229 = (int8x16_t)v228;
  v229.i32[3] = 0;
  v230 = v1[1];
  v231 = v1[2];
  *(int8x8_t *)v232.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v1->f32, 0), *(int8x8_t *)v230.f32, 4uLL);
  *(int8x8_t *)v233.f32 = vext_s8(*(int8x8_t *)v1->f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v230.f32, 1), 4uLL);
  *(int32x2_t *)&v233.u32[2] = vdup_lane_s32(*(int32x2_t *)v231.f32, 1);
  *(int8x8_t *)v234.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)v1, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL), 4uLL);
  v234.i64[1] = vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL).u64[0];
  v235 = vaddq_f32(v230, v233);
  v236 = vaddq_f32(v231, v234);
  v227.i64[0] = vextq_s8(v227, v227, 8uLL).u64[0];
  v237 = (float32x2_t)vextq_s8(v229, v229, 8uLL).u64[0];
  v238 = (float32x2_t)vext_s8(*(int8x8_t *)v228.f32, (int8x8_t)v237, 4uLL);
  v239 = (float32x2_t)vext_s8(*(int8x8_t *)v226.f32, *(int8x8_t *)v227.i8, 4uLL);
  v240 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v227.i8), *(float32x2_t *)v226.f32, v237);
  v241 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v226.f32, v238), v239, *(float32x2_t *)v228.f32);
  *(int8x8_t *)v242.f32 = vext_s8((int8x8_t)v241, v240, 4uLL);
  v241.i32[1] = 0;
  v242.i64[1] = v241.u32[0];
  v227.i64[0] = vextq_s8((int8x16_t)v225, (int8x16_t)v225, 8uLL).u64[0];
  v243 = (float32x2_t)vext_s8(*(int8x8_t *)v224.f32, *(int8x8_t *)v227.i8, 4uLL);
  v244 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v224.f32, v237), *(float32x2_t *)v228.f32, *(float32x2_t *)v227.i8);
  v245 = vmls_f32(vmul_f32(*(float32x2_t *)v228.f32, v243), v238, *(float32x2_t *)v224.f32).u32[0];
  *(int32x2_t *)v246.f32 = vdup_lane_s32(v244, 0);
  v246.i64[1] = v245;
  v247 = vmulq_f32(v235, v221);
  v248 = vmulq_f32(v225, v242);
  v248.i64[0] = vpaddq_f32(v248, v248).u64[0];
  v249 = vpadd_f32(*(float32x2_t *)v248.f32, *(float32x2_t *)v248.f32);
  v250 = vrecpe_f32(v249);
  v251 = 4;
  do
  {
    v250 = vmul_f32(v250, vrecps_f32(v249, v250));
    --v251;
  }
  while (v251);
  v232.i64[1] = v1[2].i64[0];
  v252.i64[0] = 0x3F0000003F000000;
  v252.i64[1] = 0x3F0000003F000000;
  v253 = vmulq_f32(vaddq_f32(*v1, v232), v252);
  v253.i32[3] = 0;
  v254 = vmulq_f32(v236, v252);
  v247.i32[3] = 0;
  v254.i32[3] = 0;
  v246.i32[0] = v240.i32[0];
  *(int8x8_t *)v255.f32 = vext_s8((int8x8_t)vdup_lane_s32(v241, 0), (int8x8_t)v245, 4uLL);
  *(float32x2_t *)&v255.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v224.f32, v239), v243, *(float32x2_t *)v226.f32);
  v256 = vmulq_n_f32(v242, v250.f32[0]);
  v257 = vmulq_n_f32(v246, v250.f32[0]);
  v258 = v1[3];
  v259 = v1[4];
  v260 = vnegq_f32(v258);
  v260.i32[3] = 0;
  v261 = vnegq_f32(v259);
  v261.i32[3] = 0;
  v262 = vmulq_n_f32(v255, v250.f32[0]);
  v263 = v1[5];
  v264 = vnegq_f32(v263);
  v264.i32[3] = 0;
  v265 = vmulq_n_f32(v260, v256.f32[0]);
  v265.i32[3] = 0;
  v266 = vmulq_lane_f32(v261, *(float32x2_t *)v256.f32, 1);
  v266.i32[3] = 0;
  v267 = vmulq_laneq_f32(v264, v256, 2);
  v267.i32[3] = 0;
  v268 = vaddq_f32(v265, v266);
  v269 = vmulq_n_f32(v260, v257.f32[0]);
  v269.i32[3] = 0;
  v270 = vmulq_lane_f32(v261, *(float32x2_t *)v257.f32, 1);
  v270.i32[3] = 0;
  v271 = vmulq_laneq_f32(v264, v257, 2);
  v271.i32[3] = 0;
  v272 = vaddq_f32(v268, v267);
  v273 = vaddq_f32(vaddq_f32(v269, v270), v271);
  v274 = vmulq_n_f32(v260, v262.f32[0]);
  v274.i32[3] = 0;
  v275 = vmulq_lane_f32(v261, *(float32x2_t *)v262.f32, 1);
  v275.i32[3] = 0;
  v276 = vmulq_laneq_f32(v264, v262, 2);
  v276.i32[3] = 0;
  v277 = vaddq_f32(v274, v275);
  *(int8x8_t *)v275.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v258.f32, 0), *(int8x8_t *)v259.f32, 4uLL);
  v275.i64[1] = vdup_lane_s32(*(int32x2_t *)v263.f32, 0).u32[0];
  v278 = vaddq_f32(v277, v276);
  *(int8x8_t *)v267.f32 = vext_s8(*(int8x8_t *)v258.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v259.f32, 1), 4uLL);
  v267.i64[1] = vdup_lane_s32(*(int32x2_t *)v263.f32, 1).u32[0];
  *(int8x8_t *)v258.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v258, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v259, (int8x16_t)v259, 8uLL), 4uLL);
  v258.i64[1] = vdup_laneq_s32((int32x4_t)v263, 2).u32[0];
  v279 = vmulq_n_f32(v272, v275.f32[0]);
  v279.i32[3] = 0;
  v280 = vmulq_lane_f32(v273, *(float32x2_t *)v275.f32, 1);
  v280.i32[3] = 0;
  v281 = vmulq_laneq_f32(v278, v275, 2);
  v281.i32[3] = 0;
  v282 = vaddq_f32(v281, vaddq_f32(v279, v280));
  v283 = vmulq_n_f32(v272, v267.f32[0]);
  v283.i32[3] = 0;
  v284 = vmulq_lane_f32(v273, *(float32x2_t *)v267.f32, 1);
  v284.i32[3] = 0;
  v285 = vmulq_laneq_f32(v278, v267, 2);
  v285.i32[3] = 0;
  v286 = vaddq_f32(v283, v284);
  v287 = vmulq_n_f32(v272, v258.f32[0]);
  v287.i32[3] = 0;
  v288 = vmulq_lane_f32(v273, *(float32x2_t *)v258.f32, 1);
  v288.i32[3] = 0;
  v289 = vmulq_laneq_f32(v278, v258, 2);
  v289.i32[3] = 0;
  v290 = vaddq_f32(v289, vaddq_f32(v287, v288));
  v291 = (int8x16_t)vaddq_f32(v247, vaddq_f32(v285, v286));
  v292 = (int8x16_t)vaddq_f32(v254, v290);
  v293 = (float32x2_t)vextq_s8(v292, v292, 8uLL).u64[0];
  v294 = (float32x2_t)vextq_s8(v292, v292, 4uLL).u64[0];
  v295 = (float32x2_t)vextq_s8(v291, v291, 4uLL).u64[0];
  v296 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v291, v291, 8uLL), *(float32x2_t *)v292.i8), *(float32x2_t *)v291.i8, v293);
  v297 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v291.i8, v294), v295, *(float32x2_t *)v292.i8);
  *(int8x8_t *)v298.f32 = vext_s8((int8x8_t)v297, v296, 4uLL);
  v297.i32[1] = 0;
  v298.i64[1] = v297.u32[0];
  v299 = vaddq_f32(v253, v282);
  v300 = vmulq_f32(v299, v298);
  v300.i64[0] = vpaddq_f32(v300, v300).u64[0];
  v301 = vpadd_f32(*(float32x2_t *)v300.f32, *(float32x2_t *)v300.f32);
  v302 = vrecpe_f32(v301);
  v303 = 4;
  do
  {
    v302 = vmul_f32(v302, vrecps_f32(v301, v302));
    --v303;
  }
  while (v303);
  v304 = (float32x2_t)vextq_s8((int8x16_t)v299, (int8x16_t)v299, 4uLL).u64[0];
  v305 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v292.i8, v304), v294, *(float32x2_t *)v299.f32);
  *(int32x2_t *)v306.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(v293, *(float32x2_t *)v299.f32), *(float32x2_t *)v292.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL)), 0);
  *(int8x8_t *)&v306.u32[2] = v305;
  v262.i32[3] = 0;
  v257.i32[3] = 0;
  v256.i32[3] = 0;
  v307 = vmls_f32(vmul_f32(*(float32x2_t *)v299.f32, v295), v304, *(float32x2_t *)v291.i8);
  v306.i32[0] = v296.i32[0];
  *(int8x8_t *)v308.f32 = vext_s8((int8x8_t)vdup_lane_s32(v297, 0), v305, 4uLL);
  *(float32x2_t *)&v308.u32[2] = v307;
  v309 = vmulq_n_f32(v298, v302.f32[0]);
  v310 = vmulq_n_f32(v309, v272.f32[0]);
  v311 = vmulq_n_f32(v309, v273.f32[0]);
  v312 = vmulq_n_f32(v309, v278.f32[0]);
  v309.i32[3] = 0;
  v313 = vmulq_n_f32(v306, v302.f32[0]);
  v314 = vmulq_lane_f32(v313, *(float32x2_t *)v272.f32, 1);
  v315 = vmulq_lane_f32(v313, *(float32x2_t *)v273.f32, 1);
  v316 = vmulq_lane_f32(v313, *(float32x2_t *)v278.f32, 1);
  v313.i32[3] = 0;
  v317 = vmulq_n_f32(v308, v302.f32[0]);
  v318 = vmulq_laneq_f32(v317, v272, 2);
  v319 = vmulq_laneq_f32(v317, v273, 2);
  v320 = v317;
  v320.i32[3] = 0;
  v321 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v272, 2).u64[0];
  v310.i32[3] = 0;
  v314.i32[3] = 0;
  v322 = vmulq_laneq_f32(v317, v278, 2);
  v318.i32[3] = 0;
  v323 = vaddq_f32(v310, v314);
  v310.i64[0] = vdupq_lane_s32(*(int32x2_t *)v273.f32, 1).u64[0];
  v324 = vaddq_f32(v318, v323);
  v314.i64[0] = vextq_s8((int8x16_t)v273, (int8x16_t)v273, 8uLL).u64[0];
  v311.i32[3] = 0;
  v315.i32[3] = 0;
  v319.i32[3] = 0;
  v325 = vaddq_f32(v319, vaddq_f32(v311, v315));
  v312.i32[3] = 0;
  v316.i32[3] = 0;
  v322.i32[3] = 0;
  *(int8x8_t *)v326.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v272.f32, 0), *(int8x8_t *)v273.f32, 4uLL);
  v326.i64[1] = vdupq_lane_s32(*(int32x2_t *)v278.f32, 0).u32[0];
  v327 = vaddq_f32(v322, vaddq_f32(v312, v316));
  *(int8x8_t *)v328.f32 = vext_s8(*(int8x8_t *)v272.f32, *(int8x8_t *)v310.f32, 4uLL);
  v328.i64[1] = vdupq_lane_s32(*(int32x2_t *)v278.f32, 1).u32[0];
  *(int8x8_t *)v310.f32 = vext_s8(v321, *(int8x8_t *)v314.f32, 4uLL);
  v310.i64[1] = vdupq_laneq_s32((int32x4_t)v278, 2).u32[0];
  v329 = vmulq_n_f32(v326, v324.f32[0]);
  v329.i32[3] = 0;
  v330 = vmulq_lane_f32(v328, *(float32x2_t *)v324.f32, 1);
  v330.i32[3] = 0;
  v331 = vmulq_laneq_f32(v310, v324, 2);
  v331.i32[3] = 0;
  v332 = vaddq_f32(v331, vaddq_f32(v329, v330));
  v333 = vmulq_n_f32(v326, v325.f32[0]);
  v333.i32[3] = 0;
  v334 = vmulq_lane_f32(v328, *(float32x2_t *)v325.f32, 1);
  v334.i32[3] = 0;
  v335 = vmulq_laneq_f32(v310, v325, 2);
  v335.i32[3] = 0;
  v336 = vmulq_n_f32(v326, v327.f32[0]);
  v336.i32[3] = 0;
  v337 = vmulq_lane_f32(v328, *(float32x2_t *)v327.f32, 1);
  v337.i32[3] = 0;
  v338 = vmulq_laneq_f32(v310, v327, 2);
  v338.i32[3] = 0;
  result = vaddq_f32(v257, vaddq_f32(v335, vaddq_f32(v333, v334)));
  *v1 = v309;
  v1[1] = v313;
  v1[2] = v320;
  v1[3] = v324;
  v1[4] = v325;
  v1[5] = v327;
  v1[6] = vaddq_f32(v256, v332);
  v1[7] = result;
  v1[8] = vaddq_f32(v262, vaddq_f32(v338, vaddq_f32(v336, v337)));
  return result;
}

int8x8_t physx::Dy::ArticulationFnsSimdBase::computeSIS(float32x4_t *a1, float32x2_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x8_t result;

  v3 = *(float32x4_t *)a2[2].f32;
  v5 = *(float32x4_t *)a2[4].f32;
  v4 = *(float32x4_t *)a2[6].f32;
  v7 = *(float32x4_t *)a2[8].f32;
  v6 = *(float32x4_t *)a2[10].f32;
  v8 = a1[1];
  v9 = vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2->f32));
  v9.i32[3] = 0;
  v10 = vmulq_lane_f32(v8, *a2, 1);
  v10.i32[3] = 0;
  v12 = a1[2];
  v11 = a1[3];
  v13 = vmulq_laneq_f32(v12, *(float32x4_t *)a2->f32, 2);
  v13.i32[3] = 0;
  v14 = vaddq_f32(vaddq_f32(v9, v10), v13);
  v15 = vmulq_n_f32(v11, v3.f32[0]);
  v15.i32[3] = 0;
  v16 = a1[4];
  v17 = a1[5];
  v18 = vmulq_lane_f32(v16, *(float32x2_t *)v3.f32, 1);
  v18.i32[3] = 0;
  v19 = vmulq_laneq_f32(v17, v3, 2);
  v19.i32[3] = 0;
  v20 = vaddq_f32(vaddq_f32(v15, v18), v19);
  v21 = vmulq_f32(*(float32x4_t *)a2->f32, v11);
  v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
  v22 = vmulq_f32(*(float32x4_t *)a2->f32, v16);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  v23 = vmulq_f32(*(float32x4_t *)a2->f32, v17);
  v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
  *(int8x8_t *)v21.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), 4uLL);
  v21.i64[1] = vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32).u32[0];
  v24 = a1[6];
  v25 = a1[7];
  v26 = vmulq_n_f32(v24, v3.f32[0]);
  v26.i32[3] = 0;
  v27 = vmulq_lane_f32(v25, *(float32x2_t *)v3.f32, 1);
  v27.i32[3] = 0;
  v28 = vaddq_f32(v14, v20);
  v29 = a1[8];
  v30 = vmulq_laneq_f32(v29, v3, 2);
  v30.i32[3] = 0;
  v31 = vaddq_f32(vaddq_f32(vaddq_f32(v26, v27), v30), v21);
  v32 = vmulq_n_f32(*a1, v5.f32[0]);
  v32.i32[3] = 0;
  v33 = vmulq_lane_f32(v8, *(float32x2_t *)v5.f32, 1);
  v33.i32[3] = 0;
  v34 = vmulq_laneq_f32(v12, v5, 2);
  v34.i32[3] = 0;
  v35 = vaddq_f32(v32, v33);
  v36 = vmulq_n_f32(v11, v4.f32[0]);
  v36.i32[3] = 0;
  v37 = vmulq_lane_f32(v16, *(float32x2_t *)v4.f32, 1);
  v37.i32[3] = 0;
  v38 = vaddq_f32(v35, v34);
  v39 = vmulq_laneq_f32(v17, v4, 2);
  v39.i32[3] = 0;
  v40 = vaddq_f32(v38, vaddq_f32(vaddq_f32(v36, v37), v39));
  v41 = vmulq_f32(v5, v11);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  v42 = vmulq_f32(v5, v16);
  v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
  v43 = vmulq_f32(v5, v17);
  v43.i64[0] = vpaddq_f32(v43, v43).u64[0];
  *(int8x8_t *)v41.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v42.f32), 4uLL);
  v41.i64[1] = vpadd_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32).u32[0];
  v44 = vmulq_n_f32(v24, v4.f32[0]);
  v44.i32[3] = 0;
  v45 = vmulq_lane_f32(v25, *(float32x2_t *)v4.f32, 1);
  v45.i32[3] = 0;
  v46 = vmulq_laneq_f32(v29, v4, 2);
  v46.i32[3] = 0;
  v47 = vaddq_f32(vaddq_f32(vaddq_f32(v44, v45), v46), v41);
  v48 = vmulq_n_f32(*a1, v7.f32[0]);
  v48.i32[3] = 0;
  v49 = vmulq_lane_f32(v8, *(float32x2_t *)v7.f32, 1);
  v49.i32[3] = 0;
  v50 = vmulq_laneq_f32(v12, v7, 2);
  v50.i32[3] = 0;
  v51 = vaddq_f32(vaddq_f32(v48, v49), v50);
  v52 = vmulq_n_f32(v11, v6.f32[0]);
  v52.i32[3] = 0;
  v53 = vmulq_lane_f32(v16, *(float32x2_t *)v6.f32, 1);
  v53.i32[3] = 0;
  v54 = vmulq_laneq_f32(v17, v6, 2);
  v54.i32[3] = 0;
  v55 = vaddq_f32(vaddq_f32(v52, v53), v54);
  v56 = vmulq_f32(v7, v11);
  v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
  v57 = vmulq_f32(v7, v16);
  v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
  v58 = vmulq_f32(v7, v17);
  v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
  *(int8x8_t *)v57.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), 4uLL);
  v57.i64[1] = vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32).u32[0];
  v59 = vmulq_n_f32(v24, v6.f32[0]);
  v59.i32[3] = 0;
  v60 = vmulq_lane_f32(v25, *(float32x2_t *)v6.f32, 1);
  v60.i32[3] = 0;
  v61 = vmulq_laneq_f32(v29, v6, 2);
  v61.i32[3] = 0;
  v62 = vaddq_f32(v51, v55);
  v63 = vaddq_f32(vaddq_f32(vaddq_f32(v59, v60), v61), v57);
  v64 = vmulq_f32(*(float32x4_t *)a2->f32, v28);
  v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
  v65 = vmulq_f32(v3, v31);
  v65.i64[0] = vpaddq_f32(v65, v65).u64[0];
  *(float32x2_t *)v64.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32), vpadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v65.f32));
  v66 = vmulq_f32(*(float32x4_t *)a2->f32, v40);
  v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
  v67 = vmulq_f32(v3, v47);
  v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
  *a3 = v28;
  a3[1] = v31;
  a3[2] = v40;
  a3[3] = v47;
  result = vext_s8(*(int8x8_t *)v64.f32, (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32), vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32)), 4uLL);
  a3[4] = v62;
  a3[5] = v63;
  return result;
}

void physx::Dy::Articulation::~Articulation(physx::Dy::Articulation *this)
{
  int v2;
  int v4;
  int v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  *(_QWORD *)this = &off_24ED8C8F8;
  v2 = *((_DWORD *)this + 69);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 33) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 65);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 31) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 29) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 57);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 27))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 25))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 49);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 23))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((_DWORD *)this + 45);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 21))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)this = off_24ED8CA88;
  v12 = *((_DWORD *)this + 39);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 18))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  physx::Dy::Articulation::~Articulation(this);
  JUMPOUT(0x2276933ACLL);
}

BOOL physx::Dy::Articulation::resize(physx::Dy::Articulation *this, uint64_t a2)
{
  int v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;

  v2 = *((unsigned __int8 *)this + 160);
  if (*((_BYTE *)this + 160))
  {
    v5 = *((unsigned __int8 *)this + 140);
    if (v5 != (_DWORD)a2)
    {
      v13 = 0;
      v12 = 0;
      (*(void (**)(physx::Dy::Articulation *, uint64_t, char *, uint64_t *, unsigned int *))(*(_QWORD *)this + 48))(this, a2, (char *)&v13 + 4, &v13, &v12);
      LOBYTE(v9) = 0;
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resize((uint64_t)this + 168, v13, &v9);
      v9 = xmmword_2260E5F10;
      v10 = xmmword_2260E5F20;
      v11 = xmmword_2260E5F40;
      physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::resize((uint64_t)this + 200, a2, &v9);
      v9 = xmmword_2260E5F10;
      v10 = xmmword_2260E5F20;
      v11 = xmmword_2260E5F40;
      physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::resize((uint64_t)this + 184, a2, &v9);
      v9 = xmmword_2260E5D70;
      *(_QWORD *)&v10 = 0;
      DWORD2(v10) = 0;
      physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::resize((uint64_t)this + 232, a2, (uint64_t)&v9);
      v9 = xmmword_2260E5D70;
      physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::resize((uint64_t)this + 248, a2, &v9);
      v6 = *((_QWORD *)this + 23);
      *((_QWORD *)this + 12) = *((_QWORD *)this + 25);
      *((_QWORD *)this + 13) = v6;
      LOBYTE(v9) = 0;
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resize((uint64_t)this + 216, v12, &v9);
      *((_QWORD *)this + 16) = *((_QWORD *)this + 27);
      *((_WORD *)this + 71) = v12;
      *((_WORD *)this + 69) = WORD2(v13);
      *((_WORD *)this + 68) = v13;
      v7 = *((_QWORD *)this + 31);
      *((_QWORD *)this + 10) = *((_QWORD *)this + 29);
      *((_QWORD *)this + 11) = v7;
      v9 = 0u;
      v10 = 0u;
      physx::shdfnd::Array<physx::Cm::SpatialVectorV,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>>::resize((uint64_t)this + 264, a2, &v9);
      *((_QWORD *)this + 8) = *((_QWORD *)this + 33);
      if (!*((_BYTE *)this + 160))
        return v2 != 0;
      v5 = *((unsigned __int8 *)this + 140);
    }
    if (v5 != (_DWORD)a2)
    {
      *((_QWORD *)this + 9) = *((_QWORD *)this + 18);
      *((_QWORD *)this + 6) = this;
    }
    *((_BYTE *)this + 160) = 0;
  }
  return v2 != 0;
}

uint64_t physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resize(uint64_t result, unsigned int a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = (_BYTE *)(*(_QWORD *)v5 + v6);
    v8 = a2 - v6;
    do
    {
      *v7++ = *a3;
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::resize(uint64_t result, uint64_t a2, __int128 *a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;

  v4 = a2;
  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::recreate(result, a2);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    v7 = *(_QWORD *)v5 + 48 * v4;
    v8 = (_OWORD *)(*(_QWORD *)v5 + 48 * v6);
    do
    {
      v9 = *a3;
      v10 = a3[2];
      v8[1] = a3[1];
      v8[2] = v10;
      *v8 = v9;
      v8 += 3;
    }
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate(result, a2);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 28 * a2;
    v8 = *(_QWORD *)v5 + 28 * v6;
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)a3;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      v8 += 28;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 16 * a2;
    v8 = (_OWORD *)(*(_QWORD *)v5 + 16 * v6);
    do
      *v8++ = *a3;
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVectorV,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>>::resize(uint64_t result, unsigned int a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Cm::SpatialVectorV,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>>::recreate(result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 32 * a2;
    v8 = (_OWORD *)(*(_QWORD *)v5 + 32 * v6);
    do
    {
      *v8 = *a3;
      v8[1] = a3[1];
      v8 += 2;
    }
    while ((unint64_t)v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

BOOL physx::Dy::ArticulationV::resize(physx::Dy::ArticulationV *this, int a2)
{
  int v2;

  v2 = *((unsigned __int8 *)this + 160);
  if (*((_BYTE *)this + 160))
  {
    if (*((unsigned __int8 *)this + 140) != a2)
    {
      *((_QWORD *)this + 9) = *((_QWORD *)this + 18);
      *((_QWORD *)this + 6) = this;
    }
    *((_BYTE *)this + 160) = 0;
  }
  return v2 != 0;
}

void physx::Dy::PxvRegisterArticulations(physx::Dy *this)
{
  qword_25582F9A0 = (uint64_t)physx::Dy::Articulation::computeUnconstrainedVelocities;
  qword_25582F9B0 = (uint64_t)physx::Dy::Articulation::updateBodies;
  qword_25582F940 = (uint64_t)physx::Dy::Articulation::updateBodies;
  qword_25582F9C0 = (uint64_t)physx::Dy::Articulation::saveVelocity;
  qword_25582F950 = (uint64_t)physx::Dy::Articulation::saveVelocityTGS;
  qword_25582F960 = (uint64_t)physx::Dy::Articulation::recordDeltaMotion;
  qword_25582F970 = (uint64_t)physx::Dy::Articulation::deltaMotionToMotionVelocity;
  qword_25582F980 = (uint64_t)physx::Dy::Articulation::computeUnconstrainedVelocitiesTGS;
  qword_25582F990 = (uint64_t)physx::Dy::Articulation::setupSolverConstraintsTGS;
  qword_255826080 = (uint64_t)physx::Dy::solveExtContactBlock;
  *(_QWORD *)algn_255826088 = physx::Dy::solveExt1DBlock;
  qword_2558260D0 = (uint64_t)physx::Dy::solveExtContactBlockWriteBack;
  *(_QWORD *)algn_2558260D8 = physx::Dy::solveExt1DBlockWriteBack;
  qword_255826120 = (uint64_t)physx::Dy::solveExtContactConcludeBlock;
  *(_QWORD *)algn_255826128 = physx::Dy::solveExt1DConcludeBlock;
  qword_255826170 = (uint64_t)physx::Dy::solveExtContactCoulombBlock;
  *(_QWORD *)algn_255826178 = physx::Dy::solveExt1DBlock;
  qword_2558261E8 = (uint64_t)physx::Dy::solveExtContactCoulombBlockWriteBack;
  unk_2558261F0 = physx::Dy::solveExt1DBlockWriteBack;
  qword_255826260 = (uint64_t)physx::Dy::solveExtContactCoulombConcludeBlock;
  *(_QWORD *)algn_255826268 = physx::Dy::solveExt1DConcludeBlock;
  qword_2558261B8 = (uint64_t)physx::Dy::solveExtFrictionBlock;
  qword_255826230 = (uint64_t)physx::Dy::solveExtFrictionBlockWriteBack;
  qword_2558262A8 = (uint64_t)physx::Dy::solveExtFrictionBlock;
}

uint64_t physx::Dy::Articulation::computeUnconstrainedVelocities(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD), uint64_t a3, _DWORD *a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v23;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  int v41;
  _BOOL4 v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  _BOOL4 v55;
  _BOOL4 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  int v61;
  uint64_t v62;
  float32x4_t v63;
  unsigned int v64;
  _QWORD *v65;
  float32x4_t *v66;
  float32x4_t *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float32x4_t *v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  unsigned int v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  unsigned int v97;
  float32x4_t *v98;
  char v100;
  float v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v108;
  _BOOL4 v109;
  float v110;
  float v111;
  uint64_t v112;
  unint64_t v113;
  unsigned __int16 *v114;
  unsigned __int16 *v115;
  _BOOL4 v116;
  unint64_t v117;
  _BOOL4 v118;
  int v119;
  unsigned int v120;
  float v121[3];
  float v122[3];
  float v123;
  float v124;
  float v125;
  float v126;
  uint64_t v127;
  int v128;
  float v129[4];
  float32x4_t v130[2];
  float32x4_t v131[3];

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(unsigned __int8 *)(a1 + 92);
  v10 = 9 * v9;
  v11 = v8 + 144 * v9;
  physx::Dy::Articulation::computeUnconstrainedVelocitiesInternal(*(_QWORD *)a1);
  v120 = 0;
  v108 = a4;
  *a4 = 0;
  v105 = v6;
  v114 = *(unsigned __int16 **)(v6 + 168);
  v12 = *v114;
  if (v12 >= 2)
  {
    v120 = 0;
    v13 = 1.0;
    v14 = v8 + 16 * v10;
    v15 = v14 + 168;
    v16 = v14 + 251;
    v17 = 1;
    v18 = -0.5;
    v111 = 1.0 / a5;
    v112 = v7;
    v113 = *v114;
    v104 = v11;
    do
    {
      v19 = *(_QWORD *)(v7 + 40 * v17 + 24);
      v20 = v17 + 1;
      if (v17 + 1 < v12)
      {
        v21 = ~(v16 >> 5) + (v15 >> 5);
        _X9 = *(_QWORD *)(v7 + 40 * v20 + 24);
        v23 = ~((_X9 + 359) >> 5) + (_X9 >> 5);
        do
        {
          __asm { PRFM            #0, [X9] }
          _X9 += 32;
          _CF = __CFADD__(v23++, 1);
        }
        while (!_CF);
        _X9 = v11 + 84 * v20;
        do
        {
          __asm { PRFM            #0, [X9] }
          _X9 += 32;
          _CF = __CFADD__(v21++, 1);
        }
        while (!_CF);
      }
      if (*(_BYTE *)(v19 + 329) || *(_BYTE *)(v19 + 328))
      {
        v31 = (float *)(v11 + 84 * v17);
        v32 = v31[14];
        v33 = v31[17];
        if (v32 == 0.0)
        {
          v37 = 1.0;
          v35 = 0.0;
          v36 = 0.0;
        }
        else
        {
          v34 = sqrtf((float)((float)(v32 * v32) + 0.0) + (float)(v33 * v33));
          v35 = v32 / v34;
          v36 = 0.0 / v34;
          v37 = v33 / v34;
        }
        v38 = v31[15];
        v39 = v31[16];
        v129[0] = (float)((float)((float)(v32 * v37) - (float)(v33 * v35)) - (float)(v38 * v36)) + (float)(v36 * v39);
        v129[1] = (float)((float)((float)(v37 * v38) - (float)(v33 * v36)) - (float)(v39 * v35)) + (float)(v36 * v32);
        v129[2] = (float)((float)((float)(v37 * v39) - (float)(v33 * v36)) - (float)(v32 * v36)) + (float)(v35 * v38);
        v129[3] = (float)((float)((float)(v32 * v35) + (float)(v33 * v37)) + (float)(v38 * v36)) + (float)(v39 * v36);
        v40 = *(_DWORD *)(v19 + 344);
        v127 = *(_QWORD *)(v19 + 336);
        v128 = v40;
        v123 = 0.0;
        if (*(_BYTE *)(v19 + 328) && physx::Cm::ConeLimitHelper::getLimit((float *)&v127, v129, &v124, &v123))
        {
          if (*(float *)(v19 + 320) <= 0.0)
          {
            v42 = *(float *)(v19 + 324) > 0.0;
            v41 = 1;
          }
          else
          {
            v41 = 1;
            v42 = 1;
          }
        }
        else
        {
          v41 = 0;
          v42 = 0;
        }
        v43 = (float *)(v11 + 84 * v17);
        v45 = v43[9];
        v44 = v43[10];
        v46 = v18 + (float)(v44 * v44);
        v47 = v43[7];
        v48 = v43[8];
        v49 = (float)((float)(v48 * 0.0) + (float)(v47 * 2.0)) + (float)(v45 * 0.0);
        v50 = (float)((float)(v44 * (float)((float)(v45 * -0.0) + (float)(v48 * 0.0))) + (float)(v46 * 2.0))
            + (float)(v47 * v49);
        v51 = (float)((float)(v44 * (float)((float)(v47 * -0.0) + (float)(v45 * 2.0))) + (float)(v46 * 0.0))
            + (float)(v48 * v49);
        v52 = (float)((float)(v44 * (float)((float)(v48 * -2.0) + (float)(v47 * 0.0))) + (float)(v46 * 0.0))
            + (float)(v45 * v49);
        v122[0] = v50;
        v122[1] = v51;
        v122[2] = v52;
        if (v37 == -1.0)
        {
          if (v35 >= 0.0)
            v53 = 1.8447e19;
          else
            v53 = -1.8447e19;
        }
        else
        {
          v53 = v35 / (float)(v37 + v13);
        }
        if (*(_BYTE *)(v19 + 329))
        {
          v54 = *(float *)(v19 + 356);
          v55 = v53 < (float)((float)(*(float *)(v19 + 352) + v54) / (float)(v13 - (float)(*(float *)(v19 + 352) * v54)));
          v56 = v53 > (float)((float)(*(float *)(v19 + 348) - v54) / (float)(v13 + (float)(*(float *)(v19 + 348) * v54)));
        }
        else
        {
          v55 = 0;
          v56 = 0;
        }
        v57 = v42 + v41 + v55 + v56;
        if (v57)
        {
          v109 = v42;
          v118 = v56;
          v116 = v55;
          v58 = a3 + 48 * v120;
          *(_QWORD *)v58 = v105;
          v59 = v7 + 40 * v17;
          v61 = *(_DWORD *)(v59 + 32);
          v60 = (unsigned int *)(v59 + 32);
          *(_WORD *)(v58 + 16) = v61;
          *(_QWORD *)(v58 + 8) = v105;
          *(_WORD *)(v58 + 18) = v17;
          *(_WORD *)(v58 + 30) = (160 * v57 + 48) >> 4;
          v115 = (unsigned __int16 *)(v58 + 30);
          v62 = (**a2)(a2, (160 * v57 + 64));
          v64 = 0;
          *(_QWORD *)(v58 + 32) = v62;
          *(_QWORD *)(v58 + 40) = 0;
          v65 = (_QWORD *)(v58 + 32);
          v66 = (float32x4_t *)(v62 + 48);
          *(_BYTE *)v62 = 4;
          v119 = v57;
          *(_BYTE *)(v62 + 1) = v57;
          *(_BYTE *)(v62 + 2) = 0;
          *(_OWORD *)(v62 + 32) = xmmword_2261A7190;
          if (v41)
          {
            v67 = (float32x4_t *)v62;
            v63.f32[0] = v126 + v126;
            v69 = v31[2];
            v68 = v31[3];
            v70 = v18 + (float)(v68 * v68);
            v71 = v31[1];
            v72 = (float)((float)((float)(v125 + v125) * v71) + (float)(*v31 * (float)(v124 + v124)))
                + (float)(v69 * (float)(v126 + v126));
            v73 = (float)((float)(v68
                                * (float)((float)(v71 * (float)(v126 + v126)) - (float)(v69 * (float)(v125 + v125))))
                        + (float)((float)(v124 + v124) * v70))
                + (float)(*v31 * v72);
            v74 = (float)((float)(v68
                                * (float)((float)(v69 * (float)(v124 + v124)) - (float)(*v31 * (float)(v126 + v126))))
                        + (float)((float)(v125 + v125) * v70))
                + (float)(v71 * v72);
            v75 = (float)((float)(v68
                                * (float)((float)(*v31 * (float)(v125 + v125)) - (float)(v71 * (float)(v124 + v124))))
                        + (float)((float)(v126 + v126) * v70))
                + (float)(v69 * v72);
            v121[0] = v73;
            v121[1] = v74;
            v121[2] = v75;
            v76 = (float32x4_t *)(v62 + 48);
            physx::Dy::ArticulationHelper::createHardLimit((uint64_t)v114, v112, v17, v66, (uint64_t)v121, v123, v111, v63);
            if (v109)
            {
              v77 = (float)(v51 * v75) - (float)(v52 * v74);
              v78 = (float)(v52 * v73) - (float)(v50 * v75);
              v79 = (float)(v50 * v74) - (float)(v51 * v73);
              v80 = (float)((float)(v78 * v78) + (float)(v77 * v77)) + (float)(v79 * v79);
              v81 = 0.0;
              v82 = 0.0;
              v83 = 0.0;
              if (v80 > 0.0)
              {
                v84 = 1.0 / sqrtf(v80);
                v81 = v77 * v84;
                v82 = v78 * v84;
                v83 = v79 * v84;
              }
              v102 = v82;
              v103 = v81;
              v110 = v83;
              v85 = *(float *)(v19 + 320);
              v86 = *(float *)(v19 + 324);
              v67[13].i64[0] = 0;
              v67[13].i32[2] = 0;
              v67[14].i64[0] = 0;
              v67[14].i32[2] = 0;
              v67[15].f32[0] = v81;
              v67[15].f32[1] = v82;
              v67[15].f32[2] = v83;
              v67[16].f32[0] = v81;
              v67[16].f32[1] = v82;
              v67[16].f32[2] = v83;
              v67[18].i64[0] = 0x7F7FFFFFFF7FFFFFLL;
              v67[18].i64[1] = 0;
              v87 = *v60;
              v131[0] = 0uLL;
              v88.i64[0] = __PAIR64__(LODWORD(v82), LODWORD(v81));
              v88.i64[1] = LODWORD(v83);
              v131[1] = v88;
              v89.i32[3] = 0;
              v89.f32[0] = -v81;
              v89.f32[1] = -v82;
              v89.f32[2] = -v83;
              v130[0] = (float32x4_t)xmmword_2261A71A0;
              v130[1] = v89;
              physx::Dy::ArticulationHelper::getImpulseSelfResponse((uint64_t)v114, v87, v131, v67 + 19, v17, v130, v67 + 21);
              v93 = (float)((float)((float)(v102 * v67[20].f32[1]) + (float)(v103 * v67[20].f32[0]))
                          + (float)(v110 * v67[20].f32[2]))
                  - (float)((float)((float)(v102 * v67[22].f32[1]) + (float)(v103 * v67[22].f32[0]))
                          + (float)(v110 * v67[22].f32[2]));
              if (v93 < 0.0)
                physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyArticulationHelper.cpp", 372, "Warning: articulation ill-conditioned or under severe stress, tangential spring ignored", v90, v91, v92, v100);
              v94 = 1.0 / v93;
              if (v93 <= 0.0)
                v94 = 0.0;
              v95 = v86 * a5;
              v13 = 1.0;
              v96 = v95 + (float)((float)(a5 * a5) * v85);
              v63.f32[0] = 1.0 / (float)(v96 + 1.0);
              v67[14].i32[3] = 0;
              v67[13].i32[3] = 0;
              v67[15].f32[3] = v96 * (float)-(float)(v63.f32[0] * v94);
              v67[16].f32[3] = 1.0 - v63.f32[0];
              v64 = 2;
            }
            else
            {
              v64 = 1;
              v13 = 1.0;
            }
            v18 = -0.5;
            v66 = v76;
          }
          v117 = v15;
          if (v118)
          {
            v97 = v64 + 1;
            v98 = v66;
            v7 = v112;
            physx::Dy::ArticulationHelper::createHardLimit((uint64_t)v114, v112, v17, &v66[10 * v64], (uint64_t)v122, (float)(*(float *)(v19 + 348) - v53) * 4.0, v111, v63);
            v64 = v97;
          }
          else
          {
            v98 = v66;
            v7 = v112;
          }
          v12 = v113;
          v20 = v17 + 1;
          if (v116)
          {
            v63.f32[0] = -v52;
            v131[0].f32[0] = -v50;
            v131[0].f32[1] = -v51;
            v131[0].f32[2] = -v52;
            physx::Dy::ArticulationHelper::createHardLimit((uint64_t)v114, v7, v17, &v98[10 * v64], (uint64_t)v131, (float)(*(float *)(v19 + 352) - v53) * -4.0, v111, v63);
          }
          ++v120;
          *(_BYTE *)(*v65 + 16 * *v115) = 0;
          *v108 += v119;
          v11 = v104;
          v15 = v117;
        }
        else
        {
          v12 = v113;
          v20 = v17 + 1;
        }
      }
      v15 += 84;
      v16 += 84;
      v17 = v20;
    }
    while (v20 != v12);
  }
  return v120;
}

void physx::Dy::Articulation::updateBodies(uint64_t a1, float a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  float32x2_t *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float32x2_t *v11;
  uint64_t v12;
  float v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float cosval;
  float v25;
  float v26;
  float v27;
  float v28;
  __float2 v29;
  float v30;
  float v31;
  float v32;
  float32_t v33;
  float32_t v34;
  float32_t v35;
  float v36;
  int v37;
  char v38;
  void *v39;
  float v40;
  float *v41;
  _DWORD *v42;
  uint64_t v43;
  float *v44;
  unsigned int v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  unsigned __int16 *v76;
  _OWORD *v77;
  float32x2_t *v78;
  float *v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  _OWORD *v84;
  uint64_t v85;
  char *v86;
  float *v87;
  uint64_t v88;
  float v89;
  float v90;
  float32x2_t v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  __float2 v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  uint64_t v114;
  char *v115;
  _OWORD *f32;
  uint64_t v117;
  __int128 v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  __int128 v139;
  _DWORD *v140;
  float32x2_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  unsigned __int16 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  float32x4_t *v151;
  int v152;
  uint64_t v153;
  float v154;
  float32x4_t v156;
  _QWORD v157[128];

  v157[126] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int16 **)(*(_QWORD *)a1 + 168);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(float32x2_t **)(a1 + 32);
  v150 = *(_QWORD *)(a1 + 8);
  v151 = *(float32x4_t **)(a1 + 16);
  v6 = *v3;
  physx::Dy::PxcFsFlushVelocity((float32x4_t *)v3);
  physx::Dy::PxcLtbComputeJv((uint64_t)&v156, v3, (int8x16_t *)v3 + 8);
  physx::Dy::PxcLtbProject(v3, (float32x4_t *)v3 + 8, &v156);
  v7 = a2;
  v153 = *(_QWORD *)(a1 + 80);
  v8 = *(unsigned __int8 *)(a1 + 92);
  if ((_DWORD)v6)
  {
    v9 = 0;
    v10 = &v151[1].f32[2];
    do
    {
      v11 = (float32x2_t *)((char *)v5 + v9 * 4);
      v12 = v153 + v9 * 4;
      *(_OWORD *)v12 = *(_OWORD *)&v5->f32[v9];
      *(float32x2_t *)(v12 + 16) = *(float32x2_t *)((char *)v5 + v9 * 4 + 16);
      *(_DWORD *)(v12 + 24) = v5[3].i32[v9];
      v13 = *(v10 - 4);
      v14 = *(float32x2_t *)(v10 - 6);
      v15 = *(float32x2_t *)((char *)v5 + v9 * 4 + 16);
      v16 = v5[3].f32[v9];
      v17 = *(v10 - 2) * v7;
      v18 = *(v10 - 1) * v7;
      v19 = *v10 * v7;
      v20 = (float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19);
      v21 = 0.0;
      v22 = 0.0;
      v23 = 0.0;
      cosval = 1.0;
      if (v20 >= 1.0e-24)
      {
        v25 = sqrtf(v20);
        v26 = v17 * (float)(1.0 / v25);
        v27 = v18 * (float)(1.0 / v25);
        v28 = v19 * (float)(1.0 / v25);
        v29 = __sincosf_stret(v25 * 0.5);
        cosval = v29.__cosval;
        v7 = a2;
        v21 = v29.__sinval * v26;
        v22 = v29.__sinval * v27;
        v23 = v29.__sinval * v28;
      }
      v31 = v11[1].f32[0];
      v30 = v11[1].f32[1];
      v32 = v11->f32[1];
      v33 = (float)((float)((float)(v21 * v30) + (float)(cosval * v11->f32[0])) + (float)(v22 * v31))
          - (float)(v32 * v23);
      v34 = (float)((float)((float)(v22 * v30) + (float)(cosval * v32)) + (float)(v23 * v11->f32[0]))
          - (float)(v31 * v21);
      v35 = (float)((float)((float)(v23 * v30) + (float)(cosval * v31)) + (float)(v21 * v32))
          - (float)(v11->f32[0] * v22);
      v36 = -(float)(v21 * v11->f32[0]);
      v11->f32[0] = v33;
      v11->f32[1] = v34;
      v11[1].f32[0] = v35;
      v11[1].f32[1] = (float)((float)(v36 + (float)(cosval * v30)) - (float)(v22 * v32)) - (float)(v23 * v31);
      v11[2] = vadd_f32(vmul_n_f32(v14, v7), v15);
      v11[3].f32[0] = (float)(v13 * v7) + v16;
      v9 += 7;
      v10 += 8;
    }
    while (7 * v6 != v9);
  }
  if (*(_DWORD *)(v4 + 8))
  {
    v37 = 0;
    v38 = 0;
    v39 = (void *)(v153 + 32 * v8);
    v148 = v153 + 176 * v8;
    v147 = v3 + 392;
    v154 = 1.0 / v7;
    v149 = v4;
    while (1)
    {
      v40 = -3.4028e38;
      if (v6 >= 2)
      {
        v41 = (float *)&v5[6] + 1;
        v42 = (_DWORD *)(v150 + 72);
        v43 = v6 - 1;
        do
        {
          v44 = (float *)*((_QWORD *)v42 - 1);
          v45 = *v42;
          v42 += 10;
          v46 = (float *)v5 + 7 * v45;
          v47 = v44[4] + v44[4];
          v48 = v44[5] + v44[5];
          v49 = v44[6] + v44[6];
          v51 = v46[2];
          v50 = v46[3];
          v52 = v46[1];
          v53 = (float)(v50 * v50) + -0.5;
          v54 = (float)((float)(v48 * v52) + (float)(*v46 * v47)) + (float)(v51 * v49);
          v55 = (float)(v50 * (float)((float)(v52 * v49) - (float)(v51 * v48))) + (float)(v47 * v53);
          v56 = (float)(v50 * (float)((float)(v51 * v47) - (float)(*v46 * v49))) + (float)(v48 * v53);
          v57 = (float)(v50 * (float)((float)(*v46 * v48) - (float)(v52 * v47))) + (float)(v49 * v53);
          v58 = v44[11] + v44[11];
          v59 = v44[12] + v44[12];
          v60 = v55 + (float)(*v46 * v54);
          v61 = v44[13] + v44[13];
          v63 = *(v41 - 4);
          v62 = *(v41 - 3);
          v64 = (float)(v62 * v62) + -0.5;
          v65 = v56 + (float)(v52 * v54);
          v67 = *(v41 - 6);
          v66 = *(v41 - 5);
          v68 = (float)((float)(v59 * v66) + (float)(v67 * v58)) + (float)(v63 * v61);
          v69 = v57 + (float)(v51 * v54);
          v70 = v46[4] + v60;
          v71 = *(v41 - 2)
              + (float)((float)((float)(v62 * (float)((float)(v66 * v61) - (float)(v63 * v59))) + (float)(v58 * v64))
                      + (float)(v67 * v68));
          v72 = *(v41 - 1)
              + (float)((float)((float)(v62 * (float)((float)(v63 * v58) - (float)(v67 * v61))) + (float)(v59 * v64))
                      + (float)(v66 * v68));
          v73 = *v41;
          v41 += 7;
          v74 = (float)(v46[6] + v69)
              - (float)(v73
                      + (float)((float)((float)(v62 * (float)((float)(v67 * v59) - (float)(v66 * v58)))
                                      + (float)(v61 * v64))
                              + (float)(v63 * v68)));
          v75 = sqrtf((float)((float)((float)((float)(v46[5] + v65) - v72) * (float)((float)(v46[5] + v65) - v72))+ (float)((float)(v70 - v71) * (float)(v70 - v71)))+ (float)(v74 * v74));
          if (v40 <= v75)
            v40 = v75;
          --v43;
        }
        while (v43);
      }
      if (v40 <= *(float *)(v4 + 16))
        break;
      v152 = v37;
      v76 = v3;
      bzero(v39, 144 * v6);
      v77 = v39;
      physx::Dy::Articulation::setInertia((uint64_t)v39, *(float32x2_t **)(v150 + 16), v5);
      v78 = (float32x2_t *)((char *)v5 + 28);
      v79 = (float *)(v148 + 84);
      v80 = (unsigned int *)(v150 + 72);
      v81 = 32 * v8 + v153 + 144;
      v82 = v6 - 1;
      if (v6 >= 2)
      {
        do
        {
          physx::Dy::Articulation::setInertia(v81, *((float32x2_t **)v80 - 2), v78);
          physx::Dy::Articulation::setJointTransforms(v79, (float *)v5 + 7 * *v80, (float *)v78, *((float **)v80 - 1));
          v81 += 144;
          v80 += 10;
          v79 += 21;
          v78 = (float32x2_t *)((char *)v78 + 28);
          --v82;
        }
        while (v82);
      }
      v3 = v76;
      v39 = v77;
      physx::Dy::Articulation::prepareLtbMatrix(v76, v77, (uint64_t)v5, v148, v154);
      physx::Dy::PxcLtbFactor(v76);
      if (v6 >= 2)
      {
        v83 = (_OWORD *)((char *)v147 + v76[8]);
        v84 = v157;
        v85 = v6 - 1;
        do
        {
          *v84++ = *v83;
          v83 += 25;
          --v85;
        }
        while (v85);
      }
      bzero(v151, 32 * v6);
      physx::Dy::PxcLtbProject(v76, v151, &v156);
      v86 = (char *)&v5[1] + 4;
      v87 = &v151[1].f32[2];
      v88 = v6;
      v89 = a2;
      if ((_DWORD)v6)
      {
        do
        {
          v90 = *(v87 - 4);
          v91 = *(float32x2_t *)(v87 - 6);
          v92 = *(float32x2_t *)(v86 + 4);
          v93 = *((float *)v86 + 3);
          v94 = *(v87 - 2) * v89;
          v95 = *(v87 - 1) * v89;
          v96 = *v87 * v89;
          v97 = (float)((float)(v95 * v95) + (float)(v94 * v94)) + (float)(v96 * v96);
          if (v97 >= 1.0e-24)
          {
            v102 = sqrtf(v97);
            v103 = v94 * (float)(1.0 / v102);
            v104 = v95 * (float)(1.0 / v102);
            v105 = v96 * (float)(1.0 / v102);
            v106 = __sincosf_stret(v102 * 0.5);
            v98 = v106.__cosval;
            v89 = a2;
            v99 = v106.__sinval * v103;
            v100 = v106.__sinval * v104;
            v101 = v106.__sinval * v105;
          }
          else
          {
            v98 = 1.0;
            v99 = 0.0;
            v100 = 0.0;
            v101 = 0.0;
          }
          v107 = *((float *)v86 - 1);
          v108 = *((float *)v86 - 3);
          v109 = *((float *)v86 - 2);
          v110 = (float)(v99 * *(float *)v86) + (float)(v98 * v108);
          v111 = (float)((float)((float)(v100 * *(float *)v86) + (float)(v98 * v109)) + (float)(v101 * v108))
               - (float)(v107 * v99);
          v112 = (float)((float)((float)(v101 * *(float *)v86) + (float)(v98 * v107)) + (float)(v99 * v109))
               - (float)(v108 * v100);
          v113 = (float)((float)(v98 * *(float *)v86) - (float)(v99 * v108)) - (float)(v100 * v109);
          *((float *)v86 - 3) = (float)(v110 + (float)(v100 * v107)) - (float)(v109 * v101);
          *((float *)v86 - 2) = v111;
          *((float *)v86 - 1) = v112;
          *(float *)v86 = v113 - (float)(v101 * v107);
          *(float32x2_t *)(v86 + 4) = vadd_f32(vmul_n_f32(v91, v89), v92);
          *((float *)v86 + 3) = (float)(v90 * v89) + v93;
          v87 += 8;
          v86 += 28;
          --v88;
        }
        while (v88);
        v37 = v152 + 1;
        v4 = v149;
        v38 = 1;
        if ((v152 + 1) >= *(_DWORD *)(v149 + 8))
          goto LABEL_29;
      }
      else
      {
        v37 = v152 + 1;
        v4 = v149;
        v38 = 1;
        if ((v152 + 1) >= *(_DWORD *)(v149 + 8))
          return;
      }
    }
    if ((v38 & ((_DWORD)v6 != 0)) == 0)
      goto LABEL_41;
LABEL_29:
    if (v6 <= 1)
      v114 = 1;
    else
      v114 = v6;
    v115 = (char *)&v5[1] + 4;
    f32 = (_OWORD *)v151[1].f32;
    v117 = v153 + 12;
    do
    {
      *(float32x2_t *)&v118 = vmul_n_f32(vsub_f32(*(float32x2_t *)(v115 + 4), *(float32x2_t *)(v117 + 4)), v154);
      *((float *)&v118 + 2) = v154 * (float)(*((float *)v115 + 3) - *(float *)(v117 + 12));
      HIDWORD(v118) = 0;
      *(f32 - 1) = v118;
      v120 = *(float *)(v117 - 12);
      v119 = *(float *)(v117 - 8);
      v121 = *(float *)(v117 - 4);
      v122 = *((float *)v115 - 3);
      v123 = *((float *)v115 - 2);
      v124 = *((float *)v115 - 1);
      v125 = (float)((float)((float)(*(float *)v117 * v122) - (float)(*(float *)v115 * v120)) - (float)(v123 * v121))
           + (float)(v119 * v124);
      v126 = (float)((float)((float)(*(float *)v117 * v123) - (float)(*(float *)v115 * v119)) - (float)(v124 * v120))
           + (float)(v121 * v122);
      v127 = (float)((float)((float)(*(float *)v117 * v124) - (float)(*(float *)v115 * v121)) - (float)(v122 * v119))
           + (float)(v120 * v123);
      v128 = (float)((float)(v126 * v126) + (float)(v125 * v125)) + (float)(v127 * v127);
      v129 = sqrtf(v128);
      v130 = 0.0;
      v131 = 0.0;
      v132 = 0.0;
      if (v129 >= 1.0e-12)
      {
        v133 = (float)((float)((float)(v120 * v122) + (float)(*(float *)v115 * *(float *)v117)) + (float)(v123 * v119))
             + (float)(v124 * v121);
        if (v133 >= 0.0)
        {
          v134 = v129;
        }
        else
        {
          v134 = -v129;
          v133 = -v133;
        }
        v135 = atan2f(v134, v133);
        v136 = 0.0;
        v137 = 0.0;
        v138 = 0.0;
        if (v128 > 0.0)
        {
          v136 = (float)(v125 * (float)(1.0 / v129)) + (float)(v125 * (float)(1.0 / v129));
          v137 = (float)(v126 * (float)(1.0 / v129)) + (float)(v126 * (float)(1.0 / v129));
          v138 = (float)(v127 * (float)(1.0 / v129)) + (float)(v127 * (float)(1.0 / v129));
        }
        v130 = v135 * v136;
        v131 = v135 * v137;
        v132 = v135 * v138;
      }
      HIDWORD(v139) = 0;
      *(float *)&v139 = v154 * v130;
      *((float *)&v139 + 1) = v154 * v131;
      *((float *)&v139 + 2) = v154 * v132;
      *f32 = v139;
      f32 += 2;
      v115 += 28;
      v117 += 28;
      --v114;
    }
    while (v114);
  }
LABEL_41:
  if ((_DWORD)v6)
  {
    v140 = v3 + 76;
    v141 = v5 + 3;
    v142 = (uint64_t *)(v150 + 16);
    do
    {
      v144 = *v142;
      v142 += 5;
      v143 = v144;
      *(_OWORD *)v144 = *(_OWORD *)v141[-3].f32;
      *(float32x2_t *)(v144 + 16) = v141[-1];
      LODWORD(v144) = v141->i32[0];
      v141 = (float32x2_t *)((char *)v141 + 28);
      *(_DWORD *)(v143 + 24) = v144;
      v145 = *(v140 - 4);
      *(_QWORD *)(v143 + 64) = *((_QWORD *)v140 - 3);
      *(_DWORD *)(v143 + 72) = v145;
      v146 = *v140;
      *(_QWORD *)(v143 + 80) = *((_QWORD *)v140 - 1);
      *(_DWORD *)(v143 + 88) = v146;
      v140 += 8;
      --v6;
    }
    while (v6);
  }
}

double physx::Dy::Articulation::saveVelocity(_QWORD *a1)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  double result;
  float32x4_t v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int16 **)(*a1 + 168);
  physx::Dy::PxcFsFlushVelocity((float32x4_t *)v2);
  if (*v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = (_OWORD *)(a1[2] + v3 * 2);
      *v5 = *(_OWORD *)&v2[v3 + 64];
      v5[1] = *(_OWORD *)&v2[v3 + 72];
      ++v4;
      v3 += 16;
    }
    while (v4 < *v2);
  }
  physx::Dy::PxcLtbComputeJv((uint64_t)v7, v2, (int8x16_t *)v2 + 8);
  *(_QWORD *)&result = physx::Dy::PxcLtbProject(v2, (float32x4_t *)v2 + 8, v7).u64[0];
  return result;
}

double physx::Dy::Articulation::saveVelocityTGS(_QWORD *a1, float a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t *v9;
  double result;
  float32x4_t v12[64];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int16 **)(*a1 + 168);
  physx::Dy::PxcFsFlushVelocity((float32x4_t *)v3);
  if (*v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = &v3[32 * (unint64_t)*v3];
    do
    {
      v7 = vmulq_n_f32(*(float32x4_t *)&v6[v4 + 64], a2);
      v7.i32[3] = 0;
      v8 = vmulq_n_f32(*(float32x4_t *)&v6[v4 + 72], a2);
      v8.i32[3] = 0;
      v9 = (float32x4_t *)(a1[2] + v4 * 2);
      *v9 = v7;
      v9[1] = v8;
      ++v5;
      v4 += 16;
    }
    while (v5 < *v3);
  }
  physx::Dy::PxcLtbComputeJv((uint64_t)v12, v3, (int8x16_t *)v3 + 8);
  *(_QWORD *)&result = physx::Dy::PxcLtbProject(v3, (float32x4_t *)v3 + 8, v12).u64[0];
  return result;
}

void physx::Dy::Articulation::recordDeltaMotion(_QWORD *a1, float a2)
{
  float32x4_t *v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v6;
  unsigned int v7;
  float *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float cosval;
  float v22;
  float v23;
  float v24;
  float v25;
  __float2 v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;

  v2 = *(float32x4_t **)(*a1 + 168);
  v3 = a1[5];
  v4 = v2->u16[0];
  physx::Dy::PxcFsFlushVelocity(v2);
  v7 = v2->u16[0];
  v5 = v2 + 8;
  v6 = v7;
  if (v7)
  {
    v8 = (float *)(v3 + 8);
    v9 = v4 << 6;
    do
    {
      v10 = vmulq_n_f32(*v5, a2);
      v10.i32[3] = 0;
      v11 = vmulq_n_f32(v5[1], a2);
      v11.i32[3] = 0;
      v12 = (float32x4_t *)((char *)v5 + v9);
      v13 = vaddq_f32(v11, *(float32x4_t *)((char *)v5 + v9 + 16));
      *v12 = vaddq_f32(*(float32x4_t *)((char *)v5 + v9), v10);
      v12[1] = v13;
      v14 = v5[1].f32[0] * a2;
      v15 = v5[1].f32[1] * a2;
      v16 = v5[1].f32[2] * a2;
      v17 = (float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16);
      v18 = 0.0;
      v19 = 0.0;
      v20 = 0.0;
      cosval = 1.0;
      if (v17 >= 1.0e-24)
      {
        v22 = sqrtf(v17);
        v23 = v14 * (float)(1.0 / v22);
        v24 = v15 * (float)(1.0 / v22);
        v25 = v16 * (float)(1.0 / v22);
        v26 = __sincosf_stret(v22 * 0.5);
        cosval = v26.__cosval;
        v18 = v26.__sinval * v23;
        v19 = v26.__sinval * v24;
        v20 = v26.__sinval * v25;
      }
      v28 = *v8;
      v27 = v8[1];
      v29 = *(v8 - 2);
      v30 = *(v8 - 1);
      v31 = (float)((float)((float)(v19 * v27) + (float)(cosval * v30)) + (float)(v20 * v29)) - (float)(*v8 * v18);
      v32 = (float)((float)((float)(v20 * v27) + (float)(cosval * *v8)) + (float)(v18 * v30)) - (float)(v29 * v19);
      *(v8 - 2) = (float)((float)((float)(v18 * v27) + (float)(cosval * v29)) + (float)(v19 * *v8)) - (float)(v30 * v20);
      *(v8 - 1) = v31;
      *v8 = v32;
      v8[1] = (float)((float)((float)(cosval * v27) - (float)(v18 * v29)) - (float)(v19 * v30)) - (float)(v20 * v28);
      v8 += 4;
      v5 += 2;
      --v6;
    }
    while (v6);
  }
}

_QWORD *physx::Dy::Articulation::deltaMotionToMotionVelocity(_QWORD *result, float a2)
{
  _WORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  float32x4_t *v9;

  v2 = *(_WORD **)(*result + 168);
  if (*v2)
  {
    v3 = 0;
    v4 = (unint64_t)(unsigned __int16)*v2 << 6;
    v5 = 64;
    do
    {
      v6 = vmulq_n_f32(*(float32x4_t *)((char *)v2 + v4 + 128), a2);
      v6.i32[3] = 0;
      v7 = vmulq_n_f32(*(float32x4_t *)((char *)v2 + v4 + 144), a2);
      v7.i32[3] = 0;
      v8 = result[2] + v5 * 2;
      *(float32x4_t *)(v8 - 128) = v6;
      *(float32x4_t *)(v8 - 112) = v7;
      v9 = (float32x4_t *)&v2[v5];
      *v9 = v6;
      v9[1] = *(float32x4_t *)(v8 - 112);
      ++v3;
      v5 += 16;
      v4 += 32;
    }
    while (v3 < (unsigned __int16)*v2);
  }
  return result;
}

void *physx::Dy::Articulation::computeUnconstrainedVelocitiesTGS(uint64_t *a1)
{
  return physx::Dy::Articulation::computeUnconstrainedVelocitiesInternal(*a1);
}

void physx::Dy::Articulation::getDataSizes(physx::Dy::Articulation *this, int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  int v5;

  v5 = 304 * a2 + 4 * ((a2 + 15) & 0x3FFFFFF0) + 272;
  *a3 = v5;
  *a4 = v5 + 528 * a2;
  *a5 = 672 * a2;
}

uint64_t physx::Dy::Articulation::getImpulseResponse(uint64_t a1, unsigned int a2, uint64_t a3, float32x4_t *a4, float32x4_t *a5)
{
  return physx::Dy::ArticulationHelper::getImpulseResponse(*(_QWORD *)(a1 + 168), a2, a4, a5);
}

{
  return physx::Dy::ArticulationHelper::getImpulseResponse(*(_QWORD *)(a1 + 168), a2, a4, a5);
}

uint64_t physx::Dy::ArticulationHelper::getImpulseResponse(uint64_t result, unsigned int a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t *v4;
  float32x4_t *v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  float32x4_t v10;
  float32x4_t *v11;
  _OWORD *v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x2_t v15;
  int8x8_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x2_t v24;
  int8x8_t v25;
  unsigned int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  float32x2_t v50;
  int8x8_t v51;
  float32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  _DWORD v68[322];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v4 = (float32x4_t *)(result + *(unsigned __int16 *)(result + 18));
  v5 = v4 + 9;
  v6 = result + *(unsigned __int16 *)(result + 2);
  v7 = vnegq_f32(*a3);
  v7.i32[3] = 0;
  v8 = vnegq_f32(a3[1]);
  v8.i32[3] = 0;
  if (a2)
  {
    v9 = 0;
    v10 = v7;
    do
    {
      v11 = &v5[10 * a2];
      v12 = (_OWORD *)(v6 + 32 * a2);
      v14 = *(int8x16_t *)v12;
      v13 = *((float32x4_t *)v12 + 1);
      v15 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      v16 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v10.f32, (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v15, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL), *(float32x2_t *)v13.f32);
      *(int8x8_t *)v13.f32 = vext_s8(v16, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), *(float32x2_t *)v13.f32), *(float32x2_t *)v10.f32, v15), 4uLL);
      v13.i64[1] = v16.u32[0];
      v17 = vaddq_f32(v8, v13);
      *(float32x4_t *)&v68[4 * v9 + 64] = v17;
      v18 = vmlsq_laneq_f32(v10, v11[4], v17, 2);
      v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
      v19 = vmlsq_lane_f32(v18, v11[2], *(float32x2_t *)v17.f32, 1);
      v19.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
      v20 = (int8x16_t)vmlsq_lane_f32(v19, *v11, *(float32x2_t *)v17.f32, 0);
      v7.i64[0] = v20.i64[0];
      v7.i64[1] = vextq_s8(v20, v20, 8uLL).u32[0];
      v21 = vmlsq_laneq_f32(v8, v11[5], v17, 2);
      v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
      v22 = vmlsq_lane_f32(v21, v11[3], *(float32x2_t *)v17.f32, 1);
      v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
      v23 = (int8x16_t)vmlsq_lane_f32(v22, v11[1], *(float32x2_t *)v17.f32, 0);
      v17.i32[0] = vextq_s8(v23, v23, 8uLL).u32[0];
      v24 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
      v25 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v14.i8, (int8x8_t)v24, 4uLL), *(float32x2_t *)v20.i8);
      *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vext_s8(v25, (int8x8_t)vmls_f32(vmul_f32(v24, *(float32x2_t *)v20.i8), *(float32x2_t *)v14.i8, *(float32x2_t *)&v7.u32[2]), 4uLL));
      *(float32x2_t *)&v8.u32[2] = vadd_f32((float32x2_t)v17.u32[0], (float32x2_t)v25.u32[0]);
      v26 = v9 + 1;
      v68[v9] = a2;
      a2 = *(unsigned __int8 *)(result + a2 + 64);
      v10 = v7;
      ++v9;
    }
    while (a2);
  }
  else
  {
    v26 = 0;
  }
  v27 = vmulq_n_f32(*v4, v7.f32[0]);
  v27.i32[3] = 0;
  v28 = vmulq_lane_f32(v4[1], *(float32x2_t *)v7.f32, 1);
  v28.i32[3] = 0;
  v29 = v4[3];
  v30 = vmulq_laneq_f32(v4[2], v7, 2);
  v30.i32[3] = 0;
  v31 = vmulq_n_f32(v29, v8.f32[0]);
  v31.i32[3] = 0;
  v32 = vaddq_f32(v27, v28);
  v33 = v4[4];
  v34 = v4[5];
  v35 = vmulq_lane_f32(v33, *(float32x2_t *)v8.f32, 1);
  v35.i32[3] = 0;
  v36 = vaddq_f32(v32, v30);
  v37 = vmulq_laneq_f32(v34, v8, 2);
  v37.i32[3] = 0;
  v38 = vnegq_f32(vaddq_f32(v36, vaddq_f32(vaddq_f32(v31, v35), v37)));
  v38.i32[3] = 0;
  v39 = vmulq_f32(v7, v29);
  v39.i64[0] = vpaddq_f32(v39, v39).u64[0];
  v40 = vmulq_f32(v7, v33);
  v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
  v41 = vmulq_f32(v7, v34);
  v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
  *(int8x8_t *)v40.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32), 4uLL);
  v40.i64[1] = vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).u32[0];
  v42 = vmulq_n_f32(v4[6], v8.f32[0]);
  v42.i32[3] = 0;
  v43 = vmulq_lane_f32(v4[7], *(float32x2_t *)v8.f32, 1);
  v43.i32[3] = 0;
  v44 = vmulq_laneq_f32(v4[8], v8, 2);
  v44.i32[3] = 0;
  v45 = vnegq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v42, v43), v44), v40));
  v45.i32[3] = 0;
  if (v26)
  {
    v46 = v26 - 1;
    do
    {
      v47 = v68[v46];
      v48 = v6 + 32 * v47;
      v49 = *(float32x4_t *)(v48 + 16);
      v50 = (float32x2_t)vextq_s8(*(int8x16_t *)v48, *(int8x16_t *)v48, 8uLL).u64[0];
      v51 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), *(float32x2_t *)v48), (float32x2_t)vext_s8(*(int8x8_t *)v48, (int8x8_t)v50, 4uLL), *(float32x2_t *)v45.f32);
      *(int8x8_t *)v52.f32 = vext_s8(v51, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v45.f32, v50), *(float32x2_t *)v48, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)), 4uLL);
      v52.i64[1] = v51.u32[0];
      v53 = &v5[10 * v47];
      v54 = vsubq_f32(v38, v52);
      v55 = vmulq_f32(*v53, v54);
      v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
      v56 = vmulq_f32(v53[2], v54);
      v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
      *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), 4uLL);
      v57 = vmulq_f32(v53[4], v54);
      v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
      v55.i64[1] = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).u32[0];
      v58 = vmulq_f32(v45, v53[1]);
      v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
      v59 = vmulq_f32(v45, v53[3]);
      v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
      v60 = vmulq_f32(v45, v53[5]);
      v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
      *(int8x8_t *)v58.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), 4uLL);
      v58.i64[1] = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32).u32[0];
      v61 = vaddq_f32(v55, v58);
      v62 = *(float32x4_t *)&v68[4 * v46 + 64];
      v63 = vmulq_n_f32(v53[6], v62.f32[0]);
      v63.i32[3] = 0;
      v64 = vmulq_lane_f32(v53[7], *(float32x2_t *)v62.f32, 1);
      v64.i32[3] = 0;
      v65 = vmulq_laneq_f32(v53[8], v62, 2);
      v65.i32[3] = 0;
      v66 = vaddq_f32(v61, vaddq_f32(vaddq_f32(v63, v64), v65));
      v65.i64[0] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
      *(float32x2_t *)v64.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v49.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v49.f32, *(int8x8_t *)v65.f32, 4uLL), *(float32x2_t *)v66.f32);
      *(int8x8_t *)v49.f32 = vext_s8(*(int8x8_t *)v64.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v66.f32), *(float32x2_t *)v49.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL)), 4uLL);
      v49.i64[1] = v64.u32[0];
      v38 = vsubq_f32(v54, v49);
      v45 = vsubq_f32(v45, v66);
    }
    while ((unint64_t)v46--);
  }
  *a4 = v38;
  a4[1] = v45;
  return result;
}

double physx::Dy::Articulation::getImpulseSelfResponse(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8)
{
  double result;

  *(_QWORD *)&result = physx::Dy::ArticulationHelper::getImpulseSelfResponse(*(_QWORD *)(a1 + 168), a2, a5, a7, a3, a6, a8).u64[0];
  return result;
}

float32x4_t physx::Dy::ArticulationHelper::getImpulseSelfResponse(uint64_t a1, unsigned int a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, float32x4_t *a6, float32x4_t *a7)
{
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  int8x16_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  float32x4_t *v21;
  float32x2_t v22;
  float32x2_t v23;
  int8x8_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x2_t v33;
  int8x8_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int v39;
  float32x4_t v40;
  float32x4_t *v41;
  _OWORD *v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x2_t v45;
  int8x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x2_t v54;
  int8x8_t v55;
  unsigned int v56;
  float32x4_t result;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t v80;
  float32x2_t v81;
  int8x8_t v82;
  float32x4_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x2_t v99;
  int8x8_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  _DWORD v115[322];
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int8 *)(a1 + a5 + 64) == a2)
  {
    v11 = (float32x4_t *)(a1 + *(unsigned __int16 *)(a1 + 18));
    v12 = v11 + 9;
    v13 = a1 + *(unsigned __int16 *)(a1 + 2);
    v15 = (int8x16_t *)(v13 + 32 * a5);
    v16 = vnegq_f32(*a6);
    v17 = v16;
    v17.i32[3] = 0;
    v18 = vnegq_f32(a6[1]);
    v18.i32[3] = 0;
    v20 = v15[1];
    v19 = v15 + 1;
    v21 = &v11[10 * a5 + 9];
    v22 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    v23 = (float32x2_t)vextq_s8(v20, v20, 8uLL).u64[0];
    v24 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)vext_s8(*(int8x8_t *)v20.i8, (int8x8_t)v23, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v16.f32, (int8x8_t)v22, 4uLL), *(float32x2_t *)v20.i8);
    *(int8x8_t *)v16.f32 = vext_s8(v24, (int8x8_t)vmls_f32(vmul_f32(v22, *(float32x2_t *)v20.i8), *(float32x2_t *)v16.f32, v23), 4uLL);
    v16.i64[1] = v24.u32[0];
    v25 = vaddq_f32(v18, v16);
    v26 = vmulq_laneq_f32(v21[4], v25, 2);
    v26.i32[3] = 0;
    v27 = vmlaq_lane_f32(v26, v21[2], *(float32x2_t *)v25.f32, 1);
    v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
    v28 = vmlaq_n_f32(v27, *v21, v25.f32[0]);
    v28.i64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u32[0];
    v29 = vsubq_f32(v17, v28);
    v30 = vmulq_laneq_f32(v21[5], v25, 2);
    v30.i32[3] = 0;
    v31 = vmlaq_lane_f32(v30, v21[3], *(float32x2_t *)v25.f32, 1);
    v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
    v32 = vmlaq_n_f32(v31, v21[1], v25.f32[0]);
    v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
    v33 = (float32x2_t)vextq_s8(*v15, *v15, 8uLL).u64[0];
    v34 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v15->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v15->i8, (int8x8_t)v33, 4uLL), *(float32x2_t *)v29.f32);
    *(int8x8_t *)v35.f32 = vext_s8(v34, (int8x8_t)vmls_f32(vmul_f32(v33, *(float32x2_t *)v29.f32), *(float32x2_t *)v15->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)), 4uLL);
    v35.i64[1] = v34.u32[0];
    v36 = vsubq_f32(a3[1], vaddq_f32(vsubq_f32(v18, v32), v35));
    v37 = vnegq_f32(vsubq_f32(*a3, v29));
    v37.i32[3] = 0;
    v38 = vnegq_f32(v36);
    v38.i32[3] = 0;
    if (a2)
    {
      v39 = 0;
      v40 = v37;
      do
      {
        v41 = &v12[10 * a2];
        v42 = (_OWORD *)(v13 + 32 * a2);
        v44 = *(int8x16_t *)v42;
        v43 = *((float32x4_t *)v42 + 1);
        v45 = (float32x2_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
        v46 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v40.f32, (float32x2_t)vext_s8(*(int8x8_t *)v43.f32, (int8x8_t)v45, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL), *(float32x2_t *)v43.f32);
        *(int8x8_t *)v43.f32 = vext_s8(v46, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), *(float32x2_t *)v43.f32), *(float32x2_t *)v40.f32, v45), 4uLL);
        v43.i64[1] = v46.u32[0];
        v47 = vaddq_f32(v38, v43);
        *(float32x4_t *)&v115[4 * v39 + 64] = v47;
        v48 = vmlsq_laneq_f32(v40, v41[4], v47, 2);
        v48.i64[1] = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u32[0];
        v49 = vmlsq_lane_f32(v48, v41[2], *(float32x2_t *)v47.f32, 1);
        v49.i64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
        v50 = (int8x16_t)vmlsq_lane_f32(v49, *v41, *(float32x2_t *)v47.f32, 0);
        v37.i64[0] = v50.i64[0];
        v37.i64[1] = vextq_s8(v50, v50, 8uLL).u32[0];
        v51 = vmlsq_laneq_f32(v38, v41[5], v47, 2);
        v51.i64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u32[0];
        v52 = vmlsq_lane_f32(v51, v41[3], *(float32x2_t *)v47.f32, 1);
        v52.i64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u32[0];
        v53 = (int8x16_t)vmlsq_lane_f32(v52, v41[1], *(float32x2_t *)v47.f32, 0);
        v47.i32[0] = vextq_s8(v53, v53, 8uLL).u32[0];
        v54 = (float32x2_t)vextq_s8(v44, v44, 8uLL).u64[0];
        v55 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v44.i8, (int8x8_t)v54, 4uLL), *(float32x2_t *)v50.i8);
        *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)vext_s8(v55, (int8x8_t)vmls_f32(vmul_f32(v54, *(float32x2_t *)v50.i8), *(float32x2_t *)v44.i8, *(float32x2_t *)&v37.u32[2]), 4uLL));
        *(float32x2_t *)&v38.u32[2] = vadd_f32((float32x2_t)v47.u32[0], (float32x2_t)v55.u32[0]);
        v56 = v39 + 1;
        v115[v39] = a2;
        a2 = *(unsigned __int8 *)(a1 + a2 + 64);
        v40 = v37;
        ++v39;
      }
      while (a2);
    }
    else
    {
      v56 = 0;
    }
    v58 = vmulq_n_f32(*v11, v37.f32[0]);
    v58.i32[3] = 0;
    v59 = vmulq_lane_f32(v11[1], *(float32x2_t *)v37.f32, 1);
    v59.i32[3] = 0;
    v60 = v11[3];
    v61 = vmulq_laneq_f32(v11[2], v37, 2);
    v61.i32[3] = 0;
    v62 = vmulq_n_f32(v60, v38.f32[0]);
    v62.i32[3] = 0;
    v63 = vaddq_f32(v58, v59);
    v64 = v11[4];
    v65 = v11[5];
    v66 = vmulq_lane_f32(v64, *(float32x2_t *)v38.f32, 1);
    v66.i32[3] = 0;
    v67 = vaddq_f32(v63, v61);
    v68 = vmulq_laneq_f32(v65, v38, 2);
    v68.i32[3] = 0;
    v69 = vnegq_f32(vaddq_f32(v67, vaddq_f32(vaddq_f32(v62, v66), v68)));
    v69.i32[3] = 0;
    v70 = vmulq_f32(v37, v60);
    v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
    v71 = vmulq_f32(v37, v64);
    v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
    v72 = vmulq_f32(v37, v65);
    v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
    *(int8x8_t *)v71.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), 4uLL);
    v71.i64[1] = vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32).u32[0];
    v73 = vmulq_n_f32(v11[6], v38.f32[0]);
    v73.i32[3] = 0;
    v74 = vmulq_lane_f32(v11[7], *(float32x2_t *)v38.f32, 1);
    v74.i32[3] = 0;
    v75 = vmulq_laneq_f32(v11[8], v38, 2);
    v75.i32[3] = 0;
    v76 = vnegq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v73, v74), v75), v71));
    v76.i32[3] = 0;
    if (v56)
    {
      v77 = v56 - 1;
      do
      {
        v78 = v115[v77];
        v79 = v13 + 32 * v78;
        v80 = *(float32x4_t *)(v79 + 16);
        v81 = (float32x2_t)vextq_s8(*(int8x16_t *)v79, *(int8x16_t *)v79, 8uLL).u64[0];
        v82 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL), *(float32x2_t *)v79), (float32x2_t)vext_s8(*(int8x8_t *)v79, (int8x8_t)v81, 4uLL), *(float32x2_t *)v76.f32);
        *(int8x8_t *)v83.f32 = vext_s8(v82, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v76.f32, v81), *(float32x2_t *)v79, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL)), 4uLL);
        v83.i64[1] = v82.u32[0];
        v84 = &v12[10 * v78];
        v85 = vsubq_f32(v69, v83);
        v86 = vmulq_f32(*v84, v85);
        v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
        v87 = vmulq_f32(v84[2], v85);
        v87.i64[0] = vpaddq_f32(v87, v87).u64[0];
        *(int8x8_t *)v86.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32), 4uLL);
        v88 = vmulq_f32(v84[4], v85);
        v88.i64[0] = vpaddq_f32(v88, v88).u64[0];
        v86.i64[1] = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).u32[0];
        v89 = vmulq_f32(v76, v84[1]);
        v89.i64[0] = vpaddq_f32(v89, v89).u64[0];
        v90 = vmulq_f32(v76, v84[3]);
        v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
        v91 = vmulq_f32(v76, v84[5]);
        v91.i64[0] = vpaddq_f32(v91, v91).u64[0];
        *(int8x8_t *)v89.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v89.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32), 4uLL);
        v89.i64[1] = vpadd_f32(*(float32x2_t *)v91.f32, *(float32x2_t *)v91.f32).u32[0];
        v92 = vaddq_f32(v86, v89);
        v93 = *(float32x4_t *)&v115[4 * v77 + 64];
        v94 = vmulq_n_f32(v84[6], v93.f32[0]);
        v94.i32[3] = 0;
        v95 = vmulq_lane_f32(v84[7], *(float32x2_t *)v93.f32, 1);
        v95.i32[3] = 0;
        v96 = vmulq_laneq_f32(v84[8], v93, 2);
        v96.i32[3] = 0;
        v97 = vaddq_f32(v92, vaddq_f32(vaddq_f32(v94, v95), v96));
        v96.i64[0] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
        *(float32x2_t *)v95.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v80.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v80.f32, *(int8x8_t *)v96.f32, 4uLL), *(float32x2_t *)v97.f32);
        *(int8x8_t *)v80.f32 = vext_s8(*(int8x8_t *)v95.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v96.f32, *(float32x2_t *)v97.f32), *(float32x2_t *)v80.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL)), 4uLL);
        v80.i64[1] = v95.u32[0];
        v69 = vsubq_f32(v85, v80);
        v76 = vsubq_f32(v76, v97);
      }
      while ((unint64_t)v77--);
    }
    *a4 = v69;
    a4[1] = v76;
    v99 = (float32x2_t)vextq_s8(*v15, *v15, 8uLL).u64[0];
    v100 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL), *(float32x2_t *)v15->i8), (float32x2_t)vext_s8(*(int8x8_t *)v15->i8, (int8x8_t)v99, 4uLL), *(float32x2_t *)v76.f32);
    *(int8x8_t *)v101.f32 = vext_s8(v100, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v76.f32, v99), *(float32x2_t *)v15->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL)), 4uLL);
    v101.i64[1] = v100.u32[0];
    v102 = vsubq_f32(v69, v101);
    v103 = vmulq_f32(*v21, v102);
    v103.i64[0] = vpaddq_f32(v103, v103).u64[0];
    v104 = vmulq_f32(v21[2], v102);
    v104.i64[0] = vpaddq_f32(v104, v104).u64[0];
    *(int8x8_t *)v103.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32), 4uLL);
    v105 = vmulq_f32(v21[4], v102);
    v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
    v103.i64[1] = vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v105.f32).u32[0];
    v106 = vmulq_f32(v76, v21[1]);
    v106.i64[0] = vpaddq_f32(v106, v106).u64[0];
    v107 = vmulq_f32(v76, v21[3]);
    v107.i64[0] = vpaddq_f32(v107, v107).u64[0];
    v108 = vmulq_f32(v76, v21[5]);
    v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
    *(int8x8_t *)v106.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v106.f32, *(float32x2_t *)v106.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v107.f32, *(float32x2_t *)v107.f32), 4uLL);
    v106.i64[1] = vpadd_f32(*(float32x2_t *)v108.f32, *(float32x2_t *)v108.f32).u32[0];
    v109 = vaddq_f32(v103, v106);
    v110 = &v12[10 * a5];
    v111 = vmulq_n_f32(v110[6], v25.f32[0]);
    v111.i32[3] = 0;
    v112 = vmulq_lane_f32(v110[7], *(float32x2_t *)v25.f32, 1);
    v112.i32[3] = 0;
    v113 = vmulq_laneq_f32(v110[8], v25, 2);
    v113.i32[3] = 0;
    v114 = vaddq_f32(v109, vaddq_f32(vaddq_f32(v111, v112), v113));
    v111.i64[0] = vextq_s8(*v19, *v19, 8uLL).u64[0];
    *(float32x2_t *)v108.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v19->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v114, (int8x16_t)v114, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v19->i8, *(int8x8_t *)v111.f32, 4uLL), *(float32x2_t *)v114.f32);
    *(int8x8_t *)v109.f32 = vext_s8(*(int8x8_t *)v108.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v111.f32, *(float32x2_t *)v114.f32), *(float32x2_t *)v19->i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL)), 4uLL);
    v109.i64[1] = v108.u32[0];
    result = vsubq_f32(v76, v114);
    *a7 = vsubq_f32(v102, v109);
    a7[1] = result;
  }
  else
  {
    physx::Dy::ArticulationHelper::getImpulseResponse(a1, a2, a3, a4);
    physx::Dy::ArticulationHelper::getImpulseResponse(a1, a5, a6, a7);
  }
  return result;
}

__n128 physx::Dy::Articulation::getLinkVelocity@<Q0>(physx::Dy::Articulation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *((_QWORD *)this + 21) + 32 * a2;
  result = *(__n128 *)(v3 + 128);
  v5 = *(_OWORD *)(v3 + 144);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v5;
  return result;
}

__n128 physx::Dy::Articulation::getLinkMotionVector@<Q0>(physx::Dy::Articulation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *((_QWORD *)this + 21)
     + 32 * **((unsigned __int16 **)this + 21)
     + 32 * **((unsigned __int16 **)this + 21)
     + 32 * a2;
  result = *(__n128 *)(v3 + 128);
  v5 = *(_OWORD *)(v3 + 144);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v5;
  return result;
}

double physx::Dy::Articulation::getMotionVelocity@<D0>(physx::Dy::Articulation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  double result;

  v3 = *((_QWORD *)this + 33) + 32 * a2;
  v4 = *(_DWORD *)(v3 + 8);
  v5 = *(_DWORD *)(v3 + 24);
  *(_QWORD *)a3 = *(_QWORD *)v3;
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = 0;
  result = *(double *)(v3 + 16);
  *(double *)(a3 + 16) = result;
  *(_DWORD *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

double physx::Dy::Articulation::getMotionAcceleration@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t physx::Dy::Articulation::fillIndexedManager(unint64_t this, unsigned int a2, unint64_t *a3, unsigned __int8 *a4)
{
  *a4 = 2;
  *a3 = a2 | this;
  return this;
}

float physx::Dy::Articulation::getLinkMaxPenBias(physx::Dy::Articulation *this, int a2)
{
  unsigned __int16 *v2;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 21);
  return *(float *)&v2[16 * *v2 + 64 + 16 * *v2 + 16 * *v2 + 8 * *v2 + 2 * a2];
}

float physx::Dy::Articulation::setInertia(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  int32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  float32x2_t v14;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  __int128 v27;
  float32x2_t v28;
  int32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  __int128 v50;
  float result;
  __int128 v52;

  v3 = 1.0 / a2[15].f32[1];
  *(float *)a1 = v3;
  *(float *)(a1 + 20) = v3;
  *(float *)(a1 + 40) = v3;
  v4 = a3[1];
  v5 = vadd_f32(*a3, *a3);
  v6 = vadd_f32(v4, v4);
  v7 = vmul_f32(*a3, v5);
  v8 = (int32x2_t)vmul_f32(v4, v6);
  v9 = vmul_lane_f32(v5, *a3, 1);
  v10 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v4, v5.f32[0]));
  v11 = vmul_lane_f32(v4, v5, 1);
  v12 = vmul_lane_f32(v6, v4, 1);
  v13 = (int32x2_t)vsub_f32(v9, v12);
  v14 = vadd_f32(v9, v12);
  __asm { FMOV            V19.2S, #1.0 }
  v20 = vsub_f32(_D19, v7);
  v21 = vsub_f32(v20, (float32x2_t)vdup_lane_s32(v8, 0));
  v22.i32[0] = v21.i32[0];
  v22.i32[1] = vdup_lane_s32(v13, 0).i32[1];
  v23 = (float32x2_t)__PAIR64__(v22.u32[1], v14.u32[0]);
  v24 = vsub_f32(v10, v11);
  v25 = vadd_f32(v10, v11);
  v26 = vsub_f32(v11, v10);
  *(_QWORD *)&v27 = __PAIR64__(v25.u32[1], v26.u32[0]);
  v28 = vdiv_f32(_D19, a2[14]);
  v29.i32[1] = v21.i32[1];
  v30 = vmul_f32((float32x2_t)__PAIR64__(v25.u32[1], v26.u32[0]), 0);
  v31 = vmul_f32((float32x2_t)__PAIR64__(v21.u32[1], v14.u32[0]), 0);
  v32 = vadd_f32(v30, vadd_f32(v31, vmul_lane_f32(v22, v28, 1)));
  v33 = vmul_n_f32(v32, v25.f32[0]);
  v25.i32[1] = v24.i32[1];
  v34 = vsub_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v7, 1));
  v35 = vmul_f32(v22, 0);
  *(float *)v29.i32 = 0.0 * v34.f32[0];
  v36 = vadd_f32(v30, vadd_f32(v35, vmul_n_f32((float32x2_t)__PAIR64__(v21.u32[1], v14.u32[0]), v28.f32[0])));
  v37 = vmul_f32(v25, 0);
  v38 = (float32x2_t)vrev64_s32((int32x2_t)v25);
  v39 = vadd_f32((float32x2_t)vdup_lane_s32(v29, 0), vadd_f32(v37, vmul_f32(v38, v28)));
  v40 = vadd_f32(vadd_f32(v31, v35), vmul_n_f32(*(float32x2_t *)&v27, 1.0 / a2[15].f32[0]));
  v41 = vmul_f32((float32x2_t)vzip2_s32(*(int32x2_t *)&v27, (int32x2_t)v21), (float32x2_t)vzip2_s32((int32x2_t)v40, (int32x2_t)v36));
  v42 = vadd_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(v41, vmul_n_f32(v32, *(float *)v13.i32)), 1));
  v43 = vadd_f32(vmul_f32(v23, v39), vmul_f32(v21, (float32x2_t)vrev64_s32((int32x2_t)v39)));
  v14.f32[0] = vmul_lane_f32(v26, v40, 1).f32[0]
             + (float)(vmul_lane_f32(v14, v36, 1).f32[0] + vmuls_lane_f32(v21.f32[0], v32, 1));
  v37.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v37, 1), v37).u32[0];
  v37.i32[1] = vmul_n_f32(v24, *(float *)&v39).i32[1];
  v38.i32[0] = v34.i32[0];
  v39.f32[0] = 1.0 / a2[15].f32[0];
  v44 = vadd_f32(v37, vmul_f32(v38, v39));
  v45 = vadd_f32(vmul_n_f32(*(float32x2_t *)&v27, v44.f32[0]), v43);
  v46 = vadd_f32(vmul_f32(v34, v44), (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1));
  v47 = vadd_f32(vmul_n_f32(*(float32x2_t *)&v27, v40.f32[0]), vadd_f32(vmul_f32(v23, (float32x2_t)vzip1_s32((int32x2_t)v36, (int32x2_t)v32)), vmul_f32(v21, (float32x2_t)vzip1_s32((int32x2_t)v32, (int32x2_t)v36))));
  v48 = (int32x2_t)vmul_f32(vadd_f32(v47, (float32x2_t)__PAIR64__(v14.u32[0], v47.u32[0])), (float32x2_t)0x3F0000003F000000);
  *(float *)&v27 = 0.5 * vadd_f32(v42, v42).f32[0];
  DWORD1(v27) = v48.i32[1];
  v49 = (int32x2_t)vmul_f32(vadd_f32(v45, vadd_f32(vmul_n_f32(v40, v34.f32[0]), vadd_f32(vmul_lane_f32(v36, v24, 1), v33))), (float32x2_t)0x3F0000003F000000);
  *((_QWORD *)&v27 + 1) = v49.u32[1];
  *(int32x2_t *)&v50 = vrev64_s32(v48);
  *((_QWORD *)&v50 + 1) = v49.u32[0];
  result = 0.5 * vadd_f32(v46, v46).f32[0];
  *(int32x2_t *)&v52 = vrev64_s32(v49);
  *((_QWORD *)&v52 + 1) = LODWORD(result);
  *(_OWORD *)(a1 + 96) = v27;
  *(_OWORD *)(a1 + 112) = v50;
  *(_OWORD *)(a1 + 128) = v52;
  return result;
}

float physx::Dy::Articulation::setJointTransforms(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float result;

  v4 = a4[4] + a4[4];
  v5 = a4[5] + a4[5];
  v6 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v11 = a4[2];
  v10 = a4[3];
  v12 = *a4;
  v13 = a4[1];
  v14 = (float)((float)((float)(*a2 * v10) + (float)(v8 * *a4)) + (float)(v7 * v11)) - (float)(v13 * v9);
  v15 = (float)((float)((float)(v7 * v10) + (float)(v8 * v13)) + (float)(v9 * *a4)) - (float)(v11 * *a2);
  *a1 = v14;
  v16 = a4[7];
  v17 = a4[6] + a4[6];
  v18 = (float)(v8 * v8) + -0.5;
  v19 = (float)((float)(v5 * v7) + (float)(v6 * v4)) + (float)(v9 * v17);
  v20 = (float)((float)(v8 * (float)((float)(v7 * v17) - (float)(v9 * v5))) + (float)(v4 * v18)) + (float)(v6 * v19);
  v21 = (float)((float)(v8 * (float)((float)(v9 * v4) - (float)(v6 * v17))) + (float)(v5 * v18)) + (float)(v7 * v19);
  v22 = (float)((float)(v8 * (float)((float)(v6 * v5) - (float)(v7 * v4))) + (float)(v17 * v18)) + (float)(v9 * v19);
  v23 = a2[4] + v20;
  v24 = a2[5] + v21;
  v25 = a2[6] + v22;
  v26 = (float)((float)((float)(v9 * v10) + (float)(v8 * v11)) + (float)(v6 * v13)) - (float)(v12 * v7);
  v27 = (float)((float)((float)(v8 * v10) - (float)(v6 * v12)) - (float)(v7 * v13)) - (float)(v9 * v11);
  a1[1] = v15;
  a1[2] = v26;
  a1[3] = v27;
  a1[4] = v23;
  a1[5] = v24;
  v28 = *a3;
  v29 = a3[1];
  v31 = a3[2];
  v30 = a3[3];
  v33 = a4[10];
  v32 = a4[11];
  v35 = a4[8];
  v34 = a4[9];
  v36 = (float)((float)((float)(*a3 * v33) + (float)(v30 * v16)) + (float)(v29 * v34)) - (float)(v35 * v31);
  a1[6] = v25;
  v37 = v32 + v32;
  v38 = a4[12] + a4[12];
  v39 = a4[13] + a4[13];
  v40 = (float)(v30 * v30) + -0.5;
  v41 = (float)(v38 * v29) + (float)(v28 * v37);
  v42 = (float)(v30 * (float)((float)(v29 * v39) - (float)(v31 * v38))) + (float)(v37 * v40);
  v43 = (float)(v30 * (float)((float)(v31 * v37) - (float)(v28 * v39))) + (float)(v38 * v40);
  v44 = (float)(v30 * (float)((float)(v28 * v38) - (float)(v29 * v37))) + (float)(v39 * v40);
  v45 = v41 + (float)(v31 * v39);
  v46 = a3[4] + (float)(v42 + (float)(v28 * v45));
  v47 = a3[5] + (float)(v43 + (float)(v29 * v45));
  v48 = a3[6] + (float)(v44 + (float)(v31 * v45));
  v49 = (float)((float)((float)(v29 * v33) + (float)(v30 * v35)) + (float)(v31 * v16)) - (float)(v34 * v28);
  v50 = (float)((float)((float)(v31 * v33) + (float)(v30 * v34)) + (float)(v28 * v35)) - (float)(v16 * v29);
  v51 = (float)((float)((float)(v30 * v33) - (float)(v28 * v16)) - (float)(v29 * v35)) - (float)(v31 * v34);
  a1[7] = v36;
  a1[8] = v49;
  a1[9] = v50;
  a1[10] = v51;
  a1[11] = v46;
  a1[12] = v47;
  a1[13] = v48;
  v52 = (float)(v46 - v23) + (float)(v46 - v23);
  v53 = (float)(v47 - v24) + (float)(v47 - v24);
  v54 = (float)(v48 - v25) + (float)(v48 - v25);
  v55 = (float)(v27 * v27) + -0.5;
  v56 = (float)((float)-(float)(v15 * v53) - (float)(v14 * v52)) - (float)(v26 * v54);
  v57 = (float)((float)(v27 * (float)((float)(v26 * v53) - (float)(v15 * v54))) + (float)(v52 * v55))
      - (float)(v14 * v56);
  v58 = (float)((float)(v27 * (float)((float)(v14 * v54) - (float)(v26 * v52))) + (float)(v53 * v55))
      - (float)(v15 * v56);
  v59 = (float)((float)(v27 * (float)((float)(v15 * v52) - (float)(v14 * v53))) + (float)(v54 * v55))
      - (float)(v26 * v56);
  v60 = (float)((float)((float)(v27 * v36) - (float)(v14 * v51)) - (float)(v15 * v50)) + (float)(v49 * v26);
  v61 = (float)((float)((float)(v27 * v49) - (float)(v15 * v51)) - (float)(v26 * v36)) + (float)(v50 * v14);
  v62 = (float)((float)((float)(v27 * v50) - (float)(v26 * v51)) - (float)(v14 * v49)) + (float)(v36 * v15);
  result = (float)((float)((float)(v14 * v36) + (float)(v27 * v51)) + (float)(v15 * v49)) + (float)(v26 * v50);
  a1[14] = v60;
  a1[15] = v61;
  a1[16] = v62;
  a1[17] = result;
  a1[18] = v57;
  a1[19] = v58;
  a1[20] = v59;
  if (result < 0.0)
  {
    a1[14] = -v60;
    a1[15] = -v61;
    a1[16] = -v62;
    a1[17] = -result;
    result = -v51;
    a1[7] = -v36;
    a1[8] = -v49;
    a1[9] = -v50;
    a1[10] = -v51;
  }
  return result;
}

__n128 physx::Dy::Articulation::prepareDataBlock(_WORD *a1, uint64_t a2, unsigned int a3, float32x2_t *a4, uint64_t a5, char *a6, float *a7)
{
  __int16 v13;
  __int16 v14;
  __int16 v15;
  unint64_t v16;
  _BYTE *v17;
  int *v18;
  int v19;
  __n128 result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _WORD *v24;
  float32x2_t *v25;
  uint64_t v26;
  uint64_t *v27;
  float *v28;
  float32x2_t *v29;
  float32x2_t *v38;
  __int32 v39;
  float32x2_t *v40;
  float32x2_t v41;
  float32x2_t v42;
  _OWORD *v43;
  unint64_t v44;
  float *v45;
  __n128 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  float32x2_t *v49;
  float32x2_t v50;
  __n128 v51;
  float v52;
  unsigned int v53;
  float *v54;
  float32x2_t *v55;
  _WORD *v56;
  unint64_t v58;

  v58 = a3;
  v13 = 112 * a3 + ((4 * a3 + 60) & 0xFFC0) + 128;
  v14 = v13 + 32 * a3;
  v15 = v14 + 160 * a3 + 144;
  bzero(a1, 112 * a3 + ((4 * a3 + 60) & 0x7FFC0) + 128);
  a1[1] = v13;
  a1[9] = v14;
  a1[8] = v15;
  *a1 = a3;
  if (a3 >= 2)
  {
    v16 = v58 - 1;
    v17 = (char *)a1 + 65;
    v18 = (int *)(a2 + 72);
    do
    {
      v19 = *v18;
      v18 += 10;
      *v17++ = v19;
      --v16;
    }
    while (v16);
  }
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  bzero(a6, 144 * a3);
  if (a3)
  {
    v21 = 0;
    v22 = 0;
    v53 = a3;
    v23 = 32 * a3;
    v56 = &a1[v23 / 2 + 64 + v23 / 2];
    v24 = a1;
    v25 = a4;
    v26 = (uint64_t)&a1[16 * (unsigned __int16)*a1
                     + 64
                     + 16 * (unsigned __int16)*a1
                     + 16 * (unsigned __int16)*a1
                     + 8 * (unsigned __int16)*a1];
    v27 = (uint64_t *)(a2 + 96);
    v28 = a7;
    v55 = v25;
    v29 = v25 + 3;
    v54 = v28;
    do
    {
      if (v22 + 2 < v58)
      {
        _X8 = *v27;
        __asm { PRFM            #0, [X8] }
        _X8 = v27[1];
        __asm { PRFM            #0, [X8] }
      }
      v38 = (float32x2_t *)*(v27 - 10);
      *(_OWORD *)v29[-3].f32 = *(_OWORD *)v38->f32;
      v29[-1] = v38[2];
      v29->i32[0] = v38[3].i32[0];
      *(_OWORD *)(a5 + 16 * v22) = xmmword_2260E5D70;
      v39 = v38[11].i32[0];
      v40 = (float32x2_t *)&v24[v21 / 2];
      v41 = v38[8];
      v40[17].i32[0] = v38[9].i32[0];
      v40[17].i32[1] = 0;
      v42 = v38[10];
      v40[16] = v41;
      v40[18] = v42;
      v40[19].i32[0] = v39;
      v40[19].i32[1] = 0;
      v43 = &v56[v21 / 2];
      *v43 = 0u;
      v43[1] = 0u;
      physx::Dy::Articulation::setInertia((uint64_t)a6, v38, v38);
      result.n128_u32[0] = v38[9].u32[1];
      *(_DWORD *)(v26 + 4 * v22) = result.n128_u32[0];
      if (v21)
        result.n128_f32[0] = physx::Dy::Articulation::setJointTransforms(v28, (float *)v55 + 7 * *((unsigned int *)v27 - 16), (float *)v38, (float *)*(v27 - 9));
      ++v22;
      v28 += 21;
      v27 += 5;
      v21 += 32;
      a6 += 144;
      v29 = (float32x2_t *)((char *)v29 + 28);
    }
    while (v23 != v21);
    if (v53 >= 2)
    {
      v44 = 0;
      v45 = (float *)&v55[6] + 1;
      v46 = (__n128 *)((char *)v24 + (unsigned __int16)v24[1] + 48);
      v47 = (unsigned __int8 *)v24 + 65;
      do
      {
        v48 = *v47++;
        v49 = (float32x2_t *)((char *)v55 + 28 * v48);
        v50 = *(float32x2_t *)(v45 - 2);
        v51.n128_u64[0] = (unint64_t)vsub_f32(v50, v49[2]);
        v52 = *v45;
        v45 += 7;
        result.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)&v54[v44 / 4 + 32], v50);
        v51.n128_u64[1] = COERCE_UNSIGNED_INT(v52 - v49[3].f32[0]);
        result.n128_f32[2] = v54[v44 / 4 + 34] - v52;
        result.n128_u32[3] = 0;
        v46[-1] = v51;
        *v46 = result;
        v44 += 84;
        v46 += 2;
      }
      while (84 * v58 - 84 != v44);
    }
  }
  return result;
}

unsigned __int16 *physx::Dy::Articulation::prepareFsData(unsigned __int16 *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int8x16_t *v8;
  _OWORD *v9;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;
  int8x16_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int8x8_t v16;
  float32x4_t v17;
  int8x8_t v18;
  float32x4_t v19;
  int8x8_t v20;
  float32x4_t v21;

  v2 = *result;
  v3 = result[9];
  v4 = (char *)result + v3;
  v5 = result[8];
  v6 = result[1];
  *((_QWORD *)v4 + 36) = *a2;
  *((_QWORD *)v4 + 37) = 1;
  if (v2 >= 2)
  {
    v7 = v2 - 1;
    v8 = (int8x16_t *)((char *)result + v6 + 48);
    v9 = (_OWORD *)((char *)result + v3 + 448);
    v10 = (__int128 *)(a2 + 5);
    v11 = (_OWORD *)((char *)&result[216 * v2 + 88] + v5);
    do
    {
      v12 = *v10;
      v10 = (__int128 *)((char *)v10 + 40);
      *v9 = v12;
      v9 += 10;
      v13 = *v8;
      v8 += 2;
      v14 = (float32x2_t)vextq_s8(v13, v13, 8uLL).u64[0];
      v15 = (float32x2_t)vext_s8(*(int8x8_t *)v13.i8, (int8x8_t)v14, 4uLL);
      v16 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v13.i8, 0), (float32x2_t)0x80000000BF800000, v15);
      *(int8x8_t *)v17.f32 = vext_s8(v16, (int8x8_t)vmla_f32(vmul_f32(v14, (float32x2_t)1065353216), (float32x2_t)0x8000000080000000, *(float32x2_t *)v13.i8), 4uLL);
      v18 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v13.i8, (float32x2_t)1065353216), (float32x2_t)0xBF80000080000000, v15);
      *(int8x8_t *)v19.f32 = vext_s8(v18, (int8x8_t)vmla_f32(vmul_f32(v14, (float32x2_t)0x3F80000000000000), (float32x2_t)0x8000000080000000, *(float32x2_t *)v13.i8), 4uLL);
      v17.i64[1] = v16.u32[0];
      v19.i64[1] = v18.u32[0];
      v20 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v13.i8, (float32x2_t)0x3F80000000000000), (float32x2_t)0x8000000080000000, v15);
      *(v11 - 5) = vaddq_f32(v17, (float32x4_t)0);
      *(v11 - 4) = xmmword_2260E5F10;
      *(int8x8_t *)v21.f32 = vext_s8(v20, (int8x8_t)vmla_f32(vmul_f32(v14, 0), (float32x2_t)0x80000000BF800000, *(float32x2_t *)v13.i8), 4uLL);
      v21.i64[1] = v20.u32[0];
      *(v11 - 3) = vaddq_f32(v19, (float32x4_t)0);
      *(v11 - 2) = xmmword_2260E5F20;
      *(v11 - 1) = vaddq_f32(v21, (float32x4_t)0);
      *v11 = xmmword_2260E5F40;
      v11 += 6;
      --v7;
    }
    while (v7);
  }
  return result;
}

unsigned __int16 *physx::Dy::Articulation::prepareLtbMatrix(unsigned __int16 *result, _OWORD *a2, uint64_t a3, uint64_t a4, float a5)
{
  float32x4_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float v26;
  float v27;
  float32x2_t v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  _OWORD *v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = *result;
  v7 = result[8];
  v8 = (_OWORD *)((char *)result + v7);
  *v8 = *a2;
  v8[1] = a2[1];
  v8[2] = a2[2];
  v8[3] = a2[3];
  v8[4] = a2[4];
  v8[5] = a2[5];
  v8[6] = a2[6];
  v8[7] = a2[7];
  v8[8] = a2[8];
  v41[0] = xmmword_2260E5F10;
  v41[1] = xmmword_2260E5F10;
  v42 = 1065353216;
  if (v6 >= 2)
  {
    v9 = (uint64_t)result + v7 + 656;
    v10 = 1;
    v11 = (float32x2_t)vdup_n_s32(0x3F7D70A4u);
    do
    {
      v12 = 0;
      v13 = &a2[9 * v10];
      v14 = &v8[25 * v10];
      *v14 = *v13;
      v14[1] = v13[1];
      v14[2] = v13[2];
      v14[3] = v13[3];
      v14[4] = v13[4];
      v14[5] = v13[5];
      v14[6] = v13[6];
      v14[7] = v13[7];
      v14[8] = v13[8];
      v15 = (float *)(a3 + 28 * v10);
      v16 = v15[4];
      v17 = v15[5];
      v18 = v15[6];
      v19 = a4 + 84 * v10;
      v20 = a3 + 28 * *((unsigned __int8 *)result + v10 + 64);
      v21 = *(float *)(v19 + 52);
      v22 = v21 - v18;
      v23 = *(float32x2_t *)(v19 + 44);
      v24 = v23.f32[0] - *(float *)(v20 + 16);
      v25 = vsub_f32(*(float32x2_t *)(v19 + 48), *(float32x2_t *)(v20 + 20));
      v26 = v23.f32[0] - v16;
      v27 = v23.f32[1] - v17;
      v28 = *(float32x2_t *)(v19 + 16);
      v29 = *(float *)(v19 + 24) - v21;
      v30.i32[0] = vdup_lane_s32((int32x2_t)v25, 1).u32[0];
      v30.f32[1] = v24;
      v31 = vneg_f32(v30);
      v32 = (_OWORD *)v9;
      do
      {
        v33 = *(float *)((char *)v41 + v12);
        v34 = *(float32x2_t *)((char *)v41 + v12 + 4);
        v35.i32[0] = vrev64_s32((int32x2_t)v34).u32[0];
        v35.f32[1] = v33;
        *(_QWORD *)&v36 = __PAIR64__(v34.u32[0], LODWORD(v33));
        v5.i64[0] = *(_QWORD *)((char *)v41 + v12);
        *(float32x2_t *)&v37 = vmla_f32(vmul_f32(v34, v31), v35, v25);
        *(_QWORD *)&v38 = vnegq_f32(v5).u64[0];
        *((float *)&v38 + 2) = -v34.f32[1];
        *((_QWORD *)&v36 + 1) = v34.u32[1];
        HIDWORD(v38) = 0;
        *((_QWORD *)&v37 + 1) = COERCE_UNSIGNED_INT(vmlas_n_f32(v33 * (float)-v25.f32[0], v24, v34.f32[0]));
        HIDWORD(v39) = 0;
        *(float *)&v39 = -(float)((float)((float)-v22 * v34.f32[0]) + (float)(v27 * v34.f32[1]));
        *((float *)&v39 + 1) = -(float)(vmuls_lane_f32(-v26, v34, 1) + (float)(v22 * v33));
        *((float *)&v39 + 2) = -(float)((float)(v33 * (float)-v27) + (float)(v26 * v34.f32[0]));
        *(v32 - 7) = v36;
        *(v32 - 6) = v37;
        *(v32 - 1) = v38;
        *v32 = v39;
        v12 += 12;
        v32 += 2;
      }
      while (v12 != 36);
      *(float32x2_t *)&v40 = vmul_n_f32(vmul_f32(vsub_f32(v28, v23), v11), a5);
      *((float *)&v40 + 2) = (float)(v29 * 0.99) * a5;
      HIDWORD(v40) = 0;
      v8[25 * v10++ + 24] = v40;
      v9 += 400;
    }
    while (v10 != v6);
  }
  return result;
}

float32x4_t physx::Dy::PxcLtbComputeJv(uint64_t a1, unsigned __int16 *a2, int8x16_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x2_t v10;
  int8x8_t v11;
  float32x2_t v12;
  int8x8_t v13;
  float32x4_t v14;
  float32x4_t result;
  unint64_t v16;

  if (*a2 >= 2u)
  {
    v3 = 0;
    v4 = a2[1] + 32;
    v5 = a3 + 3;
    do
    {
      v6 = (float32x4_t *)&a3[2 * *((unsigned __int8 *)a2 + v3 + 65)];
      v7 = v6[1];
      v8 = *(float32x4_t *)((char *)a2 + v4 + 16);
      v9 = (int8x16_t)vaddq_f32(v8, *(float32x4_t *)((char *)a2 + v4));
      v10 = (float32x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
      v11 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v7.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v7.f32, (int8x8_t)v10, 4uLL), *(float32x2_t *)v9.i8);
      *(int8x8_t *)v7.f32 = vext_s8(v11, (int8x8_t)vmls_f32(vmul_f32(v10, *(float32x2_t *)v9.i8), *(float32x2_t *)v7.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 4uLL);
      v7.i64[1] = v11.u32[0];
      v9.i64[0] = vextq_s8(*v5, *v5, 8uLL).u64[0];
      v12 = (float32x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
      v13 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v5->i8, (float32x2_t)vext_s8(*(int8x8_t *)v8.f32, (int8x8_t)v12, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v5->i8, *(int8x8_t *)v9.i8, 4uLL), *(float32x2_t *)v8.f32);
      *(int8x8_t *)v14.f32 = vext_s8(v13, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v8.f32), *(float32x2_t *)v5->i8, v12), 4uLL);
      v14.i64[1] = v13.u32[0];
      result = vsubq_f32(vaddq_f32(*v6, v7), vaddq_f32((float32x4_t)v5[-1], v14));
      *(float32x4_t *)(a1 + 16 + 16 * v3) = result;
      v16 = v3 + 2;
      ++v3;
      v4 += 32;
      v5 += 2;
    }
    while (v16 < *a2);
  }
  return result;
}

float32x4_t physx::Dy::PxcLtbProject(unsigned __int16 *a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t result;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  float32x4_t *v54;
  float32x2_t *v55;
  uint64_t v56;
  unsigned int v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  unint64_t v99;
  float32x4_t *v100;
  float32x4_t *v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  _QWORD v106[252];

  v106[251] = *MEMORY[0x24BDAC8D0];
  v6 = a1[8];
  v7 = (float32x4_t *)((char *)a1 + v6);
  v8 = *a1;
  bzero(&v104, 32 * v8);
  if (v8 >= 2)
  {
    v9 = v8 - 1;
    do
    {
      v10 = &v7[25 * v9];
      v11 = &v104 + 2 * v9;
      v12 = v11[1];
      v13 = vmulq_f32(v10[15], *v11);
      v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
      v14 = vmulq_f32(v10[16], v12);
      v14.i64[0] = vpaddq_f32(v14, v14).u64[0];
      *(float32x2_t *)v13.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32), vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v14.f32));
      v15 = vmulq_f32(*v11, v10[17]);
      v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
      v16 = vmulq_f32(v12, v10[18]);
      v16.i64[0] = vpaddq_f32(v16, v16).u64[0];
      v17 = vmulq_f32(*v11, v10[19]);
      v18 = *((unsigned __int8 *)a1 + v9 + 64);
      v17.i64[0] = vpaddq_f32(v17, v17).u64[0];
      v19 = vmulq_f32(v12, v10[20]);
      v19.i64[0] = vpaddq_f32(v19, v19).u64[0];
      *(int8x8_t *)v13.f32 = vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32), vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)), 4uLL);
      v13.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32), vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v19.f32)).u32[0];
      v20 = vsubq_f32(a3[v9], v13);
      a3[v9] = v20;
      v21 = v10[14];
      v22 = vmulq_laneq_f32(v10[13], v20, 2);
      v22.i32[3] = 0;
      v23 = v10[12];
      v24 = vmlaq_lane_f32(v22, v10[11], *(float32x2_t *)v20.f32, 1);
      v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
      v25 = v10[10];
      v26 = vmlaq_n_f32(v24, v10[9], v20.f32[0]);
      v26.i64[1] = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u32[0];
      v27 = &v104 + 2 * v18;
      v28 = vmulq_laneq_f32(v21, v20, 2);
      v28.i32[3] = 0;
      v29 = vmlaq_lane_f32(v28, v23, *(float32x2_t *)v20.f32, 1);
      v29.i64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u32[0];
      v30 = vmlaq_n_f32(v29, v25, v20.f32[0]);
      v30.i64[1] = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u32[0];
      v31 = vsubq_f32(*v27, v26);
      v32 = vsubq_f32(v27[1], v30);
      *v27 = v31;
      v27[1] = v32;
    }
    while ((unint64_t)(v9-- & 0xFFFFFFFE));
    LODWORD(v8) = *a1;
  }
  v34 = vmulq_n_f32(*v7, v104.f32[0]);
  v34.i32[3] = 0;
  v35 = vmulq_lane_f32(v7[1], *(float32x2_t *)v104.f32, 1);
  v35.i32[3] = 0;
  v36 = v7[3];
  v37 = vmulq_laneq_f32(v7[2], v104, 2);
  v37.i32[3] = 0;
  v38 = vaddq_f32(v34, v35);
  v39 = vmulq_n_f32(v36, v105.f32[0]);
  v39.i32[3] = 0;
  v40 = v7[4];
  v41 = v7[5];
  v42 = vmulq_lane_f32(v40, *(float32x2_t *)v105.f32, 1);
  v42.i32[3] = 0;
  v43 = vmulq_laneq_f32(v41, v105, 2);
  v43.i32[3] = 0;
  result = vaddq_f32(vaddq_f32(v38, v37), vaddq_f32(vaddq_f32(v39, v42), v43));
  v45 = vmulq_f32(v104, v36);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  v46 = vmulq_f32(v104, v40);
  v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
  v47 = vmulq_f32(v104, v41);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), 4uLL);
  v45.i64[1] = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32).u32[0];
  v48 = vmulq_n_f32(v7[6], v105.f32[0]);
  v48.i32[3] = 0;
  v49 = vmulq_lane_f32(v7[7], *(float32x2_t *)v105.f32, 1);
  v49.i32[3] = 0;
  v50 = vmulq_laneq_f32(v7[8], v105, 2);
  v50.i32[3] = 0;
  v104 = result;
  v105 = vaddq_f32(vaddq_f32(vaddq_f32(v48, v49), v50), v45);
  if (v8 >= 2)
  {
    v51 = v8 - 1;
    v52 = (uint64_t)a1 + v6 + 400;
    v53 = (unsigned __int8 *)a1 + 65;
    v54 = a3 + 1;
    v55 = (float32x2_t *)v106;
    do
    {
      v57 = *v53++;
      v56 = v57;
      v58 = *v54++;
      v59 = vmulq_n_f32(*(float32x4_t *)(v52 + 336), v58.f32[0]);
      v59.i32[3] = 0;
      v60 = vmulq_lane_f32(*(float32x4_t *)(v52 + 352), *(float32x2_t *)v58.f32, 1);
      v60.i32[3] = 0;
      v61 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 368), v58, 2);
      v61.i32[3] = 0;
      v62 = &v104 + 2 * v56;
      v63 = v62[1];
      v64 = vmulq_f32(*(float32x4_t *)(v52 + 144), *v62);
      v64.i64[0] = vpaddq_f32(v64, v64).u64[0];
      v65 = vaddq_f32(v59, v60);
      *(float32x2_t *)v60.f32 = vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32);
      v66 = vmulq_f32(*(float32x4_t *)(v52 + 160), v63);
      v66.i64[0] = vpaddq_f32(v66, v66).u64[0];
      v67 = vmulq_f32(*v62, *(float32x4_t *)(v52 + 176));
      v67.i64[0] = vpaddq_f32(v67, v67).u64[0];
      v68 = vmulq_f32(v63, *(float32x4_t *)(v52 + 192));
      v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
      v69 = vmulq_f32(*v62, *(float32x4_t *)(v52 + 208));
      v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
      v70 = vmulq_f32(v63, *(float32x4_t *)(v52 + 224));
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)vadd_f32(*(float32x2_t *)v60.f32, vpadd_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32)), (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v67.f32), vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32)), 4uLL);
      v60.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32)).u32[0];
      v71 = *(float32x4_t *)v55[-2].f32;
      v72 = vmulq_n_f32(*(float32x4_t *)v52, v71.f32[0]);
      v72.i32[3] = 0;
      v73 = vmulq_lane_f32(*(float32x4_t *)(v52 + 16), *(float32x2_t *)v71.f32, 1);
      v74 = *(float32x4_t *)(v52 + 48);
      v75 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 32), v71, 2);
      v73.i32[3] = 0;
      v75.i32[3] = 0;
      v76 = vmulq_n_f32(v74, COERCE_FLOAT(*(_OWORD *)v55->f32));
      v76.i32[3] = 0;
      v77 = vaddq_f32(v65, v61);
      v78 = *(float32x4_t *)(v52 + 64);
      v79 = *(float32x4_t *)(v52 + 80);
      v80 = vmulq_lane_f32(v78, *v55, 1);
      v80.i32[3] = 0;
      v81 = vaddq_f32(v72, v73);
      v82 = vmulq_laneq_f32(v79, *(float32x4_t *)v55->f32, 2);
      v82.i32[3] = 0;
      v83 = vmulq_f32(v71, v74);
      v83.i64[0] = vpaddq_f32(v83, v83).u64[0];
      v84 = vmulq_f32(v71, v78);
      v84.i64[0] = vpaddq_f32(v84, v84).u64[0];
      v85 = vaddq_f32(v81, v75);
      v86 = vmulq_f32(v71, v79);
      v86.i64[0] = vpaddq_f32(v86, v86).u64[0];
      v87 = vmulq_n_f32(*(float32x4_t *)(v52 + 96), COERCE_FLOAT(*(_OWORD *)v55->f32));
      v87.i32[3] = 0;
      v88 = vaddq_f32(v85, vaddq_f32(vaddq_f32(v76, v80), v82));
      *(int8x8_t *)v84.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v83.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32), 4uLL);
      v89 = vmulq_lane_f32(*(float32x4_t *)(v52 + 112), *v55, 1);
      v89.i32[3] = 0;
      v90 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 128), *(float32x4_t *)v55->f32, 2);
      v91 = vsubq_f32(v77, v60);
      v90.i32[3] = 0;
      v92 = vaddq_f32(v87, v89);
      v84.i64[1] = vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32).u32[0];
      v93 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 304), v91, 2);
      v93.i32[3] = 0;
      v94 = vmlaq_lane_f32(v93, *(float32x4_t *)(v52 + 272), *(float32x2_t *)v91.f32, 1);
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      v95 = vmlaq_n_f32(v94, *(float32x4_t *)(v52 + 240), v91.f32[0]);
      v96 = vmulq_laneq_f32(*(float32x4_t *)(v52 + 320), v91, 2);
      v96.i32[3] = 0;
      v97 = vmlaq_lane_f32(v96, *(float32x4_t *)(v52 + 288), *(float32x2_t *)v91.f32, 1);
      v97.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u32[0];
      v98 = vmlaq_n_f32(v97, *(float32x4_t *)(v52 + 256), v91.f32[0]);
      v95.i64[1] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
      v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
      result = vsubq_f32(v88, v95);
      *(float32x4_t *)v55[-2].f32 = result;
      *(float32x4_t *)v55->f32 = vsubq_f32(vaddq_f32(vaddq_f32(v92, v90), v84), v98);
      v52 += 400;
      v55 += 4;
      --v51;
    }
    while (v51);
  }
  if ((_DWORD)v8)
  {
    v99 = 0;
    v100 = &v105;
    v101 = a2 + 1;
    do
    {
      v102 = vsubq_f32(v101[-1], v100[-1]);
      v103 = *v100;
      v100 += 2;
      result = vsubq_f32(*v101, v103);
      v101[-1] = v102;
      *v101 = result;
      ++v99;
      v101 += 2;
    }
    while (v99 < *a1);
  }
  return result;
}

void physx::Dy::PxcFsComputeJointLoadsSimd(unsigned __int16 *a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t *a7)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t *v10;
  const float *v11;
  float32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v31;
  uint64_t v32;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  int v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  int v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int v57;
  int32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;
  int v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int v70;
  float32x2_t v71;
  float32x2_t v72;
  int v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t *v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t *v166;
  uint64_t v167;
  float32x4_t v168;
  int8x16_t v169;
  float32x4_t v170;
  float32x4_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  int8x8_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  int8x8_t v209;
  float32x4_t v210;
  float32x4_t v211;
  unsigned __int32 v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t *v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x2_t *v228;
  float32x4_t *v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x2_t v235;
  float32x2_t v236;
  int v237;
  int32x4_t v238;
  float32x2_t v239;
  float32x2_t v240;
  int v241;
  float32x2_t v242;
  float32x4_t v243;
  float32x2_t v244;
  float32x2_t v245;
  float32x2_t v246;
  float32x2_t v247;
  int v248;
  int32x4_t v249;
  float32x2_t v250;
  float32x2_t v251;
  int v252;
  float32x2_t v253;
  float32x2_t v254;
  float32x2_t v255;
  float32x2_t v256;
  float32x2_t v257;
  float32x2_t v258;
  float32x2_t v259;
  float32x2_t v260;
  int v261;
  float32x2_t v262;
  float32x2_t v263;
  int v264;
  float32x2_t v265;
  float32x2_t v266;
  int8x8_t v267;
  float32x2_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  int8x16_t v305;
  int8x16_t v306;
  float32x4_t *v307;
  float32x4_t v308;
  int8x16_t v309;
  float32x2_t v310;
  int8x16_t v311;
  float32x2_t v312;
  float32x2_t v313;
  float32x2_t v314;
  int8x8_t v315;
  int32x2_t v316;
  float32x4_t v317;
  float32x2_t v318;
  float32x2_t v319;
  float32x2_t v320;
  unsigned __int32 v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x2_t v324;
  float32x2_t v325;
  int v326;
  float32x2_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t *v332;
  float32x4_t *v333;
  float32x4_t v334;
  float32x4_t *v335;
  float32x4_t *v336;
  float32x4_t *v337;
  float32x4_t *v338;
  float32x4_t *v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  int32x4_t v377;
  unsigned __int32 v378;
  float32x4_t v379;
  float32x4_t v380;
  int8x16_t v381;
  int8x8_t v382;
  float32x4_t v383;
  float32x4_t v384;
  int32x4_t v385;
  unsigned __int32 v386;
  float32x4_t v387;
  int8x8_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  int8x16_t v393;
  float32x4_t v394;
  int8x16_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x2_t v399;
  float32x2_t v400;
  int8x8_t v401;
  int32x2_t v402;
  float32x4_t v403;
  float32x2_t v404;
  float32x2_t v405;
  unsigned __int32 v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x2_t v410;
  float32x2_t v411;
  int v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  int8x16_t v455;
  int8x16_t v456;
  float32x2_t v457;
  int8x8_t v458;
  int32x2_t v459;
  float32x4_t v460;
  float32x2_t v461;
  unsigned __int32 v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x2_t v465;
  float32x2_t v466;
  int v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  int8x8_t v482;
  float32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  int8x16_t v503;
  float32x4_t v504;
  int8x16_t v505;
  float32x2_t v506;
  float32x2_t v507;
  float32x2_t v508;
  int8x8_t v509;
  int32x2_t v510;
  float32x4_t v511;
  float32x2_t v512;
  float32x2_t v513;
  unsigned __int32 v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x2_t v517;
  float32x2_t v518;
  int v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x2_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  size_t __n;
  int v540;
  uint64_t v541;
  uint64_t v542;
  char *v543;
  unint64_t v545;
  unsigned __int32 v546;
  unsigned __int32 v547;
  unsigned __int32 v548;
  unsigned __int32 v549;
  unsigned __int32 v550;
  unsigned __int32 v551;
  int8x16_t v552;
  uint64_t v553;
  int8x16_t v554;
  int8x16_t v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  unsigned __int32 v565;
  unsigned __int32 v566;
  unsigned __int32 v567;
  int8x16_t v568;
  float32x4_t v569;
  int8x16_t v570;
  float32x4_t v571;
  uint64_t v572;
  float32x4_t v573;
  int8x16_t v574;
  float32x4_t v575;
  int32x2_t v576;
  int32x2_t v577;
  int8x16_t v578;
  float32x4_t v579;
  float32x4_t v580[9];
  _QWORD v581[65];
  uint64_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592[6];
  _OWORD v593[6];
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  float32x4_t v598;
  float32x4_t v599;
  uint64_t v600;

  v600 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v7 = a5;
    v8 = a3;
    v545 = a5;
    if (a5 >= 2)
    {
      v9 = a5 - 1;
      v10 = (float32x2_t *)&v582;
      v11 = (const float *)(a4 + 4);
      do
      {
        v12 = vld1_dup_f32(v11++);
        *v10++ = v12;
        --v9;
      }
      while (v9);
    }
    v13 = *a7;
    v14 = a7[2];
    v15 = (char *)(*a7 + v14);
    v16 = v14 + 144 * a5;
    a7[2] = v16 + 144 * a5;
    v17 = *a1;
    v18 = (uint64_t)&a1[200 * v17] + a1[8];
    v19 = (char *)a1 + a1[1];
    if (a5)
    {
      v20 = (unsigned __int8 *)(a1 + 32);
      v21 = v581;
      v22 = a5;
      do
      {
        v23 = *v20++;
        *v21++ = v23;
        --v22;
      }
      while (v22);
    }
    v24 = v13 + v16;
    v25 = v18 + 32 * v17;
    __n = 144 * a5;
    __asm { FMOV            V9.2S, #1.0 }
    v543 = v19;
    v541 = v25;
    v542 = v13 + v16;
    do
    {
      v540 = a6;
      memcpy(v15, a2, __n);
      if (v7 >= 2)
      {
        v31 = v545;
        do
        {
          v32 = (v31-- - 2);
          _X9 = v8 + 48 * v32;
          __asm { PRFM            #0, [X9] }
          _X8 = &v19[32 * v32];
          __asm { PRFM            #0, [X8] }
          v37 = (float32x4_t *)&v15[144 * v31];
          v576 = (int32x2_t)v581[v31 + 64];
          v38 = (float32x4_t *)(v8 + 48 * v31);
          *(int8x8_t *)v39.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v37, (float32x2_t *)(v25 + 96 * v31), &v583);
          v42 = (float32x4_t)vdupq_lane_s32(v576, 0);
          v43 = vmlaq_n_f32(v39, *v38, *(float *)v576.i32);
          v44 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0);
          v45 = vrecpe_f32(v44);
          v46 = 4;
          do
          {
            v45 = vmul_f32(v45, vrecps_f32(v44, v45));
            --v46;
          }
          while (v46);
          v47 = (int32x4_t)vmlaq_f32(v40, v42, v38[1]);
          v48 = vmax_f32(v45, 0);
          v49 = vrsqrte_f32(v48);
          v50 = 4;
          do
          {
            v49 = vmul_f32(v49, vrsqrts_f32(vmul_f32(v49, v49), v48));
            --v50;
          }
          while (v50);
          v51 = vmul_f32(v48, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v48), 0), _D9, (int8x8_t)v49));
          v52 = vmulq_n_f32(v43, v51.f32[0]);
          v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 1);
          v54 = vneg_f32(v53);
          v55 = vmls_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), v53, *(float32x2_t *)v52.f32, 1);
          v56 = vrecpe_f32(v55);
          v57 = 4;
          do
          {
            v56 = vmul_f32(v56, vrecps_f32(v55, v56));
            --v57;
          }
          while (v57);
          v58 = (int32x4_t)vmlaq_f32(v41, v42, v38[2]);
          v59 = vmax_f32(v56, 0);
          v60 = vrsqrte_f32(v59);
          v61 = 4;
          do
          {
            v60 = vmul_f32(v60, vrsqrts_f32(vmul_f32(v60, v60), v59));
            --v61;
          }
          while (v61);
          v62 = (float32x2_t)vdup_laneq_s32(v58, 2);
          v63 = vmul_f32(v59, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v59), 0), _D9, (int8x8_t)v60));
          v64 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
          v65 = vmul_f32(vmla_laneq_f32((float32x2_t)vdup_laneq_s32(v47, 2), v54, v52, 2), v63);
          v66 = vneg_f32(v65);
          v67 = vneg_f32(v64);
          v68 = vmls_laneq_f32(vmls_f32(v62, v65, v65), v64, v52, 2);
          v69 = vrecpe_f32(v68);
          v70 = 4;
          do
          {
            v69 = vmul_f32(v69, vrecps_f32(v68, v69));
            --v70;
          }
          while (v70);
          v71 = vmax_f32(v69, 0);
          v72 = vrsqrte_f32(v71);
          v73 = 4;
          do
          {
            v72 = vmul_f32(v72, vrsqrts_f32(vmul_f32(v72, v72), v71));
            --v73;
          }
          while (v73);
          v74 = vmul_f32(v71, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v71), 0), _D9, (int8x8_t)v72));
          v75 = vmul_f32(vmul_lane_f32(v51, *(float32x2_t *)v52.f32, 1), v63);
          v76 = (float32x2_t)vext_s8((int8x8_t)vneg_f32(v75), (int8x8_t)v63, 4uLL);
          *(int8x8_t *)v77.f32 = vext_s8((int8x8_t)vmul_f32(vmla_f32(vmul_f32(v65, v75), v51, v67), v74), (int8x8_t)vmul_f32(vmul_f32(v63, v74), v66), 4uLL);
          v77.i64[1] = v74.u32[0];
          v78 = vmulq_lane_f32(v583, v51, 1);
          v79 = v78;
          v79.i32[3] = 0;
          v80 = vmulq_lane_f32(v584, v51, 1);
          v81 = v80;
          v81.i32[3] = 0;
          v82 = vmulq_lane_f32(v585, v76, 1);
          v82.i32[3] = 0;
          v83 = vmlaq_n_f32(v82, v583, v76.f32[0]);
          v84.i64[0] = v83.i64[0];
          v84.i64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u32[0];
          v85 = vmulq_lane_f32(v586, v76, 1);
          v85.i32[3] = 0;
          v86 = vmlaq_n_f32(v85, v584, v76.f32[0]);
          v87.i64[0] = v86.i64[0];
          v87.i64[1] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u32[0];
          v88 = vmulq_laneq_f32(v587, v77, 2);
          v88.i32[3] = 0;
          v89 = vmlaq_lane_f32(v88, v585, *(float32x2_t *)v77.f32, 1);
          v89.i64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u32[0];
          v90 = vmlaq_n_f32(v89, v583, v77.f32[0]);
          v91.i64[0] = v90.i64[0];
          v91.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
          v92 = vmulq_laneq_f32(v588, v77, 2);
          v92.i32[3] = 0;
          v93 = vmlaq_lane_f32(v92, v586, *(float32x2_t *)v77.f32, 1);
          v93.i64[1] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u32[0];
          v94 = vmlaq_n_f32(v93, v584, v77.f32[0]);
          v95.i64[0] = v94.i64[0];
          v95.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
          v96 = (float32x4_t *)&v15[144 * v31];
          v97 = vmlsq_lane_f32(*v37, v79, *(float32x2_t *)v78.f32, 0);
          v97.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u32[0];
          v98 = vmlsq_lane_f32(v96[3], v79, *(float32x2_t *)v80.f32, 0);
          v98.i64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
          v99 = vmlsq_lane_f32(v96[6], v81, *(float32x2_t *)v80.f32, 0);
          v99.i64[1] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u32[0];
          v100 = vmlsq_lane_f32(v37[1], v79, *(float32x2_t *)v78.f32, 1);
          v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
          v101 = vmlsq_lane_f32(v96[4], v79, *(float32x2_t *)v80.f32, 1);
          v101.i64[1] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u32[0];
          v102 = vmlsq_lane_f32(v96[7], v81, *(float32x2_t *)v80.f32, 1);
          v102.i64[1] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u32[0];
          v103 = vmlsq_laneq_f32(v37[2], v79, v78, 2);
          v103.i64[1] = vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL).u32[0];
          v104 = vmlsq_laneq_f32(v96[5], v79, v80, 2);
          v104.i64[1] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u32[0];
          v105 = vmlsq_laneq_f32(v96[8], v81, v80, 2);
          v105.i64[1] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u32[0];
          v106 = vmlsq_lane_f32(v97, v84, *(float32x2_t *)v83.f32, 0);
          v106.i64[1] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u32[0];
          v107 = vmlsq_lane_f32(v98, v84, *(float32x2_t *)v86.f32, 0);
          v107.i64[1] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u32[0];
          v108 = vmlsq_lane_f32(v99, v87, *(float32x2_t *)v86.f32, 0);
          v108.i64[1] = vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL).u32[0];
          v109 = vmlsq_lane_f32(v100, v84, *(float32x2_t *)v83.f32, 1);
          v109.i64[1] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u32[0];
          v110 = vmlsq_lane_f32(v101, v84, *(float32x2_t *)v86.f32, 1);
          v110.i64[1] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u32[0];
          v111 = vmlsq_lane_f32(v102, v87, *(float32x2_t *)v86.f32, 1);
          v111.i64[1] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
          v112 = vmlsq_laneq_f32(v103, v84, v83, 2);
          v112.i64[1] = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u32[0];
          v113 = vmlsq_laneq_f32(v104, v84, v86, 2);
          v113.i64[1] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u32[0];
          v114 = vmlsq_laneq_f32(v105, v87, v86, 2);
          v114.i64[1] = vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u32[0];
          v115 = vmlsq_lane_f32(v106, v91, *(float32x2_t *)v90.f32, 0);
          v115.i64[1] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u32[0];
          v116 = vmlsq_lane_f32(v107, v91, *(float32x2_t *)v94.f32, 0);
          v117 = *(float32x4_t *)&v19[32 * v31];
          v118 = vnegq_f32(v117);
          v119 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.f32, 1);
          *(int8x8_t *)v80.f32 = vext_s8(0, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL), 4uLL);
          v80.i64[1] = v119.u32[0];
          *(int8x8_t *)v81.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v118, 2), 0, 4uLL);
          v81.i64[1] = vdupq_lane_s32(*(int32x2_t *)v117.f32, 0).u32[0];
          *(int8x8_t *)v119.f32 = vext_s8(*(int8x8_t *)v117.f32, *(int8x8_t *)v118.f32, 4uLL);
          v120 = vmulq_laneq_f32(v119, v116, 2);
          v120.i32[3] = 0;
          v121 = vmlaq_lane_f32(v120, v81, *(float32x2_t *)v116.f32, 1);
          v121.i64[1] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u32[0];
          v122 = vmlaq_n_f32(v121, v80, v116.f32[0]);
          v116.i64[1] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u32[0];
          v123 = vmlsq_lane_f32(v108, v95, *(float32x2_t *)v94.f32, 0);
          v123.i64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u32[0];
          v124 = vmlsq_lane_f32(v109, v91, *(float32x2_t *)v90.f32, 1);
          v124.i64[1] = vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).u32[0];
          v125 = vmlsq_lane_f32(v110, v91, *(float32x2_t *)v94.f32, 1);
          v86.i64[0] = v125.i64[0];
          v86.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
          v126 = vmlsq_lane_f32(v111, v95, *(float32x2_t *)v94.f32, 1);
          v126.i64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u32[0];
          v127 = vmlsq_laneq_f32(v112, v91, v90, 2);
          v127.i64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u32[0];
          v128 = vmulq_laneq_f32(v119, v125, 2);
          v129 = vmlsq_laneq_f32(v113, v91, v94, 2);
          v90.i64[0] = v129.i64[0];
          v90.i64[1] = vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL).u32[0];
          v130 = vmlsq_laneq_f32(v114, v95, v94, 2);
          v130.i64[1] = vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u32[0];
          v128.i32[3] = 0;
          v131 = vmlaq_lane_f32(v128, v81, *(float32x2_t *)v125.f32, 1);
          v131.i64[1] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
          v132 = vmlaq_n_f32(v131, v80, v125.f32[0]);
          v122.i64[1] = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u32[0];
          v133 = vmulq_laneq_f32(v119, v129, 2);
          v133.i32[3] = 0;
          v134 = vmlaq_lane_f32(v133, v81, *(float32x2_t *)v129.f32, 1);
          v134.i64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u32[0];
          v135 = vmlaq_n_f32(v134, v80, v129.f32[0]);
          v132.i64[1] = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u32[0];
          v135.i64[1] = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u32[0];
          v136 = vmulq_laneq_f32(v124, v118, 2);
          v136.i32[3] = 0;
          v137 = vmlaq_lane_f32(v136, v127, *(float32x2_t *)v117.f32, 1);
          v129.i64[0] = v137.i64[0];
          v129.i64[1] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u32[0];
          v138 = vmulq_n_f32(v80, v137.f32[0]);
          v139 = vmulq_n_f32(v127, v118.f32[0]);
          v139.i32[3] = 0;
          v138.i32[3] = 0;
          v140 = vmlaq_lane_f32(v138, v81, *(float32x2_t *)v137.f32, 1);
          v140.i64[1] = vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL).u32[0];
          v141 = vmlaq_laneq_f32(v140, v119, v137, 2);
          v142 = vmlaq_laneq_f32(v139, v115, v117, 2);
          v143 = vmulq_n_f32(v80, v142.f32[0]);
          v137.i64[0] = v142.i64[0];
          v137.i64[1] = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u32[0];
          v144 = vmulq_lane_f32(v115, *(float32x2_t *)v118.f32, 1);
          v144.i32[3] = 0;
          v145 = vmlaq_n_f32(v144, v124, v117.f32[0]);
          v143.i32[3] = 0;
          v146 = vmlaq_lane_f32(v143, v81, *(float32x2_t *)v142.f32, 1);
          v146.i64[1] = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u32[0];
          v147 = vmlaq_laneq_f32(v146, v119, v142, 2);
          v148 = vmulq_n_f32(v80, v145.f32[0]);
          v142.i64[0] = v145.i64[0];
          v142.i64[1] = vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL).u32[0];
          v141.i64[1] = vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u32[0];
          v148.i32[3] = 0;
          v149 = vmlaq_lane_f32(v148, v81, *(float32x2_t *)v145.f32, 1);
          v149.i64[1] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u32[0];
          v150 = vmlaq_laneq_f32(v149, v119, v145, 2);
          v147.i64[1] = vextq_s8((int8x16_t)v147, (int8x16_t)v147, 8uLL).u32[0];
          v150.i64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u32[0];
          v151.i64[0] = 0x3F0000003F000000;
          v151.i64[1] = 0x3F0000003F000000;
          v152 = vmlaq_f32(v122, v151, v141);
          v153 = vmlaq_f32(v132, v151, v147);
          *(int8x8_t *)v81.f32 = vext_s8(*(int8x8_t *)v152.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v153.f32, 1), 4uLL);
          *(int32x2_t *)v117.f32 = vdup_laneq_s32((int32x4_t)v152, 2);
          v152.i64[1] = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
          v119.i64[0] = vextq_s8((int8x16_t)v153, (int8x16_t)v153, 8uLL).u64[0];
          *(int8x8_t *)v80.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v152.f32, 0), *(int8x8_t *)v153.f32, 4uLL);
          v153.i64[1] = v119.u32[0];
          v154 = vmlaq_f32(v135, v151, v150);
          *(int8x8_t *)v119.f32 = vext_s8(*(int8x8_t *)v117.f32, *(int8x8_t *)v119.f32, 4uLL);
          v117.i32[0] = vdup_laneq_s32((int32x4_t)v154, 2).u32[0];
          v154.i64[1] = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u32[0];
          v80.i64[1] = vdup_lane_s32(*(int32x2_t *)v154.f32, 0).u32[0];
          v81.i64[1] = vdup_lane_s32(*(int32x2_t *)v154.f32, 1).u32[0];
          v119.i64[1] = v117.u32[0];
          v155 = (float32x4_t *)&v15[144 * v581[v31]];
          v156 = vaddq_f32(v152, v80);
          v157 = vaddq_f32(v155[3], vaddq_f32(v116, v129));
          v158 = v155[8];
          v159 = vaddq_f32(v126, vaddq_f32(v153, v81));
          v160 = vaddq_f32(v155[1], v124);
          v161 = vaddq_f32(v155[2], v127);
          v162 = vaddq_f32(v155[4], vaddq_f32(v86, v137));
          v163 = vaddq_f32(v155[5], vaddq_f32(v90, v142));
          v164 = vaddq_f32(v155[6], vaddq_f32(v123, v156));
          v165 = vaddq_f32(v155[7], v159);
          *v155 = vaddq_f32(*v155, v115);
          v155[1] = v160;
          v155[2] = v161;
          v155[3] = v157;
          v155[4] = v162;
          v155[5] = v163;
          v155[6] = v164;
          v155[7] = v165;
          v155[8] = vaddq_f32(v158, vaddq_f32(v130, vaddq_f32(v154, v119)));
          v166 = (float32x4_t *)(v24 + 144 * v31);
          *v166 = v115;
          v166[1] = v124;
          v166[2] = v127;
          v166[3] = v116;
          v166[4] = v86;
          v166[5] = v90;
          v166[6] = v123;
          v166[7] = v126;
          v166[8] = v130;
        }
        while (v31 > 1);
        v167 = 1;
        do
        {
          v168 = *(float32x4_t *)&v19[32 * v167];
          v169 = (int8x16_t)vnegq_f32(v168);
          v170 = (float32x4_t)v169;
          v170.i32[3] = 0;
          v171 = (float32x4_t *)&v15[144 * v581[v167]];
          v172 = vnegq_f32(v170);
          v173 = v171[4];
          v174 = v171[5];
          v175 = *v171;
          v176 = v171[1];
          *(int8x8_t *)v177.f32 = vext_s8(0, (int8x8_t)*(_OWORD *)&vextq_s8(v169, v169, 8uLL), 4uLL);
          v177.i64[1] = vdupq_lane_s32(*(int32x2_t *)v172.f32, 1).u32[0];
          *(int8x8_t *)v178.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v172, 2), 0, 4uLL);
          v178.i64[1] = vdupq_lane_s32(*(int32x2_t *)v169.i8, 0).u32[0];
          v179 = v171[2];
          v180 = v171[3];
          v181 = vext_s8(*(int8x8_t *)v169.i8, *(int8x8_t *)v172.f32, 4uLL);
          v182 = vmulq_laneq_f32((float32x4_t)(unint64_t)v181, v180, 2);
          v182.i32[3] = 0;
          v183 = vmlaq_lane_f32(v182, v178, *(float32x2_t *)v180.f32, 1);
          v183.i64[1] = vextq_s8((int8x16_t)v183, (int8x16_t)v183, 8uLL).u32[0];
          v184 = vmlaq_n_f32(v183, v177, v180.f32[0]);
          v184.i64[1] = vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL).u32[0];
          v185 = vmulq_laneq_f32((float32x4_t)(unint64_t)v181, v173, 2);
          v185.i32[3] = 0;
          v186 = vmlaq_lane_f32(v185, v178, *(float32x2_t *)v173.f32, 1);
          v186.i64[1] = vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL).u32[0];
          v187 = vmlaq_n_f32(v186, v177, v173.f32[0]);
          v187.i64[1] = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u32[0];
          v188 = vmulq_laneq_f32((float32x4_t)(unint64_t)v181, v174, 2);
          v188.i32[3] = 0;
          v189 = vmlaq_lane_f32(v188, v178, *(float32x2_t *)v174.f32, 1);
          v189.i64[1] = vextq_s8((int8x16_t)v189, (int8x16_t)v189, 8uLL).u32[0];
          v190 = vmlaq_n_f32(v189, v177, v174.f32[0]);
          v190.i64[1] = vextq_s8((int8x16_t)v190, (int8x16_t)v190, 8uLL).u32[0];
          v191 = vmulq_laneq_f32(v176, v172, 2);
          v191.i32[3] = 0;
          v192 = vmlsq_lane_f32(v191, v179, *(float32x2_t *)v168.f32, 1);
          v193 = vmulq_n_f32(v177, v192.f32[0]);
          v194.i64[0] = v192.i64[0];
          v194.i64[1] = vextq_s8((int8x16_t)v192, (int8x16_t)v192, 8uLL).u32[0];
          v193.i32[3] = 0;
          v195 = vmlaq_lane_f32(v193, v178, *(float32x2_t *)v192.f32, 1);
          v195.i64[1] = vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL).u32[0];
          v196 = vmlaq_laneq_f32(v195, (float32x4_t)(unint64_t)v181, v192, 2);
          v197 = vmulq_n_f32(v179, v172.f32[0]);
          v197.i32[3] = 0;
          v198 = vmlsq_laneq_f32(v197, *v171, v168, 2);
          v192.i64[0] = v198.i64[0];
          v192.i64[1] = vextq_s8((int8x16_t)v198, (int8x16_t)v198, 8uLL).u32[0];
          v199 = vmulq_lane_f32(*v171, *(float32x2_t *)v172.f32, 1);
          v199.i32[3] = 0;
          v200 = vmlsq_lane_f32(v199, v176, *(float32x2_t *)v168.f32, 0);
          v201 = vmulq_n_f32(v177, v198.f32[0]);
          v168.i64[0] = v200.i64[0];
          v168.i64[1] = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL).u32[0];
          v201.i32[3] = 0;
          v202 = vmlaq_lane_f32(v201, v178, *(float32x2_t *)v198.f32, 1);
          v202.i64[1] = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u32[0];
          v203 = vmlaq_laneq_f32(v202, (float32x4_t)(unint64_t)v181, v198, 2);
          v196.i64[1] = vextq_s8((int8x16_t)v196, (int8x16_t)v196, 8uLL).u32[0];
          v204 = vmulq_n_f32(v177, v200.f32[0]);
          v204.i32[3] = 0;
          v205 = vmlaq_lane_f32(v204, v178, *(float32x2_t *)v200.f32, 1);
          v205.i64[1] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u32[0];
          v206 = vmlaq_laneq_f32(v205, (float32x4_t)(unint64_t)v181, v200, 2);
          v203.i64[1] = vextq_s8((int8x16_t)v203, (int8x16_t)v203, 8uLL).u32[0];
          v206.i64[1] = vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL).u32[0];
          v200.i64[0] = 0x3F0000003F000000;
          v200.i64[1] = 0x3F0000003F000000;
          v207 = vmlaq_f32(v184, v200, v196);
          v208 = vmlaq_f32(v187, v200, v203);
          *(int8x8_t *)v203.f32 = vext_s8(*(int8x8_t *)v207.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v208.f32, 1), 4uLL);
          *(int32x2_t *)v196.f32 = vdup_laneq_s32((int32x4_t)v207, 2);
          v207.i64[1] = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u32[0];
          v209 = (int8x8_t)vextq_s8((int8x16_t)v208, (int8x16_t)v208, 8uLL).u64[0];
          *(int8x8_t *)v178.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v207.f32, 0), *(int8x8_t *)v208.f32, 4uLL);
          v208.i64[1] = v209.u32[0];
          v210 = vmlaq_f32(v190, v200, v206);
          *(int8x8_t *)v211.f32 = vext_s8(*(int8x8_t *)v196.f32, v209, 4uLL);
          v212 = vdup_laneq_s32((int32x4_t)v210, 2).u32[0];
          v210.i64[1] = vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL).u32[0];
          v213 = v171[8];
          v178.i64[1] = vdup_lane_s32(*(int32x2_t *)v210.f32, 0).u32[0];
          v203.i64[1] = vdup_lane_s32(*(int32x2_t *)v210.f32, 1).u32[0];
          v211.i64[1] = v212;
          v214 = vaddq_f32(v174, v168);
          v215 = vaddq_f32(v171[6], vaddq_f32(v207, v178));
          v216 = vaddq_f32(v171[7], vaddq_f32(v208, v203));
          v217 = (float32x4_t *)(v24 + 144 * v167);
          v218 = vaddq_f32(v213, vaddq_f32(v210, v211));
          v219 = vsubq_f32(v175, *v217);
          v220 = vsubq_f32(v176, v217[1]);
          v221 = vsubq_f32(v179, v217[2]);
          v222 = vsubq_f32(vaddq_f32(v180, v194), v217[3]);
          v223 = vsubq_f32(vaddq_f32(v173, v192), v217[4]);
          v224 = vsubq_f32(v214, v217[5]);
          v225 = vsubq_f32(v215, v217[6]);
          v226 = vsubq_f32(v216, v217[7]);
          v227 = vsubq_f32(v218, v217[8]);
          v556 = v220;
          v557 = v219;
          v580[0] = v219;
          v580[1] = v220;
          v558 = v221;
          v559 = v222;
          v580[2] = v221;
          v580[3] = v222;
          v560 = v223;
          v561 = v224;
          v580[4] = v223;
          v580[5] = v224;
          v562 = v225;
          v563 = v226;
          v580[6] = v225;
          v580[7] = v226;
          v564 = v227;
          v580[8] = v227;
          v577 = (int32x2_t)v581[v167 + 64];
          v228 = (float32x2_t *)(v25 + 96 * v167);
          v229 = (float32x4_t *)(v8 + 48 * v167);
          *(int8x8_t *)v230.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v580, v228, &v583);
          v233 = (float32x4_t)vdupq_lane_s32(v577, 0);
          v234 = vmlaq_n_f32(v230, *v229, *(float *)v577.i32);
          v235 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v234.f32, 0);
          v236 = vrecpe_f32(v235);
          v237 = 4;
          do
          {
            v236 = vmul_f32(v236, vrecps_f32(v235, v236));
            --v237;
          }
          while (v237);
          v238 = (int32x4_t)vmlaq_f32(v231, v233, v229[1]);
          v239 = vmax_f32(v236, 0);
          v240 = vrsqrte_f32(v239);
          v241 = 4;
          do
          {
            v240 = vmul_f32(v240, vrsqrts_f32(vmul_f32(v240, v240), v239));
            --v241;
          }
          while (v241);
          v242 = vmul_f32(v239, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v239), 0), _D9, (int8x8_t)v240));
          v243 = vmulq_n_f32(v234, v242.f32[0]);
          v244 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v243.f32, 1);
          v245 = vneg_f32(v244);
          v246 = vmls_lane_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v238.i8, 1), v244, *(float32x2_t *)v243.f32, 1);
          v247 = vrecpe_f32(v246);
          v248 = 4;
          do
          {
            v247 = vmul_f32(v247, vrecps_f32(v246, v247));
            --v248;
          }
          while (v248);
          v249 = (int32x4_t)vmlaq_f32(v232, v233, v229[2]);
          v250 = vmax_f32(v247, 0);
          v251 = vrsqrte_f32(v250);
          v252 = 4;
          do
          {
            v251 = vmul_f32(v251, vrsqrts_f32(vmul_f32(v251, v251), v250));
            --v252;
          }
          while (v252);
          v253 = (float32x2_t)vdup_laneq_s32(v249, 2);
          v254 = vmul_f32(v250, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v250), 0), _D9, (int8x8_t)v251));
          v255 = (float32x2_t)vdup_laneq_s32((int32x4_t)v243, 2);
          v256 = vmul_f32(vmla_laneq_f32((float32x2_t)vdup_laneq_s32(v238, 2), v245, v243, 2), v254);
          v257 = vneg_f32(v256);
          v258 = vneg_f32(v255);
          v259 = vmls_laneq_f32(vmls_f32(v253, v256, v256), v255, v243, 2);
          v260 = vrecpe_f32(v259);
          v261 = 4;
          do
          {
            v260 = vmul_f32(v260, vrecps_f32(v259, v260));
            --v261;
          }
          while (v261);
          v262 = vmax_f32(v260, 0);
          v263 = vrsqrte_f32(v262);
          v264 = 4;
          do
          {
            v263 = vmul_f32(v263, vrsqrts_f32(vmul_f32(v263, v263), v262));
            --v264;
          }
          while (v264);
          v265 = vmul_f32(v262, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v262), 0), _D9, (int8x8_t)v263));
          v266 = vmul_f32(vmul_lane_f32(v242, *(float32x2_t *)v243.f32, 1), v254);
          v267 = (int8x8_t)vmul_f32(vmla_f32(vmul_f32(v256, v266), v242, v258), v265);
          v268 = (float32x2_t)vext_s8((int8x8_t)vneg_f32(v266), (int8x8_t)v254, 4uLL);
          *(int8x8_t *)v269.f32 = vext_s8(v267, (int8x8_t)vmul_f32(vmul_f32(v254, v265), v257), 4uLL);
          v269.i64[1] = v265.u32[0];
          v270 = vmulq_lane_f32(v583, v242, 1);
          v271 = v270;
          v271.i32[3] = 0;
          v272 = vmulq_lane_f32(v584, v242, 1);
          v273 = v272;
          v273.i32[3] = 0;
          v274 = vmulq_lane_f32(v585, v268, 1);
          v274.i32[3] = 0;
          v275 = vmlaq_n_f32(v274, v583, v268.f32[0]);
          v276.i64[0] = v275.i64[0];
          v276.i64[1] = vextq_s8((int8x16_t)v275, (int8x16_t)v275, 8uLL).u32[0];
          v277 = vmulq_lane_f32(v586, v268, 1);
          v277.i32[3] = 0;
          v278 = vmlaq_n_f32(v277, v584, v268.f32[0]);
          v279.i64[0] = v278.i64[0];
          v279.i64[1] = vextq_s8((int8x16_t)v278, (int8x16_t)v278, 8uLL).u32[0];
          v280 = vmulq_laneq_f32(v587, v269, 2);
          v280.i32[3] = 0;
          v281 = vmlaq_lane_f32(v280, v585, *(float32x2_t *)v269.f32, 1);
          v281.i64[1] = vextq_s8((int8x16_t)v281, (int8x16_t)v281, 8uLL).u32[0];
          v282 = vmlaq_n_f32(v281, v583, v269.f32[0]);
          v283.i64[0] = v282.i64[0];
          v283.i64[1] = vextq_s8((int8x16_t)v282, (int8x16_t)v282, 8uLL).u32[0];
          v284 = vmulq_laneq_f32(v588, v269, 2);
          v284.i32[3] = 0;
          v285 = vmlaq_lane_f32(v284, v586, *(float32x2_t *)v269.f32, 1);
          v285.i64[1] = vextq_s8((int8x16_t)v285, (int8x16_t)v285, 8uLL).u32[0];
          v286 = vmlaq_n_f32(v285, v584, v269.f32[0]);
          v269.i64[0] = v286.i64[0];
          v269.i64[1] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u32[0];
          v287 = vmlsq_lane_f32(v557, v271, *(float32x2_t *)v270.f32, 0);
          v287.i64[1] = vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL).u32[0];
          v288 = vmlsq_lane_f32(v559, v271, *(float32x2_t *)v272.f32, 0);
          v288.i64[1] = vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL).u32[0];
          v289 = vmlsq_lane_f32(v562, v273, *(float32x2_t *)v272.f32, 0);
          v289.i64[1] = vextq_s8((int8x16_t)v289, (int8x16_t)v289, 8uLL).u32[0];
          v290 = vmlsq_lane_f32(v556, v271, *(float32x2_t *)v270.f32, 1);
          v290.i64[1] = vextq_s8((int8x16_t)v290, (int8x16_t)v290, 8uLL).u32[0];
          v291 = vmlsq_lane_f32(v560, v271, *(float32x2_t *)v272.f32, 1);
          v291.i64[1] = vextq_s8((int8x16_t)v291, (int8x16_t)v291, 8uLL).u32[0];
          v292 = vmlsq_lane_f32(v563, v273, *(float32x2_t *)v272.f32, 1);
          v292.i64[1] = vextq_s8((int8x16_t)v292, (int8x16_t)v292, 8uLL).u32[0];
          v293 = vmlsq_laneq_f32(v558, v271, v270, 2);
          v293.i64[1] = vextq_s8((int8x16_t)v293, (int8x16_t)v293, 8uLL).u32[0];
          v294 = vmlsq_laneq_f32(v561, v271, v272, 2);
          v294.i64[1] = vextq_s8((int8x16_t)v294, (int8x16_t)v294, 8uLL).u32[0];
          v295 = vmlsq_laneq_f32(v564, v273, v272, 2);
          v295.i64[1] = vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL).u32[0];
          v296 = vmlsq_lane_f32(v287, v276, *(float32x2_t *)v275.f32, 0);
          v296.i64[1] = vextq_s8((int8x16_t)v296, (int8x16_t)v296, 8uLL).u32[0];
          v297 = vmlsq_lane_f32(v288, v276, *(float32x2_t *)v278.f32, 0);
          v297.i64[1] = vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL).u32[0];
          v298 = vmlsq_lane_f32(v289, v279, *(float32x2_t *)v278.f32, 0);
          v298.i64[1] = vextq_s8((int8x16_t)v298, (int8x16_t)v298, 8uLL).u32[0];
          v299 = vmlsq_lane_f32(v290, v276, *(float32x2_t *)v275.f32, 1);
          v299.i64[1] = vextq_s8((int8x16_t)v299, (int8x16_t)v299, 8uLL).u32[0];
          v300 = vmlsq_lane_f32(v291, v276, *(float32x2_t *)v278.f32, 1);
          v300.i64[1] = vextq_s8((int8x16_t)v300, (int8x16_t)v300, 8uLL).u32[0];
          v301 = vmlsq_lane_f32(v292, v279, *(float32x2_t *)v278.f32, 1);
          v301.i64[1] = vextq_s8((int8x16_t)v301, (int8x16_t)v301, 8uLL).u32[0];
          v302 = vmlsq_laneq_f32(v293, v276, v275, 2);
          v302.i64[1] = vextq_s8((int8x16_t)v302, (int8x16_t)v302, 8uLL).u32[0];
          v303 = vmlsq_laneq_f32(v294, v276, v278, 2);
          v303.i64[1] = vextq_s8((int8x16_t)v303, (int8x16_t)v303, 8uLL).u32[0];
          v304 = vmlsq_laneq_f32(v295, v279, v278, 2);
          v304.i64[1] = vextq_s8((int8x16_t)v304, (int8x16_t)v304, 8uLL).u32[0];
          v574 = (int8x16_t)vmlsq_lane_f32(v297, v283, *(float32x2_t *)v286.f32, 0);
          v578 = (int8x16_t)vmlsq_lane_f32(v296, v283, *(float32x2_t *)v282.f32, 0);
          v305 = (int8x16_t)vmlsq_lane_f32(v298, v269, *(float32x2_t *)v286.f32, 0);
          v548 = vextq_s8(v578, v578, 8uLL).u32[0];
          v549 = vextq_s8(v305, v305, 8uLL).u32[0];
          v570 = (int8x16_t)vmlsq_lane_f32(v300, v283, *(float32x2_t *)v286.f32, 1);
          v572 = v305.i64[0];
          v554 = (int8x16_t)vmlsq_lane_f32(v301, v269, *(float32x2_t *)v286.f32, 1);
          v555 = (int8x16_t)vmlsq_lane_f32(v299, v283, *(float32x2_t *)v282.f32, 1);
          v566 = vextq_s8(v554, v554, 8uLL).u32[0];
          v567 = vextq_s8(v555, v555, 8uLL).u32[0];
          v306 = (int8x16_t)vmlsq_laneq_f32(v302, v283, v282, 2);
          v550 = vextq_s8(v574, v574, 8uLL).u32[0];
          v551 = vextq_s8(v306, v306, 8uLL).u32[0];
          v552 = (int8x16_t)vmlsq_laneq_f32(v303, v283, v286, 2);
          v553 = v306.i64[0];
          v565 = vextq_s8(v552, v552, 8uLL).u32[0];
          v568 = (int8x16_t)vmlsq_laneq_f32(v304, v269, v286, 2);
          v546 = vextq_s8(v568, v568, 8uLL).u32[0];
          v547 = vextq_s8(v570, v570, 8uLL).u32[0];
          v307 = (float32x4_t *)&v15[144 * v167];
          *(int8x8_t *)v308.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v307, v228, &v594);
          v310 = (float32x2_t)vextq_s8(v309, v309, 8uLL).u64[0];
          v312 = (float32x2_t)vextq_s8(v311, v311, 8uLL).u64[0];
          v313 = (float32x2_t)vext_s8(*(int8x8_t *)v311.i8, (int8x8_t)v312, 4uLL);
          v314 = (float32x2_t)vext_s8(*(int8x8_t *)v309.i8, (int8x8_t)v310, 4uLL);
          v315 = (int8x8_t)vmls_f32(vmul_f32(v310, *(float32x2_t *)v311.i8), *(float32x2_t *)v309.i8, v312);
          v316 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v309.i8, v313), v314, *(float32x2_t *)v311.i8);
          *(int8x8_t *)v317.f32 = vext_s8((int8x8_t)v316, v315, 4uLL);
          v316.i32[1] = 0;
          v317.i64[1] = v316.u32[0];
          v318 = (float32x2_t)vextq_s8((int8x16_t)v308, (int8x16_t)v308, 8uLL).u64[0];
          v319 = (float32x2_t)vext_s8(*(int8x8_t *)v308.f32, (int8x8_t)v318, 4uLL);
          v320 = vmul_f32(v312, *(float32x2_t *)v308.f32);
          v321 = vmls_f32(vmul_f32(*(float32x2_t *)v311.i8, v319), v313, *(float32x2_t *)v308.f32).u32[0];
          *(int32x2_t *)v322.f32 = vdup_lane_s32((int32x2_t)vmls_f32(v320, *(float32x2_t *)v311.i8, v318), 0);
          v322.i64[1] = v321;
          v323 = vmulq_f32(v308, v317);
          v323.i64[0] = vpaddq_f32(v323, v323).u64[0];
          v324 = vpadd_f32(*(float32x2_t *)v323.f32, *(float32x2_t *)v323.f32);
          v325 = vrecpe_f32(v324);
          v326 = 4;
          do
          {
            v325 = vmul_f32(v325, vrecps_f32(v324, v325));
            --v326;
          }
          while (v326);
          v327 = vmls_f32(vmul_f32(*(float32x2_t *)v308.f32, v314), v319, *(float32x2_t *)v309.i8);
          v322.i32[0] = v315.i32[0];
          *(int8x8_t *)v328.f32 = vext_s8((int8x8_t)vdup_lane_s32(v316, 0), (int8x8_t)v321, 4uLL);
          *(float32x2_t *)&v328.u32[2] = v327;
          v329 = vmulq_n_f32(v317, v325.f32[0]);
          v330 = vmulq_n_f32(v322, v325.f32[0]);
          v331 = vmulq_n_f32(v328, v325.f32[0]);
          v332 = (float32x4_t *)&v15[144 * v167];
          v334 = v332[4];
          v333 = v332 + 4;
          v335 = v333 - 1;
          v336 = v333 + 1;
          v337 = v333 + 2;
          v338 = v333 + 3;
          v339 = v333 + 4;
          v340 = vmulq_laneq_f32(v598, v329, 2);
          v340.i32[3] = 0;
          v341 = vmlaq_lane_f32(v340, v596, *(float32x2_t *)v329.f32, 1);
          v341.i64[1] = vextq_s8((int8x16_t)v341, (int8x16_t)v341, 8uLL).u32[0];
          v342 = vmlaq_n_f32(v341, v594, v329.f32[0]);
          v342.i64[1] = vextq_s8((int8x16_t)v342, (int8x16_t)v342, 8uLL).u32[0];
          v343 = vmulq_laneq_f32(v598, v330, 2);
          v343.i32[3] = 0;
          v344 = vmlaq_lane_f32(v343, v596, *(float32x2_t *)v330.f32, 1);
          v344.i64[1] = vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u32[0];
          v345 = vmlaq_n_f32(v344, v594, v330.f32[0]);
          v345.i64[1] = vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u32[0];
          v346 = vmulq_laneq_f32(v598, v331, 2);
          v346.i32[3] = 0;
          v347 = vmlaq_lane_f32(v346, v596, *(float32x2_t *)v331.f32, 1);
          v347.i64[1] = vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).u32[0];
          v348 = vmlaq_n_f32(v347, v594, v331.f32[0]);
          v348.i64[1] = vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u32[0];
          v349 = vmulq_laneq_f32(v599, v329, 2);
          v349.i32[3] = 0;
          v350 = vmlaq_lane_f32(v349, v597, *(float32x2_t *)v329.f32, 1);
          v350.i64[1] = vextq_s8((int8x16_t)v350, (int8x16_t)v350, 8uLL).u32[0];
          v351 = vmlaq_n_f32(v350, v595, v329.f32[0]);
          v351.i64[1] = vextq_s8((int8x16_t)v351, (int8x16_t)v351, 8uLL).u32[0];
          v352 = vmulq_laneq_f32(v599, v330, 2);
          v352.i32[3] = 0;
          v353 = vmlaq_lane_f32(v352, v597, *(float32x2_t *)v330.f32, 1);
          v353.i64[1] = vextq_s8((int8x16_t)v353, (int8x16_t)v353, 8uLL).u32[0];
          v354 = vmlaq_n_f32(v353, v595, v330.f32[0]);
          v354.i64[1] = vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u32[0];
          v355 = vmulq_laneq_f32(v599, v331, 2);
          v355.i32[3] = 0;
          v356 = vmlaq_lane_f32(v355, v597, *(float32x2_t *)v331.f32, 1);
          v356.i64[1] = vextq_s8((int8x16_t)v356, (int8x16_t)v356, 8uLL).u32[0];
          v357 = vmlaq_n_f32(v356, v595, v331.f32[0]);
          v357.i64[1] = vextq_s8((int8x16_t)v357, (int8x16_t)v357, 8uLL).u32[0];
          v358 = vmlsq_lane_f32(vaddq_f32(v557, *v307), v342, *(float32x2_t *)v594.f32, 0);
          v358.i64[1] = vextq_s8((int8x16_t)v358, (int8x16_t)v358, 8uLL).u32[0];
          v359 = vmlsq_lane_f32(vaddq_f32(v559, v333[-1]), v342, *(float32x2_t *)v595.f32, 0);
          v359.i64[1] = vextq_s8((int8x16_t)v359, (int8x16_t)v359, 8uLL).u32[0];
          v360 = vmlsq_lane_f32(vaddq_f32(v562, v333[2]), v351, *(float32x2_t *)v595.f32, 0);
          v360.i64[1] = vextq_s8((int8x16_t)v360, (int8x16_t)v360, 8uLL).u32[0];
          v361 = vmlsq_lane_f32(vaddq_f32(v556, v307[1]), v342, *(float32x2_t *)v594.f32, 1);
          v361.i64[1] = vextq_s8((int8x16_t)v361, (int8x16_t)v361, 8uLL).u32[0];
          v362 = vmlsq_lane_f32(vaddq_f32(v560, v334), v342, *(float32x2_t *)v595.f32, 1);
          v362.i64[1] = vextq_s8((int8x16_t)v362, (int8x16_t)v362, 8uLL).u32[0];
          v363 = vmlsq_lane_f32(vaddq_f32(v563, v333[3]), v351, *(float32x2_t *)v595.f32, 1);
          v363.i64[1] = vextq_s8((int8x16_t)v363, (int8x16_t)v363, 8uLL).u32[0];
          v364 = vmlsq_laneq_f32(vaddq_f32(v558, v307[2]), v342, v594, 2);
          v364.i64[1] = vextq_s8((int8x16_t)v364, (int8x16_t)v364, 8uLL).u32[0];
          v365 = vmlsq_laneq_f32(vaddq_f32(v561, v333[1]), v342, v595, 2);
          v365.i64[1] = vextq_s8((int8x16_t)v365, (int8x16_t)v365, 8uLL).u32[0];
          v366 = vmlsq_laneq_f32(vaddq_f32(v564, v333[4]), v351, v595, 2);
          v366.i64[1] = vextq_s8((int8x16_t)v366, (int8x16_t)v366, 8uLL).u32[0];
          v367 = vmlsq_lane_f32(v358, v345, *(float32x2_t *)v596.f32, 0);
          v367.i64[1] = vextq_s8((int8x16_t)v367, (int8x16_t)v367, 8uLL).u32[0];
          v368 = vmlsq_lane_f32(v359, v345, *(float32x2_t *)v597.f32, 0);
          v368.i64[1] = vextq_s8((int8x16_t)v368, (int8x16_t)v368, 8uLL).u32[0];
          v369 = vmlsq_lane_f32(v360, v354, *(float32x2_t *)v597.f32, 0);
          v369.i64[1] = vextq_s8((int8x16_t)v369, (int8x16_t)v369, 8uLL).u32[0];
          v370 = vmlsq_lane_f32(v361, v345, *(float32x2_t *)v596.f32, 1);
          v370.i64[1] = vextq_s8((int8x16_t)v370, (int8x16_t)v370, 8uLL).u32[0];
          v371 = vmlsq_lane_f32(v362, v345, *(float32x2_t *)v597.f32, 1);
          v371.i64[1] = vextq_s8((int8x16_t)v371, (int8x16_t)v371, 8uLL).u32[0];
          v372 = vmlsq_lane_f32(v363, v354, *(float32x2_t *)v597.f32, 1);
          v372.i64[1] = vextq_s8((int8x16_t)v372, (int8x16_t)v372, 8uLL).u32[0];
          v373 = vmlsq_laneq_f32(v364, v345, v596, 2);
          v373.i64[1] = vextq_s8((int8x16_t)v373, (int8x16_t)v373, 8uLL).u32[0];
          v374 = vmlsq_laneq_f32(v365, v345, v597, 2);
          v374.i64[1] = vextq_s8((int8x16_t)v374, (int8x16_t)v374, 8uLL).u32[0];
          v375 = vmlsq_laneq_f32(v366, v354, v597, 2);
          v375.i64[1] = vextq_s8((int8x16_t)v375, (int8x16_t)v375, 8uLL).u32[0];
          v376 = vmlsq_lane_f32(v367, v348, *(float32x2_t *)v598.f32, 0);
          v377 = (int32x4_t)vmlsq_lane_f32(v368, v348, *(float32x2_t *)v599.f32, 0);
          v378 = vextq_s8((int8x16_t)v377, (int8x16_t)v377, 8uLL).u32[0];
          v379 = vmlsq_lane_f32(v369, v357, *(float32x2_t *)v599.f32, 0);
          v380 = vmlsq_lane_f32(v370, v348, *(float32x2_t *)v598.f32, 1);
          v381 = (int8x16_t)vmlsq_lane_f32(v371, v348, *(float32x2_t *)v599.f32, 1);
          v382 = (int8x8_t)vextq_s8(v381, v381, 8uLL).u64[0];
          v383 = vmlsq_lane_f32(v372, v357, *(float32x2_t *)v599.f32, 1);
          v384 = vmlsq_laneq_f32(v373, v348, v598, 2);
          v385 = (int32x4_t)vmlsq_laneq_f32(v374, v348, v599, 2);
          v386 = vextq_s8((int8x16_t)v385, (int8x16_t)v385, 8uLL).u32[0];
          v387 = vmlsq_laneq_f32(v375, v357, v599, 2);
          v388 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v379.f32, 0), *(int8x8_t *)v383.f32, 4uLL);
          v396.i64[1] = v387.i64[0];
          v593[0] = v342;
          v593[1] = v351;
          v593[2] = v345;
          v593[3] = v354;
          *(int8x8_t *)v342.f32 = vext_s8(*(int8x8_t *)v379.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v383.f32, 1), 4uLL);
          *(int32x2_t *)&v342.u32[2] = vdup_lane_s32(*(int32x2_t *)v387.f32, 1);
          *(int8x8_t *)v345.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v379, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v383, (int8x16_t)v383, 8uLL), 4uLL);
          v345.i64[1] = vextq_s8((int8x16_t)v387, (int8x16_t)v387, 8uLL).u64[0];
          v593[4] = v348;
          v593[5] = v357;
          v389.i64[0] = 0x3F0000003F000000;
          v389.i64[1] = 0x3F0000003F000000;
          v390 = vmulq_f32(vaddq_f32(v379, v396), v389);
          v391 = v390;
          v391.i32[3] = 0;
          v392 = vmulq_f32(vaddq_f32(v383, v342), v389);
          v393 = (int8x16_t)v392;
          v393.i32[3] = 0;
          v394 = vmulq_f32(vaddq_f32(v387, v345), v389);
          v395 = (int8x16_t)v394;
          v395.i32[3] = 0;
          *(int8x8_t *)v396.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v376.f32, 0), *(int8x8_t *)v380.f32, 4uLL);
          *(int8x8_t *)v345.f32 = vext_s8(*(int8x8_t *)v376.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v380.f32, 1), 4uLL);
          *(int32x2_t *)&v345.u32[2] = vdup_lane_s32(*(int32x2_t *)v384.f32, 1);
          *(int8x8_t *)v354.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v376, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v380, (int8x16_t)v380, 8uLL), 4uLL);
          v354.i64[1] = vextq_s8((int8x16_t)v384, (int8x16_t)v384, 8uLL).u64[0];
          v397 = vaddq_f32(v380, v345);
          v398 = vaddq_f32(v384, v354);
          v380.i64[0] = vextq_s8(v393, v393, 8uLL).u64[0];
          v387.i64[0] = vextq_s8(v395, v395, 8uLL).u64[0];
          v399 = (float32x2_t)vext_s8(*(int8x8_t *)v394.f32, *(int8x8_t *)v387.f32, 4uLL);
          v400 = (float32x2_t)vext_s8(*(int8x8_t *)v392.f32, *(int8x8_t *)v380.f32, 4uLL);
          v401 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v394.f32, *(float32x2_t *)v380.f32), *(float32x2_t *)v392.f32, *(float32x2_t *)v387.f32);
          v402 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v392.f32, v399), v400, *(float32x2_t *)v394.f32);
          *(int8x8_t *)v403.f32 = vext_s8((int8x8_t)v402, v401, 4uLL);
          v402.i32[1] = 0;
          v403.i64[1] = v402.u32[0];
          v404 = (float32x2_t)vextq_s8((int8x16_t)v391, (int8x16_t)v391, 8uLL).u64[0];
          v405 = (float32x2_t)vext_s8(*(int8x8_t *)v390.f32, (int8x8_t)v404, 4uLL);
          *(int32x2_t *)v407.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v390.f32, *(float32x2_t *)v387.f32), *(float32x2_t *)v394.f32, v404), 0);
          v406 = vmls_f32(vmul_f32(*(float32x2_t *)v394.f32, v405), v399, *(float32x2_t *)v390.f32).u32[0];
          v407.i64[1] = v406;
          v408 = vmulq_f32(v397, v389);
          v409 = vmulq_f32(v391, v403);
          v409.i64[0] = vpaddq_f32(v409, v409).u64[0];
          v410 = vpadd_f32(*(float32x2_t *)v409.f32, *(float32x2_t *)v409.f32);
          v411 = vrecpe_f32(v410);
          v412 = 4;
          do
          {
            v411 = vmul_f32(v411, vrecps_f32(v410, v411));
            --v412;
          }
          while (v412);
          v396.i64[1] = v384.i64[0];
          v413.i64[0] = 0x3F0000003F000000;
          v413.i64[1] = 0x3F0000003F000000;
          v414 = vmulq_f32(vaddq_f32(v376, v396), v413);
          v415.i64[0] = v578.i64[0];
          v415.i64[1] = v548;
          v579 = v415;
          v416 = vmulq_f32(v398, v413);
          v415.i64[0] = v570.i64[0];
          v415.i64[1] = v547;
          v571 = v415;
          v415.i64[0] = v568.i64[0];
          v415.i64[1] = v546;
          v569 = v415;
          v417.i64[0] = v377.i64[0];
          v417.i64[1] = v378;
          v418.i64[0] = v381.i64[0];
          v418.i64[1] = v382.u32[0];
          v419.i64[0] = v385.i64[0];
          v419.i64[1] = v386;
          v414.i32[3] = 0;
          v408.i32[3] = 0;
          v416.i32[3] = 0;
          *(float32x2_t *)v415.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v390.f32, v400), v405, *(float32x2_t *)v392.f32);
          v407.i32[0] = v401.i32[0];
          *(int8x8_t *)v420.f32 = vext_s8((int8x8_t)vdup_lane_s32(v402, 0), (int8x8_t)v406, 4uLL);
          v420.i64[1] = v415.i64[0];
          v421 = vmulq_n_f32(v403, v411.f32[0]);
          v422 = vmulq_n_f32(v407, v411.f32[0]);
          v423 = vmulq_n_f32(v420, v411.f32[0]);
          v424 = vnegq_f32(v417);
          v424.i32[3] = 0;
          v425 = vnegq_f32(v418);
          v425.i32[3] = 0;
          v426 = vnegq_f32(v419);
          v426.i32[3] = 0;
          v427 = vmulq_n_f32(v424, v421.f32[0]);
          v427.i32[3] = 0;
          v428 = vmulq_lane_f32(v425, *(float32x2_t *)v421.f32, 1);
          v428.i32[3] = 0;
          v429 = vmulq_laneq_f32(v426, v421, 2);
          v429.i32[3] = 0;
          v430 = vaddq_f32(v427, v428);
          v431 = vmulq_n_f32(v424, v422.f32[0]);
          v431.i32[3] = 0;
          v432 = vmulq_lane_f32(v425, *(float32x2_t *)v422.f32, 1);
          v432.i32[3] = 0;
          v433 = vmulq_laneq_f32(v426, v422, 2);
          v433.i32[3] = 0;
          v434 = vaddq_f32(v429, v430);
          v435 = vaddq_f32(v433, vaddq_f32(v431, v432));
          v436 = vmulq_n_f32(v424, v423.f32[0]);
          v436.i32[3] = 0;
          v437 = vmulq_lane_f32(v425, *(float32x2_t *)v423.f32, 1);
          v437.i32[3] = 0;
          v438 = vmulq_laneq_f32(v426, v423, 2);
          v438.i32[3] = 0;
          v439 = vaddq_f32(v436, v437);
          *(int8x8_t *)v437.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v377.i8, 0), *(int8x8_t *)v381.i8, 4uLL);
          v437.i64[1] = vdup_lane_s32(*(int32x2_t *)v385.i8, 0).u32[0];
          *(int32x2_t *)v429.f32 = vdup_lane_s32(*(int32x2_t *)v381.i8, 1);
          v440 = vaddq_f32(v438, v439);
          *(int8x8_t *)v438.f32 = vext_s8(*(int8x8_t *)v377.i8, *(int8x8_t *)v429.f32, 4uLL);
          v438.i64[1] = vdup_lane_s32(*(int32x2_t *)v385.i8, 1).u32[0];
          *(int8x8_t *)v441.f32 = vext_s8((int8x8_t)vdup_laneq_s32(v377, 2), v382, 4uLL);
          v441.i64[1] = vdup_laneq_s32(v385, 2).u32[0];
          v442 = vmulq_n_f32(v434, v437.f32[0]);
          v442.i32[3] = 0;
          v443 = vmulq_lane_f32(v435, *(float32x2_t *)v437.f32, 1);
          v443.i32[3] = 0;
          v444 = vmulq_laneq_f32(v440, v437, 2);
          v444.i32[3] = 0;
          v445 = vaddq_f32(v442, v443);
          v446 = vmulq_n_f32(v434, v438.f32[0]);
          v446.i32[3] = 0;
          v447 = vmulq_lane_f32(v435, *(float32x2_t *)v438.f32, 1);
          v447.i32[3] = 0;
          v448 = vmulq_laneq_f32(v440, v438, 2);
          v448.i32[3] = 0;
          v449 = vaddq_f32(v444, v445);
          v450 = vaddq_f32(v448, vaddq_f32(v446, v447));
          v451 = vmulq_n_f32(v434, v441.f32[0]);
          v451.i32[3] = 0;
          v452 = vmulq_lane_f32(v435, *(float32x2_t *)v441.f32, 1);
          v452.i32[3] = 0;
          v453 = vmulq_laneq_f32(v440, v441, 2);
          v453.i32[3] = 0;
          v454 = vaddq_f32(v414, v449);
          v455 = (int8x16_t)vaddq_f32(v408, v450);
          v456 = (int8x16_t)vaddq_f32(v416, vaddq_f32(v453, vaddq_f32(v451, v452)));
          v448.i64[0] = vextq_s8(v456, v456, 8uLL).u64[0];
          v432.i64[0] = vextq_s8(v456, v456, 4uLL).u64[0];
          v457 = (float32x2_t)vextq_s8(v455, v455, 4uLL).u64[0];
          v458 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v455, v455, 8uLL), *(float32x2_t *)v456.i8), *(float32x2_t *)v455.i8, *(float32x2_t *)v448.f32);
          v459 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v455.i8, *(float32x2_t *)v432.f32), v457, *(float32x2_t *)v456.i8);
          *(int8x8_t *)v460.f32 = vext_s8((int8x8_t)v459, v458, 4uLL);
          v459.i32[1] = 0;
          v460.i64[1] = v459.u32[0];
          v461 = (float32x2_t)vextq_s8((int8x16_t)v454, (int8x16_t)v454, 4uLL).u64[0];
          *(float32x2_t *)v433.f32 = vmul_f32(*(float32x2_t *)v448.f32, *(float32x2_t *)v454.f32);
          v462 = vmls_f32(vmul_f32(*(float32x2_t *)v456.i8, v461), *(float32x2_t *)v432.f32, *(float32x2_t *)v454.f32).u32[0];
          *(int32x2_t *)v463.f32 = vdup_lane_s32((int32x2_t)vmls_f32(*(float32x2_t *)v433.f32, *(float32x2_t *)v456.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v454, (int8x16_t)v454, 8uLL)), 0);
          v463.i64[1] = v462;
          v464 = vmulq_f32(v454, v460);
          v464.i64[0] = vpaddq_f32(v464, v464).u64[0];
          v465 = vpadd_f32(*(float32x2_t *)v464.f32, *(float32x2_t *)v464.f32);
          v466 = vrecpe_f32(v465);
          v467 = 4;
          do
          {
            v466 = vmul_f32(v466, vrecps_f32(v465, v466));
            --v467;
          }
          while (v467);
          v468.i64[0] = v572;
          v468.i64[1] = v549;
          v573 = v468;
          v330.i32[3] = 0;
          v468.i64[0] = v574.i64[0];
          v468.i64[1] = v550;
          v575 = v468;
          v329.i32[3] = 0;
          v331.i32[3] = 0;
          v421.i32[3] = 0;
          v422.i32[3] = 0;
          v423.i32[3] = 0;
          v463.i32[0] = v458.i32[0];
          *(int8x8_t *)v469.f32 = vext_s8((int8x8_t)vdup_lane_s32(v459, 0), (int8x8_t)v462, 4uLL);
          *(float32x2_t *)&v469.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v454.f32, v457), v461, *(float32x2_t *)v455.i8);
          v470 = vmulq_n_f32(v460, v466.f32[0]);
          v471 = vmulq_n_f32(v470, v434.f32[0]);
          v472 = vmulq_n_f32(v470, v435.f32[0]);
          v473 = vmulq_n_f32(v470, v440.f32[0]);
          v470.i32[3] = 0;
          v474 = vmulq_n_f32(v463, v466.f32[0]);
          v475 = vmulq_lane_f32(v474, *(float32x2_t *)v434.f32, 1);
          v476 = vmulq_lane_f32(v474, *(float32x2_t *)v435.f32, 1);
          v477 = vmulq_lane_f32(v474, *(float32x2_t *)v440.f32, 1);
          v474.i32[3] = 0;
          v478 = vmulq_n_f32(v469, v466.f32[0]);
          v479 = vmulq_laneq_f32(v478, v434, 2);
          v480 = vmulq_laneq_f32(v478, v435, 2);
          v481 = v478;
          v481.i32[3] = 0;
          v482 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v434, 2).u64[0];
          v471.i32[3] = 0;
          v475.i32[3] = 0;
          v483 = vmulq_laneq_f32(v478, v440, 2);
          v479.i32[3] = 0;
          v484 = vaddq_f32(v471, v475);
          v475.i64[0] = vdupq_lane_s32(*(int32x2_t *)v435.f32, 1).u64[0];
          v485 = vaddq_f32(v479, v484);
          v479.i64[0] = vextq_s8((int8x16_t)v435, (int8x16_t)v435, 8uLL).u64[0];
          v472.i32[3] = 0;
          v476.i32[3] = 0;
          v480.i32[3] = 0;
          v486 = vaddq_f32(v480, vaddq_f32(v472, v476));
          v473.i32[3] = 0;
          v477.i32[3] = 0;
          v483.i32[3] = 0;
          *(int8x8_t *)v487.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v434.f32, 0), *(int8x8_t *)v435.f32, 4uLL);
          v487.i64[1] = vdupq_lane_s32(*(int32x2_t *)v440.f32, 0).u32[0];
          v488 = vaddq_f32(v483, vaddq_f32(v473, v477));
          *(int8x8_t *)v489.f32 = vext_s8(*(int8x8_t *)v434.f32, *(int8x8_t *)v475.f32, 4uLL);
          v489.i64[1] = vdupq_lane_s32(*(int32x2_t *)v440.f32, 1).u32[0];
          *(int8x8_t *)v473.f32 = vext_s8(v482, *(int8x8_t *)v479.f32, 4uLL);
          v473.i64[1] = vdupq_laneq_s32((int32x4_t)v440, 2).u32[0];
          v490 = vmulq_n_f32(v487, v485.f32[0]);
          v490.i32[3] = 0;
          v491 = vmulq_lane_f32(v489, *(float32x2_t *)v485.f32, 1);
          v491.i32[3] = 0;
          v492 = vmulq_laneq_f32(v473, v485, 2);
          v492.i32[3] = 0;
          v493 = vaddq_f32(v492, vaddq_f32(v490, v491));
          v494 = vmulq_n_f32(v487, v486.f32[0]);
          v494.i32[3] = 0;
          v495 = vmulq_lane_f32(v489, *(float32x2_t *)v486.f32, 1);
          v495.i32[3] = 0;
          v496 = vmulq_laneq_f32(v473, v486, 2);
          v496.i32[3] = 0;
          v497 = vmulq_n_f32(v487, v488.f32[0]);
          v497.i32[3] = 0;
          v498 = vmulq_lane_f32(v489, *(float32x2_t *)v488.f32, 1);
          v498.i32[3] = 0;
          v499 = vmulq_laneq_f32(v473, v488, 2);
          v499.i32[3] = 0;
          v583 = v470;
          v584 = v474;
          v585 = v481;
          v586 = v485;
          v587 = v486;
          v588 = v488;
          v589 = vaddq_f32(v421, v493);
          v590 = vaddq_f32(v422, vaddq_f32(v496, vaddq_f32(v494, v495)));
          v591 = vaddq_f32(v423, vaddq_f32(v499, vaddq_f32(v497, v498)));
          *(int8x8_t *)v500.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(&v583, (float32x2_t *)v593, v592);
          v501 = vaddq_f32(v329, v500);
          v503 = (int8x16_t)vaddq_f32(v330, v502);
          v505 = (int8x16_t)vaddq_f32(v331, v504);
          v506 = (float32x2_t)vextq_s8(v505, v505, 8uLL).u64[0];
          v507 = (float32x2_t)vextq_s8(v505, v505, 4uLL).u64[0];
          v508 = (float32x2_t)vextq_s8(v503, v503, 4uLL).u64[0];
          v509 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v503, v503, 8uLL), *(float32x2_t *)v505.i8), *(float32x2_t *)v503.i8, v506);
          v510 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v503.i8, v507), v508, *(float32x2_t *)v505.i8);
          *(int8x8_t *)v511.f32 = vext_s8((int8x8_t)v510, v509, 4uLL);
          v510.i32[1] = 0;
          v511.i64[1] = v510.u32[0];
          v512 = (float32x2_t)vextq_s8((int8x16_t)v501, (int8x16_t)v501, 4uLL).u64[0];
          v513 = vmul_f32(v506, *(float32x2_t *)v501.f32);
          v514 = vmls_f32(vmul_f32(*(float32x2_t *)v505.i8, v512), v507, *(float32x2_t *)v501.f32).u32[0];
          *(int32x2_t *)v515.f32 = vdup_lane_s32((int32x2_t)vmls_f32(v513, *(float32x2_t *)v505.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v501, (int8x16_t)v501, 8uLL)), 0);
          v515.i64[1] = v514;
          v516 = vmulq_f32(v501, v511);
          v516.i64[0] = vpaddq_f32(v516, v516).u64[0];
          v517 = vpadd_f32(*(float32x2_t *)v516.f32, *(float32x2_t *)v516.f32);
          v518 = vrecpe_f32(v517);
          v519 = 4;
          do
          {
            v518 = vmul_f32(v518, vrecps_f32(v517, v518));
            --v519;
          }
          while (v519);
          v521.i64[0] = v553;
          v520.i64[0] = v554.i64[0];
          v521.i64[1] = v551;
          v520.i64[1] = v566;
          v522.i64[0] = v555.i64[0];
          v522.i64[1] = v567;
          v523.i64[0] = v552.i64[0];
          v523.i64[1] = v565;
          v515.i32[0] = v509.i32[0];
          v524 = vmls_f32(vmul_f32(*(float32x2_t *)v501.f32, v508), v512, *(float32x2_t *)v503.i8);
          *(int8x8_t *)v525.f32 = vext_s8((int8x8_t)vdup_lane_s32(v510, 0), (int8x8_t)v514, 4uLL);
          *(float32x2_t *)&v525.u32[2] = v524;
          v526 = vmulq_n_f32(v511, v518.f32[0]);
          v526.i32[3] = 0;
          v527 = vmulq_n_f32(v515, v518.f32[0]);
          v527.i32[3] = 0;
          v528 = vmulq_n_f32(v525, v518.f32[0]);
          v528.i32[3] = 0;
          *v229 = v526;
          v229[1] = v527;
          v229[2] = v528;
          v529 = vaddq_f32(v522, v307[1]);
          v530 = vaddq_f32(v521, v307[2]);
          v531 = vaddq_f32(v575, *v335);
          v532 = vaddq_f32(v571, *v333);
          v533 = vaddq_f32(v523, *v336);
          v534 = vaddq_f32(v573, *v337);
          v535 = vaddq_f32(v520, *v338);
          v536 = vaddq_f32(v569, *v339);
          *v307 = vaddq_f32(v579, *v307);
          v307[1] = v529;
          v307[2] = v530;
          *v335 = v531;
          *v333 = v532;
          *v336 = v533;
          *v337 = v534;
          *v338 = v535;
          *v339 = v536;
          ++v167;
          v8 = a3;
          v24 = v542;
          v19 = v543;
          v25 = v541;
        }
        while (v167 != v545);
      }
      a6 = v540 - 1;
      v7 = a5;
    }
    while (v540 != 1);
  }
}

void physx::Dy::PxcFsPropagateDrivenInertiaSimd(unsigned __int16 *a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  float32x4_t *v19;
  float32x4_t v20;
  float v21;
  float32x4_t *v22;
  int8x16_t v23;
  unsigned __int32 v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  unsigned __int32 v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t v32;
  float32x2_t v33;
  int32x2_t v34;
  float32x4_t v35;
  float32x2_t v36;
  unsigned __int32 v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int v41;
  float32x4_t *v42;
  float32x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int8x8_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  int8x16_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  int8x8_t v172;
  int32x2_t v173;
  float32x4_t v174;
  float32x2_t v175;
  int32x2_t v176;
  unsigned __int32 v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x2_t v181;
  float32x2_t v182;
  int v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  int8x16_t v222;
  int8x16_t v223;
  float32x2_t v224;
  float32x2_t v225;
  float32x2_t v226;
  int8x8_t v227;
  int32x2_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x2_t v232;
  float32x2_t v233;
  int v234;
  float32x2_t v235;
  float32x2_t v236;
  int8x8_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x8_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t *v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  uint64_t v275;

  v275 = *MEMORY[0x24BDAC8D0];
  v8 = a1[9];
  v9 = a1[8];
  v10 = *a1;
  v11 = a1[1];
  v12 = a5[2];
  v13 = *a5 + v12;
  a5[2] = v12 + 144 * v10;
  memcpy((void *)v13, a2, 144 * v10);
  v14 = *a1;
  v15 = (v14 - 1);
  if (v14 != 1)
  {
    v16 = (uint64_t)a1 + v8 + 144;
    v17 = (uint64_t)&a1[200 * v10 + 16 * v10] + v9;
    v18 = (char *)a1 + v11;
    do
    {
      v19 = (float32x4_t *)(v13 + 144 * v15);
      *(int8x8_t *)v20.f32 = physx::Dy::ArticulationFnsSimdBase::computeSIS(v19, (float32x2_t *)(v17 + 96 * v15), &v269);
      v21 = *(float *)(a3 + 4 * v15);
      v22 = (float32x4_t *)(a4 + 48 * v15);
      v23 = (int8x16_t)vmlaq_n_f32(v20, *v22, v21);
      v24 = vextq_s8(v23, v23, 8uLL).u32[0];
      v26 = (int8x16_t)vmlaq_n_f32(v25, v22[1], v21);
      v28 = (int8x16_t)vmlaq_n_f32(v27, v22[2], v21);
      v29 = vextq_s8(v28, v28, 8uLL).u32[0];
      v30 = (float32x2_t)vextq_s8(v28, v28, 4uLL).u64[0];
      v31 = (float32x2_t)vextq_s8(v26, v26, 4uLL).u64[0];
      v32 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vextq_s8(v26, v26, 8uLL).u32[0], *(float32x2_t *)v28.i8), *(float32x2_t *)v26.i8, (float32x2_t)v29);
      v34 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v26.i8, v30), v31, *(float32x2_t *)v28.i8);
      v33 = (float32x2_t)vext_s8((int8x8_t)v34, v32, 4uLL);
      v34.i32[1] = 0;
      *(float32x2_t *)v35.f32 = v33;
      v35.i64[1] = v34.u32[0];
      v36 = (float32x2_t)vextq_s8(v23, v23, 4uLL).u64[0];
      *(int32x2_t *)v38.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v23.i8, (float32x2_t)v29), *(float32x2_t *)v28.i8, (float32x2_t)v24), 0);
      v37 = vmls_f32(vmul_f32(v36, *(float32x2_t *)v28.i8), v30, *(float32x2_t *)v23.i8).u32[0];
      v38.i64[1] = v37;
      *(float32x2_t *)v28.i8 = vpadd_f32(vmul_f32(*(float32x2_t *)v23.i8, v33), vmul_f32((float32x2_t)v24, (float32x2_t)v34.u32[0]));
      v39 = vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v28.i8);
      v40 = vrecpe_f32(v39);
      v41 = 4;
      do
      {
        v40 = vmul_f32(v40, vrecps_f32(v39, v40));
        --v41;
      }
      while (v41);
      v42 = (float32x4_t *)(v16 + 160 * v15);
      v43 = vmls_f32(vmul_f32(*(float32x2_t *)v23.i8, v31), v36, *(float32x2_t *)v26.i8);
      v38.i32[0] = v32.i32[0];
      *(int8x8_t *)v44.f32 = vext_s8((int8x8_t)vdup_lane_s32(v34, 0), (int8x8_t)v37, 4uLL);
      *(float32x2_t *)&v44.u32[2] = v43;
      v45 = vmulq_n_f32(v35, v40.f32[0]);
      v47 = v269;
      v46 = v270;
      v49 = v271;
      v48 = v272;
      v51 = v273;
      v50 = v274;
      v52 = vmulq_laneq_f32(v273, v45, 2);
      v52.i32[3] = 0;
      v53 = vmlaq_lane_f32(v52, v271, *(float32x2_t *)v45.f32, 1);
      v53.i64[1] = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u32[0];
      v54 = vmlaq_n_f32(v53, v269, v45.f32[0]);
      v55 = vmulq_laneq_f32(v274, v45, 2);
      v55.i32[3] = 0;
      v56 = vmlaq_lane_f32(v55, v272, *(float32x2_t *)v45.f32, 1);
      v56.i64[1] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u32[0];
      v57 = vmlaq_n_f32(v56, v270, v45.f32[0]);
      v45.i32[3] = 0;
      v58 = vmulq_n_f32(v38, v40.f32[0]);
      v59 = vmulq_laneq_f32(v273, v58, 2);
      v59.i32[3] = 0;
      v60 = vmlaq_lane_f32(v59, v271, *(float32x2_t *)v58.f32, 1);
      v60.i64[1] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u32[0];
      v61 = vmlaq_n_f32(v60, v269, v58.f32[0]);
      v62 = vmulq_laneq_f32(v274, v58, 2);
      v62.i32[3] = 0;
      v63 = vmlaq_lane_f32(v62, v272, *(float32x2_t *)v58.f32, 1);
      v63.i64[1] = vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).u32[0];
      v64 = vmlaq_n_f32(v63, v270, v58.f32[0]);
      v65 = v58;
      v65.i32[3] = 0;
      v66 = vmulq_n_f32(v44, v40.f32[0]);
      v67 = vmulq_laneq_f32(v273, v66, 2);
      v67.i32[3] = 0;
      v68 = vmlaq_lane_f32(v67, v271, *(float32x2_t *)v66.f32, 1);
      v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
      v69 = vmlaq_n_f32(v68, v269, v66.f32[0]);
      v70 = vmulq_laneq_f32(v274, v66, 2);
      v71 = v66;
      v71.i32[3] = 0;
      v42[6] = v45;
      v42[7] = v65;
      v42[8] = v71;
      v72 = *(float32x4_t *)&v18[32 * v15];
      v54.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
      v70.i32[3] = 0;
      v73 = vmlaq_lane_f32(v70, v48, *(float32x2_t *)v66.f32, 1);
      v73.i64[1] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0];
      v74 = vmlaq_n_f32(v73, v46, v66.f32[0]);
      v61.i64[1] = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u32[0];
      v69.i64[1] = vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL).u32[0];
      v57.i64[1] = vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL).u32[0];
      v64.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u32[0];
      v74.i64[1] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u32[0];
      v75 = (float32x4_t *)(v13 + 144 * v15);
      v76 = vmlsq_lane_f32(*v19, v54, *(float32x2_t *)v47.f32, 0);
      v76.i64[1] = vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).u32[0];
      v77 = vmlsq_lane_f32(v75[3], v54, *(float32x2_t *)v46.f32, 0);
      v77.i64[1] = vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL).u32[0];
      v78 = vmlsq_lane_f32(v75[6], v57, *(float32x2_t *)v46.f32, 0);
      v78.i64[1] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u32[0];
      v79 = vmlsq_lane_f32(v19[1], v54, *(float32x2_t *)v47.f32, 1);
      v79.i64[1] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u32[0];
      v80 = vmlsq_lane_f32(v75[4], v54, *(float32x2_t *)v46.f32, 1);
      v80.i64[1] = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u32[0];
      v81 = vmlsq_lane_f32(v75[7], v57, *(float32x2_t *)v46.f32, 1);
      v81.i64[1] = vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL).u32[0];
      v82 = vmlsq_laneq_f32(v19[2], v54, v47, 2);
      v82.i64[1] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u32[0];
      v83 = vmlsq_laneq_f32(v75[5], v54, v46, 2);
      v83.i64[1] = vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL).u32[0];
      v84 = vmlsq_laneq_f32(v75[8], v57, v46, 2);
      v84.i64[1] = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u32[0];
      v85 = vmlsq_lane_f32(v76, v61, *(float32x2_t *)v49.f32, 0);
      v85.i64[1] = vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).u32[0];
      v86 = vmlsq_lane_f32(v77, v61, *(float32x2_t *)v48.f32, 0);
      v86.i64[1] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u32[0];
      v87 = vmlsq_lane_f32(v78, v64, *(float32x2_t *)v48.f32, 0);
      v87.i64[1] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u32[0];
      v88 = vmlsq_lane_f32(v79, v61, *(float32x2_t *)v49.f32, 1);
      v88.i64[1] = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u32[0];
      v89 = vmlsq_lane_f32(v80, v61, *(float32x2_t *)v48.f32, 1);
      v89.i64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u32[0];
      v90 = vmlsq_lane_f32(v81, v64, *(float32x2_t *)v48.f32, 1);
      v90.i64[1] = vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL).u32[0];
      v91 = vmlsq_laneq_f32(v82, v61, v49, 2);
      v91.i64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u32[0];
      v92 = vmlsq_laneq_f32(v83, v61, v48, 2);
      v92.i64[1] = vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u32[0];
      v93 = vmlsq_laneq_f32(v84, v64, v48, 2);
      v93.i64[1] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u32[0];
      v94 = vmlsq_lane_f32(v85, v69, *(float32x2_t *)v51.f32, 0);
      v94.i64[1] = vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u32[0];
      v95 = vmlsq_lane_f32(v86, v69, *(float32x2_t *)v50.f32, 0);
      v48.i32[0] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u32[0];
      v96 = vmlsq_lane_f32(v87, v74, *(float32x2_t *)v50.f32, 0);
      v96.i64[1] = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u32[0];
      v97 = vmlsq_lane_f32(v88, v69, *(float32x2_t *)v51.f32, 1);
      v97.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u32[0];
      v98 = vmlsq_lane_f32(v89, v69, *(float32x2_t *)v50.f32, 1);
      v49.i32[0] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u32[0];
      v99 = vmlsq_lane_f32(v90, v74, *(float32x2_t *)v50.f32, 1);
      v99.i64[1] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u32[0];
      v100 = vmlsq_laneq_f32(v91, v69, v51, 2);
      v100.i64[1] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u32[0];
      v101 = vmlsq_laneq_f32(v92, v69, v50, 2);
      v51.i32[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u32[0];
      v102 = vmlsq_laneq_f32(v93, v74, v50, 2);
      v103 = (float32x4_t *)(v13 + 144 * *((unsigned __int8 *)a1 + v15 + 64));
      v102.i64[1] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u32[0];
      *v42 = v54;
      v42[1] = v57;
      v104 = vnegq_f32(v72);
      v105 = (float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
      *(int8x8_t *)v106.f32 = vext_s8(0, *(int8x8_t *)v105.f32, 4uLL);
      v106.i64[1] = vdupq_lane_s32(*(int32x2_t *)v104.f32, 1).u32[0];
      *(int8x8_t *)v107.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v104, 2), 0, 4uLL);
      v107.i64[1] = vdupq_lane_s32(*(int32x2_t *)v72.f32, 0).u32[0];
      v42[2] = v61;
      v42[3] = v64;
      *(int8x8_t *)v105.f32 = vext_s8(*(int8x8_t *)v72.f32, *(int8x8_t *)v104.f32, 4uLL);
      v108 = vmulq_laneq_f32(v105, v95, 2);
      v108.i32[3] = 0;
      v109 = vmlaq_lane_f32(v108, v107, *(float32x2_t *)v95.f32, 1);
      v109.i64[1] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u32[0];
      v110 = vmlaq_n_f32(v109, v106, v95.f32[0]);
      v110.i64[1] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u32[0];
      v111 = vmulq_laneq_f32(v105, v98, 2);
      v111.i32[3] = 0;
      v112 = vmlaq_lane_f32(v111, v107, *(float32x2_t *)v98.f32, 1);
      v112.i64[1] = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u32[0];
      v113 = vmlaq_n_f32(v112, v106, v98.f32[0]);
      v113.i64[1] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u32[0];
      v114 = vmulq_laneq_f32(v105, v101, 2);
      v114.i32[3] = 0;
      v115 = vmlaq_lane_f32(v114, v107, *(float32x2_t *)v101.f32, 1);
      v115.i64[1] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u32[0];
      v116 = vmlaq_n_f32(v115, v106, v101.f32[0]);
      v116.i64[1] = vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL).u32[0];
      v117 = vmulq_laneq_f32(v97, v104, 2);
      v117.i32[3] = 0;
      v118 = vmlaq_lane_f32(v117, v100, *(float32x2_t *)v72.f32, 1);
      v119 = vmulq_n_f32(v100, v104.f32[0]);
      v119.i32[3] = 0;
      v120 = vmulq_lane_f32(v94, *(float32x2_t *)v104.f32, 1);
      v120.i32[3] = 0;
      v121 = vmlaq_laneq_f32(v119, v94, v72, 2);
      v122 = vmlaq_n_f32(v120, v97, v72.f32[0]);
      v123 = vmulq_n_f32(v106, v118.f32[0]);
      v123.i32[3] = 0;
      v124 = vmlaq_lane_f32(v123, v107, *(float32x2_t *)v118.f32, 1);
      v124.i64[1] = vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL).u32[0];
      v125 = vmlaq_laneq_f32(v124, v105, v118, 2);
      v125.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
      v126 = vmulq_n_f32(v106, v121.f32[0]);
      v126.i32[3] = 0;
      v127 = vmlaq_lane_f32(v126, v107, *(float32x2_t *)v121.f32, 1);
      v127.i64[1] = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u32[0];
      v128 = vmlaq_laneq_f32(v127, v105, v121, 2);
      v128.i64[1] = vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL).u32[0];
      v129 = vmulq_n_f32(v106, v122.f32[0]);
      v129.i32[3] = 0;
      v130 = vmlaq_lane_f32(v129, v107, *(float32x2_t *)v122.f32, 1);
      v130.i64[1] = vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u32[0];
      v131 = vmlaq_laneq_f32(v130, v105, v122, 2);
      v131.i64[1] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
      v132.i64[0] = 0x3F0000003F000000;
      v132.i64[1] = 0x3F0000003F000000;
      v133 = vmlaq_f32(v110, v132, v125);
      v134 = vmlaq_f32(v113, v132, v128);
      *(int8x8_t *)v125.f32 = vext_s8(*(int8x8_t *)v133.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v134.f32, 1), 4uLL);
      *(int32x2_t *)v128.f32 = vdup_laneq_s32((int32x4_t)v133, 2);
      v133.i64[1] = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u32[0];
      v42[4] = v69;
      v42[5] = v74;
      v69.i64[0] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
      *(int8x8_t *)v74.f32 = vext_s8(*(int8x8_t *)v128.f32, *(int8x8_t *)v69.f32, 4uLL);
      *(int8x8_t *)v105.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v133.f32, 0), *(int8x8_t *)v134.f32, 4uLL);
      v134.i64[1] = v69.u32[0];
      v135 = vmlaq_f32(v116, v132, v131);
      v128.i32[0] = vdup_laneq_s32((int32x4_t)v135, 2).u32[0];
      v135.i64[1] = vextq_s8((int8x16_t)v135, (int8x16_t)v135, 8uLL).u32[0];
      v105.i64[1] = vdup_lane_s32(*(int32x2_t *)v135.f32, 0).u32[0];
      v125.i64[1] = vdup_lane_s32(*(int32x2_t *)v135.f32, 1).u32[0];
      v74.i64[1] = v128.u32[0];
      *(float32x2_t *)v95.f32 = vadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v118.f32);
      *(float32x2_t *)&v95.u32[2] = vadd_f32((float32x2_t)v48.u32[0], (float32x2_t)vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u32[0]);
      *(float32x2_t *)v98.f32 = vadd_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v121.f32);
      *(float32x2_t *)&v98.u32[2] = vadd_f32((float32x2_t)v49.u32[0], (float32x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u32[0]);
      *(float32x2_t *)v101.f32 = vadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v122.f32);
      *(float32x2_t *)&v101.u32[2] = vadd_f32((float32x2_t)v51.u32[0], (float32x2_t)vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL).u32[0]);
      v136 = vaddq_f32(v135, v74);
      v137 = vaddq_f32(v96, vaddq_f32(v133, v105));
      v138 = vaddq_f32(v99, vaddq_f32(v134, v125));
      v139 = vaddq_f32(v102, v136);
      v140 = vaddq_f32(v103[1], v97);
      v141 = vaddq_f32(v103[2], v100);
      v142 = vaddq_f32(v103[3], v95);
      v143 = vaddq_f32(v103[4], v98);
      v144 = vaddq_f32(v103[5], v101);
      v145 = vaddq_f32(v103[6], v137);
      v146 = vaddq_f32(v103[7], v138);
      v147 = v103[8];
      *v103 = vaddq_f32(*v103, v94);
      v103[1] = v140;
      v103[2] = v141;
      v103[3] = v142;
      v103[4] = v143;
      v103[5] = v144;
      v103[6] = v145;
      v103[7] = v146;
      v103[8] = vaddq_f32(v147, v139);
      --v15;
    }
    while ((_DWORD)v15);
  }
  v148 = *(float32x4_t *)(v13 + 96);
  v149 = *(float32x4_t *)(v13 + 112);
  v150 = *(float32x4_t *)(v13 + 128);
  *(int8x8_t *)v151.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v148.f32, 0), *(int8x8_t *)v149.f32, 4uLL);
  v151.i64[1] = v150.i64[0];
  v152 = vext_s8(*(int8x8_t *)v148.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v149.f32, 1), 4uLL);
  *(int32x2_t *)&v164.u32[2] = vdup_lane_s32(*(int32x2_t *)v150.f32, 1);
  *(int8x8_t *)v153.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v148, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL), 4uLL);
  v153.i64[1] = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u64[0];
  v154 = vaddq_f32(v148, v151);
  v155 = vaddq_f32(v150, v153);
  v153.i64[0] = 0x3F0000003F000000;
  v153.i64[1] = 0x3F0000003F000000;
  v156 = vmulq_f32(v154, v153);
  v157 = v156;
  v157.i32[3] = 0;
  v158 = vmulq_f32(vaddq_f32(v149, v164), v153);
  v159 = (int8x16_t)v158;
  v159.i32[3] = 0;
  v160 = vmulq_f32(v155, v153);
  v161 = (int8x16_t)v160;
  v161.i32[3] = 0;
  v162 = *(float32x4_t *)(v13 + 16);
  v163 = *(float32x4_t *)(v13 + 32);
  *(int8x8_t *)v164.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v13, 0), *(int8x8_t *)v162.f32, 4uLL);
  *(int8x8_t *)v165.f32 = vext_s8(*(int8x8_t *)v13, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v162.f32, 1), 4uLL);
  *(int32x2_t *)&v165.u32[2] = vdup_lane_s32(*(int32x2_t *)v163.f32, 1);
  *(int8x8_t *)v166.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)v13, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL), 4uLL);
  v166.i64[1] = vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL).u64[0];
  v167 = vaddq_f32(v162, v165);
  v168 = vaddq_f32(v163, v166);
  v159.i64[0] = vextq_s8(v159, v159, 8uLL).u64[0];
  v169 = (float32x2_t)vextq_s8(v161, v161, 8uLL).u64[0];
  v170 = (float32x2_t)vext_s8(*(int8x8_t *)v160.f32, (int8x8_t)v169, 4uLL);
  v171 = (float32x2_t)vext_s8(*(int8x8_t *)v158.f32, *(int8x8_t *)v159.i8, 4uLL);
  v172 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v160.f32, *(float32x2_t *)v159.i8), *(float32x2_t *)v158.f32, v169);
  v173 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v158.f32, v170), v171, *(float32x2_t *)v160.f32);
  *(int8x8_t *)v174.f32 = vext_s8((int8x8_t)v173, v172, 4uLL);
  v173.i32[1] = 0;
  v174.i64[1] = v173.u32[0];
  v159.i64[0] = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
  v175 = (float32x2_t)vext_s8(*(int8x8_t *)v156.f32, *(int8x8_t *)v159.i8, 4uLL);
  v176 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v156.f32, v169), *(float32x2_t *)v160.f32, *(float32x2_t *)v159.i8);
  v177 = vmls_f32(vmul_f32(*(float32x2_t *)v160.f32, v175), v170, *(float32x2_t *)v156.f32).u32[0];
  *(int32x2_t *)v178.f32 = vdup_lane_s32(v176, 0);
  v178.i64[1] = v177;
  v179 = vmulq_f32(v167, v153);
  v180 = vmulq_f32(v157, v174);
  v180.i64[0] = vpaddq_f32(v180, v180).u64[0];
  v181 = vpadd_f32(*(float32x2_t *)v180.f32, *(float32x2_t *)v180.f32);
  v182 = vrecpe_f32(v181);
  v183 = 4;
  do
  {
    v182 = vmul_f32(v182, vrecps_f32(v181, v182));
    --v183;
  }
  while (v183);
  v164.i64[1] = *(_QWORD *)(v13 + 32);
  v184.i64[0] = 0x3F0000003F000000;
  v184.i64[1] = 0x3F0000003F000000;
  v185 = vmulq_f32(vaddq_f32(*(float32x4_t *)v13, v164), v184);
  v185.i32[3] = 0;
  v186 = vmulq_f32(v168, v184);
  v179.i32[3] = 0;
  v186.i32[3] = 0;
  v178.i32[0] = v172.i32[0];
  *(int8x8_t *)v187.f32 = vext_s8((int8x8_t)vdup_lane_s32(v173, 0), (int8x8_t)v177, 4uLL);
  *(float32x2_t *)&v187.u32[2] = vmls_f32(vmul_f32(*(float32x2_t *)v156.f32, v171), v175, *(float32x2_t *)v158.f32);
  v188 = vmulq_n_f32(v174, v182.f32[0]);
  v189 = vmulq_n_f32(v178, v182.f32[0]);
  v190 = *(float32x4_t *)(v13 + 48);
  v191 = *(float32x4_t *)(v13 + 64);
  v192 = vnegq_f32(v190);
  v192.i32[3] = 0;
  v193 = vnegq_f32(v191);
  v193.i32[3] = 0;
  v194 = vmulq_n_f32(v187, v182.f32[0]);
  v195 = *(float32x4_t *)(v13 + 80);
  v196 = vnegq_f32(v195);
  v196.i32[3] = 0;
  v197 = vmulq_n_f32(v192, v188.f32[0]);
  v197.i32[3] = 0;
  v198 = vmulq_lane_f32(v193, *(float32x2_t *)v188.f32, 1);
  v198.i32[3] = 0;
  v199 = vmulq_laneq_f32(v196, v188, 2);
  v199.i32[3] = 0;
  v200 = vaddq_f32(v197, v198);
  v201 = vmulq_n_f32(v192, v189.f32[0]);
  v201.i32[3] = 0;
  v202 = vmulq_lane_f32(v193, *(float32x2_t *)v189.f32, 1);
  v202.i32[3] = 0;
  v203 = vmulq_laneq_f32(v196, v189, 2);
  v203.i32[3] = 0;
  v204 = vaddq_f32(v200, v199);
  v205 = vaddq_f32(vaddq_f32(v201, v202), v203);
  v206 = vmulq_n_f32(v192, v194.f32[0]);
  v206.i32[3] = 0;
  v207 = vmulq_lane_f32(v193, *(float32x2_t *)v194.f32, 1);
  v207.i32[3] = 0;
  v208 = vmulq_laneq_f32(v196, v194, 2);
  v208.i32[3] = 0;
  v209 = vaddq_f32(v206, v207);
  *(int8x8_t *)v207.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v190.f32, 0), *(int8x8_t *)v191.f32, 4uLL);
  v207.i64[1] = vdup_lane_s32(*(int32x2_t *)v195.f32, 0).u32[0];
  v210 = vaddq_f32(v209, v208);
  *(int8x8_t *)v199.f32 = vext_s8(*(int8x8_t *)v190.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v191.f32, 1), 4uLL);
  v199.i64[1] = vdup_lane_s32(*(int32x2_t *)v195.f32, 1).u32[0];
  *(int8x8_t *)v190.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v190, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v191, (int8x16_t)v191, 8uLL), 4uLL);
  v190.i64[1] = vdup_laneq_s32((int32x4_t)v195, 2).u32[0];
  v211 = vmulq_n_f32(v204, v207.f32[0]);
  v211.i32[3] = 0;
  v212 = vmulq_lane_f32(v205, *(float32x2_t *)v207.f32, 1);
  v212.i32[3] = 0;
  v213 = vmulq_laneq_f32(v210, v207, 2);
  v213.i32[3] = 0;
  v214 = vaddq_f32(v213, vaddq_f32(v211, v212));
  v215 = vmulq_n_f32(v204, v199.f32[0]);
  v215.i32[3] = 0;
  v216 = vmulq_lane_f32(v205, *(float32x2_t *)v199.f32, 1);
  v216.i32[3] = 0;
  v217 = vmulq_laneq_f32(v210, v199, 2);
  v217.i32[3] = 0;
  v218 = vaddq_f32(v215, v216);
  v219 = vmulq_n_f32(v204, v190.f32[0]);
  v219.i32[3] = 0;
  v220 = vmulq_lane_f32(v205, *(float32x2_t *)v190.f32, 1);
  v220.i32[3] = 0;
  v221 = vmulq_laneq_f32(v210, v190, 2);
  v221.i32[3] = 0;
  v222 = (int8x16_t)vaddq_f32(v179, vaddq_f32(v217, v218));
  v223 = (int8x16_t)vaddq_f32(v186, vaddq_f32(v221, vaddq_f32(v219, v220)));
  v224 = (float32x2_t)vextq_s8(v223, v223, 8uLL).u64[0];
  v225 = (float32x2_t)vextq_s8(v223, v223, 4uLL).u64[0];
  v226 = (float32x2_t)vextq_s8(v222, v222, 4uLL).u64[0];
  v227 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v222, v222, 8uLL), *(float32x2_t *)v223.i8), *(float32x2_t *)v222.i8, v224);
  v228 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v222.i8, v225), v226, *(float32x2_t *)v223.i8);
  *(int8x8_t *)v229.f32 = vext_s8((int8x8_t)v228, v227, 4uLL);
  v228.i32[1] = 0;
  v229.i64[1] = v228.u32[0];
  v230 = vaddq_f32(v185, v214);
  v231 = vmulq_f32(v230, v229);
  v231.i64[0] = vpaddq_f32(v231, v231).u64[0];
  v232 = vpadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32);
  v233 = vrecpe_f32(v232);
  v234 = 4;
  do
  {
    v233 = vmul_f32(v233, vrecps_f32(v232, v233));
    --v234;
  }
  while (v234);
  v235 = (float32x2_t)vextq_s8((int8x16_t)v230, (int8x16_t)v230, 4uLL).u64[0];
  v236 = vmls_f32(vmul_f32(*(float32x2_t *)v230.f32, v226), v235, *(float32x2_t *)v222.i8);
  v237 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v223.i8, v235), v225, *(float32x2_t *)v230.f32);
  *(int32x2_t *)v238.f32 = vdup_lane_s32((int32x2_t)vmls_f32(vmul_f32(v224, *(float32x2_t *)v230.f32), *(float32x2_t *)v223.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v230, (int8x16_t)v230, 8uLL)), 0);
  *(int8x8_t *)&v238.u32[2] = v237;
  v194.i32[3] = 0;
  v189.i32[3] = 0;
  v188.i32[3] = 0;
  v238.i32[0] = v227.i32[0];
  *(int8x8_t *)v239.f32 = vext_s8((int8x8_t)vdup_lane_s32(v228, 0), v237, 4uLL);
  *(float32x2_t *)&v239.u32[2] = v236;
  v240 = vmulq_n_f32(v229, v233.f32[0]);
  v241 = vmulq_n_f32(v240, v204.f32[0]);
  v242 = vmulq_n_f32(v240, v205.f32[0]);
  v243 = vmulq_n_f32(v240, v210.f32[0]);
  v240.i32[3] = 0;
  v244 = vmulq_n_f32(v238, v233.f32[0]);
  v245 = vmulq_lane_f32(v244, *(float32x2_t *)v204.f32, 1);
  v246 = vmulq_lane_f32(v244, *(float32x2_t *)v205.f32, 1);
  v247 = vmulq_lane_f32(v244, *(float32x2_t *)v210.f32, 1);
  v244.i32[3] = 0;
  v248 = vmulq_n_f32(v239, v233.f32[0]);
  v249 = vmulq_laneq_f32(v248, v204, 2);
  v250 = vmulq_laneq_f32(v248, v205, 2);
  v251 = vmulq_laneq_f32(v248, v210, 2);
  v248.i32[3] = 0;
  v252 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v204, 2).u64[0];
  v241.i32[3] = 0;
  v245.i32[3] = 0;
  v249.i32[3] = 0;
  v253 = vaddq_f32(v249, vaddq_f32(v241, v245));
  v249.i64[0] = vdupq_lane_s32(*(int32x2_t *)v205.f32, 1).u64[0];
  v242.i32[3] = 0;
  v246.i32[3] = 0;
  v245.i64[0] = vextq_s8((int8x16_t)v205, (int8x16_t)v205, 8uLL).u64[0];
  v250.i32[3] = 0;
  v243.i32[3] = 0;
  v247.i32[3] = 0;
  v251.i32[3] = 0;
  v254 = vaddq_f32(v250, vaddq_f32(v242, v246));
  *(int8x8_t *)v255.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v204.f32, 0), *(int8x8_t *)v205.f32, 4uLL);
  v255.i64[1] = vdupq_lane_s32(*(int32x2_t *)v210.f32, 0).u32[0];
  *(int8x8_t *)v256.f32 = vext_s8(*(int8x8_t *)v204.f32, *(int8x8_t *)v249.f32, 4uLL);
  v256.i64[1] = vdupq_lane_s32(*(int32x2_t *)v210.f32, 1).u32[0];
  *(int8x8_t *)v249.f32 = vext_s8(v252, *(int8x8_t *)v245.f32, 4uLL);
  v249.i64[1] = vdupq_laneq_s32((int32x4_t)v210, 2).u32[0];
  v257 = vmulq_n_f32(v255, v253.f32[0]);
  v257.i32[3] = 0;
  v258 = vmulq_lane_f32(v256, *(float32x2_t *)v253.f32, 1);
  v258.i32[3] = 0;
  v259 = vmulq_laneq_f32(v249, v253, 2);
  v259.i32[3] = 0;
  v260 = vaddq_f32(v251, vaddq_f32(v243, v247));
  v261 = vaddq_f32(v259, vaddq_f32(v257, v258));
  v262 = vmulq_n_f32(v255, v254.f32[0]);
  v262.i32[3] = 0;
  v263 = vmulq_lane_f32(v256, *(float32x2_t *)v254.f32, 1);
  v263.i32[3] = 0;
  v264 = vmulq_laneq_f32(v249, v254, 2);
  v264.i32[3] = 0;
  v265 = vmulq_n_f32(v255, v260.f32[0]);
  v265.i32[3] = 0;
  v266 = vmulq_lane_f32(v256, *(float32x2_t *)v260.f32, 1);
  v266.i32[3] = 0;
  v267 = vmulq_laneq_f32(v249, v260, 2);
  v267.i32[3] = 0;
  v268 = (float32x4_t *)((char *)a1 + a1[9]);
  *v268 = v240;
  v268[1] = v244;
  v268[2] = v248;
  v268[3] = v253;
  v268[4] = v254;
  v268[5] = v260;
  v268[6] = vaddq_f32(v188, v261);
  v268[7] = vaddq_f32(v189, vaddq_f32(v264, vaddq_f32(v262, v263)));
  v268[8] = vaddq_f32(v194, vaddq_f32(v267, vaddq_f32(v265, v266)));
}

float32x4_t physx::Dy::Articulation::applyImpulses(unsigned __int16 *a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  int8x8_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t result;
  uint64_t v52;
  float32x4_t *v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x2_t v61;
  int8x8_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  unint64_t v76;
  float32x4_t *v77;
  float32x4_t *v78;
  float32x4_t v79;
  float32x4_t v80;
  _BYTE v81[1024];
  float32x4_t v82;
  float32x4_t v83;
  _QWORD v84[252];

  v84[251] = *MEMORY[0x24BDAC8D0];
  v3 = a1[9];
  v4 = *a1;
  v5 = a1[1];
  v6 = v3;
  if (v4 >= 2)
  {
    v7 = v4 - 1;
    do
    {
      v8 = (uint64_t)&a1[80 * v7 + 72] + v3;
      v9 = (_OWORD *)((char *)&a1[16 * v7] + v5);
      v10 = &a2[2 * v7];
      v12 = *v10;
      v11 = v10[1];
      v13 = (float32x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
      v15 = *(int8x16_t *)v9;
      v14 = *((float32x4_t *)v9 + 1);
      v16 = (float32x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
      v17 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v10->f32, (float32x2_t)vext_s8(*(int8x8_t *)v14.f32, (int8x8_t)v16, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v10->f32, (int8x8_t)v13, 4uLL), *(float32x2_t *)v14.f32);
      *(int8x8_t *)v14.f32 = vext_s8(v17, (int8x8_t)vmls_f32(vmul_f32(v13, *(float32x2_t *)v14.f32), *(float32x2_t *)v10->f32, v16), 4uLL);
      v14.i64[1] = v17.u32[0];
      v18 = vaddq_f32(v11, v14);
      v19 = vmulq_laneq_f32(*(float32x4_t *)(v8 + 64), v18, 2);
      v19.i32[3] = 0;
      v20 = vmlaq_lane_f32(v19, *(float32x4_t *)(v8 + 32), *(float32x2_t *)v18.f32, 1);
      v20.i64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u32[0];
      v21 = *(float32x4_t *)(v8 + 16);
      v22 = vmlaq_n_f32(v20, *(float32x4_t *)v8, v18.f32[0]);
      v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
      v23 = vmulq_laneq_f32(*(float32x4_t *)(v8 + 80), v18, 2);
      v23.i32[3] = 0;
      v24 = vmlaq_lane_f32(v23, *(float32x4_t *)(v8 + 48), *(float32x2_t *)v18.f32, 1);
      v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
      *(float32x4_t *)&v81[16 * v7] = v18;
      v25 = vmlaq_n_f32(v24, v21, v18.f32[0]);
      v25.i64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u32[0];
      v26 = vsubq_f32(v12, v22);
      v27 = vsubq_f32(v11, v25);
      v18.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
      *(float32x2_t *)v25.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)v18.f32, 4uLL), *(float32x2_t *)v26.f32);
      *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v25.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v26.f32), *(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), 4uLL);
      v18.i64[1] = v25.u32[0];
      v28 = &a2[2 * *((unsigned __int8 *)a1 + v7 + 64)];
      v29 = vaddq_f32(v28[1], vaddq_f32(v27, v18));
      *v28 = vaddq_f32(*v28, v26);
      v28[1] = v29;
    }
    while ((unint64_t)(v7-- & 0xFFFFFFFE));
    v6 = a1[9];
    LODWORD(v4) = *a1;
  }
  v31 = (float32x4_t *)((char *)a1 + v6);
  v32 = vnegq_f32(*a2);
  v33 = vmulq_n_f32(*v31, v32.f32[0]);
  v34 = vmulq_lane_f32(v31[1], *(float32x2_t *)v32.f32, 1);
  v35 = v31[3];
  v36 = vmulq_laneq_f32(v31[2], v32, 2);
  v32.i32[3] = 0;
  v37 = vnegq_f32(a2[1]);
  v33.i32[3] = 0;
  v34.i32[3] = 0;
  v36.i32[3] = 0;
  v38 = vaddq_f32(v33, v34);
  v39 = vmulq_n_f32(v35, v37.f32[0]);
  v39.i32[3] = 0;
  v40 = v31[4];
  v41 = v31[5];
  v42 = vmulq_lane_f32(v40, *(float32x2_t *)v37.f32, 1);
  v42.i32[3] = 0;
  v43 = vmulq_laneq_f32(v41, v37, 2);
  v43.i32[3] = 0;
  v44 = vaddq_f32(vaddq_f32(v38, v36), vaddq_f32(vaddq_f32(v39, v42), v43));
  v45 = vmulq_f32(v32, v35);
  v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
  v46 = vmulq_f32(v32, v40);
  v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
  v47 = vmulq_f32(v32, v41);
  v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
  *(int8x8_t *)v45.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), 4uLL);
  v45.i64[1] = vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32).u32[0];
  v48 = vmulq_n_f32(v31[6], v37.f32[0]);
  v48.i32[3] = 0;
  v49 = vmulq_lane_f32(v31[7], *(float32x2_t *)v37.f32, 1);
  v49.i32[3] = 0;
  v50 = vmulq_laneq_f32(v31[8], v37, 2);
  v50.i32[3] = 0;
  result = vaddq_f32(vaddq_f32(vaddq_f32(v48, v49), v50), v45);
  v82 = v44;
  v83 = result;
  if (v4 >= 2)
  {
    v52 = 0;
    v53 = (float32x4_t *)v84;
    v54 = v5 + 32;
    v55 = v3 + 432;
    do
    {
      v56 = *(float32x4_t *)((char *)a1 + v54 + 16);
      v57 = vnegq_f32(*(float32x4_t *)((char *)a1 + v54));
      v58 = (int8x16_t)v57;
      v58.i32[3] = 0;
      v59 = &v82 + 2 * *((unsigned __int8 *)a1 + v52 + 65);
      v60 = v59[1];
      v61 = (float32x2_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
      v58.i64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
      v62 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v57.f32, (float32x2_t)vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)v61, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v57.f32, *(int8x8_t *)v58.i8, 4uLL), *(float32x2_t *)v60.f32);
      *(int8x8_t *)v57.f32 = vext_s8(v62, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v58.i8, *(float32x2_t *)v60.f32), *(float32x2_t *)v57.f32, v61), 4uLL);
      v57.i64[1] = v62.u32[0];
      v63 = *(float32x4_t *)&v81[16 * v52 + 16];
      v64 = vmulq_n_f32(*(float32x4_t *)((char *)a1 + v55 - 32), v63.f32[0]);
      v64.i32[3] = 0;
      v65 = vmulq_lane_f32(*(float32x4_t *)((char *)a1 + v55 - 16), *(float32x2_t *)v63.f32, 1);
      v65.i32[3] = 0;
      v66 = vmulq_laneq_f32(*(float32x4_t *)((char *)a1 + v55), v63, 2);
      v67 = vaddq_f32(*v59, v57);
      v66.i32[3] = 0;
      v68 = vaddq_f32(v64, v65);
      v69 = vmulq_f32(*(float32x4_t *)((char *)a1 + v55 - 128), v67);
      v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
      v70 = vmulq_f32(v60, *(float32x4_t *)((char *)a1 + v55 - 112));
      v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
      v71 = vmulq_f32(v67, *(float32x4_t *)((char *)a1 + v55 - 96));
      v72 = vmulq_f32(v67, *(float32x4_t *)((char *)a1 + v55 - 64));
      *(float32x2_t *)v69.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32));
      v70.i64[0] = vpaddq_f32(v72, v72).u64[0];
      v73 = vmulq_f32(v60, *(float32x4_t *)((char *)a1 + v55 - 48));
      v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
      v71.i64[0] = vpaddq_f32(v71, v71).u64[0];
      v74 = vmulq_f32(v60, *(float32x4_t *)((char *)a1 + v55 - 80));
      v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
      *(int8x8_t *)v69.f32 = vext_s8(*(int8x8_t *)v69.f32, (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32)), 4uLL);
      v69.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32)).u32[0];
      v75 = vaddq_f32(vaddq_f32(v68, v66), v69);
      v68.i64[0] = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL).u64[0];
      *(float32x2_t *)v70.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v56.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v56.f32, *(int8x8_t *)v68.f32, 4uLL), *(float32x2_t *)v75.f32);
      *(int8x8_t *)v56.f32 = vext_s8(*(int8x8_t *)v70.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v75.f32), *(float32x2_t *)v56.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), 4uLL);
      v56.i64[1] = v70.u32[0];
      result = vsubq_f32(v67, v56);
      ++v52;
      v53[-1] = result;
      *v53 = vsubq_f32(v60, v75);
      v53 += 2;
      v54 += 32;
      v55 += 160;
    }
    while (v4 - 1 != v52);
    LODWORD(v4) = *a1;
  }
  if ((_DWORD)v4)
  {
    v76 = 0;
    v77 = &v83;
    v78 = a3 + 1;
    do
    {
      v79 = vaddq_f32(v78[-1], v77[-1]);
      v80 = *v77;
      v77 += 2;
      result = vaddq_f32(*v78, v80);
      v78[-1] = v79;
      *v78 = result;
      ++v76;
      v78 += 2;
    }
    while (v76 < *a1);
  }
  return result;
}

void *physx::Dy::Articulation::computeUnconstrainedVelocitiesInternal(uint64_t a1)
{
  uint64_t v1;
  __int128 *v2;
  __int128 *v3;
  float *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int8x16_t *v15;
  float32x2_t *v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  int *v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;
  float *v25;
  float *v26;
  float **v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  unsigned int *v37;
  float32x4_t *v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float32x4_t *v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  float *f32;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t *v106;
  float32x4_t *v107;
  float32x4_t *v108;
  char *v109;
  float32x4_t *v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x2_t v113;
  float32x4_t v114;
  int8x16_t v115;
  float32x2_t v116;
  int8x8_t v117;
  float32x4_t *v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t *v129;
  float32x4_t v130;
  float v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  uint64_t v154;
  float32x4_t *v155;
  float32x4_t *v156;
  float32x4_t *v157;
  float32x4_t *v158;
  unsigned __int8 *v159;
  unsigned int v160;
  float32x4_t v161;
  float32x4_t *v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x2_t v165;
  int8x8_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  int8x16_t v180;
  float32x4_t *v181;
  float32x4_t *v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int8x16_t v189;
  uint64_t v190;
  float32x4_t *v191;
  uint64_t *v192;
  float32x4_t *v193;
  int8x16_t v194;
  uint64_t v195;
  float32x4_t v196;
  uint64_t v197;
  float32x4_t v198;
  const float *v199;
  float32x4_t v200;
  float32x4_t v201;
  float v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  void *result;
  uint64_t v221;
  int8x16_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 *v226;
  float32x4_t *v227;
  float32x4_t *v228;
  float v229;
  float v230;
  float v231;
  float v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  float32x4_t v241[1];
  uint64_t v242;
  _BYTE v243[4];
  int v244;
  _BYTE v245[4];
  _BYTE v246[268];
  uint64_t v247;
  float32x4_t v248;
  float32x4_t v249;
  uint64_t v250;
  float32x4_t v251;
  float32x4_t v252[127];
  uint64_t v253;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v5 = (uint64_t)v4;
  v7 = v6;
  v225 = v8;
  v232 = v9;
  v11 = v10;
  v12 = v1;
  v253 = *MEMORY[0x24BDAC8D0];
  v13 = *(unsigned __int8 *)(v10 + 92);
  v14 = *(_QWORD **)(v10 + 8);
  v15 = *(int8x16_t **)(*(_QWORD *)v10 + 168);
  v16 = *(float32x2_t **)(v10 + 32);
  physx::Dy::Articulation::prepareDataBlock(v15, (uint64_t)v14, v13, v16, *(_QWORD *)(v10 + 40), v6, v4);
  bzero(&v15->i8[v15[1].u16[0]], 400 * v13);
  physx::Dy::Articulation::prepareLtbMatrix((unsigned __int16 *)v15, v7, (uint64_t)v16, v5, 1.0 / v232);
  physx::Dy::PxcLtbFactor((unsigned __int16 *)v15);
  v228 = (float32x4_t *)&v15[8];
  physx::Dy::PxcLtbComputeJv((uint64_t)&v251, (unsigned __int16 *)v15, v15 + 8);
  if (v13 >= 2)
  {
    v17 = v13 - 1;
    v18 = (float32x4_t *)&v15[49].i8[v15[1].u16[0]];
    v19 = v252;
    do
    {
      *v19 = vaddq_f32(*v19, *v18);
      ++v19;
      v18 += 25;
      --v17;
    }
    while (v17);
  }
  physx::Dy::PxcLtbProject((unsigned __int16 *)v15, v228, &v251);
  bzero(&v15->i8[v15[1].u16[1]], 160 * v13 + 144);
  physx::Dy::Articulation::prepareFsData((unsigned __int16 *)v15, v14);
  v20 = *(int **)(v11 + 64);
  if ((v20[1] & 0x80000000) == 0)
  {
    bzero(*(void **)(v11 + 48), 48 * v13);
    v20 = *(int **)(v11 + 64);
  }
  v21 = *v20;
  if ((*v20 & 0x80000000) == 0)
  {
    bzero(*(void **)(v11 + 56), 48 * v13);
    v20 = *(int **)(v11 + 64);
    v21 = *v20;
  }
  v22 = (unsigned __int16)v21;
  v23 = *((unsigned __int16 *)v20 + 2) == (unsigned __int16)v21;
  if (v13 >= 2)
  {
    v24 = v13 - 1;
    v25 = (float *)&v244;
    v26 = (float *)v246;
    v27 = (float **)(v14 + 8);
    do
    {
      v28 = *v27;
      v27 += 5;
      v29 = (float)((float)(v28[76] * v232) + 1.0) + (float)((float)(v28[75] * v232) * v232);
      v30 = v28[77];
      *v26++ = v29 * (float)(1.0 / v30);
      v31 = v28[78];
      *v25++ = v29 * (float)(1.0 / v31);
      v23 &= v30 == v31;
      --v24;
    }
    while (v24);
  }
  v32 = *(_QWORD *)(v11 + 56);
  v239 = *v3;
  v240 = *((_QWORD *)v3 + 2);
  physx::Dy::PxcFsComputeJointLoadsSimd((unsigned __int16 *)v15, v7, v32, (uint64_t)v245, v13, v22, (uint64_t *)&v239);
  v33 = *(_QWORD *)(v11 + 56);
  v237 = *v3;
  v226 = v3;
  v227 = (float32x4_t *)v7;
  v238 = *((_QWORD *)v3 + 2);
  physx::Dy::PxcFsPropagateDrivenInertiaSimd((unsigned __int16 *)v15, v7, (uint64_t)v245, v33, &v237);
  v34 = v15->u16[0];
  if (v34 <= 1)
  {
    v106 = (float32x4_t *)&v15->i8[v15[1].u16[1]];
    v107 = v106 + 9;
    v108 = (float32x4_t *)&v15->i8[v15->u16[1]];
    bzero(&v251, 32 * v34);
  }
  else
  {
    v221 = v13;
    v222 = v15;
    v223 = v11;
    v224 = v12;
    v35 = v34 - 1;
    v36 = (float32x4_t *)&v242;
    v37 = (unsigned int *)(v14 + 9);
    v38 = (float32x4_t *)(*(_QWORD *)(v11 + 56) + 80);
    v39 = (float *)(v5 + 152);
    v40 = (float *)&v15[11].i32[2];
    v41 = -0.5;
    v42 = 1.0;
    v43 = v34 - 1;
    v44 = v232;
    v45 = v228;
    do
    {
      v46 = *((_QWORD *)v37 - 1);
      v47 = *(v40 - 1);
      v48 = *v40;
      v49 = *(v40 - 2);
      f32 = v45[2 * *v37].f32;
      v51 = f32[5];
      v52 = f32[6];
      v53 = f32[4];
      if (*(_BYTE *)(v46 + 330) == 1)
      {
        v54 = *(float *)(v46 + 272);
        v55 = *(float *)(v46 + 276);
        v56 = *(float *)(v46 + 280);
      }
      else
      {
        v58 = *(v39 - 3);
        v57 = *(v39 - 2);
        v59 = *(v39 - 1);
        v60 = *(float *)(v46 + 284);
        v61 = *(float *)(v46 + 272);
        v62 = *(float *)(v46 + 276);
        v63 = *(float *)(v46 + 280);
        v64 = (float)((float)((float)(*v39 * v61) - (float)(v60 * v58)) - (float)(v62 * v59)) + (float)(v57 * v63);
        v65 = (float)((float)((float)(*v39 * v62) - (float)(v60 * v57)) - (float)(v63 * v58)) + (float)(v59 * v61);
        v66 = (float)((float)((float)(*v39 * v63) - (float)(v60 * v59)) - (float)(v61 * v57)) + (float)(v58 * v62);
        v67 = (float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66);
        v68 = sqrtf(v67);
        v54 = 0.0;
        v55 = 0.0;
        v56 = 0.0;
        if (v68 >= 1.0e-12)
        {
          v229 = (float)((float)((float)(*v39 * v62) - (float)(v60 * v57)) - (float)(v63 * v58)) + (float)(v59 * v61);
          v230 = (float)((float)((float)(*v39 * v61) - (float)(v60 * v58)) - (float)(v62 * v59)) + (float)(v57 * v63);
          v231 = *v40;
          v69 = (float)((float)((float)(v58 * v61) + (float)(v60 * *v39)) + (float)(v62 * v57)) + (float)(v63 * v59);
          if (v69 >= 0.0)
          {
            v70 = v68;
          }
          else
          {
            v70 = -v68;
            v69 = -v69;
          }
          v71 = atan2f(v70, v69);
          v72 = 0.0;
          v73 = 0.0;
          v74 = 0.0;
          v44 = v232;
          v45 = v228;
          v41 = -0.5;
          v42 = 1.0;
          v48 = v231;
          if (v67 > 0.0)
          {
            v72 = (float)(v230 * (float)(1.0 / v68)) + (float)(v230 * (float)(1.0 / v68));
            v73 = (float)(v229 * (float)(1.0 / v68)) + (float)(v229 * (float)(1.0 / v68));
            v74 = (float)(v66 * (float)(1.0 / v68)) + (float)(v66 * (float)(1.0 / v68));
          }
          v54 = v71 * v72;
          v55 = v71 * v73;
          v56 = v71 * v74;
        }
      }
      v75 = v48 - v52;
      v37 += 10;
      v76 = v54 + v54;
      v77 = v55 + v55;
      v78 = v56 + v56;
      v80 = *(v39 - 15);
      v79 = *(v39 - 14);
      v81 = v41 + (float)(v79 * v79);
      v82 = *(v39 - 17);
      v83 = *(v39 - 16);
      v84 = (float)((float)(v77 * v83) + (float)(v82 * v76)) + (float)(v80 * v78);
      v85 = (float)((float)(v79 * (float)((float)(v83 * v78) - (float)(v80 * v77))) + (float)(v76 * v81))
          + (float)(v82 * v84);
      v86 = (float)((float)(v79 * (float)((float)(v80 * v76) - (float)(v82 * v78))) + (float)(v77 * v81))
          + (float)(v83 * v84);
      v87 = (float)((float)(v79 * (float)((float)(v82 * v77) - (float)(v83 * v76))) + (float)(v78 * v81))
          + (float)(v80 * v84);
      v88 = *(float *)(v46 + 288) + *(float *)(v46 + 288);
      v89 = *(float *)(v46 + 292) + *(float *)(v46 + 292);
      v90 = *(float *)(v46 + 296) + *(float *)(v46 + 296);
      v91 = (float)((float)(v83 * v89) + (float)(v82 * v88)) + (float)(v80 * v90);
      v92 = (float)((float)(v79 * (float)((float)(v83 * v90) - (float)(v80 * v89))) + (float)(v88 * v81))
          + (float)(v82 * v91);
      v93 = (float)((float)(v79 * (float)((float)(v80 * v88) - (float)(v82 * v90))) + (float)(v89 * v81))
          + (float)(v83 * v91);
      v94 = (float)((float)((float)(v79 * (float)((float)(v82 * v89) - (float)(v83 * v88))) + (float)(v90 * v81))
                  + (float)(v80 * v91))
          - v75;
      v95 = *(float *)(v46 + 300);
      v96 = v95 * v85;
      v97 = v86 * v95;
      v98 = v87 * v95;
      v99 = *(float *)(v46 + 304);
      v100 = (float)(v98 + (float)(v99 * v94)) * v44;
      v101 = v42 / *(float *)(v46 + 308);
      v102 = vmulq_n_f32(v38[-2], v101 * (float)((float)(v96 + (float)(v99 * (float)(v92 - (float)(v49 - v53)))) * v44));
      v102.i32[3] = 0;
      v103 = vmulq_n_f32(v38[-1], v101 * (float)((float)(v97 + (float)(v99 * (float)(v93 - (float)(v47 - v51)))) * v44));
      v103.i32[3] = 0;
      v104 = *v38;
      v38 += 3;
      v105 = vmulq_n_f32(v104, v101 * v100);
      v105.i32[3] = 0;
      *v36++ = vaddq_f32(v105, vaddq_f32(v102, v103));
      v39 += 21;
      v40 += 8;
      --v43;
    }
    while (v43);
    v15 = v222;
    v106 = (float32x4_t *)&v222->i8[v222[1].u16[1]];
    v107 = v106 + 9;
    v108 = (float32x4_t *)&v222->i8[v222->u16[1]];
    bzero(&v251, 32 * v34);
    do
    {
      v109 = (char *)&v108[2 * v35];
      v110 = &v251 + 2 * v35;
      v112 = *v110;
      v111 = v110[1];
      v113 = (float32x2_t)vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
      v115 = *(int8x16_t *)v109;
      v114 = *((float32x4_t *)v109 + 1);
      v116 = (float32x2_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL).u64[0];
      v117 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v110->f32, (float32x2_t)vext_s8(*(int8x8_t *)v114.f32, (int8x8_t)v116, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v110->f32, (int8x8_t)v113, 4uLL), *(float32x2_t *)v114.f32);
      *(int8x8_t *)v114.f32 = vext_s8(v117, (int8x8_t)vmls_f32(vmul_f32(v113, *(float32x2_t *)v114.f32), *(float32x2_t *)v110->f32, v116), 4uLL);
      v114.i64[1] = v117.u32[0];
      v118 = &v107[10 * v35];
      v119 = vsubq_f32(vaddq_f32(v111, v114), v241[v35]);
      v120 = vmulq_laneq_f32(v118[4], v119, 2);
      v120.i32[3] = 0;
      v121 = vmlaq_lane_f32(v120, v118[2], *(float32x2_t *)v119.f32, 1);
      v121.i64[1] = vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL).u32[0];
      v122 = v118[1];
      v123 = vmlaq_n_f32(v121, *v118, v119.f32[0]);
      v123.i64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u32[0];
      v124 = vmulq_laneq_f32(v118[5], v119, 2);
      v124.i32[3] = 0;
      v125 = vmlaq_lane_f32(v124, v118[3], *(float32x2_t *)v119.f32, 1);
      v125.i64[1] = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u32[0];
      *(float32x4_t *)&v246[16 * v35 + 252] = v119;
      v126 = vmlaq_n_f32(v125, v122, v119.f32[0]);
      v126.i64[1] = vextq_s8((int8x16_t)v126, (int8x16_t)v126, 8uLL).u32[0];
      v127 = vsubq_f32(v112, v123);
      v128 = vsubq_f32(v111, v126);
      v119.i64[0] = vextq_s8(v115, v115, 8uLL).u64[0];
      *(float32x2_t *)v126.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v115.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v115.i8, *(int8x8_t *)v119.f32, 4uLL), *(float32x2_t *)v127.f32);
      *(int8x8_t *)v119.f32 = vext_s8(*(int8x8_t *)v126.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v127.f32), *(float32x2_t *)v115.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL)), 4uLL);
      v119.i64[1] = v126.u32[0];
      v129 = &v251 + 2 * v222[4].u8[v35];
      v130 = vaddq_f32(v129[1], vaddq_f32(v128, v119));
      *v129 = vaddq_f32(*v129, v127);
      v129[1] = v130;
    }
    while ((unint64_t)(v35-- & 0xFFFFFFFE));
    v11 = v223;
    v12 = v224;
    v13 = v221;
  }
  v132 = v232;
  v133 = vnegq_f32(v251);
  v134 = vmulq_n_f32(*v106, v133.f32[0]);
  v135 = vmulq_lane_f32(v106[1], *(float32x2_t *)v133.f32, 1);
  v136 = v106[3];
  v137 = vmulq_laneq_f32(v106[2], v133, 2);
  v133.i32[3] = 0;
  v138 = vnegq_f32(v252[0]);
  v134.i32[3] = 0;
  v135.i32[3] = 0;
  v137.i32[3] = 0;
  v139 = vaddq_f32(v134, v135);
  v140 = vmulq_n_f32(v136, v138.f32[0]);
  v140.i32[3] = 0;
  v141 = v106[4];
  v142 = v106[5];
  v143 = vmulq_lane_f32(v141, *(float32x2_t *)v138.f32, 1);
  v143.i32[3] = 0;
  v144 = vmulq_laneq_f32(v142, v138, 2);
  v144.i32[3] = 0;
  v145 = vaddq_f32(vaddq_f32(v139, v137), vaddq_f32(vaddq_f32(v140, v143), v144));
  v146 = vmulq_f32(v133, v136);
  v146.i64[0] = vpaddq_f32(v146, v146).u64[0];
  v147 = vmulq_f32(v133, v141);
  v147.i64[0] = vpaddq_f32(v147, v147).u64[0];
  v148 = vmulq_f32(v133, v142);
  v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
  *(int8x8_t *)v149.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v146.f32, *(float32x2_t *)v146.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v147.f32, *(float32x2_t *)v147.f32), 4uLL);
  v149.i64[1] = vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32).u32[0];
  v150 = vmulq_n_f32(v106[6], v138.f32[0]);
  v150.i32[3] = 0;
  v151 = vmulq_lane_f32(v106[7], *(float32x2_t *)v138.f32, 1);
  v151.i32[3] = 0;
  v152 = v106[8];
  v153 = vmulq_laneq_f32(v152, v138, 2);
  v153.i32[3] = 0;
  v248 = v145;
  v249 = vaddq_f32(vaddq_f32(vaddq_f32(v150, v151), v153), v149);
  if (v34 >= 2)
  {
    v154 = v34 - 1;
    v155 = (float32x4_t *)&v247;
    v156 = (float32x4_t *)&v250;
    v157 = v108 + 3;
    v158 = v107 + 18;
    v159 = &v15[4].u8[1];
    do
    {
      v160 = *v159++;
      v161 = vnegq_f32(v157[-1]);
      v162 = &v248 + 2 * v160;
      v163 = (int8x16_t)v161;
      v163.i32[3] = 0;
      v164 = v162[1];
      v165 = (float32x2_t)vextq_s8((int8x16_t)v164, (int8x16_t)v164, 8uLL).u64[0];
      v163.i64[0] = vextq_s8(v163, v163, 8uLL).u64[0];
      v166 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v161.f32, (float32x2_t)vext_s8(*(int8x8_t *)v164.f32, (int8x8_t)v165, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v161.f32, *(int8x8_t *)v163.i8, 4uLL), *(float32x2_t *)v164.f32);
      *(int8x8_t *)v161.f32 = vext_s8(v166, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v163.i8, *(float32x2_t *)v164.f32), *(float32x2_t *)v161.f32, v165), 4uLL);
      v167 = *v155++;
      v168 = vmulq_n_f32(v158[-2], v167.f32[0]);
      v168.i32[3] = 0;
      v161.i64[1] = v166.u32[0];
      v169 = vmulq_lane_f32(v158[-1], *(float32x2_t *)v167.f32, 1);
      v170 = vmulq_laneq_f32(*v158, v167, 2);
      v169.i32[3] = 0;
      v170.i32[3] = 0;
      v171 = vaddq_f32(v168, v169);
      v172 = vaddq_f32(*v162, v161);
      v173 = vmulq_f32(v158[-8], v172);
      v173.i64[0] = vpaddq_f32(v173, v173).u64[0];
      v174 = vmulq_f32(v164, v158[-7]);
      v174.i64[0] = vpaddq_f32(v174, v174).u64[0];
      v175 = vmulq_f32(v172, v158[-6]);
      v175.i64[0] = vpaddq_f32(v175, v175).u64[0];
      v176 = vmulq_f32(v164, v158[-5]);
      v176.i64[0] = vpaddq_f32(v176, v176).u64[0];
      v177 = vmulq_f32(v172, v158[-4]);
      *(float32x2_t *)v173.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v173.f32), vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32));
      v174.i64[0] = vpaddq_f32(v177, v177).u64[0];
      v178 = vmulq_f32(v164, v158[-3]);
      v178.i64[0] = vpaddq_f32(v178, v178).u64[0];
      *(int8x8_t *)v173.f32 = vext_s8(*(int8x8_t *)v173.f32, (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v175.f32, *(float32x2_t *)v175.f32), vpadd_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32)), 4uLL);
      v173.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v174.f32, *(float32x2_t *)v174.f32), vpadd_f32(*(float32x2_t *)v178.f32, *(float32x2_t *)v178.f32)).u32[0];
      v179 = vaddq_f32(vaddq_f32(v171, v170), v173);
      v180 = *(int8x16_t *)v157;
      v157 += 2;
      v173.i64[0] = vextq_s8(v180, v180, 8uLL).u64[0];
      v152 = (float32x4_t)vextq_s8((int8x16_t)v179, (int8x16_t)v179, 4uLL);
      *(float32x2_t *)v152.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v180.i8, *(float32x2_t *)v152.f32), (float32x2_t)vext_s8(*(int8x8_t *)v180.i8, *(int8x8_t *)v173.f32, 4uLL), *(float32x2_t *)v179.f32);
      *(int8x8_t *)v149.f32 = vext_s8(*(int8x8_t *)v152.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, *(float32x2_t *)v179.f32), *(float32x2_t *)v180.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL)), 4uLL);
      v152.i32[1] = 0;
      v149.i64[1] = v152.u32[0];
      v156[-1] = vsubq_f32(v172, v149);
      *v156 = vsubq_f32(v164, v179);
      v156 += 2;
      v158 += 10;
      --v154;
    }
    while (v154);
  }
  if ((_DWORD)v34)
  {
    v181 = &v249;
    v182 = (float32x4_t *)&v15[9];
    do
    {
      v183 = vaddq_f32(v182[-1], v181[-1]);
      v184 = *v181;
      v181 += 2;
      v185 = vaddq_f32(*v182, v184);
      v182[-1] = v183;
      *v182 = v185;
      v182 += 2;
      --v34;
    }
    while (v34);
  }
  if ((v23 & 1) == 0)
  {
    v186 = *(_QWORD *)(v11 + 48);
    v187 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 64) + 4);
    v235 = *v226;
    v236 = *((_QWORD *)v226 + 2);
    physx::Dy::PxcFsComputeJointLoadsSimd((unsigned __int16 *)v15, v227, v186, (uint64_t)v243, v13, v187, (uint64_t *)&v235);
    v188 = *(_QWORD *)(v11 + 48);
    v233 = *v226;
    v234 = *((_QWORD *)v226 + 2);
    physx::Dy::PxcFsPropagateDrivenInertiaSimd((unsigned __int16 *)v15, v227, (uint64_t)v243, v188, &v233);
    v132 = v232;
  }
  if ((_DWORD)v13)
  {
    v189.i64[0] = *(_QWORD *)v225;
    v189.i64[1] = *(unsigned int *)(v225 + 8);
    v190 = *(_QWORD *)(v11 + 24) + 16;
    v191 = v252;
    v192 = (uint64_t *)(*(_QWORD *)(v11 + 8) + 16);
    v193 = v227 + 4;
    v194.i64[0] = 0x8000000080000000;
    v194.i64[1] = 0x8000000080000000;
    v195 = v13;
    do
    {
      v149.i32[0] = 0;
      v196.i64[0] = *(_QWORD *)(v190 - 16);
      v197 = *v192;
      v192 += 5;
      v152.i8[0] = *(_BYTE *)(v197 + 157);
      v196.i64[1] = *(unsigned int *)(v190 - 8);
      v198 = (float32x4_t)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v152, (int8x16_t)v149), 0), v189, v194);
      v199 = (const float *)v190;
      v200 = vld1q_dup_f32(v199++);
      v201 = vaddq_f32(v196, v198);
      v202 = *(float *)(v190 + 8);
      v203 = vmulq_n_f32(v193[-4], v201.f32[0]);
      v204 = vmulq_lane_f32(v193[-3], *(float32x2_t *)v201.f32, 1);
      v205 = v193[-1];
      v206 = vmulq_laneq_f32(v193[-2], v201, 2);
      v207 = vmulq_f32(v200, v205);
      v203.i32[3] = 0;
      v207.i32[3] = 0;
      v208 = v193[1];
      v204.i32[3] = 0;
      v209 = vmulq_n_f32(*v193, *v199);
      v209.i32[3] = 0;
      v210 = vaddq_f32(v207, v209);
      v206.i32[3] = 0;
      v211 = vmulq_n_f32(v208, v202);
      v211.i32[3] = 0;
      v212 = vmulq_f32(v201, v205);
      v212.i64[0] = vpaddq_f32(v212, v212).u64[0];
      v213 = vmulq_f32(v201, *v193);
      v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
      v214 = vmulq_f32(v201, v208);
      v215 = vaddq_f32(v203, v204);
      v214.i64[0] = vpaddq_f32(v214, v214).u64[0];
      *(int8x8_t *)v204.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v212.f32, *(float32x2_t *)v212.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32), 4uLL);
      v152 = vmulq_f32(v200, v193[2]);
      v152.i32[3] = 0;
      v216 = vmulq_n_f32(v193[3], *v199);
      v216.i32[3] = 0;
      v204.i64[1] = vpadd_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32).u32[0];
      v217 = vmulq_n_f32(v193[4], v202);
      v217.i32[3] = 0;
      v218 = vaddq_f32(vaddq_f32(vaddq_f32(v152, v216), v217), v204);
      v219 = vmulq_n_f32(vnegq_f32(vaddq_f32(vaddq_f32(v215, v206), vaddq_f32(v210, v211))), v132);
      v149 = vmulq_n_f32(vnegq_f32(v218), v132);
      v219.i32[3] = 0;
      v149.i32[3] = 0;
      v191[-1] = v219;
      *v191 = v149;
      *(_QWORD *)v190 = 0;
      *(_DWORD *)(v190 + 8) = 0;
      *(_QWORD *)(v190 - 16) = 0;
      *(_DWORD *)(v190 - 8) = 0;
      v190 += 32;
      v191 += 2;
      v193 += 9;
      --v195;
    }
    while (v195);
  }
  physx::Dy::Articulation::applyImpulses((unsigned __int16 *)v15, &v251, v228);
  result = memcpy(*(void **)(v11 + 16), v228, 32 * v13);
  v15->i64[1] = 0;
  *(_QWORD *)(v12 + 8) = 0;
  return result;
}

float32x4_t *physx::Dy::PxcFsFlushVelocity(float32x4_t *result)
{
  float32x4_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  unsigned __int16 *v27;
  float32x4_t v28;
  uint64_t i;
  unsigned int v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t *v34;
  char *v35;
  unsigned __int16 *v36;
  uint64_t j;
  float32x4_t *v38;
  int8x16_t *v39;
  float32x2_t *v40;
  float32x4_t *v41;
  float32x4_t v42;
  float32x2_t v43;
  int8x16_t v44;
  float32x2_t v45;
  int8x8_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t k;
  unsigned int v65;
  uint64_t v66;
  float32x4_t *v67;
  float32x4_t v68;

  v1 = (float32x4_t *)((char *)result + result[1].u16[1]);
  v2 = result->u16[0];
  v3 = 16 * v2;
  v4 = result->u16[1];
  v5 = vnegq_f32(result[2]);
  v6 = vmulq_n_f32(*v1, v5.f32[0]);
  v7 = vmulq_lane_f32(v1[1], *(float32x2_t *)v5.f32, 1);
  v8 = v1[3];
  v9 = vmulq_laneq_f32(v1[2], v5, 2);
  v10 = v5;
  v10.i32[3] = 0;
  v6.i32[3] = 0;
  v7.i32[3] = 0;
  v11 = vnegq_f32(result[3]);
  v9.i32[3] = 0;
  v12 = vmulq_n_f32(v8, v11.f32[0]);
  v12.i32[3] = 0;
  v13 = vaddq_f32(v6, v7);
  v14 = v1[4];
  v15 = v1[5];
  v16 = vmulq_lane_f32(v14, *(float32x2_t *)v11.f32, 1);
  v16.i32[3] = 0;
  v17 = vaddq_f32(v13, v9);
  v18 = vmulq_laneq_f32(v15, v11, 2);
  v18.i32[3] = 0;
  v19 = vaddq_f32(v17, vaddq_f32(vaddq_f32(v12, v16), v18));
  v20 = vmulq_f32(v10, v8);
  v20.i64[0] = vpaddq_f32(v20, v20).u64[0];
  v21 = vmulq_f32(v10, v14);
  v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
  v22 = vmulq_f32(v10, v15);
  v22.i64[0] = vpaddq_f32(v22, v22).u64[0];
  *(int8x8_t *)v20.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32), 4uLL);
  v20.i64[1] = vpadd_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32).u32[0];
  v23 = vmulq_n_f32(v1[6], v11.f32[0]);
  v23.i32[3] = 0;
  v24 = vmulq_lane_f32(v1[7], *(float32x2_t *)v11.f32, 1);
  v24.i32[3] = 0;
  v25 = vmulq_laneq_f32(v1[8], v11, 2);
  v25.i32[3] = 0;
  v26 = vaddq_f32(vaddq_f32(vaddq_f32(v23, v24), v25), v20);
  v27 = (unsigned __int16 *)&result[8];
  v28 = result[8];
  result[2] = 0u;
  result[3] = 0u;
  result[8] = vaddq_f32(v19, v28);
  result[9] = vaddq_f32(v26, result[9]);
  for (i = v1[18].i64[0]; i; i &= i - 1)
  {
    v30 = __clz(__rbit32(i));
    LODWORD(v31) = __clz(__rbit32(HIDWORD(i))) + 32;
    if ((_DWORD)i)
      v31 = v30;
    else
      v31 = v31;
    v32 = (float32x4_t *)&v27[16 * v31 + v3];
    v33 = vaddq_f32(v26, v32[1]);
    *v32 = vaddq_f32(v19, *v32);
    v32[1] = v33;
  }
  if (v2 >= 2)
  {
    v34 = v1 + 9;
    v35 = (char *)result + v4;
    v36 = &v27[v3];
    for (j = 1; j != v2; ++j)
    {
      v38 = &v34[10 * j];
      v39 = (int8x16_t *)&v35[32 * j];
      v40 = (float32x2_t *)&v27[32 * v2 + 16 * v2 + 8 * j];
      v41 = (float32x4_t *)&v36[16 * j];
      v42 = v41[1];
      v43 = (float32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
      v44 = v39[1];
      v45 = (float32x2_t)vextq_s8(*v39, *v39, 8uLL).u64[0];
      v46 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v42.f32, (float32x2_t)vext_s8(*(int8x8_t *)v39->i8, (int8x8_t)v45, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v43, 4uLL), *(float32x2_t *)v39->i8);
      *(int8x8_t *)v47.f32 = vext_s8(v46, (int8x8_t)vmls_f32(vmul_f32(v43, *(float32x2_t *)v39->i8), *(float32x2_t *)v42.f32, v45), 4uLL);
      v47.i64[1] = v46.u32[0];
      v48 = vmulq_n_f32(v38[6], COERCE_FLOAT(*(_OWORD *)v40->f32));
      v48.i32[3] = 0;
      v49 = vaddq_f32(*v41, v47);
      v50 = vmulq_lane_f32(v38[7], *v40, 1);
      v50.i32[3] = 0;
      v51 = vmulq_laneq_f32(v38[8], *(float32x4_t *)v40->f32, 2);
      v51.i32[3] = 0;
      v52 = vaddq_f32(vaddq_f32(v48, v50), v51);
      v53 = vmulq_f32(*v38, v49);
      v53.i64[0] = vpaddq_f32(v53, v53).u64[0];
      v54 = vmulq_f32(v42, v38[1]);
      v54.i64[0] = vpaddq_f32(v54, v54).u64[0];
      *(float32x2_t *)v53.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32), vpadd_f32(*(float32x2_t *)v54.f32, *(float32x2_t *)v54.f32));
      v55 = vmulq_f32(v49, v38[2]);
      v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
      v56 = vmulq_f32(v42, v38[3]);
      v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
      *(float32x2_t *)v55.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32));
      v57 = vmulq_f32(v49, v38[4]);
      v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
      v58 = vmulq_f32(v42, v38[5]);
      v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
      *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v53.f32, *(int8x8_t *)v55.f32, 4uLL);
      v53.i64[1] = vadd_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32), vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32)).u32[0];
      v59 = vaddq_f32(v52, v53);
      v53.i64[0] = vextq_s8(v44, v44, 8uLL).u64[0];
      *(float32x2_t *)v57.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v44.i8, *(int8x8_t *)v53.f32, 4uLL), *(float32x2_t *)v59.f32);
      *(int8x8_t *)v53.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v59.f32), *(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL)), 4uLL);
      v53.i64[1] = v57.u32[0];
      v60 = vsubq_f32(v49, v53);
      v61 = vsubq_f32(v42, v59);
      *v41 = 0uLL;
      v41[1] = 0uLL;
      *v40 = 0;
      v40[1] = 0;
      v62 = (float32x4_t *)&v27[16 * j];
      v63 = vaddq_f32(v62[1], v61);
      *v62 = vaddq_f32(*v62, v60);
      v62[1] = v63;
      for (k = v38[9].i64[0]; k; k &= k - 1)
      {
        v65 = __clz(__rbit32(k));
        LODWORD(v66) = __clz(__rbit32(HIDWORD(k))) + 32;
        if ((_DWORD)k)
          v66 = v65;
        else
          v66 = v66;
        v67 = (float32x4_t *)&v36[16 * v66];
        v68 = vaddq_f32(v61, v67[1]);
        *v67 = vaddq_f32(v60, *v67);
        v67[1] = v68;
      }
    }
  }
  result->i64[1] = 0;
  return result;
}

float32x4_t physx::Dy::Articulation::pxcFsApplyImpulse(uint64_t a1, unsigned int a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  float32x4_t *v11;
  char *v12;
  float32x4_t v13;
  float32x2_t v14;
  int8x8_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x8_t v24;
  float32x4_t result;
  float32x4_t v26;

  v4 = *(float32x4_t **)(a1 + 168);
  v5 = vnegq_f32(a3);
  v5.i32[3] = 0;
  v6 = vnegq_f32(a4);
  v6.i32[3] = 0;
  v7 = (uint64_t)&v4[9] + v4[1].u16[1];
  if (a2)
  {
    v8 = (char *)v4 + v4->u16[1];
    v9 = (uint64_t)&v4[2 * v4->u16[0] + 8 + 2 * v4->u16[0] + 2 * v4->u16[0]];
    v10 = a2;
    do
    {
      v11 = (float32x4_t *)(v7 + 160 * v10);
      v12 = &v8[32 * v10];
      v13 = *((float32x4_t *)v12 + 1);
      v14 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      v15 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v5.f32, (float32x2_t)vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)v14, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL), *(float32x2_t *)v13.f32);
      *(int8x8_t *)v13.f32 = vext_s8(v15, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), *(float32x2_t *)v13.f32), *(float32x2_t *)v5.f32, v14), 4uLL);
      v13.i64[1] = v15.u32[0];
      v16 = vaddq_f32(v6, v13);
      v17 = vmulq_laneq_f32(v11[4], v16, 2);
      v17.i32[3] = 0;
      v18 = vmlaq_lane_f32(v17, v11[2], *(float32x2_t *)v16.f32, 1);
      v18.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0];
      v19 = vmlaq_n_f32(v18, *v11, v16.f32[0]);
      v19.i64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u32[0];
      v5 = vsubq_f32(v5, v19);
      v20 = vmulq_laneq_f32(v11[5], v16, 2);
      v20.i32[3] = 0;
      v21 = vmlaq_lane_f32(v20, v11[3], *(float32x2_t *)v16.f32, 1);
      v21.i64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
      v22 = vmlaq_n_f32(v21, v11[1], v16.f32[0]);
      v22.i64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
      v23 = vsubq_f32(v6, v22);
      v22.i64[0] = vextq_s8(*(int8x16_t *)v12, *(int8x16_t *)v12, 8uLL).u64[0];
      v24 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v12, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v12, *(int8x8_t *)v22.f32, 4uLL), *(float32x2_t *)v5.f32);
      *(int8x8_t *)v22.f32 = vext_s8(v24, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v5.f32), *(float32x2_t *)v12, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL)), 4uLL);
      v22.i64[1] = v24.u32[0];
      v6 = vaddq_f32(v23, v22);
      *(float32x4_t *)(v9 + 16 * v10) = vaddq_f32(*(float32x4_t *)(v9 + 16 * v10), v16);
      v10 = v4[4].u8[v10];
    }
    while (v10);
  }
  result = vaddq_f32(v5, v4[2]);
  v26 = vaddq_f32(v6, v4[3]);
  v4[2] = result;
  v4[3] = v26;
  v4->i64[1] |= *(_QWORD *)(v7 + 160 * a2 + 152);
  return result;
}

double physx::Dy::Articulation::pxcFsGetVelocities(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  __int128 v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 312))(&v12);
  v9 = v13;
  *a4 = v12;
  a4[1] = v9;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(&v12, a1, a3);
  result = *(double *)&v12;
  v11 = v13;
  *a5 = v12;
  a5[1] = v11;
  return result;
}

uint64_t physx::Dy::Articulation::pxcFsApplyImpulses(uint64_t a1, uint64_t a2, __n128 *a3, __n128 *a4, uint64_t a5, __n128 *a6, __n128 *a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(_QWORD *)a1 + 256))(a1, a2, a8, a9, *a3, *a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128, __n128))(*(_QWORD *)a1 + 256))(a1, a5, a8, a9, *a6, *a7);
}

__n128 physx::Dy::Articulation::pxcFsGetVelocity@<Q0>(physx::Dy::Articulation *this@<X0>, unsigned int a2@<W1>, float32x4_t *a3@<X8>)
{
  float32x4_t *v3;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t *v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int8x16_t *v41;
  float32x4_t *v42;
  float32x4_t *v43;
  float32x2_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x2_t v51;
  int8x8_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t *v65;
  uint64_t v66;
  uint64_t i;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t *v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t *v74;
  __n128 result;
  float32x4_t v76;
  _OWORD v77[128];
  _DWORD v78[64];
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v3 = (float32x4_t *)*((_QWORD *)this + 21);
  v4 = (float32x4_t *)((char *)v3 + v3[1].u16[1]);
  v5 = v4 + 9;
  v6 = v3 + 8;
  v7 = a2;
  v8 = v4[10 * a2 + 18].i64[1];
  v9 = v3->i64[1];
  if ((v9 & v8) != 0)
  {
    v10 = (v9 & v8 | -(v9 & v8)) & v8;
    v11 = v3->u16[0];
    if ((v10 & 1) != 0)
    {
      v17 = vnegq_f32(v3[2]);
      v18 = vmulq_n_f32(*v4, v17.f32[0]);
      v19 = vmulq_lane_f32(v4[1], *(float32x2_t *)v17.f32, 1);
      v20 = v4[3];
      v21 = vmulq_laneq_f32(v4[2], v17, 2);
      v17.i32[3] = 0;
      v22 = vnegq_f32(v3[3]);
      v18.i32[3] = 0;
      v19.i32[3] = 0;
      v21.i32[3] = 0;
      v23 = vaddq_f32(v18, v19);
      v24 = vmulq_n_f32(v20, v22.f32[0]);
      v24.i32[3] = 0;
      v25 = v4[4];
      v26 = v4[5];
      v27 = vmulq_lane_f32(v25, *(float32x2_t *)v22.f32, 1);
      v27.i32[3] = 0;
      v28 = vmulq_laneq_f32(v26, v22, 2);
      v28.i32[3] = 0;
      v15 = vaddq_f32(vaddq_f32(v23, v21), vaddq_f32(vaddq_f32(v24, v27), v28));
      v29 = vmulq_f32(v17, v20);
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      v30 = vmulq_f32(v17, v25);
      v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
      v31 = vmulq_f32(v17, v26);
      v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
      *(int8x8_t *)v29.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32), 4uLL);
      v29.i64[1] = vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32).u32[0];
      v32 = vmulq_n_f32(v4[6], v22.f32[0]);
      v32.i32[3] = 0;
      v33 = vmulq_lane_f32(v4[7], *(float32x2_t *)v22.f32, 1);
      v33.i32[3] = 0;
      v34 = vmulq_laneq_f32(v4[8], v22, 2);
      v34.i32[3] = 0;
      v14 = vaddq_f32(vaddq_f32(vaddq_f32(v32, v33), v34), v29);
      v35 = vaddq_f32(v3[9], v14);
      v3[8] = vaddq_f32(v15, v3[8]);
      v3[9] = v35;
      v3[2] = 0u;
      v3[3] = 0u;
      v78[0] = 0;
      v77[0] = v15;
      v77[1] = v14;
      v12 = v4[18].i64[0];
      v16 = v10 - 1;
      v13 = 1;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = v10;
    }
    v36 = &v6[2 * v11];
    if (v16)
    {
      v37 = (char *)v3 + v3->u16[1];
      v38 = (uint64_t)&v36[2 * v11 + 2 * v11];
      do
      {
        v39 = __clz(__rbit32(v16));
        LODWORD(v40) = __clz(__rbit32(HIDWORD(v16))) + 32;
        if ((_DWORD)v16)
          v40 = v39;
        else
          v40 = v40;
        v41 = (int8x16_t *)&v37[32 * v40];
        v42 = &v5[10 * v40];
        v43 = &v36[2 * v40];
        v44 = (float32x2_t *)(v38 + 16 * v40);
        v45 = vmulq_n_f32(v42[6], COERCE_FLOAT(*(_OWORD *)v44->f32));
        v45.i32[3] = 0;
        v46 = vmulq_lane_f32(v42[7], *v44, 1);
        v46.i32[3] = 0;
        v47 = vmulq_laneq_f32(v42[8], *(float32x4_t *)v44->f32, 2);
        v47.i32[3] = 0;
        v48 = vaddq_f32(v14, v43[1]);
        v49 = vaddq_f32(vaddq_f32(v45, v46), v47);
        v50 = v41[1];
        v51 = (float32x2_t)vextq_s8(*v41, *v41, 8uLL).u64[0];
        v52 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v48.f32, (float32x2_t)vext_s8(*(int8x8_t *)v41->i8, (int8x8_t)v51, 4uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL), *(float32x2_t *)v41->i8);
        *(int8x8_t *)v53.f32 = vext_s8(v52, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), *(float32x2_t *)v41->i8), *(float32x2_t *)v48.f32, v51), 4uLL);
        v53.i64[1] = v52.u32[0];
        v54 = vaddq_f32(vaddq_f32(v15, *v43), v53);
        v55 = vmulq_f32(*v42, v54);
        v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
        v56 = vmulq_f32(v42[2], v54);
        v56.i64[0] = vpaddq_f32(v56, v56).u64[0];
        v57 = vmulq_f32(v42[4], v54);
        v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
        *(int8x8_t *)v55.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), 4uLL);
        v55.i64[1] = vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).u32[0];
        v58 = vmulq_f32(v48, v42[1]);
        v58.i64[0] = vpaddq_f32(v58, v58).u64[0];
        v59 = vmulq_f32(v48, v42[3]);
        v59.i64[0] = vpaddq_f32(v59, v59).u64[0];
        v60 = vmulq_f32(v48, v42[5]);
        v60.i64[0] = vpaddq_f32(v60, v60).u64[0];
        *(int8x8_t *)v58.f32 = vext_s8((int8x8_t)vpadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32), (int8x8_t)vpadd_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v59.f32), 4uLL);
        v58.i64[1] = vpadd_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32).u32[0];
        v61 = vaddq_f32(v49, vaddq_f32(v55, v58));
        v55.i64[0] = vextq_s8(v50, v50, 8uLL).u64[0];
        *(float32x2_t *)v59.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL)), (float32x2_t)vext_s8(*(int8x8_t *)v50.i8, *(int8x8_t *)v55.f32, 4uLL), *(float32x2_t *)v61.f32);
        *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)v59.f32, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v61.f32), *(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL)), 4uLL);
        v55.i64[1] = v59.u32[0];
        v15 = vsubq_f32(v54, v55);
        v14 = vsubq_f32(v48, v61);
        v62 = &v6[2 * v40];
        v63 = vaddq_f32(v62[1], v14);
        *v62 = vaddq_f32(*v62, v15);
        v62[1] = v63;
        *v43 = 0uLL;
        v43[1] = 0uLL;
        *v44 = 0;
        v44[1] = 0;
        v78[v40] = v13;
        v64 = v13++;
        v65 = (float32x4_t *)&v77[2 * v64];
        v12 |= v42[9].u64[0];
        *v65 = v15;
        v65[1] = v14;
        v16 &= v16 - 1;
      }
      while (v16);
    }
    v66 = ~v10;
    for (i = v12 & ~v10; i; i &= i - 1)
    {
      v68 = __clz(__rbit32(i));
      LODWORD(v69) = __clz(__rbit32(HIDWORD(i))) + 32;
      if ((_DWORD)i)
        v69 = v68;
      else
        v69 = v69;
      v70 = v78[v3[4].u8[v69]];
      v71 = &v36[2 * v69];
      v72 = (float32x4_t *)&v77[2 * v70];
      v73 = vaddq_f32(v71[1], v72[1]);
      *v71 = vaddq_f32(*v71, *v72);
      v71[1] = v73;
    }
    v3->i64[1] = (v12 | v9) & v66;
  }
  v74 = &v6[2 * v7];
  result = *(__n128 *)v74;
  v76 = v74[1];
  *a3 = *v74;
  a3[1] = v76;
  return result;
}

void physx::Dy::PxvArticulationDriveCache::initialize(unsigned __int16 *a1, unsigned int a2, _QWORD *a3, unsigned __int16 a4, char *a5, unsigned int a6, float a7)
{
  uint64_t v14;
  uint64_t v15;
  float *v16;
  _QWORD v17[3];
  uint64_t v18[3];
  int v19;
  _BYTE v20[260];

  *(_QWORD *)&v20[252] = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  physx::Dy::Articulation::prepareDataBlock(a1, (uint64_t)a3, a2, (float32x2_t *)&a5[240 * a2], (uint64_t)&a5[272 * a2], a5, (float *)&a5[144 * a2]);
  bzero((char *)a1 + a1[9], 160 * a2 + 144);
  physx::Dy::Articulation::prepareFsData(a1, a3);
  v19 = 0;
  if (a2 >= 2)
  {
    v15 = v14 - 1;
    v16 = (float *)v20;
    do
    {
      *v16++ = 1.0 / a7;
      --v15;
    }
    while (v15);
  }
  bzero(&a5[288 * v14], 48 * a2);
  v18[0] = (uint64_t)a5;
  v18[1] = a6;
  v18[2] = 336 * v14;
  physx::Dy::PxcFsComputeJointLoadsSimd(a1, a5, (uint64_t)&a5[288 * v14], (uint64_t)&v19, a2, a4, v18);
  v17[0] = a5;
  v17[1] = a6;
  v17[2] = 336 * v14;
  physx::Dy::PxcFsPropagateDrivenInertiaSimd(a1, a5, (uint64_t)&v19, (uint64_t)&a5[288 * v14], v17);
}

float physx::Dy::SolverExtBody::projectVelocity(uint64_t a1, float *a2, float *a3)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float result;
  float *v9;
  float32x4_t v10[2];

  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
  {
    v9 = *(float **)(a1 + 8);
    return (float)((float)((float)(v9[1] * a2[1]) + (float)(*v9 * *a2)) + (float)(v9[2] * a2[2]))
         + (float)((float)((float)(v9[5] * a3[1]) + (float)(v9[4] * *a3)) + (float)(v9[6] * a3[2]));
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)a1 + 232))(v10);
    v5.i64[0] = *(_QWORD *)a2;
    v5.i64[1] = *((unsigned int *)a2 + 2);
    v6.i64[0] = *(_QWORD *)a3;
    v6.i64[1] = *((unsigned int *)a3 + 2);
    v7 = vaddq_f32(vmulq_f32(v5, v10[0]), vmulq_f32(v6, v10[1]));
    v7.i64[0] = vpaddq_f32(v7, v7).u64[0];
    LODWORD(result) = vpadd_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32).u32[0];
  }
  return result;
}

float32x2_t physx::Dy::SolverExtBody::projectVelocity(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v12[2];

  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8.i64[0] = *(_QWORD *)v7;
    v8.i64[1] = *(unsigned int *)(v7 + 8);
    v5 = vmulq_f32(v8, *a2);
    v9.i64[0] = *(_QWORD *)(v7 + 16);
    v9.i64[1] = *(unsigned int *)(v7 + 24);
    v6 = vmulq_f32(v9, *a3);
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)a1 + 232))(v12);
    v5 = vmulq_f32(*a2, v12[0]);
    v6 = vmulq_f32(*a3, v12[1]);
  }
  v10 = vaddq_f32(v5, v6);
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  return vpadd_f32(*(float32x2_t *)v10.f32, *(float32x2_t *)v10.f32);
}

float32x2_t *physx::Dy::createImpulseResponseVector@<X0>(float32x2_t *result@<X0>, float *a2@<X1>, uint64_t a3@<X2>, float32x2_t *a4@<X8>)
{
  float32x2_t v4;
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  __int32 v10;

  if (*(__int16 *)(a3 + 16) == -1)
  {
    v6 = *(_QWORD *)(a3 + 8);
    v7 = a2[1];
    v8 = a2[2];
    v9 = v8 * *(float *)(v6 + 64);
    v4 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v6 + 32), *a2), vmul_n_f32(*(float32x2_t *)(v6 + 44), v7)), vmul_n_f32(*(float32x2_t *)(v6 + 56), v8));
    v5 = (float)((float)(*a2 * *(float *)(v6 + 40)) + (float)(v7 * *(float *)(v6 + 52))) + v9;
  }
  else
  {
    v4 = *(float32x2_t *)a2;
    v5 = a2[2];
  }
  v10 = result[1].i32[0];
  *a4 = *result;
  a4[1].i32[0] = v10;
  a4[1].i32[1] = 0;
  a4[2] = v4;
  a4[3].f32[0] = v5;
  a4[3].i32[1] = 0;
  return result;
}

float physx::Dy::getImpulseResponse(uint64_t *a1, float32x2_t *a2, float32x2_t *a3, uint64_t *a4, float32x2_t *a5, float32x2_t *a6, uint64_t a7, float a8, float a9, float a10, float a11)
{
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  __int32 v51;
  float32x2_t v52;
  float v53;
  int v54;
  float32x2_t v55;
  float v56;
  int v57;

  v17 = *((unsigned __int16 *)a1 + 8);
  if ((_DWORD)v17 == 0xFFFF)
  {
    v27 = *(float *)(a1[1] + 12);
    v23 = (float)(v27 * a2[1].f32[0]) * a8;
    v22 = vmul_n_f32(vmul_n_f32(*a2, v27), a8);
    *a3 = v22;
    a3[1].f32[0] = v23;
    v24 = a2[2].f32[0] * a9;
    v25 = a2[2].f32[1] * a9;
    v26 = a2[3].f32[0] * a9;
    a3[2].f32[0] = v24;
    a3[2].f32[1] = v25;
    a3[3].f32[0] = v26;
    v21 = v22.f32[1];
  }
  else
  {
    v18 = *a1;
    v19 = a2[1].f32[0] * a8;
    v48 = a10;
    v50 = a11;
    v20 = a2[3].f32[0] * a9;
    v52 = vmul_n_f32(*a2, a8);
    v53 = v19;
    v54 = 0;
    v55 = vmul_n_f32(a2[2], a9);
    v56 = v20;
    v57 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(_QWORD *)v18 + 208))(v18, v17, a7, &v52, a3);
    a10 = v48;
    a11 = v50;
    v22.i32[0] = a3->i32[0];
    v21 = a3->f32[1];
    v23 = a3[1].f32[0];
    v24 = a3[2].f32[0];
    v25 = a3[2].f32[1];
    v26 = a3[3].f32[0];
  }
  v29 = a2->f32[0];
  v28 = a2->f32[1];
  v30 = a2[1].f32[0];
  v31 = a2[2].f32[0];
  v32 = a2[2].f32[1];
  v33 = a2[3].f32[0];
  v34 = *((unsigned __int16 *)a4 + 8);
  if ((_DWORD)v34 == 0xFFFF)
  {
    v44 = *(float *)(a4[1] + 12);
    v40 = (float)(v44 * a5[1].f32[0]) * a10;
    v38 = vmul_n_f32(vmul_n_f32(*a5, v44), a10);
    *a6 = v38;
    a6[1].f32[0] = v40;
    v41 = a5[2].f32[0] * a11;
    v42 = a5[2].f32[1] * a11;
    v43 = a5[3].f32[0] * a11;
    a6[2].f32[0] = v41;
    a6[2].f32[1] = v42;
    a6[3].f32[0] = v43;
    v39 = v38.f32[1];
  }
  else
  {
    v35 = *a4;
    v36 = a5[1].f32[0] * a10;
    v37 = a5[3].f32[0] * a11;
    v52 = vmul_n_f32(*a5, a10);
    v53 = v36;
    v54 = 0;
    v55 = vmul_n_f32(a5[2], a11);
    v56 = v37;
    v57 = 0;
    v51 = v22.i32[0];
    v47 = v31;
    v49 = v33;
    v46 = v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t, float32x2_t *, float32x2_t *))(*(_QWORD *)v35 + 208))(v35, v34, a7, &v52, a6);
    v32 = v46;
    v31 = v47;
    v33 = v49;
    v22.i32[0] = v51;
    v38.i32[0] = a6->i32[0];
    v39 = a6->f32[1];
    v40 = a6[1].f32[0];
    v41 = a6[2].f32[0];
    v42 = a6[2].f32[1];
    v43 = a6[3].f32[0];
  }
  return (float)((float)((float)((float)(v21 * v28) + (float)(v29 * v22.f32[0])) + (float)(v30 * v23))
               + (float)((float)((float)(v25 * v32) + (float)(v31 * v24)) + (float)(v33 * v26)))
       + (float)((float)((float)((float)(v39 * a5->f32[1]) + (float)(a5->f32[0] * v38.f32[0]))
                       + (float)(a5[1].f32[0] * v40))
               + (float)((float)((float)(v42 * a5[2].f32[1]) + (float)(a5[2].f32[0] * v41)) + (float)(a5[3].f32[0] * v43)));
}

float32x2_t physx::Dy::getImpulseResponse(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, float32x2_t *a4, float32x2_t *a5, uint64_t *a6, float32x4_t *a7, float32x4_t *a8, double a9, float32x2_t a10, float32x2_t *a11, _QWORD *a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v18 = *((unsigned __int16 *)a1 + 8);
  if ((_DWORD)v18 == 0xFFFF)
  {
    a10.i32[0] = *(_DWORD *)(a1[1] + 12);
    v23 = vmulq_n_f32(*a2, vmul_f32(a10, *a4).f32[0]);
    v23.i32[3] = 0;
    *a3 = v23;
    v22 = *a5;
    v24 = vmulq_n_f32(a2[1], COERCE_FLOAT(*a5));
    v24.i32[3] = 0;
    a3[1] = v24;
  }
  else
  {
    v19 = *a1;
    v20 = vmulq_n_f32(*a2, COERCE_FLOAT(*a4));
    v20.i32[3] = 0;
    v21 = vmulq_n_f32(a2[1], COERCE_FLOAT(*a5));
    v21.i32[3] = 0;
    v39 = v20;
    v40 = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, float32x4_t *))(*(_QWORD *)v19 + 216))(v19, v18, a13, &v39, a3);
    v23 = *a3;
    v24 = a3[1];
  }
  v25 = *a2;
  v26 = a2[1];
  v27 = *((unsigned __int16 *)a6 + 8);
  if ((_DWORD)v27 == 0xFFFF)
  {
    v22.i32[0] = *(_DWORD *)(a6[1] + 12);
    v31 = vmulq_n_f32(*a7, vmul_f32(v22, *a11).f32[0]);
    v31.i32[3] = 0;
    *a8 = v31;
    v32 = vmulq_n_f32(a7[1], COERCE_FLOAT(*a12));
    v32.i32[3] = 0;
    a8[1] = v32;
  }
  else
  {
    v28 = *a6;
    v29 = vmulq_n_f32(*a7, COERCE_FLOAT(*a11));
    v29.i32[3] = 0;
    v30 = vmulq_n_f32(a7[1], COERCE_FLOAT(*a12));
    v30.i32[3] = 0;
    v39 = v29;
    v40 = v30;
    v37 = v24;
    v38 = v23;
    v35 = v26;
    v36 = v25;
    (*(void (**)(uint64_t, uint64_t, uint64_t, float32x4_t *, float32x4_t *))(*(_QWORD *)v28 + 216))(v28, v27, a13, &v39, a8);
    v26 = v35;
    v25 = v36;
    v24 = v37;
    v23 = v38;
    v31 = *a8;
    v32 = a8[1];
  }
  v33 = vaddq_f32(vaddq_f32(vmulq_f32(v23, v25), vmulq_f32(v24, v26)), vaddq_f32(vmulq_f32(v31, *a7), vmulq_f32(v32, a7[1])));
  v33.i64[0] = vpaddq_f32(v33, v33).u64[0];
  return vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v33.f32);
}

void physx::Dy::setupFinalizeExtSolverContacts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, double a9, int32x2_t a10, int32x2_t a11, int32x2_t a12, int32x2_t a13, int32x2_t a14, int32x2_t a15, int32x2_t a16, uint64_t a17)
{
  int32x2_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x2_t v41;
  unint64_t v42;
  unint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  float v51;
  float v52;
  char v56;
  float v57;
  __int128 v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int32x4_t v62;
  float32x2_t v63;
  char *v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  float32x2_t v68;
  float32x2_t v69;
  int v70;
  int32x4_t v71;
  int8x16_t v72;
  char *v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int v83;
  float32x2_t v85;
  float32x2_t v86;
  int v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x2_t v90;
  float32x4_t v91;
  uint64_t v92;
  unint64_t v93;
  unsigned __int16 *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float *v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  unsigned int v107;
  unsigned int v108;
  float32_t v109;
  float32x2_t v110;
  float32x4_t v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float32_t v120;
  float32_t v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x4_t *v124;
  float32x2_t v125;
  float32x2_t v126;
  int8x8_t v127;
  float32x2_t v128;
  float v129;
  float32x4_t v130;
  float32x2_t v131;
  float32x2_t v132;
  int8x8_t v133;
  float32x4_t v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  uint64_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x2_t ImpulseResponse;
  float32x2_t v151;
  int v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x2_t v159;
  float32x2_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  int8x8_t v165;
  float32x2_t v166;
  float32x4_t v167;
  float32x4_t v168;
  int8x8_t v169;
  float32x4_t v170;
  uint64_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  uint64_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x2_t v183;
  float32x2_t v184;
  int v185;
  uint64_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x2_t v190;
  float32x2_t v191;
  float32x2_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x2_t v196;
  float32x2_t v197;
  float *v199;
  uint64_t v202;
  unsigned int v203;
  float32x2_t v204;
  uint64_t v205;
  float32x2_t v206;
  float32x2_t v207;
  float32x2_t v208;
  float32x2_t v209;
  unint64_t v210;
  float32x2_t v211;
  float32x2_t v212;
  uint64_t v213;
  float32x2_t v214;
  float32x2_t v215;
  float32x2_t v216;
  float32x2_t v217;
  char v219;
  float32x2_t v220;
  float32x4_t v221;
  unsigned int v223;
  float32x2_t v224;
  float32x4_t v225;
  unsigned int *v227;
  float32x4_t v229;
  float32x4_t v230;
  unsigned int v232;
  float32x4_t v233;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  int32x4_t v247;
  int32x2_t v248;
  float32x2_t v249;
  int32x2_t v250;
  float32x2_t v251;
  int32x2_t v252;
  int32x2_t v253;
  int32x2_t v254;
  int32x2_t v255;
  int32x2_t v256;
  float32x4_t v257[2];
  float32x4_t v258[2];
  float32x4_t v259;
  float32x4_t v260;
  int32x2_t v261;
  float32x2_t v262[2];

  _X22 = a5;
  v23 = vdup_lane_s32(a16, 0);
  v262[0] = (float32x2_t)v23;
  if (*((unsigned __int16 *)a6 + 8) == 0xFFFF)
    v24 = *(float *)(a6[1] + 68);
  else
    v24 = (*(float (**)(uint64_t))(*(_QWORD *)*a6 + 248))(*a6);
  if (*((unsigned __int16 *)a7 + 8) == 0xFFFF)
    v23.i32[0] = *(_DWORD *)(a7[1] + 68);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)*a7 + 248))(*a7);
  if (v24 > *(float *)v23.i32)
    *(float *)v23.i32 = v24;
  v25.i64[0] = *(_QWORD *)(a3 + 16);
  v25.i64[1] = *(unsigned int *)(a3 + 24);
  v261 = vdup_lane_s32(v23, 0);
  v26.i64[0] = *(_QWORD *)(a4 + 16);
  v26.i64[1] = *(unsigned int *)(a4 + 24);
  v259 = v26;
  v260 = v25;
  if (*((unsigned __int16 *)a6 + 8) == 0xFFFF)
  {
    v27 = a6[1];
    v28.i64[0] = *(_QWORD *)v27;
    v28.i64[1] = *(unsigned int *)(v27 + 8);
    v29.i64[0] = *(_QWORD *)(v27 + 16);
    v29.i64[1] = *(unsigned int *)(v27 + 24);
    v258[0] = v28;
    v258[1] = v29;
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)*a6 + 232))(v258);
  }
  if (*((unsigned __int16 *)a7 + 8) == 0xFFFF)
  {
    v30 = a7[1];
    v31.i64[0] = *(_QWORD *)v30;
    v31.i64[1] = *(unsigned int *)(v30 + 8);
    v32.i64[0] = *(_QWORD *)(v30 + 16);
    v32.i64[1] = *(unsigned int *)(v30 + 24);
    v257[0] = v31;
    v257[1] = v32;
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)*a7 + 232))(v257);
  }
  v256 = vdup_lane_s32(a11, 0);
  v255 = vdup_lane_s32(a13, 0);
  v254 = vdup_lane_s32(a12, 0);
  v253 = vdup_lane_s32(a14, 0);
  v252 = vdup_lane_s32(a15, 0);
  _X8 = a2 + 7556;
  __asm { PRFM            #0, [X8] }
  _X8 = a2 + 7684;
  __asm { PRFM            #0, [X8] }
  v251 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v250 = vdup_lane_s32(a10, 0);
  v41 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
  v249 = vmul_n_f32(v41, *(float *)&a9);
  v42 = *(unsigned int *)(a2 + 7688);
  if ((_DWORD)v42)
  {
    v43 = 0;
    v203 = 0;
    v44.i64[0] = 0;
    v44.i32[2] = 0;
    v44.i32[3] = vdupq_lane_s32(a13, 0).i32[3];
    v45.i64[0] = 0;
    v45.i64[1] = a11.u32[0];
    v196 = (float32x2_t)vdup_n_s32(0x38D1B717u);
    v197 = (float32x2_t)vdup_n_s32(0x3F3504F3u);
    v46 = (float32x4_t)vorrq_s8((int8x16_t)v44, v45);
    v202 = v46.i64[1];
    v199 = (float *)a3;
    v213 = a2;
    v204 = v41;
    do
    {
      v47 = a2 + 4 * v43;
      v48 = *(_DWORD *)(v47 + 7296);
      if (v48)
      {
        v49 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *(unsigned int *)(v47 + 7424)) << 6);
        v50 = *(_BYTE *)(v49 + 48);
        v44.i32[0] = 1.0;
        if ((v50 & 4) != 0)
        {
          v44.i32[0] = 0.5;
          if (*(_WORD *)(a2 + 104 * v43 + 2818) != 2)
            v44.f32[0] = 1.0;
        }
        v51 = *(float *)(v49 + 44);
        v52 = *(float *)(v49 + 56);
        v46.i32[0] = *(_DWORD *)(v49 + 60);
        __asm
        {
          PRFM            #0, [X22,#0xD0]
          PRFM            #0, [X22,#0x150]
          PRFM            #0, [X22,#0x1D0]
        }
        _X22[2] = v48;
        if ((v50 & 1) != 0)
          v56 = 0;
        else
          v56 = 2 * *(_BYTE *)(a2 + 104 * v43 + 2818);
        v223 = v48;
        v210 = v43;
        v57 = v44.f32[0] * v51;
        v44.f32[0] = v44.f32[0] * v52;
        *((_QWORD *)&v58 + 1) = v202;
        *(float *)&v58 = v57;
        DWORD1(v58) = vdupq_lane_s32(*(int32x2_t *)&v44, 0).i32[1];
        _X22[3] = v56;
        *(_WORD *)_X22 = 3;
        v248 = vdup_lane_s32(*(int32x2_t *)v46.f32, 0);
        *((_OWORD *)_X22 + 1) = v58;
        *((_DWORD *)_X22 + 1) = a12.i32[0];
        *((_DWORD *)_X22 + 2) = a14.i32[0];
        v227 = (unsigned int *)(v47 + 7424);
        v59 = *(_DWORD *)(v47 + 7424);
        v60 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * v59) << 6);
        v62.i64[0] = *(_QWORD *)v60;
        v62.i32[2] = *(_DWORD *)(v60 + 8);
        v61 = (uint64_t)(_X22 + 80);
        v62.i64[1] = v62.u32[2];
        v247 = v62;
        v63 = 0;
        v219 = v50;
        if (v59 == 0xFFFF)
        {
          v64 = _X22 + 80;
        }
        else
        {
          do
          {
            v65 = (unsigned __int16 *)(a2 + 44 * v59);
            v66 = *((unsigned __int8 *)v65 + 5);
            v232 = v59;
            if (*((_BYTE *)v65 + 5))
            {
              v67 = a1 + ((unint64_t)*v65 << 6);
              do
              {
                v64 = (char *)(v61 + 112);
                *(float32x2_t *)v62.i8 = physx::Dy::setupExtSolverContact((uint64_t)a6, (uint64_t)a7, (float32x2_t *)&v256, (float32x2_t *)&v255, (float32x2_t *)&v254, &v253, &v260, &v259, (int8x8_t *)&v247, &v251, &v249, (float32x2_t *)&v252, (float32x2_t *)&v261, (float32x2_t *)&v248, (float32x2_t *)&v250, v67, v61, v262, a17,
                                           v258,
                                           v257);
                v63 = vadd_f32(v63, *(float32x2_t *)v62.i8);
                v67 += 64;
                v61 = (uint64_t)v64;
                --v66;
              }
              while (v66);
            }
            else
            {
              v64 = (char *)v61;
            }
            a2 = v213;
            v59 = *(unsigned __int16 *)(v213 + 44 * v232 + 2);
            v61 = (uint64_t)v64;
          }
          while (v59 != 0xFFFF);
        }
        *(float *)v62.i32 = (float)v223;
        v68 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 0);
        v69 = vrecpe_f32(v68);
        v70 = 4;
        do
        {
          v69 = vmul_f32(v69, vrecps_f32(v68, v69));
          --v70;
        }
        while (v70);
        v71 = v247;
        v71.i32[3] = vmul_f32(v63, v69).i32[1];
        *((int32x4_t *)_X22 + 2) = v71;
        bzero(v64, 4 * v223);
        v73 = &v64[4 * ((v223 + 3) & 0xFFFFFFFC)];
        *((_DWORD *)_X22 + 13) = 0;
        if ((v219 & 1) != 0)
        {
          v43 = v210;
        }
        else
        {
          *(int32x2_t *)v72.i8 = vdup_lane_s32(*(int32x2_t *)v247.i8, 1);
          v74 = vsubq_f32(v258[0], v257[0]);
          *(int8x8_t *)v75.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32(v247, 2)), 4uLL);
          v75.i64[1] = v72.u32[0];
          *(int8x8_t *)v72.i8 = vext_s8((int8x8_t)vneg_f32(*(float32x2_t *)v72.i8), *(int8x8_t *)v247.i8, 4uLL);
          v76 = vmulq_f32((float32x4_t)v247, v74);
          v76.i64[0] = vpaddq_f32(v76, v76).u64[0];
          v77 = vmulq_n_f32((float32x4_t)v247, vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32).f32[0]);
          v77.i32[3] = 0;
          v78 = vsubq_f32(v74, v77);
          v79 = vmulq_f32(v78, v78);
          v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
          v44 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32), v196), 0), (int8x16_t)v78, vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(v197, vabs_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v247.i8, 0))), 0), 0x1FuLL)), v75, v72));
          v80 = vmulq_f32(v44, v44);
          v80.i64[0] = vpaddq_f32(v80, v80).u64[0];
          v81 = vpadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32);
          v82 = vrsqrte_f32(v81);
          v83 = 4;
          v43 = v210;
          do
          {
            v82 = vmul_f32(v82, vrsqrts_f32(vmul_f32(v82, v82), v81));
            --v83;
          }
          while (v83);
          __asm { FMOV            V5.2S, #1.0 }
          v85 = vmul_f32(v81, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v81), 0), _D5, (int8x8_t)v82));
          v86 = vrecpe_f32(v85);
          v87 = 4;
          do
          {
            v86 = vmul_f32(v86, vrecps_f32(v85, v86));
            --v87;
          }
          while (v87);
          v88 = vmulq_n_f32(v44, v86.f32[0]);
          v89 = (int8x16_t)v88;
          v89.i32[3] = 0;
          v44.i64[0] = vextq_s8(v89, v89, 8uLL).u64[0];
          v209 = (float32x2_t)vext_s8(*(int8x8_t *)v88.f32, *(int8x8_t *)v44.f32, 4uLL);
          *(float32x2_t *)v46.f32 = vmls_f32(vmul_f32(*(float32x2_t *)v247.i8, v209), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v247, (int8x16_t)v247, 4uLL), *(float32x2_t *)v88.f32);
          v90 = (float32x2_t)vext_s8(*(int8x8_t *)v46.f32, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL), *(float32x2_t *)v88.f32), *(float32x2_t *)v247.i8, *(float32x2_t *)v44.f32), 4uLL);
          v46.i32[1] = 0;
          *(float32x2_t *)v91.f32 = v90;
          v91.i64[1] = v46.u32[0];
          v245 = v91;
          v246 = (float32x4_t)v89;
          *((_QWORD *)_X22 + 7) = a8 + 104 * v203;
          v92 = a2 + 104 * v210;
          if (*(_WORD *)(v92 + 2818))
          {
            v93 = 0;
            v206 = vneg_f32(*(float32x2_t *)v88.f32);
            v207 = vneg_f32(*(float32x2_t *)v44.f32);
            v94 = (unsigned __int16 *)(v92 + 2818);
            v95 = (float32x2_t)vext_s8((int8x8_t)v90, *(int8x8_t *)v46.f32, 4uLL);
            v96 = vneg_f32(*(float32x2_t *)v46.f32);
            v208 = v90;
            v97 = vneg_f32(v90);
            v205 = v88.i64[0];
            do
            {
              v98 = (float *)(a2 + 104 * v43 + 12 * v93);
              v99 = v98[714] + v98[714];
              v100 = v98[715] + v98[715];
              v101 = v98[716] + v98[716];
              v103 = v199[2];
              v102 = v199[3];
              v104 = (float)(v102 * v102) + -0.5;
              v105 = v199[1];
              v106 = (float)((float)(v100 * v105) + (float)(*v199 * v99)) + (float)(v103 * v101);
              *(float *)&v107 = (float)((float)(v102 * (float)((float)(v105 * v101) - (float)(v103 * v100)))
                                      + (float)(v99 * v104))
                              + (float)(*v199 * v106);
              *(float *)&v108 = (float)((float)(v102 * (float)((float)(v103 * v99) - (float)(*v199 * v101)))
                                      + (float)(v100 * v104))
                              + (float)(v105 * v106);
              v109 = (float)((float)(v102 * (float)((float)(*v199 * v100) - (float)(v105 * v99))) + (float)(v101 * v104))
                   + (float)(v103 * v106);
              v110 = (float32x2_t)__PAIR64__(v108, v107);
              v111 = (float32x4_t)__PAIR64__(v108, v107);
              v111.f32[2] = v109;
              v112 = v98[720] + v98[720];
              v113 = v98[721] + v98[721];
              v114 = v98[722] + v98[722];
              v116 = *(float *)(a4 + 8);
              v115 = *(float *)(a4 + 12);
              v117 = (float)(v115 * v115) + -0.5;
              v118 = *(float *)(a4 + 4);
              v119 = (float)((float)(v113 * v118) + (float)(*(float *)a4 * v112)) + (float)(v116 * v114);
              v120 = (float)((float)(v115 * (float)((float)(v116 * v112) - (float)(*(float *)a4 * v114)))
                           + (float)(v113 * v117))
                   + (float)(v118 * v119);
              v122.f32[0] = (float)((float)(v115 * (float)((float)(v118 * v114) - (float)(v116 * v113)))
                                  + (float)(v112 * v117))
                          + (float)(*(float *)a4 * v119);
              v121 = (float)((float)(v115 * (float)((float)(*(float *)a4 * v113) - (float)(v118 * v112)))
                           + (float)(v114 * v117))
                   + (float)(v116 * v119);
              v122.f32[1] = v120;
              v123 = (float32x4_t)(unint64_t)v122;
              v123.f32[2] = v121;
              v124 = (float32x4_t *)v73;
              v125 = (float32x2_t)vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u64[0];
              v126 = (float32x2_t)vext_s8((int8x8_t)v110, (int8x8_t)v125, 4uLL);
              v127 = (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v88.f32, v125), v110, v207);
              v128 = vmla_f32(vmul_f32(v209, v110), v126, v206);
              v129 = v128.f32[0];
              *(int8x8_t *)v130.f32 = vext_s8((int8x8_t)v128, v127, 4uLL);
              v130.i64[1] = v128.u32[0];
              v131 = (float32x2_t)vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u64[0];
              v132 = (float32x2_t)vext_s8((int8x8_t)v122, (int8x8_t)v131, 4uLL);
              v133 = (int8x8_t)vmla_f32(vmul_f32(v209, v122), v132, v206);
              *(int8x8_t *)v134.f32 = vext_s8(v133, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v88.f32, v131), v122, v207), 4uLL);
              v134.i64[1] = v133.u32[0];
              v243 = v134;
              v244 = v130;
              if (*((__int16 *)a6 + 8) == -1)
              {
                v135 = a6[1];
                v136 = *(float32x4_t *)(v135 + 44);
                v137 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 3);
                v137.i32[1] = *(_DWORD *)(v135 + 60);
                v137.i32[2] = *(_DWORD *)(v135 + 64);
                v138 = vmulq_lane_f32(*(float32x4_t *)(v135 + 32), v128, 1);
                v138.i32[3] = 0;
                v139 = vmulq_n_f32(v136, *(float *)v127.i32);
                v139.i32[3] = 0;
                v140 = vmulq_n_f32(v137, v129);
                v140.i32[3] = 0;
                v130 = vaddq_f32(vaddq_f32(v138, v139), v140);
              }
              v237 = v246;
              v238 = v130;
              v141 = vnegq_f32(v134);
              v220 = v122;
              v224 = v110;
              v214 = v131;
              v215 = v125;
              if (*((__int16 *)a7 + 8) == -1)
              {
                v142 = a7[1];
                v143 = *(float32x4_t *)(v142 + 44);
                v144 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 3);
                v144.i32[1] = *(_DWORD *)(v142 + 60);
                v144.i32[2] = *(_DWORD *)(v142 + 64);
                v145 = vmulq_n_f32(*(float32x4_t *)(v142 + 32), v141.f32[0]);
                v145.i32[3] = 0;
                v146 = vmulq_lane_f32(v143, *(float32x2_t *)v141.f32, 1);
                v146.i32[3] = 0;
                v147 = vmulq_laneq_f32(v144, v141, 2);
                v147.i32[3] = 0;
                v141 = vaddq_f32(vaddq_f32(v145, v146), v147);
              }
              else
              {
                v141.i32[3] = 0;
              }
              v73 += 256;
              v148 = vaddq_f32(v259, v123);
              v149 = vnegq_f32(v246);
              v149.i32[3] = 0;
              v229 = v246;
              v233 = vsubq_f32(vaddq_f32(v111, v260), v148);
              v235 = v149;
              v236 = v141;
              ImpulseResponse = physx::Dy::getImpulseResponse(a6, &v237, &v241, (float32x2_t *)&v256, (float32x2_t *)&v254, a7, &v235, &v239, *(double *)v233.i64, *(float32x2_t *)v148.f32, (float32x2_t *)&v255, &v253, a17);
              v151 = vrecpe_f32(ImpulseResponse);
              v152 = 4;
              do
              {
                v151 = vmul_f32(v151, vrecps_f32(ImpulseResponse, v151));
                --v152;
              }
              while (v152);
              v153 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *v227) << 6);
              v154.i64[0] = *(_QWORD *)(v153 + 32);
              v154.i64[1] = *(unsigned int *)(v153 + 40);
              v155 = v229;
              v156 = vmulq_f32(v229, v154);
              v156.i64[0] = vpaddq_f32(v156, v156).u64[0];
              v157 = vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v156.f32);
              if (*((__int16 *)a6 + 8) == -1)
              {
                v212 = v157;
                v159 = physx::Dy::SolverExtBody::projectVelocity((uint64_t)a6, &v246, &v244);
                v155 = v229;
                v157.i32[0] = vsub_f32(v212, v159).u32[0];
              }
              else if (*((__int16 *)a7 + 8) == -1)
              {
                v211 = v157;
                v158 = physx::Dy::SolverExtBody::projectVelocity((uint64_t)a7, &v246, &v243);
                v155 = v229;
                v157.i32[0] = vadd_f32(v211, v158).u32[0];
              }
              v160 = (float32x2_t)vdup_n_s32(0x3727C5ACu);
              v155.i32[3] = 0;
              *v124 = v155;
              v161 = v238;
              v161.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(ImpulseResponse, v160), 0), (int8x8_t)vmul_f32(v151, v204)).i32[1];
              v124[1] = v161;
              v162 = vnegq_f32(v236);
              v163 = vmulq_f32(v233, v246);
              v163.i64[0] = vpaddq_f32(v163, v163).u64[0];
              v162.i32[3] = vmul_f32(vpadd_f32(*(float32x2_t *)&v163, *(float32x2_t *)&v163), v251).i32[1];
              v124[2] = v162;
              v164 = v242;
              v124[4] = v241;
              v124[5] = v164;
              v167 = v240;
              v124[6] = v239;
              v124[7] = v167;
              v124[3].i32[0] = v157.i32[0];
              v165 = (int8x8_t)vmla_f32(vmul_f32(v208, v215), v224, v96);
              v166 = vmla_f32(vmul_f32(v95, v224), v126, v97);
              *(int8x8_t *)v168.f32 = vext_s8((int8x8_t)v166, v165, 4uLL);
              v167.i64[0] = v166.u32[0];
              v168.i64[1] = v166.u32[0];
              v169 = (int8x8_t)vmla_f32(vmul_f32(v95, v220), v132, v97);
              *(int8x8_t *)v170.f32 = vext_s8(v169, (int8x8_t)vmla_f32(vmul_f32(v208, v214), v220, v96), 4uLL);
              v170.i64[1] = v169.u32[0];
              v243 = v170;
              v244 = v168;
              if (*((__int16 *)a6 + 8) == -1)
              {
                v171 = a6[1];
                v172 = *(float32x4_t *)(v171 + 44);
                v173 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v172, 3);
                v173.i32[1] = *(_DWORD *)(v171 + 60);
                v173.i32[2] = *(_DWORD *)(v171 + 64);
                v174 = vmulq_lane_f32(*(float32x4_t *)(v171 + 32), v166, 1);
                v174.i32[3] = 0;
                v175 = vmulq_n_f32(v172, *(float *)v165.i32);
                v175.i32[3] = 0;
                v167 = vmulq_n_f32(v173, v167.f32[0]);
                v167.i32[3] = 0;
                v168 = vaddq_f32(vaddq_f32(v174, v175), v167);
              }
              v237 = v245;
              v238 = v168;
              v176 = vnegq_f32(v170);
              v225 = v168;
              if (*((__int16 *)a7 + 8) == -1)
              {
                v177 = a7[1];
                v178 = *(float32x4_t *)(v177 + 44);
                v179 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 3);
                v179.i32[1] = *(_DWORD *)(v177 + 60);
                v179.i32[2] = *(_DWORD *)(v177 + 64);
                v180 = vmulq_n_f32(*(float32x4_t *)(v177 + 32), v176.f32[0]);
                v180.i32[3] = 0;
                v167 = vmulq_lane_f32(v178, *(float32x2_t *)v176.f32, 1);
                v167.i32[3] = 0;
                v181 = vmulq_laneq_f32(v179, v176, 2);
                v181.i32[3] = 0;
                v176 = vaddq_f32(vaddq_f32(v180, v167), v181);
              }
              else
              {
                v176.i32[3] = 0;
              }
              v230 = v245;
              v182 = vnegq_f32(v245);
              v182.i32[3] = 0;
              v235 = v182;
              v236 = v176;
              v221 = v176;
              v183 = physx::Dy::getImpulseResponse(a6, &v237, &v241, (float32x2_t *)&v256, (float32x2_t *)&v254, a7, &v235, &v239, *(double *)v182.i64, *(float32x2_t *)v167.f32, (float32x2_t *)&v255, &v253, a17);
              v184 = vrecpe_f32(v183);
              v185 = 4;
              do
              {
                v184 = vmul_f32(v184, vrecps_f32(v183, v184));
                --v185;
              }
              while (v185);
              v186 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *v227) << 6);
              v187.i64[0] = *(_QWORD *)(v186 + 32);
              v187.i64[1] = *(unsigned int *)(v186 + 40);
              v188 = v230;
              v189 = vmulq_f32(v230, v187);
              v189.i64[0] = vpaddq_f32(v189, v189).u64[0];
              v190 = vpadd_f32(*(float32x2_t *)v189.f32, *(float32x2_t *)v189.f32);
              if (*((__int16 *)a6 + 8) == -1)
              {
                v217 = v190;
                v192 = physx::Dy::SolverExtBody::projectVelocity((uint64_t)a6, &v245, &v244);
                v188 = v230;
                v190.i32[0] = vsub_f32(v217, v192).u32[0];
              }
              else if (*((__int16 *)a7 + 8) == -1)
              {
                v216 = v190;
                v191 = physx::Dy::SolverExtBody::projectVelocity((uint64_t)a7, &v245, &v243);
                v188 = v230;
                v190.i32[0] = vadd_f32(v216, v191).u32[0];
              }
              v88.i64[0] = v205;
              v193 = v225;
              v194 = vmulq_f32(v233, v188);
              v188.i32[3] = 0;
              v193.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v183, v160), 0), (int8x8_t)vmul_f32(v184, v204)).i32[1];
              v124[8] = v188;
              v124[9] = v193;
              v46 = vnegq_f32(v221);
              v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
              v46.i32[3] = vmul_f32(vpadd_f32(*(float32x2_t *)&v194, *(float32x2_t *)&v194), v251).i32[1];
              v124[10] = v46;
              v195 = v242;
              v124[12] = v241;
              v124[13] = v195;
              v46.i32[1] = v239.i32[1];
              v44 = v240;
              v124[14] = v239;
              v124[15] = v44;
              v124[11].i32[0] = v190.i32[0];
              ++v93;
              v43 = v210;
            }
            while (v93 < *v94);
          }
        }
        ++v203;
        v42 = *(unsigned int *)(a2 + 7688);
        _X22 = v73;
      }
      ++v43;
    }
    while (v43 < v42);
  }
}

uint64_t physx::Dy::setupFinalizeExtSolverContactsCoulomb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x2_t *a5, uint64_t *a6, uint64_t *a7, int a8, double a9, int32x2_t a10, int32x2_t a11, int32x2_t a12, int32x2_t a13, int32x2_t a14, int32x2_t a15, int32x2_t a16, uint64_t a17)
{
  int32x2_t v23;
  float v24;
  uint64_t v25;
  float32x4_t v26;
  int8x16_t v27;
  uint64_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int32 v48;
  const float *v49;
  float32x2_t v50;
  uint64_t v51;
  float32x4_t v52;
  uint64_t v53;
  int32x2_t v57;
  unsigned __int16 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  __int32 v69;
  char v70;
  __int8 v71;
  int32x2_t *v72;
  size_t v73;
  __n128 v75;
  float v80;
  float v81;
  float v82;
  float32x2_t v83;
  float v84;
  float32x2_t *v85;
  float32x2_t v86;
  float v87;
  float32x2_t *v88;
  float32x2_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  BOOL v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x2_t v115;
  int8x8_t v116;
  float32x4_t v117;
  int8x16_t v118;
  int8x8_t v119;
  float32x4_t v120;
  int8x8_t *v121;
  float32x2_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x2_t v125;
  int8x8_t v126;
  float32x2_t v127;
  uint64_t v128;
  float32x4_t v129;
  uint64_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x8_t v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x2_t ImpulseResponse;
  float32x4_t v147;
  float32x4_t v148;
  double v149;
  float32x4_t v150;
  double v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x2_t v154;
  int v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  int32x2_t *v162;
  int32x2_t *v163;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v172;
  uint64_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  float32x4_t v181;
  int8x16_t v183;
  uint64_t v185;
  char v186;
  float32x4_t v187;
  unsigned int v189;
  float32x2_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194[2];
  float32x4_t v195[2];
  int32x2_t v196;
  int32x2_t v197;
  int32x2_t v198;
  int32x2_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x2_t v202;
  int32x2_t v203;
  float32x4_t v204;
  int8x16_t v205;
  float32x4_t v206;
  int8x16_t v207;
  int32x2_t v208;
  int32x2_t v209;
  int32x2_t v210;
  float32x2_t v211;
  float32x4_t v212[2];
  _DWORD v213[6];
  uint64_t v214;

  v214 = *MEMORY[0x24BDAC8D0];
  v23 = vdup_lane_s32(a16, 0);
  v211 = (float32x2_t)v23;
  if (*((unsigned __int16 *)a6 + 8) == 0xFFFF)
    v24 = *(float *)(a6[1] + 68);
  else
    v24 = (*(float (**)(uint64_t))(*(_QWORD *)*a6 + 248))(*a6);
  if (*((unsigned __int16 *)a7 + 8) == 0xFFFF)
    v23.i32[0] = *(_DWORD *)(a7[1] + 68);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)*a7 + 248))(*a7);
  if (v24 > *(float *)v23.i32)
    *(float *)v23.i32 = v24;
  *(float *)v23.i32 = *(float *)v23.i32 / *(float *)&a9;
  v209 = vdup_lane_s32(a15, 0);
  v210 = vdup_lane_s32(v23, 0);
  v208 = vdup_lane_s32(a10, 0);
  if (*((unsigned __int16 *)a6 + 8) == 0xFFFF)
  {
    v25 = a6[1];
    v26.i64[0] = *(_QWORD *)v25;
    v26.i64[1] = *(unsigned int *)(v25 + 8);
    v27.i64[0] = *(_QWORD *)(v25 + 16);
    v27.i64[1] = *(unsigned int *)(v25 + 24);
    v206 = v26;
    v207 = v27;
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)*a6 + 232))(&v206);
  }
  if (*((unsigned __int16 *)a7 + 8) == 0xFFFF)
  {
    v28 = a7[1];
    v29.i64[0] = *(_QWORD *)v28;
    v29.i64[1] = *(unsigned int *)(v28 + 8);
    v30.i64[0] = *(_QWORD *)(v28 + 16);
    v30.i64[1] = *(unsigned int *)(v28 + 24);
    v204 = v29;
    v205 = v30;
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)*a7 + 232))(&v204);
  }
  v203 = vdup_lane_s32(*(int32x2_t *)&a9, 0);
  v31.i64[0] = *(_QWORD *)(a3 + 16);
  v31.i32[2] = *(_DWORD *)(a3 + 24);
  v202 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3F4CCCCDu), *(float *)&a9);
  v31.i64[1] = v31.u32[2];
  v32.i64[0] = *(_QWORD *)(a4 + 16);
  v32.i64[1] = *(unsigned int *)(a4 + 24);
  v200 = v32;
  v201 = v31;
  _X8 = a2 + 7556;
  __asm { PRFM            #0, [X8] }
  _X8 = a2 + 7684;
  __asm { PRFM            #0, [X8] }
  v40 = *(unsigned int *)(a2 + 7688);
  v199 = vdup_lane_s32(a11, 0);
  v198 = vdup_lane_s32(a13, 0);
  v197 = vdup_lane_s32(a12, 0);
  v196 = vdup_lane_s32(a14, 0);
  v168 = v40;
  if ((_DWORD)v40)
  {
    v41 = 0;
    _X12 = a5;
    v162 = a5;
    do
    {
      v43 = a2;
      v44 = a2 + 4 * v41;
      v45 = *(_DWORD *)(v44 + 7296);
      if (v45)
      {
        v185 = v41;
        v46 = *(_DWORD *)(v44 + 7424);
        v47 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * v46) << 6);
        v48 = *(_DWORD *)(v47 + 8);
        v49 = (const float *)(v47 + 60);
        v50 = vld1_dup_f32(v49);
        v51 = *(_QWORD *)v47;
        v52.i64[0] = *(_QWORD *)v47;
        v52.i64[1] = v48;
        v53 = (uint64_t)&_X12[6];
        v212[0] = v52;
        __asm
        {
          PRFM            #0, [X12,#0xB0]
          PRFM            #0, [X12,#0x130]
          PRFM            #0, [X12,#0x1B0]
        }
        *(float32x2_t *)v195[0].f32 = v50;
        _X12->i8[1] = v45;
        _X12->i8[0] = 3;
        v57 = vzip1_s32(v199, v198);
        _X12->i32[1] = a12.i32[0];
        _X12[5].i8[0] = 0;
        _X12[1] = v57;
        _X12[2] = (int32x2_t)v51;
        _X12[3].i32[0] = v48;
        _X12[3].i32[1] = a14.i32[0];
        while (v46 != 0xFFFF)
        {
          v189 = v46;
          v58 = (unsigned __int16 *)(v43 + 44 * v46);
          v59 = *((unsigned __int8 *)v58 + 5);
          if (*((_BYTE *)v58 + 5))
          {
            v60 = a1 + ((unint64_t)*v58 << 6);
            do
            {
              v61 = v53 + 112;
              physx::Dy::setupExtSolverContact((uint64_t)a6, (uint64_t)a7, (float32x2_t *)&v199, (float32x2_t *)&v198, (float32x2_t *)&v197, &v196, &v201, &v200, (int8x8_t *)v212, (float32x2_t *)&v203, &v202, (float32x2_t *)&v209, (float32x2_t *)&v210, (float32x2_t *)v195, (float32x2_t *)&v208, v60, v53, &v211, a17,
                &v206,
                &v204);
              v60 += 64;
              v53 = v61;
              --v59;
            }
            while (v59);
          }
          else
          {
            v61 = v53;
          }
          v43 = a2;
          v46 = *(unsigned __int16 *)(a2 + 44 * v189 + 2);
          v53 = v61;
        }
        _X12 = (int32x2_t *)v53;
        a5 = v162;
        v41 = v185;
      }
      ++v41;
    }
    while (v41 != v168);
    v62 = 0;
    v186 = 0;
    do
    {
      v63 = a2 + 4 * v62;
      v64 = *(_DWORD *)(v63 + 7296);
      if (v64)
      {
        v167 = v62;
        a5->i16[1] = (_WORD)_X12 - (_WORD)a5;
        v166 = a5->u8[1];
        v65 = a1 + ((unint64_t)*(unsigned __int16 *)(a2 + 44 * *(unsigned int *)(v63 + 7424)) << 6);
        v67 = *(float *)v65;
        v66 = *(float *)(v65 + 4);
        v68 = *(float *)(v65 + 8);
        v69 = *(_DWORD *)(v65 + 44);
        v70 = *(_BYTE *)(v65 + 48);
        _X12->i8[1] = v64;
        v71 = v64 * a8;
        if ((v70 & 1) != 0)
          v71 = 0;
        _X12->i8[2] = v71;
        _X12->i8[3] = 0;
        v72 = _X12;
        v73 = (4 * v64);
        _X22 = (uint64_t)&_X12[4] + (((_DWORD)v73 + 12) & 0xFFFFFFF0);
        bzero(&_X12[4], v73);
        __asm
        {
          PRFM            #0, [X22,#0x80]
          PRFM            #0, [X22,#0x100]
          PRFM            #0, [X22,#0x180]
        }
        _NF = fabsf(v67) < 0.70711;
        if (_NF)
          v80 = 0.0;
        else
          v80 = -v66;
        if (_NF)
          v81 = -v68;
        else
          v81 = v67;
        if (_NF)
          v82 = v66;
        else
          v82 = 0.0;
        if (*((unsigned __int16 *)a6 + 8) == 0xFFFF)
        {
          v85 = (float32x2_t *)a6[1];
          v83 = *v85;
          v84 = v85[1].f32[0];
        }
        else
        {
          v75.n128_f32[0] = -v68;
          (*(void (**)(float32x4_t *__return_ptr, __n128))(*(_QWORD *)*a6 + 232))(v212, v75);
          v83 = *(float32x2_t *)v212[0].f32;
          v84 = v212[0].f32[2];
        }
        if (*((unsigned __int16 *)a7 + 8) == 0xFFFF)
        {
          v88 = (float32x2_t *)a7[1];
          v86 = *v88;
          v87 = v88[1].f32[0];
        }
        else
        {
          v190 = v83;
          (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)*a7 + 232))(v212);
          v83 = v190;
          v86 = *(float32x2_t *)v212[0].f32;
          v87 = v212[0].f32[2];
        }
        v89 = vsub_f32(v83, v86);
        v90 = v84 - v87;
        v91 = vmlas_n_f32(vmuls_lane_f32(v66, v89, 1), v67, v89.f32[0]) + (float)(v68 * v90);
        v92 = v89.f32[0] - (float)(v67 * v91);
        v93 = v89.f32[1] - (float)(v66 * v91);
        v94 = v90 - (float)(v68 * v91);
        v95 = (float)((float)(v93 * v93) + (float)(v92 * v92)) + (float)(v94 * v94);
        v96 = v95 <= 0.00001;
        if (v95 <= 0.00001)
          v97 = v80;
        else
          v97 = v92;
        if (v96)
          v98 = v81;
        else
          v98 = v93;
        if (v96)
          v99 = v82;
        else
          v99 = v94;
        v100 = (float)((float)(v98 * v98) + (float)(v97 * v97)) + (float)(v99 * v99);
        v101 = 0.0;
        v102 = 0.0;
        v103 = 0.0;
        if (v100 > 0.0)
        {
          v104 = 1.0 / sqrtf(v100);
          v103 = v97 * v104;
          v102 = v98 * v104;
          v101 = v99 * v104;
        }
        *(float *)v213 = v103;
        *(float *)&v213[1] = v102;
        *(float *)&v213[2] = v101;
        *(float *)&v213[3] = (float)(v102 * v68) - (float)(v101 * v66);
        *(float *)&v213[4] = (float)(v101 * v67) - (float)(v103 * v68);
        *(float *)&v213[5] = (float)(v103 * v66) - (float)(v102 * v67);
        if ((v70 & 1) == 0)
        {
          v72->i32[1] = v69;
          v72[1].i32[0] = a11.i32[0];
          v72[1].i32[1] = a13.i32[0];
          v72[2].i32[0] = a12.i32[0];
          v72[2].i32[1] = a14.i32[0];
          v72->i8[0] = 12;
          v105 = *(_DWORD *)(v63 + 7424);
          if (v105 == 0xFFFF)
          {
            v186 = 1;
          }
          else
          {
            v163 = a5;
            v106 = 0;
            v107 = a2;
            do
            {
              v169 = v105;
              v108 = (unsigned __int16 *)(v107 + 44 * v105);
              v173 = *((unsigned __int8 *)v108 + 5);
              if (*((_BYTE *)v108 + 5))
              {
                v109 = 0;
                v172 = a1 + ((unint64_t)*v108 << 6);
                v110 = _X22;
                do
                {
                  if (a8)
                  {
                    v111 = 0;
                    v112 = v172 + (v109 << 6);
                    v113.i64[0] = *(_QWORD *)(v112 + 16);
                    v113.i64[1] = *(unsigned int *)(v112 + 24);
                    v114.i64[0] = *(_QWORD *)(v112 + 32);
                    v114.i64[1] = *(unsigned int *)(v112 + 40);
                    v181 = v114;
                    v183 = (int8x16_t)vsubq_f32(v113, v201);
                    v115 = (float32x2_t)vextq_s8(v207, v207, 8uLL).u64[0];
                    v179 = (float32x2_t)vextq_s8(v183, v183, 4uLL).u64[0];
                    v180 = (float32x2_t)vextq_s8(v183, v183, 8uLL).u64[0];
                    v116 = (int8x8_t)vmls_f32(vmul_f32(v179, *(float32x2_t *)v207.i8), (float32x2_t)vext_s8(*(int8x8_t *)v207.i8, (int8x8_t)v115, 4uLL), *(float32x2_t *)v183.i8);
                    *(int8x8_t *)v117.f32 = vext_s8(v116, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v183.i8, v115), *(float32x2_t *)v207.i8, v180), 4uLL);
                    v117.i64[1] = v116.u32[0];
                    v118 = (int8x16_t)vsubq_f32(v113, v200);
                    v174 = vaddq_f32(v206, v117);
                    v114.i64[0] = vextq_s8(v205, v205, 8uLL).u64[0];
                    v176 = (float32x2_t)vextq_s8(v118, v118, 4uLL).u64[0];
                    v177 = (float32x2_t)vextq_s8(v118, v118, 8uLL).u64[0];
                    v178 = *(float32x2_t *)v118.i8;
                    v119 = (int8x8_t)vmls_f32(vmul_f32(v176, *(float32x2_t *)v205.i8), (float32x2_t)vext_s8(*(int8x8_t *)v205.i8, *(int8x8_t *)v114.f32, 4uLL), *(float32x2_t *)v118.i8);
                    *(int8x8_t *)v120.f32 = vext_s8(v119, (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v114.f32), *(float32x2_t *)v205.i8, v177), 4uLL);
                    v120.i64[1] = v119.u32[0];
                    v175 = vaddq_f32(v204, v120);
                    do
                    {
                      v121 = (int8x8_t *)&v213[3 * v106];
                      v122 = (float32x2_t)*v121;
                      *(int8x8_t *)v123.f32 = *v121;
                      v123.i64[1] = v121[1].u32[0];
                      v124 = (float32x2_t)vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u64[0];
                      v125 = (float32x2_t)vext_s8(*v121, (int8x8_t)v124, 4uLL);
                      v126 = (int8x8_t)vmls_f32(vmul_f32(v180, (float32x2_t)*v121), *(float32x2_t *)v183.i8, v124);
                      v127 = vmls_f32(vmul_f32(*(float32x2_t *)v183.i8, v125), v179, (float32x2_t)*v121);
                      v128 = v127.u32[0];
                      if (*((__int16 *)a6 + 8) == -1)
                      {
                        v130 = a6[1];
                        v131 = *(float32x4_t *)(v130 + 44);
                        v132 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v131, 3);
                        v132.i32[1] = *(_DWORD *)(v130 + 60);
                        v132.i32[2] = *(_DWORD *)(v130 + 64);
                        v133 = vmulq_lane_f32(*(float32x4_t *)(v130 + 32), v127, 1);
                        v133.i32[3] = 0;
                        v134 = vmulq_n_f32(v131, *(float *)v126.i32);
                        v134.i32[3] = 0;
                        v135 = vmulq_n_f32(v132, *(float *)&v128);
                        v135.i32[3] = 0;
                        v129 = vaddq_f32(vaddq_f32(v133, v134), v135);
                      }
                      else
                      {
                        *(int8x8_t *)v129.f32 = vext_s8((int8x8_t)v127, v126, 4uLL);
                        v129.i64[1] = v128;
                      }
                      v136 = (int8x8_t)vmls_f32(vmul_f32(v178, v125), v176, v122);
                      *(int8x8_t *)v137.f32 = vext_s8(v136, (int8x8_t)vmls_f32(vmul_f32(v177, v122), v178, v124), 4uLL);
                      v137.i64[1] = v136.u32[0];
                      v194[0] = v123;
                      v194[1] = v129;
                      v138 = vnegq_f32(v137);
                      v187 = v129;
                      if (*((__int16 *)a7 + 8) == -1)
                      {
                        v139 = a7[1];
                        v140 = *(float32x4_t *)(v139 + 44);
                        v141 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v140, 3);
                        v141.i32[1] = *(_DWORD *)(v139 + 60);
                        v141.i32[2] = *(_DWORD *)(v139 + 64);
                        v142 = vmulq_n_f32(*(float32x4_t *)(v139 + 32), v138.f32[0]);
                        v142.i32[3] = 0;
                        v143 = vmulq_lane_f32(v140, *(float32x2_t *)v138.f32, 1);
                        v143.i32[3] = 0;
                        v144 = vmulq_laneq_f32(v141, v138, 2);
                        v144.i32[3] = 0;
                        v138 = vaddq_f32(vaddq_f32(v142, v143), v144);
                      }
                      else
                      {
                        v138.i32[3] = 0;
                      }
                      v145 = vnegq_f32(v123);
                      v145.i32[3] = 0;
                      v192 = v145;
                      v193 = v138;
                      v191 = v123;
                      ImpulseResponse = physx::Dy::getImpulseResponse(a6, v194, v212, (float32x2_t *)&v199, (float32x2_t *)&v197, a7, &v192, v195, *(double *)v138.i64, *(float32x2_t *)v145.f32, (float32x2_t *)&v198, &v196, a17);
                      v147 = v191;
                      v148 = vmulq_f32(v181, v191);
                      v148.i64[0] = vpaddq_f32(v148, v148).u64[0];
                      v149 = COERCE_DOUBLE(vpadd_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v148.f32));
                      if (*((__int16 *)a6 + 8) == -1)
                      {
                        v152 = vmulq_f32(v174, v191);
                        v152.i64[0] = vpaddq_f32(v152, v152).u64[0];
                        LODWORD(v149) = vadd_f32(*(float32x2_t *)&v149, vpadd_f32(*(float32x2_t *)v152.f32, *(float32x2_t *)v152.f32)).u32[0];
                      }
                      else
                      {
                        v150 = vmulq_f32(v175, v191);
                        v150.i64[0] = vpaddq_f32(v150, v150).u64[0];
                        v151 = COERCE_DOUBLE(vsub_f32(*(float32x2_t *)&v149, vpadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v150.f32)));
                        if (*((__int16 *)a7 + 8) == -1)
                          v149 = v151;
                      }
                      v153 = v187;
                      _X22 = v110 + 128;
                      v106 = 1 - v106;
                      v154 = vrecpe_f32(ImpulseResponse);
                      v155 = 4;
                      do
                      {
                        v154 = vmul_f32(v154, vrecps_f32(ImpulseResponse, v154));
                        --v155;
                      }
                      while (v155);
                      v153.i32[3] = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(ImpulseResponse), 0), *(int8x8_t *)&v154).i32[1];
                      *(float32x4_t *)(v110 + 16) = v153;
                      v156 = vnegq_f32(v193);
                      v156.i32[3] = 0;
                      *(float32x4_t *)(v110 + 32) = v156;
                      v147.i32[3] = 0;
                      *(float32x4_t *)v110 = v147;
                      *(_DWORD *)(v110 + 48) = LODWORD(v149);
                      v157 = v212[1];
                      *(float32x4_t *)(v110 + 64) = v212[0];
                      *(float32x4_t *)(v110 + 80) = v157;
                      v158 = v195[1];
                      *(float32x4_t *)(v110 + 96) = v195[0];
                      *(float32x4_t *)(v110 + 112) = v158;
                      ++v111;
                      v110 += 128;
                    }
                    while (v111 != a8);
                  }
                  else
                  {
                    _X22 = v110;
                  }
                  ++v109;
                  v110 = _X22;
                }
                while (v109 != v173);
              }
              v107 = a2;
              v105 = *(unsigned __int16 *)(a2 + 44 * v169 + 2);
            }
            while (v105 != 0xFFFF);
            v186 = 1;
            a5 = v163;
          }
        }
        a5 += 14 * v166 + 6;
        _X12 = (int32x2_t *)_X22;
        v62 = v167;
      }
      ++v62;
    }
    while (v62 != v168);
  }
  else
  {
    v186 = 0;
  }
  return v186 & 1;
}

float32_t physx::Dy::ArticulationHelper::createHardLimit(uint64_t a1, uint64_t a2, unsigned int a3, float32x4_t *a4, uint64_t a5, float a6, float a7, float32x4_t a8)
{
  unsigned int v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float32_t result;
  float32x4_t v21[2];
  float32x4_t v22[2];

  a4->i64[0] = 0;
  a4->i32[2] = 0;
  a4[1].i64[0] = 0;
  a4[1].i32[2] = 0;
  a4[2].i64[0] = *(_QWORD *)a5;
  a4[2].i32[2] = *(_DWORD *)(a5 + 8);
  a4[3].i64[0] = *(_QWORD *)a5;
  a4[3].i32[2] = *(_DWORD *)(a5 + 8);
  a4[5].i64[0] = 0x7F7FFFFF00000000;
  a4[5].i64[1] = 0;
  v12 = *(_DWORD *)(a2 + 40 * a3 + 32);
  a8.i64[0] = *(_QWORD *)a5;
  v13.i64[0] = vnegq_f32(a8).u64[0];
  a8.i64[1] = *(unsigned int *)(a5 + 8);
  v13.f32[2] = -a8.f32[2];
  v22[0] = 0u;
  v22[1] = a8;
  v13.i32[3] = 0;
  v21[0] = 0u;
  v21[1] = v13;
  physx::Dy::ArticulationHelper::getImpulseSelfResponse(a1, v12, v22, a4 + 6, a3, v21, a4 + 8);
  v17 = (float)((float)((float)(*(float *)(a5 + 4) * a4[7].f32[1]) + (float)(*(float *)a5 * a4[7].f32[0]))
              + (float)(*(float *)(a5 + 8) * a4[7].f32[2]))
      - (float)((float)((float)(*(float *)(a5 + 4) * a4[9].f32[1]) + (float)(*(float *)a5 * a4[9].f32[0]))
              + (float)(*(float *)(a5 + 8) * a4[9].f32[2]));
  if (v17 < 0.0)
    physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyArticulationHelper.cpp", 345, "Warning: articulation ill-conditioned or under severe stress, joint limit ignored", v14, v15, v16, v21[0].i8[0]);
  v18 = 1.0 / v17;
  v19 = 0.0;
  if (v17 <= 0.0)
    v18 = 0.0;
  a4->f32[3] = (float)-(float)(a6 * v18) * a7;
  if (a6 > 0.0)
    v19 = (float)-(float)(a6 * v18) * a7;
  a4[1].f32[3] = v19;
  result = -v18;
  a4[2].f32[3] = result;
  a4[3].i32[3] = 1065353216;
  return result;
}

BOOL physx::Cm::ConeLimitHelper::getLimit(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;

  v5 = a2[2];
  v4 = a2[3];
  v6 = a2[1];
  v7 = 1.8447e19;
  if (v5 >= 0.0)
    v8 = 1.8447e19;
  else
    v8 = -1.8447e19;
  if (v6 < 0.0)
    v7 = -1.8447e19;
  if (v4 == -1.0)
    v9 = v8;
  else
    v9 = v5 / (float)(v4 + 1.0);
  if (v4 == -1.0)
    v10 = v7;
  else
    v10 = v6 / (float)(v4 + 1.0);
  v11 = fabsf(v9);
  v12 = a1[2];
  v13 = fabsf(v10);
  v14 = *a1;
  v15 = a1[1];
  v16 = (float)((float)((float)(v11 + v12) / (float)(1.0 - (float)(v11 * v12))) / *a1)
      * (float)((float)((float)(v11 + v12) / (float)(1.0 - (float)(v11 * v12))) / *a1);
  v17 = (float)((float)(v13 + v12) / (float)(1.0 - (float)(v13 * v12))) / v15;
  v18 = v16 + (float)(v17 * v17);
  if (v18 > 1.0)
  {
    v19 = *a2;
    v20 = v4 + v4;
    v21 = (float)((float)(v4 * (float)(v4 + v4)) + -1.0) + (float)(v19 * (float)(v19 + v19));
    v22 = (float)((float)(v19 + v19) * v6) + (float)(v5 * v20);
    v23 = (float)((float)(v19 + v19) * v5) - (float)(v6 * v20);
    if (v14 >= v15)
    {
      if (v13 < 0.000001)
      {
        if (v9 <= 0.0)
          v25 = -v14;
        else
          v25 = *a1;
        v24 = 0.0;
        goto LABEL_31;
      }
    }
    else if (v11 < 0.000001)
    {
      if (v10 >= 0.0)
        v24 = -v15;
      else
        v24 = a1[1];
      v25 = 0.0;
LABEL_31:
      v41 = v25 / (float)(v14 * v14);
      v42 = (float)-v24 / (float)(v15 * v15);
      v43 = (float)(v24 * v24) + (float)(v25 * v25);
      v44 = 1.0 / (float)(v43 + 1.0);
      v45 = (float)((float)(1.0 - v43) + (float)(1.0 - v43)) * (float)(v44 * v44);
      v46 = v25 + v25;
      v47 = v24 + v24;
      v48 = (float)(v25 + v25) * v45;
      v49 = (float)(v24 + v24) * v45;
      v50 = (float)((float)(1.0 - v43) * v45) + -1.0;
      v51 = (float)(0.0 - (float)(v24 * v42)) + (float)(v25 * v41);
      v52 = v44 * (float)((float)(v44 * v44) * (float)((float)(3.0 - v43) * (float)(v51 * -4.0)));
      v53 = (float)((float)(1.0 - v43) * v52) - (float)((float)(v51 + v51) * v45);
      v54 = (float)((float)(v41 + v41) * v45) + (float)(v46 * v52);
      v55 = (float)(v47 * v52) - (float)((float)(v42 + v42) * v45);
      v56 = (float)(v48 * v55) - (float)(v49 * v54);
      v57 = (float)(v49 * v53) - (float)(v50 * v55);
      v58 = (float)(v50 * v54) - (float)(v48 * v53);
      v59 = 1.0 / sqrtf((float)((float)(v54 * v54) + (float)(v53 * v53)) + (float)(v55 * v55));
      v60 = v56 * v59;
      v61 = v57 * v59;
      v62 = v58 * v59;
      *a3 = v60;
      a3[1] = v61;
      a3[2] = v62;
      *a4 = (float)((float)(v22 * (float)((float)(v49 * v60) - (float)(v50 * v62)))
                  + (float)((float)((float)(v48 * v62) - (float)(v49 * v61)) * v21))
          + (float)((float)((float)(v50 * v61) - (float)(v48 * v60)) * v23);
      return v18 > 1.0;
    }
    v26 = -v10;
    v27 = v14 * v14;
    v28 = v15 * v15;
    v29 = v11 * v14;
    v30 = v13 * v15;
    v31 = v29 - (float)(v14 * v14);
    if (v31 <= (float)(v30 - (float)(v15 * v15)))
      v31 = v30 - (float)(v15 * v15);
    v32 = 20;
    while (1)
    {
      v33 = 1.0 / (float)(v27 + v31);
      v34 = 1.0 / (float)(v28 + v31);
      v35 = (float)(v29 * v33) * (float)(v29 * v33);
      v36 = (float)(v30 * v34) * (float)(v30 * v34);
      v37 = (float)(v35 + v36) + -1.0;
      if (v37 < 0.0001)
        break;
      v31 = v31
          + (float)(v37
                  / (float)((float)((float)((float)(v33 * v35) + 0.0) + (float)(v36 * v34))
                          + (float)((float)((float)(v33 * v35) + 0.0) + (float)(v36 * v34))));
      if (!--v32)
      {
        v38 = (float)(v9 * v27) * v33;
        v39 = (float)(v28 * v26) * v34;
        v40 = 1.0
            / sqrtf((float)((float)(v38 / v14) * (float)(v38 / v14)) + (float)((float)(v39 / v15) * (float)(v39 / v15)));
        v25 = v38 * v40;
        v24 = v39 * v40;
        goto LABEL_31;
      }
    }
    v25 = (float)(v9 * v27) * v33;
    v24 = (float)(v28 * v26) * v34;
    goto LABEL_31;
  }
  return v18 > 1.0;
}

uint64_t physx::Dy::ArticulationV::addBody(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  _OWORD v4[2];

  v1 = this;
  memset(v4, 0, sizeof(v4));
  v2 = *(unsigned int *)(this + 152);
  if ((*(_DWORD *)(this + 156) & 0x7FFFFFFFu) <= v2)
  {
    this = physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::growAndPushBack(this + 144, v4);
  }
  else
  {
    v3 = (_OWORD *)(*(_QWORD *)(this + 144) + 32 * v2);
    *v3 = 0uLL;
    v3[1] = 0uLL;
    *(_DWORD *)(this + 152) = v2 + 1;
  }
  *(_BYTE *)(v1 + 160) = 1;
  return this;
}

uint64_t physx::Dy::ArticulationV::removeBody(uint64_t this)
{
  *(_BYTE *)(this + 160) = 1;
  return this;
}

uint64_t physx::Dy::ArticulationV::getDofs(physx::Dy::ArticulationV *this)
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::getDof(physx::Dy::ArticulationV *this)
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::applyCache()
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::getLambda()
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::storeStaticConstraint()
{
  return 0;
}

uint64_t physx::Dy::ArticulationV::willStoreStaticConstraint(physx::Dy::ArticulationV *this)
{
  return 0;
}

void physx::Dy::Articulation::onUpdateSolverDesc(void **this)
{
  bzero(this[25], (48 * *((_DWORD *)this + 52)));
  bzero(this[23], (48 * *((_DWORD *)this + 52)));
}

uint64_t physx::Dy::Articulation::getCurrentTransform(physx::Dy::Articulation *this, unsigned int a2)
{
  return *((_QWORD *)this + 29) + 28 * a2;
}

uint64_t physx::Dy::Articulation::getDeltaQ(physx::Dy::Articulation *this, unsigned int a2)
{
  return *((_QWORD *)this + 31) + 16 * a2;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::growAndPushBack(uint64_t a1, _OWORD *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;

  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>::getName() [T = physx::Cm::SpatialVector]";
    else
      v7 = "<allocation names disabled>";
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24) + 16))(v6 + 24, 32 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v10 = (_OWORD *)(v8 + 32 * v9);
  v11 = *(_OWORD **)a1;
  if ((_DWORD)v9)
  {
    v12 = *(_OWORD **)a1;
    v13 = (_OWORD *)v8;
    do
    {
      *v13 = *v12;
      v13[1] = v12[1];
      v13 += 2;
      v12 += 2;
    }
    while (v13 < v10);
  }
  *v10 = *a2;
  v10[1] = a2[1];
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    v9 = *(unsigned int *)(a1 + 8);
  }
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *(_DWORD *)(a1 + 12) = v5;
  return v8 + 32 * v9;
}

uint64_t physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _BYTE *v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  char v10;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<char>::getName() [T = char]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                             + 16))(v4 + 24, a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_BYTE *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(char **)v3;
  if ((_DWORD)v7)
  {
    v9 = v6;
    do
    {
      v10 = *v8++;
      *v9++ = v10;
      --v7;
    }
    while (v7);
    v8 = *(char **)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::shdfnd::aos::Mat33V,physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>>::recreate(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  __int128 *v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;

  v2 = a2;
  v4 = 48 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::shdfnd::aos::Mat33V>::getName() [T = physx::shdfnd::aos::Mat33V]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(_DWORD *)(a1 + 8);
  v10 = *(__int128 **)a1;
  if (v9)
  {
    v11 = result + 48 * v9;
    v12 = (_OWORD *)result;
    do
    {
      v13 = *v10;
      v14 = v10[2];
      v12[1] = v10[1];
      v12[2] = v14;
      *v12 = v13;
      v12 += 3;
      v10 += 3;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(__int128 **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxTransform>::getName() [T = physx::PxTransform]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 28 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(_QWORD *)v3;
  if (v7)
  {
    v9 = v6 + 28 * v7;
    v10 = *(_QWORD *)v3;
    v11 = v6;
    do
    {
      *(_OWORD *)v11 = *(_OWORD *)v10;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
      *(_DWORD *)(v11 + 24) = *(_DWORD *)(v10 + 24);
      v11 += 28;
      v10 += 28;
    }
    while (v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxQuat>::getName() [T = physx::PxQuat]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 16 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_OWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(__int128 **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = *(__int128 **)v3;
    v11 = v6;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVectorV,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>>::recreate(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;

  v4 = 32 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorV>::getName() [T = physx::Cm::SpatialVectorV]";
  else
    v6 = "<allocation names disabled>";
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(_OWORD **)a1;
  if ((_DWORD)v9)
  {
    v11 = result + 32 * v9;
    v12 = (_OWORD *)result;
    do
    {
      *v12 = *v10;
      v12[1] = v10[1];
      v12 += 2;
      v10 += 2;
    }
    while ((unint64_t)v12 < v11);
    v10 = *(_OWORD **)a1;
  }
  if ((*(_DWORD *)(a1 + 12) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 12) = a2;
  return result;
}

void physx::Dy::PxvRegisterArticulationsReducedCoordinate(physx::Dy *this)
{
  physx::Dy::ArticulationPImpl::sComputeUnconstrainedVelocities = (uint64_t)physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocities;
  physx::Dy::ArticulationPImpl::sUpdateBodies = (uint64_t)physx::Dy::FeatherstoneArticulation::updateBodies;
  physx::Dy::ArticulationPImpl::sUpdateBodiesTGS[0] = (uint64_t)physx::Dy::FeatherstoneArticulation::updateBodiesTGS;
  physx::Dy::ArticulationPImpl::sSaveVelocity[0] = (uint64_t)physx::Dy::FeatherstoneArticulation::saveVelocity;
  physx::Dy::ArticulationPImpl::sSaveVelocityTGS = (uint64_t)physx::Dy::FeatherstoneArticulation::saveVelocityTGS;
  physx::Dy::ArticulationPImpl::sUpdateDeltaMotion[0] = (uint64_t)physx::Dy::FeatherstoneArticulation::recordDeltaMotion;
  physx::Dy::ArticulationPImpl::sDeltaMotionToMotionVel = (uint64_t)physx::Dy::FeatherstoneArticulation::deltaMotionToMotionVelocity;
  physx::Dy::ArticulationPImpl::sComputeUnconstrainedVelocitiesTGS = (uint64_t)physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesTGS;
  physx::Dy::ArticulationPImpl::sSetupInternalConstraintsTGS = (uint64_t)physx::Dy::FeatherstoneArticulation::setupSolverConstraintsTGS;
  qword_255826080 = (uint64_t)physx::Dy::solveExtContactBlock;
  *(_QWORD *)algn_255826088 = physx::Dy::solveExt1DBlock;
  qword_2558260D0 = (uint64_t)physx::Dy::solveExtContactBlockWriteBack;
  *(_QWORD *)algn_2558260D8 = physx::Dy::solveExt1DBlockWriteBack;
  qword_255826120 = (uint64_t)physx::Dy::solveExtContactConcludeBlock;
  *(_QWORD *)algn_255826128 = physx::Dy::solveExt1DConcludeBlock;
  qword_255826170 = (uint64_t)physx::Dy::solveExtContactCoulombBlock;
  *(_QWORD *)algn_255826178 = physx::Dy::solveExt1DBlock;
  qword_2558261E8 = (uint64_t)physx::Dy::solveExtContactCoulombBlockWriteBack;
  unk_2558261F0 = physx::Dy::solveExt1DBlockWriteBack;
  qword_255826260 = (uint64_t)physx::Dy::solveExtContactCoulombConcludeBlock;
  *(_QWORD *)algn_255826268 = physx::Dy::solveExt1DConcludeBlock;
  qword_2558261B8 = (uint64_t)physx::Dy::solveExtFrictionBlock;
  qword_255826230 = (uint64_t)physx::Dy::solveExtFrictionBlockWriteBack;
  qword_2558262A8 = (uint64_t)physx::Dy::solveExtFrictionBlock;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocities(uint64_t *a1, float a2, uint64_t a3, uint64_t a4, _DWORD *a5, float32x2_t *a6, uint64_t a7, float *a8, float32x2_t *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 v16;
  float32x4_t v17;
  float32x4_t v18;
  double v19;
  double v20;
  float32x4_t v21;
  float32x4_t v22;

  v11 = *a1;
  v12 = *a1 + 176;
  *(float *)(v11 + 648) = a2;
  physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesInternal(v11, a6, a8, a9);
  v13 = **(_BYTE **)(v11 + 664) & 1;
  v14 = *(uint64_t **)(v11 + 608);
  v15 = *(unsigned int *)(v11 + 616);
  *a5 = 0;
  v16.n128_u32[0] = *(_DWORD *)(v11 + 648);
  v17.i32[0] = 1.0;
  v18.i32[0] = v16.n128_u32[0];
  physx::Dy::FeatherstoneArticulation::setupInternalConstraints(v11, v14, v15, v13, v12, (uint64_t)a8, 0, v16, v18, 1.0 / v16.n128_f32[0], v17, v19, v20, v21, v22);
  return 0;
}

void physx::Dy::FeatherstoneArticulation::updateBodies(float32x2_t ***a1, __n128 a2, float32x4_t a3, double a4)
{
  physx::Dy::FeatherstoneArticulation::updateBodies(*a1, (physx::Dy::FeatherstoneArticulation *)1, a2, a3, a4);
}

void physx::Dy::FeatherstoneArticulation::updateBodiesTGS(float32x2_t ***a1, __n128 a2, float32x4_t a3, double a4)
{
  physx::Dy::FeatherstoneArticulation::updateBodies(*a1, 0, a2, a3, a4);
}

uint64_t physx::Dy::FeatherstoneArticulation::saveVelocity(uint64_t *a1, float32x2_t *a2, double a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;

  v6 = *a1;
  if (*(_BYTE *)(*a1 + 685))
    physx::Dy::PxcFsFlushVelocity(*a1, a2, a3, a4, a5);
  memcpy(*(void **)(v6 + 304), *(const void **)(v6 + 320), (32 * *(_DWORD *)(v6 + 616)));
  result = (uint64_t)memcpy(*(void **)(v6 + 288), *(const void **)(v6 + 240), (4 * *(_DWORD *)(v6 + 652)));
  v8 = *a1;
  v9 = *(unsigned int *)(v8 + 880);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; ++i)
    {
      v11 = *(_QWORD *)(v8 + 872);
      v12 = *(unsigned __int8 **)(v11 + 48 * i + 32);
      v13 = *v12;
      if (v13 == 3)
      {
        result = physx::Dy::concludeContact(v11 + 48 * i);
        v9 = *(unsigned int *)(v8 + 880);
      }
      else
      {
        v14 = v12[1];
        if (v12[1])
        {
          if (v13 == 4)
            v15 = 160;
          else
            v15 = 96;
          v16 = v12 + 76;
          do
          {
            *(v16 - 4) = *v16;
            v16 = (_DWORD *)((char *)v16 + v15);
            --v14;
          }
          while (v14);
        }
      }
    }
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::recordDeltaMotion(uint64_t *a1, float32x2_t *a2, double a3, double _D1, double a5, float a6, float a7, float a8)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  float v16;
  float32x2_t *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float32x2_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float cosval;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  __float2 v35;
  float32_t v36;
  float32_t v37;
  float32_t v38;
  float *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  float32x2_t v48;
  float32x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  float *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  uint64_t v64;
  float *v66;
  float *v67;
  float *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  float v91;
  float v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  __float2 v100;
  float v115;
  float v116;
  float v117;
  uint64_t v118;
  uint64_t v119;
  float *v120;
  float v121;
  float v123;
  float v124;
  float v125;
  float v126;
  __float2 v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v143;
  uint64_t v147;
  float *v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  uint64_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  __float2 v161;
  float *v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  uint64_t v170;
  float *v171;
  float v172;
  float v173;
  float v174;
  float *v175;
  float v176;
  float v177;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float *v201;
  float v202;
  float v203;
  float v204;
  uint64_t v205;
  float *v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float *v214;
  int v215;
  unsigned int v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float *v225;
  float32_t v226;
  float32_t v227;
  float32_t v228;
  float32x2_t *v229;
  float v230;
  float32x2_t *v231;
  uint64_t v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  float32x2_t *v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  float32x4_t v247;
  float32x4_t v248;
  float v249;
  uint64_t v250;
  uint64_t v251;
  float v252;
  __int128 v253;
  float v254[4];
  float32x4_t v255;
  float v256[6];

  v8 = *(float *)&a3;
  v9 = *a1;
  v10 = *(unsigned int *)(*a1 + 616);
  v252 = *(float *)&a3;
  v245 = v10;
  if (*(_BYTE *)(*a1 + 685))
  {
    physx::Dy::PxcFsFlushVelocity(v9, a2, a3, _D1, a5);
    v10 = v245;
    v8 = v252;
  }
  v11 = *(_QWORD *)(v9 + 432);
  v12 = *(float32x2_t **)(v9 + 320);
  v13 = *(_QWORD *)(v9 + 256);
  result = *(_QWORD *)(v9 + 224);
  v15 = *(_QWORD *)(v9 + 240);
  v16 = *(float *)(v9 + 728) + v8;
  *(float *)(v9 + 728) = v16;
  *(float *)(v9 + 648) = v8;
  v240 = (_QWORD *)v9;
  v241 = result;
  v243 = v12;
  v244 = v11;
  v242 = v13;
  if ((**(_BYTE **)(v9 + 664) & 1) == 0)
  {
    v17 = *(float32x2_t **)(v9 + 696);
    v19 = v17->f32[0];
    v18 = v17->f32[1];
    v20 = v17[1].f32[0];
    v21 = v17[1].f32[1];
    v22 = vadd_f32(v17[2], vmul_n_f32(v12[2], v8));
    v23 = v17[3].f32[0] + (float)(v12[3].f32[0] * v8);
    v24 = v12->f32[0] * v8;
    v25 = v12->f32[1] * v8;
    v26 = v12[1].f32[0] * v8;
    v27 = (float)((float)(v25 * v25) + (float)(v24 * v24)) + (float)(v26 * v26);
    if (v27 >= 1.0e-24)
    {
      v32 = sqrtf(v27);
      v33 = v24 * (float)(1.0 / v32);
      v34 = v25 * (float)(1.0 / v32);
      v249 = v26 * (float)(1.0 / v32);
      v35 = __sincosf_stret(v32 * 0.5);
      cosval = v35.__cosval;
      result = v241;
      v13 = v242;
      v12 = v243;
      v11 = v244;
      v10 = v245;
      v8 = v252;
      v29 = v35.__sinval * v33;
      v30 = v35.__sinval * v34;
      v31 = v35.__sinval * v249;
    }
    else
    {
      cosval = 1.0;
      v29 = 0.0;
      v30 = 0.0;
      v31 = 0.0;
    }
    v36 = (float)((float)((float)(v21 * v29) + (float)(cosval * v19)) + (float)(v30 * v20)) - (float)(v18 * v31);
    a8 = (float)((float)((float)(v21 * v30) + (float)(cosval * v18)) + (float)(v31 * v19)) - (float)(v20 * v29);
    v37 = (float)((float)((float)(v21 * v31) + (float)(cosval * v20)) + (float)(v29 * v18)) - (float)(v19 * v30);
    v38 = (float)((float)((float)(cosval * v21) - (float)(v29 * v19)) - (float)(v30 * v18)) - (float)(v31 * v20);
    v17->f32[0] = v36;
    v17->f32[1] = a8;
    v17[1].f32[0] = v37;
    v17[1].f32[1] = v38;
    v17[2] = v22;
    v17[3].f32[0] = v23;
    v9 = (uint64_t)v240;
    v39 = (float *)v240[56];
    v40 = v39[1];
    v41 = v39[2];
    v42 = v39[3];
    v43 = (float)((float)((float)(v36 * v42) - (float)(v38 * *v39)) - (float)(a8 * v41)) + (float)(v40 * v37);
    v44 = (float)((float)((float)(a8 * v42) - (float)(v38 * v40)) - (float)(v37 * *v39)) + (float)(v41 * v36);
    v45 = (float)((float)((float)(v37 * v42) - (float)(v38 * v41)) - (float)(v36 * v40)) + (float)(*v39 * a8);
    a7 = v36 * *v39;
    v46 = (float)((float)(a7 + (float)(v38 * v42)) + (float)(a8 * v40)) + (float)(v37 * v41);
    if (v46 < 0.0)
    {
      v43 = -v43;
      v44 = -v44;
      v45 = -v45;
      v46 = -v46;
    }
    v47 = (float *)v240[89];
    *v47 = v43;
    v47[1] = v44;
    v47[2] = v45;
    v47[3] = v46;
    *(float *)&_D1 = v12[3].f32[0] * v8;
    v48 = vadd_f32(vmul_n_f32(*v12, v8), *(float32x2_t *)v11);
    a6 = *(float *)(v11 + 8);
    *(float *)(v11 + 8) = (float)(v12[1].f32[0] * v8) + a6;
    v49 = vmul_n_f32(v12[2], v8);
    *(float32x2_t *)v11 = v48;
    a5 = *(double *)(v11 + 16);
    *(float32x2_t *)(v11 + 16) = vadd_f32(v49, *(float32x2_t *)&a5);
    v16 = *(float *)&_D1 + *(float *)(v11 + 24);
    *(float *)(v11 + 24) = v16;
  }
  if (v10 >= 2)
  {
    v50 = *(_QWORD *)(v9 + 696);
    v51 = 1;
    v52 = 84;
    v53 = -0.5;
    do
    {
      v54 = *(_QWORD *)(v9 + 632);
      v55 = *(_QWORD *)(v9 + 608) + 40 * v51;
      v58 = *(_DWORD *)(v55 + 32);
      v56 = (unsigned int *)(v55 + 32);
      v57 = v58;
      v59 = (float *)(v50 + 28 * v58);
      v60 = *((_QWORD *)v56 - 1);
      v61 = v54 + 80 * v51;
      v62 = *(_QWORD *)(v9 + 512);
      v63 = (float *)(v62 + 76 * v51);
      v64 = *(unsigned int *)(v61 + 72);
      _Q21 = *(float32x4_t *)(*(_QWORD *)(v9 + 592) + 16 * v51);
      v66 = (float *)(result + 4 * v64);
      v67 = (float *)(v15 + 4 * v64);
      v68 = (float *)(v13 + 4 * v64);
      v69 = *(float *)(v60 + 44);
      v70 = *(float *)(v60 + 48);
      v71 = *(float *)(v60 + 52);
      v72 = *(float *)(v60 + 16);
      v73 = *(float *)(v60 + 20);
      v74 = *(float *)(v60 + 24);
      switch(*(_BYTE *)(v60 + 270))
      {
        case 0:
          v75 = *v68 + (float)((float)(*v66 + *v67) * v8);
          v76 = *(unsigned __int8 *)(v60 + 252);
          if (*(_BYTE *)(v60 + v76 + 258) == 1)
          {
            v77 = v60 + 8 * v76;
            v78 = *(float *)(v77 + 56);
            if (v75 >= v78)
              v78 = *v68 + (float)((float)(*v66 + *v67) * v8);
            if (v78 > *(float *)(v77 + 60))
              v75 = *(float *)(v77 + 60);
            else
              v75 = v78;
          }
          *v68 = v75;
          *v66 = *v67 + *v66;
          *v67 = 0.0;
          _S4 = v72 + v72;
          _S6 = v74 + v74;
          LODWORD(_D1) = _Q21.i32[3];
          __asm { FMLA            S7, S1, V21.S[3] }
          v16 = _Q21.f32[1];
          LODWORD(a5) = _Q21.i32[2];
          __asm
          {
            FMLA            S16, S6, V21.S[2]
            FMLA            S17, S6, V21.S[1]
            FMLA            S18, S4, V21.S[2]
            FMLA            S18, S16, V21.S[1]
            FMLA            S4, S16, V21.S[2]
          }
          v91 = vmlas_n_f32(vmuls_lane_f32(_S17, _Q21, 3) + (float)((float)(v72 + v72) * _S7), _S16, _Q21.f32[0]) - v69;
          v92 = _S4 - v71;
          v93 = (float *)(v62 + 76 * v51);
          v94 = v75 * v93[4];
          v95 = v75 * v93[5];
          a6 = v91 + (float)(v75 * v93[3]);
          a7 = (float)(_S18 - v70) + v94;
          a8 = v92 + v95;
          break;
        case 1:
          v96 = *v68 + (float)((float)(*v66 + *v67) * v8);
          v250 = *(_QWORD *)(v9 + 632);
          v246 = *(_OWORD *)(*(_QWORD *)(v9 + 592) + 16 * v51);
          v97 = v52;
          if (*(_BYTE *)(v60 + 329))
          {
            v98 = v60 + 8 * *(unsigned __int8 *)(v60 + 252);
            if (v96 < *(float *)(v98 + 56))
              v96 = *(float *)(v98 + 56);
            if (v96 > *(float *)(v98 + 60))
              v96 = *(float *)(v98 + 60);
          }
          *v68 = v96;
          *v66 = *v67 + *v66;
          *v67 = 0.0;
          v100 = __sincosf_stret(v96 * v53);
          _S1 = v100.__cosval;
          _S2 = v100.__sinval * *v63;
          _S3 = v100.__sinval * v63[1];
          _S0 = v100.__sinval * v63[2];
          if (v100.__cosval < 0.0)
          {
            _S2 = -_S2;
            _S3 = -_S3;
            _S0 = -_S0;
            _S1 = -v100.__cosval;
          }
          _Q16 = v246;
          __asm
          {
            FMLA            S4, S3, V16.S[2]
            FMLS            S4, S0, V16.S[1]
            FMLA            S5, S1, V16.S[1]
            FMLS            S5, S2, V16.S[2]
            FMLA            S6, S1, V16.S[2]
            FMLA            S6, S2, V16.S[1]
            FMLS            S6, S3, V16.S[0]
            FMLA            S7, S1, V16.S[3]
            FMLS            S7, S3, V16.S[1]
            FMLS            S7, S0, V16.S[2]
          }
          v115 = sqrtf((float)((float)((float)(_S5 * _S5) + (float)(_S4 * _S4)) + (float)(_S6 * _S6)) + (float)(_S7 * _S7));
          _Q21.f32[0] = _S4 / v115;
          v16 = _S5 / v115;
          *(float *)&a5 = _S6 / v115;
          *(float *)&_D1 = _S7 / v115;
          v116 = v53 + (float)(*(float *)&_D1 * *(float *)&_D1);
          v117 = (float)((float)((float)(v73 + v73) * v16) + (float)(_Q21.f32[0] * (float)(v72 + v72)))
               + (float)(*(float *)&a5 * (float)(v74 + v74));
          a6 = (float)((float)((float)(*(float *)&_D1
                                     * (float)((float)(v16 * (float)(v74 + v74))
                                             - (float)(*(float *)&a5 * (float)(v73 + v73))))
                             + (float)((float)(v72 + v72) * v116))
                     + (float)(_Q21.f32[0] * v117))
             - v69;
          a7 = (float)((float)((float)(*(float *)&_D1
                                     * (float)((float)(*(float *)&a5 * (float)(v72 + v72))
                                             - (float)(_Q21.f32[0] * (float)(v74 + v74))))
                             + (float)((float)(v73 + v73) * v116))
                     + (float)(v16 * v117))
             - v70;
          a8 = (float)((float)((float)(*(float *)&_D1
                                     * (float)((float)(_Q21.f32[0] * (float)(v73 + v73))
                                             - (float)(v16 * (float)(v72 + v72))))
                             + (float)((float)(v74 + v74) * v116))
                     + (float)(*(float *)&a5 * v117))
             - v71;
          v8 = v252;
          v11 = v244;
          v10 = v245;
          v13 = v242;
          v12 = v243;
          result = v241;
          v52 = v97;
          v54 = v250;
          break;
        case 2:
          v118 = *(unsigned __int8 *)(v61 + 76);
          v251 = v54;
          if (v118 > 2)
          {
            v147 = v240[40];
            v148 = (float *)(v147 + 32 * v51);
            v149 = v148[2];
            v150 = *v148 * v8;
            v151 = v148[1] * v8;
            v152 = v149 * v8;
            v153 = (float)((float)(v151 * v151) + (float)(v150 * v150)) + (float)(v152 * v152);
            v239 = v240[66];
            v236 = v148[1];
            v238 = *v148;
            v154 = v52;
            if (v153 >= 1.0e-24)
            {
              v159 = sqrtf(v153);
              v233 = v150 * (float)(1.0 / v159);
              v234 = v151 * (float)(1.0 / v159);
              v160 = v152 * (float)(1.0 / v159);
              v248 = _Q21;
              v161 = __sincosf_stret(v159 * 0.5);
              v155 = v161.__cosval;
              _Q21 = v248;
              v156 = v161.__sinval * v233;
              v157 = v161.__sinval * v234;
              v158 = v161.__sinval * v160;
              v53 = -0.5;
            }
            else
            {
              v155 = 1.0;
              v156 = 0.0;
              v157 = 0.0;
              v158 = 0.0;
            }
            v162 = (float *)(v50 + 28 * v51);
            v164 = v162[2];
            v163 = v162[3];
            v165 = v162[1];
            v166 = (float)((float)((float)(v156 * v163) + (float)(v155 * *v162)) + (float)(v157 * v164))
                 - (float)(v165 * v158);
            v167 = (float)((float)((float)(v157 * v163) + (float)(v155 * v165)) + (float)(v158 * *v162))
                 - (float)(v164 * v156);
            v168 = (float)((float)((float)(v158 * v163) + (float)(v155 * v164)) + (float)(v156 * v165))
                 - (float)(*v162 * v157);
            v169 = (float)((float)(v155 * v163) - (float)(v156 * *v162)) - (float)(v157 * v165);
            v255 = _Q21;
            v254[0] = v166;
            v254[1] = v167;
            v254[2] = v168;
            v254[3] = v169 - (float)(v158 * v164);
            v253 = *(_OWORD *)v59;
            physx::Dy::computeSphericalJointPositions(v256, v255.f32, v254, (float *)&v253, (uint64_t)v68, (uint64_t)v63);
            v170 = 0;
            _Q21.f32[0] = v256[0];
            v16 = v256[1];
            *(float *)&a5 = v256[2];
            *(float *)&_D1 = v256[3];
            v171 = (float *)(v147 + 32 * *v56);
            v172 = v238 - *v171;
            v173 = v236 - v171[1];
            v174 = v149 - v171[2];
            v52 = v154;
            v175 = (float *)(v239 + v154);
            do
            {
              v176 = (float)(v173 * *(v175 - 1)) + (float)(*(v175 - 2) * v172);
              v177 = *v175;
              v175 += 6;
              v66[v170++] = v176 + (float)(v177 * v174);
            }
            while (v170 != 3);
            v8 = v252;
            v9 = (uint64_t)v240;
            result = v241;
            v11 = v244;
            v10 = v245;
            v13 = v242;
            v12 = v243;
            v54 = v251;
          }
          else
          {
            v235 = *(float *)(v60 + 44);
            v237 = *(float *)(v60 + 48);
            v247 = _Q21;
            if (*(_BYTE *)(v61 + 76))
            {
              v119 = v52;
              v120 = (float *)(v62 + v52);
              v121 = 0.0;
              _S10 = 1.0;
              v123 = 0.0;
              v124 = 0.0;
              do
              {
                v125 = *v66 + *v67;
                *v66++ = v125;
                *v68 = *v68 + (float)(v125 * v8);
                *v67++ = 0.0;
                v126 = *v68++;
                v127 = __sincosf_stret(v126 * -0.5);
                v8 = v252;
                v128 = *(v120 - 2) * v127.__sinval;
                v129 = v127.__sinval * *(v120 - 1);
                v130 = *v120;
                v120 += 6;
                v131 = v127.__sinval * v130;
                v132 = -v128;
                if (v127.__cosval < 0.0)
                  v129 = -v129;
                else
                  v132 = v128;
                if (v127.__cosval < 0.0)
                  v133 = -v131;
                else
                  v133 = v131;
                if (v127.__cosval < 0.0)
                  v134 = -v127.__cosval;
                else
                  v134 = v127.__cosval;
                _S0 = (float)((float)((float)(v124 * v134) + (float)(_S10 * v132)) + (float)(v123 * v133))
                    - (float)(v129 * v121);
                _S1 = (float)((float)((float)(v123 * v134) + (float)(_S10 * v129)) + (float)(v121 * v132))
                    - (float)(v133 * v124);
                _S2 = (float)((float)((float)(v121 * v134) + (float)(_S10 * v133)) + (float)(v124 * v129))
                    - (float)(v132 * v123);
                _S10 = (float)((float)((float)(_S10 * v134) - (float)(v124 * v132)) - (float)(v123 * v129))
                     - (float)(v121 * v133);
                v121 = _S2;
                v123 = _S1;
                v124 = _S0;
                --v118;
              }
              while (v118);
            }
            else
            {
              v119 = v52;
              _S10 = 1.0;
              _S0 = 0.0;
              _S1 = 0.0;
              _S2 = 0.0;
            }
            _Q7 = v247;
            __asm
            {
              FMLA            S3, S1, V7.S[2]
              FMLS            S3, S2, V7.S[1]
              FMLA            S4, S10, V7.S[1]
              FMLS            S4, S0, V7.S[2]
              FMLA            S5, S10, V7.S[2]
              FMLA            S5, S0, V7.S[1]
              FMLS            S5, S1, V7.S[0]
              FMLA            S6, S10, V7.S[3]
              FMLS            S6, S1, V7.S[1]
              FMLS            S6, S2, V7.S[2]
            }
            v189 = sqrtf((float)((float)((float)(_S4 * _S4) + (float)(_S3 * _S3)) + (float)(_S5 * _S5)) + (float)(_S6 * _S6));
            _Q21.f32[0] = _S3 / v189;
            v16 = _S4 / v189;
            *(float *)&a5 = _S5 / v189;
            *(float *)&_D1 = _S6 / v189;
            v9 = (uint64_t)v240;
            result = v241;
            v11 = v244;
            v10 = v245;
            v13 = v242;
            v12 = v243;
            v52 = v119;
            v53 = -0.5;
            v54 = v251;
            v70 = v237;
            v69 = v235;
          }
          v190 = v53 + (float)(*(float *)&_D1 * *(float *)&_D1);
          v191 = (float)((float)((float)(v73 + v73) * v16) + (float)(_Q21.f32[0] * (float)(v72 + v72)))
               + (float)(*(float *)&a5 * (float)(v74 + v74));
          v143 = (float)((float)(*(float *)&_D1
                               * (float)((float)(v16 * (float)(v74 + v74)) - (float)(*(float *)&a5 * (float)(v73 + v73))))
                       + (float)((float)(v72 + v72) * v190))
               + (float)(_Q21.f32[0] * v191);
          _S17 = (float)((float)((float)((float)(*(float *)&a5 * (float)(v72 + v72))
                                       - (float)(_Q21.f32[0] * (float)(v74 + v74)))
                               * *(float *)&_D1)
                       + (float)((float)(v73 + v73) * v190))
               + (float)(v16 * v191);
          _S5 = (float)((float)((float)((float)(_Q21.f32[0] * (float)(v73 + v73)) - (float)(v16 * (float)(v72 + v72)))
                              * *(float *)&_D1)
                      + (float)((float)(v74 + v74) * v190))
              + (float)(*(float *)&a5 * v191);
          goto LABEL_52;
        case 3:
          _S3 = v72 + v72;
          _S5 = v74 + v74;
          LODWORD(_D1) = HIDWORD(*(_OWORD *)(*(_QWORD *)(v9 + 592) + 16 * v51));
          __asm { FMLA            S6, S1, V21.S[3] }
          LODWORD(v16) = HIDWORD(*(_QWORD *)(*(_QWORD *)(v9 + 592) + 16 * v51));
          LODWORD(a5) = *(_QWORD *)(*(_QWORD *)(v9 + 592) + 16 * v51 + 8);
          __asm
          {
            FMLA            S7, S5, V21.S[2]
            FMLA            S16, S5, V21.S[1]
          }
          v143 = vmlas_n_f32(vmuls_lane_f32(_S16, _Q21, 3) + (float)((float)(v72 + v72) * _S6), _S7, _Q21.f32[0]);
          __asm
          {
            FMLA            S17, S3, V21.S[2]
            FMLA            S17, S7, V21.S[1]
            FMLA            S5, S7, V21.S[2]
          }
LABEL_52:
          a6 = v143 - v69;
          a7 = _S17 - v70;
          a8 = _S5 - v71;
          break;
        default:
          break;
      }
      v192 = v59[1];
      v194 = v59[2];
      v193 = v59[3];
      v195 = (float)((float)((float)(*(float *)&_D1 * *v59) - (float)(v193 * _Q21.f32[0]))
                   - (float)(v192 * *(float *)&a5))
           + (float)(v16 * v194);
      v196 = (float)((float)((float)(*(float *)&_D1 * v192) - (float)(v193 * v16)) - (float)(v194 * _Q21.f32[0]))
           + (float)(*(float *)&a5 * *v59);
      v197 = (float)((float)((float)(*(float *)&_D1 * v194) - (float)(v193 * *(float *)&a5)) - (float)(*v59 * v16))
           + (float)(_Q21.f32[0] * v192);
      v198 = (float)((float)((float)(_Q21.f32[0] * *v59) + (float)(v193 * *(float *)&_D1)) + (float)(v192 * v16))
           + (float)(v194 * *(float *)&a5);
      v199 = sqrtf((float)((float)((float)(v196 * v196) + (float)(v195 * v195)) + (float)(v197 * v197))+ (float)(v198 * v198));
      v16 = v195 / v199;
      *(float *)&_D1 = v196 / v199;
      *(float *)&a5 = v197 / v199;
      v200 = v198 / v199;
      v201 = (float *)(v50 + 28 * v57);
      v202 = v201[4];
      v203 = v201[5];
      v204 = v201[6];
      v205 = *(_QWORD *)(v9 + 448);
      v206 = (float *)(v205 + 28 * v51);
      v207 = v206[1];
      v208 = v206[2];
      v209 = v206[3];
      v210 = (float)((float)((float)(v16 * v209) - (float)(v200 * *v206)) - (float)(*(float *)&_D1 * v208))
           + (float)(v207 * *(float *)&a5);
      v211 = (float)((float)((float)(*(float *)&_D1 * v209) - (float)(v200 * v207)) - (float)(*(float *)&a5 * *v206))
           + (float)(v208 * v16);
      v212 = (float)((float)((float)(*(float *)&a5 * v209) - (float)(v200 * v208)) - (float)(v16 * v207))
           + (float)(*v206 * *(float *)&_D1);
      v213 = (float)((float)((float)(*v206 * v16) + (float)(v200 * v209)) + (float)(*(float *)&_D1 * v207))
           + (float)(*(float *)&a5 * v208);
      if (v213 < 0.0)
      {
        v210 = -v210;
        v211 = -v211;
        v212 = -v212;
        v213 = -v213;
      }
      v214 = (float *)(*(_QWORD *)(v9 + 712) + 16 * v51);
      *v214 = v210;
      v214[1] = v211;
      v214[2] = v212;
      v214[3] = v213;
      v215 = *(unsigned __int8 *)(v54 + 80 * v51 + 76);
      if (*(_BYTE *)(v54 + 80 * v51 + 76))
      {
        v216 = *(_DWORD *)(v54 + 80 * v51 + 72);
        do
        {
          *(_DWORD *)(v15 + 4 * v216++) = 0;
          --v215;
        }
        while (v215);
      }
      v217 = a6 + a6;
      v218 = a7 + a7;
      v219 = a8 + a8;
      v220 = v53 + (float)(v200 * v200);
      v221 = (float)((float)(v218 * *(float *)&_D1) + (float)(v16 * v217)) + (float)(*(float *)&a5 * v219);
      v222 = (float)((float)(v200 * (float)((float)(*(float *)&_D1 * v219) - (float)(*(float *)&a5 * v218)))
                   + (float)(v217 * v220))
           + (float)(v16 * v221);
      v223 = (float)((float)(v200 * (float)((float)(*(float *)&a5 * v217) - (float)(v16 * v219))) + (float)(v218 * v220))
           + (float)(*(float *)&_D1 * v221);
      v224 = (float)((float)(v200 * (float)((float)(v16 * v218) - (float)(*(float *)&_D1 * v217))) + (float)(v219 * v220))
           + (float)(*(float *)&a5 * v221);
      a7 = v202 + v222;
      a8 = v203 + v223;
      a6 = v204 + v224;
      v225 = (float *)(v205 + 28 * v51);
      v226 = (float)(v202 + v222) - v225[4];
      v227 = (float)(v203 + v223) - v225[5];
      v228 = a6 - v225[6];
      v229 = &v12[4 * v51];
      v230 = v229[1].f32[0] * v8;
      v231 = (float32x2_t *)(v11 + 32 * v51);
      *v231 = vadd_f32(vmul_n_f32(*v229, v8), *v231);
      v231[1].f32[0] = v230 + v231[1].f32[0];
      v231[2].f32[0] = v226;
      v231[2].f32[1] = v227;
      v231[3].f32[0] = v228;
      v50 = *(_QWORD *)(v9 + 696);
      v232 = v50 + 28 * v51;
      *(float *)v232 = v16;
      *(_DWORD *)(v232 + 4) = LODWORD(_D1);
      *(_DWORD *)(v232 + 8) = LODWORD(a5);
      *(float *)(v232 + 12) = v200;
      *(float *)(v232 + 16) = a7;
      *(float *)(v232 + 20) = a8;
      *(float *)(v232 + 24) = a6;
      ++v51;
      v52 += 76;
    }
    while (v51 != v10);
  }
  return result;
}

_QWORD *physx::Dy::FeatherstoneArticulation::deltaMotionToMotionVelocity(_QWORD *result, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  __int128 v10;
  float32x2_t v11;
  unsigned int v12;
  __int128 v13;
  _OWORD *v14;

  v2 = *result;
  v3 = *(unsigned int *)(*result + 616);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 432);
    v6 = 32 * v3;
    do
    {
      v7 = *(_QWORD *)(v2 + 320) + v4;
      *(float *)&v8 = *(float *)(v5 + v4 + 8) * a2;
      v9 = *(float *)(v5 + v4 + 24);
      *(float32x2_t *)&v10 = vmul_n_f32(*(float32x2_t *)(v5 + v4), a2);
      *(float *)(v7 + 8) = *(float *)&v8;
      *(_DWORD *)(v7 + 12) = 0;
      v11 = *(float32x2_t *)(v5 + v4 + 16);
      *(_QWORD *)v7 = v10;
      *((_QWORD *)&v10 + 1) = v8;
      *(float *)&v12 = v9 * a2;
      *(float32x2_t *)&v13 = vmul_n_f32(v11, a2);
      *(_QWORD *)(v7 + 16) = v13;
      *((_QWORD *)&v13 + 1) = v12;
      *(float *)(v7 + 24) = *(float *)&v12;
      *(_DWORD *)(v7 + 28) = 0;
      v14 = (_OWORD *)(result[2] + v4);
      *v14 = v10;
      v14[1] = v13;
      v4 += 32;
    }
    while (v6 != v4);
  }
  return result;
}

void physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesTGS(uint64_t *a1, float32x2_t *a2, float a3, uint64_t a4, float *a5, float32x2_t *a6)
{
  uint64_t v6;

  v6 = *a1;
  *(float *)(v6 + 648) = a3;
  physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesInternal(v6, a2, a5, a6);
}

uint64_t physx::Dy::FeatherstoneArticulation::setupSolverConstraintsTGS(uint64_t *a1, __n128 a2, float32x4_t a3, float32_t a4, float32x4_t a5, double a6, double a7, float32x4_t a8, float32x4_t a9, uint64_t a10, uint64_t a11, _DWORD *a12, uint64_t a13, uint64_t a14)
{
  LODWORD(a6) = a3.i32[0];
  *a12 = 0;
  a5.i32[0] = *(_DWORD *)"333?";
  a3.f32[0] = a4;
  physx::Dy::FeatherstoneArticulation::setupInternalConstraints(*a1, *(uint64_t **)(*a1 + 608), *(unsigned int *)(*a1 + 616), **(_BYTE **)(*a1 + 664) & 1, *a1 + 176, a14, 1, a2, a3, *(float *)&a6, a5, a6, a7, a8, a9);
  return 0;
}

uint64_t physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::resize(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;
  _QWORD *v10;

  v4 = a2;
  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::recreate((uint64_t *)result, a2);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    v7 = *(_QWORD *)v5 + 76 * v4;
    v8 = *(_QWORD *)v5 + 76 * v6;
    do
    {
      for (i = 0; i != 72; i += 24)
      {
        v10 = (_QWORD *)(v8 + i);
        *v10 = *(_QWORD *)(a3 + i);
        v10[1] = *(_QWORD *)(a3 + i + 8);
        v10[2] = *(_QWORD *)(a3 + i + 16);
      }
      *(_DWORD *)(v8 + 72) = *(_DWORD *)(a3 + 72);
      v8 += 76;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

void physx::Dy::ArticulationData::resizeJointData(physx::Dy::ArticulationData *this, unsigned int a2)
{
  size_t v4;

  if ((*((_DWORD *)this + 11) & 0x7FFFFFFFu) < a2)
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 32, a2);
  *((_DWORD *)this + 10) = a2;
  if ((*((_DWORD *)this + 15) & 0x7FFFFFFFu) < a2)
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 48, a2);
  *((_DWORD *)this + 14) = a2;
  if ((*((_DWORD *)this + 19) & 0x7FFFFFFFu) < a2)
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 64, a2);
  *((_DWORD *)this + 18) = a2;
  if ((*((_DWORD *)this + 23) & 0x7FFFFFFFu) < a2)
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 80, a2);
  *((_DWORD *)this + 22) = a2;
  if ((*((_DWORD *)this + 27) & 0x7FFFFFFFu) < a2)
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 96, a2);
  *((_DWORD *)this + 26) = a2;
  if ((*((_DWORD *)this + 31) & 0x7FFFFFFFu) < a2)
    physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate((uint64_t)this + 112, a2);
  *((_DWORD *)this + 30) = a2;
  v4 = 4 * a2;
  bzero(*((void **)this + 4), v4);
  bzero(*((void **)this + 6), v4);
  bzero(*((void **)this + 8), v4);
  bzero(*((void **)this + 14), v4);
  bzero(*((void **)this + 10), v4);
  bzero(*((void **)this + 12), v4);
}

void physx::Dy::FeatherstoneArticulation::~FeatherstoneArticulation(physx::Dy::FeatherstoneArticulation *this)
{
  int v2;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;

  *(_QWORD *)this = &off_24ED8CC40;
  v2 = *((_DWORD *)this + 221);
  if ((v2 & 0x80000000) == 0 && (v2 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 109) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v4 = *((_DWORD *)this + 215);
  if ((v4 & 0x80000000) == 0 && (v4 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 106) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  if (*((_QWORD *)this + 78))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 78) = 0;
  }
  if (*((_QWORD *)this + 79))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 79) = 0;
  }
  if (*((_QWORD *)this + 80))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    *((_QWORD *)this + 80) = 0;
  }
  v6 = *((_DWORD *)this + 181);
  if ((v6 & 0x80000000) == 0 && (v6 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 89))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v7 = *((_DWORD *)this + 177);
  if ((v7 & 0x80000000) == 0 && (v7 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 87))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v8 = *((_DWORD *)this + 151);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 74))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v9 = *((_DWORD *)this + 147);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 72))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 143);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 70))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((_DWORD *)this + 139);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 68))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v12 = *((_DWORD *)this + 135);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 66))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v13 = *((_DWORD *)this + 131);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 64))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v14 = *((_DWORD *)this + 127);
  if ((v14 & 0x80000000) == 0 && (v14 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 62))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v15 = *((_DWORD *)this + 123);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 60))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v16 = *((_DWORD *)this + 119);
  if ((v16 & 0x80000000) == 0 && (v16 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 58))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v17 = *((_DWORD *)this + 115);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 56))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v18 = *((_DWORD *)this + 111);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 54))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v19 = *((_DWORD *)this + 107);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 52))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v20 = *((_DWORD *)this + 103);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 50))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v21 = *((_DWORD *)this + 99);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v22 = *((_DWORD *)this + 95);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 46))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v23 = *((_DWORD *)this + 91);
  if ((v23 & 0x80000000) == 0 && (v23 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 44))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v24 = *((_DWORD *)this + 87);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 42))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v25 = *((_DWORD *)this + 83);
  if ((v25 & 0x80000000) == 0 && (v25 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 40))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v26 = *((_DWORD *)this + 79);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 38))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v27 = *((_DWORD *)this + 75);
  if ((v27 & 0x80000000) == 0 && (v27 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 36))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v28 = *((_DWORD *)this + 71);
  if ((v28 & 0x80000000) == 0 && (v28 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 34))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v29 = *((_DWORD *)this + 67);
  if ((v29 & 0x80000000) == 0 && (v29 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 32))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v30 = *((_DWORD *)this + 63);
  if ((v30 & 0x80000000) == 0 && (v30 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 30))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v31 = *((_DWORD *)this + 59);
  if ((v31 & 0x80000000) == 0 && (v31 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 28))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v32 = *((_DWORD *)this + 55);
  if ((v32 & 0x80000000) == 0 && (v32 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 26))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)this = off_24ED8CA88;
  v33 = *((_DWORD *)this + 39);
  if ((v33 & 0x80000000) == 0 && (v33 & 0x7FFFFFFF) != 0)
  {
    if (*((_QWORD *)this + 18))
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  }
}

{
  physx::Dy::FeatherstoneArticulation::~FeatherstoneArticulation(this);
  JUMPOUT(0x2276933ACLL);
}

void physx::Dy::FeatherstoneArticulation::computeDofs(physx::Dy::FeatherstoneArticulation *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  uint64_t i;
  uint64_t v19;

  v2 = *((unsigned int *)this + 154);
  if (v2 < 2)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 1;
    v6 = 80;
    do
    {
      v7 = 0;
      v8 = *((_QWORD *)this + 79);
      v9 = *(_QWORD *)(*((_QWORD *)this + 76) + 40 * v5 + 24);
      v10 = v8 + 80 * v5;
      *(_WORD *)(v10 + 76) = 0;
      v11 = (unsigned __int8 *)(v10 + 76);
      v11[3] = 0;
      v12 = v11 + 3;
      v13 = v9 + 258;
      do
      {
        if (*(_BYTE *)(v13 + v7))
        {
          v14 = *v11;
          *(_DWORD *)(v8 + v6 + 24 * v14 + 4 * v7) = 1065353216;
          if (*(_BYTE *)(v13 + v7) == 1)
            ++v11[1];
          *v11 = v14 + 1;
          *(_BYTE *)(v9 + v14 + 252) = v7;
        }
        ++v7;
      }
      while (v7 != 6);
      *v12 = 0;
      v15 = *v11;
      v16 = 0;
      if (*(_BYTE *)(v9 + 270) == 2 && v15 == 2)
      {
        for (i = 0; i != 3; ++i)
        {
          if (!*(_BYTE *)(v9 + 258 + i))
          {
            v19 = *v11;
            *(_DWORD *)(v8 + v6 + 24 * v19 + 4 * i) = 1065353216;
            *v11 = v19 + 1;
            *(_BYTE *)(v9 + v19 + 252) = i;
            v16 = *v12 + 1;
            *v12 = v16;
          }
        }
        v15 = *v11;
      }
      *(_BYTE *)(v9 + 269) &= ~1u;
      *(_DWORD *)(v8 + 80 * v5 + 72) = v3;
      v3 += v15;
      v4 += v16;
      ++v5;
      v6 += 80;
    }
    while (v5 != v2);
  }
  if (v3 != *((_DWORD *)this + 163))
    physx::Dy::ArticulationData::resizeJointData((physx::Dy::FeatherstoneArticulation *)((char *)this + 176), v3);
  *((_DWORD *)this + 163) = v3;
  *((_DWORD *)this + 164) = v4;
}

BOOL physx::Dy::FeatherstoneArticulation::resize(physx::Dy::FeatherstoneArticulation *this, uint64_t a2)
{
  int v2;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD v10[5];

  v2 = *((unsigned __int8 *)this + 160);
  if (*((_BYTE *)this + 160))
  {
    if (*((unsigned __int8 *)this + 140) == (_DWORD)a2)
    {
      *((_BYTE *)this + 160) = 0;
    }
    else
    {
      *((_QWORD *)this + 9) = *((_QWORD *)this + 18);
      *((_QWORD *)this + 6) = this;
      *((_BYTE *)this + 160) = 0;
      v5 = 288 * ((a2 + 3) & 0xFFFC);
      LOBYTE(v10[0]) = 0;
      physx::shdfnd::Array<char,physx::shdfnd::ReflectionAllocator<char>>::resize((uint64_t)this + 848, 288 * ((a2 + 3) & 0xFFFFFFFC), v10);
      *((_QWORD *)this + 16) = *((_QWORD *)this + 106);
      *((_WORD *)this + 71) = v5;
      if ((*((_DWORD *)this + 83) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 320, a2);
      *((_DWORD *)this + 82) = a2;
      if ((*((_DWORD *)this + 87) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 336, a2);
      *((_DWORD *)this + 86) = a2;
      if ((*((_DWORD *)this + 91) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 352, a2);
      *((_DWORD *)this + 90) = a2;
      if ((*((_DWORD *)this + 95) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 368, a2);
      *((_DWORD *)this + 94) = a2;
      if ((*((_DWORD *)this + 143) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 560, a2);
      *((_DWORD *)this + 142) = a2;
      if ((*((_DWORD *)this + 147) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 576, a2);
      *((_DWORD *)this + 146) = a2;
      if ((*((_DWORD *)this + 111) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 432, a2);
      *((_DWORD *)this + 110) = a2;
      if ((*((_DWORD *)this + 115) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate((uint64_t)this + 448, a2);
      *((_DWORD *)this + 114) = a2;
      if ((*((_DWORD *)this + 119) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Dy::SpatialImpulseResponseMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialImpulseResponseMatrix>>::recreate((uint64_t *)this + 58, a2);
      *((_DWORD *)this + 118) = a2;
      if ((*((_DWORD *)this + 123) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Dy::SpatialMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialMatrix>>::recreate((uint64_t *)this + 60, a2);
      *((_DWORD *)this + 122) = a2;
      if ((*((_DWORD *)this + 127) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Dy::InvStIs,physx::shdfnd::ReflectionAllocator<physx::Dy::InvStIs>>::recreate((uint64_t *)this + 62, a2);
      *((_DWORD *)this + 126) = a2;
      memset(v10, 0, 76);
      physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::resize((uint64_t)this + 512, a2, (uint64_t)v10);
      if ((*((_DWORD *)this + 135) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::recreate((uint64_t *)this + 66, a2);
      *((_DWORD *)this + 134) = a2;
      if ((*((_DWORD *)this + 139) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Dy::IsInvD,physx::shdfnd::ReflectionAllocator<physx::Dy::IsInvD>>::recreate((uint64_t *)this + 68, a2);
      *((_DWORD *)this + 138) = a2;
      if ((*((_DWORD *)this + 177) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::PxTransform,physx::shdfnd::ReflectionAllocator<physx::PxTransform>>::recreate((uint64_t)this + 696, a2);
      *((_DWORD *)this + 176) = a2;
      if ((*((_DWORD *)this + 181) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::recreate((uint64_t)this + 712, a2);
      *((_DWORD *)this + 180) = a2;
      if ((*((_DWORD *)this + 79) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 304, a2);
      *((_DWORD *)this + 78) = a2;
      if ((*((_DWORD *)this + 99) & 0x7FFFFFFFu) < a2)
        physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate((uint64_t)this + 384, a2);
      *((_DWORD *)this + 98) = a2;
      physx::shdfnd::Array<physx::PxQuat,physx::shdfnd::ReflectionAllocator<physx::PxQuat>>::resize((uint64_t)this + 592, a2, v10);
      if (*((_QWORD *)this + 78))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *((_QWORD *)this + 78) = 0;
      }
      if (*((_QWORD *)this + 79))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *((_QWORD *)this + 79) = 0;
      }
      if (*((_QWORD *)this + 80))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
        *((_QWORD *)this + 80) = 0;
      }
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 160 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneArticulation.cpp", 172);
      *(_DWORD *)(v6 + 144) = 0;
      *((_QWORD *)this + 78) = v6;
      v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 80 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneArticulation.cpp", 173);
      *(_DWORD *)(v7 + 72) = -1;
      *(_BYTE *)(v7 + 78) = 0;
      *((_QWORD *)this + 79) = v7;
      v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 96 * a2, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneArticulation.cpp", 174);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      *((_QWORD *)this + 80) = v8;
      bzero(*((void **)this + 40), (32 * a2));
      bzero(*((void **)this + 42), (32 * a2));
      bzero(*((void **)this + 44), (32 * a2));
      bzero(*((void **)this + 46), (32 * a2));
      bzero(*((void **)this + 54), (32 * a2));
      bzero(*((void **)this + 56), (28 * a2));
      bzero(*((void **)this + 78), (160 * a2));
      bzero(*((void **)this + 79), (80 * a2));
      bzero(*((void **)this + 80), (96 * a2));
    }
  }
  return v2 != 0;
}

void physx::Dy::FeatherstoneArticulation::getDataSizes(physx::Dy::FeatherstoneArticulation *this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
}

void physx::Dy::FeatherstoneArticulation::onUpdateSolverDesc(physx::Dy::FeatherstoneArticulation *this)
{
  uint64_t v1;
  uint64_t v2;

  *((_QWORD *)this + 76) = *((_QWORD *)this + 7);
  *((_DWORD *)this + 154) = *((unsigned __int8 *)this + 140);
  v1 = *((_QWORD *)this + 14);
  if (v1)
    v2 = v1 + 32;
  else
    v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 83) = v2;
  *((_QWORD *)this + 84) = *((_QWORD *)this + 9);
  *((_DWORD *)this + 170) = *((unsigned __int16 *)this + 69);
  *((_QWORD *)this + 86) = this;
  physx::Dy::FeatherstoneArticulation::computeDofs(this);
}

uint64_t physx::Dy::FeatherstoneArticulation::getDofs(physx::Dy::FeatherstoneArticulation *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 163);
  if ((_DWORD)result == -1)
  {
    physx::Dy::FeatherstoneArticulation::computeDofs(this);
    return *((unsigned int *)this + 163);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getDof(physx::Dy::FeatherstoneArticulation *this, unsigned int a2)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 79) + 80 * a2 + 76);
}

BOOL physx::Dy::FeatherstoneArticulation::applyCache(_QWORD *a1, uint64_t a2, char *a3)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v8;

  v3 = (void *)a1[28];
  v4 = (void *)a1[26];
  v5 = (void *)a1[32];
  v6 = (void *)a1[34];
  v8 = *a3;
  return physx::Dy::FeatherstoneArticulation::applyCacheToDest((physx::Dy::FeatherstoneArticulation *)a1, (physx::Dy::ArticulationData *)(a1 + 22), a2, v3, v4, v5, v6, &v8);
}

float physx::Dy::FeatherstoneArticulation::copyInternalStateToCache(float32x2_t *a1, uint64_t a2, char *a3, float result)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t v12;
  float32x2_t *v13;
  float32x2_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  float v17;
  float32x2_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float32x2_t *v25;
  float32x2_t v26;
  float v27;
  float32x2_t v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  float32x2_t v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  float32x2_t v68;

  v7 = *a3;
  if ((*a3 & 1) != 0)
  {
    memcpy(*(void **)(a2 + 24), *(const void **)&a1[28], (4 * a1[81].i32[1]));
    v7 = *a3;
    if ((*a3 & 2) == 0)
    {
LABEL_3:
      if ((v7 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*a3 & 2) == 0)
  {
    goto LABEL_3;
  }
  memcpy(*(void **)(a2 + 32), *(const void **)&a1[26], (4 * a1[81].i32[1]));
  v7 = *a3;
  if ((*a3 & 4) == 0)
  {
LABEL_4:
    if ((v7 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  memcpy(*(void **)(a2 + 40), *(const void **)&a1[32], (4 * a1[81].i32[1]));
  v7 = *a3;
  if ((*a3 & 8) == 0)
  {
LABEL_5:
    if ((v7 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_11;
  }
LABEL_10:
  memcpy(*(void **)(a2 + 48), *(const void **)&a1[34], (4 * a1[81].i32[1]));
  v7 = *a3;
  if ((*a3 & 0x10) == 0)
    goto LABEL_14;
LABEL_11:
  v8 = a1[77].u32[0];
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(a2 + 56) + 16;
    v10 = *(_QWORD *)&a1[40] + 16;
    do
    {
      *(_QWORD *)(v9 - 16) = *(_QWORD *)v10;
      *(_DWORD *)(v9 - 8) = *(_DWORD *)(v10 + 8);
      *(_QWORD *)v9 = *(_QWORD *)(v10 - 16);
      result = *(float *)(v10 - 8);
      *(float *)(v9 + 8) = result;
      v9 += 32;
      v10 += 32;
      --v8;
    }
    while (v8);
  }
LABEL_14:
  if ((v7 & 0x20) != 0)
  {
    v11 = a1[77].u32[0];
    result = a1[81].f32[0];
    if (result > 0.0)
    {
      v12 = a1[79];
      v13 = (float32x2_t *)a1[42];
      v14 = a1[30];
      result = 1.0 / result;
      if ((**(_BYTE **)&a1[83] & 1) != 0)
      {
        v13[1].i32[1] = 0;
        v13[3].i32[1] = 0;
        v16 = 0;
        v17 = 0.0;
        v19 = 0.0;
        v18 = 0;
      }
      else
      {
        v15 = (float32x2_t *)a1[40];
        v16 = vmul_n_f32(vsub_f32(*v15, a1[22]), result);
        v17 = result * (float)(v15[1].f32[0] - a1[23].f32[0]);
        v18 = vmul_n_f32(vsub_f32(v15[2], a1[24]), result);
        v19 = result * (float)(v15[3].f32[0] - a1[25].f32[0]);
      }
      *v13 = v16;
      v13[1].f32[0] = v17;
      v13[2] = v18;
      v13[3].f32[0] = v19;
      if (v11 >= 2)
      {
        v20 = 1;
        v21 = 96;
        do
        {
          v22 = *(_QWORD *)&v12 + 80 * v20;
          v23 = *(unsigned __int8 *)(v22 + 76);
          if (*(_BYTE *)(v22 + 76))
          {
            v24 = (float *)(*(_QWORD *)&v14 + 4 * *(unsigned int *)(v22 + 72));
            v25 = &v13[4 * v20];
            v26 = v25[2];
            v27 = v25[3].f32[0];
            v28 = *v25;
            v29 = v25[1].f32[0];
            v30 = (float *)(*(_QWORD *)&a1[66] + v21);
            do
            {
              v31 = *v24++;
              v32 = (float)(result * v31) * *(v30 - 3);
              v28 = vadd_f32(v28, vmul_n_f32(*(float32x2_t *)(v30 - 5), result * v31));
              *v25 = v28;
              v29 = v29 + v32;
              v25[1].f32[0] = v29;
              v33 = (float)(result * v31) * *v30;
              v26 = vadd_f32(v26, vmul_n_f32(*(float32x2_t *)(v30 - 2), result * v31));
              v25[2] = v26;
              v27 = v27 + v33;
              v25[3].f32[0] = v27;
              v30 += 6;
              --v23;
            }
            while (v23);
          }
          ++v20;
          v21 += 76;
        }
        while (v20 != v11);
      }
    }
    if ((_DWORD)v11)
    {
      v34 = *(_QWORD *)(a2 + 64) + 16;
      v35 = *(_QWORD *)&a1[42] + 16;
      do
      {
        *(_QWORD *)(v34 - 16) = *(_QWORD *)v35;
        *(_DWORD *)(v34 - 8) = *(_DWORD *)(v35 + 8);
        *(_QWORD *)v34 = *(_QWORD *)(v35 - 16);
        result = *(float *)(v35 - 8);
        *(float *)(v34 + 8) = result;
        v34 += 32;
        v35 += 32;
        --v11;
      }
      while (v11);
    }
  }
  if ((*a3 & 0x40) != 0)
  {
    v36 = a1[40];
    v37 = *(float **)(*(_QWORD *)&a1[76] + 16);
    v38 = v37[12] * -2.0;
    v39 = v37[13] * -2.0;
    v40 = v37[14] * -2.0;
    v42 = v37[10];
    v41 = v37[11];
    v43 = (float)(v41 * v41) + -0.5;
    v44 = v37[8];
    v45 = v37[9];
    v46 = (float)((float)(v39 * v45) + (float)(v44 * v38)) + (float)(v42 * v40);
    v47 = (float)((float)(v38 * v43) - (float)((float)((float)(v45 * v40) - (float)(v42 * v39)) * v41))
        + (float)(v44 * v46);
    v48 = (float)((float)(v39 * v43) - (float)((float)((float)(v42 * v38) - (float)(v44 * v40)) * v41))
        + (float)(v45 * v46);
    v49 = (float)((float)(v40 * v43) - (float)((float)((float)(v44 * v39) - (float)(v45 * v38)) * v41))
        + (float)(v42 * v46);
    v50 = v48 + v48;
    v51 = v49 + v49;
    v53 = v37[2];
    v52 = v37[3];
    v54 = (float)(v52 * v52) + -0.5;
    v55 = v37[1];
    v56 = (float)((float)(v55 * v50) + (float)(*v37 * (float)(v47 + v47))) + (float)(v53 * v51);
    v57 = (float)((float)(v52 * (float)((float)(v55 * v51) - (float)(v53 * v50))) + (float)((float)(v47 + v47) * v54))
        + (float)(*v37 * v56);
    v58 = (float)((float)(v52 * (float)((float)(v53 * (float)(v47 + v47)) - (float)(*v37 * v51))) + (float)(v50 * v54))
        + (float)(v55 * v56);
    v59 = (float)((float)(v52 * (float)((float)(*v37 * v50) - (float)(v55 * (float)(v47 + v47)))) + (float)(v51 * v54))
        + (float)(v53 * v56);
    v60 = v37[4] + v57;
    v61 = v37[5] + v58;
    v62 = v37[6] + v59;
    v63 = (float)((float)((float)(v41 * *v37) - (float)(v52 * v44)) - (float)(v55 * v42)) + (float)(v45 * v53);
    v64 = (float)((float)((float)(v41 * v55) - (float)(v52 * v45)) - (float)(v53 * v44)) + (float)(v42 * *v37);
    v65 = (float)((float)((float)(v41 * v53) - (float)(v52 * v42)) - (float)(*v37 * v45)) + (float)(v44 * v55);
    v66 = v44 * *v37;
    v67 = *(_QWORD *)(a2 + 72);
    *(float *)v67 = v63;
    *(float *)(v67 + 4) = v64;
    *(float *)(v67 + 8) = v65;
    *(float *)(v67 + 12) = (float)((float)(v66 + (float)(v52 * v41)) + (float)(v55 * v45)) + (float)(v53 * v42);
    *(float *)(v67 + 16) = v60;
    *(float *)(v67 + 20) = v61;
    *(float *)(v67 + 24) = v62;
    *(_QWORD *)(v67 + 28) = *(_QWORD *)(*(_QWORD *)&v36 + 16);
    *(_DWORD *)(v67 + 36) = *(_DWORD *)(*(_QWORD *)&v36 + 24);
    *(_QWORD *)(v67 + 40) = **(_QWORD **)&v36;
    *(_DWORD *)(v67 + 48) = *(_DWORD *)(*(_QWORD *)&v36 + 8);
    v68 = a1[42];
    *(_QWORD *)(v67 + 52) = *(_QWORD *)(*(_QWORD *)&v68 + 16);
    *(_DWORD *)(v67 + 60) = *(_DWORD *)(*(_QWORD *)&v68 + 24);
    *(_QWORD *)(v67 + 64) = **(_QWORD **)&v68;
    result = *(float *)(*(_QWORD *)&v68 + 8);
    *(float *)(v67 + 72) = result;
  }
  return result;
}

int8x16_t physx::Dy::FeatherstoneArticulation::translateInertia(uint64_t a1, uint64_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  unsigned __int32 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t result;

  v2 = *(float32x4_t *)a1;
  v2.i32[3] = 0;
  v3 = *(float32x4_t *)(a1 + 12);
  *(int8x8_t *)v4.f32 = vext_s8(*(int8x8_t *)a1, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v3.f32, 1), 4uLL);
  v5.i32[0] = v3.i32[3];
  v6 = vdup_laneq_s32((int32x4_t)v3, 3).u32[0];
  v7.i64[0] = vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL).u64[0];
  *(int8x8_t *)v8.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)a1, 0), *(int8x8_t *)v3.f32, 4uLL);
  v3.i32[3] = 0;
  v5.i32[1] = *(_DWORD *)(a1 + 28);
  v5.i64[1] = *(unsigned int *)(a1 + 32);
  v8.i64[1] = v6;
  v4.i64[1] = vdup_lane_s32(*(int32x2_t *)v5.i8, 1).u32[0];
  *(int8x8_t *)v9.f32 = vext_s8((int8x8_t)vdup_laneq_s32(*(int32x4_t *)a1, 2), *(int8x8_t *)v7.f32, 4uLL);
  v9.i64[1] = vdup_laneq_s32(v5, 2).u32[0];
  v10 = *(float32x4_t *)(a2 + 12);
  v7.i32[0] = v10.i32[3];
  v7.i32[1] = *(_DWORD *)(a2 + 28);
  v11 = vmulq_lane_f32(v3, *(float32x2_t *)v7.f32, 1);
  v7.i64[1] = *(unsigned int *)(a2 + 32);
  v12 = *(float32x4_t *)(a2 + 36);
  v13 = vmulq_n_f32(v2, v12.f32[0]);
  v14 = vmulq_lane_f32(v3, *(float32x2_t *)v12.f32, 1);
  v15 = vmulq_laneq_f32((float32x4_t)v5, v12, 2);
  v16 = vmulq_n_f32(v12, v8.f32[0]);
  v12.i32[3] = 0;
  v17 = *(float32x4_t *)(a2 + 48);
  v18.i32[0] = v17.i32[3];
  v19 = vmulq_n_f32(v2, v17.f32[0]);
  v20 = vmulq_lane_f32(v3, *(float32x2_t *)v17.f32, 1);
  v21 = vmulq_laneq_f32((float32x4_t)v5, v17, 2);
  v22 = vmulq_laneq_f32(v2, v17, 3);
  v23 = vmulq_lane_f32(v17, *(float32x2_t *)v8.f32, 1);
  v17.i32[3] = 0;
  v18.i32[1] = *(_DWORD *)(a2 + 64);
  v24 = vmulq_lane_f32(v3, *(float32x2_t *)v18.f32, 1);
  v18.i64[1] = *(unsigned int *)(a2 + 68);
  v25 = *(float32x4_t *)(a2 + 72);
  v25.i32[3] = 0;
  v26 = *(float32x4_t *)(a2 + 84);
  v27.i32[0] = v26.i32[3];
  v26.i32[3] = 0;
  v27.i32[1] = *(_DWORD *)(a2 + 100);
  v27.i64[1] = *(unsigned int *)(a2 + 104);
  v28 = vmulq_n_f32(v2, COERCE_FLOAT(*(_OWORD *)a2));
  v28.i32[3] = 0;
  v29 = vmulq_lane_f32(v3, *(float32x2_t *)a2, 1);
  v29.i32[3] = 0;
  v30 = vmulq_laneq_f32((float32x4_t)v5, *(float32x4_t *)a2, 2);
  v30.i32[3] = 0;
  v31 = vaddq_f32(v28, v29);
  v32 = vmulq_n_f32(v2, v10.f32[0]);
  v32.i32[3] = 0;
  v33 = vmulq_lane_f32(v3, *(float32x2_t *)v10.f32, 1);
  v33.i32[3] = 0;
  v34 = vaddq_f32(v32, v33);
  v35 = vmulq_laneq_f32((float32x4_t)v5, v10, 2);
  v35.i32[3] = 0;
  v36 = vmulq_laneq_f32(v2, v10, 3);
  v36.i32[3] = 0;
  v11.i32[3] = 0;
  v37 = vaddq_f32(v36, v11);
  v38 = vmulq_laneq_f32((float32x4_t)v5, v7, 2);
  v38.i32[3] = 0;
  v39 = vaddq_f32(vaddq_f32(v37, v38), v27);
  v13.i32[3] = 0;
  v14.i32[3] = 0;
  v15.i32[3] = 0;
  v19.i32[3] = 0;
  v20.i32[3] = 0;
  v40 = vaddq_f32(v15, vaddq_f32(v13, v14));
  v21.i32[3] = 0;
  v22.i32[3] = 0;
  v41 = vaddq_f32(v21, vaddq_f32(v19, v20));
  v24.i32[3] = 0;
  v42 = vmulq_laneq_f32((float32x4_t)v5, v18, 2);
  v42.i32[3] = 0;
  *(int8x8_t *)v19.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a2, 0), *(int8x8_t *)v10.f32, 4uLL);
  v19.i64[1] = vdupq_laneq_s32((int32x4_t)v10, 3).u32[0];
  *(int8x8_t *)v38.f32 = vext_s8(*(int8x8_t *)a2, (int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v10.f32, 1), 4uLL);
  v38.i64[1] = vdupq_lane_s32(*(int32x2_t *)v7.f32, 1).u32[0];
  *(int8x8_t *)v27.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_laneq_s32(*(int32x4_t *)a2, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL), 4uLL);
  v27.i64[1] = vdupq_laneq_s32((int32x4_t)v7, 2).u32[0];
  v43 = vaddq_f32(v40, v19);
  v44 = vaddq_f32(v41, v38);
  v45 = vaddq_f32(vaddq_f32(vaddq_f32(v22, v24), v42), v27);
  v46 = vmulq_n_f32(v43, v8.f32[0]);
  v46.i32[3] = 0;
  v47 = vmulq_lane_f32(v44, *(float32x2_t *)v8.f32, 1);
  v47.i32[3] = 0;
  v48 = vmulq_laneq_f32(v45, v8, 2);
  v48.i32[3] = 0;
  v49 = vaddq_f32(v46, v47);
  v50 = vmulq_n_f32(v43, v4.f32[0]);
  v50.i32[3] = 0;
  v51 = vmulq_lane_f32(v44, *(float32x2_t *)v4.f32, 1);
  v51.i32[3] = 0;
  v52 = vaddq_f32(v49, v48);
  v53 = vmulq_laneq_f32(v45, v4, 2);
  v53.i32[3] = 0;
  v54 = vmulq_n_f32(v43, v9.f32[0]);
  v54.i32[3] = 0;
  v55 = vmulq_lane_f32(v44, *(float32x2_t *)v9.f32, 1);
  v55.i32[3] = 0;
  v56 = vmulq_laneq_f32(v45, v9, 2);
  v56.i32[3] = 0;
  v57 = vaddq_f32(vaddq_f32(vaddq_f32(v30, v31), v25), v52);
  v58 = vaddq_f32(vaddq_f32(vaddq_f32(v35, v34), v26), vaddq_f32(vaddq_f32(v50, v51), v53));
  v59 = vaddq_f32(v39, vaddq_f32(vaddq_f32(v54, v55), v56));
  v60 = vaddq_f32(*(float32x4_t *)a2, vaddq_f32(vaddq_f32(v16, v23), vmulq_laneq_f32(v18, v8, 2)));
  v61 = (int8x16_t)vaddq_f32(v10, vaddq_f32(vaddq_f32(vmulq_n_f32(v12, v4.f32[0]), vmulq_lane_f32(v17, *(float32x2_t *)v4.f32, 1)), vmulq_laneq_f32(v18, v4, 2)));
  v62 = vaddq_f32(v7, vaddq_f32(vaddq_f32(vmulq_n_f32(v12, v9.f32[0]), vmulq_lane_f32(v17, *(float32x2_t *)v9.f32, 1)), vmulq_laneq_f32(v18, v9, 2)));
  v60.i32[3] = v61.i32[0];
  v63 = (float32x4_t)vextq_s8(vextq_s8(v61, v61, 0xCuLL), (int8x16_t)v62, 8uLL);
  *(_DWORD *)(a2 + 32) = v62.i32[2];
  *(int8x8_t *)v62.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0), *(int8x8_t *)v58.f32, 4uLL);
  v62.i64[1] = v59.i64[0];
  *(float32x4_t *)a2 = v60;
  *(float32x4_t *)(a2 + 16) = v63;
  *(int8x8_t *)v63.f32 = vext_s8(*(int8x8_t *)v57.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v58.f32, 1), 4uLL);
  *(int32x2_t *)&v63.u32[2] = vdup_lane_s32(*(int32x2_t *)v59.f32, 1);
  *(int8x8_t *)v60.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v57, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL), 4uLL);
  v60.i64[1] = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL).u64[0];
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  v64 = vmulq_f32(vaddq_f32(v57, v62), v10);
  v65 = (int8x16_t)vmulq_f32(vaddq_f32(v58, v63), v10);
  v66 = (int8x16_t)vmulq_f32(vaddq_f32(v59, v60), v10);
  v64.i32[3] = v65.i32[0];
  *(float32x4_t *)(a2 + 72) = v64;
  result = vextq_s8(vextq_s8(v65, v65, 0xCuLL), v66, 8uLL);
  *(int8x16_t *)(a2 + 88) = result;
  *(_DWORD *)(a2 + 104) = v66.i32[2];
  return result;
}

float32_t physx::Dy::FeatherstoneArticulation::getImpulseResponse(uint64_t a1, unsigned int a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11, float32x4_t *a12, uint64_t a13)
{
  float32_t result;
  float32x4_t v15;
  uint64_t v16;
  int v17;

  physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v15, *(_QWORD *)(a1 + 464) + 192 * a2, *a12, a12[1], a5, a6, a7, a8, a9, a10);
  *(_QWORD *)a13 = v16;
  *(_DWORD *)(a13 + 8) = v17;
  *(_QWORD *)(a13 + 16) = v15.i64[0];
  result = v15.f32[2];
  *(_DWORD *)(a13 + 24) = v15.i32[2];
  return result;
}

float32x4_t physx::Dy::SpatialImpulseResponseMatrix::getResponse(float32x4_t *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t result;

  a5.i64[0] = *(_QWORD *)a2;
  a5.i32[2] = *(_DWORD *)(a2 + 8);
  a6.i64[0] = *(_QWORD *)(a2 + 16);
  a6.i32[2] = *(_DWORD *)(a2 + 24);
  a7.i64[0] = *(_QWORD *)(a2 + 32);
  a7.i32[2] = *(_DWORD *)(a2 + 40);
  a8.i64[0] = *(_QWORD *)(a2 + 48);
  a8.i32[2] = *(_DWORD *)(a2 + 56);
  a9.i64[0] = *(_QWORD *)(a2 + 64);
  a9.i32[2] = *(_DWORD *)(a2 + 72);
  a10.i64[0] = *(_QWORD *)(a2 + 80);
  a10.i32[2] = *(_DWORD *)(a2 + 88);
  v10.i64[0] = *(_QWORD *)(a2 + 96);
  v10.i32[2] = *(_DWORD *)(a2 + 104);
  v11.i64[0] = *(_QWORD *)(a2 + 112);
  v11.i32[2] = *(_DWORD *)(a2 + 120);
  v12.i64[0] = *(_QWORD *)(a2 + 128);
  v12.i32[2] = *(_DWORD *)(a2 + 136);
  v13.i64[0] = *(_QWORD *)(a2 + 144);
  v13.i32[2] = *(_DWORD *)(a2 + 152);
  v14.i64[0] = *(_QWORD *)(a2 + 160);
  v14.i32[2] = *(_DWORD *)(a2 + 168);
  v15.i64[0] = *(_QWORD *)(a2 + 176);
  v15.i32[2] = *(_DWORD *)(a2 + 184);
  v16 = vmulq_n_f32(a5, a3.f32[0]);
  v16.i32[3] = 0;
  v17 = vmulq_n_f32(a6, a3.f32[0]);
  v17.i32[3] = 0;
  v18 = vmulq_lane_f32(a7, *(float32x2_t *)a3.f32, 1);
  v18.i32[3] = 0;
  v19 = vmulq_lane_f32(a8, *(float32x2_t *)a3.f32, 1);
  v19.i32[3] = 0;
  v20 = vaddq_f32(v16, v18);
  v21 = vmulq_laneq_f32(a9, a3, 2);
  v21.i32[3] = 0;
  v22 = vmulq_laneq_f32(a10, a3, 2);
  v22.i32[3] = 0;
  v23 = vaddq_f32(v20, v21);
  v24 = vmulq_n_f32(v10, a4.f32[0]);
  v24.i32[3] = 0;
  v25 = vaddq_f32(vaddq_f32(v17, v19), v22);
  v26 = vmulq_n_f32(v11, a4.f32[0]);
  v26.i32[3] = 0;
  v27 = vaddq_f32(v23, v24);
  v28 = vaddq_f32(v25, v26);
  v29 = vmulq_lane_f32(v12, *(float32x2_t *)a4.f32, 1);
  v29.i32[3] = 0;
  v30 = vmulq_lane_f32(v13, *(float32x2_t *)a4.f32, 1);
  v30.i32[3] = 0;
  v31 = vaddq_f32(v27, v29);
  v32 = vmulq_laneq_f32(v14, a4, 2);
  v32.i32[3] = 0;
  v33 = vmulq_laneq_f32(v15, a4, 2);
  v33.i32[3] = 0;
  result = vaddq_f32(vaddq_f32(v28, v30), v33);
  *a1 = vaddq_f32(v31, v32);
  a1[1] = result;
  return result;
}

float32x4_t physx::Dy::FeatherstoneArticulation::getImpulseResponse(uint64_t a1, unsigned int a2, double a3, double a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11, float32x2_t *a12, float32x4_t *a13)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t result;

  v19 = *(_QWORD *)(a1 + 464) + 192 * a2;
  v20 = *(float32x4_t *)a12[2].f32;
  a5.i64[0] = *(_QWORD *)v19;
  a5.i32[2] = *(_DWORD *)(v19 + 8);
  a6.i64[0] = *(_QWORD *)(v19 + 16);
  a6.i32[2] = *(_DWORD *)(v19 + 24);
  a7.i64[0] = *(_QWORD *)(v19 + 32);
  a7.i32[2] = *(_DWORD *)(v19 + 40);
  a8.i64[0] = *(_QWORD *)(v19 + 48);
  a8.i32[2] = *(_DWORD *)(v19 + 56);
  a9.i64[0] = *(_QWORD *)(v19 + 64);
  a9.i32[2] = *(_DWORD *)(v19 + 72);
  a10.i64[0] = *(_QWORD *)(v19 + 80);
  a10.i32[2] = *(_DWORD *)(v19 + 88);
  v13.i64[0] = *(_QWORD *)(v19 + 96);
  v13.i32[2] = *(_DWORD *)(v19 + 104);
  v14.i64[0] = *(_QWORD *)(v19 + 112);
  v14.i32[2] = *(_DWORD *)(v19 + 120);
  v15.i64[0] = *(_QWORD *)(v19 + 128);
  v15.i32[2] = *(_DWORD *)(v19 + 136);
  v16.i64[0] = *(_QWORD *)(v19 + 144);
  v16.i32[2] = *(_DWORD *)(v19 + 152);
  v17.i64[0] = *(_QWORD *)(v19 + 160);
  v17.i32[2] = *(_DWORD *)(v19 + 168);
  v18.i64[0] = *(_QWORD *)(v19 + 176);
  v18.i32[2] = *(_DWORD *)(v19 + 184);
  v21 = vmulq_n_f32(a5, COERCE_FLOAT(*(_OWORD *)a12->f32));
  v21.i32[3] = 0;
  v22 = vmulq_n_f32(a6, COERCE_FLOAT(*(_OWORD *)a12->f32));
  v22.i32[3] = 0;
  v23 = vmulq_lane_f32(a7, *a12, 1);
  v23.i32[3] = 0;
  v24 = vmulq_lane_f32(a8, *a12, 1);
  v24.i32[3] = 0;
  v25 = vaddq_f32(v21, v23);
  v26 = vmulq_laneq_f32(a9, *(float32x4_t *)a12->f32, 2);
  v26.i32[3] = 0;
  v27 = vmulq_laneq_f32(a10, *(float32x4_t *)a12->f32, 2);
  v27.i32[3] = 0;
  v28 = vaddq_f32(v25, v26);
  v29 = vmulq_n_f32(v13, v20.f32[0]);
  v29.i32[3] = 0;
  v30 = vaddq_f32(vaddq_f32(v22, v24), v27);
  v31 = vmulq_n_f32(v14, v20.f32[0]);
  v31.i32[3] = 0;
  v32 = vaddq_f32(v28, v29);
  v33 = vaddq_f32(v30, v31);
  v34 = vmulq_lane_f32(v15, *(float32x2_t *)v20.f32, 1);
  v34.i32[3] = 0;
  v35 = vmulq_lane_f32(v16, *(float32x2_t *)v20.f32, 1);
  v35.i32[3] = 0;
  v36 = vaddq_f32(v32, v34);
  v37 = vmulq_laneq_f32(v17, v20, 2);
  v37.i32[3] = 0;
  v38 = vmulq_laneq_f32(v18, v20, 2);
  v38.i32[3] = 0;
  result = vaddq_f32(vaddq_f32(v33, v35), v38);
  *a13 = result;
  a13[1] = vaddq_f32(v36, v37);
  return result;
}

float physx::Dy::FeatherstoneArticulation::getLinkVelocity@<S0>(physx::Dy::FeatherstoneArticulation *this@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *((_QWORD *)this + 40) + 32 * a2;
  *(_QWORD *)&v4 = *(_QWORD *)(v3 + 16);
  *((_QWORD *)&v4 + 1) = *(unsigned int *)(v3 + 24);
  *(_QWORD *)&v5 = *(_QWORD *)v3;
  *((_QWORD *)&v5 + 1) = *(unsigned int *)(v3 + 8);
  *a3 = v4;
  a3[1] = v5;
  return *(float *)&v4;
}

float physx::Dy::FeatherstoneArticulation::getLinkMotionVector@<S0>(physx::Dy::FeatherstoneArticulation *this@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *((_QWORD *)this + 54) + 32 * a2;
  *(_QWORD *)&v4 = *(_QWORD *)(v3 + 16);
  *((_QWORD *)&v4 + 1) = *(unsigned int *)(v3 + 24);
  *(_QWORD *)&v5 = *(_QWORD *)v3;
  *((_QWORD *)&v5 + 1) = *(unsigned int *)(v3 + 8);
  *a3 = v4;
  a3[1] = v5;
  return *(float *)&v4;
}

float physx::Dy::FeatherstoneArticulation::getMotionVelocity@<S0>(physx::Dy::FeatherstoneArticulation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *((_QWORD *)this + 40) + 32 * a2;
  *(_QWORD *)a3 = *(_QWORD *)(v3 + 16);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)v3;
  result = *(float *)(v3 + 8);
  *(float *)(a3 + 24) = result;
  *(_DWORD *)(a3 + 28) = 0;
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getMotionAcceleration@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  float *v6;
  unsigned int v7;
  float v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float v12;
  float v13;
  float32x4_t v14;
  float v15;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v57;

  v3 = *(_QWORD *)(this + 608);
  v4 = 1.0 / *(float *)(this + 648);
  if (a2)
  {
    v5 = *(_QWORD *)(this + 632);
    v6 = *(float **)(v3 + 40 * a2 + 16);
    if (*(_BYTE *)(v5 + 80 * a2 + 76))
    {
      v7 = *(unsigned __int8 *)(v5 + 80 * a2 + 76) - 1;
      v8 = v4 * *(float *)(*(_QWORD *)(this + 240) + 4 * *(unsigned int *)(v5 + 80 * a2 + 72) + 4 * v7);
      v9 = *(_QWORD *)(this + 336) + 32 * a2;
      v10 = (float32x4_t *)(*(_QWORD *)(this + 512) + 76 * a2 + 24 * v7);
      v11.i64[0] = *(_QWORD *)v9;
      v12 = v8 * v10[1].f32[0];
      v13 = v8 * v10[1].f32[1];
      v11.i32[2] = *(_DWORD *)(v9 + 8);
      v11.i32[3] = *(_DWORD *)(v9 + 16);
      v14 = vaddq_f32(vmulq_n_f32(*v10, v8), v11);
      v11.f32[0] = v12 + *(float *)(v9 + 20);
      v15 = v13 + *(float *)(v9 + 24);
      _Q3 = vaddq_f32(v14, v14);
      v17 = v11.f32[0] + v11.f32[0];
      v18 = v15 + v15;
    }
    else
    {
      _Q3 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
      v17 = NAN;
      v18 = NAN;
    }
    _S17 = v6[2];
    v46 = v6[3];
    _S18 = (float)(v46 * v46) + -0.5;
    _S19 = *v6;
    _S7 = v6[1];
    __asm
    {
      FMLA            S2, S17, V3.S[2]
      FMLA            S0, S7, V3.S[2]
    }
    v19 = vmlas_n_f32(v46 * _S0, _S18, _Q3.f32[0]) + (float)(*v6 * _S2);
    __asm { FMLA            S1, S18, V3.S[1] }
    v20 = _S1 + (float)(_S7 * _S2);
    v57 = -_S7;
    __asm
    {
      FMLA            S6, S19, V3.S[1]
      FMLA            S6, S18, V3.S[2]
    }
    v21 = _S6 + (float)(_S17 * _S2);
    __asm { FMLA            S6, S19, V3.S[3] }
    v44 = _S6 + (float)(_S17 * v18);
    __asm { FMLA            S6, S18, V3.S[3] }
    v22 = _S6 + (float)(*v6 * v44);
    __asm { FMLA            S22, S17, V3.S[3] }
    v23 = (float)((float)(v46 * _S22) + (float)(v17 * _S18)) + (float)(_S7 * v44);
    v45 = (float)(v46 * (float)(vmuls_lane_f32(v57, _Q3, 3) + (float)(*v6 * v17))) + (float)(v18 * _S18);
    goto LABEL_8;
  }
  v19 = 0.0;
  v20 = 0.0;
  v21 = 0.0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  if ((**(_BYTE **)(this + 664) & 1) == 0)
  {
    v25 = *(float **)(v3 + 16);
    v26 = *(float **)(this + 320);
    v27 = v4 * (float)(*v26 - *(float *)(this + 176));
    v28 = v4 * (float)(v26[1] - *(float *)(this + 180));
    v29 = v4 * (float)(v26[2] - *(float *)(this + 184));
    v30 = v4 * (float)(v26[4] - *(float *)(this + 192));
    v31 = v4 * (float)(v26[5] - *(float *)(this + 196));
    v32 = v4 * (float)(v26[6] - *(float *)(this + 200));
    v33 = v27 + v27;
    v34 = v28 + v28;
    v35 = v29 + v29;
    _S17 = v25[2];
    v36 = v25[3];
    v38 = (float)(v36 * v36) + -0.5;
    v39 = v25[1];
    v40 = (float)((float)((float)(v28 + v28) * v39) + (float)(*v25 * (float)(v27 + v27))) + (float)(_S17 * v35);
    v19 = (float)((float)(v36 * (float)((float)(v39 * v35) - (float)(_S17 * (float)(v28 + v28))))
                + (float)((float)(v27 + v27) * v38))
        + (float)(*v25 * v40);
    v20 = (float)((float)(v36 * (float)((float)(_S17 * v33) - (float)(*v25 * v35))) + (float)((float)(v28 + v28) * v38))
        + (float)(v39 * v40);
    v21 = (float)((float)(v36 * (float)((float)(*v25 * v34) - (float)(v39 * v33))) + (float)(v35 * v38))
        + (float)(_S17 * v40);
    v41 = v30 + v30;
    v42 = v31 + v31;
    v43 = v32 + v32;
    v44 = (float)((float)(v42 * v39) + (float)(*v25 * v41)) + (float)(_S17 * v43);
    v22 = (float)((float)(v36 * (float)((float)(v39 * v43) - (float)(_S17 * v42))) + (float)(v41 * v38))
        + (float)(*v25 * v44);
    v23 = (float)((float)(v36 * (float)((float)(_S17 * v41) - (float)(*v25 * v43))) + (float)(v42 * v38))
        + (float)(v39 * v44);
    v45 = (float)(v36 * (float)((float)(*v25 * v42) - (float)(v39 * v41))) + (float)(v43 * v38);
LABEL_8:
    v24 = v45 + (float)(_S17 * v44);
  }
  *(float *)a3 = v22;
  *(float *)(a3 + 4) = v23;
  *(float *)(a3 + 8) = v24;
  *(_DWORD *)(a3 + 12) = 0;
  *(float *)(a3 + 16) = v19;
  *(float *)(a3 + 20) = v20;
  *(float *)(a3 + 24) = v21;
  *(_DWORD *)(a3 + 28) = 0;
  return this;
}

unint64_t physx::Dy::FeatherstoneArticulation::fillIndexedManager(unint64_t this, unsigned int a2, unint64_t *a3, unsigned __int8 *a4)
{
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 608) + 40 * a2 + 16) + 159))
  {
    *a4 = 3;
  }
  else
  {
    *a4 = 2;
    *a3 = a2 | this;
  }
  return this;
}

float physx::Dy::FeatherstoneArticulation::getLinkMaxPenBias(physx::Dy::FeatherstoneArticulation *this, unsigned int a2)
{
  return *(float *)(*((_QWORD *)this + 78) + 160 * a2 + 144);
}

void physx::Dy::PxcFsFlushVelocity(uint64_t a1, float32x2_t *a2, double a3, double a4, double _D2)
{
  float32x2_t *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x2_t v18;
  float v19;
  float v20;
  float32_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v25;
  float32_t v31;
  float32x2_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  float32x2_t *v43;
  float v44;
  float v45;
  float32x2_t *v46;
  float32x2_t v47;
  float32x2_t v48;
  uint64_t v49;
  float *v50;
  float32x2_t v52;
  float32_t v53;
  float32x2_t v54;
  float32_t v55;

  v6 = *(float32x2_t **)(a1 + 320);
  v7 = *(float **)(a1 + 368);
  v8 = *(_QWORD *)(a1 + 608);
  v9 = *(_QWORD *)(a1 + 632);
  v10 = *(_QWORD *)(a1 + 624);
  v11 = *(_QWORD *)(a1 + 240);
  v50 = v7;
  if ((**(_BYTE **)(a1 + 664) & 1) != 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[3].i32[0] = 0;
    a2[2] = 0;
  }
  else
  {
    v12 = *v7;
    v13 = v7[1];
    v14 = -v13;
    v15 = v7[2];
    *(float *)&_D2 = v7[4];
    v16 = v7[5];
    v17 = -v16;
    *(float *)&a3 = v7[6];
    v18.i32[0] = *(_DWORD *)(a1 + 740);
    v19 = *(float *)(a1 + 752);
    v20 = *(float *)(a1 + 764);
    v21 = (float)((float)((float)-(float)(v13 * v19) - (float)(*v7 * v18.f32[0])) - (float)(v15 * v20))
        + (float)((float)((float)-(float)(v16 * *(float *)(a1 + 788)) - (float)(*(float *)&_D2 * *(float *)(a1 + 776)))
                - (float)(*(float *)&a3 * *(float *)(a1 + 800)));
    v22 = *(float32x2_t *)(a1 + 732);
    v23 = *(float32x2_t *)(a1 + 744);
    _D22 = *(float32x2_t *)(a1 + 756);
    v25 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v23, -v13), vmul_n_f32(v22, *v7)), vmul_n_f32(_D22, v15)), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 780), v17), vmul_n_f32(*(float32x2_t *)(a1 + 768), *(float *)&_D2)), vmul_n_f32(*(float32x2_t *)(a1 + 792), *(float *)&a3)));
    __asm { FMLS            S23, S2, V22.S[0] }
    v31 = (float)(_S23 - (float)(v20 * *(float *)&a3))
        + (float)((float)((float)-(float)(v13 * *(float *)(a1 + 824)) - (float)(*v7 * *(float *)(a1 + 812)))
                - (float)(v15 * *(float *)(a1 + 836)));
    a2[1].f32[0] = v21;
    a2[1].i32[1] = 0;
    v18.f32[1] = v19;
    v32 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v22, (int32x2_t)v23), v17), (float32x2_t)vzip1_s32((int32x2_t)v22, (int32x2_t)v23), *(float32x2_t *)&_D2, 0), v18, *(float32x2_t *)&a3, 0), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 816), v14), vmul_n_f32(*(float32x2_t *)(a1 + 804), v12)), vmul_n_f32(*(float32x2_t *)(a1 + 828), v15)));
    *a2 = v25;
    a2[2] = v32;
    a2[3].f32[0] = v31;
    *v6 = vadd_f32(v25, *v6);
    v6[1].f32[0] = v21 + v6[1].f32[0];
    v6[2] = vadd_f32(a2[2], v6[2]);
    v6[3].f32[0] = a2[3].f32[0] + v6[3].f32[0];
  }
  a2[3].i32[1] = 0;
  v49 = *(unsigned int *)(a1 + 616);
  if (v49 >= 2)
  {
    v33 = 0;
    v34 = v10 + 280;
    v35 = (unsigned int *)(v9 + 152);
    v36 = (unsigned int *)(v8 + 72);
    v37 = 112;
    v38 = 36;
    v39 = 76;
    do
    {
      v40 = *v35;
      v35 += 20;
      v41 = v11 + 4 * v40;
      v42 = *v36;
      v36 += 10;
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(v34, (float *)(*(_QWORD *)(a1 + 480) + v37), (float *)(*(_QWORD *)(a1 + 496) + v38), *(_QWORD *)(a1 + 528) + v39, &v50[v33 / 4 + 8], v41, &a2[4 * v42], &v52);
      v43 = &a2[v33 / 8 + 4];
      v44 = v53;
      v43[1].f32[0] = v53;
      v43[1].i32[1] = 0;
      v45 = v55;
      v43[3].f32[0] = v55;
      v43[3].i32[1] = 0;
      v46 = &v6[v33 / 8];
      v47 = v52;
      *v43 = v52;
      v46[5].f32[0] = v44 + v6[v33 / 8 + 5].f32[0];
      v48 = v54;
      v43[2] = v54;
      v46[4] = vadd_f32(v47, v6[v33 / 8 + 4]);
      v46[6] = vadd_f32(v48, v6[v33 / 8 + 6]);
      v48.i32[0] = v6[v33 / 8 + 7].i32[0];
      v33 += 32;
      v34 += 160;
      v46[7].f32[0] = v45 + v48.f32[0];
      v37 += 112;
      v38 += 36;
      v39 += 76;
    }
    while (32 * v49 - 32 != v33);
  }
  bzero(v50, (32 * v49));
}

float32_t physx::Dy::FeatherstoneArticulation::propagateVelocityW@<S0>(uint64_t a1@<X0>, float *a2@<X1>, float *a3@<X2>, uint64_t a4@<X3>, float *a5@<X4>, uint64_t a6@<X5>, float32x2_t *a7@<X6>, float32x2_t *a8@<X8>)
{
  uint64_t v8;
  float v10;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float *v44;
  float *v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t v48;
  float v49;
  float v50;
  float32x2_t v51;
  float *v52;
  float *v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  float32_t result;
  _QWORD v61[4];

  v61[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int *)(a4 + 72);
  _S2 = *(_DWORD *)a1;
  v10 = a7[1].f32[0];
  _D1 = *a7;
  v12.i32[1] = HIDWORD(*(_QWORD *)(a1 + 4));
  v12.i32[0] = *(_DWORD *)a1;
  v13.i32[1] = HIDWORD(*(unint64_t *)a7);
  v13.f32[0] = v10;
  v14 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v12, v13));
  v15 = (float32x2_t)vdup_lane_s32((int32x2_t)*a7, 0);
  v15.f32[0] = v10;
  __asm { FMLS            S3, S2, V1.S[1] }
  v21 = vadd_f32(vmls_f32(v14, v15, *(float32x2_t *)(a1 + 4)), a7[2]);
  v22 = _S3 + a7[3].f32[0];
  if ((_DWORD)v8)
  {
    v23 = a2[1];
    v24 = a2[2];
    v25 = a2[3];
    v26 = vmuls_lane_f32(v25, _D1, 1);
    v28 = a2[4];
    v27 = a2[5];
    v29 = a2[6];
    v30 = a2[7];
    v31 = a2[8];
    v32 = (float)((float)((float)(v23 * _D1.f32[0]) + vmuls_lane_f32(v28, _D1, 1)) + (float)(v10 * v30))
        + (float)((float)((float)(a2[10] * v21.f32[0]) + vmuls_lane_f32(a2[13], v21, 1)) + (float)(v22 * a2[16]));
    v33 = (float)((float)((float)(v24 * _D1.f32[0]) + vmuls_lane_f32(v27, _D1, 1)) + (float)(v10 * v31))
        + (float)((float)((float)(a2[11] * v21.f32[0]) + vmuls_lane_f32(a2[14], v21, 1)) + (float)(v22 * a2[17]));
    v34 = vmlas_n_f32(vmuls_lane_f32(v23, v21, 1), *a2, v21.f32[0]) + (float)(v24 * v22);
    v35 = vmlas_n_f32(vmuls_lane_f32(v28, v21, 1), v25, v21.f32[0]);
    v36 = v34 + (float)((float)((float)(a2[18] * _D1.f32[0]) + vmuls_lane_f32(a2[21], _D1, 1)) + (float)(v10 * a2[24]));
    v37 = (float)(v35 + (float)(v27 * v22))
        + (float)((float)((float)(a2[19] * _D1.f32[0]) + vmuls_lane_f32(a2[22], _D1, 1)) + (float)(v10 * a2[25]));
    v38 = (float)((float)((float)((float)(*a2 * _D1.f32[0]) + v26) + (float)(v10 * v29))
                + (float)((float)((float)(a2[9] * v21.f32[0]) + vmuls_lane_f32(a2[12], v21, 1)) + (float)(v22 * a2[15])))
        + *a5;
    v39 = v32 + a5[1];
    v40 = v33 + a5[2];
    v41 = v36 + a5[4];
    v42 = v37 + a5[5];
    v43 = (float)((float)(vmlas_n_f32(vmuls_lane_f32(v30, v21, 1), v29, v21.f32[0]) + (float)(v31 * v22))
                + (float)((float)((float)(a2[20] * _D1.f32[0]) + vmuls_lane_f32(a2[23], _D1, 1)) + (float)(v10 * a2[26])))
        + a5[6];
    v44 = (float *)(a4 + 12);
    v45 = (float *)v61;
    v46 = *(unsigned int *)(a4 + 72);
    do
    {
      *v45++ = -(float)((float)((float)((float)(v39 * v44[1]) + (float)(*v44 * v38)) + (float)(v44[2] * v40))
                      + (float)((float)((float)(v42 * *(v44 - 2)) + (float)(*(v44 - 3) * v41))
                              + (float)(*(v44 - 1) * v43)));
      v44 += 6;
      --v46;
    }
    while (v46);
    v47 = 0;
    v48 = 0;
    v49 = 0.0;
    v50 = 0.0;
    v51 = 0;
    do
    {
      v52 = (float *)v61;
      v53 = a3;
      v54 = v8;
      v55 = 0.0;
      do
      {
        v56 = *v53;
        v53 += 3;
        v57 = v56;
        v58 = *v52++;
        v55 = v55 + (float)(v57 * v58);
        --v54;
      }
      while (v54);
      *(float *)(a6 + 4 * v47) = v55 + *(float *)(a6 + 4 * v47);
      v59 = a4 + 24 * v47;
      v48 = vadd_f32(v48, vmul_n_f32(*(float32x2_t *)v59, v55));
      v50 = v50 + (float)(v55 * *(float *)(v59 + 8));
      v51 = vadd_f32(v51, vmul_n_f32(*(float32x2_t *)(v59 + 12), v55));
      v49 = v49 + (float)(v55 * *(float *)(v59 + 20));
      ++v47;
      ++a3;
    }
    while (v47 != v8);
  }
  else
  {
    v48 = 0;
    v50 = 0.0;
    v49 = 0.0;
    v51 = 0;
  }
  result = v10 + v50;
  *a8 = vadd_f32(_D1, v48);
  a8[1].f32[0] = result;
  a8[1].i32[1] = 0;
  a8[2] = vadd_f32(v21, v51);
  a8[3].f32[0] = v22 + v49;
  a8[3].i32[1] = 0;
  return result;
}

float physx::Dy::FeatherstoneArticulation::pxcFsGetVelocity@<S0>(physx::Dy::FeatherstoneArticulation *this@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  float *v3;
  char v4;
  uint64_t v5;
  int8x16_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int32x2_t v17;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  float32x2_t *v37;
  int8x16_t v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v43;
  physx::Dy::FeatherstoneArticulation *v44;
  _OWORD *v45;
  float32x2_t v46;
  unsigned int v47;
  int32x2_t v48;
  float v49;
  __int128 v50;
  __int128 v51;

  v3 = (float *)*((_QWORD *)this + 46);
  v4 = **((_BYTE **)this + 83);
  v5 = *((_QWORD *)this + 76);
  v6 = 0uLL;
  v50 = 0u;
  v51 = 0u;
  v7 = 0.0;
  v8 = 0.0;
  if ((v4 & 1) == 0)
  {
    v9 = v3[1];
    v10 = v3[2];
    v12 = v3[4];
    v11 = v3[5];
    _S17 = v3[6];
    _D4 = *(int32x2_t *)((char *)this + 736);
    _D20 = *(int32x2_t *)((char *)this + 748);
    _D5 = *(int32x2_t *)((char *)this + 760);
    v17 = (int32x2_t)vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)((char *)this + 784), -v11), vmul_n_f32(*(float32x2_t *)((char *)this + 772), v12)), vmul_n_f32(*(float32x2_t *)((char *)this + 796), _S17));
    v8 = (float)((float)((float)-(float)(v9 * *((float *)this + 186)) - (float)(*v3 * *((float *)this + 183)))
               - (float)(v10 * *((float *)this + 189)))
       + (float)((float)((float)-(float)(v11 * *((float *)this + 195)) - (float)(v12 * *((float *)this + 192)))
               - (float)(_S17 * *((float *)this + 198)));
    __asm
    {
      FMLS            S18, S17, V4.S[1]
      FMLS            S19, S17, V20.S[1]
      FMLS            S7, S17, V5.S[1]
    }
    *(int32x2_t *)v25.f32 = vrev64_s32(*(int32x2_t *)((char *)this + 816));
    *(int32x2_t *)&v25.u32[2] = vrev64_s32(_D20);
    *(int32x2_t *)v26.f32 = vrev64_s32(*(int32x2_t *)((char *)this + 804));
    *(int32x2_t *)&v26.u32[2] = vrev64_s32(_D4);
    *(int32x2_t *)v27.f32 = vrev64_s32(*(int32x2_t *)((char *)this + 828));
    *(int32x2_t *)&v27.u32[2] = vrev64_s32(_D5);
    _Q19.i32[1] = _S18;
    *(int32x2_t *)&_Q19.u32[2] = vrev64_s32(v17);
    v6 = (int8x16_t)vaddq_f32(_Q19, vsubq_f32(vsubq_f32(vmulq_n_f32(v25, -v9), vmulq_n_f32(v26, *v3)), vmulq_n_f32(v27, v10)));
    v7 = _S7
       + (float)((float)((float)-(float)(v9 * *((float *)this + 206)) - (float)(*v3 * *((float *)this + 203)))
               - (float)(v10 * *((float *)this + 209)));
    *(float *)&v50 = v8;
    *(int32x2_t *)((char *)&v50 + 4) = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
    *(int32x2_t *)&v51 = vrev64_s32(*(int32x2_t *)v6.i8);
    *((float *)&v51 + 2) = v7;
  }
  v28 = a2;
  v29 = *(_QWORD *)(v5 + 40 * a2 + 8);
  v30 = v29 - 1;
  if (v29 != 1)
  {
    v43 = a2;
    v44 = this;
    v45 = a3;
    v31 = *((_QWORD *)this + 78);
    v32 = *((_QWORD *)this + 60);
    v33 = *((_QWORD *)this + 62);
    v34 = *((_QWORD *)this + 66);
    do
    {
      v35 = __clz(__rbit32(v30));
      LODWORD(v36) = __clz(__rbit32(HIDWORD(v30))) + 32;
      if ((_DWORD)v30)
        v36 = v35;
      else
        v36 = v36;
      physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v46, v31 + 160 * v36 + 120, (float *)(v32 + 112 * v36), (float *)(v33 + 36 * v36), v34 + 76 * v36, &v3[8 * v36], (float32x2_t *)&v50);
      v8 = v46.f32[0];
      *(float32x2_t *)&v50 = v46;
      *((_QWORD *)&v50 + 1) = v47;
      *(int32x2_t *)&v51 = v48;
      v7 = v49;
      *((_QWORD *)&v51 + 1) = LODWORD(v49);
      v30 &= v30 - 1;
    }
    while (v30);
    *(int32x2_t *)v6.i8 = vrev64_s32(v48);
    v6.i64[1] = __PAIR64__(v46.u32[1], v47);
    this = v44;
    a3 = v45;
    v28 = v43;
  }
  v37 = (float32x2_t *)(*((_QWORD *)this + 40) + 32 * v28);
  v38 = vextq_s8(v6, v6, 8uLL);
  *(float *)v38.i32 = v8;
  *(float32x2_t *)&v41 = vadd_f32(*(float32x2_t *)v38.i8, *v37);
  *(float *)&v39 = *(float *)&v6.i32[2] + v37[1].f32[0];
  *(float32x2_t *)&v40 = vadd_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v6.i8), v37[2]);
  *((_QWORD *)&v40 + 1) = COERCE_UNSIGNED_INT(v7 + v37[3].f32[0]);
  *((_QWORD *)&v41 + 1) = v39;
  *a3 = v40;
  a3[1] = v41;
  return *(float *)&v41;
}

float32_t physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(float32x2_t *a1, uint64_t a2, float *a3, float *a4, uint64_t a5, float *a6, float32x2_t *a7)
{
  uint64_t v7;
  float v9;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  float32x2_t v47;
  float v48;
  float v49;
  float32x2_t v50;
  float *v51;
  float *v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  float32_t result;
  _QWORD v60[4];

  v60[3] = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a5 + 72);
  _S2 = *(_DWORD *)a2;
  v9 = a7[1].f32[0];
  _D1 = *a7;
  v11.i32[1] = HIDWORD(*(_QWORD *)(a2 + 4));
  v11.i32[0] = *(_DWORD *)a2;
  v12.i32[1] = HIDWORD(*(unint64_t *)a7);
  v12.f32[0] = v9;
  v13 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v11, v12));
  v14 = (float32x2_t)vdup_lane_s32((int32x2_t)*a7, 0);
  v14.f32[0] = v9;
  __asm { FMLS            S3, S2, V1.S[1] }
  v20 = vadd_f32(vmls_f32(v13, v14, *(float32x2_t *)(a2 + 4)), a7[2]);
  v21 = _S3 + a7[3].f32[0];
  if ((_DWORD)v7)
  {
    v22 = a3[1];
    v23 = a3[2];
    v24 = a3[3];
    v25 = vmuls_lane_f32(v24, _D1, 1);
    v27 = a3[4];
    v26 = a3[5];
    v28 = a3[6];
    v29 = a3[7];
    v30 = a3[8];
    v31 = (float)((float)((float)(v22 * _D1.f32[0]) + vmuls_lane_f32(v27, _D1, 1)) + (float)(v9 * v29))
        + (float)((float)((float)(a3[10] * v20.f32[0]) + vmuls_lane_f32(a3[13], v20, 1)) + (float)(v21 * a3[16]));
    v32 = (float)((float)((float)(v23 * _D1.f32[0]) + vmuls_lane_f32(v26, _D1, 1)) + (float)(v9 * v30))
        + (float)((float)((float)(a3[11] * v20.f32[0]) + vmuls_lane_f32(a3[14], v20, 1)) + (float)(v21 * a3[17]));
    v33 = vmlas_n_f32(vmuls_lane_f32(v22, v20, 1), *a3, v20.f32[0]) + (float)(v23 * v21);
    v34 = vmlas_n_f32(vmuls_lane_f32(v27, v20, 1), v24, v20.f32[0]);
    v35 = v33 + (float)((float)((float)(a3[18] * _D1.f32[0]) + vmuls_lane_f32(a3[21], _D1, 1)) + (float)(v9 * a3[24]));
    v36 = (float)(v34 + (float)(v26 * v21))
        + (float)((float)((float)(a3[19] * _D1.f32[0]) + vmuls_lane_f32(a3[22], _D1, 1)) + (float)(v9 * a3[25]));
    v37 = (float)((float)((float)((float)(*a3 * _D1.f32[0]) + v25) + (float)(v9 * v28))
                + (float)((float)((float)(a3[9] * v20.f32[0]) + vmuls_lane_f32(a3[12], v20, 1)) + (float)(v21 * a3[15])))
        + *a6;
    v38 = v31 + a6[1];
    v39 = v32 + a6[2];
    v40 = v35 + a6[4];
    v41 = v36 + a6[5];
    v42 = (float)((float)(vmlas_n_f32(vmuls_lane_f32(v29, v20, 1), v28, v20.f32[0]) + (float)(v30 * v21))
                + (float)((float)((float)(a3[20] * _D1.f32[0]) + vmuls_lane_f32(a3[23], _D1, 1)) + (float)(v9 * a3[26])))
        + a6[6];
    v43 = (float *)(a5 + 12);
    v44 = (float *)v60;
    v45 = *(unsigned int *)(a5 + 72);
    do
    {
      *v44++ = -(float)((float)((float)((float)(v38 * v43[1]) + (float)(*v43 * v37)) + (float)(v43[2] * v39))
                      + (float)((float)((float)(v41 * *(v43 - 2)) + (float)(*(v43 - 3) * v40))
                              + (float)(*(v43 - 1) * v42)));
      v43 += 6;
      --v45;
    }
    while (v45);
    v46 = 0;
    v47 = 0;
    v48 = 0.0;
    v49 = 0.0;
    v50 = 0;
    do
    {
      v51 = (float *)v60;
      v52 = a4;
      v53 = v7;
      v54 = 0.0;
      do
      {
        v55 = *v52;
        v52 += 3;
        v56 = v55;
        v57 = *v51++;
        v54 = v54 + (float)(v56 * v57);
        --v53;
      }
      while (v53);
      v58 = a5 + 24 * v46;
      v47 = vadd_f32(v47, vmul_n_f32(*(float32x2_t *)v58, v54));
      v49 = v49 + (float)(v54 * *(float *)(v58 + 8));
      v50 = vadd_f32(v50, vmul_n_f32(*(float32x2_t *)(v58 + 12), v54));
      v48 = v48 + (float)(v54 * *(float *)(v58 + 20));
      ++v46;
      ++a4;
    }
    while (v46 != v7);
  }
  else
  {
    v47 = 0;
    v49 = 0.0;
    v48 = 0.0;
    v50 = 0;
  }
  result = v9 + v49;
  *a1 = vadd_f32(_D1, v47);
  a1[1].f32[0] = result;
  a1[1].i32[1] = 0;
  a1[2] = vadd_f32(v20, v50);
  a1[3].f32[0] = v21 + v48;
  a1[3].i32[1] = 0;
  return result;
}

__n128 physx::Dy::FeatherstoneArticulation::pxcFsGetVelocities(uint64_t a1, unsigned int a2, unsigned int a3, _OWORD *a4, _OWORD *a5)
{
  float *v5;
  char v6;
  uint64_t v7;
  int8x16_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int32x2_t v19;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  float *v65;
  __int128 v66;
  __int128 v67;
  float *v68;
  float v69;
  __int128 v70;
  __int128 v71;
  __n128 result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  float v79;
  unsigned int v80;
  float v81;
  float32x2_t v85;
  float v86;
  int32x2_t v87;
  float v88;
  _BYTE v89[12];
  int v90;
  int32x2_t v91;
  float v92;
  int v93;
  __int128 v94;
  __int128 v95;

  v5 = *(float **)(a1 + 368);
  v6 = **(_BYTE **)(a1 + 664);
  v7 = *(_QWORD *)(a1 + 608);
  v8 = 0uLL;
  v94 = 0u;
  v95 = 0u;
  v9 = 0.0;
  v10 = 0.0;
  if ((v6 & 1) == 0)
  {
    v11 = v5[1];
    v12 = v5[2];
    v13 = v5[4];
    v14 = v5[5];
    _S17 = v5[6];
    _D3 = *(int32x2_t *)(a1 + 736);
    _D20 = *(int32x2_t *)(a1 + 748);
    _D4 = *(int32x2_t *)(a1 + 760);
    v19 = (int32x2_t)vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 784), -v14), vmul_n_f32(*(float32x2_t *)(a1 + 772), v13)), vmul_n_f32(*(float32x2_t *)(a1 + 796), _S17));
    v10 = (float)((float)((float)-(float)(v11 * *(float *)(a1 + 744)) - (float)(*v5 * *(float *)(a1 + 732)))
                - (float)(v12 * *(float *)(a1 + 756)))
        + (float)((float)((float)-(float)(v14 * *(float *)(a1 + 780)) - (float)(v13 * *(float *)(a1 + 768)))
                - (float)(_S17 * *(float *)(a1 + 792)));
    __asm
    {
      FMLS            S18, S17, V3.S[1]
      FMLS            S19, S17, V20.S[1]
      FMLS            S6, S17, V4.S[1]
    }
    *(int32x2_t *)v27.f32 = vrev64_s32(*(int32x2_t *)(a1 + 816));
    *(int32x2_t *)&v27.u32[2] = vrev64_s32(_D20);
    *(int32x2_t *)v28.f32 = vrev64_s32(*(int32x2_t *)(a1 + 804));
    *(int32x2_t *)&v28.u32[2] = vrev64_s32(_D3);
    *(int32x2_t *)v29.f32 = vrev64_s32(*(int32x2_t *)(a1 + 828));
    *(int32x2_t *)&v29.u32[2] = vrev64_s32(_D4);
    _Q19.i32[1] = _S18;
    *(int32x2_t *)&_Q19.u32[2] = vrev64_s32(v19);
    v8 = (int8x16_t)vaddq_f32(_Q19, vsubq_f32(vsubq_f32(vmulq_n_f32(v27, -v11), vmulq_n_f32(v28, *v5)), vmulq_n_f32(v29, v12)));
    v9 = _S6
       + (float)((float)((float)-(float)(v11 * *(float *)(a1 + 824)) - (float)(*v5 * *(float *)(a1 + 812)))
               - (float)(v12 * *(float *)(a1 + 836)));
    *(float *)&v94 = v10;
    *(int32x2_t *)((char *)&v94 + 4) = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
    *(int32x2_t *)&v95 = vrev64_s32(*(int32x2_t *)v8.i8);
    *((float *)&v95 + 2) = v9;
  }
  v30 = *(_QWORD *)(v7 + 40 * a2 + 8);
  v31 = *(_QWORD *)(v7 + 40 * a3 + 8);
  v32 = v31 & v30;
  v33 = v31 & v30 ^ v30;
  v34 = (v31 & v30) - 1;
  if ((v31 & v30) != 1)
  {
    v74 = v31 & v30;
    v76 = *(_QWORD *)(v7 + 40 * a3 + 8);
    v78 = a2;
    v80 = a3;
    v35 = *(_QWORD *)(a1 + 624);
    v36 = *(_QWORD *)(a1 + 480);
    v37 = *(_QWORD *)(a1 + 496);
    v38 = *(_QWORD *)(a1 + 528);
    do
    {
      v39 = __clz(__rbit32(v34));
      LODWORD(v40) = __clz(__rbit32(HIDWORD(v34))) + 32;
      if ((_DWORD)v34)
        v40 = v39;
      else
        v40 = v40;
      physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW((float32x2_t *)v89, v35 + 160 * v40 + 120, (float *)(v36 + 112 * v40), (float *)(v37 + 36 * v40), v38 + 76 * v40, &v5[8 * v40], (float32x2_t *)&v94);
      v10 = *(float *)v89;
      *(_QWORD *)&v94 = *(_QWORD *)v89;
      *((_QWORD *)&v94 + 1) = *(unsigned int *)&v89[8];
      *(int32x2_t *)&v95 = v91;
      v9 = v92;
      *((_QWORD *)&v95 + 1) = LODWORD(v92);
      v34 &= v34 - 1;
    }
    while (v34);
    *(int32x2_t *)v8.i8 = vrev64_s32(v91);
    v8.i64[1] = __PAIR64__(*(unsigned int *)&v89[4], *(unsigned int *)&v89[8]);
    a3 = v80;
    a2 = v78;
    v32 = v74;
    v31 = v76;
  }
  v75 = a2;
  v77 = a3;
  v41 = v32 ^ v31;
  *(float *)v89 = v10;
  v42 = *(float *)&v8.i32[3];
  *(int32x2_t *)&v89[4] = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  v43 = *(float *)&v8.i32[2];
  v90 = 0;
  v44 = *(float *)&v8.i32[1];
  v91 = vrev64_s32(*(int32x2_t *)v8.i8);
  v45 = v9;
  v79 = *(float *)v8.i32;
  v81 = v10;
  v46 = *(float *)v8.i32;
  v92 = v9;
  v93 = 0;
  v47 = *(float *)&v8.i32[1];
  v73 = v8.i64[1];
  v48 = v10;
  if (v33)
  {
    v49 = *(_QWORD *)(a1 + 624);
    v50 = *(_QWORD *)(a1 + 480);
    v51 = *(_QWORD *)(a1 + 496);
    v52 = *(_QWORD *)(a1 + 528);
    do
    {
      v53 = __clz(__rbit32(v33));
      LODWORD(v54) = __clz(__rbit32(HIDWORD(v33))) + 32;
      if ((_DWORD)v33)
        v54 = v53;
      else
        v54 = v54;
      physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v85, v49 + 160 * v54 + 120, (float *)(v50 + 112 * v54), (float *)(v51 + 36 * v54), v52 + 76 * v54, &v5[8 * v54], (float32x2_t *)&v94);
      v42 = v85.f32[1];
      v48 = v85.f32[0];
      *(float32x2_t *)&v94 = v85;
      v43 = v86;
      v46 = *(float *)&v87.i32[1];
      v47 = *(float *)v87.i32;
      *((_QWORD *)&v94 + 1) = LODWORD(v86);
      v45 = v88;
      *(int32x2_t *)&v95 = v87;
      *((_QWORD *)&v95 + 1) = LODWORD(v88);
      v33 &= v33 - 1;
    }
    while (v33);
  }
  v56 = v79;
  v55 = v81;
  v57 = *((float *)&v73 + 1);
  v58 = *(float *)&v73;
  if (v41)
  {
    v59 = *(_QWORD *)(a1 + 624);
    v60 = *(_QWORD *)(a1 + 480);
    v61 = *(_QWORD *)(a1 + 496);
    v62 = *(_QWORD *)(a1 + 528);
    do
    {
      v63 = __clz(__rbit32(v41));
      LODWORD(v64) = __clz(__rbit32(HIDWORD(v41))) + 32;
      if ((_DWORD)v41)
        v64 = v63;
      else
        v64 = v64;
      physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v85, v59 + 160 * v64 + 120, (float *)(v60 + 112 * v64), (float *)(v61 + 36 * v64), v62 + 76 * v64, &v5[8 * v64], (float32x2_t *)v89);
      v57 = v85.f32[1];
      v55 = v85.f32[0];
      *(float32x2_t *)v89 = v85;
      v58 = v86;
      v56 = *(float *)&v87.i32[1];
      v44 = *(float *)v87.i32;
      *(float *)&v89[8] = v86;
      v90 = 0;
      v9 = v88;
      v91 = v87;
      v92 = v88;
      v93 = 0;
      v41 &= v41 - 1;
    }
    while (v41);
  }
  v65 = (float *)(*(_QWORD *)(a1 + 320) + 32 * v75);
  HIDWORD(v66) = 0;
  *(float *)&v66 = v47 + v65[4];
  *((float *)&v66 + 1) = v46 + v65[5];
  *((float *)&v66 + 2) = v45 + v65[6];
  HIDWORD(v67) = 0;
  *(float *)&v67 = v48 + *v65;
  HIDWORD(v71) = 0;
  *((float *)&v67 + 1) = v42 + v65[1];
  *((float *)&v67 + 2) = v43 + v65[2];
  *a4 = v66;
  a4[1] = v67;
  v68 = (float *)(*(_QWORD *)(a1 + 320) + 32 * v77);
  v69 = v55 + *v68;
  HIDWORD(v70) = 0;
  *(float *)&v70 = v44 + v68[4];
  *((float *)&v70 + 1) = v56 + v68[5];
  *((float *)&v70 + 2) = v9 + v68[6];
  *(float *)&v71 = v69;
  *((float *)&v71 + 1) = v57 + v68[1];
  *((float *)&v71 + 2) = v58 + v68[2];
  *a5 = v70;
  a5[1] = v71;
  result.n128_u64[0] = v71;
  result.n128_u32[2] = DWORD2(v71);
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::pxcFsGetVelocityTGS(physx::Dy::FeatherstoneArticulation *this)
{
  return (*(uint64_t (**)(physx::Dy::FeatherstoneArticulation *))(*(_QWORD *)this + 232))(this);
}

float32_t physx::Dy::FeatherstoneArticulation::pxcFsApplyImpulse(uint64_t a1, unsigned int a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  float32_t result;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float32x2_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  float v17;
  float32x2_t v18;
  float v19;
  float32x2_t v20;
  float v21;
  int v22;
  float32x2_t v23;
  float v24;
  int v25;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 368);
  v7 = *(_QWORD *)(a1 + 624);
  *(_BYTE *)(a1 + 685) = 1;
  v20 = vneg_f32((float32x2_t)a3.n128_u64[0]);
  v21 = -a3.n128_f32[2];
  v22 = 0;
  v23 = vneg_f32((float32x2_t)a4.n128_u64[0]);
  v24 = -a4.n128_f32[2];
  v25 = 0;
  v8 = (float32x2_t *)(v6 + 32 * a2);
  *v8 = vsub_f32(*v8, (float32x2_t)a3.n128_u64[0]);
  v8[1].f32[0] = v8[1].f32[0] - a3.n128_f32[2];
  v8[2] = vsub_f32(v8[2], (float32x2_t)a4.n128_u64[0]);
  result = v8[3].f32[0] - a4.n128_f32[2];
  v8[3].f32[0] = result;
  if (a2)
  {
    v10 = *(_QWORD *)(a1 + 544);
    v11 = *(_QWORD *)(a1 + 528);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v10 + 96 * v4, (float32x2_t *)(v7 + 160 * v4 + 120), v11 + 76 * v4, (uint64_t)&v20, (uint64_t)&v16);
      v12 = v17;
      v21 = v17;
      v22 = 0;
      v13 = v19;
      v24 = v19;
      v25 = 0;
      v20 = v16;
      v14 = v18;
      v23 = v18;
      v4 = *(unsigned int *)(v5 + 40 * v4 + 32);
      v15 = (float32x2_t *)(v6 + 32 * v4);
      *v15 = vadd_f32(v16, *v15);
      v15[1].f32[0] = v12 + v15[1].f32[0];
      v15[2] = vadd_f32(v14, v15[2]);
      result = v13 + v15[3].f32[0];
      v15[3].f32[0] = result;
    }
    while ((_DWORD)v4);
  }
  return result;
}

float32x2_t physx::Dy::FeatherstoneArticulation::propagateImpulseW@<D0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  float v6;
  float v7;
  float32x2_t v8;
  float32x2_t v9;
  float *v10;
  uint64_t v11;
  float32x2_t v12;
  float v13;
  float v14;
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  float v19;
  float32x2_t v20;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t result;

  v5 = *(unsigned int *)(a3 + 72);
  v6 = *(float *)(a4 + 8);
  v7 = *(float *)(a4 + 16);
  v8 = *(float32x2_t *)a4;
  v9 = *(float32x2_t *)(a4 + 20);
  if ((_DWORD)v5)
  {
    v10 = (float *)(a3 + 12);
    v11 = a1 + 16;
    v12 = 0;
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0;
    do
    {
      v16 = (float)((float)((float)(v8.f32[1] * v10[1]) + (float)(*v10 * v8.f32[0])) + (float)(v10[2] * v6))
          + (float)((float)((float)(v9.f32[0] * *(v10 - 2)) + (float)(*(v10 - 3) * v7)) + (float)(*(v10 - 1) * v9.f32[1]));
      v15 = vadd_f32(v15, vmul_n_f32(*(float32x2_t *)(v11 - 16), v16));
      v14 = v14 + (float)(v16 * *(float *)(v11 - 8));
      v13 = v13 + (float)(v16 * *(float *)v11);
      v12 = vadd_f32(v12, vmul_n_f32(*(float32x2_t *)(v11 + 4), v16));
      v10 += 6;
      v11 += 32;
      --v5;
    }
    while (v5);
  }
  else
  {
    v12 = 0;
    v14 = 0.0;
    v13 = 0.0;
    v15 = 0;
  }
  v17 = vsub_f32(v8, v15);
  _S0 = v6 - v14;
  v19 = v7 - v13;
  v20 = vsub_f32(v9, v12);
  v12.i32[0] = a2[1].i32[0];
  *(float32x2_t *)a5 = v17;
  *(float *)(a5 + 8) = _S0;
  *(_DWORD *)(a5 + 12) = 0;
  _D6 = *a2;
  __asm { FMLA            S5, S0, V6.S[1] }
  v27 = (float32x2_t)vdup_lane_s32((int32x2_t)v17, 0);
  v27.f32[0] = _S0;
  v28 = vmla_f32(vmul_f32(v27, vneg_f32(*a2)), v17, (float32x2_t)vzip1_s32((int32x2_t)v12, (int32x2_t)*a2));
  *(float *)(a5 + 16) = v19 + _S5;
  result = vadd_f32(v20, v28);
  *(float32x2_t *)(a5 + 20) = result;
  *(_DWORD *)(a5 + 28) = 0;
  return result;
}

float32_t physx::Dy::FeatherstoneArticulation::pxcFsApplyImpulses(uint64_t a1, float32x2_t *a2)
{
  uint64_t v3;
  int v4;
  float32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  float32x2_t *v9;
  uint64_t v10;
  float32x2_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  float32x2_t *v15;
  float32_t result;
  float32x2_t v17;
  float v18;
  float32x2_t v19;
  float v20;

  v3 = *(_QWORD *)(a1 + 608);
  v4 = *(_DWORD *)(a1 + 616);
  v5 = *(float32x2_t **)(a1 + 368);
  *(_BYTE *)(a1 + 685) = 1;
  v6 = (v4 - 1);
  if ((_DWORD)v6)
  {
    v7 = v6 - 1;
    v8 = &v5[4 * v6 + 2];
    v9 = &a2[4 * v6];
    v10 = *(_QWORD *)(a1 + 544) + 96 * v6;
    v11 = (float32x2_t *)(*(_QWORD *)(a1 + 624) + 160 * v6 + 120);
    v12 = *(_QWORD *)(a1 + 528) + 76 * v6;
    v13 = (unsigned int *)(v3 + 40 * v6 + 32);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v10, v11, v12, (uint64_t)v9, (uint64_t)&v17);
      v14 = *v13;
      v13 -= 10;
      v15 = &a2[4 * v14];
      *v15 = vadd_f32(v17, *v15);
      v15[1].f32[0] = v18 + v15[1].f32[0];
      v15[2] = vadd_f32(v19, v15[2]);
      v15[3].f32[0] = v20 + v15[3].f32[0];
      v8[-2] = vadd_f32(*v9, v8[-2]);
      v8[-1].f32[0] = v9[1].f32[0] + v8[-1].f32[0];
      *v8 = vadd_f32(v9[2], *v8);
      v8[1].f32[0] = v9[3].f32[0] + v8[1].f32[0];
      LODWORD(v15) = v7--;
      v8 -= 4;
      v9 -= 4;
      v10 -= 96;
      v11 -= 20;
      v12 -= 76;
    }
    while ((_DWORD)v15);
  }
  *v5 = vadd_f32(*a2, *v5);
  v5[1].f32[0] = a2[1].f32[0] + v5[1].f32[0];
  v5[2] = vadd_f32(a2[2], v5[2]);
  result = a2[3].f32[0] + v5[3].f32[0];
  v5[3].f32[0] = result;
  return result;
}

void physx::Dy::FeatherstoneArticulation::pxcFsApplyImpulses(uint64_t a1, unsigned int a2, float32x2_t *a3, float32x2_t *a4, unsigned int a5, float32x2_t *a6, float32x2_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float v28;
  float32x2_t *v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float32_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t *v41;
  float32x2_t *v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  float v51;
  float32x2_t v52;
  float32x2_t *v53;
  uint64_t v54;
  float32x2_t v55;
  float v56;
  float32x2_t v57;
  __int32 v58;
  float32x2_t v59;
  __int32 v60;
  uint64_t v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  float v65;
  float32x2_t v66;
  float v67;
  int v68;
  float32x2_t v69;
  float v70;
  int v71;
  float32x2_t v72;
  float v73;
  int v74;
  float32x2_t v75;
  float v76;
  int v77;
  float32x2_t v78;
  float v79;
  int v80;
  float32x2_t v81;
  float v82;
  int v83;

  LODWORD(v7) = a2;
  v8 = *(_QWORD *)(a1 + 624);
  *(_BYTE *)(a1 + 685) = 1;
  v9 = *(_QWORD *)(a1 + 368);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *a4;
  v12 = a4[1].f32[0];
  v13 = *a3;
  v14 = a3[1].f32[0];
  v15 = a7[1].f32[0];
  v16 = a6[1].f32[0];
  v17 = a2;
  v18 = *(_QWORD *)(v10 + 40 * a5 + 8) & *(_QWORD *)(v10 + 40 * a2 + 8);
  v19 = HIDWORD(v18);
  v20 = 31 - __clz(v18);
  v21 = __clz(v19) ^ 0x3F;
  if ((_DWORD)v19)
    LODWORD(v22) = v21;
  else
    LODWORD(v22) = v20;
  v23 = -v14;
  v24 = -v12;
  v25 = vneg_f32(v13);
  v78 = v25;
  v79 = -v14;
  v80 = 0;
  v26 = vneg_f32(v11);
  v81 = v26;
  v82 = -v12;
  v83 = 0;
  v27 = -v16;
  v28 = -v15;
  v74 = 0;
  v77 = 0;
  v29 = (float32x2_t *)(v9 + 32 * a5);
  v30 = *a6;
  v31.f32[0] = -COERCE_FLOAT(*a6);
  v32 = -COERCE_FLOAT(HIDWORD(*(unint64_t *)a6));
  v72.f32[0] = v31.f32[0];
  v72.f32[1] = v32;
  v73 = -v16;
  v33 = vsub_f32(*v29, v30);
  v34 = v29[1].f32[0] - v16;
  v35 = *a7;
  v36.f32[0] = -COERCE_FLOAT(*a7);
  v37 = -COERCE_FLOAT(HIDWORD(*(unint64_t *)a7));
  v75.f32[0] = v36.f32[0];
  v75.f32[1] = v37;
  v76 = -v15;
  *v29 = v33;
  v29[1].f32[0] = v34;
  v29[2] = vsub_f32(v29[2], v35);
  v29[3].f32[0] = v29[3].f32[0] - v15;
  v61 = a1;
  if ((_DWORD)v22 != a5)
  {
    LODWORD(v38) = a5;
    v54 = a2;
    v55 = v11;
    v56 = v12;
    v57 = v26;
    v59 = v25;
    v39 = *(_QWORD *)(a1 + 544);
    v40 = *(_QWORD *)(a1 + 528);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v39 + 96 * v38, (float32x2_t *)(v8 + 160 * v38 + 120), v40 + 76 * v38, (uint64_t)&v72, (uint64_t)&v66);
      v27 = v67;
      v73 = v67;
      v74 = 0;
      v28 = v70;
      v76 = v70;
      v77 = 0;
      v31 = v66;
      v72 = v66;
      v36 = v69;
      v75 = v69;
      v38 = *(unsigned int *)(v10 + 40 * v38 + 32);
      v41 = (float32x2_t *)(v9 + 32 * v38);
      *v41 = vadd_f32(v66, *v41);
      v41[1].f32[0] = v27 + v41[1].f32[0];
      v41[2] = vadd_f32(v36, v41[2]);
      v41[3].f32[0] = v28 + v41[3].f32[0];
    }
    while ((_DWORD)v38 != (_DWORD)v22);
    v32 = v31.f32[1];
    v37 = v36.f32[1];
    a1 = v61;
    v26 = v57;
    v25 = v59;
    v12 = v56;
    v11 = v55;
    v17 = v54;
  }
  v42 = (float32x2_t *)(v9 + 32 * v17);
  *v42 = vsub_f32(*v42, v13);
  v42[1].f32[0] = v42[1].f32[0] - v14;
  v42[2] = vsub_f32(v42[2], v11);
  v42[3].f32[0] = v42[3].f32[0] - v12;
  if ((_DWORD)v22 == (_DWORD)v7)
  {
    v43 = v25.f32[1];
    v44 = v26.f32[1];
  }
  else
  {
    v58 = v36.i32[0];
    v60 = v31.i32[0];
    v45 = *(_QWORD *)(a1 + 544);
    v46 = *(_QWORD *)(a1 + 528);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v45 + 96 * v7, (float32x2_t *)(v8 + 160 * v7 + 120), v46 + 76 * v7, (uint64_t)&v78, (uint64_t)&v66);
      v23 = v67;
      v79 = v67;
      v80 = 0;
      v24 = v70;
      v82 = v70;
      v83 = 0;
      v25 = v66;
      v78 = v66;
      v26 = v69;
      v81 = v69;
      v7 = *(unsigned int *)(v10 + 40 * v7 + 32);
      v47 = (float32x2_t *)(v9 + 32 * v7);
      *v47 = vadd_f32(v66, *v47);
      v47[1].f32[0] = v23 + v47[1].f32[0];
      v47[2] = vadd_f32(v26, v47[2]);
      v47[3].f32[0] = v24 + v47[3].f32[0];
    }
    while ((_DWORD)v7 != (_DWORD)v22);
    v43 = v25.f32[1];
    v44 = v26.f32[1];
    a1 = v61;
    v36.i32[0] = v58;
    v31.i32[0] = v60;
  }
  v66.f32[0] = v31.f32[0] + v25.f32[0];
  v66.f32[1] = v32 + v43;
  v67 = v27 + v23;
  v68 = 0;
  v69.f32[0] = v36.f32[0] + v26.f32[0];
  v69.f32[1] = v37 + v44;
  v70 = v28 + v24;
  v71 = 0;
  if ((_DWORD)v22)
  {
    v48 = *(_QWORD *)(a1 + 544);
    v49 = *(_QWORD *)(a1 + 528);
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v48 + 96 * v22, (float32x2_t *)(v8 + 160 * v22 + 120), v49 + 76 * v22, (uint64_t)&v66, (uint64_t)&v62);
      v50 = v63;
      v67 = v63;
      v68 = 0;
      v51 = v65;
      v70 = v65;
      v71 = 0;
      v66 = v62;
      v52 = v64;
      v69 = v64;
      v22 = *(unsigned int *)(v10 + 40 * v22 + 32);
      v53 = (float32x2_t *)(v9 + 32 * v22);
      *v53 = vadd_f32(v62, *v53);
      v53[1].f32[0] = v50 + v53[1].f32[0];
      v53[2] = vadd_f32(v52, v53[2]);
      v53[3].f32[0] = v51 + v53[3].f32[0];
    }
    while ((_DWORD)v22);
  }
}

void physx::Dy::computeSphericalJointPositions(float *a1, float *a2, float *a3, float *a4, uint64_t a5, uint64_t a6)
{
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  float v43;

  v8 = a3[1];
  v9 = a3[2];
  v10 = a3[3];
  v12 = a4[2];
  v11 = a4[3];
  v13 = a4[1];
  v14 = (float)((float)((float)(v10 * *a4) - (float)(*a3 * v11)) - (float)(v8 * v12)) + (float)(v13 * v9);
  v15 = (float)((float)((float)(v10 * v13) - (float)(v8 * v11)) - (float)(v9 * *a4)) + (float)(v12 * *a3);
  v16 = (float)((float)((float)(v10 * v12) - (float)(v9 * v11)) - (float)(*a3 * v13)) + (float)(*a4 * v8);
  v17 = (float)((float)((float)(*a3 * *a4) + (float)(v10 * v11)) + (float)(v8 * v13)) + (float)(v9 * v12);
  v18 = sqrtf((float)((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v16 * v16)) + (float)(v17 * v17));
  v19 = v14 / v18;
  v20 = v15 / v18;
  v21 = v16 / v18;
  v22 = v17 / v18;
  *a1 = v14 / v18;
  a1[1] = v15 / v18;
  a1[2] = v16 / v18;
  a1[3] = v22;
  v23 = a2[1];
  v24 = a2[2];
  v25 = a2[3];
  v26 = (float)((float)((float)(v25 * v19) - (float)(v22 * *a2)) - (float)(v20 * v24)) + (float)(v23 * v21);
  v27 = (float)((float)((float)(v25 * v20) - (float)(v22 * v23)) - (float)(v21 * *a2)) + (float)(v24 * v19);
  v28 = (float)((float)((float)(v25 * v21) - (float)(v22 * v24)) - (float)(v19 * v23)) + (float)(*a2 * v20);
  v29 = (float)((float)(v27 * v27) + (float)(v26 * v26)) + (float)(v28 * v28);
  if (v29 >= 1.0e-16)
  {
    v34 = (float)((float)((float)(*a2 * v19) + (float)(v22 * v25)) + (float)(v20 * v23)) + (float)(v21 * v24);
    v35 = 1.0 / sqrtf(v29);
    v30 = v26 * v35;
    v33 = v27 * v35;
    v32 = v28 * v35;
    if (fabsf(v34) >= 0.00000001)
    {
      v36 = atan2f(v29 * v35, v34);
      v31 = v36 + v36;
    }
    else
    {
      v31 = 3.1416;
    }
  }
  else
  {
    v30 = 1.0;
    v31 = 0.0;
    v32 = 0.0;
    v33 = 0.0;
  }
  v37 = 0;
  v38 = v31 * v30;
  v39 = v31 * v33;
  v40 = (float *)(a6 + 8);
  v41 = v31 * v32;
  do
  {
    v42 = (float)(v39 * *(v40 - 1)) + (float)(*(v40 - 2) * v38);
    v43 = *v40;
    v40 += 6;
    *(float *)(a5 + v37) = -(float)(v42 + (float)(v43 * v41));
    v37 += 4;
  }
  while (v37 != 12);
}

uint64_t physx::Dy::FeatherstoneArticulation::getCurrentTransform(physx::Dy::FeatherstoneArticulation *this, unsigned int a2)
{
  return *((_QWORD *)this + 87) + 28 * a2;
}

uint64_t physx::Dy::FeatherstoneArticulation::getDeltaQ(physx::Dy::FeatherstoneArticulation *this, unsigned int a2)
{
  return *((_QWORD *)this + 89) + 16 * a2;
}

float32_t physx::Dy::FeatherstoneArticulation::getDeltaVWithDeltaJV@<S0>(char a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double _D2@<D2>)
{
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float32x2_t v18;
  float v19;
  float v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v25;
  float v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  float32x2_t v37;
  int v38;
  uint64_t v39;
  __int32 v40;

  v11 = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  if ((a1 & 1) == 0)
  {
    v12 = *(float *)a4;
    v13 = *(float *)(a4 + 4);
    v14 = -v13;
    v15 = *(float *)(a4 + 8);
    LODWORD(_D2) = *(_DWORD *)(a4 + 16);
    v16 = *(float *)(a4 + 20);
    v17 = -v16;
    v11.i32[0] = *(_DWORD *)(a4 + 24);
    v18.i32[0] = *(_DWORD *)(a3 + 564);
    v19 = *(float *)(a3 + 576);
    v20 = *(float *)(a3 + 588);
    v21 = (float)((float)((float)-(float)(v13 * v19) - (float)(*(float *)a4 * v18.f32[0])) - (float)(v15 * v20))
        + (float)((float)((float)-(float)(v16 * *(float *)(a3 + 612)) - (float)(*(float *)&_D2 * *(float *)(a3 + 600)))
                - (float)(v11.f32[0] * *(float *)(a3 + 624)));
    v22 = *(float32x2_t *)(a3 + 556);
    v23 = *(float32x2_t *)(a3 + 568);
    _D22 = *(float32x2_t *)(a3 + 580);
    v25 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v23, -v13), vmul_n_f32(v22, *(float *)a4)), vmul_n_f32(_D22, v15)), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a3 + 604), v17), vmul_n_f32(*(float32x2_t *)(a3 + 592), *(float *)&_D2)), vmul_n_f32(*(float32x2_t *)(a3 + 616), v11.f32[0])));
    __asm { FMLS            S23, S2, V22.S[0] }
    v31 = (float)(_S23 - (float)(v20 * v11.f32[0]))
        + (float)((float)((float)-(float)(v13 * *(float *)(a3 + 648)) - (float)(*(float *)a4 * *(float *)(a3 + 636)))
                - (float)(v15 * *(float *)(a3 + 660)));
    *(float32x2_t *)a6 = v25;
    *(float *)(a6 + 8) = v21;
    v18.f32[1] = v19;
    v11 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v22, (int32x2_t)v23), v17), (float32x2_t)vzip1_s32((int32x2_t)v22, (int32x2_t)v23), *(float32x2_t *)&_D2, 0), v18, v11, 0), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a3 + 640), v14), vmul_n_f32(*(float32x2_t *)(a3 + 628), v12)), vmul_n_f32(*(float32x2_t *)(a3 + 652), v15)));
    *(float32x2_t *)(a6 + 16) = v11;
    *(float *)(a6 + 24) = v31;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(a3 + 432) + 40 * a2 + 8);
  v33 = v32 - 1;
  if (v32 != 1)
  {
    do
    {
      v34 = __clz(__rbit32(v33));
      LODWORD(v35) = __clz(__rbit32(HIDWORD(v33))) + 32;
      if ((_DWORD)v33)
        v35 = v34;
      else
        v35 = v35;
      physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(_QWORD *)(a3 + 448) + 160 * v35 + 120, (float *)(*(_QWORD *)(a3 + 304) + 112 * v35), (float *)(*(_QWORD *)(a3 + 320) + 36 * v35), *(_QWORD *)(a3 + 352) + 76 * v35, (float *)(a4 + 32 * v35), a5 + 4 * *(unsigned int *)(*(_QWORD *)(a3 + 456) + 80 * v35 + 72), (float32x2_t *)a6, &v37);
      *(float32x2_t *)a6 = v37;
      *(_DWORD *)(a6 + 8) = v38;
      *(_DWORD *)(a6 + 12) = 0;
      *(_QWORD *)(a6 + 16) = v39;
      v11.i32[0] = v40;
      *(_DWORD *)(a6 + 24) = v40;
      *(_DWORD *)(a6 + 28) = 0;
      v33 &= v33 - 1;
    }
    while (v33);
  }
  return v11.f32[0];
}

float32_t physx::Dy::FeatherstoneArticulation::getZ(unsigned int a1, _QWORD *a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  float32_t v6;
  float32x2_t *v7;
  float32x2_t v8;
  float32x2_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int32 v19;

  v4 = a1;
  v5 = a2[54];
  v6 = -a4[3].f32[0];
  v7 = (float32x2_t *)(a3 + 32 * a1);
  v8 = vneg_f32(*a4);
  v7[1].f32[0] = -a4[1].f32[0];
  v7[1].i32[1] = 0;
  v9 = vneg_f32(a4[2]);
  *v7 = v8;
  v7[2] = v9;
  v7[3].f32[0] = v6;
  v7[3].i32[1] = 0;
  if (a1)
  {
    v11 = a2[46];
    v12 = a2[56];
    v13 = a2[44];
    do
    {
      physx::Dy::FeatherstoneArticulation::propagateImpulseW(v11 + 96 * v4, (float32x2_t *)(v12 + 160 * v4 + 120), v13 + 76 * v4, a3 + 32 * v4, (uint64_t)&v16);
      v4 = *(unsigned int *)(v5 + 40 * v4 + 32);
      v14 = a3 + 32 * v4;
      *(_QWORD *)v14 = v16;
      *(_DWORD *)(v14 + 8) = v17;
      *(_DWORD *)(v14 + 12) = 0;
      *(_QWORD *)(v14 + 16) = v18;
      v9.i32[0] = v19;
      *(_DWORD *)(v14 + 24) = v19;
      *(_DWORD *)(v14 + 28) = 0;
    }
    while ((_DWORD)v4);
  }
  return v9.f32[0];
}

void physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, float *a5, float32x2_t *a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, float32x4_t a11, float32x4_t a12, double a13, double a14, float32x4_t a15, float32x4_t a16)
{
  physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(*(_QWORD *)(a1 + 608), a4, (_QWORD *)(a1 + 176), a2, a5, a7, a3, a6, a9, a10, a11, a12, a13, a14, a15, a16, a8);
}

void physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, float *a5, uint64_t a6, unsigned int a7, float32x2_t *a8, __n128 a9, __n128 a10, float32x4_t a11, float32x4_t a12, double a13, double a14, float32x4_t a15, float32x4_t a16, uint64_t a17)
{
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  float32x2_t *v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  float32x4_t v34;
  __int128 v35;
  float32x4_t v36;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int32 v41;
  float v42;
  float v43;
  float v44;
  __int32 v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  float v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  __int32 v71;
  __int32 v72;
  __int32 v73;
  unsigned int v74;
  unsigned int v75;
  __int32 v76;
  __int32 v77;
  unsigned int v78;
  __int32 v79;
  unsigned int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  __int32 v97;
  unsigned int v98;
  __n128 v99;
  __int32 v100;
  __n128 v101;
  __int32 v102;
  float v103;
  __int32 v104;
  __int128 v106;
  float32x4_t v108;
  uint64_t v109;
  float32x2_t v110;
  __int32 v111;
  unint64_t v112;
  unsigned int v113;
  float32x2_t v114;
  unsigned __int32 v115;
  __int32 v116;
  unint64_t v117;
  unsigned int v118;
  int v119;
  float32x4_t v120;
  __int128 v121;
  float32x4_t v122;
  __int128 v123;
  float32x4_t v124;
  __int128 v125;
  float32x2_t v126;
  float v127;
  int v128;
  float32x2_t v129;
  float v130;
  int v131;
  float32x2_t v132;
  float v133;
  int v134;
  float32x2_t v135;
  float v136;
  int v137;
  uint64_t v138;

  v138 = *MEMORY[0x24BDAC8D0];
  v20 = a7;
  if (*(_DWORD *)(a1 + 40 * a7 + 32) == (unint64_t)a4)
  {
    v22 = *(_OWORD *)a8->f32;
    v21 = *(_OWORD *)a8[2].f32;
    v106 = *(_OWORD *)a5;
    v108 = *(float32x4_t *)(a5 + 4);
    v132 = vneg_f32(*a8);
    v133 = -*((float *)&v22 + 2);
    v134 = 0;
    v135 = vneg_f32(*(float32x2_t *)&v21);
    v136 = -*((float *)&v21 + 2);
    v137 = 0;
    v23 = (float32x2_t *)(a3[56] + 160 * a7 + 120);
    v24 = a3[44] + 76 * a7;
    physx::Dy::FeatherstoneArticulation::propagateImpulseW(a3[46] + 96 * a7, v23, v24, (uint64_t)&v132, (uint64_t)&v126);
    v25 = v108;
    *(float32x2_t *)v26.f32 = vsub_f32(*(float32x2_t *)&v106, v126);
    v27.f32[0] = *((float *)&v106 + 2) - v127;
    *(float32x2_t *)v28.f32 = vsub_f32(*(float32x2_t *)v108.f32, v129);
    v29.f32[0] = v130;
    v25.f32[0] = v108.f32[2] - v130;
    v26.f32[2] = *((float *)&v106 + 2) - v127;
    v26.i32[3] = 0;
    v28.f32[2] = v108.f32[2] - v130;
    v28.i32[3] = 0;
    physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v124, a3[36] + 192 * a4, v26, v28, v27, v25, v29, v30, v31, v32);
    physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW((float32x2_t *)&v122, (uint64_t)v23, (float *)(a3[38] + 112 * v20), (float *)(a3[40] + 36 * v20), v24, (float *)&v132, (float32x2_t *)&v124);
    v34 = v124;
    v33 = v125;
    HIDWORD(v33) = 0;
    v34.i32[3] = 0;
    *(_OWORD *)a6 = v33;
    *(float32x4_t *)(a6 + 16) = v34;
    v36 = v122;
    v35 = v123;
    HIDWORD(v35) = 0;
    v36.i32[3] = 0;
    *(_OWORD *)a17 = v35;
    *(float32x4_t *)(a17 + 16) = v36;
  }
  else
  {
    v38 = a4;
    v39 = a7;
    if (a4 != (unint64_t)a7)
    {
      v40 = a4;
      v39 = a7;
      do
      {
        if (v40 >= v39)
          v40 = *(unsigned int *)(a1 + 40 * v40 + 32);
        else
          v39 = *(unsigned int *)(a1 + 40 * v39 + 32);
      }
      while (v40 != v39);
    }
    *(float *)&v41 = -a5[1];
    v42 = -a5[2];
    v43 = -a5[6];
    v126.f32[0] = -*a5;
    a11.f32[0] = v126.f32[0];
    v126.i32[1] = v41;
    v127 = v42;
    v128 = 0;
    v130 = v43;
    v131 = 0;
    *(float *)&v45 = -a8->f32[1];
    v46 = -a8[1].f32[0];
    v47 = -a8[3].f32[0];
    v124.f32[0] = -a8->f32[0];
    v44 = v124.f32[0];
    v124.i32[1] = v45;
    v124.i64[1] = LODWORD(v46);
    *((_QWORD *)&v125 + 1) = LODWORD(v47);
    v48 = a2 + 32 * a4;
    *(float *)(v48 + 8) = v42;
    *(_DWORD *)(v48 + 12) = 0;
    *(float *)(v48 + 24) = v43;
    *(_DWORD *)(v48 + 28) = 0;
    v49 = a2 + 32 * a7;
    *(float *)(v49 + 8) = v46;
    *(_DWORD *)(v49 + 12) = 0;
    a10.n128_u64[0] = (unint64_t)vneg_f32(a8[2]);
    *(_QWORD *)&v125 = a10.n128_u64[0];
    a9.n128_u64[0] = (unint64_t)vneg_f32(*(float32x2_t *)(a5 + 4));
    v129 = (float32x2_t)a9.n128_u64[0];
    *(_DWORD *)v48 = a11.i32[0];
    *(_DWORD *)(v48 + 4) = v41;
    *(_QWORD *)(v48 + 16) = a9.n128_u64[0];
    *(float *)v49 = v44;
    *(_DWORD *)(v49 + 4) = v45;
    v99 = a10;
    *(_QWORD *)(v49 + 16) = a10.n128_u64[0];
    *(float *)(v49 + 24) = v47;
    *(_DWORD *)(v49 + 28) = 0;
    if (v39 == a4)
    {
      v50 = 0;
      v51 = a9.n128_f32[1];
    }
    else
    {
      v52 = 0;
      v53 = a3[46];
      v54 = a3[56];
      v55 = a3[44];
      do
      {
        v56 = a2;
        a9.n128_u64[0] = (unint64_t)physx::Dy::FeatherstoneArticulation::propagateImpulseW(v53 + 96 * v38, (float32x2_t *)(v54 + 160 * v38 + 120), v55 + 76 * v38, (uint64_t)&v126, (uint64_t)&v122);
        a2 = v56;
        v41 = v122.i32[1];
        a11.i32[0] = v122.i32[0];
        v126 = *(float32x2_t *)v122.f32;
        v42 = v122.f32[2];
        v51 = *((float *)&v123 + 1);
        a9.n128_u32[0] = v123;
        v127 = v122.f32[2];
        v128 = 0;
        v43 = *((float *)&v123 + 2);
        v129 = (float32x2_t)v123;
        v130 = *((float *)&v123 + 2);
        v131 = 0;
        v132.i32[v52] = v38;
        v57 = *(unsigned int *)(a1 + 40 * v38 + 32);
        v58 = v56 + 32 * v57;
        *(_QWORD *)v58 = __PAIR64__(v41, a11.u32[0]);
        *(float *)(v58 + 8) = v42;
        *(_DWORD *)(v58 + 12) = 0;
        *(_QWORD *)(v58 + 16) = __PAIR64__(LODWORD(v51), a9.n128_u32[0]);
        *(float *)(v58 + 24) = v43;
        *(_DWORD *)(v58 + 28) = 0;
        v50 = ++v52;
        v38 = v57;
      }
      while (v57 != v39);
    }
    v101 = a9;
    v103 = a11.f32[0];
    v109 = a2;
    if (v39 == v20)
    {
      v59 = (float32x4_t)v99;
      v60 = v99.n128_f32[1];
      v61 = v50;
    }
    else
    {
      v62 = a3[46];
      v63 = a3[56];
      v64 = a3[44];
      v65 = v50;
      do
      {
        physx::Dy::FeatherstoneArticulation::propagateImpulseW(v62 + 96 * v20, (float32x2_t *)(v63 + 160 * v20 + 120), v64 + 76 * v20, (uint64_t)&v124, (uint64_t)&v122);
        v45 = v122.i32[1];
        v44 = v122.f32[0];
        v124.i64[0] = v122.i64[0];
        v46 = v122.f32[2];
        v60 = *((float *)&v123 + 1);
        v59.i32[0] = v123;
        v124.i64[1] = v122.u32[2];
        v47 = *((float *)&v123 + 2);
        *(_QWORD *)&v125 = v123;
        *((_QWORD *)&v125 + 1) = DWORD2(v123);
        v132.i32[v65] = v20;
        v66 = *(unsigned int *)(a1 + 40 * v20 + 32);
        v67 = v109 + 32 * v66;
        *(_QWORD *)v67 = __PAIR64__(v45, LODWORD(v44));
        *(float *)(v67 + 8) = v46;
        *(_DWORD *)(v67 + 12) = 0;
        *(_QWORD *)(v67 + 16) = __PAIR64__(LODWORD(v60), v59.u32[0]);
        *(float *)(v67 + 24) = v47;
        *(_DWORD *)(v67 + 28) = 0;
        v61 = ++v65;
        v20 = v66;
      }
      while (v66 != v39);
    }
    v68 = (float32x4_t)v101;
    a15.f32[0] = -(float)(v103 + v44);
    a11.f32[0] = -(float)(*(float *)&v41 + *(float *)&v45);
    a12.f32[0] = -(float)(v42 + v46);
    v59.f32[0] = -(float)(v101.n128_f32[0] + v59.f32[0]);
    a16.f32[0] = -(float)(v51 + v60);
    v68.f32[0] = -(float)(v43 + v47);
    v69.i32[3] = 0;
    v70.i32[3] = 0;
    v70.f32[0] = a15.f32[0];
    v70.f32[1] = a11.f32[0];
    v70.f32[2] = a12.f32[0];
    v69.i64[0] = __PAIR64__(a16.u32[0], v59.u32[0]);
    v69.f32[2] = v68.f32[0];
    physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v122, a3[36] + 192 * v39, v70, v69, a11, a12, v59, v68, a15, a16);
    v72 = v122.i32[1];
    v71 = v122.i32[0];
    v120 = v122;
    v97 = v122.i32[3];
    v73 = v122.i32[2];
    v75 = DWORD1(v123);
    v74 = v123;
    v121 = v123;
    v76 = v122.i32[2];
    v77 = v122.i32[1];
    v78 = DWORD2(v123);
    v79 = v122.i32[0];
    v80 = DWORD2(v123);
    v81 = DWORD1(v123);
    v82 = v123;
    v96 = HIDWORD(v123);
    if (v61 > v50)
    {
      v83 = a3[56];
      v84 = a3[38];
      v85 = a3[40];
      v86 = (unsigned int *)&v132 + v61 - 1;
      v87 = a3[44];
      do
      {
        v88 = *v86--;
        physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v114, v83 + 160 * v88 + 120, (float *)(v84 + 112 * v88), (float *)(v85 + 36 * v88), v87 + 76 * v88, (float *)(v109 + 32 * v88), (float32x2_t *)&v120);
        v77 = v114.i32[1];
        v79 = v114.i32[0];
        *(float32x2_t *)v120.f32 = v114;
        v76 = v115;
        v81 = HIDWORD(v117);
        v82 = v117;
        v120.i64[1] = v115;
        v80 = v118;
        *(_QWORD *)&v121 = v117;
        *((_QWORD *)&v121 + 1) = v118;
        --v61;
      }
      while (v50 < v61);
    }
    v98 = v80;
    v100 = v79;
    v102 = v77;
    v104 = v76;
    v114 = (float32x2_t)__PAIR64__(v72, v71);
    v115 = v73;
    v116 = v97;
    v117 = __PAIR64__(v75, v74);
    v118 = v78;
    v119 = v96;
    if (v50)
    {
      v89 = a3[56];
      v90 = a3[38];
      v91 = a3[40];
      v92 = v50 - 1;
      v93 = a3[44];
      do
      {
        v94 = v92;
        v95 = v132.u32[v92];
        physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW(&v110, v89 + 160 * v95 + 120, (float *)(v90 + 112 * v95), (float *)(v91 + 36 * v95), v93 + 76 * v95, (float *)(v109 + 32 * v95), &v114);
        v72 = v110.i32[1];
        v71 = v110.i32[0];
        v114 = v110;
        v73 = v111;
        v75 = HIDWORD(v112);
        v74 = v112;
        v115 = v111;
        v116 = 0;
        v78 = v113;
        v117 = v112;
        v118 = v113;
        --v92;
        v119 = 0;
      }
      while (v94);
    }
    *(_DWORD *)a6 = v74;
    *(_DWORD *)(a6 + 4) = v75;
    *(_DWORD *)(a6 + 8) = v78;
    *(_DWORD *)(a6 + 16) = v71;
    *(_DWORD *)(a6 + 20) = v72;
    *(_DWORD *)(a6 + 24) = v73;
    *(_DWORD *)a17 = v82;
    *(_DWORD *)(a17 + 4) = v81;
    *(_DWORD *)(a17 + 8) = v98;
    *(_DWORD *)(a17 + 16) = v100;
    *(_DWORD *)(a17 + 20) = v102;
    *(_DWORD *)(a17 + 24) = v104;
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::storeStaticConstraint(uint64_t a1, __int128 *a2)
{
  unsigned int v2;
  __int128 *v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_DWORD *)(a1 + 880);
  if ((*(_DWORD *)(a1 + 884) & 0x7FFFFFFFu) <= v2)
  {
    physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::growAndPushBack(a1 + 872, a2);
  }
  else
  {
    v3 = (__int128 *)(*(_QWORD *)(a1 + 872) + 48 * v2);
    v4 = *a2;
    v5 = a2[2];
    v3[1] = a2[1];
    v3[2] = v5;
    *v3 = v4;
    ++*(_DWORD *)(a1 + 880);
  }
  return 1;
}

unint64_t physx::Dy::FeatherstoneArticulation::prepareStaticConstraintsTGS(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t (**a6)(_QWORD, _QWORD), uint64_t a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15)
{
  unint64_t result;
  unsigned int v25;
  uint64_t v30;
  __int128 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int16 v51;
  int v52;
  int v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  __int128 *v83;
  __int128 v84;
  __int128 v85;
  float *v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  float *v90;
  int32x2_t v91;
  float v92;
  int8x8_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  __int128 *v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _QWORD v109[3];
  int v110;
  float v111[4];
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  _BYTE v119[20];
  __int128 v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  float v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  int v135;
  uint64_t (**v136[7])(_QWORD, _QWORD);
  float32x2x2_t v137;

  v136[0] = (uint64_t (**)(_QWORD, _QWORD))off_24ED8D5D0;
  v136[1] = a6;
  v136[2] = a3 + 1484;
  v136[3] = a3 + 1478;
  v136[4] = a3 + 1526;
  v133 = xmmword_2260E5D70;
  v134 = 0;
  v135 = 0;
  result = physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ArticulationStaticConstraintSortPredicate,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(*(_QWORD *)(a1 + 872), *(_DWORD *)(a1 + 880));
  if (*(_DWORD *)(a1 + 880))
  {
    v25 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    v103 = a5;
    do
    {
      v30 = *(_QWORD *)(a1 + 872);
      v31 = (__int128 *)(v30 + 48 * v25);
      v32 = *((unsigned __int16 *)v31 + 8);
      v33 = *((unsigned __int16 *)v31 + 9);
      if (v32 == 0xFFFF)
        v34 = *((unsigned __int16 *)v31 + 9);
      else
        v34 = *((unsigned __int16 *)v31 + 8);
      v35 = v30 + 48 * v25;
      if (*((_WORD *)v31 + 15) == 1)
      {
        v38 = *(_QWORD *)(v35 + 32);
        v36 = (_QWORD *)(v35 + 32);
        v37 = v38;
        v39 = *(_QWORD *)(a2 + 32)
            + 32
            * (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(v38 + 108) & 7)) + (*(_DWORD *)(v38 + 108) >> 3));
        v40 = *((unsigned int *)v36 - 3);
        v41 = *((unsigned int *)v36 - 2);
        if (v32 == 0xFFFF)
          v42 = *((_DWORD *)v36 - 3);
        else
          v42 = 0;
        if (v33 == 0xFFFF)
          v43 = *((_DWORD *)v36 - 2);
        else
          v43 = 0;
        v45 = *(_QWORD *)(v37 + 32);
        v44 = *(_QWORD *)(v37 + 40);
        v46 = *(_QWORD *)(v37 + 24);
        v47 = *(_DWORD *)(v45 + 16);
        v48 = *(_QWORD *)(v39 + 16);
        *(_QWORD *)&v49 = *(_QWORD *)(v45 + 20);
        v50 = *v31;
        v118 = *(_OWORD *)v45;
        *(_DWORD *)v119 = v47;
        *((_QWORD *)&v49 + 1) = *(_QWORD *)v44;
        *(_OWORD *)&v119[4] = v49;
        v120 = *(_OWORD *)(v44 + 8);
        v121 = *(_DWORD *)(v44 + 24);
        v124 = v46;
        v130 = v48;
        v112 = v30 + 48 * v25;
        v113 = v50;
        v114 = a5 + (v40 << 6);
        v115 = a5 + (v41 << 6);
        v116 = a4 + 48 * v42;
        v117 = a4 + 48 * v43;
        v51 = *(_WORD *)(v37 + 80);
        BYTE2(v126) = HIBYTE(v51) & 1;
        BYTE1(v126) = (v51 & 4) != 0;
        v52 = 8;
        if ((v51 & 8) != 0)
          v53 = 8;
        else
          v53 = 1;
        v122 = v53;
        if ((v51 & 0x10) == 0)
        {
          if ((v51 & 0x400) != 0)
          {
            v52 = 4;
          }
          else if ((v51 & 0x40) != 0)
          {
            v52 = 1;
          }
          else
          {
            v52 = 2;
          }
        }
        v123 = v52;
        v86 = (float *)(*(_QWORD *)(v37 + 32) + 128);
        v87 = a4 + 48 * v42 + 12;
        if ((v51 & 8) == 0)
          v86 = (float *)v87;
        v88 = *v86;
        v89 = a4 + 48 * v43 + 12;
        if ((v51 & 0x10) != 0)
          v90 = (float *)(*(_QWORD *)(v37 + 40) + 128);
        else
          v90 = (float *)v89;
        v91.i32[0] = *(unsigned __int8 *)(v37 + 84);
        v91.i32[1] = *(unsigned __int8 *)(v37 + 85);
        v92 = *v90;
        v93 = (int8x8_t)vceqz_s32(v91);
        v137.val[0] = (float32x2_t)vbic_s8(_D8, v93);
        v137.val[1] = v137.val[0];
        vst2_f32(v111, v137);
        LODWORD(v127) = *(_DWORD *)(v37 + 92);
        v128 = *(_QWORD *)(v37 + 72);
        v129 = *(_BYTE *)(v37 + 82);
        HIDWORD(v127) = 2139095039;
        if (v88 >= v92)
          v88 = v92;
        v131 = v88;
        v132 = *(_QWORD *)(v37 + 112);
        *(float *)v93.i32 = a11;
        *(float *)&v50 = a13;
        result = physx::Dy::createFinalizeSolverContactsStep((uint64_t)v111, (uint64_t *)v39, (uint64_t)a3, (uint64_t)v136, a10, *(double *)&v93, *(double *)&v50, a14, a12);
        v94 = v30 + 48 * v25;
        *(_WORD *)(v94 + 28) = *(unsigned __int8 *)(v39 + 24);
        *(_QWORD *)(v94 + 40) = *(_QWORD *)(v39 + 16);
        *(_QWORD *)(v37 + 72) = v128;
        *(_BYTE *)(v37 + 82) = v129;
        if (*v36)
        {
          v95 = *(_QWORD *)(a1 + 560);
          v96 = *(_DWORD *)(v95 + 4 * v34);
          if (!v96)
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * v34) = v25;
            v96 = *(_DWORD *)(v95 + 4 * v34);
          }
          *(_DWORD *)(v95 + 4 * v34) = v96 + 1;
          a5 = v103;
          goto LABEL_63;
        }
        v97 = v25 + 1;
        LODWORD(v80) = *(_DWORD *)(a1 + 880);
        a5 = v103;
        if (v97 < v80)
        {
          v98 = (_OWORD *)(*(_QWORD *)(a1 + 872) + 48 * v25);
          v99 = 48 * (v25 + 1);
          do
          {
            v100 = (__int128 *)(*(_QWORD *)(a1 + 872) + v99);
            v101 = *v100;
            v102 = v100[2];
            v98[1] = v100[1];
            v98[2] = v102;
            *v98 = v101;
            v98 += 3;
            ++v97;
            v80 = *(unsigned int *)(a1 + 880);
            v99 += 48;
          }
          while (v97 < v80);
        }
      }
      else
      {
        v56 = *(uint64_t **)(v35 + 32);
        v55 = (_QWORD *)(v35 + 32);
        v54 = v56;
        v57 = v56[5];
        if (v57)
          v58 = *(__int128 **)(v57 + 40);
        else
          v58 = &v133;
        v59 = v54[6];
        if (v59)
          v60 = *(__int128 **)(v59 + 40);
        else
          v60 = &v133;
        v61 = v54[4];
        v62 = *((unsigned __int16 *)v54 + 4);
        v63 = v30 + 48 * v25;
        _ZF = v32 == 0xFFFF;
        v65 = *(unsigned int *)(v63 + 20);
        v66 = *(unsigned int *)(v63 + 24);
        if (_ZF)
          v67 = v65;
        else
          v67 = 0;
        v68 = a4 + 48 * v67;
        if (_ZF)
          v69 = 1;
        else
          v69 = 8;
        v70 = v33 == 0xFFFF;
        if (v33 == 0xFFFF)
          v71 = v66;
        else
          v71 = 0;
        v109[1] = v54[2];
        v109[2] = v61;
        v110 = v62;
        v109[0] = v54;
        v72 = *((_DWORD *)v58 + 6);
        v73 = *v31;
        v112 = v30 + 48 * v25;
        v74 = *((_QWORD *)v58 + 2);
        v118 = *v58;
        *(_QWORD *)v119 = v74;
        *(_DWORD *)&v119[8] = v72;
        *(_QWORD *)&v119[12] = *(_QWORD *)v60;
        v120 = *(__int128 *)((char *)v60 + 8);
        v121 = *((_DWORD *)v60 + 6);
        v113 = v73;
        v114 = a5 + (v65 << 6);
        v115 = a5 + (v66 << 6);
        v116 = v68;
        v117 = a4 + 48 * v71;
        v125 = *v54;
        v127 = a7 + 32 * *((unsigned int *)v54 + 18);
        v75 = *((_WORD *)v54 + 5);
        LOBYTE(v128) = HIBYTE(v75) & 1;
        BYTE1(v128) = (v75 & 0x80) != 0;
        BYTE2(v128) = (v75 & 0x20) != 0;
        BYTE3(v128) = (v75 & 0x200) != 0;
        v126 = *((_DWORD *)v54 + 19);
        if (v70)
          v76 = 1;
        else
          v76 = 8;
        v122 = v69;
        v123 = v76;
        result = physx::Dy::SetupSolverConstraintStep((uint64_t)v109, (uint64_t)v111, v136, a8, a9, a10, a11, a15);
        if (*v55)
        {
          v77 = *(_QWORD *)(a1 + 560);
          v78 = *(_DWORD *)(v77 + 4 * v34);
          if (!v78)
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * v34) = v25;
            v78 = *(_DWORD *)(v77 + 4 * v34);
          }
          *(_DWORD *)(v77 + 4 * v34) = v78 + 1;
          goto LABEL_63;
        }
        v79 = v25 + 1;
        LODWORD(v80) = *(_DWORD *)(a1 + 880);
        if (v79 < v80)
        {
          v81 = (_OWORD *)(*(_QWORD *)(a1 + 872) + 48 * v25);
          v82 = 48 * (v25 + 1);
          do
          {
            v83 = (__int128 *)(*(_QWORD *)(a1 + 872) + v82);
            v84 = *v83;
            v85 = v83[2];
            v81[1] = v83[1];
            v81[2] = v85;
            *v81 = v84;
            v81 += 3;
            ++v79;
            v80 = *(unsigned int *)(a1 + 880);
            v82 += 48;
          }
          while (v79 < v80);
        }
      }
      *(_DWORD *)(a1 + 880) = v80 - 1;
      --v25;
LABEL_63:
      ++v25;
    }
    while (v25 < *(_DWORD *)(a1 + 880));
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::prepareStaticConstraints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(_QWORD, _QWORD), uint64_t a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  uint64_t result;
  __int128 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unsigned int v28;
  uint64_t v34;
  __int128 *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  __int128 *v49;
  uint64_t v50;
  char v51;
  __int128 *v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  __int16 v62;
  int v63;
  int v64;
  uint64_t v65;
  __int128 *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  _OWORD *v82;
  uint64_t v83;
  __int128 *v84;
  __int128 v85;
  int32x2_t v86;
  double v87;
  float32x4_t *v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v102;
  _QWORD v103[3];
  int v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  uint64_t (**v108[5])(_QWORD, _QWORD);
  float32x4_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v108[0] = (uint64_t (**)(_QWORD, _QWORD))off_24ED8D5D0;
  v108[1] = a5;
  v108[2] = (uint64_t (**)(_QWORD, _QWORD))(a3 + 11872);
  v108[3] = (uint64_t (**)(_QWORD, _QWORD))(a3 + 11824);
  v108[4] = (uint64_t (**)(_QWORD, _QWORD))(a3 + 12208);
  v105 = xmmword_2260E5D70;
  v106 = 0;
  v107 = 0;
  v102 = *(_QWORD *)(a3 + 12160);
  result = physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ArticulationStaticConstraintSortPredicate,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(*(_QWORD *)(a1 + 872), *(_DWORD *)(a1 + 880));
  if (*(_DWORD *)(a1 + 880))
  {
    v28 = 0;
    __asm { FMOV            V15.2S, #1.0 }
    v98 = a4;
    do
    {
      v34 = *(_QWORD *)(a1 + 872);
      v35 = (__int128 *)(v34 + 48 * v28);
      v36 = *((unsigned __int16 *)v35 + 8);
      v37 = *((unsigned __int16 *)v35 + 9);
      if (v36 == 0xFFFF)
        v38 = *((unsigned __int16 *)v35 + 9);
      else
        v38 = *((unsigned __int16 *)v35 + 8);
      if (*((_WORD *)v35 + 15) == 1)
      {
        v39 = v34 + 48 * v28;
        v42 = *(_QWORD *)(v39 + 32);
        v40 = (_QWORD *)(v39 + 32);
        v41 = v42;
        v43 = *(_DWORD *)(v42 + 108);
        v44 = *(_QWORD *)(a2 + 32);
        v45 = *(_DWORD *)(a2 + 4 * (v43 & 7));
        v46 = *((_DWORD *)v40 - 3);
        if (v36 != 0xFFFF)
          v46 = 0;
        v47 = a4 + 112 * v46;
        if (v37 == 0xFFFF)
          v48 = *((_DWORD *)v40 - 2);
        else
          v48 = 0;
        v112 = v47;
        v113 = a4 + 112 * v48;
        v50 = *(_QWORD *)(v41 + 32);
        v49 = *(__int128 **)(v41 + 40);
        v51 = *(_BYTE *)(v50 + 28);
        if (v49)
        {
          v51 |= *((_BYTE *)v49 + 28);
          v52 = *(__int128 **)(v41 + 40);
        }
        else
        {
          v52 = &v105;
        }
        v59 = v45 + (v43 >> 3);
        v60 = (uint64_t *)(v44 + 32 * v59);
        v114 = *(_OWORD *)v50;
        v115 = *(_QWORD *)(v50 + 16);
        v116 = *(_DWORD *)(v50 + 24);
        LODWORD(v117) = *(_DWORD *)v52;
        if (!v49)
          v49 = &v105;
        HIDWORD(v117) = *((_DWORD *)v49 + 1);
        v118 = *((_DWORD *)v49 + 2);
        v119 = *(_QWORD *)((char *)v49 + 12);
        v120 = *((_DWORD *)v49 + 5);
        v121 = *((_DWORD *)v49 + 6);
        v124 = *(_QWORD *)(v41 + 24);
        v61 = v60 + 2;
        v130 = v60[2];
        v110 = v34 + 48 * v28;
        *(_QWORD *)&v111 = *(_QWORD *)v35;
        *((_QWORD *)&v111 + 1) = *(_QWORD *)(v110 + 8);
        v62 = *(_WORD *)(v41 + 80);
        BYTE2(v126) = HIBYTE(v62) & 1;
        BYTE1(v126) = (v62 & 4) != 0;
        v63 = 8;
        if ((v62 & 8) != 0)
          v64 = 8;
        else
          v64 = 1;
        v122 = v64;
        if ((v62 & 0x10) == 0)
        {
          if ((v62 & 0x400) != 0)
          {
            v63 = 4;
          }
          else if ((v62 & 0x40) != 0)
          {
            v63 = 1;
          }
          else
          {
            v63 = 2;
          }
        }
        v123 = v63;
        v86.i32[0] = *(unsigned __int8 *)(v41 + 84);
        v86.i32[1] = *(unsigned __int8 *)(v41 + 85);
        v89 = COERCE_DOUBLE(vbic_s8(_D15, (int8x8_t)vceqz_s32(v86)));
        v87 = v89;
        v88 = &v109;
        vst2_f32(v88->f32, *(float32x2x2_t *)&v89);
        LODWORD(v127) = *(_DWORD *)(v41 + 92);
        v128 = *(_QWORD *)(v41 + 72);
        v129 = *(_BYTE *)(v41 + 82);
        LODWORD(v89) = 2139095039;
        if ((v51 & 0x20) != 0)
          *(float *)&v89 = a13;
        HIDWORD(v127) = LODWORD(v89);
        *(float *)&v89 = a8;
        *(float *)&v87 = a10;
        *(float *)&v23 = a11;
        *(float *)&v24 = a12;
        result = physx::Dy::createFinalizeSolverContacts(&v109, v60, a3, (uint64_t)v108, v102, v89, v87, *(double *)&v23, a9, v24, v25, v26, v27);
        v90 = v34 + 48 * v28;
        *(_WORD *)(v90 + 28) = *(unsigned __int8 *)(v44 + 32 * v59 + 24);
        *(_QWORD *)(v90 + 40) = *v61;
        *(_QWORD *)(v41 + 72) = v128;
        *(_BYTE *)(v41 + 82) = v129;
        if (*v40)
        {
          v91 = *(_QWORD *)(a1 + 560);
          v92 = *(_DWORD *)(v91 + 4 * v38);
          a4 = v98;
          if (!v92)
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * v38) = v28;
            v92 = *(_DWORD *)(v91 + 4 * v38);
          }
          *(_DWORD *)(v91 + 4 * v38) = v92 + 1;
          goto LABEL_55;
        }
        v93 = v28 + 1;
        LODWORD(v81) = *(_DWORD *)(a1 + 880);
        a4 = v98;
        if (v93 < v81)
        {
          v94 = (_OWORD *)(*(_QWORD *)(a1 + 872) + 48 * v28);
          v95 = 48 * (v28 + 1);
          do
          {
            v96 = (__int128 *)(*(_QWORD *)(a1 + 872) + v95);
            v97 = *v96;
            v23 = v96[2];
            v94[1] = v96[1];
            v94[2] = v23;
            *v94 = v97;
            v94 += 3;
            ++v93;
            v81 = *(unsigned int *)(a1 + 880);
            v95 += 48;
          }
          while (v93 < v81);
        }
      }
      else
      {
        v53 = v34 + 48 * v28;
        v56 = *(uint64_t **)(v53 + 32);
        v55 = (_QWORD *)(v53 + 32);
        v54 = v56;
        v57 = v56[5];
        if (v57)
          v58 = *(__int128 **)(v57 + 40);
        else
          v58 = &v105;
        v65 = v54[6];
        if (v65)
          v66 = *(__int128 **)(v65 + 40);
        else
          v66 = &v105;
        v67 = v54[4];
        v68 = *((unsigned __int16 *)v54 + 4);
        v69 = v34 + 48 * v28;
        _ZF = v36 == 0xFFFF;
        v70 = *(_DWORD *)(v69 + 20);
        v71 = *(_DWORD *)(v69 + 24);
        if (!_ZF)
          v70 = 0;
        v72 = a4 + 112 * v70;
        if (v37 == 0xFFFF)
          v73 = v71;
        else
          v73 = 0;
        v103[1] = v54[2];
        v103[2] = v67;
        v104 = v68;
        v103[0] = v54;
        v74 = *((_DWORD *)v58 + 6);
        v75 = *v35;
        v110 = v34 + 48 * v28;
        v76 = *((_QWORD *)v58 + 2);
        v114 = *v58;
        v115 = v76;
        v116 = v74;
        v117 = *(_QWORD *)v66;
        v118 = *((_DWORD *)v66 + 2);
        v119 = *(_QWORD *)((char *)v66 + 12);
        v120 = *((_DWORD *)v66 + 5);
        v121 = *((_DWORD *)v66 + 6);
        v112 = v72;
        v113 = a4 + 112 * v73;
        v111 = v75;
        v125 = *v54;
        v127 = a6 + 32 * *((unsigned int *)v54 + 18);
        v77 = *((_WORD *)v54 + 5);
        LOBYTE(v128) = HIBYTE(v77) & 1;
        BYTE1(v128) = (v77 & 0x80) != 0;
        BYTE2(v128) = (v77 & 0x20) != 0;
        BYTE3(v128) = (v77 & 0x200) != 0;
        v126 = *((_DWORD *)v54 + 19);
        result = physx::Dy::SetupSolverConstraint((uint64_t)v103, (uint64_t)&v109, v108, v102, a7, a8);
        if (*v55)
        {
          v78 = *(_QWORD *)(a1 + 560);
          v79 = *(_DWORD *)(v78 + 4 * v38);
          if (!v79)
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 576) + 4 * v38) = v28;
            v79 = *(_DWORD *)(v78 + 4 * v38);
          }
          *(_DWORD *)(v78 + 4 * v38) = v79 + 1;
          goto LABEL_55;
        }
        v80 = v28 + 1;
        LODWORD(v81) = *(_DWORD *)(a1 + 880);
        if (v80 < v81)
        {
          v82 = (_OWORD *)(*(_QWORD *)(a1 + 872) + 48 * v28);
          v83 = 48 * (v28 + 1);
          do
          {
            v84 = (__int128 *)(*(_QWORD *)(a1 + 872) + v83);
            v85 = *v84;
            v23 = v84[2];
            v82[1] = v84[1];
            v82[2] = v23;
            *v82 = v85;
            v82 += 3;
            ++v80;
            v81 = *(unsigned int *)(a1 + 880);
            v83 += 48;
          }
          while (v80 < v81);
        }
      }
      *(_DWORD *)(a1 + 880) = v81 - 1;
      --v28;
LABEL_55:
      ++v28;
    }
    while (v28 < *(_DWORD *)(a1 + 880));
  }
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContacts(float32x4_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, float a9, double a10, double a11, double a12, double a13)
{
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned __int32 v28;
  int v29;
  unsigned int v30;
  int v31;
  char v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v44;
  unint64_t v45;
  int v46;
  char v47;
  float32x4_t v48;
  float32x4_t v49;

  v13 = a1[3].i64[0];
  v14 = *(float *)(a1[2].i64[1] + 76);
  v15 = a3 + 16;
  *(_DWORD *)(a3 + 4112) = 0;
  v16 = *(float *)(v13 + 76);
  if (v14 < v16)
    v16 = v14;
  v17 = *a2;
  __asm { FMOV            V5.4S, #1.0 }
  if (!*a2)
  {
    LOBYTE(v27) = 0;
LABEL_40:
    v28 = 0;
    goto LABEL_41;
  }
  v23 = *(_BYTE *)(v17 + 43);
  if ((v23 & 2) != 0)
    v24 = 64;
  else
    v24 = 16;
  if ((*(_BYTE *)(v17 + 43) & 4) != 0)
  {
    LOBYTE(v27) = 0;
    LOBYTE(v17) = 0;
    goto LABEL_40;
  }
  v25 = *((unsigned __int8 *)a2 + 25);
  v26 = v23;
  _Q5 = *(float32x4_t *)v17;
  v27 = (v23 >> 5) & 1;
  v28 = 0;
  if (*((_BYTE *)a2 + 25))
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    _X15 = a2[1];
    if ((v26 & 2) != 0)
      v33 = 6;
    else
      v33 = 4;
    if (v26 < 0)
    {
      v24 = 32;
      v33 = 5;
    }
    v34 = v26 & 0xFFFFFF82;
    while (1)
    {
      if (v29)
      {
        v35 = *(unsigned __int8 *)(v17 + 41);
        _CF = v35 >= v30;
        v37 = v35 - v30;
        v36 = v37 != 0 && _CF;
        LODWORD(v38) = v37 << v33;
        if (v36)
          v38 = v38;
        else
          v38 = 0;
        _X15 += v38;
        v17 += 48;
      }
      v30 = *(unsigned __int8 *)(v17 + 41);
      if (*(_BYTE *)(v17 + 41))
        break;
LABEL_36:
      if (++v29 == v25)
        goto LABEL_37;
    }
    v39 = *(unsigned __int8 *)(v17 + 41);
    while (1)
    {
      if (v31)
        v40 = v24;
      else
        v40 = 0;
      _X15 += v40;
      __asm { PRFM            #0, [X15,#0x80] }
      _X19 = (_OWORD *)(v15 + ((unint64_t)v28 << 6));
      __asm { PRFM            #0, [X19,#0x80] }
      *(float *)&a13 = v16;
      if (v27)
      {
        if (!v34)
        {
          LODWORD(a13) = 2139095039;
LABEL_31:
          *(_QWORD *)&v44 = *(_QWORD *)(v17 + 16);
          v45 = v15 + ((unint64_t)v28 << 6);
          DWORD2(v44) = *(_DWORD *)(v17 + 24);
          HIDWORD(v44) = *(_DWORD *)(_X15 + 12);
          *_X19 = v44;
          *(_QWORD *)(v45 + 16) = *(_QWORD *)_X15;
          LODWORD(v44) = *(_DWORD *)(_X15 + 8);
          *(_BYTE *)(v45 + 48) = *(_BYTE *)(v17 + 42);
          *(_DWORD *)(v45 + 24) = v44;
          *(_DWORD *)(v45 + 28) = LODWORD(a13);
          *(_DWORD *)(v45 + 44) = *(_DWORD *)(v17 + 36);
          *(int32x2_t *)(v45 + 56) = vrev64_s32(*(int32x2_t *)(v17 + 28));
          if (v34)
          {
            a13 = *(double *)(_X15 + 16);
            v46 = *(_DWORD *)(_X15 + 24);
          }
          else
          {
            a13 = 0.0;
            v46 = 0;
          }
          *(double *)(v45 + 32) = a13;
          *(_DWORD *)(v45 + 40) = v46;
          ++v28;
          goto LABEL_35;
        }
        LODWORD(a13) = *(_DWORD *)(_X15 + 28);
      }
      if (*(float *)&a13 != 0.0)
        goto LABEL_31;
LABEL_35:
      v31 = 1;
      if (!--v39)
        goto LABEL_36;
    }
  }
LABEL_37:
  LODWORD(v17) = (v26 >> 4) & 1;
LABEL_41:
  *(_DWORD *)(a3 + 4112) = v28;
  a1[8].i64[1] = v15;
  a1[9].i32[0] = v28;
  if (a1[9].i8[5])
    v47 = 1;
  else
    v47 = v17;
  a1[9].i8[5] = v47;
  a1[9].i8[4] = v27;
  v48 = *a1;
  v49 = vmulq_f32(_Q5, *a1);
  *a1 = v49;
  return physx::Dy::createFinalizeSolverContacts((uint64_t)a1, a3 + 4128, a4, a5, a6, a7, a8, a9, a10, v49.f32[0], v48.f32[0], *(float *)&a13);
}

uint64_t physx::Dy::SetupSolverConstraint(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD, _QWORD), uint64_t a4, float a5, float a6)
{
  uint64_t (*v6)(_BYTE *, uint64_t *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *, _BYTE *);
  uint64_t i;
  _BYTE *v14;
  int v20;
  _BYTE v22[12];
  _BYTE v23[12];
  uint64_t v24;
  int v25;
  _BYTE v26[968];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)(*(_QWORD *)(a2 + 16) + 30) = 0;
  v6 = *(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *, _BYTE *))(a1 + 8);
  if (!v6)
    return 0;
  bzero(v26, 0x3C0uLL);
  for (i = 0; i != 960; i += 80)
  {
    v14 = &v26[i];
    *((_DWORD *)v14 + 11) = -8388609;
    *((_DWORD *)v14 + 15) = 2139095039;
  }
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a2 = _Q0;
  v24 = 0;
  v25 = 0;
  v20 = v6(v26, &v24, 12, a2, *(_QWORD *)(a1 + 16), a2 + 56, a2 + 84, *(unsigned __int8 *)(a2 + 163), v23, v22);
  *(_QWORD *)(a2 + 128) = v26;
  *(_DWORD *)(a2 + 136) = v20;
  *(_QWORD *)(a2 + 164) = v24;
  *(_DWORD *)(a2 + 172) = v25;
  return physx::Dy::ConstraintHelper::setupSolverConstraint(a2, a3, a4, a5, a6);
}

uint64_t *physx::Dy::FeatherstoneArticulation::setupInternalConstraintsRecursive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, __n128 _Q0, float32x4_t _Q1, float a11, float32x4_t a12, double a13, double _D5, float32x4_t _Q6, float32x4_t a16)
{
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char v35;
  char v36;
  uint64_t v37;
  float *v38;
  float v39;
  char v40;
  uint64_t *result;
  char v42;
  uint64_t v43;
  unsigned int v44;
  float *v45;
  float v46;
  uint64_t v47;
  float *v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  BOOL v78;
  float v79;
  char *v80;
  float *v81;
  float *v82;
  float v83;
  uint64_t v86;
  unsigned int v87;
  __n128 v88;
  __n128 v89;
  __int32 v90;
  float32x2_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  float v98;
  float v99;
  float v100;
  int v101;
  float v102;
  float v103;
  uint64_t v104;
  float v105;
  float v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  char *v123;
  float *v124;
  float *v125;
  float v126;
  _BOOL4 v127;
  uint64_t v130;
  float v131;
  unsigned __int32 v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float32x4_t v141;
  float32x4_t v142;
  unsigned int v143;
  float32x4_t v144;
  float32x4_t v145;
  float v149;
  float32x2_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  int v159;
  float v160;
  float v161;
  uint64_t v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  uint64_t v168;
  float v169;
  uint64_t v170;
  float v171;
  uint64_t v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  uint64_t v185;
  float v186;
  unsigned __int32 *v187;
  float v188;
  unsigned int v189;
  __n128 v190;
  __n128 v191;
  float32x2_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t i;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  _BYTE *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  float v237;
  uint64_t v238;
  uint64_t v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  float v256;
  float v257;
  float v258;
  float v259;
  float32x4_t v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float32x2_t v267;
  float v268;
  float v269;
  unsigned int *v271;
  char v273;
  float32x2_t v274;
  int v275;
  _OWORD v276[2];
  float32x4_t v277;
  __n128 v278;
  float32x4_t v279;
  float32x4_t v280;
  _BYTE v281[12];
  float32x2_t v282;
  float v283;
  float v284[3];
  _BYTE v285[12];
  float v286;
  float32x2_t v287;
  float v288;
  unsigned __int32 v289;
  float v290;
  uint64_t v291;

  v16 = a7;
  v19 = a4;
  v20 = a3;
  v21 = *(float *)&_D5;
  v22 = *(float *)&a13;
  v23 = a12.f32[0];
  v24 = a11;
  v25 = _Q1.f32[0];
  v26 = _Q0.n128_f32[0];
  v29 = 0;
  v30 = 0;
  v291 = *MEMORY[0x24BDAC8D0];
  v31 = a8;
  v32 = *(_QWORD *)(a5 + 456);
  v254 = *(_QWORD *)(a5 + 464);
  v33 = v32 + 80 * a8;
  v36 = *(_BYTE *)(v33 + 79);
  v34 = (_BYTE *)(v33 + 79);
  v35 = v36;
  v37 = a2 + 40 * a8;
  v271 = (unsigned int *)(v37 + 32);
  v38 = *(float **)(v37 + 24);
  v39 = v38[62];
  do
  {
    if (v38[v29 + 28] > 0.0 && (v38[v29 + 26] > 0.0 || v38[v29 + 27] > 0.0))
      ++v30;
    v29 += 4;
  }
  while (v29 != 24);
  v40 = 0;
  result = (uint64_t *)(a2 + 40 * a8);
  v42 = *(_BYTE *)(v32 + 80 * a8 + 76);
  if (v39 <= 0.0)
    v42 = 0;
  v273 = v42;
  if ((v30 + 2 * *(v34 - 2) + v42) != -v35)
  {
    v230 = v34;
    v231 = a2 + 40 * a8;
    v232 = *(_QWORD *)(a5 + 456);
    v233 = a1;
    v234 = a3;
    v235 = a4;
    v43 = 0;
    v44 = 0;
    v275 = 0;
    v238 = *(_QWORD *)(a5 + 80) + 4 * *(unsigned int *)(v34 - 7);
    v239 = v254 + 96 * a8;
    v45 = (float *)(*(_QWORD *)(a5 + 208) + 32 * a8);
    v46 = (float)(v39 * v26)
        * (float)(sqrtf((float)((float)(v45[1] * v45[1]) + (float)(*v45 * *v45)) + (float)(v45[2] * v45[2]))
                + sqrtf((float)((float)(v45[5] * v45[5]) + (float)(v45[4] * v45[4])) + (float)(v45[6] * v45[6])));
    v47 = a2 + 40 * *(unsigned int *)(v37 + 32);
    v48 = *(float **)(v47 + 16);
    v253 = v47 + 16;
    v49 = v38[4] + v38[4];
    v50 = v38[5] + v38[5];
    v51 = v38[7];
    v52 = v48[1];
    v53 = v48[2];
    v54 = v48[3];
    v248 = v38[6] + v38[6];
    v225 = v54 * (float)((float)(v53 * v49) - (float)(*v48 * v248));
    v227 = v54 * (float)((float)(v52 * v248) - (float)(v53 * v50));
    v263 = v49;
    v261 = v50;
    v224 = v54 * (float)((float)(*v48 * v50) - (float)(v52 * v49));
    v56 = v38[2];
    v55 = v38[3];
    v57 = v38[1];
    v58 = (float)((float)((float)(*v48 * v55) + (float)(v54 * *v38)) + (float)(v52 * v56)) - (float)(v57 * v53);
    v59 = (float)((float)(v52 * v55) + (float)(v54 * v57)) + (float)(v53 * *v38);
    v60 = -v56;
    v61 = v59 - (float)(v56 * *v48);
    v62 = (float)((float)(v53 * v55) + (float)(v54 * v56)) + (float)(*v48 * v57);
    v246 = v54;
    v256 = v53;
    v63 = (float)((float)((float)(v54 * v55) - (float)(*v48 * *v38)) - (float)(v52 * v57)) - (float)(v53 * v56);
    v64 = *(float **)(v231 + 16);
    v252 = v231 + 16;
    v65 = v38[10];
    v66 = v38[11] + v38[11];
    v67 = v64[1];
    v68 = v64[2];
    v69 = v64[3];
    v71 = v38[8];
    v70 = v38[9];
    v72 = (float)((float)((float)(*v64 * v65) + (float)(v69 * v51)) + (float)(v67 * v70)) - (float)(v71 * v68);
    v73 = (float)((float)(v67 * v65) + (float)(v69 * v71)) + (float)(v68 * v51);
    v74 = (float)((float)((float)(v68 * v65) + (float)(v69 * v70)) + (float)(*v64 * v71)) - (float)(v51 * v67);
    v75 = (float)((float)(v69 * v65) - (float)(*v64 * v51)) - (float)(v67 * v71);
    v76 = v38[12] + v38[12];
    a16.f32[0] = v38[13] + v38[13];
    *(float *)&a13 = v73 - (float)(v70 * *v64);
    v77 = v75 - (float)(v68 * v70);
    _Q6.f32[0] = v69 * (float)((float)(v67 * a16.f32[0]) - (float)(v68 * v76));
    v250 = *v48;
    v202 = -(float)(v59 + (float)(v60 * *v48));
    v222 = v69;
    v223 = a16.f32[0];
    v242 = v68;
    v244 = v67;
    v218 = v69 * (float)((float)(v68 * v66) - (float)(*v64 * a16.f32[0]));
    v219 = _Q6.f32[0];
    v259 = v52;
    v220 = -(float)(v62 + (float)((float)-*v38 * v52));
    v221 = v76;
    v229 = v66;
    v240 = *v64;
    v78 = v39 <= 0.0;
    *(float *)&_D5 = (float)(v63 * v72) - (float)(v58 * v77);
    v208 = v61;
    v209 = v62 - (float)(*v38 * v52);
    v216 = (float)(v63 * *(float *)&a13) - (float)(v61 * v77);
    v217 = v69 * (float)((float)(*v64 * v76) - (float)(v67 * v66));
    v203 = v77;
    v204 = v63;
    v206 = v58;
    v207 = v74;
    v205 = *(float *)&a13;
    v200 = (float)((float)(v63 * v74) - (float)(v209 * v77)) - (float)(v58 * *(float *)&a13);
    v201 = *(float *)&_D5;
    v79 = 0.0;
    if (v78)
      v46 = 0.0;
    v236 = a7;
    if (!(_DWORD)a7)
      v79 = 1.0;
    v257 = v79;
    v258 = v46;
    v80 = (char *)v38 + 258;
    v81 = v38 + 29;
    v82 = v38 + 14;
    v210 = v48[4];
    v211 = v48[5];
    v212 = v48[6];
    v213 = v64[4];
    v214 = v64[5];
    v215 = v64[6];
    while (!v80[v43])
    {
LABEL_48:
      ++v43;
      v81 += 4;
      v82 += 2;
      if (v43 == 3)
      {
        v237 = v21;
        v113 = 0;
        v114 = (float)(v246 * v246) + -0.5;
        v115 = v227 + (float)(v263 * v114);
        v116 = v225 + (float)(v261 * v114);
        v117 = (float)(v222 * v222) + -0.5;
        v118 = v219 + (float)(v229 * v117);
        v119 = v218 + (float)(v221 * v117);
        v226 = v216 + (float)(v220 * v72);
        v228 = v72;
        v120 = (float)((float)(v261 * v259) + (float)(v250 * v263)) + (float)(v256 * v248);
        v251 = v210 + (float)(v115 + (float)(v250 * v120));
        v247 = v212 + (float)((float)(v224 + (float)(v248 * v114)) + (float)(v256 * v120));
        v249 = v211 + (float)(v116 + (float)(v259 * v120));
        v121 = (float)((float)(v221 * v244) + (float)(v240 * v229)) + (float)(v242 * v223);
        v122 = (float)(v217 + (float)(v223 * v117)) + (float)(v242 * v121);
        v243 = v214 + (float)(v119 + (float)(v244 * v121));
        v245 = v213 + (float)(v118 + (float)(v240 * v121));
        v241 = v215 + v122;
        v123 = (char *)v38 + 261;
        v124 = v38 + 38;
        v125 = v38 + 20;
        v126 = 1.0;
        v24 = a11;
        while (!v123[v113])
        {
LABEL_91:
          ++v113;
          v124 += 4;
          v125 += 2;
          if (v113 == 3)
          {
            v21 = v237;
            if (*v230)
            {
              v173 = (float)(v206 * v203) + (float)(v204 * v228);
              v174 = (float)(v208 * v203) + (float)(v204 * v205);
              v175 = (float)(v209 * v203) + (float)(v204 * v207);
              v176 = (float)((float)(v208 * v205) + (float)(v206 * v228)) + (float)(v209 * v207);
              v177 = (float)(v204 * v203) - v176;
              v178 = (float)(v208 * v228) + (float)(v206 * v205);
              v179 = (float)(v209 * v228) + (float)(v206 * v207);
              v180 = (float)((float)((float)(v206 * v228) + (float)(v206 * v228)) + v177) * 0.5;
              *(float *)v285 = v180;
              *(float *)&v285[4] = (float)(v175 + v178) * 0.5;
              v181 = (float)(v208 * v207) + (float)(v209 * v205);
              v182 = (float)(v178 - v175) * 0.5;
              *(float *)&a13 = (float)((float)((float)(v208 * v205) + (float)(v208 * v205)) + v177) * 0.5;
              *(float *)&v285[8] = (float)(v179 - v174) * 0.5;
              v286 = v182;
              v287.f32[0] = *(float *)&a13;
              v287.f32[1] = (float)(v173 + v181) * 0.5;
              v183 = (float)((float)(v209 * v207) + (float)(v209 * v207)) + v177;
              v184 = (float)(v179 + v174) * 0.5;
              a16.f32[0] = (float)(v181 - v173) * 0.5;
              *(float *)&_D5 = v183 * 0.5;
              v288 = v184;
              v289 = a16.i32[0];
              v290 = v183 * 0.5;
              _Q6.f32[0] = (float)(v204 * v203) + v176;
              if (_Q6.f32[0] == 0.0)
              {
                _Q6.i64[0] = 0x3400000034000000;
                *(float *)&a13 = *(float *)&a13 + 0.00000011921;
                *(float *)v285 = v180 + 0.00000011921;
                v287.i32[0] = LODWORD(a13);
                v290 = *(float *)&_D5 + 0.00000011921;
              }
              v185 = 0;
              v284[0] = -(float)((float)(v201 + (float)(v202 * v207)) + (float)(v205 * v209));
              v284[1] = -(float)(v226 + (float)(v207 * v206));
              v284[2] = -(float)(v200 + (float)(v228 * v208));
              v186 = v24 * v23;
              v187 = (unsigned __int32 *)&v285[8];
              do
              {
                if (!*((_BYTE *)v38 + v185 + 258))
                {
                  _Q1.i64[0] = *((_QWORD *)v187 - 1);
                  v274 = *(float32x2_t *)_Q1.f32;
                  a12.i32[0] = *v187;
                  v269 = a12.f32[0];
                  v188 = v284[v185];
                  v189 = *v271;
                  v190.n128_u64[0] = _Q1.i64[0];
                  v190.n128_u64[1] = *v187;
                  v191.n128_u64[0] = vnegq_f32(_Q1).u64[0];
                  v277 = 0u;
                  v278 = v190;
                  v190.n128_f32[0] = -a12.f32[0];
                  v191.n128_f32[2] = -a12.f32[0];
                  v191.n128_u32[3] = 0;
                  v276[0] = 0u;
                  v276[1] = v191;
                  physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(a2, a6, (_QWORD *)a5, v189, v277.f32, (uint64_t)v281, a8, (float32x2_t *)v276, v190, v191, (float32x4_t)0, a12, a13, _D5, _Q6, a16, (uint64_t)&v279);
                  v192 = v282;
                  *(float *)&a13 = v283;
                  v193 = v280.i64[0];
                  LODWORD(_D5) = v280.i32[2];
                  a16.f32[0] = (float)(vmlas_n_f32(vmuls_lane_f32(v282.f32[1], v274, 1), v282.f32[0], v274.f32[0])
                                     + (float)(v283 * v269))
                             - (float)(vmlas_n_f32(vmuls_lane_f32(v280.f32[1], v274, 1), v280.f32[0], v274.f32[0])
                                     + (float)(v280.f32[2] * v269));
                  _Q6.i32[0] = 0;
                  if (a16.f32[0] > 0.00001)
                    _Q6.f32[0] = 1.0 / (float)(a16.f32[0] + v22);
                  v194 = *(_DWORD *)(a5 + 248);
                  *(_DWORD *)(a5 + 248) = v194 + 1;
                  v195 = *(_QWORD *)(a5 + 240) + 80 * v194;
                  *(float32x2_t *)(v195 + 48) = v274;
                  *(float32x2_t *)v195 = v192;
                  *(_DWORD *)(v195 + 8) = LODWORD(a13);
                  *(_QWORD *)(v195 + 12) = *(_QWORD *)v281;
                  *(_DWORD *)(v195 + 20) = *(_DWORD *)&v281[8];
                  *(_QWORD *)(v195 + 24) = v193;
                  *(_DWORD *)(v195 + 32) = LODWORD(_D5);
                  *(_QWORD *)(v195 + 36) = v279.i64[0];
                  *(_DWORD *)(v195 + 44) = v279.i32[2];
                  *(float *)(v195 + 56) = v269;
                  *(_DWORD *)(v195 + 60) = _Q6.i32[0];
                  *(float *)(v195 + 64) = v188;
                  *(float *)(v195 + 68) = v186;
                  v31 = a8;
                }
                ++v185;
                v187 += 3;
              }
              while (v185 != 3);
              v19 = v235;
              v16 = v236;
              v20 = v234;
              v24 = a11;
            }
            else
            {
              v19 = v235;
              v16 = v236;
              v20 = v234;
            }
            v32 = v232;
            a1 = v233;
            v40 = v275;
            result = (uint64_t *)v231;
            goto LABEL_109;
          }
        }
        if (v124[2] <= 0.0)
        {
          v127 = 0;
        }
        else
        {
          if (*v124 > 0.0)
          {
            v127 = 1;
            goto LABEL_67;
          }
          v127 = v124[1] > 0.0;
        }
        if (v123[v113] != 1 && v273 == 0 && !v127)
          goto LABEL_90;
LABEL_67:
        v130 = *(_QWORD *)(a5 + 352) + 76 * v31 + 24 * v44;
        _Q6.i64[0] = *(_QWORD *)(v130 + 12);
        LODWORD(_D5) = *(_DWORD *)(v130 + 20);
        _Q0.n128_f32[0] = v251 - *(float *)(*(_QWORD *)v253 + 16);
        v131 = v247 - *(float *)(*(_QWORD *)v253 + 24);
        v266 = vmlas_n_f32(-(float)(_Q0.n128_f32[0] * *(float *)&_D5), v131, _Q6.f32[0]);
        v268 = vmuls_lane_f32(-v131, *(float32x2_t *)_Q6.f32, 1)
             + (float)((float)(v249 - *(float *)(*(_QWORD *)v253 + 20)) * *(float *)&_D5);
        __asm { FMLA            S1, S0, V6.S[1] }
        v135 = _Q1.i32[0];
        v264 = _Q1.f32[0];
        _Q0.n128_f32[0] = v245 - *(float *)(*(_QWORD *)v252 + 16);
        _Q1.f32[0] = v243 - *(float *)(*(_QWORD *)v252 + 20);
        v136 = v241 - *(float *)(*(_QWORD *)v252 + 24);
        v137 = vmuls_lane_f32(-v136, *(float32x2_t *)_Q6.f32, 1);
        v138 = v137 + (float)(_Q1.f32[0] * *(float *)&_D5);
        v139 = -(float)(_Q0.n128_f32[0] * *(float *)&_D5);
        *(float *)&_D5 = -(float)((float)(v136 * _Q6.f32[0]) - (float)(_Q0.n128_f32[0] * *(float *)&_D5));
        v140 = vmlas_n_f32(v139, v136, _Q6.f32[0]);
        v141.i64[0] = _Q6.i64[0];
        v260 = _Q6;
        v262 = *(float *)(v130 + 20);
        v141.i64[1] = LODWORD(v262);
        *(float *)&a13 = -(float)((float)((float)-_Q1.f32[0] * _Q6.f32[0]) + (float)(_Q0.n128_f32[0] * _Q6.f32[1]));
        v142.i64[0] = __PAIR64__(LODWORD(v266), LODWORD(v268));
        v143 = *v271;
        v142.i64[1] = v135;
        _Q1.f32[0] = -(float)(v137 + (float)(_Q1.f32[0] * v262));
        v144.i64[0] = vnegq_f32(v260).u64[0];
        v144.f32[2] = -v262;
        v144.i32[3] = 0;
        v145.i64[0] = __PAIR64__(LODWORD(_D5), _Q1.u32[0]);
        v279 = v141;
        v280 = v142;
        v145.i64[1] = LODWORD(a13);
        __asm { FMLA            S15, S0, V19.S[1] }
        v277 = v144;
        v278 = (__n128)v145;
        physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(a2, a6, (_QWORD *)a5, v143, v279.f32, (uint64_t)v285, a8, (float32x2_t *)&v277, _Q0, (__n128)_Q1, v141, v144, a13, _D5, v142, v145, (uint64_t)v281);
        _S19 = v262;
        LODWORD(a13) = *(_DWORD *)v285;
        *(_QWORD *)&_Q2 = *(_QWORD *)&v285[4];
        __asm { FMLA            S0, S19, V2.S[1] }
        *(float32x2_t *)a12.f32 = v287;
        v149 = v288;
        _Q6.i32[0] = *(_DWORD *)v281;
        _D5 = *(double *)&v281[4];
        __asm { FMLA            S1, S19, V5.S[1] }
        v150 = v282;
        a16.f32[0] = v283;
        _Q0.n128_f32[0] = (float)(_Q0.n128_f32[0]
                                + (float)(vmlas_n_f32(vmuls_lane_f32(v266, v287, 1), v268, v287.f32[0])
                                        + (float)(v288 * v264)))
                        - (float)(_Q1.f32[0]
                                + (float)(vmlas_n_f32(vmuls_lane_f32(v140, v282, 1), v138, v282.f32[0])
                                        + (float)(v283 * _S15)));
        _Q1.i32[0] = 0;
        if (_Q0.n128_f32[0] > 0.00001)
          _Q1.f32[0] = v126 / (float)(_Q0.n128_f32[0] + v22);
        v151 = *(_DWORD *)(a5 + 232);
        *(_DWORD *)(a5 + 232) = v151 + 1;
        v152 = *(_QWORD *)(a5 + 224);
        v153 = v152 + 176 * v151;
        *(_DWORD *)(v153 + 96) = _Q1.i32[0];
        *(_DWORD *)(v153 + 100) = _Q0.n128_u32[0];
        *(_QWORD *)v153 = v260.i64[0];
        *(float *)(v153 + 8) = v262;
        *(float *)(v153 + 12) = v268;
        *(float *)(v153 + 16) = v266;
        *(float *)(v153 + 20) = v264;
        *(_QWORD *)(v153 + 24) = v260.i64[0];
        a12.i64[1] = __PAIR64__(LODWORD(a13), LODWORD(v149));
        *(float *)(v153 + 32) = v262;
        *(float *)(v153 + 36) = v138;
        *((float32x2_t *)&_Q2 + 1) = v150;
        *(float *)(v153 + 40) = v140;
        *(float *)(v153 + 44) = _S15;
        a16.i32[1] = _Q6.i32[0];
        *(double *)&a16.i64[1] = _D5;
        *(float32x4_t *)(v153 + 48) = a12;
        *(_OWORD *)(v153 + 64) = _Q2;
        *(float32x4_t *)(v153 + 80) = a16;
        *(float *)(v153 + 120) = v23;
        *(_BYTE *)(v153 + 168) = 1;
        *(_QWORD *)(v153 + 112) = 0;
        *(_DWORD *)(v153 + 160) = 0;
        *(float *)(v153 + 156) = v258;
        *(float *)(v153 + 164) = v257;
        if (v123[v113] == 1)
          v154 = *(_QWORD *)v125;
        else
          v154 = 0x7F7FFFFFFF7FFFFFLL;
        v24 = a11;
        v31 = a8;
        *(_QWORD *)(v152 + 176 * v151 + 104) = v154;
        if (!v127)
        {
          v162 = v152 + 176 * v151;
          _Q0.n128_u8[4] = 0;
          _Q0.n128_u8[5] = 0;
          _Q0.n128_u8[6] = 0;
          _Q0.n128_u8[7] = 0;
          _Q0.n128_u8[8] = 0;
          _Q0.n128_u8[9] = 0;
          _Q0.n128_u8[10] = 0;
          _Q0.n128_u8[11] = 0;
          _Q0.n128_u8[12] = 0;
          _Q0.n128_u8[13] = 0;
          _Q0.n128_u8[14] = 0;
          _Q0.n128_u8[15] = 0;
          *(_OWORD *)(v162 + 140) = 0u;
          *(_OWORD *)(v162 + 124) = 0u;
          goto LABEL_89;
        }
        v155 = *(float *)(v254 + 96 * a8 + 4 * v44 + 12);
        if (v123[v113] == 1)
        {
          v156 = *v125;
          if (*v125 <= v155)
            v156 = *(float *)(v254 + 96 * a8 + 4 * v44 + 12);
          if (v125[1] >= v156)
            v155 = v156;
          else
            v155 = v125[1];
        }
        v157 = -*(float *)(v239 + 4 * v44);
        v158 = *(float *)(v238 + 4 * v44);
        v159 = *((_DWORD *)v124 + 3);
        if (v159 == 2)
        {
          v161 = 0.0;
          v160 = 1.0e25;
LABEL_84:
          v163 = (float)(v161 + (float)(v25 * v160)) * v25;
          v164 = (float)((float)((float)(v155 - v158) * v160) + (float)(v161 * v157)) * v25;
          v165 = (float)(v161 + (float)(v26 * v160)) * v26;
        }
        else
        {
          if (v159 == 3)
          {
            v160 = 0.0;
            v161 = 1.0e25;
            goto LABEL_84;
          }
          v171 = v124[1];
          v163 = (float)(v171 + (float)(v25 * *v124)) * v25;
          v164 = (float)((float)((float)(v155 - v158) * *v124) + (float)(v171 * v157)) * v25;
          v165 = (float)(v171 + (float)(v26 * *v124)) * v26;
          if (v159 == 1)
          {
            v166 = 1.0 / (float)(v163 + 1.0);
            v167 = 1.0 / (float)(v165 + 1.0);
            v172 = v152 + 176 * v151;
            *(float *)(v172 + 124) = _Q1.f32[0] * (float)(v164 * v166);
            *(float *)(v172 + 136) = _Q1.f32[0] * (float)-(float)(v166 * v163);
            v169 = _Q1.f32[0] * (float)(v165 * v167);
            goto LABEL_88;
          }
          v166 = 0.0;
          v167 = 0.0;
          v169 = 0.0;
          if (v159)
          {
LABEL_88:
            v126 = 1.0;
            v170 = v152 + 176 * v151;
            *(_DWORD *)(v170 + 128) = 0;
            *(float *)(v170 + 132) = v158;
            *(float *)(v170 + 144) = 1.0 - v166;
            *(float *)(v170 + 148) = v124[2] * v237;
            *(_DWORD *)(v170 + 152) = 0;
            *(float *)(v170 + 140) = (float)((float)(1.0 - v167) * (float)(_Q0.n128_f32[0] * v169)) * v23;
LABEL_89:
            v275 |= 1 << v44;
LABEL_90:
            ++v44;
            goto LABEL_91;
          }
        }
        v166 = 0.0;
        v167 = 0.0;
        if (_Q0.n128_f32[0] > 0.0)
        {
          v166 = 1.0 / (float)((float)(v163 * _Q0.n128_f32[0]) + 1.0);
          v167 = 1.0 / (float)((float)(v165 * _Q0.n128_f32[0]) + 1.0);
        }
        v168 = v152 + 176 * v151;
        *(float *)(v168 + 124) = v164 * v166;
        *(float *)(v168 + 136) = -(float)(v166 * v163);
        v169 = v165 * v167;
        goto LABEL_88;
      }
    }
    v83 = *v81;
    if (v80[v43] != 1 && v273 == 0 && LODWORD(v83) == 4)
    {
LABEL_47:
      ++v44;
      goto LABEL_48;
    }
    v86 = *(_QWORD *)(a5 + 352) + 76 * v31 + 24 * v44;
    _Q1.i64[0] = *(_QWORD *)v86;
    a12.i32[0] = *(_DWORD *)(v86 + 8);
    v265 = a12.f32[0];
    v267 = *(float32x2_t *)v86;
    v87 = *v271;
    v88.n128_u64[0] = *(_QWORD *)v86;
    v88.n128_u64[1] = a12.u32[0];
    v89.n128_u64[0] = vnegq_f32(_Q1).u64[0];
    v279 = 0u;
    v280 = (float32x4_t)v88;
    v88.n128_f32[0] = -a12.f32[0];
    v89.n128_f32[2] = -a12.f32[0];
    v89.n128_u32[3] = 0;
    v277 = 0u;
    v278 = v89;
    physx::Dy::FeatherstoneArticulation::getImpulseSelfResponse(a2, a6, (_QWORD *)a5, v87, v279.f32, (uint64_t)v285, a8, (float32x2_t *)&v277, v88, v89, (float32x4_t)0, a12, a13, _D5, _Q6, a16, (uint64_t)v281);
    v90 = v287.i32[1];
    LODWORD(_D5) = v287.i32[0];
    _Q6.f32[0] = v288;
    v91 = v282;
    a16.f32[0] = v283;
    _Q0.n128_f32[0] = (float)(vmlas_n_f32(vmuls_lane_f32(v287.f32[1], v267, 1), v287.f32[0], v267.f32[0])
                            + (float)(v288 * v265))
                    - (float)(vmlas_n_f32(vmuls_lane_f32(v282.f32[1], v267, 1), v282.f32[0], v267.f32[0])
                            + (float)(v283 * v265));
    _Q1.i32[0] = 0;
    if (_Q0.n128_f32[0] > 0.00001)
      _Q1.f32[0] = 1.0 / (float)(_Q0.n128_f32[0] + v22);
    v92 = *(_DWORD *)(a5 + 232);
    *(_DWORD *)(a5 + 232) = v92 + 1;
    v93 = *(_QWORD *)(a5 + 224);
    v94 = v93 + 176 * v92;
    *(_DWORD *)(v94 + 100) = _Q0.n128_u32[0];
    *(_QWORD *)v94 = 0;
    *(_DWORD *)(v94 + 8) = 0;
    *(float32x2_t *)(v94 + 12) = v267;
    *(float *)(v94 + 20) = v265;
    *(_QWORD *)(v94 + 24) = 0;
    *(_DWORD *)(v94 + 32) = 0;
    *(float32x2_t *)(v94 + 36) = v267;
    *(float *)(v94 + 44) = v265;
    *(_DWORD *)(v94 + 48) = LODWORD(_D5);
    *(_DWORD *)(v94 + 52) = v90;
    *(_DWORD *)(v94 + 56) = _Q6.i32[0];
    HIDWORD(a13) = *(_DWORD *)&v285[4];
    *(_QWORD *)(v94 + 60) = *(_QWORD *)v285;
    LODWORD(a13) = *(_DWORD *)&v285[8];
    *(_DWORD *)(v94 + 68) = *(_DWORD *)&v285[8];
    *(float32x2_t *)(v94 + 72) = v91;
    *(_DWORD *)(v94 + 80) = a16.i32[0];
    *(_QWORD *)(v94 + 84) = *(_QWORD *)v281;
    *(_DWORD *)(v94 + 92) = *(_DWORD *)&v281[8];
    *(_DWORD *)(v94 + 96) = _Q1.i32[0];
    *(float *)(v94 + 120) = v23;
    *(_BYTE *)(v94 + 168) = 0;
    if (v80[v43] == 1)
      v95 = *(_QWORD *)v82;
    else
      v95 = 0x7F7FFFFFFF7FFFFFLL;
    v31 = a8;
    v96 = v93 + 176 * v92;
    *(_QWORD *)(v96 + 104) = v95;
    *(_QWORD *)(v96 + 112) = 0;
    *(_DWORD *)(v96 + 160) = 0;
    *(float *)(v96 + 156) = v258;
    *(float *)(v96 + 164) = v257;
    if (LODWORD(v83) == 4)
    {
      v104 = v93 + 176 * v92;
      _Q0.n128_u8[4] = 0;
      _Q0.n128_u8[5] = 0;
      _Q0.n128_u8[6] = 0;
      _Q0.n128_u8[7] = 0;
      _Q0.n128_u8[8] = 0;
      _Q0.n128_u8[9] = 0;
      _Q0.n128_u8[10] = 0;
      _Q0.n128_u8[11] = 0;
      _Q0.n128_u8[12] = 0;
      _Q0.n128_u8[13] = 0;
      _Q0.n128_u8[14] = 0;
      _Q0.n128_u8[15] = 0;
      *(_OWORD *)(v104 + 140) = 0u;
      *(_OWORD *)(v104 + 124) = 0u;
LABEL_46:
      v275 |= 1 << v44;
      goto LABEL_47;
    }
    v97 = *(float *)(v254 + 96 * a8 + 4 * v44 + 12);
    if (v80[v43] == 1)
    {
      v98 = *v82;
      if (*v82 <= v97)
        v98 = *(float *)(v254 + 96 * a8 + 4 * v44 + 12);
      if (v82[1] >= v98)
        v97 = v98;
      else
        v97 = v82[1];
    }
    v99 = *(float *)(v239 + 4 * v44);
    v100 = *(float *)(v238 + 4 * v44);
    v101 = *(_DWORD *)v81;
    if (*(_DWORD *)v81 == 2)
    {
      v103 = 0.0;
      v102 = 1.0e25;
    }
    else
    {
      if (v101 != 3)
      {
        v110 = *(v81 - 3);
        v111 = *(v81 - 2);
        v105 = (float)(v111 + (float)(v25 * v110)) * v25;
        _Q6.f32[0] = (float)((float)((float)(v97 - v100) * v110) + (float)(v111 * v99)) * v25;
        v106 = (float)(v111 + (float)(v26 * v110)) * v26;
        if (v101 == 1)
        {
          *(float *)&_D5 = 1.0 / (float)(v105 + 1.0);
          a16.f32[0] = 1.0 / (float)(v106 + 1.0);
          _Q6.f32[0] = _Q1.f32[0] * (float)(_Q6.f32[0] * *(float *)&_D5);
          v112 = v93 + 176 * v92;
          *(_DWORD *)(v112 + 124) = _Q6.i32[0];
          *(float *)(v112 + 136) = _Q1.f32[0] * (float)-(float)(*(float *)&_D5 * v105);
          v108 = _Q1.f32[0] * (float)(v106 * a16.f32[0]);
        }
        else
        {
          LODWORD(_D5) = 0;
          a16.i32[0] = 0;
          v108 = 0.0;
          if (!v101)
            goto LABEL_42;
        }
LABEL_45:
        *(float *)&a13 = 1.0 - a16.f32[0];
        v109 = v93 + 176 * v92;
        *(_DWORD *)(v109 + 128) = 0;
        *(float *)(v109 + 132) = v100;
        *(float *)(v109 + 144) = 1.0 - *(float *)&_D5;
        *(float *)(v109 + 148) = *(v81 - 1) * v21;
        *(_DWORD *)(v109 + 152) = 0;
        *(float *)(v109 + 140) = (float)((float)(1.0 - a16.f32[0]) * (float)(_Q0.n128_f32[0] * v108)) * v23;
        goto LABEL_46;
      }
      v102 = 0.0;
      v103 = 1.0e25;
    }
    v105 = (float)(v103 + (float)(v25 * v102)) * v25;
    _Q6.f32[0] = (float)((float)((float)(v97 - v100) * v102) + (float)(v103 * v99)) * v25;
    v106 = (float)(v103 + (float)(v26 * v102)) * v26;
LABEL_42:
    LODWORD(_D5) = 0;
    a16.i32[0] = 0;
    if (_Q0.n128_f32[0] > 0.0)
    {
      *(float *)&_D5 = 1.0 / (float)((float)(v105 * _Q0.n128_f32[0]) + 1.0);
      a16.f32[0] = 1.0 / (float)((float)(v106 * _Q0.n128_f32[0]) + 1.0);
    }
    v107 = v93 + 176 * v92;
    *(float *)(v107 + 124) = _Q6.f32[0] * *(float *)&_D5;
    *(float *)(v107 + 136) = -(float)(*(float *)&_D5 * v105);
    v108 = v106 * a16.f32[0];
    goto LABEL_45;
  }
LABEL_109:
  *(_BYTE *)(v32 + 80 * v31 + 78) = v40;
  for (i = *result; i; i &= i - 1)
  {
    v197 = __clz(__rbit32(i));
    v198 = __clz(__rbit32(HIDWORD(i))) + 32;
    if ((_DWORD)i)
      v199 = v197;
    else
      v199 = v198;
    result = (uint64_t *)physx::Dy::FeatherstoneArticulation::setupInternalConstraintsRecursive(a1, a2, v20, v19, a5, a6, v16, v199, v26, v25, v24, v23, v22, v21);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::setupInternalConstraints(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, float32x4_t a9, float a10, float32x4_t a11, double a12, double a13, float32x4_t a14, float32x4_t a15)
{
  unsigned __int32 v20;
  float v22;
  unsigned __int32 v23;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  uint64_t i;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v20 = a11.i32[0];
  v22 = a9.f32[0];
  v23 = a8.n128_u32[0];
  v25 = result;
  *(_DWORD *)(a5 + 232) = 0;
  v26 = *(_DWORD *)(a5 + 476);
  if ((*(_DWORD *)(a5 + 236) & 0x7FFFFFFFu) < v26)
    result = physx::shdfnd::Array<physx::Dy::ArticulationInternalConstraint,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalConstraint>>::recreate(a5 + 224, v26);
  *(_DWORD *)(a5 + 248) = 0;
  v27 = *(_DWORD *)(a5 + 480);
  if ((*(_DWORD *)(a5 + 252) & 0x7FFFFFFFu) < v27)
    result = physx::shdfnd::Array<physx::Dy::ArticulationInternalLockedAxis,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalLockedAxis>>::recreate(a5 + 240, v27);
  if ((**(_BYTE **)(a5 + 488) & 2) != 0)
    v28 = v22;
  else
    v28 = 1.0;
  for (i = *a2; i; i &= i - 1)
  {
    v30 = __clz(__rbit32(i));
    v31 = __clz(__rbit32(HIDWORD(i))) + 32;
    if ((_DWORD)i)
      v32 = v30;
    else
      v32 = v31;
    a8.n128_u32[0] = v23;
    a9.f32[0] = v22;
    a11.i32[0] = v20;
    LODWORD(a12) = 953267991;
    *(float *)&a13 = v28;
    result = (uint64_t)physx::Dy::FeatherstoneArticulation::setupInternalConstraintsRecursive(v25, (uint64_t)a2, a3, a4, a5, a6, a7, v32, a8, a9, a10, a11, a12, a13, a14, a15);
  }
  return result;
}

void physx::Dy::FeatherstoneArticulation::teleportLinks(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float *v48;
  float v49;
  float *v50;
  float cosval;
  __float2 v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  float *v75;
  __float2 v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float *v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  __float2 v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float *v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  uint64_t v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;

  physx::Dy::FeatherstoneArticulation::jcalc(this, a2, 1);
  v7 = *((unsigned int *)this + 154);
  if (v7 >= 2)
  {
    v8 = *((_QWORD *)this + 76);
    v9 = *((_QWORD *)this + 79);
    v10 = *((_QWORD *)a2 + 10);
    v11 = *((_QWORD *)a2 + 42);
    v12 = (float *)(v11 + 84);
    v13 = *((_QWORD *)this + 74);
    v14 = 1;
    v15 = -0.5;
    v134 = v10;
    v135 = v9;
    v133 = v11;
    v141 = v13;
    while (1)
    {
      v16 = v8 + 40 * v14;
      v17 = *(float **)(v8 + 40 * *(unsigned int *)(v16 + 32) + 16);
      v19 = *v17;
      v18 = v17[1];
      v21 = v17[2];
      v20 = v17[3];
      v23 = v17[4];
      v22 = v17[5];
      v24 = v17[6];
      v25 = *(_QWORD *)(v16 + 24);
      LODWORD(v16) = *(unsigned __int8 *)(v25 + 270);
      v26 = (float *)(v10 + 4 * *(unsigned int *)(v9 + 80 * v14 + 72));
      v28 = *(float *)(v25 + 44);
      v27 = *(float *)(v25 + 48);
      v29 = *(float *)(v25 + 52);
      v31 = *(float *)(v25 + 16);
      v30 = *(float *)(v25 + 20);
      v32 = *(float *)(v25 + 24);
      v33 = (float *)(v13 + 16 * v14);
      v35 = *v33;
      v34 = v33[1];
      v36 = v33[2];
      v37 = v33[3];
      switch((int)v16)
      {
        case 0:
          v38 = v31 + v31;
          v39 = v30 + v30;
          v40 = v32 + v32;
          v41 = v15 + (float)(v37 * v37);
          v42 = (float)((float)((float)(v30 + v30) * v34) + (float)(v35 * (float)(v31 + v31)))
              + (float)(v36 * (float)(v32 + v32));
          v43 = -v36;
          v44 = (float)((float)(v37 * (float)((float)(v34 * v40) - (float)(v36 * (float)(v30 + v30))))
                      + (float)((float)(v31 + v31) * v41))
              + (float)(v35 * v42);
          v45 = -v35;
          v46 = (float)((float)((float)((float)(v36 * (float)(v31 + v31)) - (float)(v35 * v40)) * v37)
                      + (float)(v39 * v41))
              + (float)(v34 * v42);
          v47 = -v34;
          v48 = (float *)(v11 + 76 * v14);
          v49 = (float)((float)((float)((float)((float)(v35 * v39) - (float)(v34 * v38)) * v37) + (float)(v40 * v41))
                      + (float)(v36 * v42))
              - v29;
          v4 = (float)(v44 - v28) + (float)(*v26 * v48[3]);
          v5 = (float)(v46 - v27) + (float)(*v26 * v48[4]);
          v6 = v49 + (float)(*v26 * v48[5]);
          goto LABEL_24;
        case 1:
          v50 = (float *)(v11 + 76 * v14);
          v156 = v21;
          v158 = v18;
          v152 = v29;
          v154 = v19;
          v148 = v28;
          v150 = v27;
          v144 = v30;
          v146 = v32;
          v142 = v31;
          v52 = __sincosf_stret(*v26 * v15);
          cosval = v52.__cosval;
          v15 = -0.5;
          v19 = v154;
          v21 = v156;
          v18 = v158;
          v13 = v141;
          v53 = *v50 * v52.__sinval;
          v54 = v52.__sinval * v50[1];
          v55 = v52.__sinval * v50[2];
          if (v52.__cosval < 0.0)
          {
            v53 = -v53;
            v54 = -v54;
            v55 = -v55;
            cosval = -v52.__cosval;
          }
          v56 = (float)((float)((float)(v37 * v53) + (float)(cosval * v35)) + (float)(v54 * v36)) - (float)(v34 * v55);
          v57 = (float)((float)((float)(v37 * v54) + (float)(cosval * v34)) + (float)(v55 * v35)) - (float)(v36 * v53);
          v58 = (float)((float)((float)(v37 * v55) + (float)(cosval * v36)) + (float)(v53 * v34)) - (float)(v35 * v54);
          v59 = (float)((float)((float)(cosval * v37) - (float)(v53 * v35)) - (float)(v54 * v34)) - (float)(v55 * v36);
          v60 = sqrtf((float)((float)((float)(v57 * v57) + (float)(v56 * v56)) + (float)(v58 * v58)) + (float)(v59 * v59));
          v35 = v56 / v60;
          v34 = v57 / v60;
          v36 = v58 / v60;
          v37 = v59 / v60;
          v61 = (float)(v37 * v37) + -0.5;
          v62 = (float)((float)((float)(v144 + v144) * (float)(v57 / v60))
                      + (float)((float)(v56 / v60) * (float)(v142 + v142)))
              + (float)(v36 * (float)(v146 + v146));
          v43 = -v36;
          v63 = (float)((float)((float)(v59 / v60)
                              * (float)((float)((float)(v57 / v60) * (float)(v146 + v146))
                                      - (float)(v36 * (float)(v144 + v144))))
                      + (float)((float)(v142 + v142) * v61))
              + (float)((float)(v56 / v60) * v62);
          v45 = -(float)(v56 / v60);
          v64 = (float)((float)((float)(v59 / v60)
                              * (float)((float)(v36 * (float)(v142 + v142)) - (float)(v35 * (float)(v146 + v146))))
                      + (float)((float)(v144 + v144) * v61))
              + (float)((float)(v57 / v60) * v62);
          v47 = -(float)(v57 / v60);
          v65 = (float)((float)((float)(v59 / v60)
                              * (float)((float)(v35 * (float)(v144 + v144)) - (float)(v34 * (float)(v142 + v142))))
                      + (float)((float)(v146 + v146) * v61))
              + (float)(v36 * v62);
          v4 = v63 - v148;
          v5 = v64 - v150;
          v6 = v65 - v152;
          goto LABEL_24;
        case 2:
          v66 = *(unsigned __int8 *)(v9 + 80 * v14 + 76);
          v139 = v23;
          v140 = v33[1];
          v137 = v24;
          v138 = v22;
          v157 = v21;
          v159 = v18;
          v153 = v29;
          v155 = v19;
          v136 = v20;
          v149 = v28;
          v151 = v27;
          v145 = v30;
          v147 = v32;
          v143 = v31;
          if (v66 >= 3)
          {
            v91 = 0.0;
            v92 = v12;
            v93 = 0.0;
            v94 = 0.0;
            do
            {
              v95 = *v26++;
              v96 = v95;
              v97 = *(v92 - 2);
              v98 = *(v92 - 1);
              v99 = *v92;
              v92 += 6;
              v94 = v94 - (float)(v96 * v97);
              v93 = v93 - (float)(v96 * v98);
              v91 = v91 - (float)(v96 * v99);
              --v66;
            }
            while (v66);
            v100 = (float)((float)(v93 * v93) + (float)(v94 * v94)) + (float)(v91 * v91);
            if (v100 >= 1.0e-24)
            {
              v105 = sqrtf(v100);
              v106 = v94 * (float)(1.0 / v105);
              v107 = v93 * (float)(1.0 / v105);
              v108 = v91 * (float)(1.0 / v105);
              v109 = __sincosf_stret(v105 * 0.5);
              v101 = v109.__cosval;
              v102 = v109.__sinval * v106;
              v103 = v109.__sinval * v107;
              v104 = v109.__sinval * v108;
            }
            else
            {
              v101 = 1.0;
              v102 = 0.0;
              v103 = 0.0;
              v104 = 0.0;
            }
            v110 = sqrtf((float)((float)((float)(v103 * v103) + (float)(v102 * v102)) + (float)(v104 * v104))+ (float)(v101 * v101));
            v80 = v102 / v110;
            v81 = v103 / v110;
            v82 = v104 / v110;
            v70 = v101 / v110;
          }
          else
          {
            if (*(_BYTE *)(v9 + 80 * v14 + 76))
            {
              v67 = v11 + 76 * v14;
              v68 = v66 - 1;
              v69 = 0.0;
              v70 = 1.0;
              v71 = 0.0;
              v72 = 0.0;
              v73 = -0.5;
              do
              {
                v74 = v68;
                v75 = (float *)(v67 + 24 * v68);
                v76 = __sincosf_stret(v26[v68] * -0.5);
                v77 = *v75 * v76.__sinval;
                v78 = v76.__sinval * v75[1];
                v79 = v76.__sinval * v75[2];
                v80 = (float)((float)((float)(v72 * v76.__cosval) + (float)(v70 * v77)) + (float)(v71 * v79))
                    - (float)(v78 * v69);
                v81 = (float)((float)((float)(v71 * v76.__cosval) + (float)(v70 * v78)) + (float)(v69 * v77))
                    - (float)(v79 * v72);
                v82 = (float)((float)((float)(v69 * v76.__cosval) + (float)(v70 * v79)) + (float)(v72 * v78))
                    - (float)(v77 * v71);
                v70 = (float)((float)((float)(v70 * v76.__cosval) - (float)(v72 * v77)) - (float)(v71 * v78))
                    - (float)(v69 * v79);
                --v68;
                v69 = v82;
                v71 = v81;
                v72 = v80;
              }
              while (v74);
              goto LABEL_23;
            }
            v70 = 1.0;
            v80 = 0.0;
            v81 = 0.0;
            v82 = 0.0;
          }
          v73 = -0.5;
LABEL_23:
          v111 = (float)((float)((float)(v37 * v80) + (float)(v70 * v35)) + (float)(v81 * v36)) - (float)(v140 * v82);
          v112 = (float)((float)((float)(v37 * v81) + (float)(v70 * v140)) + (float)(v82 * v35)) - (float)(v36 * v80);
          v113 = (float)((float)((float)(v37 * v82) + (float)(v70 * v36)) + (float)(v80 * v140)) - (float)(v35 * v81);
          v114 = (float)((float)((float)(v70 * v37) - (float)(v80 * v35)) - (float)(v81 * v140)) - (float)(v82 * v36);
          v115 = sqrtf((float)((float)((float)(v112 * v112) + (float)(v111 * v111)) + (float)(v113 * v113))+ (float)(v114 * v114));
          v35 = v111 / v115;
          v34 = v112 / v115;
          v36 = v113 / v115;
          v37 = v114 / v115;
          v116 = v73 + (float)(v37 * v37);
          v117 = (float)((float)((float)(v145 + v145) * (float)(v112 / v115))
                       + (float)((float)(v111 / v115) * (float)(v143 + v143)))
               + (float)((float)(v113 / v115) * (float)(v147 + v147));
          v43 = -(float)(v113 / v115);
          v118 = (float)((float)((float)(v114 / v115)
                               * (float)((float)((float)(v112 / v115) * (float)(v147 + v147))
                                       - (float)((float)(v113 / v115) * (float)(v145 + v145))))
                       + (float)((float)(v143 + v143) * v116))
               + (float)((float)(v111 / v115) * v117);
          v45 = -(float)(v111 / v115);
          v119 = (float)((float)((float)(v114 / v115)
                               * (float)((float)((float)(v113 / v115) * (float)(v143 + v143))
                                       - (float)((float)(v111 / v115) * (float)(v147 + v147))))
                       + (float)((float)(v145 + v145) * v116))
               + (float)(v34 * v117);
          v47 = -v34;
          v120 = (float)((float)((float)(v114 / v115)
                               * (float)((float)((float)(v111 / v115) * (float)(v145 + v145))
                                       - (float)(v34 * (float)(v143 + v143))))
                       + (float)((float)(v147 + v147) * v116))
               + (float)(v36 * v117);
          v4 = v118 - v149;
          v5 = v119 - v151;
          v19 = v155;
          v6 = v120 - v153;
          v10 = v134;
          v9 = v135;
          v11 = v133;
          v13 = v141;
          v15 = -0.5;
          v22 = v138;
          v23 = v139;
          v20 = v136;
          v24 = v137;
          v21 = v157;
          v18 = v159;
LABEL_24:
          v121 = *(float **)(v8 + 40 * v14 + 16);
          v122 = (float)((float)((float)(v19 * v37) + (float)(v20 * v45)) + (float)(v18 * v43)) + (float)(v34 * v21);
          v123 = (float)((float)((float)(v18 * v37) + (float)(v20 * v47)) + (float)(v21 * v45)) + (float)(v36 * v19);
          v124 = (float)((float)((float)(v21 * v37) + (float)(v20 * v43)) + (float)(v19 * v47)) + (float)(v35 * v18);
          v125 = (float)((float)((float)(v19 * v35) + (float)(v20 * v37)) + (float)(v18 * v34)) + (float)(v21 * v36);
          v126 = sqrtf((float)((float)((float)(v123 * v123) + (float)(v122 * v122)) + (float)(v124 * v124))+ (float)(v125 * v125));
          v127 = v122 / v126;
          v128 = v123 / v126;
          v129 = v124 / v126;
          v130 = v125 / v126;
          *v121 = v127;
          v121[1] = v128;
          v121[2] = v129;
          v121[3] = v130;
          v131 = v15 + (float)(v130 * v130);
          v132 = (float)((float)((float)(v5 + v5) * v128) + (float)(v127 * (float)(v4 + v4)))
               + (float)(v129 * (float)(v6 + v6));
          v121[4] = v23
                  + (float)((float)((float)(v130
                                          * (float)((float)(v128 * (float)(v6 + v6)) - (float)(v129 * (float)(v5 + v5))))
                                  + (float)((float)(v4 + v4) * v131))
                          + (float)(v127 * v132));
          v121[5] = v22
                  + (float)((float)((float)(v130
                                          * (float)((float)(v129 * (float)(v4 + v4)) - (float)(v127 * (float)(v6 + v6))))
                                  + (float)((float)(v5 + v5) * v131))
                          + (float)(v128 * v132));
          v121[6] = v24
                  + (float)((float)((float)(v130
                                          * (float)((float)(v127 * (float)(v5 + v5)) - (float)(v128 * (float)(v4 + v4))))
                                  + (float)((float)(v6 + v6) * v131))
                          + (float)(v129 * v132));
          ++v14;
          v12 += 19;
          if (v14 == v7)
            return;
          break;
        case 3:
          v83 = v31 + v31;
          v84 = v30 + v30;
          v85 = v32 + v32;
          v86 = v15 + (float)(v37 * v37);
          v87 = (float)((float)((float)(v30 + v30) * v34) + (float)(v35 * (float)(v31 + v31)))
              + (float)(v36 * (float)(v32 + v32));
          v43 = -v36;
          v88 = (float)((float)(v37 * (float)((float)(v34 * v85) - (float)(v36 * (float)(v30 + v30))))
                      + (float)((float)(v31 + v31) * v86))
              + (float)(v35 * v87);
          v45 = -v35;
          v89 = (float)((float)((float)((float)(v36 * (float)(v31 + v31)) - (float)(v35 * v85)) * v37)
                      + (float)(v84 * v86))
              + (float)(v34 * v87);
          v47 = -v34;
          v90 = (float)((float)((float)((float)(v35 * v84) - (float)(v34 * v83)) * v37) + (float)(v85 * v86))
              + (float)(v36 * v87);
          v4 = v88 - v28;
          v5 = v89 - v27;
          v6 = v90 - v29;
          goto LABEL_24;
        default:
          v45 = -v35;
          v47 = -v34;
          v43 = -v36;
          goto LABEL_24;
      }
    }
  }
}

void physx::Dy::FeatherstoneArticulation::jcalc(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2, int a3)
{
  BOOL v3;
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  float *v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float *v87;
  float *v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;

  if (*((_BYTE *)this + 161))
    v3 = 0;
  else
    v3 = a3 == 0;
  if (!v3)
  {
    v5 = *((unsigned int *)a2 + 110);
    if (v5 >= 2)
    {
      v6 = 0;
      v7 = 0;
      v8 = *((_QWORD *)a2 + 57);
      v9 = *((_QWORD *)a2 + 58);
      v10 = v8 + 80;
      v11 = (float *)(v8 + 88);
      v12 = *((_QWORD *)a2 + 54);
      v13 = 96;
      v14 = 1;
      while (1)
      {
        v15 = *(_QWORD *)(v12 + 40 * v14 + 24);
        v16 = *(_BYTE *)(v15 + 269);
        if ((v16 & 1) != 0 || a3)
        {
          v17 = 0;
          v18 = v8 + 80 * v14;
          *(_WORD *)(v18 + 76) = 0;
          v19 = (unsigned __int8 *)(v18 + 76);
          v19[3] = 0;
          v20 = v19 + 3;
          v21 = v15 + 258;
          do
          {
            if (*(_BYTE *)(v21 + v17))
            {
              v22 = *v19;
              *(_DWORD *)(v10 + 24 * v22 + 4 * v17) = 1065353216;
              if (*(_BYTE *)(v21 + v17) == 1)
                ++v19[1];
              *v19 = v22 + 1;
              *(_BYTE *)(v15 + v22 + 252) = v17;
            }
            ++v17;
          }
          while (v17 != 6);
          *v20 = 0;
          if (*(_BYTE *)(v15 + 270) == 2 && *v19 == 2)
          {
            for (i = 0; i != 3; ++i)
            {
              if (!*(_BYTE *)(v15 + 258 + i))
              {
                v24 = *v19;
                *(_DWORD *)(v10 + 24 * v24 + 4 * i) = 1065353216;
                *v19 = v24 + 1;
                *(_BYTE *)(v15 + v24 + 252) = i;
                ++*v20;
              }
            }
          }
          v16 = *(_BYTE *)(v15 + 269) & 0xFE;
          *(_BYTE *)(v15 + 269) = v16;
        }
        v25 = *((_QWORD *)a2 + 42);
        if ((v16 & 2) != 0 || a3)
        {
          v26 = *(float *)(v15 + 4);
          v27 = *(float *)(v15 + 8);
          v28 = *(float *)(v15 + 12);
          v29 = *(float *)(v15 + 28);
          v30 = *(float *)(v15 + 32);
          v32 = *(float *)(v15 + 36);
          v31 = *(float *)(v15 + 40);
          v33 = (float)((float)((float)(v28 * v29) - (float)(v31 * *(float *)v15)) - (float)(v30 * v27))
              + (float)(v26 * v32);
          v34 = (float)((float)((float)(v28 * v30) - (float)(v31 * v26)) - (float)(v32 * *(float *)v15))
              + (float)(v27 * v29);
          v35 = (float)((float)((float)(v28 * v32) - (float)(v31 * v27)) - (float)(v29 * v26))
              + (float)(*(float *)v15 * v30);
          v36 = (float)((float)((float)(*(float *)v15 * v29) + (float)(v31 * v28)) + (float)(v30 * v26))
              + (float)(v32 * v27);
          v37 = sqrtf((float)((float)((float)(v34 * v34) + (float)(v33 * v33)) + (float)(v35 * v35)) + (float)(v36 * v36));
          v38 = (float *)(*((_QWORD *)this + 74) + 16 * v14);
          *v38 = v33 / v37;
          v38[1] = v34 / v37;
          v38[2] = v35 / v37;
          v38[3] = v36 / v37;
          v39 = (float *)(v8 + 80 * v14);
          v40 = v25 + 76 * v14;
          v41 = *(float *)(v15 + 44);
          v42 = *(float *)(v15 + 48);
          v43 = -v41;
          v44 = -v42;
          v45 = *(float *)(v15 + 52);
          v46 = -v45;
          switch(*(_BYTE *)(v15 + 270))
          {
            case 0:
              v47 = v39[3] + v39[3];
              v48 = v39[4] + v39[4];
              v49 = v39[5] + v39[5];
              v51 = *(float *)(v15 + 36);
              v50 = *(float *)(v15 + 40);
              v52 = (float)(v50 * v50) + -0.5;
              v53 = *(float *)(v15 + 28);
              v54 = *(float *)(v15 + 32);
              v55 = (float)((float)(v48 * v54) + (float)(v53 * v47)) + (float)(v51 * v49);
              v56 = (float)((float)(v50 * (float)((float)(v54 * v49) - (float)(v51 * v48))) + (float)(v47 * v52))
                  + (float)(v53 * v55);
              v57 = (float)((float)(v50 * (float)((float)(v51 * v47) - (float)(v53 * v49))) + (float)(v48 * v52))
                  + (float)(v54 * v55);
              v58 = (float)((float)(v50 * (float)((float)(v53 * v48) - (float)(v54 * v47))) + (float)(v49 * v52))
                  + (float)(v51 * v55);
              v59 = (float)((float)(v57 * v57) + (float)(v56 * v56)) + (float)(v58 * v58);
              v60 = 0.0;
              v61 = 0.0;
              v62 = 0.0;
              if (v59 > 0.0)
              {
                v63 = 1.0 / sqrtf(v59);
                v60 = v56 * v63;
                v61 = v57 * v63;
                v62 = v58 * v63;
              }
              *(_DWORD *)(v25 + 76 * v14 + 72) = 1;
              *(_QWORD *)v40 = 0;
              *(_DWORD *)(v40 + 8) = 0;
              *(float *)(v40 + 12) = v60;
              *(float *)(v40 + 16) = v61;
              *(float *)(v40 + 20) = v62;
              break;
            case 1:
              v64 = *v39 + *v39;
              v65 = v39[1] + v39[1];
              v66 = v39[2] + v39[2];
              v68 = *(float *)(v15 + 36);
              v67 = *(float *)(v15 + 40);
              v69 = (float)(v67 * v67) + -0.5;
              v70 = *(float *)(v15 + 28);
              v71 = *(float *)(v15 + 32);
              v72 = (float)((float)(v65 * v71) + (float)(v70 * v64)) + (float)(v68 * v66);
              v73 = (float)((float)(v67 * (float)((float)(v71 * v66) - (float)(v68 * v65))) + (float)(v64 * v69))
                  + (float)(v70 * v72);
              v74 = (float)((float)(v67 * (float)((float)(v68 * v64) - (float)(v70 * v66))) + (float)(v65 * v69))
                  + (float)(v71 * v72);
              v75 = (float)((float)(v67 * (float)((float)(v70 * v65) - (float)(v71 * v64))) + (float)(v66 * v69))
                  + (float)(v68 * v72);
              v76 = (float)((float)(v74 * v74) + (float)(v73 * v73)) + (float)(v75 * v75);
              v77 = 0.0;
              v78 = 0.0;
              v79 = 0.0;
              if (v76 > 0.0)
              {
                v80 = 1.0 / sqrtf(v76);
                v77 = v73 * v80;
                v78 = v74 * v80;
                v79 = v75 * v80;
              }
              *(_DWORD *)(v25 + 76 * v14 + 72) = 1;
              *(float *)v40 = v77;
              *(float *)(v40 + 4) = v78;
              *(float *)(v40 + 8) = v79;
              *(float *)(v40 + 12) = (float)(v42 * v79) + (float)(v78 * v46);
              *(float *)(v40 + 16) = (float)(v45 * v77) + (float)(v79 * v43);
              *(float *)(v40 + 20) = (float)(v41 * v78) + (float)(v77 * v44);
              break;
            case 2:
              v81 = *(unsigned __int8 *)(v8 + 80 * v14 + 76);
              *(_DWORD *)(v25 + 76 * v14 + 72) = v81;
              if ((_DWORD)v81)
              {
                v83 = *(float *)(v15 + 36);
                v82 = *(float *)(v15 + 40);
                v84 = (float)(v82 * v82) + -0.5;
                v85 = *(float *)(v15 + 28);
                v86 = *(float *)(v15 + 32);
                v87 = (float *)(v25 + v13);
                v88 = v11;
                do
                {
                  v89 = *(v88 - 2) + *(v88 - 2);
                  v90 = *(v88 - 1) + *(v88 - 1);
                  v91 = *v88 + *v88;
                  v92 = (float)((float)(v86 * v90) + (float)(v85 * v89)) + (float)(v83 * v91);
                  v93 = (float)((float)(v82 * (float)((float)(v90 * (float)-v83) + (float)(v86 * v91)))
                              + (float)(v89 * v84))
                      + (float)(v85 * v92);
                  v94 = (float)((float)(v82 * (float)((float)(v91 * (float)-v85) + (float)(v83 * v89)))
                              + (float)(v90 * v84))
                      + (float)(v86 * v92);
                  v95 = (float)((float)(v82 * (float)((float)(v89 * (float)-v86) + (float)(v85 * v90)))
                              + (float)(v91 * v84))
                      + (float)(v83 * v92);
                  v96 = (float)((float)(v94 * v94) + (float)(v93 * v93)) + (float)(v95 * v95);
                  v97 = 0.0;
                  v98 = 0.0;
                  v99 = 0.0;
                  if (v96 > 0.0)
                  {
                    v100 = 1.0 / sqrtf(v96);
                    v97 = v93 * v100;
                    v98 = v94 * v100;
                    v99 = v95 * v100;
                  }
                  *(v87 - 5) = v97;
                  *(v87 - 4) = v98;
                  *(v87 - 3) = v99;
                  *(v87 - 2) = (float)(v42 * v99) + (float)(v98 * v46);
                  *(v87 - 1) = (float)(v45 * v97) + (float)(v99 * v43);
                  *v87 = (float)(v41 * v98) + (float)(v97 * v44);
                  v88 += 6;
                  v87 += 6;
                  --v81;
                }
                while (v81);
              }
              break;
            case 3:
              *(_DWORD *)(v25 + 76 * v14 + 72) = 0;
              break;
            default:
              break;
          }
          v16 &= ~2u;
          *(_BYTE *)(v15 + 269) = v16;
          if ((v16 & 8) != 0)
          {
LABEL_42:
            v101 = 0;
            v102 = 0;
            v103 = v15 + 258;
            do
            {
              if (*(_BYTE *)(v103 + v101))
                *(_DWORD *)(v9 + 96 * v14 + 4 * v102++) = *(_DWORD *)(v103 + 4 * v101 - 34);
              ++v101;
            }
            while (v101 != 6);
            v16 &= ~8u;
            *(_BYTE *)(v15 + 269) = v16;
            if ((v16 & 4) == 0)
              goto LABEL_52;
LABEL_47:
            v104 = 0;
            v105 = 0;
            v106 = v15 + 258;
            do
            {
              if (*(_BYTE *)(v106 + v104))
                *(_DWORD *)(v9 + 96 * v14 + 4 * v105++ + 12) = *(_DWORD *)(v106 + 4 * v104 - 58);
              ++v104;
            }
            while (v104 != 6);
            *(_BYTE *)(v15 + 269) = v16 & 0xFB;
            goto LABEL_52;
          }
        }
        else if ((v16 & 8) != 0)
        {
          goto LABEL_42;
        }
        if ((v16 & 4) != 0)
          goto LABEL_47;
LABEL_52:
        v6 |= *(_BYTE *)(v15 + 270) == 2;
        v107 = v7;
        v108 = v8 + 80 * v14;
        *(_BYTE *)(v15 + 268) = v7;
        v7 += *(_BYTE *)(v108 + 76);
        ++v14;
        *(_DWORD *)(v108 + 72) = v107;
        v10 += 80;
        v11 += 20;
        v13 += 76;
        if (v14 == v5)
        {
          v109 = v7;
          goto LABEL_55;
        }
      }
    }
    v109 = 0;
    v6 = 0;
LABEL_55:
    if (*((_DWORD *)this + 163) != v109)
    {
      physx::Dy::ArticulationData::resizeJointData((physx::Dy::FeatherstoneArticulation *)((char *)this + 176), v109);
      *((_DWORD *)this + 163) = v109;
    }
    *((_BYTE *)this + 864) = v6 & 1;
    *((_BYTE *)this + 161) = 0;
  }
}

void physx::Dy::FeatherstoneArticulation::computeLinkVelocities(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2)
{
  float32x4_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  physx::Dy::FeatherstoneArticulation::jcalc(this, a2, 1);
  v4 = *((unsigned int *)a2 + 110);
  if (v4 >= 2)
  {
    v5 = *((_QWORD *)a2 + 54);
    v6 = *((_QWORD *)a2 + 6);
    v7 = *((_QWORD *)a2 + 57);
    v8 = *((_QWORD *)a2 + 42) + 92;
    for (i = 1; i != v4; ++i)
    {
      v10 = v5 + 40 * i;
      v11 = *(float **)(v10 + 16);
      v12 = *(float **)(v5 + 40 * *(unsigned int *)(v10 + 32) + 16);
      v13 = v12[20];
      v14 = v12[21];
      v15 = v12[22];
      v16 = v11[4] - v12[4];
      v17 = v11[5] - v12[5];
      v18 = v11[6] - v12[6];
      v19 = (float)(v14 * v18) - (float)(v17 * v15);
      v20 = (float)(v15 * v16) - (float)(v18 * v13);
      v21 = (float)(v13 * v17) - (float)(v16 * v14);
      v22 = v12[16] + v19;
      v23 = v12[17] + v20;
      v24 = v12[18] + v21;
      if (v6)
      {
        v25 = v7 + 80 * i;
        v26 = *(unsigned __int8 *)(v25 + 76);
        if (*(_BYTE *)(v25 + 76))
        {
          v27 = (float *)(v6 + 4 * *(unsigned int *)(v25 + 72));
          v28 = 0;
          v29 = 0uLL;
          v30 = (float32x4_t *)v8;
          do
          {
            v31 = *v27++;
            v3.f32[0] = v31;
            v32 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 0).u64[0];
            v3 = vmulq_n_f32(v30[-1], v31);
            v33 = *(float32x2_t *)v30->f32;
            v30 = (float32x4_t *)((char *)v30 + 24);
            v29 = vaddq_f32(v29, v3);
            v28 = vadd_f32(v28, vmul_f32(v32, v33));
            --v26;
          }
          while (v26);
          v34 = v28.f32[1];
        }
        else
        {
          v29 = 0uLL;
          v28.i32[0] = 0;
          v34 = 0.0;
        }
        v35 = v11[1];
        v36 = v11[2];
        v37 = v11[3];
        v38 = (float)(v37 * v37) + -0.5;
        v39 = (float)((float)(v35 * (float)(v29.f32[1] + v29.f32[1])) + (float)(*v11 * (float)(v29.f32[0] + v29.f32[0])))
            + (float)(v36 * (float)(v29.f32[2] + v29.f32[2]));
        v13 = v13
            + (float)((float)((float)(v37
                                    * (float)((float)(v35 * (float)(v29.f32[2] + v29.f32[2]))
                                            - (float)(v36 * (float)(v29.f32[1] + v29.f32[1]))))
                            + (float)((float)(v29.f32[0] + v29.f32[0]) * v38))
                    + (float)(*v11 * v39));
        v14 = v14
            + (float)((float)((float)(v37
                                    * (float)((float)(v36 * (float)(v29.f32[0] + v29.f32[0]))
                                            - (float)(*v11 * (float)(v29.f32[2] + v29.f32[2]))))
                            + (float)((float)(v29.f32[1] + v29.f32[1]) * v38))
                    + (float)(v35 * v39));
        v15 = v15
            + (float)((float)((float)(v37
                                    * (float)((float)(*v11 * (float)(v29.f32[1] + v29.f32[1]))
                                            - (float)(v35 * (float)(v29.f32[0] + v29.f32[0]))))
                            + (float)((float)(v29.f32[2] + v29.f32[2]) * v38))
                    + (float)(v36 * v39));
        v40 = v28.f32[0] + v28.f32[0];
        v41 = v34 + v34;
        v42 = (float)((float)(v35 * v40) + (float)(*v11 * (float)(v29.f32[3] + v29.f32[3]))) + (float)(v36 * v41);
        v22 = v22
            + (float)((float)((float)(v37 * (float)((float)(v35 * v41) - (float)(v36 * v40)))
                            + (float)((float)(v29.f32[3] + v29.f32[3]) * v38))
                    + (float)(*v11 * v42));
        v23 = v23
            + (float)((float)((float)(v37
                                    * (float)((float)(v36 * (float)(v29.f32[3] + v29.f32[3])) - (float)(*v11 * v41)))
                            + (float)(v40 * v38))
                    + (float)(v35 * v42));
        v24 = v24
            + (float)((float)((float)(v37
                                    * (float)((float)(*v11 * v40) - (float)(v35 * (float)(v29.f32[3] + v29.f32[3]))))
                            + (float)(v41 * v38))
                    + (float)(v36 * v42));
      }
      v11[16] = v22;
      v11[17] = v23;
      v11[18] = v24;
      v11[20] = v13;
      v11[21] = v14;
      v8 += 76;
      v11[22] = v15;
    }
  }
}

float physx::Dy::FeatherstoneArticulation::computeSpatialInertia(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float **v3;
  uint64_t v4;
  float result;
  float *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;

  v2 = *(unsigned int *)(a2 + 440);
  if ((_DWORD)v2)
  {
    v3 = (float **)(*(_QWORD *)(a2 + 432) + 16);
    v4 = *(_QWORD *)(a2 + 304) + 52;
    result = 1.0;
    do
    {
      v7 = *v3;
      v3 += 5;
      v6 = v7;
      v9 = v7[30];
      v8 = v7[31];
      v10 = 1.0 / v8;
      v11 = v8 == 0.0;
      v12 = v7[28];
      v13 = v7[29];
      if (v11)
        v10 = 0.0;
      v14 = 1.0 / v12;
      v15 = 1.0 / v13;
      v16 = *v6;
      v17 = v6[1];
      v11 = v12 == 0.0;
      v19 = v6[2];
      v18 = v6[3];
      v20 = v16 + v16;
      v21 = v17 + v17;
      v22 = v19 + v19;
      v23 = v16 * (float)(v16 + v16);
      v24 = 1.0 / v9;
      v25 = v17 * (float)(v17 + v17);
      v26 = v19 * (float)(v19 + v19);
      v27 = v20 * v17;
      v28 = v20 * v19;
      v29 = v20 * v18;
      if (v11)
        v14 = 0.0;
      v30 = v21 * v19;
      v31 = v21 * v18;
      v32 = v22 * v18;
      v33 = (float)(1.0 - v25) - v26;
      v11 = v13 == 0.0;
      v34 = v27 + v32;
      v35 = v28 - v31;
      v36 = v27 - v32;
      v37 = 1.0 - v23;
      v38 = v37 - v26;
      if (v11)
        v15 = 0.0;
      v39 = v30 + v29;
      v40 = v28 + v31;
      v41 = v30 - v29;
      *(_DWORD *)(v4 - 20) = 0;
      *(_OWORD *)(v4 - 36) = 0uLL;
      v42 = v37 - v25;
      *(_OWORD *)(v4 - 52) = 0uLL;
      *(float *)(v4 - 16) = v10;
      *(_QWORD *)(v4 - 12) = 0;
      *(_DWORD *)(v4 - 4) = 0;
      *(float *)v4 = v10;
      v11 = v9 == 0.0;
      *(_QWORD *)(v4 + 4) = 0;
      *(_DWORD *)(v4 + 12) = 0;
      v43 = v14 * v33;
      v44 = v14 * v34;
      v45 = v14 * v35;
      if (v11)
        v24 = 0.0;
      v46 = v15 * v36;
      *(float *)(v4 + 16) = v10;
      *(float *)(v4 + 20) = (float)((float)(v36 * (float)(v15 * v36)) + (float)(v43 * v33))
                          + (float)((float)(v24 * v40) * v40);
      v47 = (float)((float)(v38 * (float)(v15 * v36)) + (float)(v43 * v34)) + (float)((float)(v24 * v40) * v41);
      v48 = (float)((float)(v39 * v46) + (float)(v43 * v35)) + (float)((float)(v24 * v40) * v42);
      *(float *)(v4 + 32) = v47;
      *(float *)(v4 + 36) = (float)((float)(v38 * (float)(v15 * v38)) + (float)(v44 * v34))
                          + (float)((float)(v24 * v41) * v41);
      *(float *)(v4 + 24) = v47;
      *(float *)(v4 + 28) = v48;
      v49 = (float)((float)(v39 * (float)(v15 * v38)) + (float)(v44 * v35)) + (float)((float)(v24 * v41) * v42);
      *(float *)(v4 + 40) = v49;
      *(float *)(v4 + 44) = v48;
      *(float *)(v4 + 48) = v49;
      *(float *)(v4 + 52) = (float)((float)(v39 * (float)(v15 * v39)) + (float)(v45 * v35))
                          + (float)((float)(v24 * v42) * v42);
      v4 += 112;
      --v2;
    }
    while (v2);
  }
  return result;
}

void physx::Dy::FeatherstoneArticulation::computeZ(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, uint64_t a9, float32x2_t *a10, _QWORD *a11)
{
  float v11;
  float v12;
  BOOL v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float32x2_t v25;
  uint64_t v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float32x2_t v32;
  float v33;
  uint64_t v34;
  float32_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float v39;
  float32x2_t v40;
  float v41;
  float v42;
  float v43;
  float v44;

  v11 = *(float *)(a9 + 472);
  v12 = 1.0 / v11;
  v13 = v11 < 0.000001;
  v14 = 3.4028e38;
  if (!v13)
    v14 = v12;
  v15 = *(unsigned int *)(a9 + 440);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = a11[3];
    v18 = a11[4];
    v19 = 32 * v15;
    v20 = (uint64_t *)(*(_QWORD *)(a9 + 432) + 16);
    v21 = *(_QWORD *)(a9 + 304) + 72;
    v22 = *a11 + 8;
    do
    {
      v23 = *(float *)(v22 + v16 - 4);
      v25.i32[0] = *(_DWORD *)(v22 + v16);
      v24 = sqrtf((float)((float)(v23 * v23) + (float)(*(float *)(v22 + v16 - 8) * *(float *)(v22 + v16 - 8)))+ (float)(v25.f32[0] * v25.f32[0]));
      v25.i32[1] = *(_DWORD *)(v22 + v16 - 8);
      if (v24 > 0.0)
      {
        v23 = v23 * (float)(1.0 / v24);
        v25 = vmul_n_f32(v25, 1.0 / v24);
      }
      a7.i32[0] = 0;
      v26 = *v20;
      if (v24 >= v14)
        v24 = v14;
      v27 = v24 * v23;
      v28 = vmul_n_f32(v25, v24);
      v25.i32[0] = *(unsigned __int8 *)(v26 + 157);
      v29 = (float32x2_t)vand_s8((int8x8_t)vneg_f32(*a10), vdup_lane_s8(vceq_s8((int8x8_t)v25, a7), 0));
      if (*(_BYTE *)(v26 + 157))
        v30 = 0.0;
      else
        v30 = -a10[1].f32[0];
      v31 = 1.0 / *(float *)(v26 + 124);
      v32 = vmul_n_f32(v29, v31);
      v33 = v30 * v31;
      v34 = v17 + v16;
      *(float32x2_t *)v34 = v32;
      *(float *)(v34 + 8) = v30 * v31;
      v35 = (float)(vmuls_lane_f32(*(float *)(v21 + 8), v28, 1) + (float)(v27 * *(float *)(v21 + 20)))
          + (float)(*(float *)(v21 + 32) * v28.f32[0]);
      v36.i32[0] = vdup_lane_s32((int32x2_t)v28, 1).u32[0];
      v36.f32[1] = v27;
      v37 = vneg_f32(v36);
      v38 = vadd_f32(vadd_f32(vmul_lane_f32(*(float32x2_t *)v21, v28, 1), vmul_lane_f32(*(float32x2_t *)(v21 + 12), v36, 1)), vmul_n_f32(*(float32x2_t *)(v21 + 24), v28.f32[0]));
      v39 = vmuls_lane_f32(-v28.f32[0], v38, 1) + (float)(v27 * v35);
      v40 = (float32x2_t)vdup_lane_s32((int32x2_t)v38, 0);
      v40.f32[0] = v35;
      a7 = (int8x8_t)vmla_f32(vmul_f32(v40, v37), v38, v28);
      *(float *)(v34 + 16) = v39;
      *(double *)(v34 + 20) = *(double *)&a7;
      if (v18)
      {
        v41 = *(float *)(v18 + v16 + 8);
        v42 = *(float *)(v18 + v16 + 16);
        v43 = *(float *)(v18 + v16 + 20);
        v44 = *(float *)(v18 + v16 + 24);
        *(float32x2_t *)(v17 + v16) = vsub_f32(v32, vmul_n_f32(*(float32x2_t *)(v18 + v16), v31));
        *(float *)(v34 + 8) = v33 - (float)(v31 * v41);
        *(float *)(v34 + 16) = v39
                             + (float)((float)((float)-(float)(v43 * *(float *)(v21 + 12)) - (float)(v42 * *(float *)v21))
                                     - (float)(v44 * *(float *)(v21 + 24)));
        *(float32x2_t *)(v34 + 20) = vadd_f32((float32x2_t)a7, vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(v21 + 16), -v43), vmul_n_f32(*(float32x2_t *)(v21 + 4), v42)), vmul_n_f32(*(float32x2_t *)(v21 + 28), v44)));
      }
      v16 += 32;
      v20 += 5;
      v21 += 112;
    }
    while (v19 != v16);
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::computeC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  float *v14;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float *v29;
  _OWORD *v32;
  float v34;
  float v35;
  float32x4_t v36;
  float v37;
  float v38;
  float v39;
  float *v49;

  v3 = a3[6];
  v4 = (_OWORD *)a3[2];
  v5 = *(unsigned int *)(a2 + 440);
  *v4 = 0u;
  v4[1] = 0u;
  if (v5 >= 2)
  {
    v6 = *(_QWORD *)(a2 + 432);
    v7 = *(_QWORD *)(a2 + 448);
    v8 = *(_QWORD *)(a2 + 456);
    v9 = *(_QWORD *)(a2 + 352) + 84;
    v10 = *a3;
    v11 = 1;
    result = 40;
    do
    {
      v13 = v8 + 80 * v11;
      v14 = (float *)(v10 + 32 * *(unsigned int *)(v6 + 40 * v11 + 32));
      _S3 = *v14;
      _S5 = v14[1];
      _S4 = v14[2];
      v18 = (float *)(v7 + 160 * v11);
      v20 = v18[31];
      v19 = v18[32];
      v21 = v18[30];
      v22 = (float)(_S5 * v19) - (float)(_S4 * v20);
      v23 = (float)(_S4 * v21) - (float)(_S3 * v19);
      v24 = (float)(_S3 * v20) - (float)(_S5 * v21);
      v25 = (float)(_S5 * v24) - (float)(_S4 * v23);
      v26 = (float)(_S4 * v22) - (float)(_S3 * v24);
      v27 = (float)(_S3 * v23) - (float)(_S5 * v22);
      v28 = *(unsigned __int8 *)(v13 + 76);
      if (*(_BYTE *)(v13 + 76))
      {
        v29 = (float *)(v3 + 4 * *(unsigned int *)(v13 + 72));
        _Q6 = 0uLL;
        _S7 = 0.0;
        v32 = (_OWORD *)v9;
        _S16 = 0.0;
        do
        {
          v34 = *v29++;
          v35 = v34;
          _S16 = _S16 + (float)(v34 * *((float *)v32 - 2));
          _S7 = _S7 + (float)(v34 * *((float *)v32 - 1));
          v36 = *(float32x4_t *)v32;
          v32 = (_OWORD *)((char *)v32 + 24);
          _Q6 = vaddq_f32(_Q6, vmulq_n_f32(v36, v35));
          --v28;
        }
        while (v28);
        v37 = vmlas_n_f32(_S7 * (float)-_S4, _S5, _Q6.f32[0]);
        v38 = (float)((float)-_S3 * _Q6.f32[0]) + (float)(_S4 * _S16);
        v39 = (float)(_S16 * (float)-_S5) + (float)(_S3 * _S7);
        __asm
        {
          FMLA            S22, S5, V6.S[3]
          FMLA            S5, S4, V6.S[1]
          FMLA            S4, S3, V6.S[2]
          FMLA            S18, S7, V6.S[3]
          FMLA            S7, S16, V6.S[2]
        }
        v25 = v25 + (float)(_S18 + (float)(_S22 + _S22));
        v26 = v26 + (float)(vmlas_n_f32(vmuls_lane_f32(-_S16, _Q6, 3), _Q6.f32[1], _Q6.f32[0]) + (float)(_S5 + _S5));
        v27 = v27 + (float)(_S7 + (float)(_S4 + _S4));
      }
      else
      {
        v37 = 0.0;
        v38 = 0.0;
        v39 = 0.0;
      }
      v49 = (float *)&v4[2 * v11];
      *v49 = v37;
      v49[1] = v38;
      v49[2] = v39;
      v49[3] = 0.0;
      v49[4] = v25;
      v49[5] = v26;
      v49[6] = v27;
      ++v11;
      v9 += 76;
      v49[7] = 0.0;
    }
    while (v11 != v5);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2P(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  float32x2_t *v14;
  float32x2_t *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float32_t v28;
  float32_t v29;
  float32_t v30;
  float32x2_t *v31;
  float32_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;

  v2 = *(unsigned int *)(a2 + 440);
  if (v2 >= 2)
  {
    v3 = *(_QWORD *)(a2 + 432);
    v4 = *(_QWORD *)(a2 + 336);
    v5 = *(_QWORD *)(a2 + 352);
    v6 = *(_QWORD *)(a2 + 448);
    v7 = (float *)(v4 + 96);
    v8 = (float *)(v5 + 96);
    v9 = *(_QWORD *)(a2 + 456) + 100;
    v10 = *(_QWORD *)(a2 + 464) + 140;
    v11 = 1;
    result = 40;
    do
    {
      v13 = v3 + 40 * v11;
      v14 = *(float32x2_t **)(v13 + 16);
      v15 = *(float32x2_t **)(v3 + 40 * *(unsigned int *)(v13 + 32) + 16);
      v16 = v14[2].f32[0] - v15[2].f32[0];
      v17 = v14[2].f32[1] - v15[2].f32[1];
      v18 = v14[3].f32[0] - v15[3].f32[0];
      v19 = v16 + v16;
      v20 = v17 + v17;
      v21 = v18 + v18;
      v23 = v14[1].f32[0];
      v22 = v14[1].f32[1];
      v24 = (float)(v22 * v22) + -0.5;
      v25 = v14->f32[0];
      v26 = v14->f32[1];
      v27 = (float)((float)(v20 * v26) + (float)(v14->f32[0] * v19)) + (float)(v23 * v21);
      v28 = (float)((float)(v19 * v24) - (float)((float)((float)(v26 * v21) - (float)(v23 * v20)) * v22))
          + (float)(v14->f32[0] * v27);
      v29 = (float)((float)(v20 * v24) - (float)((float)((float)(v23 * v19) - (float)(v14->f32[0] * v21)) * v22))
          + (float)(v26 * v27);
      v30 = (float)((float)(v21 * v24) - (float)((float)((float)(v14->f32[0] * v20) - (float)(v26 * v19)) * v22))
          + (float)(v23 * v27);
      v31 = (float32x2_t *)(v6 + 160 * v11);
      v31[13].f32[1] = v28;
      v31[14].f32[0] = v29;
      v31[14].f32[1] = v30;
      v32 = v14[3].f32[0] - v15[3].f32[0];
      v31[15] = vsub_f32(v14[2], v15[2]);
      v31[16].f32[0] = v32;
      v33 = *(unsigned int *)(v4 + 76 * v11 + 72);
      *(_DWORD *)(v5 + 76 * v11 + 72) = v33;
      if ((_DWORD)v33)
      {
        v34 = -v23;
        v35 = -v25;
        v36 = -v26;
        v37 = (float *)v10;
        v38 = (float *)v9;
        v39 = v8;
        v40 = v7;
        do
        {
          v41 = *(v40 - 5) + *(v40 - 5);
          v42 = *(v40 - 4) + *(v40 - 4);
          v43 = *(v40 - 3) + *(v40 - 3);
          v44 = (float)((float)(v26 * v42) + (float)(v25 * v41)) + (float)(v23 * v43);
          v45 = (float)(v22 * (float)((float)(v42 * v34) + (float)(v26 * v43))) + (float)(v41 * v24);
          v46 = (float)(v22 * (float)((float)(v43 * v35) + (float)(v23 * v41))) + (float)(v42 * v24);
          v47 = (float)(v22 * (float)((float)(v41 * v36) + (float)(v25 * v42))) + (float)(v43 * v24);
          v48 = v45 + (float)(v25 * v44);
          v49 = *(v40 - 2) + *(v40 - 2);
          v50 = *(v40 - 1) + *(v40 - 1);
          v51 = *v40 + *v40;
          v52 = (float)((float)(v26 * v50) + (float)(v25 * v49)) + (float)(v23 * v51);
          *(v39 - 5) = v48;
          *(v39 - 4) = v46 + (float)(v26 * v44);
          *(v39 - 3) = v47 + (float)(v23 * v44);
          *(v39 - 2) = (float)((float)(v22 * (float)((float)(v50 * v34) + (float)(v26 * v51))) + (float)(v49 * v24))
                     + (float)(v25 * v52);
          *(v39 - 1) = (float)((float)(v22 * (float)((float)(v51 * v35) + (float)(v23 * v49))) + (float)(v50 * v24))
                     + (float)(v26 * v52);
          *v39 = (float)((float)(v22 * (float)((float)(v49 * v36) + (float)(v25 * v50))) + (float)(v51 * v24))
               + (float)(v23 * v52);
          v53 = *(v38 - 5) + *(v38 - 5);
          v54 = *(v38 - 4) + *(v38 - 4);
          v55 = *(v38 - 3) + *(v38 - 3);
          v56 = (float)((float)(v26 * v54) + (float)(v25 * v53)) + (float)(v23 * v55);
          v57 = (float)(v22 * (float)((float)(v54 * v34) + (float)(v26 * v55))) + (float)(v53 * v24);
          v58 = (float)(v22 * (float)((float)(v55 * v35) + (float)(v23 * v53))) + (float)(v54 * v24);
          v59 = (float)(v22 * (float)((float)(v53 * v36) + (float)(v25 * v54))) + (float)(v55 * v24);
          v60 = v57 + (float)(v25 * v56);
          v61 = *(v38 - 2) + *(v38 - 2);
          v62 = *(v38 - 1) + *(v38 - 1);
          v63 = *v38 + *v38;
          v64 = (float)((float)(v26 * v62) + (float)(v25 * v61)) + (float)(v23 * v63);
          *(v37 - 5) = v60;
          *(v37 - 4) = v58 + (float)(v26 * v56);
          v40 += 6;
          *(v37 - 3) = v59 + (float)(v23 * v56);
          *(v37 - 2) = (float)((float)(v22 * (float)((float)(v62 * v34) + (float)(v26 * v63))) + (float)(v61 * v24))
                     + (float)(v25 * v64);
          *(v37 - 1) = (float)((float)(v22 * (float)((float)(v63 * v35) + (float)(v23 * v61))) + (float)(v62 * v24))
                     + (float)(v26 * v64);
          *v37 = (float)((float)(v22 * (float)((float)(v61 * v36) + (float)(v25 * v62))) + (float)(v63 * v24))
               + (float)(v23 * v64);
          v39 += 6;
          v38 += 6;
          v37 += 6;
          --v33;
        }
        while (v33);
      }
      ++v11;
      v7 += 19;
      v8 += 19;
      v9 += 80;
      v10 += 96;
    }
    while (v11 != v2);
  }
  return result;
}

float physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2B(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float32x2_t *v4;
  uint64_t v5;
  float *v6;
  float32x2_t **v7;
  float32x2_t *v8;
  float result;

  v2 = *(unsigned int *)(a2 + 440);
  if (v2 >= 2)
  {
    v3 = *(_QWORD *)(a2 + 432);
    v4 = *(float32x2_t **)(v3 + 16);
    v5 = v2 - 1;
    v6 = (float *)(*(_QWORD *)(a2 + 448) + 264);
    v7 = (float32x2_t **)(v3 + 56);
    do
    {
      v8 = *v7;
      v7 += 5;
      result = v8[3].f32[0] - v4[3].f32[0];
      *((float32x2_t *)v6 - 1) = vsub_f32(v8[2], v4[2]);
      *v6 = result;
      v6 += 40;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::getDenseJacobian(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  float *v39;
  float *v40;
  float *v41;
  float *v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t i;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  char v85;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v8 = *(unsigned int *)(a1 + 616);
  v9 = *(_QWORD *)(a1 + 608);
  v10 = *(_QWORD *)(a1 + 624);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 616);
  v14 = **(_BYTE **)(a1 + 664);
  if ((v14 & 1) != 0)
    v15 = 0;
  else
    v15 = 6;
  *a4 = v15 + result;
  v83 = v15 - 6;
  v84 = v15;
  *a3 = v15 - 6 + 6 * v13;
  v85 = v14;
  if ((v14 & 1) == 0)
  {
    v16 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)v16 = 1065353216;
    *(_QWORD *)(v16 + 12) = 0;
    *(_QWORD *)(v16 + 4) = 0;
    *(_DWORD *)(v16 + 20) = 0;
    v17 = *a4;
    *(_DWORD *)(v16 + 4 * v17) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 1)) = 1065353216;
    *(_DWORD *)(v16 + 4 * (v17 + 2)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 3)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 4)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 5)) = 0;
    *(_QWORD *)(v16 + 4 * (2 * v17)) = 0;
    *(_QWORD *)(v16 + 4 * (2 * v17 + 2)) = 1065353216;
    *(_QWORD *)(v16 + 4 * (2 * v17 + 4)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 1)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 2)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 3)) = 1065353216;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 4)) = 0;
    *(_DWORD *)(v16 + 4 * (3 * v17 + 5)) = 0;
    v18 = (_QWORD *)(v16 + 4 * (4 * v17));
    *v18 = 0;
    v18[1] = 0;
    *(_QWORD *)(v16 + 4 * (4 * v17 + 4)) = 1065353216;
    LODWORD(v17) = 5 * v17;
    *(_DWORD *)(v16 + 4 * v17) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 1)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 2)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 3)) = 0;
    *(_DWORD *)(v16 + 4 * (v17 + 4)) = 0;
    v19 = v17 + 5;
    v12 = 6;
    *(_DWORD *)(v16 + 4 * v19) = 1065353216;
  }
  if (v8 >= 2)
  {
    v20 = *(_QWORD *)(a1 + 632);
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *a4;
    v23 = v22 * (v12 + 5);
    v24 = (6 * v22);
    v25 = v22 * (v12 + 4);
    result = v22 * (v12 + 3);
    v26 = v22 * (v12 + 2);
    v27 = v12 * v22;
    v28 = v22 + v12 * v22;
    v29 = 1;
    v30 = 96;
    v81 = v8;
    v82 = v9;
    v80 = v20;
    do
    {
      v31 = v9 + 40 * v29;
      v32 = *(_QWORD *)(v31 + 16);
      *(_DWORD *)(v10 + 160 * v29 + 144) = *(_DWORD *)(v32 + 76);
      v33 = *(_DWORD *)(v31 + 32);
      if ((v85 & 1) == 0 || v33)
      {
        v34 = *(_DWORD *)(v20 + 80 * v33 + 72) + v84 + *(unsigned __int8 *)(v20 + 80 * v33 + 76);
        v35 = v83 + 6 * v33;
        v36 = (v35 + 3) * v22;
        v37 = (v35 + 4) * v22;
        v38 = (v35 + 5) * v22;
        v39 = (float *)(v10 + 160 * v29);
        v40 = v39 + 30;
        v41 = v39 + 32;
        v42 = v39 + 31;
        v43 = v35 * v22;
        v44 = (v35 | 1) * v22;
        v45 = (v35 + 2) * v22;
        v46 = v34 + 1;
        for (i = -1; i != v34; ++i)
        {
          v48 = *(float *)(v21 + 4 * (v37 + i + 1));
          v49 = *(float *)(v21 + 4 * (v38 + i + 1));
          v50 = *v42;
          v51 = *(float *)(v21 + 4 * (v36 + i + 1));
          v52 = *v40;
          v53 = (float)(v49 * *v40) - (float)(v51 * *v41);
          *(float *)(v21 + 4 * (v27 + i + 1)) = *(float *)(v21 + 4 * (v43 + i + 1))
                                                              + (float)((float)(v48 * *v41) - (float)(v49 * *v42));
          *(float *)(v21 + 4 * (v28 + i + 1)) = v53
                                                              + *(float *)(v21 + 4 * (v44 + i + 1));
          *(float *)(v21 + 4 * (v26 + i + 1)) = (float)((float)(v51 * v50) - (float)(v48 * v52))
                                                              + *(float *)(v21 + 4 * (v45 + i + 1));
          *(float *)(v21 + 4 * (result + i + 1)) = v51;
          *(float *)(v21 + 4 * (v25 + i + 1)) = v48;
          *(float *)(v21 + 4 * (v23 + i + 1)) = v49;
        }
        v8 = v81;
        v9 = v82;
        v20 = v80;
        if ((int)v34 + 1 < v12)
        {
          do
          {
            *(_DWORD *)(v21 + 4 * (v27 + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (v28 + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (v26 + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (result + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (v25 + v46)) = 0;
            *(_DWORD *)(v21 + 4 * (v23 + v46++)) = 0;
          }
          while (v46 < v12);
        }
      }
      v54 = v20 + 80 * v29;
      v55 = *(unsigned __int8 *)(v54 + 76);
      if (*(_BYTE *)(v54 + 76))
      {
        v56 = 0;
        v57 = (float *)(*(_QWORD *)(a1 + 512) + v30);
        do
        {
          v58 = *(v57 - 5) + *(v57 - 5);
          v59 = *(v57 - 4) + *(v57 - 4);
          v61 = *(float *)(v32 + 8);
          v60 = *(float *)(v32 + 12);
          v62 = *(v57 - 3) + *(v57 - 3);
          v63 = (float)(v60 * v60) + -0.5;
          v64 = *(float *)(v32 + 4);
          v65 = (float)((float)(v59 * v64) + (float)(*(float *)v32 * v58)) + (float)(v61 * v62);
          v66 = (float)(v60 * (float)((float)(v64 * v62) - (float)(v61 * v59))) + (float)(v58 * v63);
          v67 = v60 * (float)((float)(v61 * v58) - (float)(*(float *)v32 * v62));
          v68 = v60 * (float)((float)(*(float *)v32 * v59) - (float)(v64 * v58));
          v69 = v67 + (float)(v59 * v63);
          v70 = *(v57 - 2) + *(v57 - 2);
          v71 = *(v57 - 1) + *(v57 - 1);
          v72 = *v57 + *v57;
          v73 = v68 + (float)(v62 * v63);
          v74 = (float)((float)(v64 * v71) + (float)(*(float *)v32 * v70)) + (float)(v61 * v72);
          v75 = v66 + (float)(*(float *)v32 * v65);
          v76 = (float)((float)(v60 * (float)((float)(v64 * v72) - (float)(v61 * v71))) + (float)(v70 * v63))
              + (float)(*(float *)v32 * v74);
          v77 = (float)(v60 * (float)((float)(v61 * v70) - (float)(*(float *)v32 * v72))) + (float)(v71 * v63);
          v78 = v60 * (float)((float)(*(float *)v32 * v71) - (float)(v64 * v70));
          *(float *)(v21 + 4 * (v12 + v27 + v56)) = v76;
          *(float *)(v21 + 4 * (v12 + v28 + v56)) = v77 + (float)(v64 * v74);
          *(float *)(v21 + 4 * (v12 + v26 + v56)) = (float)(v78 + (float)(v72 * v63))
                                                                  + (float)(v61 * v74);
          *(float *)(v21 + 4 * (v12 + result + v56)) = v75;
          *(float *)(v21 + 4 * (v12 + v25 + v56)) = v69 + (float)(v64 * v65);
          *(float *)(v21 + 4 * (v12 + v23 + v56++)) = v73 + (float)(v61 * v65);
          v57 += 6;
        }
        while (v55 != v56);
        v12 += v56;
      }
      if (v12 < v22)
      {
        v79 = v12;
        do
        {
          *(_DWORD *)(v21 + 4 * (v27 + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (v28 + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (v26 + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (result + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (v25 + v79)) = 0;
          *(_DWORD *)(v21 + 4 * (v23 + v79++)) = 0;
        }
        while (v22 != v79);
      }
      ++v29;
      v23 += v24;
      v25 += v24;
      result += v24;
      v26 += v24;
      v28 += v24;
      v27 += v24;
      v30 += 76;
    }
    while (v29 != v8);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeLinkVelocities(uint64_t a1, uint64_t a2, int **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *v23;
  float v24;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float32x2_t v40;
  float v41;
  float *v42;
  float v43;
  float32x2_t v44;
  float v45;
  float v46;
  float32x2_t v47;
  float v48;
  float32x2_t v49;
  float v50;
  float32x2_t *v51;

  v3 = *(_QWORD *)(a2 + 432);
  v4 = *(_QWORD *)(a2 + 448);
  v5 = *(unsigned int *)(a2 + 440);
  v6 = **(_BYTE **)(a2 + 488);
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[6];
  v10 = *(_QWORD *)(v3 + 16);
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(v10 + 76);
  if ((v6 & 1) != 0)
  {
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v11 = *v7;
    v12 = v7[1];
    v13 = v7[2];
  }
  else
  {
    v11 = *(_DWORD *)(v10 + 80);
    v12 = *(_DWORD *)(v10 + 84);
    v13 = *(_DWORD *)(v10 + 88);
    v14 = *(_DWORD *)(v10 + 72);
    v7[2] = v13;
    v7[3] = 0;
    v15 = *(_QWORD *)(v10 + 64);
    *v7 = v11;
    v7[1] = v12;
    *((_QWORD *)v7 + 2) = v15;
    v7[6] = v14;
    v7[7] = 0;
  }
  *(_DWORD *)a2 = v11;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v7 + 2);
  *(_DWORD *)(a2 + 24) = v7[6];
  *(_DWORD *)(a2 + 28) = 0;
  if (v5 >= 2)
  {
    v16 = *(_QWORD *)(a2 + 352) + 96;
    v17 = *(_QWORD *)(a2 + 456);
    v18 = 1;
    result = 80;
    do
    {
      v20 = v3 + 40 * v18;
      v21 = v4 + 160 * v18;
      *(_DWORD *)(v21 + 144) = *(_DWORD *)(*(_QWORD *)(v20 + 16) + 76);
      _S2 = *(_DWORD *)(v21 + 120);
      v23 = (float32x2_t *)&v7[8 * *(unsigned int *)(v20 + 32)];
      v24 = v23[1].f32[0];
      _D1 = *v23;
      v26.i32[1] = HIDWORD(*(_QWORD *)(v21 + 124));
      v26.i32[0] = _S2;
      v27.i32[1] = HIDWORD(*(unint64_t *)v23);
      v27.f32[0] = v24;
      v28 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v26, v27));
      v29 = (float32x2_t)vdup_lane_s32((int32x2_t)*v23, 0);
      v29.f32[0] = v24;
      __asm { FMLS            S3, S2, V1.S[1] }
      v35 = vadd_f32(v23[2], vmls_f32(v28, v29, *(float32x2_t *)(v21 + 124)));
      v36 = _S3 + v23[3].f32[0];
      if (v9)
      {
        v37 = v17 + 80 * v18;
        v38 = *(unsigned __int8 *)(v37 + 76);
        if (*(_BYTE *)(v37 + 76))
        {
          v39 = (float *)&v9[*(unsigned int *)(v37 + 72)];
          v40 = 0;
          v41 = 0.0;
          v42 = (float *)v16;
          v43 = 0.0;
          v44 = 0;
          do
          {
            v45 = *v39++;
            v46 = v45;
            v47 = vmul_n_f32(*(float32x2_t *)(v42 - 5), v45);
            v48 = v45 * *(v42 - 3);
            v49 = vmul_n_f32(*(float32x2_t *)(v42 - 2), v45);
            v50 = *v42;
            v42 += 6;
            v40 = vadd_f32(v40, v47);
            v41 = v41 + v48;
            v44 = vadd_f32(v44, v49);
            v43 = v43 + (float)(v46 * v50);
            --v38;
          }
          while (v38);
        }
        else
        {
          v40 = 0;
          v43 = 0.0;
          v41 = 0.0;
          v44 = 0;
        }
        _D1 = vadd_f32(_D1, v40);
        v24 = v24 + v41;
        v35 = vadd_f32(v35, v44);
        v36 = v36 + v43;
      }
      v51 = (float32x2_t *)&v7[8 * v18];
      *v51 = _D1;
      v51[1].f32[0] = v24;
      v51[1].i32[1] = 0;
      v51[2] = v35;
      v51[3].f32[0] = v36;
      v51[3].i32[1] = 0;
      ++v18;
      v16 += 76;
    }
    while (v18 != v5);
  }
  return result;
}

float32_t physx::Dy::solveStaticConstraint(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, int8x16_t *a5, int a6, int8x16_t a7, __n128 a8, int8x16_t a9, double a10, double a11, double a12, int16x8_t a13)
{
  int8x16_t v17;
  int8x16_t v18;
  int16x8_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  __n128 *v28;
  __n128 v29;
  int8x16_t *v30;
  int8x16_t v31;
  int8x16_t *v32;
  int8x16_t v33;
  float v34;
  float v35;
  float32_t result;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  __n128 v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;

  v18 = *(int8x16_t *)a2->f32;
  v17 = *(int8x16_t *)a2[2].f32;
  v17.i64[1] = a2[3].u32[0];
  v18.i64[1] = a2[1].u32[0];
  v19 = 0uLL;
  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  v43 = 0u;
  if (a6)
  {
    v19.i16[0] = *(_WORD *)(a1 + 16);
    a13.i32[0] = -1;
    v20 = (int8x16_t)vdupq_lane_s16((int16x4_t)*(_OWORD *)&vceqq_s16(v19, a13), 0);
    v22 = *a5;
    v21 = a5[1];
    v21.i64[1] = a5[1].u32[2];
    v22.i64[1] = a5->u32[2];
    v23 = vbslq_s8(v20, (int8x16_t)xmmword_2260E5D70, a7);
    v24 = vbslq_s8(v20, a7, (int8x16_t)xmmword_2260E5D70);
    v48 = vbicq_s8(v18, v20);
    v49 = vandq_s8(v17, v20);
    v47 = vandq_s8(v18, v20);
    v39 = vandq_s8(v22, v20);
    v40 = vandq_s8(v21, v20);
    v37 = (int32x4_t)v24;
    v38 = (int32x4_t)v23;
    v41 = vbicq_s8(v22, v20);
    v42 = vbicq_s8(v21, v20);
    v50 = vbicq_s8(v17, v20);
    if (**(_BYTE **)(a1 + 32) == 3)
    {
      v24.i32[0] = a9.i32[0];
      physx::Dy::solveExtContactStep((char *)a1, (float32x4_t *)&v50, (float32x4_t *)&v49, (float32x4_t *)&v48, (float32x4_t *)&v47, (float32x4_t *)&v42, (float32x4_t *)&v40, (float32x4_t *)&v41, *(int32x2_t *)v24.i8, (int32x2_t)a8.n128_u64[0], (float32x4_t *)&v39, &v46, &v45, &v44, (float32x4_t *)&v43, 1);
    }
    else
    {
      v24.i32[0] = a8.n128_u32[0];
      physx::Dy::solveExt1D(a1, (float32x4_t *)&v50, (float32x4_t *)&v49, (float32x4_t *)&v48, (float32x4_t *)&v47, (float32x4_t *)&v42, (float32x4_t *)&v40, (float32x4_t *)&v41, *(int32x2_t *)v24.i8, (float32x4_t *)&v39, &v38, &v37, &v46, &v45, &v44, &v43);
    }
  }
  else
  {
    if (*(__int16 *)(a1 + 16) == -1)
    {
      v19 = (int16x8_t)v17;
      v25 = v18;
      v18 = 0uLL;
      v17 = 0uLL;
    }
    else
    {
      v25 = 0uLL;
    }
    v48 = v18;
    v49 = (int8x16_t)v19;
    v47 = v25;
    v50 = v17;
    if (**(_BYTE **)(a1 + 32) == 3)
      physx::Dy::solveExtContact(a1, (float32x4_t *)&v50, (float32x4_t *)&v49, (float32x4_t *)&v48, (float32x4_t *)&v47, &v46, &v45, &v44, *(double *)v25.i64, a8, a9, v17, (float32x4_t *)&v43, 1);
    else
      physx::Dy::solveExt1D(a1, (float32x4_t *)&v50, (float32x4_t *)&v49, (float32x4_t *)&v48, (float32x4_t *)&v47, &v46, &v45, &v44, (float32x4_t *)&v43);
  }
  v26 = &v46;
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
    v26 = &v45;
  v27 = *v26;
  v28 = (__n128 *)&v44;
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
    v28 = &v43;
  v29 = *v28;
  v30 = &v48;
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
    v30 = &v47;
  v31 = *v30;
  v32 = &v50;
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
    v32 = &v49;
  v33 = *v32;
  v34 = *(float *)&v31.i32[2] - a2[1].f32[0];
  *a4 = vadd_f32(vsub_f32(*(float32x2_t *)v31.i8, *a2), *a4);
  a4[1].f32[0] = v34 + a4[1].f32[0];
  v35 = *(float *)&v33.i32[2] - a2[3].f32[0];
  a4[2] = vadd_f32(vsub_f32(*(float32x2_t *)v33.i8, a2[2]), a4[2]);
  a4[3].f32[0] = v35 + a4[3].f32[0];
  a2[1].i32[0] = v31.i32[2];
  *a2 = *(float32x2_t *)v31.i8;
  a2[2] = *(float32x2_t *)v33.i8;
  a2[3].i32[0] = v33.i32[2];
  *a3 = vsub_f32(*a3, *(float32x2_t *)v27.f32);
  a3[1].f32[0] = a3[1].f32[0] - v27.f32[2];
  a3[2] = vsub_f32(a3[2], (float32x2_t)v29.n128_u64[0]);
  result = a3[3].f32[0] - v29.n128_f32[2];
  a3[3].f32[0] = result;
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::writebackInternalConstraints(uint64_t this, int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  _BYTE v10[120];
  _BYTE v11[72];

  if (*(_DWORD *)(this + 880))
  {
    v3 = this;
    v4 = 0;
    v5 = 32;
    do
    {
      v6 = (unsigned __int8 **)(*(_QWORD *)(v3 + 872) + v5);
      v8 = *v6;
      v7 = (uint64_t)(v6 - 4);
      v9 = *v8;
      if (a2)
      {
        if (v9 == 3)
          this = physx::Dy::writeBackContact(v7);
        else
          this = physx::Dy::writeBack1D(v7);
      }
      else if (v9 == 3)
      {
        this = physx::Dy::writeBackContact(v7, (uint64_t)v11, (uint64_t)v10, (uint64_t)v10);
      }
      else
      {
        this = physx::Dy::writeBack1D(v7);
      }
      ++v4;
      v5 += 48;
    }
    while (v4 < *(unsigned int *)(v3 + 880));
  }
  return this;
}

float32x2_t physx::Dy::FeatherstoneArticulation::solveInternalConstraintRecursive(float32x2_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x2_t *a7, _DWORD *a8, float a9, float a10, float a11, unsigned int *a12)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  float32x2_t *v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  __int128 v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  __int128 v43;
  float v44;
  __int128 v45;
  float v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  float v50;
  float32x2_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float32x2_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float32x2_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  float *v76;
  float v77;
  float v78;
  float v80;
  float v81;
  float v82;
  float v83;
  float32x2_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float32_t v90;
  float32x2_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float32_t v96;
  float32x2_t v97;
  float v98;
  float32x2_t v99;
  float v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float v105;
  float v106;
  float v107;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float *v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  uint64_t v139;
  float32x2_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  __int128 v147;
  float v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  float32x2_t *v153;
  float32x2_t v154;
  float v155;
  float v156;
  float v157;
  uint64_t v158;
  float *v159;
  float v160;
  float v161;
  float32x2_t v162;
  float *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  __n128 v167;
  int8x16_t v168;
  double v169;
  double v170;
  double v171;
  int16x8_t v172;
  int8x16_t *v173;
  unsigned int v174;
  float v175;
  unsigned int v176;
  uint64_t v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float32x2_t v184;
  float v185;
  float32x2_t *v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float v201;
  float v202;
  float32x2_t *v203;
  uint64_t v204;
  float32_t v205;
  float32_t v206;
  float32x2_t result;
  _DWORD *v208;
  uint64_t v209;
  float32x2_t v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float32x2_t v217;
  __int128 v218;
  float v219;
  float32x2_t v220;
  float v221;
  float v222;
  __int128 v223;
  float32x2_t v224;
  float v225;
  float32x2_t v229;
  float v230;
  __int128 v231;
  float32x2_t v232;
  float32x4_t v233;
  float32x2_t v234;
  float v235;
  float32x2_t v236;
  float v237;
  float32x2_t v238;
  float v239;
  unint64_t v240;
  uint64_t v241;
  float32x2_t v242;
  uint64_t v243;
  unint64_t v244;
  float v245;
  int v246;
  float v247;
  float v248;
  float v249;
  int v250;
  unint64_t v251;
  uint64_t v252;
  float32x2_t v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;

  v17 = a6;
  v18 = a2[76] + 40 * a6;
  v19 = a2[78];
  v20 = a2[79];
  v21 = *(_DWORD *)(v18 + 32);
  v255 = 0u;
  v256 = 0u;
  v22 = a2[40];
  v23 = (float32x2_t *)(v22 + 32 * v21);
  v24 = *a7;
  v25 = *v23;
  v26 = a7[1].f32[0];
  v27 = v23[1].f32[0];
  v28 = a7[2];
  v29 = v23[2];
  v30 = a7[3].f32[0];
  v31 = v23[3].f32[0];
  v209 = v19 + 160 * a6 + 120;
  physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW((float32x2_t *)&v251, v209, (float *)(a2[60] + 112 * a6), (float *)(a2[62] + 36 * a6), a2[66] + 76 * a6, (float *)(a2[46] + 32 * a6), a7);
  v33 = v22 + 32 * v17;
  v34 = *((float *)&v251 + 1);
  LODWORD(v35) = v251;
  v36 = *(float *)(v33 + 4) + *((float *)&v251 + 1);
  LODWORD(v45) = *(_DWORD *)(v33 + 8);
  v37 = *(float *)(v33 + 20);
  v39 = v253.f32[1];
  v38 = v253.f32[0];
  *(float *)&v43 = *(float *)(v33 + 16) + v253.f32[0];
  v40 = *(float *)(v33 + 24);
  v41 = *(float *)v33 + *(float *)&v251;
  *(float *)&v244 = v41;
  *((float *)&v244 + 1) = v36;
  v246 = 0;
  v42 = *(float *)&v43;
  v247 = *(float *)&v43;
  v248 = v37 + v253.f32[1];
  v250 = 0;
  v240 = v251;
  *(_QWORD *)&v43 = v252;
  v44 = *(float *)&v45 + *(float *)&v252;
  v245 = *(float *)&v45 + *(float *)&v252;
  v241 = v252;
  v242 = v253;
  *(_QWORD *)&v45 = v254;
  v46 = v40 + *(float *)&v254;
  v249 = v46;
  v243 = v254;
  v47 = v20 + 80 * a6;
  v48 = *(unsigned __int8 *)(v47 + 78);
  v49 = *(unsigned __int8 *)(v47 + 79);
  v208 = a8;
  if (!(v48 | v49))
  {
    v217 = 0;
    v214 = 0.0;
    v222 = 0.0;
    v224 = 0;
    v50 = a11;
    goto LABEL_70;
  }
  *(float *)&v32 = v26 + v27;
  v51 = vadd_f32(v24, v25);
  v52 = v20 + 80 * v17;
  v53 = *(unsigned __int8 *)(v52 + 76);
  v212 = (float32x2_t)v255;
  v213 = *((float *)&v255 + 2);
  v54 = *((float *)&v256 + 2);
  v216 = *(float *)(*(_QWORD *)(v18 + 24) + 264);
  v215 = -v216;
  if (*(_BYTE *)(v52 + 76))
  {
    v55 = 0;
    v56 = a2[32] + 4 * *(unsigned int *)(v52 + 72);
    v229 = vadd_f32(v28, v29);
    *((float *)&v32 + 1) = v30 + v31;
    v231 = v32;
    v57 = *a8;
    v217 = 0;
    v58 = 0.0;
    v214 = 0.0;
    v59 = 0;
    v50 = a11;
    v60 = v37 + v253.f32[1];
    v61 = v36;
    v62 = v41;
    v63 = v42;
    v64 = v44;
    v65 = (float32x2_t)v256;
    v66 = v45;
    while (((v48 >> v55) & 1) == 0)
    {
      v67 = v57;
LABEL_54:
      ++v55;
      v57 = v67;
      if (v53 == v55)
      {
        v242.f32[1] = v39;
        LODWORD(v243) = v66;
        v148 = *(float *)&v231;
        goto LABEL_57;
      }
    }
    v221 = v54;
    v67 = (v57 + 1);
    *a8 = v67;
    v68 = a2[50];
    v69 = v68 + 176 * v57;
    v70 = *(float *)(v56 + 4 * v55);
    v71 = *(float *)(v69 + 132);
    v225 = v34;
    v223 = v43;
    v220 = v65;
    v219 = v39;
    v218 = v66;
    if (*(_BYTE *)(v69 + 168))
      goto LABEL_7;
    if (v70 <= 6.2832)
    {
      if (v70 >= -6.2832)
      {
LABEL_7:
        v72 = v38;
        v73 = v35;
        goto LABEL_14;
      }
      v72 = v38;
      v73 = v35;
      v74 = 12.566;
    }
    else
    {
      v72 = v38;
      v73 = v35;
      v74 = -12.566;
    }
    v70 = v70 + v74;
    v71 = v71 + v74;
LABEL_14:
    v75 = v68 + 176 * v57;
    v77 = *(float *)(v75 + 152);
    v76 = (float *)(v75 + 152);
    v78 = v77;
    _S18 = *(v76 - 14);
    v80 = *(v76 - 13);
    v81 = *(v76 - 7);
    v82 = *(v76 - 6);
    v83 = v71 + (float)((float)(v81 * v80) * v50);
    v84 = *(float32x2_t *)(v76 - 29);
    v85 = v61;
    v86 = v62;
    v87 = vmlas_n_f32(vmuls_lane_f32(v61, v84, 1), v62, v84.f32[0]);
    v88 = *(v76 - 27);
    v89 = v64;
    v90 = v87 + (float)(v88 * v64);
    v91 = *(float32x2_t *)(v76 - 32);
    v92 = v60;
    v93 = v63;
    v94 = vmlas_n_f32(vmuls_lane_f32(v60, v91, 1), v63, v91.f32[0]);
    v95 = *(v76 - 30);
    v96 = v94 + (float)(v95 * v46);
    v97 = *(float32x2_t *)(v69 + 12);
    v98 = *(float *)(v69 + 20);
    v99 = *(float32x2_t *)v69;
    v100 = *(float *)(v69 + 8);
    v101 = vmla_f32(vmla_f32(vmul_f32((float32x2_t)vzip2_s32((int32x2_t)v51, (int32x2_t)v229), (float32x2_t)vzip2_s32((int32x2_t)v97, *(int32x2_t *)v69)), (float32x2_t)vzip1_s32((int32x2_t)v51, (int32x2_t)v229), (float32x2_t)vzip1_s32((int32x2_t)v97, *(int32x2_t *)v69)), *(float32x2_t *)&v231, (float32x2_t)__PAIR64__(LODWORD(v100), LODWORD(v98)));
    v102 = (float32x2_t)vdup_lane_s32((int32x2_t)v101, 0);
    v102.f32[0] = v90;
    v101.f32[0] = v96;
    v103 = vadd_f32(v102, v101);
    LODWORD(_S1) = vsub_f32(v103, (float32x2_t)vdup_lane_s32((int32x2_t)v103, 1)).u32[0];
    v105 = v76[2];
    v106 = v76[1];
    v107 = v105 * v76[3];
    __asm { FMLS            S27, S18, V1.S[0] }
    if (_S27 < (float)-v106)
      _S27 = -v106;
    v113 = v83 - v70;
    if (v106 >= _S27)
      v106 = _S27;
    v114 = v106 - v107;
    v76[2] = v105 + (float)(v106 - v107);
    v115 = _S1 + (float)((float)(v106 - v107) * v80);
    v116 = *(v76 - 1);
    v117 = (float)(v81 + (float)((float)(*(v76 - 4) * v115) + (float)(*(v76 - 2) * v78))) + (float)(v113 * v82);
    if (v117 < (float)-v116)
      v117 = -v116;
    if (v116 >= v117)
      v118 = v117;
    else
      v118 = *(v76 - 1);
    v119 = v118 - v78;
    v120 = v115 + (float)(v119 * v80);
    if ((a4 & 1) == 0)
    {
      v125 = v70 + (float)(v120 * a9);
      v126 = *(float *)(v68 + 176 * v57 + 108);
      if (v70 > v126 || v125 > v126)
      {
        v122 = (float *)(v68 + 176 * v57);
        v135 = v122[29];
        v134 = v122[30];
        if (v70 <= v126)
          v134 = 1.0;
        v136 = v120 + (float)((float)((float)(v126 - v125) * a10) * v134);
        if (v136 < v215)
          v136 = -v216;
        if (v216 < v136)
          v136 = v216;
        v137 = fminf(v135 + (float)((float)(v136 - v120) * _S18), 0.0);
        v121 = v137 - v135;
        v133 = v135 + (float)(v137 - v135);
        goto LABEL_50;
      }
      v127 = *(float *)(v68 + 176 * v57 + 104);
      if (v70 < v127 || v125 < v127)
      {
        v122 = (float *)(v68 + 176 * v57);
        v128 = v122[30];
        if (v70 >= v127)
          v128 = 1.0;
        v129 = v120 + (float)((float)((float)(v127 - v125) * a10) * v128);
        if (v129 < v215)
          v129 = -v216;
        if (v216 < v129)
          v129 = v216;
        v130 = v122[28];
        v131 = fmaxf(v130 + (float)((float)(v129 - v120) * _S18), 0.0);
        v121 = v131 - v130;
        v124 = v130 + (float)(v131 - v130);
        goto LABEL_39;
      }
    }
    v121 = -(float)(v120 * _S18);
    v122 = (float *)(v68 + 176 * v57);
    if (v120 > 0.0)
    {
      v123 = v122[28];
      if (v121 <= (float)-v123)
        v121 = -v123;
      v124 = v123 + v121;
LABEL_39:
      v122[28] = v124;
      goto LABEL_51;
    }
    v132 = v122[29];
    if (v121 >= (float)-v132)
      v121 = -v132;
    v133 = v132 + v121;
LABEL_50:
    v122[29] = v133;
LABEL_51:
    v50 = a11;
    v35 = v73;
    v38 = v72;
    v54 = v221;
    v138 = (float)(v114 + v119) + v121;
    if (v138 == 0.0)
    {
      v34 = v225;
      v60 = v92;
      v61 = v85;
      v62 = v86;
      v63 = v93;
      v43 = v223;
      v64 = v89;
      v65 = v220;
      v39 = v219;
      v66 = v218;
    }
    else
    {
      *v76 = v118;
      v217 = vadd_f32(v217, vmul_n_f32(v99, v138));
      v59 = vadd_f32(v59, vmul_n_f32(v97, v138));
      v58 = v58 + (float)(v98 * v138);
      v212 = vsub_f32(v212, vmul_n_f32(v91, v138));
      v213 = v213 - (float)(v95 * v138);
      v214 = v214 + (float)(v100 * v138);
      v65 = vsub_f32(v220, vmul_n_f32(v84, v138));
      v54 = v221 - (float)(v88 * v138);
      v139 = v68 + 176 * v57;
      v140.i32[0] = *(_DWORD *)(v139 + 56);
      v141 = -(float)(v138 * *(float *)(v139 + 72));
      v142 = -(float)(v138 * *(float *)(v139 + 76));
      v143 = -(float)(v138 * *(float *)(v139 + 80));
      v144 = -(float)(v138 * *(float *)(v139 + 84));
      v51 = vsub_f32(v51, vmul_n_f32(*(float32x2_t *)(v139 + 48), v138));
      v229 = vsub_f32(v229, vmul_n_f32(*(float32x2_t *)(v139 + 60), v138));
      v145 = -(float)(v138 * *(float *)(v139 + 88));
      v146 = -(float)(v138 * *(float *)(v139 + 92));
      v140.i32[1] = *(_DWORD *)(v139 + 68);
      *((_QWORD *)&v147 + 1) = *((_QWORD *)&v231 + 1);
      *(float32x2_t *)&v147 = vsub_f32(*(float32x2_t *)&v231, vmul_n_f32(v140, v138));
      v231 = v147;
      v62 = v86 + v141;
      v35 = v35 + v141;
      v61 = v85 + v142;
      v34 = v225 + v142;
      v64 = v89 + v143;
      v43 = v223;
      *(float *)&v43 = *(float *)&v223 + v143;
      v63 = v93 + v144;
      v38 = v72 + v144;
      v60 = v92 + v145;
      v39 = v219 + v145;
      v46 = v46 + v146;
      v66 = v218;
      *(float *)&v66 = *(float *)&v218 + v146;
    }
    goto LABEL_54;
  }
  v217 = 0;
  v214 = 0.0;
  v58 = 0.0;
  v59 = 0;
  v50 = a11;
  v60 = v37 + v253.f32[1];
  v61 = v36;
  v62 = v41;
  v63 = v42;
  v64 = v44;
  v65 = (float32x2_t)v256;
  LODWORD(v66) = v254;
  v148 = *(float *)&v32;
LABEL_57:
  *(float32x2_t *)&v255 = v212;
  *((float *)&v255 + 2) = v213;
  if ((int)v53 - v49 < v53)
  {
    v149 = a2[52];
    v150 = *a12;
    do
    {
      v151 = v150 + 1;
      *a12 = v150 + 1;
      v152 = v150;
      v153 = (float32x2_t *)(v149 + 80 * v150);
      v154 = v153[6];
      v155 = v153[7].f32[0];
      v156 = (float)(vmlas_n_f32(vmuls_lane_f32(v61, v154, 1), v62, v154.f32[0]) + (float)(v155 * v64))
           - (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v51, v154).i32[1]), v51.f32[0], v154.f32[0])
                   + (float)(v155 * v148));
      v157 = -v156;
      if ((a4 & 1) == 0)
      {
        v158 = a2[54];
        v159 = (float *)(v158 + 32 * *(unsigned int *)(v18 + 32));
        v157 = (float)((float)(*(float *)(v149 + 80 * v152 + 64)
                             - (float)((float)((float)((float)(v154.f32[1] * *(float *)(v158 + 32 * v17 + 4))
                                                     + (float)(v154.f32[0] * *(float *)(v158 + 32 * v17)))
                                             + (float)(v155 * *(float *)(v158 + 32 * v17 + 8)))
                                     - (float)((float)((float)(v154.f32[1] * v159[1]) + (float)(v154.f32[0] * *v159))
                                             + (float)(v155 * v159[2]))))
                     * *(float *)(v149 + 80 * v152 + 68))
             - v156;
      }
      v160 = v156 + v157;
      if ((float)(v156 + v157) < v215)
        v160 = -v216;
      if (v216 < v160)
        v160 = v216;
      v161 = *(float *)(v149 + 80 * v152 + 60) * (float)(v160 - v156);
      if (v161 != 0.0)
      {
        v162 = vmul_n_f32(v154, v161);
        v59 = vadd_f32(v59, v162);
        v58 = v58 + (float)(v155 * v161);
        v65 = vsub_f32(v65, v162);
        v54 = v54 - (float)(v155 * v161);
        v163 = (float *)(v149 + 80 * v152);
        v51 = vsub_f32(v51, vmul_n_f32(*v153, v161));
        v148 = v148 - (float)(v161 * v153[1].f32[0]);
        v62 = v62 - (float)(v161 * v163[6]);
        v61 = v61 - (float)(v161 * v163[7]);
        v64 = v64 - (float)(v161 * v163[8]);
        v63 = v63 - (float)(v161 * v163[9]);
        v60 = v60 - (float)(v161 * v163[10]);
        v46 = v46 - (float)(v161 * v163[11]);
        v35 = v35 - (float)(v161 * v163[6]);
        v34 = v34 - (float)(v161 * v163[7]);
        *(float *)&v43 = *(float *)&v43 - (float)(v161 * v163[8]);
        v38 = v38 - (float)(v161 * v163[9]);
        v39 = v39 - (float)(v161 * v163[10]);
        *(float *)&v66 = *(float *)&v66 - (float)(v161 * v163[11]);
      }
      v150 = v151;
      --v49;
    }
    while (v49);
    v242.f32[1] = v39;
    LODWORD(v243) = v66;
  }
  v224 = v59;
  v222 = v58;
  v244 = __PAIR64__(LODWORD(v61), LODWORD(v62));
  *(float32x2_t *)&v256 = v65;
  *((float *)&v256 + 2) = v54;
  v245 = v64;
  v247 = v63;
  v248 = v60;
  v249 = v46;
  v240 = __PAIR64__(LODWORD(v34), LODWORD(v35));
  LODWORD(v241) = v43;
  v242.f32[0] = v38;
LABEL_70:
  v164 = *(_DWORD *)(a2[70] + 4 * v17);
  v165 = a2[54];
  v166 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 336))(a2, a6);
  if (v164)
  {
    v173 = (int8x16_t *)v166;
    v174 = *(_DWORD *)(a2[72] + 4 * v17);
    if ((_DWORD)a4)
      v175 = 0.0;
    else
      v175 = -3.4028e38;
    do
    {
      v176 = v174 + 1;
      v167.n128_f32[0] = v50;
      *(float *)v168.i32 = v175;
      physx::Dy::solveStaticConstraint(a2[109] + 48 * v174, (float32x2_t *)&v244, (float32x2_t *)&v255, (float32x2_t *)&v240, (int8x16_t *)(v165 + 32 * v17), a5, *v173, v167, v168, v169, v170, v171, v172);
      v174 = v176;
      --v164;
    }
    while (v164);
  }
  v177 = *(_QWORD *)v18;
  v179 = *((float *)&v255 + 1);
  LODWORD(v178) = v255;
  v180 = *((float *)&v255 + 2);
  v182 = *((float *)&v256 + 1);
  LODWORD(v181) = v256;
  v183 = *((float *)&v256 + 2);
  if (*(_QWORD *)v18)
  {
    v232 = (float32x2_t)v240;
    v230 = *(float *)&v241;
    v184 = v242;
    v185 = *(float *)&v243;
    v187 = a3;
    v186 = a1;
    while (1)
    {
      v188 = __clz(__rbit32(v177));
      v189 = __clz(__rbit32(HIDWORD(v177))) + 32;
      v190 = (_DWORD)v177 ? v188 : v189;
      physx::Dy::FeatherstoneArticulation::solveInternalConstraintRecursive(&v236, a2, a3, a4, a5, v190, &v240, v208, a9, a10, a11, a12);
      *(float32x2_t *)v197.f32 = v236;
      v178 = v178 + v236.f32[0];
      v179 = v179 + v236.f32[1];
      v180 = v180 + v237;
      *(float32x2_t *)v198.f32 = v238;
      v181 = v181 + v238.f32[0];
      v182 = v182 + v238.f32[1];
      v183 = v183 + v239;
      v177 &= v177 - 1;
      if (!v177)
        break;
      v192.f32[0] = -v237;
      v199.i64[0] = vnegq_f32(v197).u64[0];
      v199.f32[2] = -v237;
      v199.i32[3] = 0;
      v191.f32[0] = -v239;
      v200.i64[0] = vnegq_f32(v198).u64[0];
      v200.f32[2] = -v239;
      v200.i32[3] = 0;
      physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v233, a2[58] + 192 * v17, v199, v200, v191, v192, v193, v194, v195, v196);
      v232 = vadd_f32(v232, *(float32x2_t *)v233.f32);
      v240 = (unint64_t)v232;
      v230 = v230 + v233.f32[2];
      *(float *)&v241 = v230;
      v184 = vadd_f32(v184, v234);
      v242 = v184;
      v185 = v185 + v235;
      *(float *)&v243 = v185;
    }
    *(_QWORD *)&v255 = __PAIR64__(LODWORD(v179), LODWORD(v178));
    *((float *)&v255 + 2) = v180;
    *(_QWORD *)&v256 = __PAIR64__(LODWORD(v182), LODWORD(v181));
    *((float *)&v256 + 2) = v183;
    v217 = vadd_f32(v217, 0);
    v201 = v214 + 0.0;
    v224 = vadd_f32(v224, 0);
    v202 = v222 + 0.0;
    v203 = (float32x2_t *)v209;
  }
  else
  {
    v187 = a3;
    v186 = a1;
    v203 = (float32x2_t *)v209;
    v201 = v214;
    v202 = v222;
  }
  v204 = v187 + 32 * v17;
  *(float *)v204 = v178;
  *(float *)(v204 + 4) = v179;
  *(float *)(v204 + 8) = v180;
  *(_DWORD *)(v204 + 12) = 0;
  *(float *)(v204 + 16) = v181;
  *(float *)(v204 + 20) = v182;
  *(float *)(v204 + 24) = v183;
  *(_DWORD *)(v204 + 28) = 0;
  physx::Dy::FeatherstoneArticulation::propagateImpulseW(a2[68] + 96 * v17, v203, a2[66] + 76 * v17, (uint64_t)&v255, (uint64_t)&v236);
  v205 = v201 + v237;
  v206 = v202 + v239;
  *v186 = vadd_f32(v217, v236);
  v186[1].f32[0] = v205;
  v186[1].i32[1] = 0;
  result = vadd_f32(v224, v238);
  v186[2] = result;
  v186[3].f32[0] = v206;
  v186[3].i32[1] = 0;
  return result;
}

void physx::Dy::FeatherstoneArticulation::solveInternalConstraints(uint64_t a1, uint64_t a2, float a3, float a4, float a5, double _D3, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v15;
  float32x2_t *v16;
  char v17;
  int *v18;
  unsigned int *v19;
  _QWORD *v20;
  float32x2_t *v21;
  float32x2_t *v22;
  float v23;
  float v24;
  float32x2_t v25;
  float v26;
  float v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float v36;
  float v37;
  float32x2_t v38;
  float v40;
  float v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float32x2_t v51;
  int8x16_t *v52;
  unsigned int *v53;
  int8x16_t *v54;
  __n128 v55;
  int8x16_t v56;
  double v57;
  double v58;
  double v59;
  int16x8_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  float v64;
  float v65;
  float32x4_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int32x2_t v78;
  int32x2_t v79;
  float v80;
  int32x2_t v81;
  int32x2_t v82;
  float v89;
  float32x4_t v90;
  float32x4_t v91;
  int32x2_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x2_t *v95;
  float32x2_t *v96;
  _QWORD *v97;
  float32x2_t *v98;
  char v99;
  unsigned int v100;
  float32x4_t v101;
  float32x2_t v103;
  float v104;
  float32x2_t v105;
  float v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  float32x2_t v112;
  float v113;
  int v114;
  float32x2_t v115;
  float v116;
  int v117;

  v11 = a8;
  v15 = *(unsigned int *)(a1 + 616);
  if (*(_DWORD *)(a1 + 408) || *(_DWORD *)(a1 + 424) || *(_DWORD *)(a1 + 880))
  {
    v16 = (float32x2_t *)(a1 + 732);
    v17 = **(_BYTE **)(a1 + 664);
    v18 = *(int **)(a1 + 560);
    v19 = *(unsigned int **)(a1 + 576);
    v20 = *(_QWORD **)(a1 + 608);
    v21 = *(float32x2_t **)(a1 + 320);
    v22 = *(float32x2_t **)(a1 + 368);
    v23 = 0.0;
    if ((_DWORD)a8)
      v24 = 0.0;
    else
      v24 = -3.4028e38;
    v110 = 0u;
    v111 = 0u;
    v25 = 0;
    v26 = 0.0;
    v27 = 0.0;
    v28 = 0;
    v29 = 0;
    v99 = v17;
    if ((v17 & 1) == 0)
    {
      v30 = v22->f32[1];
      v31 = -v30;
      v32 = v22[1].f32[0];
      LODWORD(_D3) = v22[2].i32[0];
      v33 = v22[2].f32[1];
      v34 = -v33;
      v29.i32[0] = v22[3].i32[0];
      v35.i32[0] = *(_DWORD *)(a1 + 740);
      v36 = *(float *)(a1 + 764);
      v37 = (float)((float)-(float)(v33 * *(float *)(a1 + 788)) - (float)(*(float *)&_D3 * *(float *)(a1 + 776)))
          - (float)(v29.f32[0] * *(float *)(a1 + 800));
      v38 = *(float32x2_t *)(a1 + 744);
      _D24 = *(float32x2_t *)(a1 + 756);
      v28 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v38, -v30), vmul_n_f32(*v16, v22->f32[0])), vmul_n_f32(_D24, v32)), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 780), -v33), vmul_n_f32(*(float32x2_t *)(a1 + 768), *(float *)&_D3)), vmul_n_f32(*(float32x2_t *)(a1 + 792), v29.f32[0])));
      v27 = (float)((float)((float)-(float)(v30 * *(float *)(a1 + 752)) - (float)(v22->f32[0] * v35.f32[0]))
                  - (float)(v32 * v36))
          + v37;
      v40 = (float)((float)-(float)(v30 * *(float *)(a1 + 824)) - (float)(v22->f32[0] * *(float *)(a1 + 812)))
          - (float)(v32 * *(float *)(a1 + 836));
      __asm { FMLS            S21, S3, V24.S[0] }
      v46 = _S21 - (float)(v36 * v29.f32[0]);
      v35.i32[1] = *(_DWORD *)(a1 + 752);
      v29 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)*v16, (int32x2_t)v38), v34), (float32x2_t)vzip1_s32((int32x2_t)*v16, (int32x2_t)v38), *(float32x2_t *)&_D3, 0), v35, v29, 0), vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 816), v31), vmul_n_f32(*(float32x2_t *)(a1 + 804), v22->f32[0])), vmul_n_f32(*(float32x2_t *)(a1 + 828), v32)));
      *(float32x2_t *)&v110 = v28;
      *((float *)&v110 + 2) = v27;
      v26 = v46 + v40;
      *(float32x2_t *)&v111 = v29;
      *((float *)&v111 + 2) = v46 + v40;
    }
    v47 = v27 + v21[1].f32[0];
    v48 = v26 + v21[3].f32[0];
    v112 = vadd_f32(v28, *v21);
    v113 = v47;
    v114 = 0;
    v115 = vadd_f32(v29, v21[2]);
    v116 = v48;
    v117 = 0;
    v108 = 0uLL;
    v109 = 0uLL;
    v49 = *v18;
    v50 = 0.0;
    v51 = 0;
    if (*v18)
    {
      v97 = v20;
      v98 = v22;
      v100 = a8;
      v52 = *(int8x16_t **)(a1 + 432);
      v53 = v19;
      v54 = (int8x16_t *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 336))(a1, 0);
      v61 = *v53;
      do
      {
        v62 = v61 + 1;
        v55.n128_f32[0] = a5;
        *(float *)v56.i32 = v24;
        physx::Dy::solveStaticConstraint(*(_QWORD *)(a1 + 872) + 48 * v61, &v112, (float32x2_t *)&v108, (float32x2_t *)&v110, v52, a9, *v54, v55, v56, v57, v58, v59, v60);
        v61 = v62;
        --v49;
      }
      while (v49);
      v25 = (float32x2_t)v108;
      v50 = *((float *)&v108 + 2);
      v51 = (float32x2_t)v109;
      v23 = *((float *)&v109 + 2);
      v11 = v100;
      v20 = v97;
      v22 = v98;
    }
    v107 = 0;
    v63 = *v20;
    if (*v20)
    {
      v64 = *((float *)&v111 + 2);
      v65 = *(float *)&v110;
      *(int32x2_t *)v66.f32 = vrev64_s32(*(int32x2_t *)&v111);
      *(int32x2_t *)&v66.u32[2] = vrev64_s32(*(int32x2_t *)((char *)&v110 + 4));
      v101 = v66;
      do
      {
        v67 = __clz(__rbit32(v63));
        v68 = __clz(__rbit32(HIDWORD(v63))) + 32;
        if ((_DWORD)v63)
          v69 = v67;
        else
          v69 = v68;
        v63 &= v63 - 1;
        physx::Dy::FeatherstoneArticulation::solveInternalConstraintRecursive(&v103, (_QWORD *)a1, a2, v11, a9, v69, (float32x2_t *)&v110, (_DWORD *)&v107 + 1, a3, a4, a5, (unsigned int *)&v107);
        _S1 = v105.i32[0];
        _S0 = v106;
        if ((v99 & 1) == 0 && v63)
        {
          _S18 = *(float *)(a1 + 732);
          _D5 = *(int32x2_t *)(a1 + 736);
          _S19 = *(float *)(a1 + 744);
          _D20 = *(int32x2_t *)(a1 + 748);
          _S22 = *(float *)(a1 + 756);
          _D6 = *(int32x2_t *)(a1 + 760);
          v78 = *(int32x2_t *)(a1 + 804);
          v79 = (int32x2_t)vsub_f32(vsub_f32(vmul_n_f32(*(float32x2_t *)(a1 + 784), -v105.f32[1]), vmul_n_f32(*(float32x2_t *)(a1 + 772), v105.f32[0])), vmul_n_f32(*(float32x2_t *)(a1 + 796), v106));
          v80 = (float)((float)((float)-(float)(v103.f32[1] * _S19) - (float)(_S18 * v103.f32[0])) - (float)(v104 * _S22))
              + (float)((float)((float)-(float)(v105.f32[1] * *(float *)(a1 + 780))
                              - (float)(*(float *)(a1 + 768) * v105.f32[0]))
                      - (float)(v106 * *(float *)(a1 + 792)));
          v81 = *(int32x2_t *)(a1 + 816);
          v82 = *(int32x2_t *)(a1 + 828);
          __asm
          {
            FMLS            S26, S18, V1.S[0]
            FMLS            S26, S0, V5.S[1]
            FMLS            S18, S19, V1.S[0]
            FMLS            S18, S0, V20.S[1]
            FMLS            S17, S22, V1.S[0]
            FMLS            S17, S0, V6.S[1]
          }
          v89 = _S17
              + (float)((float)((float)-(float)(v103.f32[1] * *(float *)(a1 + 824))
                              - (float)(*(float *)(a1 + 812) * v103.f32[0]))
                      - (float)(v104 * *(float *)(a1 + 836)));
          v65 = v65 + v80;
          *(float *)&v110 = v65;
          *(int32x2_t *)v90.f32 = vrev64_s32(v81);
          *(int32x2_t *)&v90.u32[2] = vrev64_s32(_D20);
          *(int32x2_t *)v91.f32 = vrev64_s32(v78);
          *(int32x2_t *)&v91.u32[2] = vrev64_s32(_D5);
          v92 = vrev64_s32(_D6);
          *(int32x2_t *)v93.f32 = vrev64_s32(v82);
          *(int32x2_t *)&v93.u32[2] = v92;
          _Q18.i32[1] = _S26;
          *(int32x2_t *)&_Q18.u32[2] = vrev64_s32(v79);
          v94 = (int8x16_t)vaddq_f32(v101, vaddq_f32(_Q18, vsubq_f32(vsubq_f32(vmulq_n_f32(v90, -v103.f32[1]), vmulq_n_f32(v91, v103.f32[0])), vmulq_n_f32(v93, v104))));
          *(int32x2_t *)((char *)&v110 + 4) = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL));
          v101 = (float32x4_t)v94;
          *(int32x2_t *)&v111 = vrev64_s32(*(int32x2_t *)v94.i8);
          v64 = v64 + v89;
          *((float *)&v111 + 2) = v64;
        }
        v25 = vadd_f32(v25, v103);
        v50 = v50 + v104;
        v51 = vadd_f32(v51, v105);
        v23 = v23 + v106;
      }
      while (v63);
    }
    *(float32x2_t *)a2 = v25;
    *(float *)(a2 + 8) = v50;
    *(float32x2_t *)(a2 + 16) = v51;
    *(float *)(a2 + 24) = v23;
    if ((_DWORD)v15)
    {
      v95 = v22 + 2;
      v96 = (float32x2_t *)(a2 + 16);
      do
      {
        v95[-2] = vadd_f32(v96[-2], v95[-2]);
        v95[-1].f32[0] = v96[-1].f32[0] + v95[-1].f32[0];
        *v95 = vadd_f32(*v96, *v95);
        v95[1].f32[0] = v96[1].f32[0] + v95[1].f32[0];
        v95 += 4;
        v96 += 4;
        --v15;
      }
      while (v15);
    }
    *(_BYTE *)(a1 + 685) = 1;
  }
}

void physx::Dy::FeatherstoneArticulation::teleportRootLink(physx::Dy::FeatherstoneArticulation *this)
{
  float v2;
  float v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  float *v10;
  unsigned int *v11;
  float *v12;
  float v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float *v54;
  float v55;
  float cosval;
  __float2 v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  __float2 v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  uint64_t v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;

  physx::Dy::FeatherstoneArticulation::jcalc(this, (physx::Dy::FeatherstoneArticulation *)((char *)this + 176), 0);
  v5 = *((_DWORD *)this + 154);
  if (v5 >= 2)
  {
    v6 = *((_QWORD *)this + 76);
    v131 = *((_QWORD *)this + 32);
    v7 = 76;
    v8 = 76 * v5;
    v9 = (unsigned int *)(v6 + 72);
    v10 = (float *)(*((_QWORD *)this + 40) + 40);
    v11 = (unsigned int *)(*((_QWORD *)this + 79) + 152);
    v12 = (float *)(*((_QWORD *)this + 74) + 28);
    v13 = -0.5;
    do
    {
      v14 = *(float **)(v6 + 40 * *v9 + 16);
      v16 = *v14;
      v15 = v14[1];
      v17 = v14[2];
      v18 = v14[3];
      v20 = v14[4];
      v19 = v14[5];
      v21 = v14[6];
      v23 = (float *)*((_QWORD *)v9 - 2);
      v22 = *((_QWORD *)v9 - 1);
      v25 = *v11;
      v11 += 20;
      v24 = v25;
      v27 = *(float *)(v22 + 44);
      v26 = *(float *)(v22 + 48);
      v28 = *(float *)(v22 + 52);
      v30 = *(float *)(v22 + 16);
      v29 = *(float *)(v22 + 20);
      v31 = *(float *)(v22 + 24);
      v33 = *(v12 - 3);
      v32 = *(v12 - 2);
      v34 = *(v12 - 1);
      v35 = *v12;
      switch(*(_BYTE *)(v22 + 270))
      {
        case 0:
          v36 = v30 + v30;
          v37 = v29 + v29;
          v38 = v31 + v31;
          v39 = v13 + (float)(v35 * v35);
          v40 = (float)((float)((float)(v29 + v29) * v32) + (float)(v33 * (float)(v30 + v30)))
              + (float)(v34 * (float)(v31 + v31));
          v41 = -v34;
          v42 = (float)((float)(v35 * (float)((float)(v32 * v38) - (float)(v34 * (float)(v29 + v29))))
                      + (float)((float)(v30 + v30) * v39))
              + (float)(v33 * v40);
          v43 = -v33;
          v44 = (float)((float)((float)((float)(v34 * (float)(v30 + v30)) - (float)(v33 * v38)) * v35)
                      + (float)(v37 * v39))
              + (float)(v32 * v40);
          v45 = -v32;
          v46 = (float)((float)((float)((float)(v33 * v37) - (float)(v32 * v36)) * v35) + (float)(v38 * v39))
              + (float)(v34 * v40);
          v47 = (float *)(*((_QWORD *)this + 64) + v7);
          v48 = v42 - v27;
          v49 = v44 - v26;
          v50 = v46 - v28;
          v51 = *(float *)(v131 + 4 * v24);
          v52 = v51 * v47[4];
          v53 = v51 * v47[5];
          v2 = v48 + (float)(v51 * v47[3]);
          v3 = v49 + v52;
          v4 = v50 + v53;
          break;
        case 1:
          v54 = (float *)(*((_QWORD *)this + 64) + v7);
          v144 = v20;
          v146 = v17;
          v55 = v16;
          v140 = *(float *)(v22 + 48);
          v142 = v18;
          v129 = *(float *)(v22 + 52);
          v136 = *(float *)(v22 + 24);
          v138 = *(float *)(v22 + 44);
          v132 = *(float *)(v22 + 16);
          v134 = *(float *)(v22 + 20);
          v57 = __sincosf_stret(*(float *)(v131 + 4 * v24) * v13);
          cosval = v57.__cosval;
          v18 = v142;
          v20 = v144;
          v16 = v55;
          v17 = v146;
          v13 = -0.5;
          v58 = *v54 * v57.__sinval;
          v59 = v57.__sinval * v54[1];
          v60 = v57.__sinval * v54[2];
          if (v57.__cosval < 0.0)
          {
            v58 = -v58;
            v59 = -v59;
            v60 = -v60;
            cosval = -v57.__cosval;
          }
          v61 = (float)((float)((float)(v35 * v58) + (float)(cosval * v33)) + (float)(v59 * v34)) - (float)(v32 * v60);
          v62 = (float)((float)((float)(v35 * v59) + (float)(cosval * v32)) + (float)(v60 * v33)) - (float)(v34 * v58);
          v63 = (float)((float)((float)(v35 * v60) + (float)(cosval * v34)) + (float)(v58 * v32)) - (float)(v33 * v59);
          v64 = (float)((float)((float)(cosval * v35) - (float)(v58 * v33)) - (float)(v59 * v32)) - (float)(v60 * v34);
          v65 = sqrtf((float)((float)((float)(v62 * v62) + (float)(v61 * v61)) + (float)(v63 * v63)) + (float)(v64 * v64));
          v33 = v61 / v65;
          v32 = v62 / v65;
          v34 = v63 / v65;
          v35 = v64 / v65;
          v66 = (float)(v35 * v35) + -0.5;
          v67 = (float)((float)((float)(v134 + v134) * (float)(v62 / v65))
                      + (float)((float)(v61 / v65) * (float)(v132 + v132)))
              + (float)(v34 * (float)(v136 + v136));
          v41 = -v34;
          v68 = (float)((float)((float)(v64 / v65)
                              * (float)((float)((float)(v62 / v65) * (float)(v136 + v136))
                                      - (float)(v34 * (float)(v134 + v134))))
                      + (float)((float)(v132 + v132) * v66))
              + (float)((float)(v61 / v65) * v67);
          v43 = -(float)(v61 / v65);
          v69 = (float)((float)((float)(v64 / v65)
                              * (float)((float)(v34 * (float)(v132 + v132)) - (float)(v33 * (float)(v136 + v136))))
                      + (float)((float)(v134 + v134) * v66))
              + (float)((float)(v62 / v65) * v67);
          v45 = -(float)(v62 / v65);
          v70 = (float)((float)((float)(v64 / v65)
                              * (float)((float)(v33 * (float)(v134 + v134)) - (float)(v32 * (float)(v132 + v132))))
                      + (float)((float)(v136 + v136) * v66))
              + (float)(v34 * v67);
          v2 = v68 - v138;
          v3 = v69 - v140;
          v4 = v70 - v129;
          break;
        case 2:
          v72 = *v23;
          v71 = v23[1];
          v74 = v23[2];
          v73 = v23[3];
          v75 = *(v10 - 2);
          v76 = *(v10 - 1);
          v77 = *v10;
          v78 = (float)((float)(v76 * v76) + (float)(v75 * v75)) + (float)(v77 * v77);
          if (v78 >= 1.0e-24)
          {
            v91 = sqrtf(v78);
            v123 = v76 * (float)(1.0 / v91);
            v124 = v75 * (float)(1.0 / v91);
            v122 = v77 * (float)(1.0 / v91);
            v145 = v20;
            v147 = v17;
            v128 = v23[1];
            v130 = v21;
            v125 = v23[3];
            v126 = *v23;
            v92 = v16;
            v141 = *(float *)(v22 + 48);
            v143 = v18;
            v93 = *(float *)(v22 + 52);
            v137 = *(float *)(v22 + 24);
            v139 = *(float *)(v22 + 44);
            v133 = *(float *)(v22 + 16);
            v135 = *(float *)(v22 + 20);
            v127 = v23[2];
            v94 = __sincosf_stret(v91 * 0.5);
            v79 = v94.__cosval;
            v72 = v126;
            v74 = v127;
            v30 = v133;
            v29 = v135;
            v31 = v137;
            v27 = v139;
            v26 = v141;
            v18 = v143;
            v28 = v93;
            v16 = v92;
            v73 = v125;
            v20 = v145;
            v17 = v147;
            v71 = v128;
            v21 = v130;
            v13 = -0.5;
            v80 = v94.__sinval * v124;
            v81 = v94.__sinval * v123;
            v82 = v94.__sinval * v122;
          }
          else
          {
            v79 = 1.0;
            v80 = 0.0;
            v81 = 0.0;
            v82 = 0.0;
          }
          v95 = (float)((float)((float)(v73 * v80) + (float)(v79 * v72)) + (float)(v81 * v74)) - (float)(v71 * v82);
          v96 = (float)((float)((float)(v73 * v81) + (float)(v79 * v71)) + (float)(v82 * v72)) - (float)(v74 * v80);
          v97 = (float)((float)((float)(v73 * v82) + (float)(v79 * v74)) + (float)(v80 * v71)) - (float)(v72 * v81);
          v98 = (float)((float)((float)(v79 * v73) - (float)(v80 * v72)) - (float)(v81 * v71)) - (float)(v82 * v74);
          v99 = (float)((float)((float)(v98 * v33) - (float)(v95 * v35)) - (float)(v96 * v34)) + (float)(v32 * v97);
          v100 = (float)((float)((float)(v98 * v32) - (float)(v96 * v35)) - (float)(v97 * v33)) + (float)(v34 * v95);
          v101 = (float)((float)((float)(v98 * v34) - (float)(v97 * v35)) - (float)(v95 * v32)) + (float)(v33 * v96);
          v102 = (float)((float)((float)(v33 * v95) + (float)(v98 * v35)) + (float)(v96 * v32)) + (float)(v97 * v34);
          v103 = (float)((float)((float)(v18 * v99) + (float)(v102 * v16)) + (float)(v100 * v17)) - (float)(v15 * v101);
          v104 = (float)((float)((float)(v18 * v100) + (float)(v102 * v15)) + (float)(v101 * v16)) - (float)(v17 * v99);
          v105 = (float)((float)((float)(v18 * v101) + (float)(v102 * v17)) + (float)(v99 * v15)) - (float)(v16 * v100);
          v106 = (float)((float)((float)(v102 * v18) - (float)(v99 * v16)) - (float)(v100 * v15)) - (float)(v101 * v17);
          v107 = sqrtf((float)((float)((float)(v104 * v104) + (float)(v103 * v103)) + (float)(v105 * v105))+ (float)(v106 * v106));
          v33 = v103 / v107;
          v32 = v104 / v107;
          v34 = v105 / v107;
          v35 = v106 / v107;
          v108 = v30 + v30;
          v109 = v29 + v29;
          v85 = v31 + v31;
          v86 = v13 + (float)(v35 * v35);
          v87 = (float)((float)((float)(v29 + v29) * v32) + (float)(v33 * (float)(v30 + v30)))
              + (float)(v34 * (float)(v31 + v31));
          v41 = -v34;
          v88 = (float)((float)(v35 * (float)((float)(v32 * v85) - (float)(v34 * (float)(v29 + v29))))
                      + (float)((float)(v30 + v30) * v86))
              + (float)(v33 * v87);
          v43 = -v33;
          v89 = (float)((float)(v35 * (float)((float)(v34 * (float)(v30 + v30)) - (float)(v33 * v85)))
                      + (float)(v109 * v86))
              + (float)(v32 * v87);
          v45 = -v32;
          v90 = v35 * (float)((float)(v33 * v109) - (float)(v32 * v108));
          goto LABEL_14;
        case 3:
          v83 = v30 + v30;
          v84 = v29 + v29;
          v85 = v31 + v31;
          v86 = v13 + (float)(v35 * v35);
          v87 = (float)((float)((float)(v29 + v29) * v32) + (float)(v33 * (float)(v30 + v30)))
              + (float)(v34 * (float)(v31 + v31));
          v41 = -v34;
          v88 = (float)((float)(v35 * (float)((float)(v32 * v85) - (float)(v34 * (float)(v29 + v29))))
                      + (float)((float)(v30 + v30) * v86))
              + (float)(v33 * v87);
          v43 = -v33;
          v89 = (float)((float)((float)((float)(v34 * (float)(v30 + v30)) - (float)(v33 * v85)) * v35)
                      + (float)(v84 * v86))
              + (float)(v32 * v87);
          v45 = -v32;
          v90 = (float)((float)(v33 * v84) - (float)(v32 * v83)) * v35;
LABEL_14:
          v110 = (float)(v90 + (float)(v85 * v86)) + (float)(v34 * v87);
          v2 = v88 - v27;
          v3 = v89 - v26;
          v4 = v110 - v28;
          break;
        default:
          v43 = -v33;
          v45 = -v32;
          v41 = -v34;
          break;
      }
      v111 = (float)((float)((float)(v16 * v35) + (float)(v18 * v43)) + (float)(v15 * v41)) + (float)(v32 * v17);
      v112 = (float)((float)((float)(v15 * v35) + (float)(v18 * v45)) + (float)(v17 * v43)) + (float)(v34 * v16);
      v113 = (float)((float)((float)(v17 * v35) + (float)(v18 * v41)) + (float)(v16 * v45)) + (float)(v33 * v15);
      v114 = (float)((float)((float)(v16 * v33) + (float)(v18 * v35)) + (float)(v15 * v32)) + (float)(v17 * v34);
      v115 = sqrtf((float)((float)((float)(v112 * v112) + (float)(v111 * v111)) + (float)(v113 * v113))+ (float)(v114 * v114));
      v116 = v111 / v115;
      v117 = v112 / v115;
      v118 = v113 / v115;
      v119 = v114 / v115;
      *v23 = v116;
      v23[1] = v117;
      v23[2] = v118;
      v23[3] = v119;
      v120 = v13 + (float)(v119 * v119);
      v121 = (float)((float)((float)(v3 + v3) * v117) + (float)(v116 * (float)(v2 + v2)))
           + (float)(v118 * (float)(v4 + v4));
      v7 += 76;
      v23[4] = v20
             + (float)((float)((float)(v119
                                     * (float)((float)(v117 * (float)(v4 + v4)) - (float)(v118 * (float)(v3 + v3))))
                             + (float)((float)(v2 + v2) * v120))
                     + (float)(v116 * v121));
      v23[5] = v19
             + (float)((float)((float)(v119
                                     * (float)((float)(v118 * (float)(v2 + v2)) - (float)(v116 * (float)(v4 + v4))))
                             + (float)((float)(v3 + v3) * v120))
                     + (float)(v117 * v121));
      v23[6] = v21
             + (float)((float)((float)(v119
                                     * (float)((float)(v116 * (float)(v3 + v3)) - (float)(v117 * (float)(v2 + v2))))
                             + (float)((float)(v4 + v4) * v120))
                     + (float)(v118 * v121));
      v9 += 10;
      v10 += 8;
      v12 += 4;
    }
    while (v8 != v7);
  }
}

void physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia(physx::Dy::FeatherstoneArticulation *this, physx::Dy::ArticulationData *a2, double a3, double a4, double a5, double a6, double a7, double a8, int32x4_t a9)
{
  int32x4_t v9;
  physx::Dy::ArticulationData *v10;
  int v11;
  uint64_t v12;
  physx::Dy::FeatherstoneArticulation *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float32x2_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  float32x2_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float v64;
  float v65;
  float32x2_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  uint64_t v85;
  float *v86;
  __int128 *v87;
  float *v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float *v95;
  float *v96;
  uint64_t v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  char *v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t v111;
  float v112;
  uint64_t v113;
  float32x2_t *v114;
  uint64_t v115;
  float v116;
  float32x2_t v117;
  float v118;
  float32x2_t *v119;
  _DWORD *v120;
  float32x2_t *v121;
  uint64_t v122;
  __int32 v123;
  __int32 v124;
  __int32 v125;
  uint64_t v126;
  float32x2_t *v127;
  float *v128;
  _BYTE *v129;
  float32x2_t v130;
  float v131;
  float *v132;
  float32x2_t *v133;
  uint64_t v134;
  float v135;
  float32x2_t v136;
  float v137;
  __int128 v138;
  uint64_t v139;
  float v140;
  float v141;
  uint64_t v142;
  float v143;
  float32x2_t v144;
  float32x2_t *v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x2_t v151;
  uint64_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int32x2_t v155;
  int32x2_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  int32x2_t v160;
  int32x2_t v161;
  float32x4_t v162;
  int32x4_t v163;
  float32x4_t v164;
  int32x4_t v165;
  __int32 v166;
  __int32 v167;
  int8x8_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  int8x16_t v176;
  float32x4_t v177;
  int8x16_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x2_t v184;
  float32x2_t v185;
  float32x2_t v186;
  int32x2_t v187;
  int32x2_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x2_t v191;
  float32x2_t v192;
  int8x8_t v193;
  float32x4_t v194;
  float32x2_t v195;
  float32x2_t v196;
  int v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x2_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int8x16_t v239;
  int8x16_t v240;
  float32x2_t v241;
  float32x2_t v242;
  int32x2_t v243;
  int32x2_t v244;
  float32x4_t v245;
  float32x2_t v246;
  int8x8_t v247;
  float32x4_t v248;
  float32x2_t v249;
  float32x2_t v250;
  int v251;
  float32x2_t v252;
  float32x2_t v253;
  float32x2_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x2_t v257;
  float32x4_t v258;
  float32x4_t v259;
  int8x8_t v260;
  float32x4_t v261;
  int8x8_t v262;
  int8x8_t v263;
  float32x4_t v264;
  unsigned __int32 v265;
  unsigned __int32 v266;
  unsigned __int32 v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  int8x16_t v274;
  int8x16_t v275;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  float32x2_t *v284;
  uint64_t v285;
  _BYTE v286[108];
  _DWORD __src[9];
  __int128 v288;
  __int128 v289;
  int v290;
  __int32 v291;
  _BYTE v292[12];
  unsigned int v293;
  unint64_t v294;
  float v295;
  uint64_t v296;
  float v297;
  uint64_t v298;
  __int32 v299;
  float v300;
  uint64_t v301;
  float v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  char v310;
  _BYTE v311[60];

  v10 = a2;
  *(_QWORD *)&v311[36] = *MEMORY[0x24BDAC8D0];
  v11 = *((_DWORD *)a2 + 110);
  v12 = (v11 - 1);
  if (v11 != 1)
  {
    v13 = this;
    v14 = *((_QWORD *)a2 + 56);
    v282 = *((_QWORD *)a2 + 57);
    v15 = v14 + 160 * v12 + 16;
    v16 = *((_QWORD *)a2 + 54);
    v17 = 76 * v12 + 12;
    v18 = 36 * (v11 - 1);
    v285 = (96 * (v11 - 1)) | 0x10;
    v19 = 0uLL;
    v283 = v14;
    v281 = v16;
    do
    {
      v20 = v282 + 80 * v12;
      v23 = *(unsigned __int8 *)(v20 + 76);
      v21 = (unsigned __int8 *)(v20 + 76);
      v22 = v23;
      if (v23)
      {
        v24 = *((_QWORD *)v13 + 60) + 112 * v12;
        v25 = (float *)(*((_QWORD *)v13 + 66) + v17);
        v26 = v15;
        do
        {
          v27.i32[0] = *(_DWORD *)(v24 + 8);
          v28 = *(v25 - 3);
          v29 = *(v25 - 2);
          v30 = *(float *)(v24 + 20);
          v31 = *(v25 - 1);
          v32 = *v25;
          v33 = *(float *)(v24 + 32);
          v34 = v25[1];
          v35 = v25[2];
          v36 = (float)((float)((float)(v28 * v27.f32[0]) + (float)(v29 * v30)) + (float)(v31 * v33))
              + (float)((float)((float)(*v25 * *(float *)(v24 + 44)) + (float)(v34 * *(float *)(v24 + 56)))
                      + (float)(v35 * *(float *)(v24 + 68)));
          v37 = *(int32x2_t *)v24;
          v38 = *(float32x2_t *)(v24 + 12);
          v39 = *(float32x2_t *)(v24 + 24);
          v40 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v24, v28), vmul_n_f32(v38, v29)), vmul_n_f32(v39, v31)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v24 + 36), *v25), vmul_n_f32(*(float32x2_t *)(v24 + 48), v34)), vmul_n_f32(*(float32x2_t *)(v24 + 60), v35)));
          v41 = (float)(vmlas_n_f32(vmuls_lane_f32(v34, v39, 1), *v25, v39.f32[0]) + (float)(v33 * v35))
              + (float)((float)((float)(v28 * *(float *)(v24 + 80)) + (float)(v29 * *(float *)(v24 + 92)))
                      + (float)(v31 * *(float *)(v24 + 104)));
          *(float *)(v26 - 8) = v36;
          v42 = vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v24 + 72), v28), vmul_n_f32(*(float32x2_t *)(v24 + 84), v29)), vmul_n_f32(*(float32x2_t *)(v24 + 96), v31));
          v27.f32[1] = v30;
          *(float32x2_t *)(v26 - 16) = v40;
          a3 = COERCE_DOUBLE(vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v37, (int32x2_t)v38), v34), (float32x2_t)vzip1_s32(v37, (int32x2_t)v38), v32), v27, v35), v42));
          *(double *)v26 = a3;
          *(float *)(v26 + 8) = v41;
          v26 += 32;
          v25 += 6;
          --v22;
        }
        while (v22);
        v43 = *v21;
      }
      else
      {
        v43 = 0;
      }
      v44 = v14 + 160 * v12;
      v45 = *(unsigned __int8 *)(*(_QWORD *)(v16 + 40 * v12 + 24) + 270);
      v46 = *((_QWORD *)v10 + 38);
      v47 = *((_QWORD *)v10 + 40);
      v48 = *((_QWORD *)v10 + 46);
      v49 = v48 + 96 * v12;
      v50 = *((_QWORD *)v10 + 44);
      v284 = (float32x2_t *)v15;
      if (v45 >= 2)
      {
        if (v45 == 2)
        {
          v74 = 0.0;
          v75 = 1.0;
          v76 = 1.0;
          v77 = 0.0;
          v288 = xmmword_2260E5F10;
          v289 = xmmword_2260E5F10;
          v78 = 0.0;
          *(float *)&v290 = 1.0;
          v79 = 0.0;
          v80 = 0.0;
          v81 = 0.0;
          v82 = 0.0;
          v83 = 1.0;
          v84 = 1.0;
          if (v43)
          {
            v85 = 0;
            v86 = (float *)(v50 + v17);
            v87 = &v288;
            do
            {
              v88 = (float *)(v44 + 32 * v85);
              v89 = *v88;
              v90 = v88[1];
              v91 = v88[2];
              v92 = v88[4];
              v93 = v88[5];
              v94 = v88[6];
              v95 = v86;
              v96 = (float *)v87;
              v97 = v43;
              do
              {
                *v96++ = (float)((float)((float)(v90 * v95[1]) + (float)(*v95 * v89)) + (float)(v95[2] * v91))
                       + (float)((float)((float)(v93 * *(v95 - 2)) + (float)(*(v95 - 3) * v92))
                               + (float)(*(v95 - 1) * v94));
                v95 += 6;
                --v97;
              }
              while (v97);
              ++v85;
              v87 = (__int128 *)((char *)v87 + 12);
            }
            while (v85 != v43);
            v83 = *(float *)&v290;
            v82 = *((float *)&v289 + 1);
            v84 = *(float *)&v289;
            v81 = *((float *)&v289 + 3);
            v80 = *((float *)&v289 + 2);
            v79 = *((float *)&v288 + 3);
            v78 = *((float *)&v288 + 2);
            v77 = *((float *)&v288 + 1);
            v76 = *(float *)&v288;
          }
          v98 = (float)(v84 * v83) - (float)(v82 * v81);
          v99 = (float)(v82 * v80) - (float)(v79 * v83);
          v100 = (float)(v79 * v81) - (float)(v84 * v80);
          v101 = (float)((float)(v77 * v99) + (float)(v98 * v76)) + (float)(v100 * v78);
          v102 = 0.0;
          v103 = 1.0;
          v104 = 0.0;
          v105 = 1.0;
          if (v101 != 0.0)
          {
            v75 = v98 * (float)(1.0 / v101);
            v74 = v99 * (float)(1.0 / v101);
            v102 = v100 * (float)(1.0 / v101);
            v103 = (float)((float)(v83 * v76) - (float)(v80 * v78)) * (float)(1.0 / v101);
            v104 = (float)((float)(v80 * v77) - (float)(v81 * v76)) * (float)(1.0 / v101);
            v105 = (float)((float)(v76 * v84) - (float)(v77 * v79)) * (float)(1.0 / v101);
          }
          *(float *)__src = v75;
          *(float *)&__src[1] = v74;
          *(float *)&__src[2] = v102;
          *(float *)&__src[3] = v74;
          *(float *)&__src[4] = v103;
          *(float *)&__src[5] = v104;
          *(float *)&__src[6] = v102;
          *(float *)&__src[7] = v104;
          *(float *)&__src[8] = v105;
          if (v43)
          {
            v278 = v48;
            v279 = v46;
            v280 = v17;
            v106 = v43;
            v107 = (char *)(v47 + v18);
            v108 = __src;
            v109 = v43;
            do
            {
              memcpy(v107, v108, 4 * v43);
              v108 += 3;
              v107 += 12;
              --v109;
            }
            while (v109);
            v110 = 0;
            v13 = this;
            v10 = a2;
            v19 = 0uLL;
            v48 = v278;
            v46 = v279;
            do
            {
              v111 = 0;
              v112 = 0.0;
              v113 = v47;
              v114 = v284;
              v115 = v43;
              v116 = 0.0;
              v117 = 0;
              do
              {
                v118 = *(float *)(v113 + v18);
                v111 = vadd_f32(v111, vmul_n_f32(v114[-2], v118));
                v116 = v116 + (float)(v118 * v114[-1].f32[0]);
                v117 = vadd_f32(v117, vmul_n_f32(*v114, v118));
                v112 = v112 + (float)(v118 * v114[1].f32[0]);
                v114 += 4;
                v113 += 4;
                --v115;
              }
              while (v115);
              v119 = (float32x2_t *)(v49 + 32 * v110);
              *v119 = v111;
              v119[1].f32[0] = v116;
              v119[1].i32[1] = 0;
              v119[2] = v117;
              v119[3].f32[0] = v112;
              v119[3].i32[1] = 0;
              ++v110;
              v47 += 12;
            }
            while (v110 != v43);
            v120 = v311;
            v121 = v284;
            v122 = v43;
            do
            {
              v123 = v121->i32[1];
              *(v120 - 9) = v121->i32[0];
              *(v120 - 6) = v123;
              *(v120 - 3) = v121[1].i32[0];
              v124 = v121[-2].i32[1];
              *v120 = v121[-2].i32[0];
              v120[3] = v124;
              v125 = v121[-1].i32[0];
              v121 += 4;
              v120[6] = v125;
              ++v120;
              --v122;
            }
            while (v122);
            v14 = v283;
            v17 = v280;
            v16 = v281;
          }
          else
          {
            v106 = 0;
            v14 = v283;
            v16 = v281;
          }
          v126 = 0;
          v127 = (float32x2_t *)(v48 + v285);
          v128 = (float *)&v310;
          do
          {
            v129 = &v292[32 * v126 - 4];
            *((_OWORD *)v129 + 1) = v19;
            *(_OWORD *)v129 = v19;
            if (v43)
            {
              v130 = 0;
              v131 = 0.0;
              v132 = v128;
              v133 = v127;
              v134 = v106;
              v135 = 0.0;
              v136 = 0;
              do
              {
                v137 = *v132++;
                v130 = vadd_f32(v130, vmul_n_f32(v133[-2], v137));
                v135 = v135 + (float)(v137 * v133[-1].f32[0]);
                v136 = vadd_f32(v136, vmul_n_f32(*v133, v137));
                v131 = v131 + (float)(v137 * v133[1].f32[0]);
                v133 += 4;
                --v134;
              }
              while (v134);
              *(float32x2_t *)v129 = v130;
              *((float *)v129 + 2) = v135;
              *((float32x2_t *)v129 + 2) = v136;
              *((float *)v129 + 6) = v131;
            }
            ++v126;
            v128 += 3;
          }
          while (v126 != 6);
          v51 = v17;
          v62.i64[0] = *(_QWORD *)v292;
          v63 = v297;
          v67.i64[0] = v301;
          v61.i32[0] = v291;
          v72.i64[0] = v294;
          v64 = v300;
          v73.i32[0] = v299;
          v65 = v302;
          v69.i64[0] = __PAIR64__(v306, v305);
          *(_QWORD *)&v138 = v307;
          v71.i64[0] = v308;
          *(_DWORD *)v286 = v291;
          v62.i64[1] = v296;
          *(float32x4_t *)&v286[4] = v62;
          *(float *)&v286[20] = v297;
          *(float *)&v286[24] = v300;
          v67.i64[1] = v304;
          *(float32x4_t *)&v286[28] = v67;
          *(_DWORD *)&v286[44] = v305;
          *(_DWORD *)&v286[48] = v306;
          v69.i64[1] = v307;
          *((_QWORD *)&v138 + 1) = v308;
          *(_OWORD *)&v286[52] = v138;
          *(_DWORD *)&v286[68] = v309;
          *(_DWORD *)&v286[72] = v293;
          v72.i64[1] = v298;
          *(float32x4_t *)&v286[76] = v72;
          *(_QWORD *)&v286[100] = v303;
          v71.i64[1] = __PAIR64__(v293, v309);
          goto LABEL_42;
        }
        v51 = v17;
        *(_OWORD *)&v286[92] = v19;
        v62 = 0uLL;
        v65 = 0.0;
        v73.i32[0] = 0;
        *(_OWORD *)&v286[64] = v19;
        *(_OWORD *)&v286[80] = v19;
        v64 = 0.0;
        v63 = 0.0;
        v61.i32[0] = 0;
        *(_OWORD *)&v286[32] = v19;
        *(_OWORD *)&v286[48] = v19;
        v67 = 0uLL;
        v69 = 0uLL;
        v71 = 0uLL;
        v72 = 0uLL;
        *(_OWORD *)v286 = v19;
        *(_OWORD *)&v286[16] = v19;
      }
      else
      {
        v51 = v17;
        v52 = (float *)(v50 + 76 * v12);
        v53 = (float)((float)((float)(v52[4] * *(float *)(v44 + 4)) + (float)(v52[3] * *(float *)v44))
                    + (float)(v52[5] * *(float *)(v44 + 8)))
            + (float)((float)((float)(v52[1] * *(float *)(v44 + 20)) + (float)(*v52 * *(float *)(v44 + 16)))
                    + (float)(v52[2] * *(float *)(v44 + 24)));
        if (v53 <= 0.00001)
          *(float *)&a3 = 0.0;
        else
          *(float *)&a3 = 1.0 / v53;
        *(_DWORD *)(v47 + 36 * v12) = LODWORD(a3);
        v54.i64[0] = *(_QWORD *)v44;
        v54.i32[2] = *(_DWORD *)(v44 + 8);
        v54.i32[3] = *(_DWORD *)(v44 + 16);
        v55 = vmulq_n_f32(v54, *(float *)&a3);
        *(_DWORD *)v49 = v55.i32[0];
        *(_DWORD *)(v49 + 12) = 0;
        *(_DWORD *)(v49 + 16) = v55.i32[3];
        v56 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&a3, 0), *(float32x2_t *)(v44 + 20));
        v57 = (int32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 4uLL);
        *(_QWORD *)(v49 + 4) = v57.i64[0];
        *(float32x2_t *)(v49 + 20) = v56;
        *(_DWORD *)(v49 + 28) = 0;
        v9.i64[0] = *(_QWORD *)(v44 + 16);
        v58 = (float32x4_t)vzip1q_s32(v9, v9);
        a9.i32[0] = *(_DWORD *)(v44 + 24);
        v57.i64[0] = *(_QWORD *)v44;
        v59 = (float32x4_t)vzip1q_s32(v57, vdupq_lane_s32(*(int32x2_t *)v44, 1));
        v60 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v55, (int8x16_t)v55, 0xCuLL), (int8x16_t)v55, 8uLL);
        v60.i32[3] = v60.i32[0];
        v61 = vmulq_f32(v55, v58);
        v62 = vmulq_f32(v60, v58);
        v63 = v61.f32[2];
        v64 = *(float *)a9.i32 * v55.f32[0];
        v65 = vmuls_lane_f32(*(float *)a9.i32, v55, 3);
        v66 = vmul_n_f32(v56, *(float *)a9.i32);
        a9.i32[1] = v59.i32[0];
        v67 = vmulq_f32(v60, (float32x4_t)vzip1q_s32(a9, a9));
        v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL);
        v68.i32[3] = v68.i32[0];
        v69 = vmulq_f32(v68, v59);
        *(int32x2_t *)v68.f32 = vdup_lane_s32(*(int32x2_t *)v9.i8, 0);
        v68.i32[0] = *(_DWORD *)(v44 + 8);
        v70 = (float32x4_t)vzip1q_s32((int32x4_t)v68, (int32x4_t)v68);
        v70.i32[2] = *(_DWORD *)(v44 + 8);
        v71 = vmulq_f32(v55, v70);
        v73 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3);
        *(float32x2_t *)v70.f32 = v56;
        v70.i64[1] = __PAIR64__(v56.u32[0], vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u32[0]);
        v72 = vmulq_f32(v70, v58);
        v73.f32[0] = vmuls_lane_f32(v56.f32[1], *(float32x2_t *)v9.i8, 1);
        *(float32x2_t *)&v286[100] = v66;
      }
      v14 = v283;
      v16 = v281;
LABEL_42:
      v139 = v46 + 112 * v12;
      v140 = *(float *)(v139 + 24);
      v141 = *(float *)(v139 + 20) - v63;
      *(float *)v286 = *(float *)v139 - v61.f32[0];
      *(float32x4_t *)&v286[4] = vsubq_f32(*(float32x4_t *)(v139 + 4), v62);
      *(float *)&v286[20] = v141;
      *(float *)&v286[24] = v140 - v64;
      *(float32x4_t *)&v286[28] = vsubq_f32(*(float32x4_t *)(v139 + 28), v67);
      *(float32x4_t *)&v286[44] = vsubq_f32(*(float32x4_t *)(v139 + 44), v69);
      *(float32x4_t *)&v286[60] = vsubq_f32(*(float32x4_t *)(v139 + 60), v71);
      *(float32x4_t *)&v286[76] = vsubq_f32(*(float32x4_t *)(v139 + 76), v72);
      v73.f32[1] = v65;
      v73.i64[1] = *(_QWORD *)&v286[100];
      *(float32x4_t *)&v286[92] = vsubq_f32(*(float32x4_t *)(v139 + 92), v73);
      v142 = v14 + 160 * v12;
      v143 = *(float *)(v142 + 120);
      v291 = 0;
      v144 = *(float32x2_t *)(v142 + 124);
      *(_DWORD *)v292 = v144.i32[1];
      *(float32x2_t *)&v292[4] = vneg_f32(v144);
      v293 = 0;
      v294 = __PAIR64__(v144.u32[0], LODWORD(v143));
      v295 = -v143;
      LODWORD(v296) = 0;
      physx::Dy::FeatherstoneArticulation::translateInertia((uint64_t)&v291, (uint64_t)v286);
      v145 = (float32x2_t *)(*((_QWORD *)v10 + 38) + 112 * *(unsigned int *)(v16 + 40 * v12 + 32));
      v146 = vadd_f32(*(float32x2_t *)&v286[8], v145[1]);
      *v145 = vadd_f32(*(float32x2_t *)v286, *v145);
      v145[1] = v146;
      v147 = vadd_f32(*(float32x2_t *)&v286[24], v145[3]);
      v145[2] = vadd_f32(*(float32x2_t *)&v286[16], v145[2]);
      v145[3] = v147;
      v148 = vadd_f32(*(float32x2_t *)&v286[40], v145[5]);
      v145[4] = vadd_f32(*(float32x2_t *)&v286[32], v145[4]);
      v145[5] = v148;
      v149 = vadd_f32(*(float32x2_t *)&v286[56], v145[7]);
      v145[6] = vadd_f32(*(float32x2_t *)&v286[48], v145[6]);
      v145[7] = v149;
      v150 = vadd_f32(*(float32x2_t *)&v286[72], v145[9]);
      v145[8] = vadd_f32(*(float32x2_t *)&v286[64], v145[8]);
      v145[9] = v150;
      v151 = vadd_f32(*(float32x2_t *)&v286[88], v145[11]);
      v145[10] = vadd_f32(*(float32x2_t *)&v286[80], v145[10]);
      v145[11] = v151;
      a3 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v286[96], v145[12]));
      *(double *)&v145[12] = a3;
      v15 = (uint64_t)&v284[-20];
      v145[13].f32[0] = *(float *)&v286[104] + v145[13].f32[0];
      v17 = v51 - 76;
      v18 -= 36;
      v285 -= 96;
      --v12;
      v19 = 0uLL;
    }
    while ((_DWORD)v12);
  }
  v152 = *((_QWORD *)v10 + 38);
  v153 = *(float32x4_t *)(v152 + 72);
  v154 = *(float32x4_t *)(v152 + 84);
  v155.i32[0] = v154.i32[3];
  v155.i32[1] = *(_DWORD *)(v152 + 100);
  v156 = vdup_lane_s32(v155, 1);
  v157 = (float32x4_t)(unint64_t)v155;
  v157.i32[2] = *(_DWORD *)(v152 + 104);
  v164.i64[1] = 0;
  v158 = *(float32x4_t *)(v152 + 36);
  v159 = *(float32x4_t *)(v152 + 48);
  v160.i32[0] = v159.i32[3];
  v160.i32[1] = *(_DWORD *)(v152 + 64);
  v161 = vdup_lane_s32(v160, 1);
  v162 = (float32x4_t)(unint64_t)v160;
  v162.i32[2] = *(_DWORD *)(v152 + 68);
  v163 = *(int32x4_t *)(v152 + 12);
  v164.i32[0] = v163.i32[3];
  v165 = *(int32x4_t *)v152;
  v166 = *(_DWORD *)(v152 + 28);
  v167 = *(_DWORD *)(v152 + 32);
  v168 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v153.f32, 0), *(int8x8_t *)v154.f32, 4uLL);
  *(int32x2_t *)&v179.u32[2] = vdup_laneq_s32((int32x4_t)v154, 3);
  *(int8x8_t *)v169.f32 = vext_s8(*(int8x8_t *)v153.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v154.f32, 1), 4uLL);
  *(int32x2_t *)&v169.u32[2] = v156;
  *(int8x8_t *)v170.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v153, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL), 4uLL);
  v170.i64[1] = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
  v171 = vaddq_f32(v154, v169);
  v172 = vaddq_f32(v157, v170);
  v169.i64[0] = 0x3F0000003F000000;
  v169.i64[1] = 0x3F0000003F000000;
  v173 = vmulq_f32(vaddq_f32(v153, v179), v169);
  v174 = v173;
  v174.i32[3] = 0;
  v175 = vmulq_f32(v171, v169);
  v176 = (int8x16_t)v175;
  v176.i32[3] = 0;
  v177 = vmulq_f32(v172, v169);
  v178 = (int8x16_t)v177;
  v178.i32[3] = 0;
  *(int8x8_t *)v179.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v158.f32, 0), *(int8x8_t *)v159.f32, 4uLL);
  *(int8x8_t *)v180.f32 = vext_s8(*(int8x8_t *)v158.f32, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v159.f32, 1), 4uLL);
  *(int32x2_t *)&v180.u32[2] = v161;
  *(int8x8_t *)v181.f32 = vext_s8((int8x8_t)vdup_laneq_s32((int32x4_t)v158, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL), 4uLL);
  v181.i64[1] = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
  v182 = vaddq_f32(v159, v180);
  v183 = vaddq_f32(v162, v181);
  v181.i64[0] = vextq_s8(v176, v176, 8uLL).u64[0];
  v184 = (float32x2_t)vextq_s8(v178, v178, 8uLL).u64[0];
  v185 = (float32x2_t)vext_s8(*(int8x8_t *)v177.f32, (int8x8_t)v184, 4uLL);
  v186 = (float32x2_t)vext_s8(*(int8x8_t *)v175.f32, *(int8x8_t *)v181.f32, 4uLL);
  v187 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v181.f32, *(float32x2_t *)v177.f32), *(float32x2_t *)v175.f32, v184);
  v188 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v175.f32, v185), v186, *(float32x2_t *)v177.f32);
  *(int8x8_t *)v190.f32 = vext_s8((int8x8_t)v188, (int8x8_t)v187, 4uLL);
  v188.i32[1] = 0;
  v189 = vmulq_f32(v182, v169);
  v190.i64[1] = v188.u32[0];
  v191 = (float32x2_t)vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL).u64[0];
  v192 = (float32x2_t)vext_s8(*(int8x8_t *)v173.f32, (int8x8_t)v191, 4uLL);
  v193 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v177.f32, v192), v185, *(float32x2_t *)v173.f32);
  v194 = vmulq_f32(v174, v190);
  v194.i64[0] = vpaddq_f32(v194, v194).u64[0];
  v195 = vpadd_f32(*(float32x2_t *)v194.f32, *(float32x2_t *)v194.f32);
  v196 = vrecpe_f32(v195);
  v197 = 4;
  do
  {
    v196 = vmul_f32(v196, vrecps_f32(v195, v196));
    --v197;
  }
  while (v197);
  v164.i32[1] = v166;
  *(int32x2_t *)&v179.u32[2] = vdup_laneq_s32((int32x4_t)v159, 3);
  v198.i64[0] = 0x3F0000003F000000;
  v198.i64[1] = 0x3F0000003F000000;
  v202 = vmulq_f32(vaddq_f32(v158, v179), v198);
  v199 = (float32x4_t)v165;
  v199.i32[3] = 0;
  v200 = v164;
  v200.i32[2] = v167;
  v201 = (float32x4_t)v163;
  v201.i32[3] = 0;
  v202.i32[3] = 0;
  v189.i32[3] = 0;
  v203 = vmulq_f32(v183, v198);
  v203.i32[3] = 0;
  if (v195.f32[0] == 0.0)
  {
    v208 = (float32x4_t)xmmword_2260E5F40;
    v207 = (float32x4_t)xmmword_2260E5F20;
    v204 = (float32x4_t)xmmword_2260E5F10;
  }
  else
  {
    v204 = vmulq_n_f32(v190, v196.f32[0]);
    v204.i32[3] = 0;
    *(int8x8_t *)v205.f32 = vext_s8((int8x8_t)vdup_lane_s32(v187, 0), (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, v184), *(float32x2_t *)v177.f32, v191), 4uLL);
    *(int8x8_t *)&v205.u32[2] = v193;
    v206 = vmls_f32(vmul_f32(*(float32x2_t *)v173.f32, v186), v192, *(float32x2_t *)v175.f32);
    v207 = vmulq_n_f32(v205, v196.f32[0]);
    v207.i32[3] = 0;
    *(int8x8_t *)v205.f32 = vext_s8((int8x8_t)vdup_lane_s32(v188, 0), v193, 4uLL);
    *(float32x2_t *)&v205.u32[2] = v206;
    v208 = vmulq_n_f32(v205, v196.f32[0]);
    v208.i32[3] = 0;
  }
  v209 = vnegq_f32(v199);
  v209.i32[3] = 0;
  v210 = vnegq_f32(v201);
  v210.i32[3] = 0;
  v211 = vnegq_f32(v200);
  v211.i32[3] = 0;
  v212 = vmulq_n_f32(v209, v204.f32[0]);
  v212.i32[3] = 0;
  v213 = vmulq_lane_f32(v210, *(float32x2_t *)v204.f32, 1);
  v213.i32[3] = 0;
  v214 = vmulq_laneq_f32(v211, v204, 2);
  v214.i32[3] = 0;
  v215 = vaddq_f32(v212, v213);
  v216 = vmulq_n_f32(v209, v207.f32[0]);
  v216.i32[3] = 0;
  v217 = vmulq_lane_f32(v210, *(float32x2_t *)v207.f32, 1);
  v217.i32[3] = 0;
  v218 = vaddq_f32(v214, v215);
  v219 = vmulq_laneq_f32(v211, v207, 2);
  v219.i32[3] = 0;
  v220 = vaddq_f32(v219, vaddq_f32(v216, v217));
  v221 = vmulq_n_f32(v209, v208.f32[0]);
  v221.i32[3] = 0;
  v222 = vmulq_lane_f32(v210, *(float32x2_t *)v208.f32, 1);
  v222.i32[3] = 0;
  v223 = vmulq_laneq_f32(v211, v208, 2);
  v223.i32[3] = 0;
  v224 = vaddq_f32(v223, vaddq_f32(v221, v222));
  *(int8x8_t *)v222.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v165.i8, 0), *(int8x8_t *)v163.i8, 4uLL);
  v222.i64[1] = vdup_laneq_s32(v163, 3).u32[0];
  *(int8x8_t *)v223.f32 = vext_s8(*(int8x8_t *)v165.i8, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v163.i8, 1), 4uLL);
  v223.i64[1] = vdup_lane_s32(*(int32x2_t *)v164.f32, 1).u32[0];
  *(int8x8_t *)v225.f32 = vext_s8((int8x8_t)vdup_laneq_s32(v165, 2), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL), 4uLL);
  v225.i64[1] = vdup_laneq_s32((int32x4_t)v200, 2).u32[0];
  v226 = vmulq_n_f32(v218, v222.f32[0]);
  v226.i32[3] = 0;
  v227 = vmulq_lane_f32(v220, *(float32x2_t *)v222.f32, 1);
  v227.i32[3] = 0;
  v228 = vmulq_laneq_f32(v224, v222, 2);
  v228.i32[3] = 0;
  v229 = vaddq_f32(vaddq_f32(v226, v227), v228);
  v230 = vmulq_n_f32(v218, v223.f32[0]);
  v230.i32[3] = 0;
  v231 = vmulq_lane_f32(v220, *(float32x2_t *)v223.f32, 1);
  v231.i32[3] = 0;
  v232 = vmulq_laneq_f32(v224, v223, 2);
  v232.i32[3] = 0;
  v233 = vaddq_f32(v230, v231);
  v234 = vmulq_n_f32(v218, v225.f32[0]);
  v234.i32[3] = 0;
  v235 = vmulq_lane_f32(v220, *(float32x2_t *)v225.f32, 1);
  v235.i32[3] = 0;
  v236 = vmulq_laneq_f32(v224, v225, 2);
  v236.i32[3] = 0;
  v237 = vaddq_f32(vaddq_f32(v234, v235), v236);
  v238 = vaddq_f32(v202, v229);
  v239 = (int8x16_t)vaddq_f32(v189, vaddq_f32(v233, v232));
  v240 = (int8x16_t)vaddq_f32(v203, v237);
  v241 = (float32x2_t)vextq_s8(v240, v240, 8uLL).u64[0];
  v235.i64[0] = vextq_s8(v240, v240, 4uLL).u64[0];
  v242 = (float32x2_t)vextq_s8(v239, v239, 4uLL).u64[0];
  v243 = (int32x2_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL), *(float32x2_t *)v240.i8), *(float32x2_t *)v239.i8, v241);
  v244 = (int32x2_t)vmls_f32(vmul_f32(*(float32x2_t *)v239.i8, *(float32x2_t *)v235.f32), v242, *(float32x2_t *)v240.i8);
  *(int8x8_t *)v245.f32 = vext_s8((int8x8_t)v244, (int8x8_t)v243, 4uLL);
  v244.i32[1] = 0;
  v245.i64[1] = v244.u32[0];
  v246 = (float32x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 4uLL).u64[0];
  v247 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v240.i8, v246), *(float32x2_t *)v235.f32, *(float32x2_t *)v238.f32);
  v248 = vmulq_f32(v238, v245);
  v248.i64[0] = vpaddq_f32(v248, v248).u64[0];
  v249 = vpadd_f32(*(float32x2_t *)v248.f32, *(float32x2_t *)v248.f32);
  v250 = vrecpe_f32(v249);
  v251 = 4;
  do
  {
    v250 = vmul_f32(v250, vrecps_f32(v249, v250));
    --v251;
  }
  while (v251);
  if (v249.f32[0] == 0.0)
  {
    v259 = (float32x4_t)xmmword_2260E5F40;
    v258 = (float32x4_t)xmmword_2260E5F20;
    v255 = (float32x4_t)xmmword_2260E5F10;
  }
  else
  {
    v252 = (float32x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL).u64[0];
    v253 = vmul_f32(*(float32x2_t *)v238.f32, v242);
    v254 = vmul_f32(v241, *(float32x2_t *)v238.f32);
    v255 = vmulq_n_f32(v245, v250.f32[0]);
    v255.i32[3] = 0;
    *(int8x8_t *)v256.f32 = vext_s8((int8x8_t)vdup_lane_s32(v243, 0), (int8x8_t)vmls_f32(v254, *(float32x2_t *)v240.i8, v252), 4uLL);
    *(int8x8_t *)&v256.u32[2] = v247;
    v257 = vmls_f32(v253, v246, *(float32x2_t *)v239.i8);
    v258 = vmulq_n_f32(v256, v250.f32[0]);
    v258.i32[3] = 0;
    *(int8x8_t *)v256.f32 = vext_s8((int8x8_t)vdup_lane_s32(v244, 0), v247, 4uLL);
    *(float32x2_t *)&v256.u32[2] = v257;
    v259 = vmulq_n_f32(v256, v250.f32[0]);
    v259.i32[3] = 0;
  }
  v260 = (int8x8_t)vdupq_laneq_s32((int32x4_t)v218, 2).u64[0];
  v261 = vaddq_f32(vaddq_f32(vmulq_n_f32(v255, v218.f32[0]), vmulq_lane_f32(v258, *(float32x2_t *)v218.f32, 1)), vmulq_laneq_f32(v259, v218, 2));
  v262 = (int8x8_t)vdupq_lane_s32(*(int32x2_t *)v220.f32, 1).u64[0];
  v263 = (int8x8_t)vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
  v264 = vaddq_f32(vaddq_f32(vmulq_n_f32(v255, v220.f32[0]), vmulq_lane_f32(v258, *(float32x2_t *)v220.f32, 1)), vmulq_laneq_f32(v259, v220, 2));
  v265 = vdupq_lane_s32(*(int32x2_t *)v224.f32, 0).u32[0];
  v266 = vdupq_lane_s32(*(int32x2_t *)v224.f32, 1).u32[0];
  v267 = vdupq_laneq_s32((int32x4_t)v224, 2).u32[0];
  v268 = vaddq_f32(vaddq_f32(vmulq_n_f32(v255, v224.f32[0]), vmulq_lane_f32(v258, *(float32x2_t *)v224.f32, 1)), vmulq_laneq_f32(v259, v224, 2));
  *(int8x8_t *)v269.f32 = vext_s8((int8x8_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v218.f32, 0), *(int8x8_t *)v220.f32, 4uLL);
  v269.i64[1] = v265;
  *(int8x8_t *)v270.f32 = vext_s8(*(int8x8_t *)v218.f32, v262, 4uLL);
  v270.i64[1] = v266;
  *(int8x8_t *)v271.f32 = vext_s8(v260, v263, 4uLL);
  v271.i64[1] = v267;
  v272 = vaddq_f32(vmulq_laneq_f32(v271, v261, 2), vaddq_f32(vmulq_n_f32(v269, v261.f32[0]), vmulq_lane_f32(v270, *(float32x2_t *)v261.f32, 1)));
  v273 = vaddq_f32(v207, vaddq_f32(vmulq_laneq_f32(v271, v264, 2), vaddq_f32(vmulq_n_f32(v269, v264.f32[0]), vmulq_lane_f32(v270, *(float32x2_t *)v264.f32, 1))));
  v274 = (int8x16_t)vaddq_f32(v208, vaddq_f32(vmulq_laneq_f32(v271, v268, 2), vaddq_f32(vmulq_n_f32(v269, v268.f32[0]), vmulq_lane_f32(v270, *(float32x2_t *)v268.f32, 1))));
  *(int32x2_t *)((char *)v10 + 556) = vzip1_s32(*(int32x2_t *)v261.f32, *(int32x2_t *)v264.f32);
  *(int8x8_t *)v270.f32 = vext_s8(*(int8x8_t *)v268.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v261, (int8x16_t)v261, 8uLL), 4uLL);
  v275 = (int8x16_t)vuzp1q_s32((int32x4_t)v268, (int32x4_t)v268);
  v268.i32[1] = v261.i32[1];
  *(_QWORD *)((char *)v10 + 564) = v268.i64[0];
  *((_DWORD *)v10 + 143) = v264.i32[1];
  *((_QWORD *)v10 + 72) = v270.i64[0];
  *((_DWORD *)v10 + 146) = v264.i32[2];
  *(int8x16_t *)((char *)v10 + 588) = vextq_s8(v275, (int8x16_t)vaddq_f32(v204, v272), 0xCuLL);
  v273.i32[3] = v274.i32[0];
  *(float32x4_t *)((char *)v10 + 604) = v273;
  *(int8x16_t *)((char *)v10 + 620) = vextq_s8(vextq_s8(v274, v274, 0xCuLL), (int8x16_t)v255, 8uLL);
  *(int8x16_t *)((char *)v10 + 636) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v255, (int32x4_t)v255), (int8x16_t)v258, 0xCuLL);
  *(_QWORD *)((char *)v10 + 652) = v259.i64[0];
  *((_DWORD *)v10 + 165) = v259.i32[2];
}

float32_t physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialZ(float32_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float32x2_t *v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float32x2_t v38;
  float v39;
  float *v40;
  float *v41;
  float32x2_t *v42;
  float v43;
  float32x2_t v44;
  float v45;
  float v46;
  float32_t v48;
  float32x2_t v49;
  float v50;
  uint64_t v51;
  float32x2_t *v53;
  float32x2_t v54;
  float32_t v55;
  float32x2_t v56;
  float32x2_t v62;
  float32x2_t v63;

  v4 = (*(_DWORD *)(a3 + 440) - 1);
  if (*(_DWORD *)(a3 + 440) != 1)
  {
    v5 = *(_QWORD *)(a3 + 432);
    v6 = *(_QWORD *)(a3 + 448);
    v7 = *(_QWORD *)(a3 + 456);
    v8 = a4[2];
    v9 = a4[3];
    v10 = a4[8];
    v11 = *(_QWORD *)(a3 + 368) + 96 * v4 + 16;
    v12 = *(_QWORD *)(a3 + 352) + 76 * v4 + 12;
    v13 = *(_QWORD *)(a3 + 304);
    v14 = v6 + 160 * v4 + 132;
    do
    {
      v15 = v13 + 112 * v4;
      v16 = (float *)(v8 + 32 * v4);
      v17.i32[0] = *(_DWORD *)(v15 + 8);
      v19 = *v16;
      v18 = v16[1];
      v20 = v16[2];
      v21 = *(float *)(v15 + 32);
      v22 = v16[4];
      v23 = v16[5];
      v24 = v16[6];
      v25 = (float)((float)((float)(*v16 * v17.f32[0]) + (float)(v18 * *(float *)(v15 + 20))) + (float)(v20 * v21))
          + (float)((float)((float)(v22 * *(float *)(v15 + 44)) + (float)(v23 * *(float *)(v15 + 56)))
                  + (float)(v24 * *(float *)(v15 + 68)));
      v26 = (float)((float)(*v16 * *(float *)(v15 + 80)) + (float)(v18 * *(float *)(v15 + 92)))
          + (float)(v20 * *(float *)(v15 + 104));
      v27 = (float32x2_t *)(v9 + 32 * v4);
      v28 = *(float32x2_t *)(v15 + 12);
      v29 = *(float32x2_t *)(v15 + 24);
      v30 = (float)(vmlas_n_f32(vmuls_lane_f32(v23, v29, 1), v22, v29.f32[0]) + (float)(v21 * v24)) + v26;
      v31 = vadd_f32(vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v15, v19), vmul_n_f32(v28, v18)), vmul_n_f32(v29, v20)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v15 + 36), v22), vmul_n_f32(*(float32x2_t *)(v15 + 48), v23)), vmul_n_f32(*(float32x2_t *)(v15 + 60), v24))), *v27);
      v32 = v25 + v27[1].f32[0];
      v17.i32[1] = *(_DWORD *)(v15 + 20);
      v33 = vadd_f32(vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v15, (int32x2_t)v28), v23), (float32x2_t)vzip1_s32(*(int32x2_t *)v15, (int32x2_t)v28), v22), v17, v24), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v15 + 72), v19), vmul_n_f32(*(float32x2_t *)(v15 + 84), v18)), vmul_n_f32(*(float32x2_t *)(v15 + 96), v20))), v27[2]);
      v34 = v30 + v27[3].f32[0];
      v35 = v7 + 80 * v4;
      v36 = *(unsigned __int8 *)(v35 + 76);
      if (*(_BYTE *)(v35 + 76))
      {
        v37 = (float *)(v10 + 4 * *(unsigned int *)(v35 + 72));
        v38 = 0;
        v39 = 0.0;
        v40 = (float *)v14;
        v41 = (float *)v12;
        v42 = (float32x2_t *)v11;
        v43 = 0.0;
        v44 = 0;
        do
        {
          v45 = *v37++;
          v46 = v45
              - (float)((float)((float)((float)(v31.f32[1] * v41[1]) + (float)(*v41 * v31.f32[0]))
                              + (float)(v41[2] * v32))
                      + (float)((float)((float)(v33.f32[1] * *(v41 - 2)) + (float)(*(v41 - 3) * v33.f32[0]))
                              + (float)(*(v41 - 1) * v34)));
          *v40++ = v46;
          v38 = vadd_f32(v38, vmul_n_f32(v42[-2], v46));
          v43 = v43 + (float)(v46 * v42[-1].f32[0]);
          v44 = vadd_f32(v44, vmul_n_f32(*v42, v46));
          v39 = v39 + (float)(v46 * v42[1].f32[0]);
          v42 += 4;
          v41 += 6;
          --v36;
        }
        while (v36);
      }
      else
      {
        v38 = 0;
        v43 = 0.0;
        v39 = 0.0;
        v44 = 0;
      }
      _D1 = vadd_f32(v31, v38);
      v48 = v32 + v43;
      v49 = vadd_f32(v33, v44);
      v50 = v34 + v39;
      v51 = v6 + 160 * v4;
      _S4 = *(_DWORD *)(v51 + 120);
      v53 = (float32x2_t *)(v9 + 32 * *(unsigned int *)(v5 + 40 * v4 + 32));
      v54 = vadd_f32(_D1, *v53);
      v55 = v48 + v53[1].f32[0];
      v56.i32[1] = HIDWORD(*(_QWORD *)(v51 + 124));
      v56.i32[0] = _S4;
      __asm { FMLA            S17, S4, V1.S[1] }
      v62 = (float32x2_t)vdup_lane_s32((int32x2_t)_D1, 0);
      _D1.f32[0] = v48;
      v62.f32[0] = v48;
      v63 = vadd_f32(v49, vmla_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D1, vneg_f32(v56))), v62, *(float32x2_t *)(v51 + 124)));
      *v53 = v54;
      v53[1].f32[0] = v55;
      v53[2] = vadd_f32(v63, v53[2]);
      result = (float)(v50 + _S17) + v53[3].f32[0];
      v53[3].f32[0] = result;
      v11 -= 96;
      v12 -= 76;
      v14 -= 160;
      --v4;
    }
    while ((_DWORD)v4);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeJointAccelerationW(uint64_t result, uint64_t a2, unsigned __int8 a3, float *a4, uint64_t a5, unsigned int a6)
{
  float v6;
  float v7;
  float v8;
  float *v9;
  float v10;
  float v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = *a4;
    v7 = a4[1];
    v8 = a4[2];
    v9 = (float *)(a2 + 132);
    v10 = a4[4];
    v11 = a4[5];
    v12 = (float *)(a2 + 16);
    v13 = (float *)v26;
    v14 = a3;
    v15 = a4[6];
    do
    {
      v16 = *v9++;
      *v13++ = v16
             - (float)((float)((float)((float)(v7 * v12[1]) + (float)(*v12 * v6)) + (float)(v12[2] * v8))
                     + (float)((float)((float)(v11 * *(v12 - 3)) + (float)(*(v12 - 4) * v10)) + (float)(*(v12 - 2) * v15)));
      v12 += 8;
      --v14;
    }
    while (v14);
    v17 = 0;
    v18 = *(_QWORD *)(result + 496) + 36 * a6;
    do
    {
      *(_DWORD *)(a5 + 4 * v17) = 0;
      v19 = 0.0;
      v20 = (float *)v26;
      v21 = (float *)v18;
      v22 = a3;
      do
      {
        v23 = *v21;
        v21 += 3;
        v24 = v23;
        v25 = *v20++;
        v19 = v19 + (float)(v24 * v25);
        *(float *)(a5 + 4 * v17) = v19;
        --v22;
      }
      while (v22);
      ++v17;
      v18 += 4;
    }
    while (v17 != a3);
  }
  return result;
}

uint64_t physx::Dy::FeatherstoneArticulation::computeLinkAcceleration(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  float v5;
  float32x2_t *v6;
  float32x2_t *v7;
  float *v8;
  float32x2_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x2_t *v32;
  float32x2_t v34;
  float32x2_t v35;
  uint64_t v36;
  int32x2_t v37;
  float32x2_t v38;
  float32x2_t v44;
  float v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float32x2_t v51;
  float v52;
  float v53;
  float32x2_t v54;
  float v55;
  float32x2_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x2_t v62;
  float v63;
  float32x2_t *v64;
  float32_t v65;
  float32_t v66;
  float32x2_t *v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t *v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  float32_t v75;
  int32x2_t v76;
  int32x2_t v77;
  __int32 v78;
  int v79;
  float32x2_t v80;
  float v81;
  int v82;

  v4 = *(unsigned int *)(a2 + 440);
  v5 = *(float *)(a2 + 472);
  v6 = *(float32x2_t **)a3;
  v7 = *(float32x2_t **)(a3 + 8);
  v73 = *(_QWORD *)(a3 + 16);
  v74 = result;
  if ((**(_BYTE **)(a2 + 488) & 1) == 0)
  {
    v8 = *(float **)(a3 + 24);
    v9.i32[0] = *(_DWORD *)(a2 + 564);
    v10 = *(float *)(a2 + 576);
    v11 = *(float *)(a2 + 588);
    v12 = *v8;
    v13 = v8[1];
    v14 = v8[2];
    v15 = v8[4];
    v16 = v8[5];
    v17 = v8[6];
    v18 = (float)((float)((float)(v9.f32[0] * *v8) + (float)(v10 * v13)) + (float)(v11 * v14))
        + (float)((float)((float)(*(float *)(a2 + 600) * v15) + (float)(*(float *)(a2 + 612) * v16))
                + (float)(*(float *)(a2 + 624) * v17));
    v19 = *(float32x2_t *)(a2 + 556);
    v20 = *(float32x2_t *)(a2 + 568);
    v21 = *(float32x2_t *)(a2 + 580);
    v22 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(v19, *v8), vmul_n_f32(v20, v13)), vmul_n_f32(v21, v14)), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a2 + 592), v15), vmul_n_f32(*(float32x2_t *)(a2 + 604), v16)), vmul_n_f32(*(float32x2_t *)(a2 + 616), v17)));
    v23 = (float)((float)((float)(*(float *)(a2 + 636) * *v8) + (float)(*(float *)(a2 + 648) * v13))
                + (float)(*(float *)(a2 + 660) * v14))
        + (float)(vmlas_n_f32(vmuls_lane_f32(v16, v21, 1), v15, v21.f32[0]) + (float)(v11 * v17));
    v7[1].f32[0] = -v18;
    v7[1].i32[1] = 0;
    v9.f32[1] = v10;
    v24 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(a2 + 628), v12), vmul_n_f32(*(float32x2_t *)(a2 + 640), v13)), vmul_n_f32(*(float32x2_t *)(a2 + 652), v14)), vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32((int32x2_t)v19, (int32x2_t)v20), v16), (float32x2_t)vzip1_s32((int32x2_t)v19, (int32x2_t)v20), v15), v9, v17));
    *v7 = vneg_f32(v22);
    v7[2] = vneg_f32(v24);
    v7[3].f32[0] = -v23;
    v7[3].i32[1] = 0;
    *v6 = vsub_f32(*v6, vmul_n_f32(v22, v5));
    v6[1].f32[0] = v6[1].f32[0] - (float)(v5 * v18);
    v6[2] = vsub_f32(v6[2], vmul_n_f32(v24, v5));
    v6[3].f32[0] = v6[3].f32[0] - (float)(v5 * v23);
  }
  if (v4 >= 2)
  {
    v25 = 1;
    v26 = *(_QWORD *)(a3 + 56);
    v71 = *(_QWORD *)(a3 + 48);
    v27 = 96;
    v72 = v5;
    do
    {
      v28 = *(_QWORD *)(a2 + 456);
      v29 = *(_QWORD *)(a2 + 448) + 160 * v25;
      v30 = *(_QWORD *)(a2 + 432) + 40 * v25;
      _S0 = *(_DWORD *)(v29 + 120);
      v32 = &v7[4 * *(unsigned int *)(v30 + 32)];
      _D4 = (int32x2_t)*v32;
      v34.i32[1] = HIDWORD(*(_QWORD *)(v29 + 124));
      v34.i32[0] = _S0;
      v35.i32[1] = HIDWORD(*(unint64_t *)v32);
      v35.i32[0] = v32[1].i32[0];
      v36 = *(_QWORD *)(v30 + 24);
      v37 = (int32x2_t)vmul_f32(v34, v35);
      v38 = (float32x2_t)vdup_lane_s32((int32x2_t)*v32, 0);
      v38.i32[0] = v32[1].i32[0];
      __asm { FMLS            S1, S0, V4.S[1] }
      v44 = vadd_f32(v32[2], vmls_f32((float32x2_t)vrev64_s32(v37), v38, *(float32x2_t *)(v29 + 124)));
      v45 = _S1 + v32[3].f32[0];
      v75 = v38.f32[0];
      v76 = (int32x2_t)*v32;
      v77 = (int32x2_t)*v32;
      v78 = v38.i32[0];
      v79 = 0;
      v80 = v44;
      v81 = v45;
      v82 = 0;
      v46 = v28 + 80 * v25;
      v47 = (float *)(v26 + 4 * *(unsigned int *)(v46 + 72));
      result = physx::Dy::FeatherstoneArticulation::computeJointAccelerationW(v74, v29, *(_BYTE *)(v46 + 76), (float *)&v77, (uint64_t)v47, v25);
      v48 = *(unsigned __int8 *)(v46 + 76);
      if (*(_BYTE *)(v46 + 76))
      {
        v49 = (float *)(v71 + 4 * *(unsigned int *)(v46 + 72));
        v50 = (float *)(*(_QWORD *)(a2 + 352) + v27);
        v51 = 0;
        v52 = 0.0;
        v53 = 0.0;
        v54 = 0;
        v55 = v72;
        v57 = v75;
        v56 = (float32x2_t)v76;
        do
        {
          v58 = *v49 + (float)(*v47 * v72);
          v59 = *(float *)(v36 + 264);
          if (fabsf(v58) > v59)
          {
            if (v58 >= 0.0)
              v58 = *(float *)(v36 + 264);
            else
              v58 = -v59;
            *v47 = (float)(v58 - *v49) / v72;
          }
          *v49++ = v58;
          v60 = *v47++;
          v61 = v60;
          v51 = vadd_f32(v51, vmul_n_f32(*(float32x2_t *)(v50 - 5), v60));
          v53 = v53 + (float)(v60 * *(v50 - 3));
          v62 = vmul_n_f32(*(float32x2_t *)(v50 - 2), v60);
          v63 = *v50;
          v50 += 6;
          v54 = vadd_f32(v54, v62);
          v52 = v52 + (float)(v61 * v63);
          --v48;
        }
        while (v48);
      }
      else
      {
        v51 = 0;
        v53 = 0.0;
        v52 = 0.0;
        v54 = 0;
        v55 = v72;
        v57 = v75;
        v56 = (float32x2_t)v76;
      }
      v64 = (float32x2_t *)(v73 + 32 * v25);
      v65 = v53 + (float)(v57 + v64[1].f32[0]);
      v66 = v52 + (float)(v45 + v64[3].f32[0]);
      v67 = &v7[4 * v25];
      v68 = vadd_f32(v51, vadd_f32(v56, *v64));
      v67[1].f32[0] = v65;
      v67[1].i32[1] = 0;
      v69 = vadd_f32(v54, vadd_f32(v44, v64[2]));
      *v67 = v68;
      v67[2] = v69;
      v67[3].f32[0] = v66;
      v67[3].i32[1] = 0;
      v70 = &v6[4 * v25];
      *v70 = vadd_f32(vmul_n_f32(v68, v55), *v70);
      v70[1].f32[0] = (float)(v55 * v65) + v70[1].f32[0];
      v70[2] = vadd_f32(vmul_n_f32(v69, v55), v70[2]);
      v70[3].f32[0] = (float)(v55 * v66) + v70[3].f32[0];
      ++v25;
      v27 += 76;
    }
    while (v25 != v4);
  }
  return result;
}

void physx::Dy::FeatherstoneArticulation::computeUnconstrainedVelocitiesInternal(uint64_t a1, float32x2_t *a2, float *a3, float32x2_t *a4)
{
  uint64_t v6;
  physx::Dy::ArticulationData *v7;
  size_t v8;
  int *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int8x8_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int32x4_t v30;
  unsigned int v31;
  float32x2_t *v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  float32x2_t *v36;
  char *v37;
  float32x2_t v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float32_t v45;
  int32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32_t v50;
  float32x2_t v51;
  uint64_t v52;
  float *v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  float32x2_t *v58;
  float *v59;
  float *v60;
  char *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int *v68;
  _OWORD *v69;
  uint64_t v70;
  float32x2_t v71;
  uint64_t v73;
  uint64_t v74;
  char v75;
  float v76;
  uint64_t v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float32x2_t *v83;
  float32x2_t *v84;
  float v85;
  float v86;
  float v87;
  float32x2_t v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float32x2_t *v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float32_t v115;
  float32_t v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float *v140;
  float v141;
  float v142;
  float32x2_t *v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  float32x2_t *v149;
  uint64_t v150;
  int v151;
  float32x2_t *v152;
  float32x2_t *v153;
  float32x2_t v154;
  float32x2_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float32x2_t v162;
  float v163;
  float v164;
  float32_t v165;
  int32x2_t v166;
  float32x2_t v167;
  float32x2_t v169;
  float32_t v175;
  float32x2_t *v176;
  float32x2_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned int *v180;
  unsigned int *v181;
  float32x2_t *v182;
  float32x2_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  float32x2_t *v191;
  float v192;
  float v193;
  float32x2_t *v194;
  float32x2_t v195;
  float32x2_t v196;
  uint64_t v197;
  float32x2_t v198;
  float32x2_t v199;
  uint64_t v200;
  float32x2_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  float32_t v205;
  _OWORD *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int *v209;
  uint64_t v210;
  float32x2_t *v211;
  float v212;
  float v214;
  unsigned int v215;
  float32x2_t *v216;
  float32x2_t v218;
  float32x2_t v219;
  float32x2_t v220;
  float32x2_t v221;
  float32_t v222;
  float32x2_t v223;
  float32x2_t v224;
  float v226;
  float v227;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _OWORD *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  float32x2_t *v239;
  float *v240;
  uint64_t v241;
  size_t v242;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _OWORD *v248;
  uint64_t v249;
  float *v250;
  uint64_t v251;
  uint64_t v252;
  int *v253[3];
  _OWORD *v254;
  uint64_t v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  float32x4_t v259;
  float32x2_t v260;
  float v261;
  float32x2_t v262;
  float v263;
  int v264;
  float32x2_t v265;
  float v266;
  int v267;
  float32x4_t v268[2];
  float32x2_t v269;
  float v270;
  int v271;
  float32x2_t v272;
  float v273;
  int v274;
  float32x2_t v275;
  __int32 v276;
  __int128 v277;
  _OWORD v278[2];

  v6 = a1;
  *(_DWORD *)(a1 + 880) = 0;
  v7 = (physx::Dy::ArticulationData *)(a1 + 176);
  bzero(*(void **)(a1 + 560), (4 * *(_DWORD *)(a1 + 568)));
  v8 = (32 * *(_DWORD *)(v6 + 616));
  bzero(*(void **)(v6 + 432), v8);
  bzero(*(void **)(v6 + 240), (4 * *(_DWORD *)(v6 + 652)));
  *(_BYTE *)(v6 + 685) = 0;
  physx::Dy::FeatherstoneArticulation::jcalc((physx::Dy::FeatherstoneArticulation *)v6, v7, 0);
  v256 = 0u;
  v257 = 0u;
  v258 = 0u;
  v9 = *(int **)(v6 + 336);
  v253[0] = *(int **)(v6 + 320);
  v253[1] = v9;
  v10 = *(_OWORD **)(v6 + 368);
  v253[2] = *(int **)(v6 + 352);
  v254 = v10;
  v11 = *(_QWORD *)(v6 + 208);
  *((_QWORD *)&v256 + 1) = *(_QWORD *)(v6 + 224);
  *(_QWORD *)&v257 = v11;
  v12 = *(_QWORD *)(v6 + 256);
  *((_QWORD *)&v257 + 1) = *(_QWORD *)(v6 + 272);
  *(_QWORD *)&v258 = v12;
  v255 = *(_QWORD *)(v6 + 672);
  v14 = physx::Dy::FeatherstoneArticulation::computeRelativeTransformC2P(v13, (uint64_t)v7);
  v15 = physx::Dy::FeatherstoneArticulation::computeLinkVelocities(v14, (uint64_t)v7, v253);
  *(float *)&v16 = physx::Dy::FeatherstoneArticulation::computeSpatialInertia(v15, (uint64_t)v7);
  physx::Dy::FeatherstoneArticulation::computeZ(v16, v18, v19, v20, v21, v22, v23, v17, (uint64_t)v7, a2, v253);
  v31 = *(_DWORD *)(v6 + 616);
  if (v31 >= 2)
    memcpy(*(void **)(v6 + 384), *(const void **)(v6 + 368), 32 * v31);
  v32 = (float32x2_t *)(v6 + 732);
  physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia((physx::Dy::FeatherstoneArticulation *)v6, v7, v24, v25, v26, v27, v28, v29, v30);
  v249 = *(unsigned int *)(v6 + 616);
  v33 = *(_OWORD **)(v6 + 464);
  v247 = *(_QWORD *)(v6 + 608);
  v248 = v33;
  v241 = (uint64_t)v7;
  v242 = v8;
  v240 = a3;
  if ((**(_BYTE **)(v6 + 664) & 1) != 0)
  {
    v33[10] = 0u;
    v33[11] = 0u;
    v33[8] = 0u;
    v33[9] = 0u;
    v33[6] = 0u;
    v33[7] = 0u;
    v33[4] = 0u;
    v33[5] = 0u;
    v33[2] = 0u;
    v33[3] = 0u;
    *v33 = 0u;
    v33[1] = 0u;
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v36 = (float32x2_t *)(v33 + 1);
    do
    {
      v37 = (char *)&v278[-1] + v34;
      if (v35 >= 3)
        v37 = (char *)v278 + 4 * (v35 - 3);
      v277 = 0uLL;
      v278[0] = 0uLL;
      *(_DWORD *)v37 = 1065353216;
      v38.i32[0] = *(_DWORD *)(v6 + 740);
      v39 = v277;
      v40 = *(float *)(v6 + 752);
      v41 = *(float *)(v6 + 764);
      v42 = *((float *)&v277 + 2);
      v43 = *(_QWORD *)&v278[0];
      v44 = *((float *)v278 + 2);
      v45 = (float)((float)((float)(*(float *)&v277 * v38.f32[0]) + (float)(*((float *)&v277 + 1) * v40))
                  + (float)(*((float *)&v277 + 2) * v41))
          + (float)((float)((float)(*(float *)v278 * *(float *)(v6 + 776))
                          + (float)(*((float *)v278 + 1) * *(float *)(v6 + 788)))
                  + (float)(*((float *)v278 + 2) * *(float *)(v6 + 800)));
      v46 = (int32x2_t)*v32;
      v47 = *(float32x2_t *)(v6 + 744);
      v48 = *(float32x2_t *)(v6 + 756);
      v49 = vadd_f32(vadd_f32(vadd_f32(vmul_n_f32(*v32, *(float *)&v277), vmul_n_f32(v47, *((float *)&v277 + 1))), vmul_n_f32(v48, *((float *)&v277 + 2))), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v6 + 768), *(float *)v278), vmul_n_f32(*(float32x2_t *)(v6 + 780), *((float *)v278 + 1))), vmul_n_f32(*(float32x2_t *)(v6 + 792), *((float *)v278 + 2))));
      v50 = (float)(vmlas_n_f32(vmuls_lane_f32(*((float *)v278 + 1), v48, 1), *(float *)v278, v48.f32[0])
                  + (float)(v41 * *((float *)v278 + 2)))
          + (float)((float)((float)(*(float *)&v277 * *(float *)(v6 + 812))
                          + (float)(*((float *)&v277 + 1) * *(float *)(v6 + 824)))
                  + (float)(*((float *)&v277 + 2) * *(float *)(v6 + 836)));
      v36[-1].f32[0] = v45;
      v36[-1].i32[1] = 0;
      v38.f32[1] = v40;
      v51 = vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v46, (int32x2_t)v47), *((float *)&v43 + 1)), (float32x2_t)vzip1_s32(v46, (int32x2_t)v47), *(float *)&v43), v38, v44), vadd_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)(v6 + 804), *(float *)&v39), vmul_n_f32(*(float32x2_t *)(v6 + 816), *((float *)&v39 + 1))), vmul_n_f32(*(float32x2_t *)(v6 + 828), v42)));
      v36[-2] = v49;
      *v36 = v51;
      v36[1].f32[0] = v50;
      v36[1].i32[1] = 0;
      ++v35;
      v36 += 4;
      v34 += 4;
    }
    while (v35 != 6);
  }
  v239 = (float32x2_t *)(v6 + 732);
  if (v249 >= 2)
  {
    v52 = *(_QWORD *)(v6 + 528);
    v53 = (float *)v248 + 55;
    v251 = 1;
    v244 = *(_QWORD *)(v6 + 544);
    v245 = *(_QWORD *)(v6 + 624);
    v54 = 0uLL;
    v246 = v6;
    do
    {
      v55 = 0;
      v56 = 0;
      v57 = v52;
      v58 = (float32x2_t *)(v245 + 160 * v251);
      v275 = v58[15];
      v276 = v58[16].i32[0];
      v59 = (float *)(*(_QWORD *)(v6 + 480) + 112 * v251);
      v60 = (float *)(*(_QWORD *)(v6 + 496) + 36 * v251);
      v52 = *(_QWORD *)(v6 + 528);
      v250 = v53;
      do
      {
        v61 = (char *)&v278[-1] + v55;
        if (v56 >= 3)
          v61 = (char *)v278 + 4 * (v56 - 3);
        v277 = v54;
        v278[0] = v54;
        *(_DWORD *)v61 = 1065353216;
        v269 = vneg_f32(*(float32x2_t *)&v277);
        v270 = -*((float *)&v277 + 2);
        v271 = 0;
        v272 = vneg_f32(*(float32x2_t *)&v278[0]);
        v273 = -*((float *)v278 + 2);
        v274 = 0;
        physx::Dy::FeatherstoneArticulation::propagateImpulseW(v244 + 96 * v251, &v275, v57 + 76 * v251, (uint64_t)&v269, (uint64_t)v268);
        physx::Dy::SpatialImpulseResponseMatrix::getResponse(&v259, (uint64_t)&v248[12 * *(unsigned int *)(v247 + 40 * v251 + 32)], v268[0], v268[1], v62, v63, v64, v65, v66, v67);
        v262 = vneg_f32(*(float32x2_t *)v259.f32);
        v263 = -v259.f32[2];
        v264 = 0;
        v265 = vneg_f32(v260);
        v266 = -v261;
        v267 = 0;
        physx::Dy::FeatherstoneArticulation::propagateVelocityTestImpulseW((float32x2_t *)&v259, (uint64_t)&v275, v59, v60, v52 + 76 * v251, (float *)&v269, &v262);
        v54 = 0uLL;
        *(_QWORD *)(v53 - 7) = v259.i64[0];
        *(v53 - 5) = v259.f32[2];
        *(v53 - 4) = 0.0;
        *(float32x2_t *)(v53 - 3) = v260;
        *(v53 - 1) = v261;
        *v53 = 0.0;
        v53 += 8;
        ++v56;
        v55 += 4;
        v57 = v52;
      }
      while (v55 != 24);
      v53 = v250 + 48;
      ++v251;
      v6 = v246;
    }
    while (v251 != v249);
  }
  v68 = v253[0];
  v69 = v254;
  bzero(v240, (32 * *(_DWORD *)(v6 + 616)));
  v73 = *(unsigned int *)(v6 + 616);
  if ((_DWORD)v73)
  {
    v74 = 0;
    v75 = 0;
    v76 = *(float *)(v6 + 648);
    v77 = *(_QWORD *)(v6 + 608);
    do
    {
      while (1)
      {
        v78 = *(float **)(v77 + 40 * v74 + 16);
        v79 = v78[31];
        if (v79 == 0.0)
          v80 = 0.0;
        else
          v80 = 1.0 / v79;
        v81 = 1.0 / v78[28];
        v82 = 1.0 / v78[29];
        v83 = (float32x2_t *)&v240[8 * v74];
        v84 = (float32x2_t *)&v68[8 * v74];
        v86 = v84->f32[0];
        v85 = v84->f32[1];
        v87 = v84[1].f32[0];
        v88 = v84[2];
        v89 = v84[3].f32[0];
        v91 = v78[26];
        v90 = v78[27];
        v92 = 1.0 / v78[30];
        if (v91 > 0.0 || v90 > 0.0)
        {
          v93 = fminf(v76 * v91, 1.0);
          v94 = fminf(v76 * v90, 1.0);
          v95 = (float32x2_t *)&v69[2 * v74];
          v96 = (float)(v80 * (float)(v89 * v93)) - (float)(v93 * (float)(v76 * v95[1].f32[0]));
          *v83 = vadd_f32(*v83, vsub_f32(vmul_n_f32(vmul_n_f32(v88, v93), v80), vmul_n_f32(vmul_n_f32(*v95, v76), v93)));
          v83[1].f32[0] = v96 + v83[1].f32[0];
          v98 = v78[2];
          v97 = v78[3];
          v99 = (float)(v97 * v97) + -0.5;
          v100 = v78[1];
          v101 = (float)((float)((float)(v85 + v85) * v100) + (float)(*v78 * (float)(v86 + v86)))
               + (float)(v98 * (float)(v87 + v87));
          v102 = v81
               * (float)(v94
                       * (float)((float)((float)((float)(v86 + v86) * v99)
                                       - (float)((float)((float)(v100 * (float)(v87 + v87))
                                                       - (float)(v98 * (float)(v85 + v85)))
                                               * v97))
                               + (float)(*v78 * v101)));
          v103 = v82
               * (float)(v94
                       * (float)((float)((float)((float)(v85 + v85) * v99)
                                       - (float)((float)((float)(v98 * (float)(v86 + v86))
                                                       - (float)(*v78 * (float)(v87 + v87)))
                                               * v97))
                               + (float)(v100 * v101)));
          v104 = v92
               * (float)(v94
                       * (float)((float)((float)((float)(v87 + v87) * v99)
                                       - (float)((float)((float)(*v78 * (float)(v85 + v85))
                                                       - (float)(v100 * (float)(v86 + v86)))
                                               * v97))
                               + (float)(v98 * v101)));
          v105 = v102 + v102;
          v106 = v103 + v103;
          v107 = v104 + v104;
          v108 = (float)((float)(v100 * v106) + (float)(*v78 * v105)) + (float)(v98 * v107);
          v109 = (float)((float)(v97 * (float)((float)(v100 * v107) - (float)(v98 * v106))) + (float)(v105 * v99))
               + (float)(*v78 * v108);
          v110 = (float)((float)(v97 * (float)((float)(v98 * v105) - (float)(*v78 * v107))) + (float)(v106 * v99))
               + (float)(v100 * v108);
          v111 = (float)((float)(v97 * (float)((float)(*v78 * v106) - (float)(v100 * v105))) + (float)(v107 * v99))
               + (float)(v98 * v108);
          v112 = v94 * (float)(v76 * v95[2].f32[0]);
          v113 = v110 - (float)(v94 * (float)(v76 * v95[2].f32[1]));
          v114 = v111 - (float)(v94 * (float)(v76 * v95[3].f32[0]));
          v115 = v83[2].f32[0] + (float)(v109 - v112);
          v116 = v83[2].f32[1] + v113;
          v83[2].f32[0] = v115;
          v83[2].f32[1] = v116;
          v83[3].f32[0] = v83[3].f32[0] + v114;
          v75 = 1;
        }
        v118 = v78[24];
        v117 = v78[25];
        v119 = (float)((float)(v85 * v85) + (float)(v86 * v86)) + (float)(v87 * v87);
        v120 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v88, v88).i32[1]), v88.f32[0], v88.f32[0]) + (float)(v89 * v89);
        if (v119 <= v118 && v120 <= v117)
          break;
        if (v119 > v118)
        {
          v121 = 1.0 - (float)(sqrtf(v118) / sqrtf(v119));
          v122 = v86 + v86;
          v123 = v85 + v85;
          v124 = v87 + v87;
          v126 = v78[2];
          v125 = v78[3];
          v127 = (float)(v125 * v125) + -0.5;
          v128 = v78[1];
          v129 = (float)((float)(v123 * v128) + (float)(*v78 * v122)) + (float)(v126 * v124);
          v130 = (float)((float)(v122 * v127) - (float)((float)((float)(v128 * v124) - (float)(v126 * v123)) * v125))
               + (float)(*v78 * v129);
          v131 = (float)((float)(v123 * v127) - (float)((float)((float)(v126 * v122) - (float)(*v78 * v124)) * v125))
               + (float)(v128 * v129);
          v132 = v121
               * (float)(v92
                       * (float)((float)((float)(v124 * v127)
                                       - (float)((float)((float)(*v78 * v123) - (float)(v128 * v122)) * v125))
                               + (float)(v126 * v129)));
          v133 = (float)(v121 * (float)(v81 * v130)) + (float)(v121 * (float)(v81 * v130));
          v134 = (float)(v121 * (float)(v82 * v131)) + (float)(v121 * (float)(v82 * v131));
          v135 = v132 + v132;
          v136 = (float)((float)(v128 * v134) + (float)(*v78 * v133)) + (float)(v126 * v135);
          v137 = (float)((float)(v125 * (float)((float)(v128 * v135) - (float)(v126 * v134))) + (float)(v133 * v127))
               + (float)(*v78 * v136);
          v138 = (float)((float)(v125 * (float)((float)(v126 * v133) - (float)(*v78 * v135))) + (float)(v134 * v127))
               + (float)(v128 * v136);
          v139 = (float)((float)(v125 * (float)((float)(*v78 * v134) - (float)(v128 * v133))) + (float)(v135 * v127))
               + (float)(v126 * v136);
          v140 = &v240[8 * v74];
          v141 = v140[5] + v138;
          v140[4] = v140[4] + v137;
          v140[5] = v141;
          v140[6] = v140[6] + v139;
          v75 = 1;
        }
        if (v120 <= v117)
          break;
        v142 = 1.0 - (float)(sqrtf(v117) / sqrtf(v120));
        *v83 = vadd_f32(vmul_n_f32(vmul_n_f32(v88, v80), v142), *v83);
        v83[1].f32[0] = (float)((float)(v80 * v89) * v142) + v83[1].f32[0];
        ++v74;
        v75 = 1;
        if (v74 == v73)
          goto LABEL_34;
      }
      ++v74;
    }
    while (v74 != v73);
    if ((v75 & 1) == 0)
      goto LABEL_49;
LABEL_34:
    v143 = (float32x2_t *)v6;
    v144 = (v73 - 1);
    if ((_DWORD)v144)
    {
      v145 = v144 - 1;
      v146 = (int *)(v77 + 40 * v144 + 32);
      v147 = (uint64_t)&v240[8 * v144];
      v148 = *(_QWORD *)(v6 + 528) + 76 * v144;
      v149 = (float32x2_t *)(*(_QWORD *)(v6 + 624) + 160 * v144 + 120);
      v150 = *(_QWORD *)(v6 + 544) + 96 * v144;
      do
      {
        physx::Dy::FeatherstoneArticulation::propagateImpulseW(v150, v149, v148, v147, (uint64_t)&v277);
        v151 = *v146;
        v146 -= 10;
        v152 = (float32x2_t *)&v240[8 * v151];
        *v152 = vadd_f32(*(float32x2_t *)&v277, *v152);
        v152[1].f32[0] = *((float *)&v277 + 2) + v152[1].f32[0];
        v71 = vadd_f32(*(float32x2_t *)&v278[0], v152[2]);
        v152[2] = v71;
        v152[3].f32[0] = *((float *)v278 + 2) + v152[3].f32[0];
        LODWORD(v152) = v145--;
        v147 -= 32;
        v148 -= 76;
        v149 -= 20;
        v150 -= 96;
      }
      while ((_DWORD)v152);
    }
    v6 = (uint64_t)v143;
    v153 = (float32x2_t *)v143[40];
    v154 = v143[79];
    v155 = v143[30];
    if ((**(_BYTE **)&v143[83] & 1) != 0)
    {
      v176 = a4;
      *a4 = 0;
      a4[1] = 0;
      a4[3].i32[0] = 0;
      a4[2] = 0;
    }
    else
    {
      v156 = *v240;
      v157 = v240[1];
      v158 = -v157;
      v159 = v240[2];
      _D2.f32[0] = v240[4];
      v160 = v240[5];
      v161 = -v160;
      v71.f32[0] = v240[6];
      v162.i32[0] = v143[92].i32[1];
      v163 = v143[94].f32[0];
      v164 = v143[95].f32[1];
      v165 = (float)((float)((float)-(float)(v157 * v163) - (float)(*v240 * v162.f32[0])) - (float)(v159 * v164))
           + (float)((float)((float)-(float)(v160 * v143[98].f32[1]) - (float)(_D2.f32[0] * v143[97].f32[0]))
                   - (float)(v71.f32[0] * v143[100].f32[0]));
      v166 = (int32x2_t)*v239;
      v167 = v143[93];
      _D22 = v239[3];
      v169 = vadd_f32(vsub_f32(vsub_f32(vmul_n_f32(v167, -v157), vmul_n_f32(*v239, *v240)), vmul_n_f32(_D22, v159)), vsub_f32(vsub_f32(vmul_n_f32(v239[6], v161), vmul_n_f32(v143[96], _D2.f32[0])), vmul_n_f32(v143[99], v71.f32[0])));
      __asm { FMLS            S23, S2, V22.S[0] }
      v175 = (float)(_S23 - (float)(v164 * v71.f32[0]))
           + (float)((float)((float)-(float)(v157 * v143[103].f32[0]) - (float)(*v240 * v143[101].f32[1]))
                   - (float)(v159 * v143[104].f32[1]));
      v176 = a4;
      a4[1].f32[0] = v165;
      a4[1].i32[1] = 0;
      v162.f32[1] = v163;
      v177 = vadd_f32(vmls_lane_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip2_s32(v166, (int32x2_t)v167), v161), (float32x2_t)vzip1_s32(v166, (int32x2_t)v167), _D2, 0), v162, v71, 0), vsub_f32(vsub_f32(vmul_n_f32(v143[102], v158), vmul_n_f32(v239[9], v156)), vmul_n_f32(v239[12], v159)));
      *a4 = v169;
      a4[2] = v177;
      a4[3].f32[0] = v175;
      *v153 = vadd_f32(v169, *v153);
      v153[1].f32[0] = v165 + v153[1].f32[0];
      v153[2] = vadd_f32(a4[2], v153[2]);
      v153[3].f32[0] = a4[3].f32[0] + v153[3].f32[0];
    }
    v176[3].i32[1] = 0;
    v178 = v143[77].u32[0];
    if (v178 >= 2)
    {
      v179 = 0;
      v252 = 32 * v178 - 32;
      v180 = (unsigned int *)(*(_QWORD *)&v154 + 152);
      v181 = (unsigned int *)(v77 + 72);
      v182 = a4;
      v183 = v143;
      v184 = 280;
      v185 = 112;
      v186 = 36;
      v187 = 76;
      do
      {
        v188 = *v180;
        v180 += 20;
        v189 = *(_QWORD *)&v155 + 4 * v188;
        v190 = *v181;
        v181 += 10;
        physx::Dy::FeatherstoneArticulation::propagateVelocityW(*(_QWORD *)&v183[78] + v184, (float *)(*(_QWORD *)&v183[60] + v185), (float *)(*(_QWORD *)&v183[62] + v186), *(_QWORD *)&v183[66] + v187, &v240[v179 / 4 + 8], v189, &v182[4 * v190], (float32x2_t *)&v277);
        v191 = &a4[v179 / 8 + 4];
        v192 = *((float *)&v277 + 2);
        v191[1].i32[0] = DWORD2(v277);
        v191[1].i32[1] = 0;
        v193 = *((float *)v278 + 2);
        v191[3].i32[0] = DWORD2(v278[0]);
        v191[3].i32[1] = 0;
        v194 = &v153[v179 / 8];
        v195 = (float32x2_t)v277;
        *v191 = (float32x2_t)v277;
        v194[5].f32[0] = v192 + v153[v179 / 8 + 5].f32[0];
        v196 = *(float32x2_t *)&v278[0];
        v191[2] = *(float32x2_t *)&v278[0];
        v194[4] = vadd_f32(v195, v153[v179 / 8 + 4]);
        v194[6] = vadd_f32(v196, v153[v179 / 8 + 6]);
        v196.i32[0] = v153[v179 / 8 + 7].i32[0];
        v179 += 32;
        v184 += 160;
        v194[7].f32[0] = v193 + v196.f32[0];
        v182 = a4;
        v185 += 112;
        v186 += 36;
        v187 += 76;
      }
      while (v252 != v179);
      v197 = v183[77].u32[0];
      v6 = (uint64_t)v183;
      if (v197 >= 2)
      {
        v198 = v183[30];
        v199 = v183[28];
        v200 = 1;
        v201 = v183[79];
        do
        {
          v202 = *(unsigned __int8 *)(*(_QWORD *)&v201 + 80 * v200 + 76);
          if (*(_BYTE *)(*(_QWORD *)&v201 + 80 * v200 + 76))
          {
            v203 = *(_DWORD *)(*(_QWORD *)&v201 + 80 * v200 + 72);
            do
            {
              *(float *)(*(_QWORD *)&v199 + 4 * v203) = *(float *)(*(_QWORD *)&v198 + 4 * v203)
                                                        + *(float *)(*(_QWORD *)&v199 + 4 * v203);
              *(_DWORD *)(*(_QWORD *)&v198 + 4 * v203++) = 0;
              --v202;
            }
            while (v202);
          }
          ++v200;
        }
        while (v200 != v197);
      }
    }
  }
LABEL_49:
  v204 = physx::Dy::FeatherstoneArticulation::computeC(v70, v241, (uint64_t *)v253);
  physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialZ(v205, v204, v241, v253);
  physx::Dy::FeatherstoneArticulation::computeLinkAcceleration(v6, v241, (uint64_t)v253);
  if (*(_DWORD *)(v6 + 616) >= 2u)
  {
    v254 = *(_OWORD **)(v6 + 384);
    physx::Dy::FeatherstoneArticulation::computeZAForceInv(v6, v241, (uint64_t)v253);
    v206 = v254;
    v207 = (*(_DWORD *)(v6 + 616) - 1);
    if (v207 >= 2)
    {
      v208 = v207 - 1;
      v209 = (unsigned int *)(*(_QWORD *)(v6 + 608) + 40 * v207 + 32);
      v210 = (uint64_t)&v254[2 * v207 + 1];
      v211 = (float32x2_t *)(*(_QWORD *)(v6 + 624) + 160 * v207 + 124);
      do
      {
        v212 = *(float *)(v210 - 8);
        _S1 = v211[-1].u32[1];
        v214 = *(float *)(v210 + 8);
        v215 = *v209;
        v209 -= 10;
        v216 = (float32x2_t *)&v206[2 * v215];
        _D3 = *(float32x2_t *)(v210 - 16);
        v218 = *v211;
        v211 -= 20;
        v219 = v218;
        v220 = (float32x2_t)__PAIR64__(v218.u32[1], _S1);
        v221 = vadd_f32(_D3, *v216);
        v222 = v212 + v216[1].f32[0];
        v223 = *(float32x2_t *)v210;
        v210 -= 32;
        v224 = (float32x2_t)vdup_lane_s32((int32x2_t)_D3, 0);
        __asm { FMLA            S16, S1, V3.S[1] }
        _D3.f32[0] = v212;
        v224.f32[0] = v212;
        v226 = _S16 + v214;
        *v216 = v221;
        v216[1].f32[0] = v222;
        v227 = v216[3].f32[0];
        v216[2] = vadd_f32(vadd_f32(vmla_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_f32(_D3, vneg_f32(v220))), v224, v219), v223), v216[2]);
        v216[3].f32[0] = v226 + v227;
      }
      while ((unint64_t)(v208-- & 0xFFFFFFFE));
    }
    *v206 = 0u;
    v206[1] = 0u;
  }
  *(_BYTE *)(v6 + 684) = 1;
  bzero(*(void **)(v6 + 368), v242);
  *(_BYTE *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v229 = *(unsigned int *)(v6 + 616);
  if ((_DWORD)v229)
  {
    v230 = 0;
    v231 = *(_QWORD *)(v6 + 696);
    v232 = *(_QWORD *)(v6 + 448);
    v233 = *(_OWORD **)(v6 + 712);
    v234 = 28 * v229;
    v235 = (uint64_t *)(*(_QWORD *)(v6 + 608) + 16);
    do
    {
      v236 = *v235;
      v235 += 5;
      v237 = v231 + v230;
      *(_OWORD *)v237 = *(_OWORD *)v236;
      *(_QWORD *)(v237 + 16) = *(_QWORD *)(v236 + 16);
      *(_DWORD *)(v237 + 24) = *(_DWORD *)(v236 + 24);
      v238 = v232 + v230;
      *(_OWORD *)v238 = *(_OWORD *)v236;
      *(_QWORD *)(v238 + 16) = *(_QWORD *)(v236 + 16);
      *(_DWORD *)(v238 + 24) = *(_DWORD *)(v236 + 24);
      *v233++ = xmmword_2260E5D70;
      v230 += 28;
    }
    while (v234 != v230);
  }
}

void physx::Dy::FeatherstoneArticulation::updateBodies(float32x2_t **this, physx::Dy::FeatherstoneArticulation *a2, __n128 a3, float32x4_t a4, double a5)
{
  physx::Dy::FeatherstoneArticulation *v5;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t *v8;
  float32x2_t *v9;
  float32x2_t *v10;
  float32x2_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t *v16;
  float32x2_t *v17;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  __n128 **v28;
  float32x2_t *v29;
  uint64_t v30;
  __n128 *v37;
  unint64_t v39;
  float32x2_t *v40;
  float32x2_t *v41;
  uint64_t i;
  float32x2_t v43;
  unsigned __int32 *v44;
  int v45;
  float32x2_t *v46;
  unsigned int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  __float2 v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  char *v68;
  float32x2_t *v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x2_t v78;
  float32x2_t v79;
  uint64_t v80;
  float *v81;
  float *v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float *v89;
  float v90;
  float v91;
  float v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  float *v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  __float2 v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float *v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float *v145;
  __float2 v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float *v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float *v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float cosval;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  __float2 v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  float v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  float *v210;
  float *v211;
  unsigned int v212;
  uint64_t v213;
  float v214;
  uint64_t v215;
  float *v216;
  float *v217;
  float *v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  uint64_t v238;
  float v239;
  float v240;
  uint64_t j;
  float32x2_t *v242;
  uint64_t *v243;
  float32x2_t *v244;
  float32x2_t *v245;
  float32x2_t *v246;
  float32x2_t *v247;
  float v248;
  float v249;
  uint64_t v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  float32x2_t *v272;
  uint64_t v273;
  float v274;
  float v275;
  float v276;
  unint64_t v277;
  float v278[4];
  __int128 v279;
  _OWORD v280[128];
  __int128 v281;
  uint64_t v282;

  v5 = (physx::Dy::FeatherstoneArticulation *)this;
  v282 = *MEMORY[0x24BDAC8D0];
  v6 = this[76];
  v7 = *((unsigned int *)this + 154);
  v8 = this[40];
  v9 = this[84];
  v277 = a3.n128_u64[0];
  *((_DWORD *)this + 162) = a3.n128_u32[0];
  v10 = this[56];
  if (*((_BYTE *)this + 864))
    _ZF = (_DWORD)v7 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    v12 = v10 + 3;
    v13 = (uint64_t *)&v6[2];
    v14 = v7;
    do
    {
      v15 = *v13;
      v13 += 5;
      *(_OWORD *)v12[-3].f32 = *(_OWORD *)v15;
      a3.n128_u64[0] = *(_QWORD *)(v15 + 16);
      v12[-1] = (float32x2_t)a3.n128_u64[0];
      a3.n128_u32[0] = *(_DWORD *)(v15 + 24);
      v12->i32[0] = a3.n128_u32[0];
      v12 = (float32x2_t *)((char *)v12 + 28);
      --v14;
    }
    while (v14);
  }
  if ((a2 & 1) != 0)
  {
    v245 = v8;
    v247 = v10;
    if ((this[83]->i8[0] & 1) != 0)
    {
      v246 = this[38];
    }
    else
    {
      v16 = (float32x2_t *)v6[2];
      v17 = this[38];
      v18 = v17[3].f32[0];
      v19 = v17[2];
      v20 = v16[2];
      v21 = v16[3].f32[0];
      v22 = v17->f32[0] * *(float *)&v277;
      v23 = v17->f32[1] * *(float *)&v277;
      v246 = v17;
      v24 = v17[1].f32[0] * *(float *)&v277;
      v25 = (float)((float)(v23 * v23) + (float)(v22 * v22)) + (float)(v24 * v24);
      if (v25 >= 1.0e-24)
      {
        v52 = sqrtf(v25);
        v53 = v22 * (float)(1.0 / v52);
        v54 = v23 * (float)(1.0 / v52);
        v55 = v24 * (float)(1.0 / v52);
        v56 = __sincosf_stret(v52 * 0.5);
        a4.f32[0] = v56.__cosval;
        *(float *)&a5 = v56.__sinval * v53;
        v26 = v56.__sinval * v54;
        v27 = v56.__sinval * v55;
      }
      else
      {
        a4.i32[0] = 1.0;
        LODWORD(a5) = 0;
        v26 = 0.0;
        v27 = 0.0;
      }
      v58 = v16[1].f32[0];
      v57 = v16[1].f32[1];
      v59 = v16->f32[1];
      v60 = (float)((float)((float)(v26 * v57) + (float)(a4.f32[0] * v59)) + (float)(v27 * v16->f32[0]))
          - (float)(v58 * *(float *)&a5);
      v61 = (float)((float)((float)(v27 * v57) + (float)(a4.f32[0] * v58)) + (float)(*(float *)&a5 * v59))
          - (float)(v16->f32[0] * v26);
      v62 = (float)((float)((float)(*(float *)&a5 * v57) + (float)(a4.f32[0] * v16->f32[0])) + (float)(v26 * v58))
          - (float)(v59 * v27);
      v63 = (float)((float)((float)(a4.f32[0] * v57) - (float)(*(float *)&a5 * v16->f32[0])) - (float)(v26 * v59))
          - (float)(v27 * v58);
      a4.f32[0] = sqrtf((float)((float)((float)(v60 * v60) + (float)(v62 * v62)) + (float)(v61 * v61)) + (float)(v63 * v63));
      *(float *)&a5 = (float)(v18 * *(float *)&v277) + v21;
      v16->f32[0] = v62 / a4.f32[0];
      v16->f32[1] = v60 / a4.f32[0];
      v16[1].f32[0] = v61 / a4.f32[0];
      v16[1].f32[1] = v63 / a4.f32[0];
      a3.n128_u64[0] = (unint64_t)vadd_f32(vmul_n_f32(v19, *(float *)&v277), v20);
      v16[2] = (float32x2_t)a3.n128_u64[0];
      v16[3].i32[0] = LODWORD(a5);
    }
    if (v7 < 2)
      goto LABEL_86;
    v64 = *((_QWORD *)v5 + 36);
    v65 = 1;
    v66 = 84;
    v67 = -0.5;
    v272 = v6;
    v273 = *((_QWORD *)v5 + 79);
    v270 = *((_QWORD *)v5 + 74);
    v271 = *((_QWORD *)v5 + 32);
    v269 = *((_QWORD *)v5 + 28);
    v68 = "2Bp28PersistentSelfCollisionPairsE";
    v250 = v64;
    while (1)
    {
      v69 = &v6[5 * v65];
      v70 = (float *)v6[5 * v69[4].u32[0] + 2];
      v71 = *v70;
      v72 = v70[1];
      v74 = v70[2];
      v73 = v70[3];
      v76 = v70[4];
      v75 = v70[5];
      v77 = v70[6];
      v79 = v69[2];
      v78 = v69[3];
      v80 = *(unsigned int *)(v273 + 80 * v65 + 72);
      v6 = (float32x2_t *)(v269 + 4 * v80);
      v81 = (float *)(v64 + 4 * v80);
      v82 = (float *)(v271 + 4 * v80);
      v84 = *(float *)(*(_QWORD *)&v78 + 44);
      v83 = *(float *)(*(_QWORD *)&v78 + 48);
      v85 = *(float *)(*(_QWORD *)&v78 + 52);
      v87 = *(float *)(*(_QWORD *)&v78 + 16);
      v86 = *(float *)(*(_QWORD *)&v78 + 20);
      v88 = *(float *)(*(_QWORD *)&v78 + 24);
      v89 = (float *)(v270 + 16 * v65);
      v90 = *v89;
      v91 = v89[1];
      v92 = v89[2];
      v93 = v89[3];
      switch(*(_BYTE *)(*(_QWORD *)&v78 + 270))
      {
        case 0:
          a4.i32[1] = HIDWORD(v277);
          a4.f32[0] = *v82 + (float)((float)(v6->f32[0] + *v81) * *(float *)&v277);
          *v82 = a4.f32[0];
          v94 = *(unsigned __int8 *)(*(_QWORD *)&v78 + 252);
          if (*(_BYTE *)(*(_QWORD *)&v78 + v94 + 258) == 1)
          {
            v95 = *(_QWORD *)&v78 + 8 * v94;
            v96 = *(float *)(v95 + 56);
            v6 = v272;
            if (a4.f32[0] < v96)
            {
              *v82 = v96;
              a4.f32[0] = v96;
            }
            v97 = v73;
            v98 = v71;
            v99 = *(float *)(v95 + 60);
            if (a4.f32[0] > v99)
            {
              *v82 = v99;
              a4.f32[0] = v99;
            }
          }
          else
          {
            v97 = v73;
            v98 = v71;
            v6 = v272;
          }
          v133 = v86 + v86;
          v134 = v88 + v88;
          v135 = v67 + (float)(v93 * v93);
          v136 = (float)((float)(v133 * v91) + (float)(v90 * (float)(v87 + v87))) + (float)(v92 * (float)(v88 + v88));
          a3.n128_f32[0] = -v92;
          v137 = (float)((float)(v93 * (float)((float)(v91 * (float)(v88 + v88)) - (float)(v92 * v133)))
                       + (float)((float)(v87 + v87) * v135))
               + (float)(v90 * v136);
          v100 = -v90;
          v138 = (float)((float)((float)((float)(v92 * (float)(v87 + v87)) - (float)(v90 * v134)) * v93)
                       + (float)(v133 * v135))
               + (float)(v91 * v136);
          v101 = -v91;
          v139 = (float)((float)((float)((float)(v90 * v133) - (float)(v91 * (float)(v87 + v87))) * v93)
                       + (float)(v134 * v135))
               + (float)(v92 * v136);
          v140 = (float *)(*((_QWORD *)v5 + 64) + 76 * v65);
          v141 = v137 - v84;
          v142 = v139 - v85;
          v143 = a4.f32[0] * v140[4];
          v144 = a4.f32[0] * v140[5];
          a4.f32[0] = v141 + (float)(a4.f32[0] * v140[3]);
          *(float *)&a5 = (float)(v138 - v83) + v143;
          v86 = v142 + v144;
          v71 = v98;
          v73 = v97;
          goto LABEL_85;
        case 1:
          v263 = *(float *)(*(_QWORD *)&v78 + 44);
          v265 = *(float *)(*(_QWORD *)&v78 + 48);
          v267 = *(float *)(*(_QWORD *)&v78 + 52);
          v102 = *v82 + (float)((float)(v6->f32[0] + *v81) * *(float *)&v277);
          v256 = v74;
          v257 = v72;
          v254 = v73;
          v255 = v71;
          v259 = *(float *)(*(_QWORD *)&v78 + 20);
          v261 = *(float *)(*(_QWORD *)&v78 + 24);
          if (v102 <= 6.2832)
          {
            v6 = v272;
            if (v102 < -6.2832)
              v102 = v102 + 12.566;
          }
          else
          {
            v102 = v102 + *((float *)v68 + 133);
            v6 = v272;
          }
          if (v102 < *((float *)v68 + 133))
            v102 = *((float *)v68 + 133);
          if (v102 > 12.566)
            v102 = 12.566;
          *v82 = v102;
          v145 = (float *)(*((_QWORD *)v5 + 64) + 76 * v65);
          v146 = __sincosf_stret(v102 * v67);
          a4.f32[0] = v146.__cosval;
          v67 = -0.5;
          v68 = "N5physx2Bp28PersistentSelfCollisionPairsE" + 7;
          *(float *)&a5 = *v145 * v146.__sinval;
          v147 = v145[1] * v146.__sinval;
          a3.n128_f32[0] = v145[2] * v146.__sinval;
          if (v146.__cosval < 0.0)
          {
            *(float *)&a5 = -*(float *)&a5;
            v147 = -v147;
            a3.n128_f32[0] = -a3.n128_f32[0];
            a4.f32[0] = -v146.__cosval;
          }
          v148 = (float)((float)((float)(v93 * *(float *)&a5) + (float)(a4.f32[0] * v90)) + (float)(v147 * v92))
               - (float)(v91 * a3.n128_f32[0]);
          v149 = (float)((float)((float)(v93 * v147) + (float)(a4.f32[0] * v91)) + (float)(a3.n128_f32[0] * v90))
               - (float)(v92 * *(float *)&a5);
          v150 = (float)((float)((float)(v93 * a3.n128_f32[0]) + (float)(a4.f32[0] * v92)) + (float)(*(float *)&a5 * v91))
               - (float)(v90 * v147);
          v151 = (float)((float)((float)(a4.f32[0] * v93) - (float)(*(float *)&a5 * v90)) - (float)(v147 * v91))
               - (float)(a3.n128_f32[0] * v92);
          v152 = sqrtf((float)((float)((float)(v149 * v149) + (float)(v148 * v148)) + (float)(v150 * v150))+ (float)(v151 * v151));
          v90 = v148 / v152;
          v91 = v149 / v152;
          v92 = v150 / v152;
          v93 = v151 / v152;
          v153 = (float)(v93 * v93) + -0.5;
          v154 = (float)((float)((float)(v259 + v259) * (float)(v149 / v152))
                       + (float)((float)(v148 / v152) * (float)(v87 + v87)))
               + (float)(v92 * (float)(v261 + v261));
          a3.n128_f32[0] = -v92;
          v155 = (float)((float)(v93
                               * (float)((float)((float)(v149 / v152) * (float)(v261 + v261))
                                       - (float)(v92 * (float)(v259 + v259))))
                       + (float)((float)(v87 + v87) * v153))
               + (float)((float)(v148 / v152) * v154);
          v100 = -(float)(v148 / v152);
          v156 = (float)((float)(v93 * (float)((float)(v92 * (float)(v87 + v87)) - (float)(v90 * (float)(v261 + v261))))
                       + (float)((float)(v259 + v259) * v153))
               + (float)((float)(v149 / v152) * v154);
          v101 = -(float)(v149 / v152);
          a4.f32[0] = v155 - v263;
          *(float *)&a5 = v156 - v265;
          v86 = (float)((float)((float)(v93
                                      * (float)((float)(v90 * (float)(v259 + v259)) - (float)(v91 * (float)(v87 + v87))))
                              + (float)((float)(v261 + v261) * v153))
                      + (float)(v92 * v154))
              - v267;
          v64 = v250;
          goto LABEL_84;
        case 2:
          v103 = *(unsigned __int8 *)(v273 + 80 * v65 + 76);
          v252 = v77;
          v253 = v75;
          v266 = *(float *)(*(_QWORD *)&v78 + 48);
          v268 = *(float *)(*(_QWORD *)&v78 + 52);
          v262 = *(float *)(*(_QWORD *)&v78 + 24);
          v264 = *(float *)(*(_QWORD *)&v78 + 44);
          v260 = *(float *)(*(_QWORD *)&v78 + 20);
          v251 = *(float *)(*(_QWORD *)&v78 + 16);
          if (v103 > 2)
          {
            v157 = (float *)v247 + 7 * v65;
            v159 = *v157;
            v158 = v157[1];
            v160 = v157[2];
            v161 = v157[3];
            v162 = (float *)&v246[4 * v65];
            v163 = *v162 * *(float *)&v277;
            v164 = v162[1] * *(float *)&v277;
            v165 = v162[2] * *(float *)&v277;
            v166 = (float)((float)(v164 * v164) + (float)(v163 * v163)) + (float)(v165 * v165);
            v5 = (physx::Dy::FeatherstoneArticulation *)this;
            if (v166 >= 1.0e-24)
            {
              v171 = sqrtf(v166);
              v249 = v76;
              v275 = v164 * (float)(1.0 / v171);
              v276 = v163 * (float)(1.0 / v171);
              v274 = v165 * (float)(1.0 / v171);
              v172 = v72;
              v173 = v74;
              v174 = v71;
              v175 = v73;
              v176 = __sincosf_stret(v171 * 0.5);
              cosval = v176.__cosval;
              v73 = v175;
              v71 = v174;
              v74 = v173;
              v72 = v172;
              v168 = v176.__sinval * v276;
              v169 = v176.__sinval * v275;
              v76 = v249;
              v170 = v176.__sinval * v274;
            }
            else
            {
              cosval = 1.0;
              v168 = 0.0;
              v169 = 0.0;
              v170 = 0.0;
            }
            v6 = v272;
            v281 = *(_OWORD *)this[74][2 * v65].f32;
            *(float *)&v279 = (float)((float)((float)(v161 * v168) + (float)(cosval * v159)) + (float)(v169 * v160))
                            - (float)(v158 * v170);
            *((float *)&v279 + 1) = (float)((float)((float)(v161 * v169) + (float)(cosval * v158)) + (float)(v170 * v159))
                                  - (float)(v160 * v168);
            *((float *)&v279 + 2) = (float)((float)((float)(v161 * v170) + (float)(cosval * v160)) + (float)(v168 * v158))
                                  - (float)(v159 * v169);
            *((float *)&v279 + 3) = (float)((float)((float)(cosval * v161) - (float)(v168 * v159)) - (float)(v169 * v158))
                                  - (float)(v170 * v160);
            v278[0] = v71;
            v278[1] = v72;
            v278[2] = v74;
            v278[3] = v73;
            v177 = v72;
            v178 = v74;
            v179 = v71;
            v180 = v73;
            physx::Dy::computeSphericalJointPositions((float *)v280, (float *)&v281, (float *)&v279, v278, (uint64_t)v82, (uint64_t)this[64] + 76 * v65);
            v71 = v179;
            v74 = v178;
            v72 = v177;
            v91 = *((float *)v280 + 1);
            v90 = *(float *)v280;
            v93 = *((float *)v280 + 3);
            v92 = *((float *)v280 + 2);
            v181 = (float)(*((float *)v280 + 3) * *((float *)v280 + 3)) + -0.5;
            v182 = (float)((float)((float)(v260 + v260) * *((float *)v280 + 1))
                         + (float)(*(float *)v280 * (float)(v251 + v251)))
                 + (float)(*((float *)v280 + 2) * (float)(v262 + v262));
            a3.n128_f32[0] = -*((float *)v280 + 2);
            v100 = -*(float *)v280;
            v101 = -*((float *)v280 + 1);
            a4.f32[0] = (float)((float)((float)(*((float *)v280 + 3)
                                              * (float)((float)(*((float *)v280 + 1) * (float)(v262 + v262))
                                                      - (float)(*((float *)v280 + 2) * (float)(v260 + v260))))
                                      + (float)((float)(v251 + v251) * v181))
                              + (float)(*(float *)v280 * v182))
                      - v264;
            v73 = v180;
            v67 = -0.5;
            *(float *)&a5 = (float)((float)((float)((float)((float)(*((float *)v280 + 2) * (float)(v251 + v251))
                                                          - (float)(*(float *)v280 * (float)(v262 + v262)))
                                                  * *((float *)v280 + 3))
                                          + (float)((float)(v260 + v260) * v181))
                                  + (float)(*((float *)v280 + 1) * v182))
                          - v266;
            v86 = (float)((float)((float)((float)((float)(*(float *)v280 * (float)(v260 + v260))
                                                - (float)(*((float *)v280 + 1) * (float)(v251 + v251)))
                                        * *((float *)v280 + 3))
                                + (float)((float)(v262 + v262) * v181))
                        + (float)(*((float *)v280 + 2) * v182))
                - v268;
            v68 = "N5physx2Bp28PersistentSelfCollisionPairsE" + 7;
            v77 = v252;
            v75 = v253;
            goto LABEL_85;
          }
          v254 = v73;
          v255 = v71;
          v248 = v76;
          v256 = v74;
          v257 = v72;
          if (!*(_BYTE *)(v273 + 80 * v65 + 76))
          {
            v106 = 1.0;
            v122 = 0.0;
            v123 = 0.0;
            v124 = 0.0;
            goto LABEL_83;
          }
          v104 = (float *)((char *)this[64] + v66);
          v105 = 0.0;
          v106 = 1.0;
          v107 = 0.0;
          v108 = 0.0;
          break;
        case 3:
          v125 = v86 + v86;
          v126 = v88 + v88;
          v127 = v67 + (float)(v93 * v93);
          v128 = (float)((float)(v125 * v91) + (float)(v90 * (float)(v87 + v87))) + (float)(v92 * (float)(v88 + v88));
          a3.n128_f32[0] = -v92;
          v129 = v73;
          v130 = (float)((float)(v93 * (float)((float)(v91 * (float)(v88 + v88)) - (float)(v92 * v125)))
                       + (float)((float)(v87 + v87) * v127))
               + (float)(v90 * v128);
          v100 = -v90;
          v131 = (float)((float)((float)((float)(v92 * (float)(v87 + v87)) - (float)(v90 * v126)) * v93)
                       + (float)(v125 * v127))
               + (float)(v91 * v128);
          v101 = -v91;
          v132 = (float)((float)((float)((float)(v90 * v125) - (float)(v91 * (float)(v87 + v87))) * v93)
                       + (float)(v126 * v127))
               + (float)(v92 * v128);
          a4.f32[0] = v130 - v84;
          v73 = v129;
          *(float *)&a5 = v131 - v83;
          v86 = v132 - v85;
          v6 = v272;
          goto LABEL_85;
        default:
          v100 = -v90;
          v101 = -v91;
          a3.n128_f32[0] = -v92;
          goto LABEL_85;
      }
      do
      {
        v109 = *v82 + (float)((float)(v6->f32[0] + *v81) * *(float *)&v277);
        if (v109 <= 6.2832)
        {
          if (v109 >= -6.2832)
            goto LABEL_58;
          v110 = 12.566;
        }
        else
        {
          v110 = *((float *)v68 + 133);
        }
        v109 = v109 + v110;
LABEL_58:
        if (v109 < *((float *)v68 + 133))
          v109 = *((float *)v68 + 133);
        if (v109 > 12.566)
          v109 = 12.566;
        *v82++ = v109;
        v111 = __sincosf_stret(v109 * -0.5);
        a4.f32[0] = v111.__cosval;
        v68 = "N5physx2Bp28PersistentSelfCollisionPairsE" + 7;
        *(float *)&a5 = *(v104 - 2) * v111.__sinval;
        v112 = *(v104 - 1) * v111.__sinval;
        v113 = *v104;
        v104 += 6;
        a3.n128_f32[0] = v113 * v111.__sinval;
        if (v111.__cosval < 0.0)
        {
          *(float *)&a5 = -*(float *)&a5;
          v112 = -v112;
          a3.n128_f32[0] = -a3.n128_f32[0];
          a4.f32[0] = -v111.__cosval;
        }
        v114 = (float)((float)((float)(v93 * *(float *)&a5) + (float)(a4.f32[0] * v90)) + (float)(v112 * v92))
             + (float)((float)-v91 * a3.n128_f32[0]);
        v115 = (float)((float)((float)(v93 * v112) + (float)(a4.f32[0] * v91)) + (float)(a3.n128_f32[0] * v90))
             + (float)((float)-v92 * *(float *)&a5);
        v116 = (float)((float)((float)(v93 * a3.n128_f32[0]) + (float)(a4.f32[0] * v92)) + (float)(*(float *)&a5 * v91))
             + (float)((float)-v90 * v112);
        v117 = (float)((float)((float)(a4.f32[0] * v93) - (float)(*(float *)&a5 * v90)) - (float)(v112 * v91))
             - (float)(a3.n128_f32[0] * v92);
        v118 = sqrtf((float)((float)((float)(v115 * v115) + (float)(v114 * v114)) + (float)(v116 * v116))+ (float)(v117 * v117));
        v119 = v114 / v118;
        v120 = v116 / v118;
        v121 = v117 / v118;
        v122 = (float)((float)((float)(v108 * v121) + (float)(v106 * v119)) + (float)(v107 * (float)(v116 / v118)))
             - (float)((float)(v115 / v118) * v105);
        v123 = (float)((float)((float)(v107 * v121) + (float)(v106 * (float)(v115 / v118))) + (float)(v105 * v119))
             - (float)(v120 * v108);
        v124 = (float)((float)((float)(v105 * v121) + (float)(v106 * v120)) + (float)(v108 * (float)(v115 / v118)))
             - (float)(v119 * v107);
        v6 = (float32x2_t *)((char *)v6 + 4);
        ++v81;
        v106 = (float)((float)((float)(v106 * v121) - (float)(v108 * v119)) - (float)(v107 * (float)(v115 / v118)))
             - (float)(v105 * v120);
        v105 = v124;
        v107 = v123;
        v108 = v122;
        --v103;
      }
      while (v103);
LABEL_83:
      v67 = -0.5;
      v183 = (float)(v106 * v106) + -0.5;
      v184 = (float)((float)((float)(v260 + v260) * v123) + (float)(v122 * (float)(v251 + v251)))
           + (float)(v124 * (float)(v262 + v262));
      a3.n128_f32[0] = -v124;
      v100 = -v122;
      v101 = -v123;
      a4.f32[0] = (float)((float)((float)(v106
                                        * (float)((float)(v123 * (float)(v262 + v262))
                                                - (float)(v124 * (float)(v260 + v260))))
                                + (float)((float)(v251 + v251) * v183))
                        + (float)(v122 * v184))
                - v264;
      *(float *)&a5 = (float)((float)((float)((float)((float)(v124 * (float)(v251 + v251))
                                                    - (float)(v122 * (float)(v262 + v262)))
                                            * v106)
                                    + (float)((float)(v260 + v260) * v183))
                            + (float)(v123 * v184))
                    - v266;
      v86 = (float)((float)((float)((float)((float)(v122 * (float)(v260 + v260)) - (float)(v123 * (float)(v251 + v251)))
                                  * v106)
                          + (float)((float)(v262 + v262) * v183))
                  + (float)(v124 * v184))
          - v268;
      v90 = v122;
      v91 = v123;
      v92 = v124;
      v93 = v106;
      v6 = v272;
      v5 = (physx::Dy::FeatherstoneArticulation *)this;
      v64 = v250;
      v76 = v248;
      v77 = v252;
      v75 = v253;
LABEL_84:
      v74 = v256;
      v72 = v257;
      v73 = v254;
      v71 = v255;
LABEL_85:
      v185 = (float)((float)((float)(v71 * v93) + (float)(v73 * v100)) + (float)(v72 * a3.n128_f32[0]))
           + (float)(v91 * v74);
      v186 = (float)((float)((float)(v72 * v93) + (float)(v73 * v101)) + (float)(v74 * v100)) + (float)(v92 * v71);
      v187 = (float)((float)((float)(v74 * v93) + (float)(v73 * a3.n128_f32[0])) + (float)(v71 * v101))
           + (float)(v90 * v72);
      v188 = (float)((float)((float)(v71 * v90) + (float)(v73 * v93)) + (float)(v72 * v91)) + (float)(v74 * v92);
      v189 = sqrtf((float)((float)((float)(v186 * v186) + (float)(v185 * v185)) + (float)(v187 * v187))+ (float)(v188 * v188));
      v190 = v185 / v189;
      v191 = v186 / v189;
      v192 = v187 / v189;
      v193 = v188 / v189;
      **(float **)v79.f32 = v190;
      *(float *)(*(_QWORD *)&v79 + 4) = v191;
      *(float *)(*(_QWORD *)&v79 + 8) = v192;
      *(float *)(*(_QWORD *)&v79 + 12) = v193;
      v194 = v67 + (float)(v193 * v193);
      v195 = (float)((float)((float)(*(float *)&a5 + *(float *)&a5) * v191)
                   + (float)(v190 * (float)(a4.f32[0] + a4.f32[0])))
           + (float)(v192 * (float)(v86 + v86));
      v196 = (float)((float)(v193
                           * (float)((float)(v191 * (float)(v86 + v86))
                                   - (float)(v192 * (float)(*(float *)&a5 + *(float *)&a5))))
                   + (float)((float)(a4.f32[0] + a4.f32[0]) * v194))
           + (float)(v190 * v195);
      v197 = (float)((float)(v193
                           * (float)((float)(v192 * (float)(a4.f32[0] + a4.f32[0])) - (float)(v190 * (float)(v86 + v86))))
                   + (float)((float)(*(float *)&a5 + *(float *)&a5) * v194))
           + (float)(v191 * v195);
      a3.n128_f32[0] = v77
                     + (float)((float)((float)(v193
                                             * (float)((float)(v190 * (float)(*(float *)&a5 + *(float *)&a5))
                                                     - (float)(v191 * (float)(a4.f32[0] + a4.f32[0]))))
                                     + (float)((float)(v86 + v86) * v194))
                             + (float)(v192 * v195));
      *(float *)(*(_QWORD *)&v79 + 16) = v76 + v196;
      *(float *)(*(_QWORD *)&v79 + 20) = v75 + v197;
      *(_DWORD *)(*(_QWORD *)&v79 + 24) = a3.n128_u32[0];
      ++v65;
      v66 += 76;
      if (v65 == v7)
      {
LABEL_86:
        v8 = v245;
        goto LABEL_87;
      }
    }
  }
  if ((_DWORD)v7)
  {
    v28 = (__n128 **)&v6[2];
    v29 = this[87] + 3;
    v30 = v7;
    do
    {
      _Q0 = *(float32x4_t *)v29[-3].f32;
      _Q1 = vmulq_f32(_Q0, _Q0);
      LODWORD(a5) = v29->i32[0];
      _S3 = (int)v29[-2];
      __asm { FMLA            S1, S3, V0.S[2] }
      v37 = *v28;
      v28 += 5;
      _S3 = _Q0.i32[3];
      __asm { FMLA            S1, S3, V0.S[3] }
      _Q1.f32[0] = sqrtf(_Q1.f32[0]);
      a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
      v39 = (unint64_t)v29[-1];
      a3 = (__n128)vdivq_f32(_Q0, a4);
      *v37 = a3;
      v37[1].n128_u64[0] = v39;
      v37[1].n128_u32[2] = LODWORD(a5);
      v29 = (float32x2_t *)((char *)v29 + 28);
      --v30;
    }
    while (v30);
    if (v7 >= 2)
    {
      v40 = this[32];
      v41 = this[79];
      for (i = 1; i != v7; ++i)
      {
        v43 = v6[5 * i + 3];
        v44 = (unsigned __int32 *)v40 + v41[10 * i + 9].u32[0];
        v45 = *(unsigned __int8 *)(*(_QWORD *)&v43 + 270);
        if (*(_BYTE *)(*(_QWORD *)&v43 + 270))
        {
          if (v45 == 1)
          {
            a3.n128_u32[0] = *v44;
            if (*(float *)v44 <= 6.2832)
            {
              if (a3.n128_f32[0] < -6.2832)
                a3.n128_f32[0] = a3.n128_f32[0] + 12.566;
            }
            else
            {
              a3.n128_f32[0] = a3.n128_f32[0] + -12.566;
            }
            if (a3.n128_f32[0] < -12.566)
              a3.n128_f32[0] = -12.566;
            if (a3.n128_f32[0] > 12.566)
              a3.n128_f32[0] = 12.566;
            *v44 = a3.n128_u32[0];
          }
          else if (v45 == 2)
          {
            v46 = &v6[5 * i];
            v47 = v46[4].u32[0];
            v48 = *(_OWORD *)this[74][2 * i].f32;
            v281 = *(_OWORD *)*(_QWORD *)&v46[2];
            v279 = *(_OWORD *)*(_QWORD *)&v6[5 * v47 + 2];
            v280[0] = v48;
            physx::Dy::computeSphericalJointPositions(v278, (float *)v280, (float *)&v281, (float *)&v279, (uint64_t)v44, (uint64_t)this[64] + 76 * i);
          }
        }
        else
        {
          v49 = *(unsigned __int8 *)(*(_QWORD *)&v43 + 252);
          if (*(_BYTE *)(*(_QWORD *)&v43 + v49 + 258) == 1)
          {
            a3.n128_u32[0] = *v44;
            v50 = *(_QWORD *)&v43 + 8 * v49;
            v51 = *(float *)(v50 + 56);
            if (*(float *)v44 < v51)
            {
              *(float *)v44 = v51;
              a3.n128_f32[0] = v51;
            }
            a4.i32[0] = *(_DWORD *)(v50 + 60);
            if (a3.n128_f32[0] > a4.f32[0])
              *v44 = a4.i32[0];
          }
        }
      }
    }
  }
  v5 = (physx::Dy::FeatherstoneArticulation *)this;
LABEL_87:
  if (*((_BYTE *)v5 + 685))
  {
    physx::Dy::PxcFsFlushVelocity((uint64_t)v5, (float32x2_t *)v280, a3.n128_f64[0], *(double *)a4.i64, a5);
    v198 = *((unsigned int *)v5 + 154);
    if (v198 >= 2)
    {
      v199 = *((_QWORD *)v5 + 28);
      v200 = *((_QWORD *)v5 + 26);
      v201 = *((_QWORD *)v5 + 30);
      v202 = *((_QWORD *)v5 + 76);
      v203 = *((_QWORD *)v5 + 79);
      v204 = 1;
      v205 = 1.0 / *((float *)v5 + 162);
      do
      {
        v206 = v202 + 40 * v204;
        v207 = *(_QWORD *)(v206 + 24);
        v208 = *(unsigned int *)(v203 + 80 * v204 + 72);
        v209 = v199 + 4 * v208;
        v210 = (float *)(v200 + 4 * v208);
        v211 = (float *)(v201 + 4 * v208);
        v212 = *(unsigned __int8 *)(v207 + 270);
        if (v212 >= 2)
        {
          if (v212 == 2)
          {
            v213 = *(unsigned __int8 *)(v203 + 80 * v204 + 76);
            if (v213 > 2)
            {
              v215 = *(unsigned int *)(v206 + 32);
              v216 = *(float **)(v206 + 16);
              *(_QWORD *)&v281 = *(_QWORD *)v209;
              DWORD2(v281) = *(_DWORD *)(v209 + 8);
              v217 = (float *)&v8[4 * v204];
              v218 = (float *)&v8[4 * v215];
              v219 = v217[1] - v218[1];
              v220 = v217[2] - v218[2];
              v221 = v216[1];
              v223 = *(float *)(v207 + 36);
              v222 = *(float *)(v207 + 40);
              v224 = *(float *)(v207 + 28);
              v225 = *(float *)(v207 + 32);
              v227 = v216[2];
              v226 = v216[3];
              v228 = (float)((float)((float)(v222 * *v216) + (float)(v226 * v224)) + (float)(v221 * v223))
                   - (float)(v225 * v227);
              v229 = (float)((float)((float)(v222 * v221) + (float)(v226 * v225)) + (float)(v227 * v224))
                   - (float)(v223 * *v216);
              v230 = (float)((float)((float)(v222 * v227) + (float)(v226 * v223)) + (float)(*v216 * v225))
                   - (float)(v224 * v221);
              v231 = (float)((float)((float)(v226 * v222) - (float)(*v216 * v224)) - (float)(v221 * v225))
                   - (float)(v227 * v223);
              v232 = (float)(*v217 - *v218) + (float)(*v217 - *v218);
              v233 = v219 + v219;
              v234 = v220 + v220;
              v235 = (float)(v231 * v231) + -0.5;
              v236 = (float)((float)((float)(v219 + v219) * v229) + (float)(v228 * v232)) + (float)(v230 * v234);
              v237 = (float)((float)(v232 * v235)
                           - (float)((float)((float)(v229 * v234) - (float)(v230 * (float)(v219 + v219))) * v231))
                   + (float)(v228 * v236);
              if (*(_BYTE *)(v207 + 258))
              {
                *(float *)v209 = v237;
                v238 = 1;
              }
              else
              {
                v238 = 0;
              }
              v239 = (float)((float)(v233 * v235) - (float)((float)((float)(v230 * v232) - (float)(v228 * v234)) * v231))
                   + (float)(v229 * v236);
              if (*(_BYTE *)(v207 + 259))
                *(float *)(v209 + 4 * v238++) = v239;
              v240 = (float)((float)(v234 * v235) - (float)((float)((float)(v228 * v233) - (float)(v229 * v232)) * v231))
                   + (float)(v230 * v236);
              if (*(_BYTE *)(v207 + 260))
                *(float *)(v209 + 4 * v238++) = v240;
              if (!*(_BYTE *)(v207 + 258))
                *(float *)(v209 + 4 * v238++) = v237;
              if (!*(_BYTE *)(v207 + 259))
                *(float *)(v209 + 4 * v238++) = v239;
              if (!*(_BYTE *)(v207 + 260))
                *(float *)(v209 + 4 * v238) = v240;
              for (j = 0; j != 12; j += 4)
                *(float *)(v200 + j) = *(float *)(v200 + j)
                                     + (float)((float)(*(float *)((char *)&v281 + j) - *(float *)(v209 + j)) * v205);
            }
            else if (*(_BYTE *)(v203 + 80 * v204 + 76))
            {
              do
              {
                *(float *)v209 = *v211 + *(float *)v209;
                v209 += 4;
                v214 = *v211++;
                *v210 = *v210 + (float)(v214 * v205);
                ++v210;
                --v213;
              }
              while (v213);
            }
          }
        }
        else
        {
          *(float *)v209 = *v211 + *(float *)v209;
          *v210 = *v210 + (float)(*v211 * v205);
        }
        ++v204;
      }
      while (v204 != v198);
    }
  }
  if ((_DWORD)v7)
  {
    v242 = v8 + 2;
    v243 = (uint64_t *)&v6[2];
    do
    {
      v244 = (float32x2_t *)*v243;
      v243 += 5;
      v244[8] = *v242;
      v244[9].i32[0] = v242[1].i32[0];
      v244[10] = v242[-2];
      v244[11].i32[0] = v242[-1].i32[0];
      *(_OWORD *)v9->f32 = 0uLL;
      *(_OWORD *)v9[2].f32 = 0uLL;
      v9 += 4;
      v242 += 4;
      --v7;
    }
    while (v7);
  }
}

uint64_t physx::Dy::FeatherstoneArticulation::getJointAcceleration(uint64_t a1, float32x2_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  physx::Dy::ArticulationData *v13;
  uint64_t v14;
  pthread_mutex_t **v15;
  int *v16;
  int *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int8x8_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  float32_t v38;
  int *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *v182;
  int *v183;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  float32x2_t v188;
  float32x2_t v194;
  float v195;
  uint64_t v196;
  float *v197;
  uint64_t v198;
  float *v199;
  float32x2_t v200;
  float v201;
  float v202;
  float32x2_t v203;
  float32x2_t v204;
  float v205;
  float v206;
  float v207;
  float32x2_t v208;
  float v209;
  float32x2_t *v210;
  float32_t v211;
  float32x2_t *v212;
  float32x2_t v213;
  float32x2_t v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  unint64_t v238;
  uint64_t v239;
  int *v240;
  float v241;
  float v242;
  float v243;
  int32x2_t v244;
  int32x2_t v245;
  __int32 v246;
  int v247;
  float32x2_t v248;
  float v249;
  int v250;
  int *v251[4];
  __int128 v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;

  if (*(_BYTE *)(a1 + 684))
    return physx::shdfnd::Foundation::error(physx::shdfnd::Foundation::mInstance, 8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyFeatherstoneForwardDynamic.cpp", 1569, "Articulation::getJointAcceleration() commonInit need to be called first to initialize data!", a6, a7, a8, a9);
  v13 = (physx::Dy::ArticulationData *)(a1 + 176);
  v14 = *(unsigned int *)(a1 + 616);
  v15 = (pthread_mutex_t **)a3[13];
  v255 = 0;
  v253 = 0u;
  v254 = 0u;
  v252 = 0u;
  v239 = (uint64_t)v15;
  v16 = (int *)physx::PxcScratchAllocator::alloc(v15, 240 * (int)v14, 0);
  v17 = (int *)((char *)v16 + (32 * v14));
  v251[0] = v16;
  v251[1] = v17;
  v18 = (char *)v16 + (96 * v14);
  v240 = (int *)((char *)v16 + ((_DWORD)v14 << 6));
  v251[2] = v240;
  v251[3] = (int *)v18;
  v238 = (unint64_t)v16;
  v19 = a3[3];
  *((_QWORD *)&v252 + 1) = (char *)v16 + ((_DWORD)v14 << 7);
  *(_QWORD *)&v253 = v19;
  *(_QWORD *)&v254 = a3[6];
  v20 = physx::Dy::FeatherstoneArticulation::computeLinkVelocities((uint64_t)v16, (uint64_t)v13, v251);
  *(float *)&v21 = physx::Dy::FeatherstoneArticulation::computeSpatialInertia(v20, (uint64_t)v13);
  physx::Dy::FeatherstoneArticulation::computeZ(v21, v23, v24, v25, v26, v27, v28, v22, (uint64_t)v13, a2, v251);
  physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialInertia((physx::Dy::FeatherstoneArticulation *)a1, v13, v29, v30, v31, v32, v33, v34, v35);
  v37 = physx::Dy::FeatherstoneArticulation::computeC(v36, (uint64_t)v13, (uint64_t *)v251);
  physx::Dy::FeatherstoneArticulation::computeArticulatedSpatialZ(v38, v37, (uint64_t)v13, v251);
  v39 = v17;
  if ((**(_BYTE **)(a1 + 664) & 1) == 0)
  {
    v40 = *(float **)(a1 + 480);
    v41 = *v40;
    v42 = v40[1];
    v44 = v40[6];
    v43 = v40[7];
    v45 = v40[2];
    v46 = v40[3];
    v48 = v40[4];
    v47 = v40[5];
    v50 = v40[25];
    v49 = v40[26];
    v52 = v40[22];
    v51 = v40[23];
    v53 = v40[24];
    v55 = v40[20];
    v54 = v40[21];
    v56 = (float)(v54 * v50) - (float)(v52 * v53);
    v58 = v40[18];
    v57 = v40[19];
    v59 = (float)((float)(v57 * (float)((float)(v51 * v53) - (float)(v54 * v49)))
                + (float)(v58 * (float)((float)(v52 * v49) - (float)(v51 * v50))))
        + (float)(v55 * v56);
    v241 = 0.0;
    v60 = 1.0;
    v243 = 1.0;
    v61 = 0.0;
    v62 = 0.0;
    v63 = v40[8];
    v64 = 0.0;
    v65 = 1.0;
    v66 = 0.0;
    v67 = 0.0;
    v68 = 0.0;
    v69 = 1.0;
    if (v59 != 0.0)
    {
      v70 = 1.0 / v59;
      v60 = (float)((float)(v52 * v49) - (float)(v50 * v51)) * v70;
      v61 = -(float)((float)((float)(v57 * v49) - (float)(v50 * v55)) * v70);
      v62 = (float)((float)(v57 * v51) - (float)(v55 * v52)) * v70;
      v64 = -(float)((float)((float)(v53 * (float)-v51) + (float)(v54 * v49)) * v70);
      v65 = (float)((float)(v58 * v49) - (float)(v55 * v53)) * v70;
      v66 = -(float)((float)((float)(v58 * v51) - (float)(v55 * v54)) * v70);
      v67 = v56 * v70;
      v68 = -(float)((float)((float)(v58 * v50) - (float)(v57 * v53)) * v70);
      v69 = (float)((float)(v57 * (float)-v54) + (float)(v58 * v52)) * v70;
    }
    v216 = v40[20];
    v219 = v40[21];
    v222 = v40[22];
    v223 = v40[23];
    v224 = v40[25];
    v228 = (float)((float)-(float)(v46 * v65) - (float)(v41 * v61)) - (float)(v44 * v68);
    v229 = (float)((float)-(float)(v46 * v64) - (float)(v41 * v60)) - (float)(v44 * v67);
    v226 = (float)((float)-(float)(v48 * v64) - (float)(v42 * v60)) - (float)(v43 * v67);
    v227 = (float)((float)-(float)(v46 * v66) - (float)(v41 * v62)) - (float)(v44 * v69);
    v225 = (float)((float)-(float)(v48 * v65) - (float)(v42 * v61)) - (float)(v43 * v68);
    v220 = (float)((float)-(float)(v48 * v66) - (float)(v42 * v62)) - (float)(v43 * v69);
    v221 = (float)((float)-(float)(v47 * v64) - (float)(v45 * v60)) - (float)(v63 * v67);
    v217 = (float)((float)-(float)(v47 * v66) - (float)(v45 * v62)) - (float)(v63 * v69);
    v218 = (float)((float)-(float)(v47 * v65) - (float)(v45 * v61)) - (float)(v63 * v68);
    v71 = v40[9];
    v72 = v40[10];
    v73 = v71 + (float)((float)((float)(v41 * v229) + (float)(v46 * v228)) + (float)(v44 * v227));
    v74 = v72 + (float)((float)((float)(v42 * v229) + (float)(v48 * v228)) + (float)(v43 * v227));
    v75 = v40[11];
    v76 = v40[12];
    v77 = v75 + (float)((float)((float)(v45 * v229) + (float)(v47 * v228)) + (float)(v63 * v227));
    v78 = (float)((float)((float)(v41 * v226) + (float)(v46 * v225)) + (float)(v44 * v220)) + v76;
    v79 = v40[13];
    v80 = v40[14];
    v81 = (float)((float)((float)(v42 * v226) + (float)(v48 * v225)) + (float)(v43 * v220)) + v79;
    v82 = (float)((float)((float)(v45 * v226) + (float)(v47 * v225)) + (float)(v63 * v220)) + v80;
    v84 = v40[15];
    v83 = v40[16];
    v85 = (float)((float)((float)(v41 * v221) + (float)(v46 * v218)) + (float)(v44 * v217)) + v84;
    v86 = (float)((float)((float)(v42 * v221) + (float)(v48 * v218)) + (float)(v43 * v217)) + v83;
    v87 = v40[17];
    v88 = (float)((float)((float)(v45 * v221) + (float)(v47 * v218)) + (float)(v63 * v217)) + v87;
    v89 = (float)(v78 * v86) - (float)(v81 * v85);
    v90 = (float)((float)(v74 * (float)((float)(v82 * v85) - (float)(v78 * v88)))
                + (float)(v73 * (float)((float)(v81 * v88) - (float)(v82 * v86))))
        + (float)(v77 * v89);
    v91 = 0.0;
    v237 = 0.0;
    v236 = 1.0;
    v234 = 0.0;
    v235 = 0.0;
    v233 = 0.0;
    v232 = 1.0;
    if (v90 != 0.0)
    {
      v92 = 1.0 / v90;
      v243 = (float)((float)(v81 * v88) - (float)(v86 * v82)) * v92;
      v241 = -(float)((float)((float)(v74 * v88) - (float)(v86 * v77)) * v92);
      v91 = (float)((float)(v74 * v82) - (float)(v77 * v81)) * v92;
      v237 = -(float)((float)((float)(v85 * (float)-v82) + (float)(v78 * v88)) * v92);
      v235 = -(float)((float)((float)(v73 * v82) - (float)(v77 * v78)) * v92);
      v236 = (float)((float)(v73 * v88) - (float)(v77 * v85)) * v92;
      v233 = -(float)((float)((float)(v73 * v86) - (float)(v74 * v85)) * v92);
      v234 = v89 * v92;
      v232 = (float)((float)(v74 * (float)-v78) + (float)(v73 * v81)) * v92;
    }
    v215 = v91;
    v93 = -v42;
    v94 = -v48;
    v95 = -v43;
    v96 = (float)(v76 * v83) - (float)(v79 * v84);
    v97 = (float)((float)(v72 * (float)((float)(v80 * v84) - (float)(v76 * v87)))
                + (float)(v71 * (float)((float)(v79 * v87) - (float)(v80 * v83))))
        + (float)(v75 * v96);
    v230 = 0.0;
    v231 = 1.0;
    v98 = 1.0;
    v99 = 0.0;
    v100 = 0.0;
    v101 = 0.0;
    v102 = 1.0;
    v103 = 0.0;
    v104 = 0.0;
    v105 = 0.0;
    v106 = 1.0;
    if (v97 != 0.0)
    {
      v107 = 1.0 / v97;
      v98 = (float)((float)(v79 * v87) - (float)(v83 * v80)) * v107;
      v99 = -(float)((float)((float)(v72 * v87) - (float)(v83 * v75)) * v107);
      v100 = (float)((float)(v72 * v80) - (float)(v75 * v79)) * v107;
      v101 = -(float)((float)((float)(v84 * (float)-v80) + (float)(v76 * v87)) * v107);
      v102 = (float)((float)(v71 * v87) - (float)(v75 * v84)) * v107;
      v103 = -(float)((float)((float)(v71 * v80) - (float)(v75 * v76)) * v107);
      v104 = v96 * v107;
      v105 = -(float)((float)((float)(v71 * v83) - (float)(v72 * v84)) * v107);
      v106 = (float)((float)(v72 * (float)-v76) + (float)(v71 * v79)) * v107;
    }
    v108 = (float)((float)(v101 * v93) - (float)(v41 * v98)) - (float)(v45 * v104);
    v109 = (float)((float)(v102 * v93) - (float)(v41 * v99)) - (float)(v45 * v105);
    v110 = (float)((float)(v103 * v93) - (float)(v41 * v100)) - (float)(v45 * v106);
    v111 = (float)((float)(v101 * v94) - (float)(v46 * v98)) - (float)(v47 * v104);
    v112 = (float)((float)(v102 * v94) - (float)(v46 * v99)) - (float)(v47 * v105);
    v113 = (float)((float)(v103 * v94) - (float)(v46 * v100)) - (float)(v47 * v106);
    v114 = (float)((float)(v101 * v95) - (float)(v44 * v98)) - (float)(v63 * v104);
    v115 = (float)((float)(v102 * v95) - (float)(v44 * v99)) - (float)(v63 * v105);
    v116 = (float)((float)(v103 * v95) - (float)(v44 * v100)) - (float)(v63 * v106);
    v117 = (float)(v41 * v108) + (float)(v42 * v109);
    v118 = (float)(v46 * v108) + (float)(v48 * v109);
    v119 = (float)(v44 * v108) + (float)(v43 * v109);
    v120 = v117 + (float)(v45 * v110);
    v121 = v118 + (float)(v47 * v110);
    v122 = v119 + (float)(v63 * v110);
    v123 = (float)(v46 * v111) + (float)(v48 * v112);
    v124 = (float)(v44 * v111) + (float)(v43 * v112);
    v125 = (float)((float)(v41 * v111) + (float)(v42 * v112)) + (float)(v45 * v113);
    v126 = v123 + (float)(v47 * v113);
    v127 = v124 + (float)(v63 * v113);
    v128 = v46 * v114;
    v129 = v48 * v115;
    v130 = (float)(v41 * v114) + (float)(v42 * v115);
    v131 = (float)(v44 * v114) + (float)(v43 * v115);
    v132 = v130 + (float)(v45 * v116);
    v133 = (float)(v128 + v129) + (float)(v47 * v116);
    v134 = v131 + (float)(v63 * v116);
    v135 = v40[18] + v120;
    v136 = v40[19] + v121;
    v137 = v216 + v122;
    v138 = v219 + v125;
    v139 = v222 + v126;
    v140 = v223 + v127;
    v141 = v40[24] + v132;
    v142 = v224 + v133;
    v143 = v40[26] + v134;
    v144 = (float)((float)(v219 + v125) * (float)(v224 + v133)) - (float)((float)(v222 + v126) * v141);
    v145 = (float)((float)(v136 * (float)((float)((float)(v223 + v127) * v141) - (float)((float)(v219 + v125) * v143)))
                 + (float)(v135
                         * (float)((float)((float)(v222 + v126) * v143)
                                 - (float)((float)(v223 + v127) * (float)(v224 + v133)))))
         + (float)((float)(v216 + v122) * v144);
    v146 = 0.0;
    v147 = 0.0;
    v148 = 1.0;
    v149 = 0.0;
    v150 = 0.0;
    v151 = 0.0;
    v152 = 1.0;
    if (v145 != 0.0)
    {
      v153 = 1.0 / v145;
      v231 = (float)((float)(v139 * v143) - (float)(v142 * v140)) * v153;
      v230 = -(float)((float)((float)(v136 * v143) - (float)(v142 * v137)) * v153);
      v146 = (float)((float)(v136 * v140) - (float)(v137 * v139)) * v153;
      v147 = -(float)((float)((float)(v141 * (float)-v140) + (float)(v138 * v143)) * v153);
      v148 = (float)((float)(v135 * v143) - (float)(v137 * v141)) * v153;
      v149 = -(float)((float)((float)(v135 * v140) - (float)(v137 * v138)) * v153);
      v150 = v144 * v153;
      v151 = -(float)((float)((float)(v135 * v142) - (float)(v136 * v141)) * v153);
      v152 = (float)((float)(v136 * (float)-v138) + (float)(v135 * v139)) * v153;
    }
    v154 = (float)((float)(v227 * v234) + (float)(v220 * v233)) + (float)(v217 * v232);
    v155 = (float)((float)(v228 * v234) + (float)(v225 * v233)) + (float)(v218 * v232);
    v156 = (float)((float)(v229 * v234) + (float)(v226 * v233)) + (float)(v221 * v232);
    v157 = (float)((float)(v227 * v237) + (float)(v220 * v236)) + (float)(v217 * v235);
    v158 = (float)((float)(v228 * v237) + (float)(v225 * v236)) + (float)(v218 * v235);
    v159 = (float)((float)(v229 * v237) + (float)(v226 * v236)) + (float)(v221 * v235);
    v160 = (float)((float)(v227 * v243) + (float)(v220 * v241)) + (float)(v217 * v215);
    v161 = (float)((float)(v228 * v243) + (float)(v225 * v241)) + (float)(v218 * v215);
    v162 = (float)((float)(v229 * v243) + (float)(v226 * v241)) + (float)(v221 * v215);
    v163 = *((float *)v18 + 1);
    v164 = *((float *)v18 + 2);
    v165 = (float)((float)(v161 * *(float *)v18) + (float)(v158 * v163)) + (float)(v155 * v164);
    v166 = (float)((float)(v160 * *(float *)v18) + (float)(v157 * v163)) + (float)(v154 * v164);
    v168 = *((float *)v18 + 4);
    v167 = *((float *)v18 + 5);
    v169 = (float)(v146 * v168) + (float)(v149 * v167);
    v170 = *((float *)v18 + 6);
    v171 = (float)((float)(v155 * v167) + (float)(v156 * v168)) + (float)(v154 * v170);
    v172 = (float)((float)(v231 * v168) + (float)(v147 * v167)) + (float)(v150 * v170);
    v173 = v165 + (float)((float)((float)(v230 * v168) + (float)(v148 * v167)) + (float)(v151 * v170));
    v174 = (float)(v215 * *(float *)v18) + (float)(v235 * v163);
    v175 = (float)((float)(v241 * *(float *)v18) + (float)(v236 * v163)) + (float)(v233 * v164);
    v176 = (float)((float)((float)(v243 * *(float *)v18) + (float)(v237 * v163)) + (float)(v234 * v164))
         + (float)((float)((float)(v161 * v167) + (float)(v162 * v168)) + (float)(v160 * v170));
    *(float *)v17 = -(float)((float)((float)((float)(v162 * *(float *)v18) + (float)(v159 * v163)) + (float)(v156 * v164))
                           + v172);
    *((float *)v17 + 1) = -v173;
    *((float *)v17 + 2) = -(float)(v166 + (float)(v169 + (float)(v152 * v170)));
    *((float *)v17 + 4) = -v176;
    *((float *)v17 + 5) = -(float)(v175
                                 + (float)((float)((float)(v158 * v167) + (float)(v159 * v168)) + (float)(v157 * v170)));
    *((float *)v17 + 6) = -(float)((float)(v174 + (float)(v232 * v164)) + v171);
    v17[3] = 0;
    v17[7] = 0;
  }
  if (v14 >= 2)
  {
    v177 = 1;
    v178 = a3[4];
    v179 = 96;
    do
    {
      v180 = *(_QWORD *)(a1 + 624) + 160 * v177;
      _S0 = *(_DWORD *)(v180 + 120);
      v182 = v39;
      v183 = &v39[8 * *(unsigned int *)(*(_QWORD *)(a1 + 608) + 40 * v177 + 32)];
      _D4 = *(int32x2_t *)v183;
      v185.i32[1] = HIDWORD(*(_QWORD *)(v180 + 124));
      v185.i32[0] = _S0;
      v186.i32[1] = HIDWORD(*(_QWORD *)v183);
      v186.i32[0] = v183[2];
      v187 = (float32x2_t)vrev64_s32((int32x2_t)vmul_f32(v185, v186));
      v188 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v183, 0);
      v188.i32[0] = v183[2];
      __asm { FMLS            S1, S0, V4.S[1] }
      v194 = vadd_f32(*(float32x2_t *)(v183 + 4), vmls_f32(v187, v188, *(float32x2_t *)(v180 + 124)));
      v195 = _S1 + *((float *)v183 + 6);
      v242 = v188.f32[0];
      v244 = *(int32x2_t *)v183;
      v245 = *(int32x2_t *)v183;
      v246 = v188.i32[0];
      v247 = 0;
      v248 = v194;
      v249 = v195;
      v250 = 0;
      v196 = *(_QWORD *)(a1 + 632) + 80 * v177;
      v197 = (float *)(v178 + 4 * *(unsigned int *)(v196 + 72));
      physx::Dy::FeatherstoneArticulation::computeJointAccelerationW(a1, v180, *(_BYTE *)(v196 + 76), (float *)&v245, (uint64_t)v197, v177);
      v198 = *(unsigned __int8 *)(v196 + 76);
      if (*(_BYTE *)(v196 + 76))
      {
        v199 = (float *)(*(_QWORD *)(a1 + 528) + v179);
        v200 = 0;
        v201 = 0.0;
        v202 = 0.0;
        v203 = 0;
        v39 = v182;
        v205 = v242;
        v204 = (float32x2_t)v244;
        do
        {
          v206 = *v197++;
          v207 = v206;
          v200 = vadd_f32(v200, vmul_n_f32(*(float32x2_t *)(v199 - 5), v206));
          v202 = v202 + (float)(v206 * *(v199 - 3));
          v208 = vmul_n_f32(*(float32x2_t *)(v199 - 2), v206);
          v209 = *v199;
          v199 += 6;
          v203 = vadd_f32(v203, v208);
          v201 = v201 + (float)(v207 * v209);
          --v198;
        }
        while (v198);
      }
      else
      {
        v200 = 0;
        v202 = 0.0;
        v201 = 0.0;
        v203 = 0;
        v39 = v182;
        v205 = v242;
        v204 = (float32x2_t)v244;
      }
      v210 = (float32x2_t *)&v240[8 * v177];
      v211 = v201 + (float)(v195 + v210[3].f32[0]);
      v212 = (float32x2_t *)&v39[8 * v177];
      v213 = vadd_f32(v200, vadd_f32(v204, *v210));
      v212[1].f32[0] = v202 + (float)(v205 + v210[1].f32[0]);
      v212[1].i32[1] = 0;
      v214 = vadd_f32(v203, vadd_f32(v194, v210[2]));
      *v212 = v213;
      v212[2] = v214;
      v212[3].f32[0] = v211;
      v212[3].i32[1] = 0;
      ++v177;
      v179 += 76;
    }
    while (v177 != v14);
  }
  return physx::PxcScratchAllocator::free(v239, v238);
}

uint64_t physx::Dy::partitionContactConstraints(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  _OWORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  unsigned int v49;
  unsigned int i;
  unsigned int v51;
  _OWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned __int16 v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  unsigned int j;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  _DWORD *v75;
  unint64_t v76;
  int v77;
  _OWORD *v78;
  int v79;
  _DWORD *v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v85;
  uint64_t v87;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t *v93;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _OWORD *v117;
  __int128 v118;
  __int128 v119;
  int v120;
  unsigned int k;
  unint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  _QWORD *v135;
  _OWORD *v136;
  __int128 v137;
  __int128 v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  _OWORD *v144;
  _QWORD *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v149;
  uint64_t *v150;
  int v158;
  int *v159;
  int *v160;
  int v161;
  int v162;
  int *v163;
  int *v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  unsigned int v169;
  int *v170;
  unsigned int v171;
  _OWORD *v172;
  __int128 v173;
  __int128 v174;
  unsigned int v175;
  int v176;
  int *v177;
  unsigned int v178;
  int *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int m;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  _OWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  int v190;
  uint64_t v191;
  int *v192;
  int v193;
  int v194;
  int v195;
  uint64_t v196;
  int *v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  int v202;
  int v203;
  unsigned __int16 v204;
  uint64_t v205;
  unsigned int v206;
  _OWORD *v207;
  __int128 v208;
  __int128 v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  unsigned int v215;
  char *v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  _DWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  _DWORD *v227;
  uint64_t v228;
  uint64_t *v229;
  unint64_t v230;
  int v231;
  _OWORD *v232;
  int v233;
  int v234;
  unsigned int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t *v247;
  int v255;
  uint64_t v256;
  int *v257;
  int v258;
  int v259;
  uint64_t v260;
  int *v261;
  int v262;
  int v263;
  unsigned int v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  _OWORD *v268;
  unsigned int v269;
  int v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  char v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  __int128 v281;
  __int128 v282;
  int v283;
  unsigned int n;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unsigned int v289;
  uint64_t v290;
  __int128 *v291;
  int v292;
  uint64_t v293;
  int *v294;
  int v295;
  int v296;
  int v297;
  uint64_t v298;
  int *v299;
  int v300;
  int v301;
  unsigned int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  _QWORD *v310;
  _OWORD *v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  uint64_t result;
  int v316;
  int v317;
  uint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  int v321;
  char *v322;
  unsigned int v323;
  uint64_t v324;
  _QWORD *v325;
  _QWORD *v326;
  BOOL v327;
  int v328;
  uint64_t v329;

  v329 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned int *)a1 + 2);
  v3 = *((unsigned int *)a1 + 6);
  v4 = *((_DWORD *)a1 + 10);
  v319 = (_QWORD *)a1[4];
  v5 = (_QWORD *)a1[6];
  v6 = (_QWORD *)a1[7];
  v7 = a1[10];
  *(_DWORD *)(v7 + 8) = 0;
  v8 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v2)
  {
    v9 = 0;
    v10 = *a1;
    v11 = v2;
    do
    {
      v12 = v10 + v9;
      *(_DWORD *)(v12 + 28) = 0;
      *(_DWORD *)(v12 + 12) = 0;
      v9 += v8;
      --v11;
    }
    while (v11);
  }
  v321 = v4;
  v325 = v5;
  v320 = a1;
  if (!(_DWORD)v3)
  {
    v16 = *a1;
    v17 = v8 * v2;
    *(_DWORD *)(v7 + 8) = 32;
    v18 = *(_OWORD **)v7;
    v18[6] = 0u;
    v18[7] = 0u;
    v18[4] = 0u;
    v18[5] = 0u;
    v18[2] = 0u;
    v18[3] = 0u;
    *v18 = 0u;
    v18[1] = 0u;
    if (v4)
    {
      v19 = 0;
      v20 = v321 - 1;
      _X12 = v319;
      do
      {
        v22 = v20;
        if (v20 >= 4uLL)
          v22 = 4;
        v23 = &_X12[6 * v22];
        _X14 = v23[4];
        __asm { PRFM            #0, [X14] }
        _X14 = *v23;
        _X13 = v23[1];
        __asm
        {
          PRFM            #0, [X14]
          PRFM            #0, [X13]
          PRFM            #0, [X12,#0x180]
        }
        v35 = *_X12;
        v36 = _X12[1];
        v37 = (*_X12 - v16) / v8;
        v38 = (v36 - v16) / v8;
        if (v37 >= v2 || v38 >= v2)
        {
          if (v37 < v2)
            ++*(_WORD *)(v35 + 14);
          if (v38 < v2)
            ++*(_WORD *)(_X12[1] + 14);
        }
        else
        {
          v39 = *(_DWORD *)(v35 + 28);
          v40 = *(_DWORD *)(v36 + 28);
          if ((v40 | v39) == 0xFFFFFFFF)
          {
            v46 = &v6[6 * v19++];
            v47 = *(_OWORD *)_X12;
            v48 = *((_OWORD *)_X12 + 2);
            v46[1] = *((_OWORD *)_X12 + 1);
            v46[2] = v48;
            *v46 = v47;
          }
          else
          {
            v41 = __clz(__rbit32(~(v40 | v39)));
            v42 = (1 << v41) | v40;
            ++*(_DWORD *)(*(_QWORD *)v7 + 4 * v41);
            *(_DWORD *)(*_X12 + 28) = (1 << v41) | v39;
            v43 = *(unsigned __int16 *)(*_X12 + 12);
            if (v43 <= v41 + 1)
              LOWORD(v43) = v41 + 1;
            *(_WORD *)(*_X12 + 12) = v43;
            *(_DWORD *)(_X12[1] + 28) = v42;
            v44 = _X12[1];
            v45 = *(unsigned __int16 *)(v44 + 12);
            if (v45 <= v41 + 1)
              LOWORD(v45) = v41 + 1;
            *(_WORD *)(v44 + 12) = v45;
          }
        }
        _X12 += 6;
        --v20;
      }
      while (v20 != -1);
      if (v19)
      {
        v49 = 0;
        do
        {
          if (v17)
          {
            for (i = 0; i < v17; i += v8)
              *(_DWORD *)(v16 + 28 + i) = 0;
          }
          v49 += 32;
          v51 = *(_DWORD *)(v7 + 8) + 32;
          LODWORD(v326) = 0;
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v51, &v326);
          v52 = (_OWORD *)(*(_QWORD *)v7 + 4 * v49);
          v52[6] = 0u;
          v52[7] = 0u;
          v52[4] = 0u;
          v52[5] = 0u;
          v52[2] = 0u;
          v52[3] = 0u;
          *v52 = 0u;
          v52[1] = 0u;
          if (v19 <= 1)
            v53 = 1;
          else
            v53 = v19;
          v54 = v6;
          v19 = 0;
          v5 = v325;
          do
          {
            v55 = v54[1];
            v56 = *(_DWORD *)(*v54 + 28);
            v57 = *(_DWORD *)(v55 + 28);
            if ((v57 | v56) == 0xFFFFFFFF)
            {
              v68 = &v6[6 * v19++];
              v69 = *(_OWORD *)v54;
              v70 = *((_OWORD *)v54 + 2);
              v68[1] = *((_OWORD *)v54 + 1);
              v68[2] = v70;
              *v68 = v69;
            }
            else
            {
              v58 = (v55 - v16) / v8;
              v59 = __clz(__rbit32(~(v57 | v56)));
              if ((*v54 - v16) / v8 >= v2)
                v60 = 0;
              else
                v60 = 1 << v59;
              v61 = v60 | v56;
              if (v58 >= v2)
                v62 = 0;
              else
                v62 = 1 << v59;
              v63 = v62 | v57;
              ++*(_DWORD *)(*(_QWORD *)v7 + 4 * (v59 | v49));
              v64 = (v59 | v49) + 1;
              *(_DWORD *)(*v54 + 28) = v61;
              v65 = *(unsigned __int16 *)(*v54 + 12);
              if (v65 <= v64)
                LOWORD(v65) = v64;
              *(_WORD *)(*v54 + 12) = v65;
              *(_DWORD *)(v54[1] + 28) = v63;
              v66 = v54[1];
              v67 = *(unsigned __int16 *)(v66 + 12);
              if (v67 <= v64)
                LOWORD(v67) = v64;
              *(_WORD *)(v66 + 12) = v67;
            }
            v54 += 6;
            --v53;
          }
          while (v53);
        }
        while (v19);
      }
    }
    if (v17)
    {
      for (j = 0; j < v17; j += v8)
      {
        v72 = v16 + j;
        *(_DWORD *)(v72 + 28) = 0;
        LODWORD(v73) = *(unsigned __int16 *)(v72 + 14);
        v74 = v73 + *(unsigned __int16 *)(v72 + 12);
        if (v74 > *(_DWORD *)(v7 + 8))
        {
          LODWORD(v326) = 0;
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v74, &v326);
          v5 = v325;
          LODWORD(v73) = *(unsigned __int16 *)(v72 + 14);
        }
        if ((_DWORD)v73)
        {
          v73 = v73;
          v75 = (_DWORD *)(*(_QWORD *)v7 + 4 * *(unsigned __int16 *)(v72 + 12));
          do
          {
            ++*v75++;
            --v73;
          }
          while (v73);
        }
      }
    }
    if (*(_DWORD *)(v7 + 8))
    {
      v76 = 0;
      v77 = 0;
      v78 = *(_OWORD **)v7;
      do
      {
        v79 = *((_DWORD *)v78 + v76);
        *((_DWORD *)v78 + v76) = v77;
        v77 += v79;
        ++v76;
      }
      while (v76 < *(unsigned int *)(v7 + 8));
    }
    v80 = v320;
    v81 = v321;
    if ((_DWORD)v2)
    {
      v82 = 0;
      v83 = *v320;
      _X10 = *v320 + 256;
      v85 = v2;
      do
      {
        __asm { PRFM            #0, [X10] }
        v87 = v83 + v82;
        *(_DWORD *)(v87 + 28) = 0;
        *(_WORD *)(v87 + 14) = 0;
        v82 += v8;
        ++_X10;
        --v85;
      }
      while (v85);
    }
    _X2 = v319;
    if (!v81)
      goto LABEL_103;
    v89 = 0;
    v90 = 0;
    v91 = v81 - 1;
    while (1)
    {
      v92 = v91;
      if (v91 >= 4uLL)
        v92 = 4;
      v93 = &_X2[6 * v92];
      _X16 = v93[4];
      __asm { PRFM            #0, [X16] }
      _X16 = *v93;
      _X15 = v93[1];
      __asm
      {
        PRFM            #0, [X16]
        PRFM            #0, [X15]
        PRFM            #0, [X2,#0x180]
      }
      v101 = *_X2;
      v102 = _X2[1];
      v103 = (*_X2 - v16) / v8;
      v104 = (v102 - v16) / v8;
      if (v103 >= v2 || v104 >= v2)
      {
        if (v103 >= v2 && v104 >= v2)
          goto LABEL_83;
        if (v103 >= v2)
          v101 = _X2[1];
        v113 = *(unsigned __int16 *)(v101 + 12);
        v114 = *(unsigned __int16 *)(v101 + 14);
        *(_WORD *)(v101 + 14) = v114 + 1;
        v115 = v114 + v113;
        v112 = *(_DWORD *)(*(_QWORD *)v7 + 4 * v115);
        *(_DWORD *)(*(_QWORD *)v7 + 4 * v115) = v112 + 1;
      }
      else
      {
        v105 = *(_DWORD *)(v101 + 28);
        v106 = *(_DWORD *)(v102 + 28);
        if ((v106 | v105) == 0xFFFFFFFF)
        {
          v112 = v90++;
          v116 = v6;
          goto LABEL_82;
        }
        v107 = __clz(__rbit32(~(v106 | v105)));
        v108 = (1 << v107) | v106;
        *(_DWORD *)(v101 + 28) = (1 << v107) | v105;
        v109 = *(unsigned __int16 *)(*_X2 + 12);
        if (v109 <= v107 + 1)
          LOWORD(v109) = v107 + 1;
        *(_WORD *)(*_X2 + 12) = v109;
        *(_DWORD *)(_X2[1] + 28) = v108;
        v110 = _X2[1];
        v111 = *(unsigned __int16 *)(v110 + 12);
        if (v111 <= v107 + 1)
          LOWORD(v111) = v107 + 1;
        *(_WORD *)(v110 + 12) = v111;
        v112 = *(_DWORD *)(*(_QWORD *)v7 + 4 * v107);
        *(_DWORD *)(*(_QWORD *)v7 + 4 * v107) = v112 + 1;
      }
      v116 = v5;
LABEL_82:
      v117 = &v116[6 * v112];
      v118 = *(_OWORD *)_X2;
      v119 = *((_OWORD *)_X2 + 2);
      v117[1] = *((_OWORD *)_X2 + 1);
      v117[2] = v119;
      *v117 = v118;
LABEL_83:
      _X2 += 6;
      --v89;
      --v91;
      if (-v81 == v89)
      {
        if (v90)
        {
          v120 = 0;
          do
          {
            if (v17)
            {
              for (k = 0; k < v17; k += v8)
                *(_DWORD *)(v16 + 28 + k) = 0;
            }
            v122 = 0;
            v120 += 32;
            if (v90 <= 1)
              v90 = 1;
            v123 = 48 * v90;
            v90 = 0;
            do
            {
              v124 = &v6[v122 / 8];
              v126 = v6[v122 / 8];
              v125 = v6[v122 / 8 + 1];
              v127 = *(_DWORD *)(v126 + 28);
              v128 = *(_DWORD *)(v125 + 28);
              if ((v128 | v127) == 0xFFFFFFFF)
              {
                v134 = v90++;
                v135 = v6;
              }
              else
              {
                v129 = (v125 - v16) / v8;
                v130 = __clz(__rbit32(~(v128 | v127)));
                if ((v126 - v16) / v8 >= v2)
                  v131 = 0;
                else
                  v131 = 1 << v130;
                v132 = v131 | v127;
                if (v129 >= v2)
                  v133 = 0;
                else
                  v133 = 1 << v130;
                *(_DWORD *)(v126 + 28) = v132;
                *(_DWORD *)(v124[1] + 28) = v133 | v128;
                v134 = *(_DWORD *)(*(_QWORD *)v7 + 4 * (v130 | v120));
                *(_DWORD *)(*(_QWORD *)v7 + 4 * (v130 | v120)) = v134 + 1;
                v135 = v5;
              }
              v136 = &v135[6 * v134];
              v137 = *(_OWORD *)v124;
              v138 = *((_OWORD *)v124 + 2);
              v136[1] = *((_OWORD *)v124 + 1);
              v136[2] = v138;
              *v136 = v137;
              v122 += 48;
            }
            while (v123 != v122);
          }
          while (v90);
        }
LABEL_103:
        v139 = 0;
        goto LABEL_302;
      }
    }
  }
  v13 = (uint64_t *)a1[2];
  v14 = (8 * v3);
  v327 = v14 > 0x400;
  if (v14 < 0x401)
  {
    MEMORY[0x24BDAC7A8](a1);
    v15 = (uint64_t *)((char *)&v318 - ((v14 + 15) & 0x1FFFFFFF0));
    bzero(v15, (8 * v3));
  }
  else
  {
    v15 = physx::shdfnd::TempAllocator::allocate((physx::shdfnd::TempAllocator *)&v328, (8 * v3), "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyConstraintPartition.cpp", 844);
  }
  v318 = (8 * v3);
  v140 = 0;
  v326 = v15;
  do
  {
    v141 = *v13;
    v13 += 12;
    v15[v140++] = v141;
    *(_QWORD *)(v141 + 8) = 0;
  }
  while (v3 != v140);
  v322 = (char *)v15;
  v324 = v3;
  v142 = *a1;
  v143 = v8 * v2;
  *(_DWORD *)(v7 + 8) = 32;
  v144 = *(_OWORD **)v7;
  v144[6] = 0u;
  v144[7] = 0u;
  v144[4] = 0u;
  v144[5] = 0u;
  v144[2] = 0u;
  v144[3] = 0u;
  *v144 = 0u;
  v144[1] = 0u;
  v145 = v325;
  v323 = v8 * v2;
  if (v4)
  {
    v146 = 0;
    v147 = v321 - 1;
    _X27 = (int **)v319;
    while (1)
    {
      v149 = v147;
      if (v147 >= 4uLL)
        v149 = 4;
      v150 = (uint64_t *)&_X27[6 * v149];
      _X9 = v150[4];
      __asm { PRFM            #0, [X9] }
      _X9 = *v150;
      _X8 = v150[1];
      __asm
      {
        PRFM            #0, [X9]
        PRFM            #0, [X8]
        PRFM            #0, [X27,#0x180]
      }
      v158 = *((unsigned __int16 *)_X27 + 8);
      v159 = *_X27;
      if (v158 != 0xFFFF)
        break;
      if (((unint64_t)v159 - v142) / v8 < v2)
      {
        v160 = v159 + 7;
        goto LABEL_115;
      }
      v159 = _X27[1];
      if (*((__int16 *)_X27 + 9) != -1)
        goto LABEL_139;
      if (((unint64_t)v159 - v142) / v8 < v2)
        goto LABEL_142;
LABEL_143:
      _X27 += 6;
      if (--v147 == -1)
      {
        if (!v146)
          goto LABEL_192;
        v181 = 0;
        while (1)
        {
          if (v143)
          {
            for (m = 0; m < v143; m += v8)
              *(_DWORD *)(v142 + 28 + m) = 0;
          }
          v183 = v322;
          v184 = v324;
          do
          {
            v185 = *(_QWORD *)v183;
            v183 += 8;
            *(_DWORD *)(v185 + 12) = 0;
            --v184;
          }
          while (v184);
          v181 += 32;
          v186 = *(_DWORD *)(v7 + 8) + 32;
          v328 = 0;
          physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v186, &v328);
          v187 = (_OWORD *)(*(_QWORD *)v7 + 4 * v181);
          v187[6] = 0u;
          v187[7] = 0u;
          v187[4] = 0u;
          v187[5] = 0u;
          v187[2] = 0u;
          v187[3] = 0u;
          *v187 = 0u;
          v187[1] = 0u;
          if (v146 <= 1)
            v188 = 1;
          else
            v188 = v146;
          v189 = v6;
          v146 = 0;
          v145 = v325;
          v143 = v323;
          do
          {
            v190 = *((unsigned __int16 *)v189 + 8);
            v191 = *v189;
            if (v190 != 0xFFFF)
            {
              v192 = (int *)(v191 + 12);
LABEL_159:
              v193 = 0;
              v194 = *v192;
              goto LABEL_160;
            }
            if ((v191 - v142) / v8 < v2)
            {
              v192 = (int *)(v191 + 28);
              goto LABEL_159;
            }
            v194 = 0;
            v193 = 1;
LABEL_160:
            v195 = *((unsigned __int16 *)v189 + 9);
            v196 = v189[1];
            if (v195 != 0xFFFF)
            {
              v197 = (int *)(v196 + 12);
LABEL_164:
              v198 = 0;
              v199 = *v197;
              goto LABEL_165;
            }
            if ((v196 - v142) / v8 < v2)
            {
              v197 = (int *)(v196 + 28);
              goto LABEL_164;
            }
            v199 = 0;
            v198 = 1;
LABEL_165:
            if ((v199 | v194) == 0xFFFFFFFF)
            {
              v207 = &v6[6 * v146++];
              v208 = *(_OWORD *)v189;
              v209 = *((_OWORD *)v189 + 2);
              v207[1] = *((_OWORD *)v189 + 1);
              v207[2] = v209;
              *v207 = v208;
            }
            else
            {
              v200 = __clz(__rbit32(~(v199 | v194)));
              if (v193)
                v201 = 0;
              else
                v201 = 1 << v200;
              v202 = v201 | v194;
              if (v198)
                v203 = 0;
              else
                v203 = 1 << v200;
              ++*(_DWORD *)(*(_QWORD *)v7 + 4 * (v200 | v181));
              v204 = (v200 | v181) + 1;
              v205 = *v189;
              if (v190 == 0xFFFF)
              {
                *(_DWORD *)(v205 + 28) = v202;
                v210 = *(unsigned __int16 *)(*v189 + 12);
                if (v210 <= v204)
                  LOWORD(v210) = (v200 | v181) + 1;
                *(_WORD *)(*v189 + 12) = v210;
              }
              else
              {
                *(_DWORD *)(v205 + 12) = v202;
                v206 = *(unsigned __int16 *)(v205 + 10);
                if (v206 <= v204)
                  LOWORD(v206) = (v200 | v181) + 1;
                *(_WORD *)(v205 + 10) = v206;
              }
              v211 = v203 | v199;
              v212 = v189[1];
              if (v195 == 0xFFFF)
              {
                *(_DWORD *)(v212 + 28) = v211;
                v214 = v189[1];
                v215 = *(unsigned __int16 *)(v214 + 12);
                if (v215 <= v204)
                  LOWORD(v215) = (v200 | v181) + 1;
                *(_WORD *)(v214 + 12) = v215;
              }
              else
              {
                *(_DWORD *)(v212 + 12) = v211;
                v213 = *(unsigned __int16 *)(v212 + 10);
                if (v213 <= v204)
                  LOWORD(v213) = (v200 | v181) + 1;
                *(_WORD *)(v212 + 10) = v213;
              }
            }
            v189 += 6;
            --v188;
          }
          while (v188);
          if (!v146)
            goto LABEL_192;
        }
      }
    }
    v160 = v159 + 3;
LABEL_115:
    v161 = *v160;
    v162 = *((unsigned __int16 *)_X27 + 9);
    v163 = _X27[1];
    if (v162 != 0xFFFF)
    {
      v164 = v163 + 3;
      goto LABEL_119;
    }
    if (((unint64_t)v163 - v142) / v8 < v2)
    {
      v164 = v163 + 7;
LABEL_119:
      v165 = *v164;
      if ((v165 | v161) == 0xFFFFFFFF)
      {
        v172 = &v6[6 * v146++];
        v173 = *(_OWORD *)_X27;
        v174 = *((_OWORD *)_X27 + 2);
        v172[1] = *((_OWORD *)_X27 + 1);
        v172[2] = v174;
        *v172 = v173;
      }
      else
      {
        v166 = __clz(__rbit32(~(v165 | v161)));
        v167 = 1 << v166;
        v168 = (1 << v166) | v161;
        ++*(_DWORD *)(*(_QWORD *)v7 + 4 * v166);
        v169 = v166 + 1;
        v170 = *_X27;
        if (v158 == 0xFFFF)
        {
          v170[7] = v168;
          v175 = *((unsigned __int16 *)*_X27 + 6);
          if (v175 <= v169)
            LOWORD(v175) = v169;
          *((_WORD *)*_X27 + 6) = v175;
        }
        else
        {
          v170[3] = v168;
          v171 = *((unsigned __int16 *)v170 + 5);
          if (v171 <= v169)
            LOWORD(v171) = v169;
          *((_WORD *)v170 + 5) = v171;
        }
        v176 = v167 | v165;
        v177 = _X27[1];
        if (v162 == 0xFFFF)
        {
          v177[7] = v176;
          v179 = _X27[1];
          v180 = *((unsigned __int16 *)v179 + 6);
          if (v180 <= v169)
            LOWORD(v180) = v169;
          *((_WORD *)v179 + 6) = v180;
        }
        else
        {
          v177[3] = v176;
          v178 = *((unsigned __int16 *)v177 + 5);
          if (v178 <= v169)
            LOWORD(v178) = v169;
          *((_WORD *)v177 + 5) = v178;
        }
      }
      goto LABEL_143;
    }
    if (v158 != 0xFFFF)
    {
LABEL_139:
      if (((*(uint64_t (**)(int *))(*(_QWORD *)v159 + 352))(v159) & 1) == 0)
        ++*((_WORD *)v159 + 4);
      v145 = v325;
      v143 = v323;
      goto LABEL_143;
    }
LABEL_142:
    ++*((_WORD *)v159 + 7);
    goto LABEL_143;
  }
LABEL_192:
  v216 = v322;
  if (v143)
  {
    v217 = 0;
    do
    {
      v218 = v142 + v217;
      *(_DWORD *)(v218 + 28) = 0;
      LODWORD(v219) = *(unsigned __int16 *)(v218 + 14);
      v220 = v219 + *(unsigned __int16 *)(v218 + 12);
      if (v220 > *(_DWORD *)(v7 + 8))
      {
        v328 = 0;
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v220, &v328);
        v145 = v325;
        LODWORD(v219) = *(unsigned __int16 *)(v218 + 14);
      }
      v221 = v323;
      if ((_DWORD)v219)
      {
        v219 = v219;
        v222 = (_DWORD *)(*(_QWORD *)v7 + 4 * *(unsigned __int16 *)(v218 + 12));
        do
        {
          ++*v222++;
          --v219;
        }
        while (v219);
      }
      v217 += v8;
    }
    while (v217 < v221);
  }
  v223 = 0;
  do
  {
    v224 = *(_QWORD *)&v216[8 * v223];
    *(_DWORD *)(v224 + 12) = 0;
    LODWORD(v225) = *(unsigned __int16 *)(v224 + 8);
    v226 = v225 + *(unsigned __int16 *)(v224 + 10);
    if (v226 > *(_DWORD *)(v7 + 8))
    {
      v328 = 0;
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize(v7, v226, &v328);
      v145 = v325;
      LODWORD(v225) = *(unsigned __int16 *)(v224 + 8);
    }
    if ((_DWORD)v225)
    {
      v225 = v225;
      v227 = (_DWORD *)(*(_QWORD *)v7 + 4 * *(unsigned __int16 *)(v224 + 10));
      do
      {
        ++*v227++;
        --v225;
      }
      while (v225);
    }
    ++v223;
    v228 = v324;
  }
  while (v223 != v324);
  v229 = v320;
  if (*(_DWORD *)(v7 + 8))
  {
    v230 = 0;
    v231 = 0;
    v232 = *(_OWORD **)v7;
    do
    {
      v233 = *((_DWORD *)v232 + v230);
      *((_DWORD *)v232 + v230) = v231;
      v231 += v233;
      ++v230;
    }
    while (v230 < *(unsigned int *)(v7 + 8));
  }
  v234 = v321;
  _X21 = v319;
  if ((_DWORD)v2)
  {
    v236 = 0;
    v237 = *v229;
    v238 = v2;
    do
    {
      v239 = v237 + v236;
      *(_DWORD *)(v239 + 28) = 0;
      *(_WORD *)(v239 + 14) = 0;
      v236 += v8;
      --v238;
    }
    while (v238);
  }
  v240 = 0;
  v241 = v322;
  do
  {
    v242 = *(_QWORD *)&v241[8 * v240];
    *(_DWORD *)(v242 + 12) = 0;
    *(_WORD *)(v242 + 8) = 0;
    ++v240;
  }
  while (v228 != v240);
  v243 = v323;
  if (!v234)
  {
    v139 = 0;
    goto LABEL_299;
  }
  v244 = 0;
  v139 = 0;
  v245 = v234 - 1;
  do
  {
    v246 = v245;
    if (v245 >= 4uLL)
      v246 = 4;
    v247 = &_X21[6 * v246];
    _X9 = v247[4];
    __asm { PRFM            #0, [X9] }
    _X9 = *v247;
    _X8 = v247[1];
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X8]
      PRFM            #0, [X21,#0x180]
    }
    v255 = *((unsigned __int16 *)_X21 + 8);
    v256 = *_X21;
    if (v255 != 0xFFFF)
    {
      v257 = (int *)(v256 + 12);
      goto LABEL_223;
    }
    if ((v256 - v142) / v8 < v2)
    {
      v257 = (int *)(v256 + 28);
LABEL_223:
      v258 = *v257;
      v259 = *((unsigned __int16 *)_X21 + 9);
      v260 = _X21[1];
      if (v259 != 0xFFFF)
      {
        v261 = (int *)(v260 + 12);
        goto LABEL_227;
      }
      if ((v260 - v142) / v8 < v2)
      {
        v261 = (int *)(v260 + 28);
LABEL_227:
        v262 = *v261;
        v263 = *v261 | v258;
        if (v263 == -1)
        {
          v268 = &v6[6 * v244++];
        }
        else
        {
          v264 = __clz(__rbit32(~v263));
          v265 = (1 << v264) | v258;
          v266 = v264 + 1;
          if (v255 == 0xFFFF)
          {
            *(_DWORD *)(v256 + 28) = v265;
            v269 = *(unsigned __int16 *)(*_X21 + 12);
            if (v269 <= v266)
              LOWORD(v269) = v264 + 1;
            *(_WORD *)(*_X21 + 12) = v269;
          }
          else
          {
            *(_DWORD *)(v256 + 12) = v265;
            v267 = *(unsigned __int16 *)(v256 + 10);
            if (v267 <= v266)
              LOWORD(v267) = v264 + 1;
            *(_WORD *)(v256 + 10) = v267;
          }
          v270 = (1 << v264) | v262;
          v271 = _X21[1];
          if (v259 == 0xFFFF)
          {
            *(_DWORD *)(v271 + 28) = v270;
            v273 = _X21[1];
            v274 = *(unsigned __int16 *)(v273 + 12);
            if (v274 <= v266)
              LOWORD(v274) = v264 + 1;
            *(_WORD *)(v273 + 12) = v274;
          }
          else
          {
            *(_DWORD *)(v271 + 12) = v270;
            v272 = *(unsigned __int16 *)(v271 + 10);
            if (v272 <= v266)
              LOWORD(v272) = v264 + 1;
            *(_WORD *)(v271 + 10) = v272;
          }
          v275 = *(_DWORD *)(*(_QWORD *)v7 + 4 * v264);
          *(_DWORD *)(*(_QWORD *)v7 + 4 * v264) = v275 + 1;
          v268 = &v145[6 * v275];
        }
        goto LABEL_253;
      }
      if (v255 != 0xFFFF)
      {
LABEL_248:
        v276 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v256 + 344))(v256, _X21, 1);
        v243 = v323;
        v145 = v325;
        if ((v276 & 1) != 0)
        {
LABEL_249:
          ++v139;
          goto LABEL_254;
        }
        v277 = *(unsigned __int16 *)(v256 + 10);
        v278 = *(unsigned __int16 *)(v256 + 8);
        *(_WORD *)(v256 + 8) = v278 + 1;
        goto LABEL_252;
      }
      goto LABEL_251;
    }
    v256 = _X21[1];
    if (*((__int16 *)_X21 + 9) != -1)
      goto LABEL_248;
    if ((v256 - v142) / v8 >= v2)
      goto LABEL_249;
LABEL_251:
    v277 = *(unsigned __int16 *)(v256 + 12);
    v278 = *(unsigned __int16 *)(v256 + 14);
    *(_WORD *)(v256 + 14) = v278 + 1;
LABEL_252:
    v279 = v277 + v278;
    v280 = *(_DWORD *)(*(_QWORD *)v7 + 4 * v279);
    *(_DWORD *)(*(_QWORD *)v7 + 4 * v279) = v280 + 1;
    v268 = &v145[6 * v280];
LABEL_253:
    v281 = *(_OWORD *)_X21;
    v282 = *((_OWORD *)_X21 + 2);
    v268[1] = *((_OWORD *)_X21 + 1);
    v268[2] = v282;
    *v268 = v281;
LABEL_254:
    _X21 += 6;
    --v245;
  }
  while (v245 != -1);
  if (!v244)
  {
    v234 = v321;
    goto LABEL_299;
  }
  v283 = 0;
  v234 = v321;
  while (2)
  {
    if (v243)
    {
      for (n = 0; n < v243; n += v8)
        *(_DWORD *)(v142 + 28 + n) = 0;
    }
    v285 = v322;
    v286 = v324;
    do
    {
      v287 = *(_QWORD *)v285;
      v285 += 8;
      *(_DWORD *)(v287 + 12) = 0;
      --v286;
    }
    while (v286);
    v288 = 0;
    v283 += 32;
    if (v244 <= 1)
      v289 = 1;
    else
      v289 = v244;
    v290 = 48 * v289;
    v244 = 0;
    while (2)
    {
      v291 = (__int128 *)&v6[v288 / 8];
      v292 = LOWORD(v6[v288 / 8 + 2]);
      v293 = v6[v288 / 8];
      if (v292 != 0xFFFF)
      {
        v294 = (int *)(v293 + 12);
        goto LABEL_270;
      }
      if ((v293 - v142) / v8 >= v2)
      {
        v296 = 0;
        v295 = 1;
      }
      else
      {
        v294 = (int *)(v293 + 28);
LABEL_270:
        v295 = 0;
        v296 = *v294;
      }
      v297 = WORD1(v6[v288 / 8 + 2]);
      v298 = v6[v288 / 8 + 1];
      if (v297 != 0xFFFF)
      {
        v299 = (int *)(v298 + 12);
        goto LABEL_275;
      }
      if ((v298 - v142) / v8 >= v2)
      {
        v301 = 0;
        v300 = 1;
      }
      else
      {
        v299 = (int *)(v298 + 28);
LABEL_275:
        v300 = 0;
        v301 = *v299;
      }
      if ((v301 | v296) == 0xFFFFFFFF)
      {
        v309 = v244++;
        v310 = v6;
      }
      else
      {
        v302 = __clz(__rbit32(~(v301 | v296)));
        if (v295)
          v303 = 0;
        else
          v303 = 1 << v302;
        v304 = v303 | v296;
        if (v300)
          v305 = 0;
        else
          v305 = 1 << v302;
        v306 = v305 | v301;
        if (v292 == 0xFFFF)
          v307 = 28;
        else
          v307 = 12;
        *(_DWORD *)(v293 + v307) = v304;
        if (v297 == 0xFFFF)
          v308 = 28;
        else
          v308 = 12;
        *(_DWORD *)(v6[v288 / 8 + 1] + v308) = v306;
        v309 = *(_DWORD *)(*(_QWORD *)v7 + 4 * (v302 + v283));
        *(_DWORD *)(*(_QWORD *)v7 + 4 * (v302 + v283)) = v309 + 1;
        v310 = v145;
      }
      v311 = &v310[6 * v309];
      v312 = *v291;
      v313 = v291[2];
      v311[1] = v291[1];
      v311[2] = v313;
      *v311 = v312;
      v288 += 48;
      if (v290 != v288)
        continue;
      break;
    }
    v243 = v323;
    if (v244)
      continue;
    break;
  }
LABEL_299:
  v81 = v234 - v139;
  if (v318 >= 0x401)
    physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v326, v322);
  v80 = v320;
LABEL_302:
  v80[16] = v81;
  v80[17] = 0;
  v80[18] = v139;
  v314 = *(unsigned int *)(v7 + 8);
  if (!(_DWORD)v314)
    return 0;
  result = 0;
  v316 = 0;
  while (1)
  {
    v317 = *(_DWORD *)(*(_QWORD *)v7 + 4 * result);
    if (v317 == v316)
      break;
    ++result;
    v316 = v317;
    if (v314 == result)
      return *(unsigned int *)(v7 + 8);
  }
  return result;
}

void physx::Dy::preprocessRows(float **a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, double a11, double a12, float32x4_t a13, double a14, double a15, float32x4_t a16, char a17, char a18, char a19)
{
  float32x4_t v19;
  float32x4_t v20;
  int32x2_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  _WORD *v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  float **v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x2_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  float32x4_t **v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  float32x4_t **v57;
  unint64_t v58;
  _OWORD *f32;
  unint64_t v60;
  float32x4_t *v61;
  unint64_t v62;
  int v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unint64_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x2_t v81;
  int v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t **v86;
  uint64_t v87;
  unint64_t v88;
  __int32 v89;
  __int32 v90;
  __int32 v91;
  __int32 v92;
  unsigned int v93;
  unsigned int v94;
  _QWORD v97[102];

  v97[100] = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    v23 = 0;
    v24 = a5;
    do
    {
      if (v23)
      {
        v25 = *(unsigned __int16 *)(a2 + 80 * v23 + 78);
        v26 = v23;
        while (1)
        {
          v27 = (v26 - 1);
          v28 = a1[v27];
          if (v25 >= *((unsigned __int16 *)v28 + 39))
            break;
          a1[v26--] = v28;
          if (!v27)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        LODWORD(v26) = 0;
      }
      a1[v26] = (float *)(a2 + 80 * v23++);
    }
    while (v23 != a5);
    v29 = (_WORD *)(a2 + 76);
    do
    {
      v30 = 0;
      if ((*v29 & 8) != 0)
        v30 = *((_DWORD *)v29 - 16);
      *((_DWORD *)v29 - 1) = v30;
      v29 += 40;
      --v24;
    }
    while (v24);
  }
  if (a5)
  {
    v31 = *(float32x4_t *)a6;
    v32 = *(float32x4_t *)(a6 + 12);
    a13.i64[0] = *(_QWORD *)(a6 + 24);
    a13.i32[2] = *(_DWORD *)(a6 + 32);
    v33 = *(float32x4_t *)a7;
    v34 = *(float32x4_t *)(a7 + 12);
    v35 = a5;
    a16.i64[0] = *(_QWORD *)(a7 + 24);
    v36 = a1;
    v37 = a3;
    v38 = a4;
    a16.i32[2] = *(_DWORD *)(a7 + 32);
    do
    {
      v39 = *v36++;
      v40 = vmulq_n_f32(v31, v39[4]);
      v40.i32[3] = 0;
      v41 = vmulq_n_f32(v32, v39[5]);
      v41.i32[3] = 0;
      v42 = vmulq_n_f32(a13, v39[6]);
      v42.i32[3] = 0;
      v43 = vaddq_f32(vaddq_f32(v40, v41), v42);
      v44 = vmulq_n_f32(v33, v39[12]);
      v44.i32[3] = 0;
      v19 = vmulq_n_f32(v34, v39[13]);
      v19.i32[3] = 0;
      v20 = vmulq_n_f32(a16, v39[14]);
      v20.i32[3] = 0;
      *v37++ = v43;
      *v38++ = vaddq_f32(vaddq_f32(v44, v19), v20);
      --v35;
    }
    while (v35);
  }
  if ((a17 & 1) == 0)
  {
    v19.f32[0] = *(float *)a8 * a9;
    v20.i32[0] = *(_DWORD *)(a8 + 12);
    *(float *)v21.i32 = *(float *)(a8 + 8) * a10;
    v97[0] = vdup_lane_s32(*(int32x2_t *)v19.f32, 0);
    v97[1] = vdup_lane_s32(v21, 0);
    v45 = *(int32x2_t *)(a8 + 4);
    v97[2] = vdup_lane_s32(v45, 0);
    v97[3] = vdup_lane_s32(*(int32x2_t *)v20.f32, 0);
    if (a5)
    {
      v46 = 0;
      v93 = a5;
      v47 = a5;
      v91 = v20.i32[0];
      v92 = v19.i32[0];
      v89 = v45.i32[0];
      v90 = v21.i32[0];
      v88 = a5;
      do
      {
        v48 = v46;
        v49 = v46;
        v50 = (float32x4_t **)&a1[v46];
        v51 = HIBYTE((*v50)[4].u16[7]);
        if (a5 <= v46 + 1)
          ++v46;
        else
          v46 = a5;
        v52 = v46 - 1;
        v53 = 1;
        while (v49 + v53 < v47)
        {
          v54 = v50[v53++][4].u8[15];
          if (v54 != v51)
          {
            v55 = v49 + v53;
            v52 = v55 - 2;
            v46 = v55 - 1;
            break;
          }
        }
        if (v51 == 1)
        {
          if (a18)
          {
            if (v48 <= v52)
            {
              v86 = v50;
              while ((*v86)[4].i8[14] != 2)
              {
                ++v48;
                ++v86;
                if (v52 + 1 == v48)
                {
                  v48 = v52 + 1;
                  break;
                }
              }
            }
            else
            {
              v48 = v49;
            }
            v94 = v46;
            if (v48 + 2 == v52)
            {
              v87 = v49;
              v49 = v87;
            }
            a5 = v93;
            v20.i32[0] = v91;
            v19.i32[0] = v92;
            v45.i32[0] = v89;
            v21.i32[0] = v90;
            v46 = v94;
            v47 = v88;
          }
        }
        else if (v51 == 4 || v51 == 8 && a19)
        {
          v56 = v48;
          if (v48 <= v52)
          {
            v57 = v50;
            v56 = v48;
            while (!(*v57)[4].i8[14])
            {
              ++v56;
              ++v57;
              if (v52 + 1 == v56)
              {
                v56 = v52 + 1;
                break;
              }
            }
          }
          if (v46 != v48)
          {
            v58 = 0;
            f32 = (_OWORD *)a3[v49].f32;
            v60 = v56 - v48;
            v61 = &a4[v49];
            do
            {
              if (v58 >= v60)
                v62 = v60;
              else
                v62 = v58;
              if (v60 >= v58)
                v63 = v58;
              else
                v63 = v60;
              v64 = v50[v58];
              v65 = *v64;
              v66 = v64[1];
              v67 = v64[2];
              v68 = v64[3];
              v67.i32[3] = 0;
              v68.i32[3] = 0;
              v69 = (float32x4_t)f32[v58];
              v70 = v61[v58];
              if (v63)
              {
                v71 = 0;
                v72 = 16 * v62;
                do
                {
                  v73 = vaddq_f32(vmlaq_f32(vmulq_f32(v65, *(float32x4_t *)&v97[v71 / 8 + 40]), *(float32x4_t *)&v97[v71 / 8 + 88], v67), vmlaq_f32(vmulq_f32(v69, *(float32x4_t *)&v97[v71 / 8 + 28]), *(float32x4_t *)&v97[v71 / 8 + 76], v70));
                  v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
                  *(float32x2_t *)v73.f32 = vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32);
                  v65 = vmlsq_lane_f32(v65, *(float32x4_t *)&v97[v71 / 8 + 16], *(float32x2_t *)v73.f32, 0);
                  v66 = vmlsq_lane_f32(v66, *(float32x4_t *)&v97[v71 / 8 + 4], *(float32x2_t *)v73.f32, 0);
                  v67 = vmlsq_lane_f32(v67, *(float32x4_t *)&v97[v71 / 8 + 64], *(float32x2_t *)v73.f32, 0);
                  v67.i64[1] = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u32[0];
                  v68 = vmlsq_lane_f32(v68, *(float32x4_t *)&v97[v71 / 8 + 52], *(float32x2_t *)v73.f32, 0);
                  v68.i64[1] = vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL).u32[0];
                  v69 = vmlsq_lane_f32(v69, (float32x4_t)f32[v71 / 0x10], *(float32x2_t *)v73.f32, 0);
                  v70 = vmlsq_lane_f32(v70, v61[v71 / 0x10], *(float32x2_t *)v73.f32, 0);
                  v71 += 16;
                }
                while (v72 != v71);
              }
              *v64 = v65;
              v50[v58][1] = v66;
              v74 = v50[v58];
              v74[2].i64[0] = v67.i64[0];
              v74[2].i32[2] = v67.i32[2];
              v74[3].i32[2] = v68.i32[2];
              v74[3].i64[0] = v68.i64[0];
              f32[v58] = v69;
              v61[v58] = v70;
              if (v58 < v60)
              {
                *(float32x4_t *)&v97[2 * v58 + 16] = v65;
                *(float32x4_t *)&v97[2 * v58 + 4] = v66;
                *(float32x4_t *)&v97[2 * v58 + 64] = v67;
                *(float32x4_t *)&v97[2 * v58 + 52] = v68;
                v65.i32[3] = 0;
                v75 = vmulq_n_f32(v65, v19.f32[0]);
                v75.i32[3] = 0;
                v76 = vmulq_n_f32(v67, *(float *)v21.i32);
                v76.i32[3] = 0;
                v77 = vmulq_n_f32(v69, *(float *)v45.i32);
                v78 = vmulq_n_f32(v70, v20.f32[0]);
                v79 = vaddq_f32(vmlaq_f32(vmulq_f32(v70, v78), v69, v77), vmlaq_f32(vmulq_f32(v67, v76), v75, v65));
                v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
                v80 = vpadd_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32);
                v81 = vrecpe_f32(v80);
                v82 = 4;
                do
                {
                  v81 = vmul_f32(v81, vrecps_f32(v80, v81));
                  --v82;
                }
                while (v82);
                LODWORD(v83) = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v80), 0), (int8x8_t)v81).u32[0];
                v75.i32[3] = 0;
                *(float32x4_t *)&v97[2 * v58 + 40] = vmulq_n_f32(v75, v83);
                v77.i32[3] = 0;
                *(float32x4_t *)&v97[2 * v58 + 28] = vmulq_n_f32(v77, v83);
                v84 = vmulq_n_f32(v76, v83);
                v84.i32[3] = 0;
                *(float32x4_t *)&v97[2 * v58 + 88] = v84;
                v85 = vmulq_n_f32(v78, v83);
                v85.i32[3] = 0;
                *(float32x4_t *)&v97[2 * v58 + 76] = v85;
              }
              ++v58;
            }
            while (v58 != v46 - v48);
          }
        }
      }
      while (v46 < a5);
    }
  }
}

float32x4_t physx::Dy::`anonymous namespace'::diagonalize(float32x4_t **a1, float32x4_t *a2, float32x4_t *a3, _QWORD *a4)
{
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float v42;
  float32x2_t v43;
  float v44;
  float v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  _DWORD *v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  uint64_t *v124;
  float32x4_t *v125;
  float32x4_t *v126;
  float32x4_t v127;
  __int32 *v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t *v142;
  float32x4_t *v143;
  __int32 *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t result;
  float v164;
  __int128 v165;
  _DWORD v166[9];

  v4 = *a1;
  v5 = a1[1];
  v6.i64[0] = (*a1)->i64[0];
  v6.i64[1] = (*a1)->u32[2];
  v7 = a4[1];
  v8 = vmulq_n_f32(v6, COERCE_FLOAT(*a4));
  v8.i32[3] = 0;
  v9.i64[0] = (*a1)[2].i64[0];
  v9.i64[1] = (*a1)[2].u32[2];
  v10 = vmulq_n_f32(v9, *(float *)&v7);
  v10.i32[3] = 0;
  v12 = *a2;
  v11 = a2[1];
  v12.i32[3] = 0;
  v14 = a4[2];
  v13 = a4[3];
  v15 = vmlaq_n_f32(vmulq_f32(v6, v8), vmulq_f32(v12, v12), *(float *)&v14);
  v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
  v16 = *a3;
  v17 = a3[1];
  v16.i32[3] = 0;
  v18 = vmlaq_n_f32(vmulq_f32(v9, v10), vmlaq_f32(v15, v16, v16), *(float *)&v13);
  *(float32x2_t *)v15.f32 = vpadd_f32(*(float32x2_t *)v18.f32, (float32x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u32[0]);
  LODWORD(v164) = vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32).u32[0];
  v19.i64[0] = v5->i64[0];
  v19.i64[1] = v5->u32[2];
  v18.i64[0] = v5[2].i64[0];
  v18.i64[1] = v5[2].u32[2];
  v11.i32[3] = 0;
  v20 = vmlaq_n_f32(vmulq_f32(v8, v19), vmulq_f32(v12, v11), *(float *)&v14);
  v20.i64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u32[0];
  v17.i32[3] = 0;
  v21 = vmlaq_n_f32(vmulq_f32(v10, v18), vmlaq_f32(v20, v17, v16), *(float *)&v13);
  v22 = vpadd_f32(*(float32x2_t *)v21.f32, (float32x2_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0]);
  v23 = a1[2];
  v21.i64[0] = v23->i64[0];
  v21.i64[1] = v23->u32[2];
  v24 = vmulq_f32(v8, v21);
  v8.i64[0] = v23[2].i64[0];
  v8.i64[1] = v23[2].u32[2];
  v25 = a2[2];
  v26 = a3[2];
  v25.i32[3] = 0;
  v27 = vmlaq_n_f32(v24, vmulq_f32(v12, v25), *(float *)&v14);
  v27.i64[1] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u32[0];
  v26.i32[3] = 0;
  v28 = (int8x16_t)vmlaq_n_f32(vmulq_f32(v10, v8), vmlaq_f32(v27, v26, v16), *(float *)&v13);
  LODWORD(v29) = vpadd_f32(v22, v22).u32[0];
  *(float32x2_t *)v16.f32 = vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vextq_s8(v28, v28, 8uLL).u32[0]);
  LODWORD(v30) = vpadd_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32).u32[0];
  v31 = vmulq_n_f32(v19, COERCE_FLOAT(*a4));
  v31.i32[3] = 0;
  v32 = vmulq_n_f32(v18, *(float *)&v7);
  v32.i32[3] = 0;
  v33 = vmlaq_n_f32(vmulq_f32(v19, v31), vmulq_f32(v11, v11), *(float *)&v14);
  v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
  v34 = (int8x16_t)vmlaq_n_f32(vmulq_f32(v18, v32), vmlaq_f32(v33, v17, v17), *(float *)&v13);
  *(float32x2_t *)v34.i8 = vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vextq_s8(v34, v34, 8uLL).u32[0]);
  LODWORD(v35) = vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8).u32[0];
  v36 = vmlaq_n_f32(vmulq_f32(v31, v21), vmulq_f32(v11, v25), *(float *)&v14);
  v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
  v37 = (int8x16_t)vmlaq_n_f32(vmulq_f32(v32, v8), vmlaq_f32(v36, v26, v17), *(float *)&v13);
  v38 = vmulq_n_f32(v21, COERCE_FLOAT(*a4));
  v38.i32[3] = 0;
  *(float32x2_t *)v17.f32 = vpadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vextq_s8(v37, v37, 8uLL).u32[0]);
  v39 = vmulq_n_f32(v8, *(float *)&v7);
  v39.i32[3] = 0;
  v40 = vmlaq_n_f32(vmulq_f32(v21, v38), vmulq_f32(v25, v25), *(float *)&v14);
  v40.i64[1] = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u32[0];
  v41 = (int8x16_t)vmlaq_n_f32(vmulq_f32(v8, v39), vmlaq_f32(v40, v26, v26), *(float *)&v13);
  LODWORD(v42) = vpadd_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32).u32[0];
  v43 = vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vextq_s8(v41, v41, 8uLL).u32[0]);
  LODWORD(v44) = vpadd_f32(v43, v43).u32[0];
  v45 = 0.0;
  v46 = 5;
  v47 = 1.0;
  v48 = 0.0;
  v49 = 0.0;
  do
  {
    v50 = v48 * (float)(v48 + v48);
    v51 = v45 * (float)(v45 + v45);
    v52 = v48 * (float)(v49 + v49);
    v53 = v45 * (float)(v49 + v49);
    v54 = v47 * (float)(v49 + v49);
    v55 = v45 * (float)(v48 + v48);
    v56 = v47 * (float)(v48 + v48);
    v57 = v47 * (float)(v45 + v45);
    v58 = (float)(1.0 - v50) - v51;
    v59 = v57 + v52;
    v60 = v53 - v56;
    v61 = v52 - v57;
    v62 = 1.0 - (float)(v49 * (float)(v49 + v49));
    v63 = v62 - v51;
    v64 = v55 + v54;
    v65 = v56 + v53;
    v66 = v55 - v54;
    v67 = v62 - v50;
    v68 = (float)(v30 * v60) + (float)((float)(v164 * v58) + (float)(v29 * v59));
    v69 = (float)(v30 * v64) + (float)((float)(v164 * v61) + (float)(v29 * v63));
    v70 = (float)((float)(v164 * v65) + (float)(v29 * v66)) + (float)(v30 * v67);
    v71 = (float)(v42 * v60) + (float)((float)(v29 * v58) + (float)(v35 * v59));
    v72 = (float)(v42 * v64) + (float)((float)(v29 * v61) + (float)(v35 * v63));
    v73 = (float)((float)(v29 * v65) + (float)(v35 * v66)) + (float)(v42 * v67);
    v74 = (float)(v44 * v60) + (float)((float)(v30 * v58) + (float)(v42 * v59));
    v75 = (float)(v44 * v64) + (float)((float)(v30 * v61) + (float)(v42 * v63));
    v76 = (float)((float)(v30 * v65) + (float)(v42 * v66)) + (float)(v44 * v67);
    v77 = (float)(v60 * v74) + (float)((float)(v58 * v68) + (float)(v59 * v71));
    v78 = (float)(v60 * v75) + (float)((float)(v58 * v69) + (float)(v59 * v72));
    v79 = (float)(v60 * v76) + (float)((float)(v58 * v70) + (float)(v59 * v73));
    v80 = fabsf((float)(v64 * v76) + (float)((float)(v61 * v70) + (float)(v63 * v73)));
    v81 = fabsf(v79);
    v82 = fabsf(v78);
    if (v81 > v82)
      LODWORD(v83) = 1;
    else
      LODWORD(v83) = 2;
    v84 = v80 <= v82 || v80 <= v81;
    *(float *)v166 = v77;
    *(float *)&v166[1] = v78;
    *(float *)&v166[2] = v79;
    *(float *)&v166[3] = (float)(v64 * v74) + (float)((float)(v61 * v68) + (float)(v63 * v71));
    *(float *)&v166[4] = (float)(v64 * v75) + (float)((float)(v61 * v69) + (float)(v63 * v72));
    *(float *)&v166[5] = (float)(v64 * v76) + (float)((float)(v61 * v70) + (float)(v63 * v73));
    *(float *)&v166[6] = (float)(v67 * v74) + (float)((float)(v65 * v68) + (float)(v66 * v71));
    *(float *)&v166[7] = (float)(v67 * v75) + (float)((float)(v65 * v69) + (float)(v66 * v72));
    *(float *)&v166[8] = (float)(v67 * v76) + (float)((float)(v65 * v70) + (float)(v66 * v73));
    if (v84)
      v83 = v83;
    else
      v83 = 0;
    v86 = &v166[3 * (((_BYTE)v83 + (v83 >> 1) + 1) & 3)];
    v87 = *(float *)&v86[((_BYTE)v83
                        + (v83 >> 1)
                        + 1
                        + (((v83 + (v83 >> 1) + 1) & 3) >> 1)
                        + 1) & 3];
    if (v87 == 0.0)
      break;
    v88 = *(float *)&v86[((_BYTE)v83 + (v83 >> 1) + 1) & 3];
    v85 = ((_BYTE)v83
         + (v83 >> 1)
         + 1
         + (((v83 + (v83 >> 1) + 1) & 3) >> 1)
         + 1) & 3;
    v89 = *(float *)&v166[3 * v85 + v85];
    v90 = v87 + v87;
    if (vabds_f32(v88, v89) > (float)(fabsf(v90) * 2000000.0))
      break;
    v91 = (float)(v88 - v89) / v90;
    v92 = fabsf(v91);
    if (v92 <= 1000.0)
    {
      v93 = sqrtf((float)(v91 * v91) + 1.0);
      v94 = 1.0 / sqrtf((float)((float)(1.0 / (float)(v92 + v93)) * (float)(1.0 / (float)(v92 + v93))) + 1.0);
      v95 = sqrtf((float)(1.0 - v94) * 0.5);
      if (v91 < 0.0)
        v95 = -v95;
      *(_QWORD *)&v165 = 0;
      DWORD2(v165) = 0;
      HIDWORD(v165) = sqrtf((float)(v94 + 1.0) * 0.5);
      *(float *)&v166[v83 - 1] = v95;
    }
    else
    {
      v165 = xmmword_2260E5D70;
      *(float *)((unint64_t)&v165 | (4 * v83)) = 1.0 / (float)(v91 * 4.0);
    }
    v96 = (float)((float)((float)(v49 * *((float *)&v165 + 3)) + (float)(v47 * *(float *)&v165))
                + (float)(v48 * *((float *)&v165 + 2)))
        - (float)(*((float *)&v165 + 1) * v45);
    v97 = (float)((float)((float)(v48 * *((float *)&v165 + 3)) + (float)(v47 * *((float *)&v165 + 1)))
                + (float)(v45 * *(float *)&v165))
        - (float)(*((float *)&v165 + 2) * v49);
    v98 = (float)((float)((float)(v45 * *((float *)&v165 + 3)) + (float)(v47 * *((float *)&v165 + 2)))
                + (float)(v49 * *((float *)&v165 + 1)))
        - (float)(*(float *)&v165 * v48);
    v99 = (float)((float)((float)(v47 * *((float *)&v165 + 3)) - (float)(v49 * *(float *)&v165))
                - (float)(v48 * *((float *)&v165 + 1)))
        - (float)(v45 * *((float *)&v165 + 2));
    v100 = sqrtf((float)((float)((float)(v97 * v97) + (float)(v96 * v96)) + (float)(v98 * v98)) + (float)(v99 * v99));
    v49 = v96 / v100;
    v48 = v97 / v100;
    v45 = v98 / v100;
    v47 = v99 / v100;
    --v46;
  }
  while (v46);
  v101 = (float)-v49 - v49;
  v102 = (float)-v48 - v48;
  v103 = (float)-v45 - v45;
  v104 = -(float)(v48 * v102);
  v105 = -(float)(v45 * v103);
  v106 = -(float)(v48 * v101);
  v107 = -(float)(v45 * v101);
  v108 = -(float)(v47 * v101);
  v109 = -(float)(v45 * v102);
  v110 = -(float)(v47 * v102);
  v111 = (float)(1.0 - v104) - v105;
  v112 = v106 - (float)(v47 * v103);
  v113 = v107 - v110;
  v114 = v106 - (float)-(float)(v47 * v103);
  v115 = (float)(v49 * v101) + 1.0;
  v116 = v115 - v105;
  v117 = v109 - (float)(v47 * v101);
  v118 = v110 + v107;
  v119 = v109 - v108;
  v120 = v115 - v104;
  v121 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v23, v107 - v110), *v5, v112), *v4, v111);
  v122 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v23, v117), *v5, v115 - v105), *v4, v114);
  v123 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v23, v120), *v5, v119), *v4, v110 + v107);
  *v4 = v121;
  *v5 = v122;
  *v23 = v123;
  v124 = (uint64_t *)*a1;
  v125 = a1[1];
  v126 = a1[2];
  v127.i64[0] = (*a1)[2].i64[0];
  v128 = &(*a1)[2].i32[2];
  v127.i64[1] = *v128;
  v129.i64[0] = v125[2].i64[0];
  v129.i64[1] = v125[2].u32[2];
  v123.i64[0] = v126[2].i64[0];
  v123.i64[1] = v126[2].u32[2];
  v130 = vmulq_n_f32(v123, v113);
  v130.i32[3] = 0;
  v131 = vmlaq_n_f32(v130, v129, v112);
  v131.i64[1] = vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL).u32[0];
  v132 = vmlaq_n_f32(v131, v127, v111);
  v133 = vmulq_n_f32(v123, v117);
  v133.i32[3] = 0;
  v134 = vmlaq_n_f32(v133, v129, v116);
  v134.i64[1] = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u32[0];
  v135 = vmlaq_n_f32(v134, v127, v114);
  v136 = vmulq_n_f32(v123, v120);
  v136.i32[3] = 0;
  v137 = vmlaq_n_f32(v136, v129, v119);
  v137.i64[1] = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u32[0];
  v138 = vmlaq_n_f32(v137, v127, v118);
  v124[4] = v132.i64[0];
  *v128 = v132.i32[2];
  v125[2].i64[0] = v135.i64[0];
  v125[2].i32[2] = v135.i32[2];
  v126[2].i64[0] = v138.i64[0];
  v126[2].i32[2] = v138.i32[2];
  v139 = *((float32x4_t *)v124 + 1);
  v140 = v125[1];
  v141 = v126[1];
  *((float32x4_t *)v124 + 1) = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v141, v113), v140, v112), v139, v111);
  v125[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v141, v117), v140, v116), v139, v114);
  v126[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v141, v120), v140, v119), v139, v118);
  v142 = a1[1];
  v143 = a1[2];
  v139.i64[0] = (*a1)[3].i64[0];
  v144 = &(*a1)[3].i32[2];
  v139.i64[1] = *v144;
  v140.i64[0] = v142[3].i64[0];
  v140.i64[1] = v142[3].u32[2];
  v141.i64[0] = v143[3].i64[0];
  v141.i64[1] = v143[3].u32[2];
  v145 = vmulq_n_f32(v141, v113);
  v145.i32[3] = 0;
  v146 = vmlaq_n_f32(v145, v140, v112);
  v146.i64[1] = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u32[0];
  v147 = vmlaq_n_f32(v146, v139, v111);
  v148 = vmulq_n_f32(v141, v117);
  v148.i32[3] = 0;
  v149 = vmlaq_n_f32(v148, v140, v116);
  v149.i64[1] = vextq_s8((int8x16_t)v149, (int8x16_t)v149, 8uLL).u32[0];
  v150 = vmlaq_n_f32(v149, v139, v114);
  v151 = vmulq_n_f32(v141, v120);
  v151.i32[3] = 0;
  v152 = vmlaq_n_f32(v151, v140, v119);
  v152.i64[1] = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u32[0];
  v153 = vmlaq_n_f32(v152, v139, v118);
  (*a1)[3].i64[0] = v147.i64[0];
  *v144 = v147.i32[2];
  v142[3].i64[0] = v150.i64[0];
  v142[3].i32[2] = v150.i32[2];
  v143[3].i64[0] = v153.i64[0];
  v143[3].i32[2] = v153.i32[2];
  v154 = a2[1];
  v155 = a2[2];
  v156 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v155, v113), v154, v112), *a2, v111);
  v157 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v155, v117), v154, v116), *a2, v114);
  v158 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v155, v120), v154, v119), *a2, v118);
  *a2 = v156;
  a2[1] = v157;
  a2[2] = v158;
  v159 = a3[1];
  v160 = a3[2];
  v161 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v160, v113), v159, v112), *a3, v111);
  v162 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v160, v117), v159, v116), *a3, v114);
  result = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v160, v120), v159, v119), *a3, v118);
  *a3 = v161;
  a3[1] = v162;
  a3[2] = result;
  return result;
}

uint64_t physx::Dy::ConstraintHelper::setupSolverConstraint(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD), uint64_t a3, float a4, float a5)
{
  int v5;
  uint64_t v6;
  unsigned int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t result;
  size_t v14;
  float32x4_t v15;
  double v16;
  double v17;
  float32x4_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  double v25;
  BOOL v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  float v34;
  float v35;
  uint64_t v36;
  float *v38;
  float *v39;
  uint64_t v44;
  float v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 v53;
  float v54;
  float v55;
  float ImpulseResponse;
  float32_t v57;
  float32_t v58;
  int v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float32_t v70;
  float32_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float *v78;
  float *v79;
  float v80;
  float v81;
  __int16 v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float32x2_t *v94;
  uint64_t v95;
  float v96;
  char v97;
  uint64_t v98;
  float32x2_t v101;
  float v102;
  float32x2_t v103;
  float v104;
  float32x2_t v105;
  float v106;
  float32x2_t v107;
  float v108;
  float32x2_t v109;
  __int32 v110;
  float32x2_t v111;
  __int32 v112;
  uint64_t v113[2];
  unsigned __int16 v114;
  uint64_t v115[2];
  unsigned __int16 v116;
  _OWORD v117[6];
  float32x4_t v118;
  float32x4_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    if (*(__int16 *)(v6 + 16) == -1 && *(__int16 *)(v6 + 18) == -1)
    {
      v10 = 0;
      v9 = 96;
    }
    else
    {
      v9 = 160;
      v10 = 1;
    }
    v11 = v9 * v5;
    v12 = (void *)(**a2)(a2, v9 * v5 + 64);
    if ((unint64_t)v12 + 1 < 2)
      return 0;
    v14 = (v11 + 48);
    *(_QWORD *)(v6 + 32) = v12;
    *(_WORD *)(v6 + 30) = v14 >> 4;
    *(_QWORD *)(v6 + 40) = *(_QWORD *)(a1 + 152);
    *(_WORD *)(v6 + 28) = 8;
    bzero(v12, v14);
    v19 = *(_QWORD *)(v6 + 32);
    v20 = *(_DWORD *)(a1 + 136);
    if (v10)
      v21 = 4;
    else
      v21 = 2;
    *(_BYTE *)v19 = v21;
    *(_BYTE *)(v19 + 1) = v20;
    *(_BYTE *)(v19 + 2) = 0;
    v22 = *(_QWORD *)a1;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)a1;
    v23 = *(float32x2_t *)(a1 + 8);
    *(float32x2_t *)(v19 + 40) = vneg_f32(v23);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 + 164);
    *(_DWORD *)(v19 + 24) = *(_DWORD *)(a1 + 172);
    v24 = *(float32x2_t *)(a1 + 140);
    v25 = COERCE_DOUBLE(vmul_n_f32(v24, a4));
    *(double *)(v19 + 4) = v25;
    LODWORD(v25) = 2139095039;
    v26 = v24.f32[0] != 3.4028e38;
    if (*(float *)(a1 + 144) != 3.4028e38)
      v26 = 1;
    *(_BYTE *)(v19 + 3) = v26;
    v27 = *(_QWORD *)(a1 + 40);
    v28 = *(float *)(v27 + 12);
    *(float *)(v19 + 12) = v28 * *(float *)&v22;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(float *)(v29 + 12);
    *(float *)(v19 + 28) = v30 * v23.f32[0];
    memset(v117, 0, sizeof(v117));
    v31 = v27 + 32;
    if (*(_BYTE *)(a1 + 160))
      v32 = 1;
    else
      v32 = v10;
    physx::Dy::preprocessRows((float **)v117, *(_QWORD *)(a1 + 128), &v119, &v118, v20, v31, v29 + 32, a1, v28, v30, 0.0, v25, v15, v16, v17, v18, v32, *(_BYTE *)(a1 + 161), 1);
    if (*(_DWORD *)(a1 + 136))
    {
      v98 = v6;
      v33 = 0;
      v34 = a4;
      v35 = fminf(a4, 1.0);
      v96 = v34 * v34;
      v36 = v9;
      _X24 = (float32x2_t *)(v19 + 88);
      v38 = &v118.f32[2];
      v39 = &v119.f32[2];
      v97 = v10;
      v95 = v36;
      while (1)
      {
        __asm { PRFM            #0, [X24,#0x58] }
        v44 = *((_QWORD *)v117 + v33);
        _ZF = !*(_BYTE *)(a1 + 162) || (*(_WORD *)(v44 + 76) & 0x20) == 0;
        v46 = _ZF ? 1.0 : v35;
        v47 = *(float *)(a1 + 148);
        if ((v10 & 1) != 0)
        {
          v48 = *(float *)(v44 + 44);
          v49 = *(float *)(v44 + 60);
          _X24[-5] = *(float32x2_t *)v44;
          _X24[-4].i32[0] = *(_DWORD *)(v44 + 8);
          _X24[-3] = *(float32x2_t *)(v44 + 32);
          _X24[-2].i32[0] = *(_DWORD *)(v44 + 40);
          _X24[-1] = *(float32x2_t *)(v44 + 16);
          _X24->i32[0] = *(_DWORD *)(v44 + 24);
          _X24[1] = *(float32x2_t *)(v44 + 48);
          _X24[2].i32[0] = *(_DWORD *)(v44 + 56);
          _X24[5].f32[0] = v46 * v48;
          _X24[5].f32[1] = v46 * v49;
          _X24[6] = 0;
          v50 = *(_QWORD *)(a1 + 32);
          v51 = *(_QWORD *)(a1 + 40);
          v52 = *(_QWORD *)(a1 + 48);
          v115[0] = *(_QWORD *)(a1 + 24);
          v115[1] = v51;
          v116 = *(_WORD *)(v98 + 16);
          v53 = *(_WORD *)(v98 + 18);
          v113[0] = v50;
          v113[1] = v52;
          v114 = v53;
          physx::Dy::createImpulseResponseVector(_X24 - 5, (float *)&_X24[-1], (uint64_t)v115, &v109);
          v54 = -_X24[-2].f32[0];
          v103 = vneg_f32(_X24[-3]);
          v104 = v54;
          v55 = -_X24[2].f32[0];
          v101 = vneg_f32(_X24[1]);
          v102 = v55;
          physx::Dy::createImpulseResponseVector(&v103, (float *)&v101, (uint64_t)v113, &v105);
          ImpulseResponse = physx::Dy::getImpulseResponse(v115, &v109, _X24 + 7, v113, &v105, _X24 + 11, a3, *(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
          _X24[3] = *(float32x2_t *)(v44 + 16);
          _X24[4].i32[0] = *(_DWORD *)(v44 + 24);
          _X24[-5] = v109;
          _X24[-4].i32[0] = v110;
          _X24[-1] = v111;
          _X24->i32[0] = v112;
          v57 = -v106;
          _X24[-3] = vneg_f32(v105);
          _X24[-2].f32[0] = v57;
          v58 = -v108;
          _X24[1] = vneg_f32(v107);
          _X24[2].f32[0] = v58;
          v59 = *(unsigned __int16 *)(v44 + 76);
          if ((v59 & 4) != 0 || (~v59 & 3) == 0 || v116 == 0xFFFF || (v60 = 0.0, v61 = 0.0, v114 == 0xFFFF))
          {
            v61 = physx::Dy::SolverExtBody::projectVelocity((uint64_t)v115, (float *)v44, (float *)(v44 + 16));
            v62 = physx::Dy::SolverExtBody::projectVelocity((uint64_t)v113, (float *)(v44 + 32), (float *)(v44 + 48));
            v60 = v61 - v62;
            if ((__int16)v116 != -1)
            {
              v63 = -v62;
              if ((__int16)v114 == -1)
                v61 = v63;
              else
                v61 = 0.0;
            }
          }
          v47 = fmaxf(v47, 0.00001);
          v34 = a4;
          LOBYTE(v10) = v97;
          v36 = v95;
        }
        else
        {
          v64 = *(v39 - 2);
          v65 = *(v39 - 1);
          v66 = *v39;
          v67 = *(v38 - 2);
          v68 = *(v38 - 1);
          v69 = *v38;
          v70 = v46 * *(float *)(v44 + 44);
          v71 = v46 * *(float *)(v44 + 60);
          v72 = *(float *)v44;
          _X24[-5].i32[0] = *(_DWORD *)v44;
          v73 = *(float *)(v44 + 4);
          _X24[-5].f32[1] = v73;
          v74 = *(float *)(v44 + 8);
          _X24[-4].f32[0] = v74;
          v75 = *(float *)(v44 + 32);
          _X24[-3].f32[0] = v75;
          v76 = *(float *)(v44 + 36);
          _X24[-3].f32[1] = v76;
          v77 = *(float *)(v44 + 40);
          _X24[-2].f32[0] = v77;
          _X24[-1].f32[0] = v64;
          _X24[-1].f32[1] = v65;
          _X24->f32[0] = v66;
          _X24[1].f32[0] = v67;
          _X24[1].f32[1] = v68;
          _X24[2].f32[0] = v69;
          _X24[5].f32[0] = v70;
          _X24[5].f32[1] = v71;
          _X24[6] = 0;
          _X24[3] = *(float32x2_t *)(v44 + 16);
          _X24[4].i32[0] = *(_DWORD *)(v44 + 24);
          v78 = *(float **)(a1 + 40);
          v79 = *(float **)(a1 + 48);
          ImpulseResponse = (float)((float)((float)((float)((float)(v65 * v65) + (float)(v64 * v64)) + (float)(v66 * v66))
                                          * *(float *)(a1 + 4))
                                  + (float)((float)((float)((float)((float)(v73 * v73) + (float)(v72 * v72))
                                                          + (float)(v74 * v74))
                                                  * v78[3])
                                          * *(float *)a1))
                          + (float)((float)((float)((float)((float)(v68 * v68) + (float)(v67 * v67)) + (float)(v69 * v69))
                                          * *(float *)(a1 + 12))
                                  + (float)((float)((float)((float)((float)(v76 * v76) + (float)(v75 * v75))
                                                          + (float)(v77 * v77))
                                                  * v79[3])
                                          * *(float *)(a1 + 8)));
          v60 = (float)((float)((float)((float)(v78[1] * *(float *)(v44 + 4)) + (float)(*v78 * *(float *)v44))
                              + (float)(v78[2] * *(float *)(v44 + 8)))
                      + (float)((float)((float)(v78[5] * *(float *)(v44 + 20)) + (float)(v78[4] * *(float *)(v44 + 16)))
                              + (float)(v78[6] * *(float *)(v44 + 24))))
              - (float)((float)((float)((float)(v79[1] * *(float *)(v44 + 36)) + (float)(*v79 * *(float *)(v44 + 32)))
                              + (float)(v79[2] * *(float *)(v44 + 40)))
                      + (float)((float)((float)(v79[5] * *(float *)(v44 + 52)) + (float)(v79[4] * *(float *)(v44 + 48)))
                              + (float)(v79[6] * *(float *)(v44 + 56))));
          v61 = v60;
        }
        v80 = ImpulseResponse <= v47 ? 0.0 : 1.0 / ImpulseResponse;
        v81 = *(float *)(v44 + 12);
        v82 = *(_WORD *)(v44 + 76);
        if ((v82 & 1) != 0)
          break;
        v83 = -v80;
        _X24->f32[1] = -v80;
        _X24[2].i32[1] = 1065353216;
        if ((v82 & 4) != 0)
        {
          v84 = -v60;
          if (*(float *)(v44 + 68) < v84)
          {
            v85 = (float)(v80 * *(float *)(v44 + 64)) * v84;
LABEL_49:
            v92 = v85;
            goto LABEL_50;
          }
        }
        v92 = v80 * (float)(*(float *)(v44 + 28) - (float)(v81 * a5));
        _X24[-4].f32[1] = v92;
        v85 = v80 * (float)(*(float *)(v44 + 28) - (float)(*(float *)(v44 + 72) * a5));
LABEL_50:
        v93 = v61 * v83;
        _X24[-4].f32[1] = v92 + v93;
        _X24[-2].f32[1] = v85 + v93;
        if ((v82 & 0x10) != 0)
          _X24[6].i32[1] |= 2u;
        ++v33;
        _X24 = (float32x2_t *)((char *)_X24 + v36);
        v38 += 4;
        v39 += 4;
        if (v33 >= *(unsigned int *)(a1 + 136))
        {
          v94 = _X24 - 5;
          goto LABEL_56;
        }
      }
      v86 = *(float *)(v44 + 64);
      v87 = *(float *)(v44 + 68);
      v88 = (float)(v87 * v34) + (float)(v96 * v86);
      if ((v82 & 2) != 0)
      {
        v91 = 1.0 / (float)(v88 + 1.0);
        v89 = v80 * v91;
        v90 = -(float)(v91 * v80);
      }
      else
      {
        v89 = 0.0;
        if (ImpulseResponse != 0.0)
          v89 = 1.0 / (float)((float)(v88 * ImpulseResponse) + 1.0);
        v90 = -v89;
        v91 = v89;
      }
      v85 = (float)((float)((float)(v87 * *(float *)(v44 + 28)) - (float)(v86 * v81)) * v34) * v89;
      v83 = v88 * v90;
      _X24->f32[1] = v88 * v90;
      _X24[2].f32[1] = 1.0 - v91;
      goto LABEL_49;
    }
    v94 = (float32x2_t *)(v19 + 48);
LABEL_56:
    *v94 = 0;
    return *(unsigned int *)(a1 + 136);
  }
  else
  {
    result = 0;
    *(_QWORD *)(v6 + 36) = 0;
    *(_QWORD *)(v6 + 28) = 0;
    *(_DWORD *)(v6 + 44) = 0;
  }
  return result;
}

uint64_t physx::Dy::setupSolverConstraint4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t (***a4)(_QWORD, _QWORD), float a5, float a6)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *, _BYTE *);
  int v19;
  _BYTE *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  double v26;
  double v27;
  float32x4_t v28;
  double v29;
  double v30;
  float32x4_t v31;
  uint64_t v32;
  __int128 v36;
  _BYTE v38[12];
  _BYTE v39[3852];
  uint64_t v40;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v40 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v36 = _Q0;
  while (1)
  {
    v18 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _BYTE *, _BYTE *))(a1 + 32 * v9 + 8);
    if (!v18)
      break;
    v19 = v10;
    v20 = &v39[80 * v10 + 12];
    bzero(&v20[80 * v12], 0x3C0uLL);
    if (v12 <= 0xB)
    {
      v21 = v12 + 1;
      v22 = &v39[80 * v12 + 72 + 80 * v19];
      do
      {
        *(v22 - 4) = -8388609;
        *v22 = 2139095039;
        v22 += 20;
      }
      while ((_DWORD)v21++ != 12);
    }
    v23 = a2 + 176 * v9;
    *(_OWORD *)v23 = v36;
    *(_DWORD *)(v23 + 164) = 0;
    *(_DWORD *)(v23 + 168) = 0;
    *(_DWORD *)(v23 + 172) = 0;
    v24 = v18(v20, v23 + 164, 12, v23, *(_QWORD *)(a1 + 32 * v9 + 16), v23 + 56, v23 + 84, *(unsigned __int8 *)(v23 + 163), v39, v38);
    if (!v24)
      break;
    if (v24 > v11)
      v11 = v24;
    v12 = 12 - v24;
    v32 = a2 + 176 * v9;
    *(_QWORD *)(v32 + 128) = v20;
    *(_DWORD *)(v32 + 136) = v24;
    v10 = v24 + v19;
    if (++v9 == 4)
    {
      *(float *)&v25 = a5;
      return physx::Dy::setupSolverConstraint4(a2, a3, a4, v11, v25, a6, v26, v27, v28, v29, v30, v31);
    }
  }
  return 1;
}

uint64_t physx::Dy::setupSolverConstraint4(uint64_t a1, unsigned int *a2, uint64_t (***a3)(_QWORD, _QWORD), int a4, double a5, float a6, double a7, double a8, float32x4_t a9, double a10, double a11, float32x4_t a12)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int32x4_t *v23;
  int32x4_t *v24;
  int32x4_t *v25;
  float32x4_t v26;
  int32x4_t *v27;
  int32x4_t *v28;
  int32x4_t *v29;
  int32x4_t *v30;
  float32x4_t v31;
  int32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x2_t v46;
  int32x2_t v47;
  int32x2_t v48;
  int32x2_t v49;
  float v50;
  float v51;
  float *v52;
  float v53;
  float32x4_t v54;
  float v55;
  float v56;
  float v57;
  float *v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  float v66;
  BOOL v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  unsigned int v82;
  unsigned int v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v100;
  uint64_t v102;
  uint64_t v104;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int32x4_t v150;
  float32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  _QWORD *v170;
  float32x4_t v171;
  float32x4_t v172;
  int v173;
  float32x4_t v174;
  int v175;
  int32x4_t v176;
  int v177;
  int32x4_t v178;
  float32x4_t v179;
  int32x4_t v180;
  float32x4_t v181;
  int32x4_t v182;
  float32x4_t v183;
  int v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  int32x4_t v194;
  float32x2_t v195;
  int32x4_t v198;
  float32x4_t v199;
  int32x2_t *v200;
  unsigned int v201;
  int32x2_t *v202;
  unsigned int v203;
  int32x4_t v205;
  float32x4_t v206;
  _DWORD v208[385];
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  _OWORD v212[24];
  uint64_t v213;
  float32x2x2_t v214;
  float32x2x2_t v215;

  v14 = 0;
  v15 = 0;
  v16 = 0;
  v213 = *MEMORY[0x24BDAC8D0];
  v200 = (int32x2_t *)(a1 + 340);
  v202 = (int32x2_t *)(a1 + 692);
  memset(v212, 0, sizeof(v212));
  do
  {
    v208[v15 + 384] = v16;
    physx::Dy::preprocessRows((float **)v212 + v16, *(_QWORD *)(a1 + v14 + 128), (float32x4_t *)&v208[4 * v16 + 192], (float32x4_t *)&v208[4 * v16], *(_DWORD *)(a1 + v14 + 136), *(_QWORD *)(a1 + v14 + 40) + 32, *(_QWORD *)(a1 + v14 + 48) + 32, a1 + v14, *(float *)(*(_QWORD *)(a1 + v14 + 40) + 12), *(float *)(*(_QWORD *)(a1 + v14 + 48) + 12), a7, a8, a9, a10, a11, a12, *(_WORD *)(a1 + v14 + 160), HIBYTE(*(_WORD *)(a1 + v14 + 160)), 1);
    v16 += *(_DWORD *)(a1 + v14 + 136);
    ++v15;
    v14 += 176;
  }
  while (v15 != 4);
  v17 = (**a3)(a3, (368 * a4 + 176));
  if ((unint64_t)(v17 + 1) > 1)
  {
    v21 = 0;
    *a2 = v16;
    do
    {
      v22 = *(_QWORD *)(a1 + v21 + 16);
      *(_QWORD *)(v22 + 32) = v17;
      *(_WORD *)(v22 + 30) = (368 * a4 + 160) >> 4;
      *(_QWORD *)(v22 + 40) = *(_QWORD *)(a1 + v21 + 152);
      v21 += 176;
    }
    while (v21 != 704);
    v23 = *(int32x4_t **)(a1 + 568);
    v24 = *(int32x4_t **)(a1 + 40);
    v25 = *(int32x4_t **)(a1 + 48);
    v26.i32[0] = *(_DWORD *)a1;
    v35.i32[0] = *(_DWORD *)(a1 + 4);
    v26.i32[1] = *(_DWORD *)(a1 + 176);
    v27 = *(int32x4_t **)(a1 + 216);
    v28 = *(int32x4_t **)(a1 + 224);
    v26.i32[2] = *(_DWORD *)(a1 + 352);
    v26.i32[3] = *(_DWORD *)(a1 + 528);
    v29 = *(int32x4_t **)(a1 + 392);
    v30 = *(int32x4_t **)(a1 + 400);
    v31.i32[0] = *(_DWORD *)(a1 + 8);
    v36.i32[0] = *(_DWORD *)(a1 + 12);
    v31.i32[1] = *(_DWORD *)(a1 + 184);
    v31.i32[2] = *(_DWORD *)(a1 + 360);
    v31.i32[3] = *(_DWORD *)(a1 + 536);
    v32 = *(int32x4_t **)(a1 + 576);
    v33.i32[0] = v24->i32[3];
    v33.i32[1] = v27->i32[3];
    v33.i32[2] = v29->i32[3];
    v33.i32[3] = v23->i32[3];
    v34.i32[0] = v25->i32[3];
    v34.i32[1] = v28->i32[3];
    v34.i32[2] = v30->i32[3];
    v34.i32[3] = v32->i32[3];
    v35.i32[1] = *(_DWORD *)(a1 + 180);
    v35.i32[2] = *(_DWORD *)(a1 + 356);
    v35.i32[3] = *(_DWORD *)(a1 + 532);
    v36.i32[1] = *(_DWORD *)(a1 + 188);
    v36.i32[2] = *(_DWORD *)(a1 + 364);
    v36.i32[3] = *(_DWORD *)(a1 + 540);
    v37 = *v24;
    v38 = *v25;
    v198 = v25[1];
    v39 = *v27;
    v180 = v27[1];
    v182 = v24[1];
    v40 = *v28;
    v205 = v28[1];
    v41 = *v29;
    v42 = *v30;
    v176 = v30[1];
    v178 = v29[1];
    v44 = *v23;
    v43 = v23[1];
    v45 = *v32;
    v194 = v32[1];
    v46 = *(int32x2_t *)(a1 + 164);
    v214.val[0].i32[0] = *(_DWORD *)(a1 + 172);
    v47 = *v200;
    v214.val[1].i32[0] = *(_DWORD *)(a1 + 348);
    v48 = v200[22];
    v49 = *v202;
    v215.val[0] = (float32x2_t)vzip1_s32(v46, v48);
    v215.val[1] = (float32x2_t)vzip1_s32(*v200, *v202);
    v50 = *(float *)(a1 + 316);
    v51 = *(float *)(a1 + 492);
    v214.val[0].i32[1] = *(_DWORD *)(a1 + 524);
    v214.val[1].i32[1] = *(_DWORD *)(a1 + 700);
    v52 = (float *)(v17 + 112);
    v53 = *(float *)(a1 + 668);
    v62.i32[0] = *(_DWORD *)(a1 + 140);
    v54.i32[0] = *(_DWORD *)(a1 + 144);
    v55 = *(float *)(a1 + 320);
    v56 = *(float *)(a1 + 496);
    v57 = *(float *)(a1 + 672);
    vst2_f32(v52, v215);
    v58 = (float *)(v17 + 144);
    vst2_f32(v58, v214);
    v59 = vmulq_f32(v26, v33);
    v60 = vmulq_f32(v31, v34);
    *(int32x2_t *)v26.f32 = vzip2_s32(v46, v48);
    v26.i64[1] = v26.i64[0];
    *(int32x2_t *)v31.f32 = vzip2_s32(v47, v49);
    v31.i64[1] = v31.i64[0];
    v61 = vzip2q_s32((int32x4_t)v26, (int32x4_t)v31);
    v62.f32[1] = v50;
    v63 = v62.f32[0] != 3.4028e38;
    if (v54.f32[0] != 3.4028e38)
      v63 = 1;
    v54.f32[1] = v55;
    v64 = v50 != 3.4028e38;
    v62.f32[2] = v51;
    v54.f32[2] = v56;
    if (v55 != 3.4028e38)
      v64 = 1;
    v65 = v51 != 3.4028e38;
    v62.f32[3] = v53;
    if (v56 != 3.4028e38)
      v65 = 1;
    v54.f32[3] = v57;
    *(int32x4_t *)(v17 + 128) = v61;
    v66 = *(float *)&a5;
    *(float32x4_t *)(v17 + 16) = vmulq_n_f32(v62, *(float *)&a5);
    *(float32x4_t *)(v17 + 32) = vmulq_n_f32(v54, *(float *)&a5);
    *(_BYTE *)(v17 + 12) = v63;
    *(_BYTE *)(v17 + 13) = v64;
    *(_BYTE *)(v17 + 14) = v65;
    v67 = v57 != 3.4028e38 || v53 != 3.4028e38;
    *(_BYTE *)(v17 + 15) = v67;
    v191 = v60;
    *(float32x4_t *)(v17 + 48) = v59;
    *(float32x4_t *)(v17 + 64) = v60;
    v192 = v36;
    v193 = v35;
    *(float32x4_t *)(v17 + 80) = v35;
    *(float32x4_t *)(v17 + 96) = v36;
    *(_DWORD *)(v17 + 4) = a4;
    *(_BYTE *)v17 = 9;
    v68 = *(_DWORD *)(a1 + 136);
    *(_BYTE *)(v17 + 8) = v68;
    v69 = *(_DWORD *)(a1 + 312);
    *(_BYTE *)(v17 + 9) = v69;
    v70 = *(_DWORD *)(a1 + 488);
    *(_BYTE *)(v17 + 10) = v70;
    v71 = *(_DWORD *)(a1 + 664);
    *(_BYTE *)(v17 + 11) = v71;
    if (a4)
    {
      v72 = 0;
      v73 = 0;
      v74 = vzip1q_s32(v37, v41);
      v75 = vzip1q_s32(v39, v44);
      v189 = (float32x4_t)vzip2q_s32(v74, v75);
      v190 = (float32x4_t)vzip1q_s32(v74, v75);
      v76 = vzip1q_s32(v38, v42);
      v77 = vzip1q_s32(v40, v45);
      v187 = (float32x4_t)vzip1q_s32(v76, v77);
      v188 = (float32x4_t)vzip1q_s32(vzip2q_s32(v37, v41), vzip2q_s32(v39, v44));
      v185 = (float32x4_t)vzip1q_s32(vzip2q_s32(v38, v42), vzip2q_s32(v40, v45));
      v186 = (float32x4_t)vzip2q_s32(v76, v77);
      v184 = v68 - 1;
      v78 = vzip1q_s32(v182, v178);
      v79 = vzip2q_s32(v182, v178);
      v80 = vzip1q_s32(v180, v43);
      v81 = vzip2q_s32(v180, v43);
      v181 = (float32x4_t)vzip2q_s32(v78, v80);
      v183 = (float32x4_t)vzip1q_s32(v78, v80);
      v179 = (float32x4_t)vzip1q_s32(v79, v81);
      v82 = v209;
      v83 = v210;
      v84 = vzip1q_s32(v198, v176);
      v85 = vzip2q_s32(v198, v176);
      v86 = vzip1q_s32(v205, v194);
      v175 = v70 + v210 - 1;
      v177 = v69 + v209 - 1;
      v87 = v211;
      v174 = (float32x4_t)vzip1q_s32(v84, v86);
      v173 = v71 + v211 - 1;
      v88 = v17 + 416;
      v171 = (float32x4_t)vzip1q_s32(v85, vzip2q_s32(v205, v194));
      v172 = (float32x4_t)vzip2q_s32(v84, v86);
      v195 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0).u64[0];
      do
      {
        v89 = *((_QWORD *)v212 + v72);
        if (v72 == v184)
          v90 = v72;
        else
          v90 = v72 + 1;
        if (v82 == v177)
          v91 = v82;
        else
          v91 = v82 + 1;
        if (v83 == v175)
          v92 = v83;
        else
          v92 = v83 + 1;
        if (v87 == v173)
          v93 = v87;
        else
          v93 = v87 + 1;
        __asm { FMOV            V0.4S, #1.0 }
        if ((*(_WORD *)(v89 + 76) & 0x20) != 0 && *(_BYTE *)(a1 + 162))
        {
          __asm { FMOV            V0.2S, #1.0 }
          _Q0 = (float32x4_t)vorrq_s8((int8x16_t)vmin_f32(v195, _D0).u32[0], (int8x16_t)xmmword_2260F8390);
        }
        v100 = *((_QWORD *)v212 + v82);
        if ((*(_WORD *)(v100 + 76) & 0x20) != 0 && *(_BYTE *)(a1 + 338))
        {
          __asm { FMOV            V1.2S, #1.0 }
          _Q0.i32[1] = vmin_f32(v195, _D1).i32[1];
        }
        v102 = *((_QWORD *)v212 + v83);
        if ((*(_WORD *)(v102 + 76) & 0x20) != 0 && *(_BYTE *)(a1 + 514))
        {
          __asm { FMOV            V1.2S, #1.0 }
          _Q0.i32[2] = vmin_f32(v195, _D1).u32[0];
        }
        v104 = *((_QWORD *)v212 + v87);
        v203 = v92;
        v201 = v93;
        if ((*(_WORD *)(v104 + 76) & 0x20) != 0 && *(_BYTE *)(a1 + 690))
        {
          __asm { FMOV            V1.2S, #1.0 }
          _Q0.i32[3] = vmin_f32(v195, _D1).i32[1];
        }
        v106 = *(int32x4_t *)&v208[4 * v72 + 192];
        v107 = *(int32x4_t *)&v208[4 * v82 + 192];
        v108 = *(int32x4_t *)&v208[4 * v83 + 192];
        v109 = *(int32x4_t *)&v208[4 * v87 + 192];
        v110 = *(int32x4_t *)&v208[4 * v72];
        v111 = *(int32x4_t *)&v208[4 * v82];
        v112 = *(int32x4_t *)(v89 + 16);
        v113 = *(int32x4_t *)(v100 + 16);
        v114 = *(int32x4_t *)(v102 + 16);
        v115 = *(int32x4_t *)(v104 + 16);
        v116 = vzip1q_s32(*(int32x4_t *)v89, *(int32x4_t *)v102);
        v117 = vzip1q_s32(*(int32x4_t *)v100, *(int32x4_t *)v104);
        v118 = (float32x4_t)vzip1q_s32(v116, v117);
        v119 = (float32x4_t)vzip2q_s32(v116, v117);
        v120 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v89, *(int32x4_t *)v102), vzip2q_s32(*(int32x4_t *)v100, *(int32x4_t *)v104));
        v121 = (float32x4_t)vzip1q_s32(v112, v114);
        v122 = vzip2q_s32(v112, v114);
        v123 = vzip1q_s32(v113, v115);
        v124 = (float32x4_t)vzip2q_s32(v113, v115);
        v125 = (float32x4_t)vzip1q_s32((int32x4_t)v121, v123);
        v126 = (float32x4_t)vzip2q_s32((int32x4_t)v121, v123);
        v121.i32[0] = *(_DWORD *)(v89 + 60);
        v121.i32[1] = *(_DWORD *)(v100 + 60);
        v121.i32[2] = *(_DWORD *)(v102 + 60);
        v121.i32[3] = *(_DWORD *)(v104 + 60);
        v127 = (float32x4_t)vzip1q_s32(v122, (int32x4_t)v124);
        v124.i32[0] = *(_DWORD *)(v89 + 44);
        v124.i32[1] = *(_DWORD *)(v100 + 44);
        v124.i32[2] = *(_DWORD *)(v102 + 44);
        v124.i32[3] = *(_DWORD *)(v104 + 44);
        v128 = vzip1q_s32(v106, v108);
        v129 = vzip2q_s32(v106, v108);
        v130 = vzip1q_s32(v107, v109);
        v131 = vzip2q_s32(v107, v109);
        v132 = (float32x4_t)vzip1q_s32(v128, v130);
        v133 = (float32x4_t)vzip2q_s32(v128, v130);
        v134 = (float32x4_t)vzip1q_s32(v129, v131);
        *(float32x4_t *)(v88 - 256) = v118;
        *(float32x4_t *)(v88 - 240) = v119;
        *(float32x4_t *)(v88 - 224) = v120;
        *(float32x4_t *)(v88 - 208) = v132;
        *(float32x4_t *)(v88 - 192) = v133;
        *(float32x4_t *)(v88 - 176) = v134;
        *(float32x4_t *)(v88 - 160) = v125;
        *(float32x4_t *)(v88 - 144) = v126;
        *(float32x4_t *)(v88 - 128) = v127;
        *(float32x4_t *)(v88 - 48) = vmulq_f32(_Q0, v124);
        *(float32x4_t *)(v88 - 32) = vmulq_f32(_Q0, v121);
        v135 = vmlaq_f32(vmulq_f32(v193, vmlaq_f32(vmlaq_f32(vmulq_f32(v132, v132), v133, v133), v134, v134)), v59, vmlaq_f32(vmlaq_f32(vmulq_f32(v118, v118), v119, v119), v120, v120));
        *(_OWORD *)(v88 - 16) = 0u;
        *(_OWORD *)v88 = 0u;
        v136 = *(int32x4_t *)(v89 + 32);
        v137 = *(int32x4_t *)(v89 + 48);
        v138 = *(int32x4_t *)(v100 + 32);
        v139 = *(int32x4_t *)(v100 + 48);
        v140 = *(int32x4_t *)(v102 + 32);
        v141 = *(int32x4_t *)(v102 + 48);
        v142 = *(int32x4_t *)(v104 + 32);
        v143 = *(int32x4_t *)(v104 + 48);
        v144 = vzip1q_s32(v136, v140);
        v145 = vzip2q_s32(v136, v140);
        v146 = vzip1q_s32(v138, v142);
        v147 = vzip2q_s32(v138, v142);
        v148 = (float32x4_t)vzip1q_s32(v144, v146);
        v149 = (float32x4_t)vzip2q_s32(v144, v146);
        v150 = *(int32x4_t *)&v208[4 * v83];
        v151 = (float32x4_t)vzip1q_s32(v145, v147);
        v152 = vzip1q_s32(v137, v141);
        v153 = vzip2q_s32(v137, v141);
        v154 = vzip1q_s32(v139, v143);
        v155 = vzip2q_s32(v139, v143);
        v156 = (float32x4_t)vzip1q_s32(v152, v154);
        v157 = (float32x4_t)vzip2q_s32(v152, v154);
        v158 = *(int32x4_t *)&v208[4 * v87];
        v159 = (float32x4_t)vzip1q_s32(v153, v155);
        v160 = vzip1q_s32(v110, v150);
        v161 = vzip2q_s32(v110, v150);
        v162 = vzip1q_s32(v111, v158);
        v163 = vzip2q_s32(v111, v158);
        v164 = (float32x4_t)vzip1q_s32(v160, v162);
        v165 = (float32x4_t)vzip2q_s32(v160, v162);
        v166 = (float32x4_t)vzip1q_s32(v161, v163);
        *(float32x4_t *)(v88 + 64) = v164;
        *(float32x4_t *)(v88 + 80) = v165;
        *(float32x4_t *)(v88 + 96) = v166;
        v206 = vaddq_f32(v135, vmlaq_f32(vmulq_f32(v192, vmlaq_f32(vmlaq_f32(vmulq_f32(v164, v164), v165, v165), v166, v166)), v191, vmlaq_f32(vmlaq_f32(vmulq_f32(v148, v148), v149, v149), v151, v151)));
        *(float32x4_t *)(v88 + 16) = v148;
        *(float32x4_t *)(v88 + 32) = v149;
        *(float32x4_t *)(v88 + 48) = v151;
        v199 = vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v190, v118), v189, v119), v188, v120), vmlaq_f32(vmlaq_f32(vmulq_f32(v183, v125), v181, v126), v179, v127)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v187, v148), v186, v149), v185, v151), vmlaq_f32(vmlaq_f32(vmulq_f32(v174, v156), v172, v157), v171, v159)));
        v167 = vmulq_f32(v199, *(float32x4_t *)(v88 - 80));
        v168 = vaddq_f32(*(float32x4_t *)(v88 - 112), v167);
        v169 = vaddq_f32(v167, *(float32x4_t *)(v88 - 96));
        *(float32x4_t *)(v88 - 112) = v168;
        *(float32x4_t *)(v88 - 96) = v169;
        if ((*(_BYTE *)(v89 + 76) & 0x10) != 0)
          *(_DWORD *)v88 |= 2u;
        v83 = v203;
        if ((*(_WORD *)(v100 + 76) & 0x10) != 0)
          *(_DWORD *)(v88 + 4) |= 2u;
        v66 = *(float *)&a5;
        if ((*(_WORD *)(v102 + 76) & 0x10) != 0)
          *(_DWORD *)(v88 + 8) |= 2u;
        if ((*(_WORD *)(v104 + 76) & 0x10) != 0)
          *(_DWORD *)(v88 + 12) |= 2u;
        ++v73;
        v88 += 368;
        v72 = v90;
        v87 = v201;
        v82 = v91;
      }
      while (a4 != v73);
      v170 = (_QWORD *)(v88 - 256);
    }
    else
    {
      v170 = (_QWORD *)(v17 + 160);
    }
    *v170 = 0;
    return 2;
  }
  else
  {
    for (i = 0; i != 704; i += 176)
    {
      v19 = *(_QWORD *)(a1 + i + 16);
      *(_QWORD *)(v19 + 32) = 0;
      *(_WORD *)(v19 + 30) = 0;
      *(_QWORD *)(v19 + 40) = *(_QWORD *)(a1 + i + 152);
    }
    return 0;
  }
}

float physx::Dy::`anonymous namespace'::setConstants(float *a1, float *a2, float *a3, float *a4, uint64_t a5, float *a6, float *a7, int a8, float result, float a10, float a11, float a12)
{
  __int16 v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;

  if (a8)
  {
    *a1 = 0.0;
    *a2 = 0.0;
    *a3 = 0.0;
    *a4 = 0.0;
  }
  else
  {
    v12 = *(_WORD *)(a5 + 76);
    if ((v12 & 4) != 0 || (v13 = 0.0, (v12 & 3) == 3))
      v13 = (float)((float)((float)((float)(a6[1] * *(float *)(a5 + 4)) + (float)(*a6 * *(float *)a5))
                          + (float)(a6[2] * *(float *)(a5 + 8)))
                  + (float)((float)((float)(a6[5] * *(float *)(a5 + 20)) + (float)(a6[4] * *(float *)(a5 + 16)))
                          + (float)(a6[6] * *(float *)(a5 + 24))))
          - (float)((float)((float)((float)(a7[1] * *(float *)(a5 + 36)) + (float)(*a7 * *(float *)(a5 + 32)))
                          + (float)(a7[2] * *(float *)(a5 + 40)))
                  + (float)((float)((float)(a7[5] * *(float *)(a5 + 52)) + (float)(a7[4] * *(float *)(a5 + 48)))
                          + (float)(a7[6] * *(float *)(a5 + 56))));
    v14 = result > a10;
    v15 = 0.0;
    if (v14)
      v15 = 1.0 / result;
    v16 = *(float *)(a5 + 12);
    if ((v12 & 1) != 0)
    {
      v17 = *(float *)(a5 + 64);
      v18 = *(float *)(a5 + 68);
      v19 = (float)(v18 * a11) + (float)((float)(a11 * a11) * v17);
      v20 = (float)((float)(v18 * *(float *)(a5 + 28)) - (float)(v17 * v16)) * a11;
      if ((v12 & 2) != 0)
      {
        v21 = 1.0 / (float)(v19 + 1.0);
        v23 = v20 * (float)(v15 * v21);
        *a2 = v23;
        *a1 = v23;
        v22 = -(float)(v21 * v15);
      }
      else
      {
        v21 = 0.0;
        if (result != 0.0)
          v21 = 1.0 / (float)((float)(v19 * result) + 1.0);
        *a2 = v20 * v21;
        *a1 = v20 * v21;
        v22 = -v21;
      }
      *a3 = v19 * v22;
      result = 1.0 - v21;
      *a4 = 1.0 - v21;
    }
    else
    {
      *a3 = -v15;
      *a4 = 1.0;
      if ((v12 & 4) != 0 && *(float *)(a5 + 68) < (float)-v13)
      {
        result = (float)(v15 * *(float *)(a5 + 64)) * (float)-v13;
        *a1 = result;
      }
      else
      {
        *a1 = v15 * (float)(*(float *)(a5 + 28) - (float)(v16 * a12));
        result = v15 * (float)(*(float *)(a5 + 28) - (float)(*(float *)(a5 + 72) * a12));
      }
      *a2 = result;
    }
  }
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContactsCoulomb1D(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (***a4)(_QWORD, _QWORD), uint64_t a5, double a6, int32x2_t a7, int32x2_t a8, double a9, double a10, double a11, double a12, int32x2_t a13)
{
  a8.i32[0] = LODWORD(a10);
  return physx::Dy::createFinalizeSolverContactsCoulomb(a1, a2, a3, a4, 1, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t physx::Dy::createFinalizeSolverContactsCoulomb2D(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (***a4)(_QWORD, _QWORD), uint64_t a5, double a6, int32x2_t a7, int32x2_t a8, double a9, double a10, double a11, double a12, int32x2_t a13)
{
  a8.i32[0] = LODWORD(a10);
  return physx::Dy::createFinalizeSolverContactsCoulomb(a1, a2, a3, a4, 2, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t physx::Dy::createFinalizeSolverContacts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, float a8, double a9, float a10, float a11, float a12)
{
  int v26;
  int v27;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  float v34;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  char v50;
  unsigned __int16 *v51;
  _DWORD *v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  uint64_t result;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  BOOL v63;
  int v64;
  BOOL v65;
  char *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  __int16 v70;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v80;
  uint64_t v81;
  char v82;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float v93;
  float v94;
  int32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  __int32 v108;
  int v109;
  int8x16_t v110;
  float32x4_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unsigned int *v122;
  const float *v123;
  float32x2_t v126;
  unsigned int v128;
  float32x4_t v129;
  float32x4_t v130;
  unsigned int v131;
  int32x2_t *v132;
  float32x4_t v133;
  float32x2_t v134;
  float32x4_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  unsigned __int16 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  int8x8_t v152;
  int8x16_t v153;
  float32x4_t v154;
  int8x8_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x2_t v169;
  int8x16_t v170;
  float32x2_t v171;
  float32x4_t v172;
  float32x2_t v173;
  float32x2_t v174;
  int v175;
  float32x2_t v176;
  float32x2_t v177;
  float32x2_t v178;
  float32x2_t v179;
  int8x8_t v180;
  float32x2_t v181;
  int32x2_t v182;
  float32x2_t v183;
  int8x8_t v184;
  float32x2_t v185;
  int32x2_t v186;
  int8x16_t v187;
  int32x2_t v188;
  char *v189;
  uint64_t v190;
  float v191;
  __int128 v192;
  uint64_t v193;
  int v194;
  _WORD *v195;
  int8x16_t v196;
  int8x16_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x2_t v205;
  int v206;
  float32x2_t v208;
  float32x2_t v209;
  int v210;
  unint64_t v211;
  float32x2_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x2_t v215;
  float32x2_t v216;
  int8x8_t v217;
  float32x2_t v218;
  int8x8_t v219;
  float32x2_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x2_t v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  unsigned int v234;
  uint64_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x2_t v239;
  int8x8_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  int8x8_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  uint64_t v258;
  float32x2_t v259;
  float32x2_t v260;
  float32x4_t v261;
  float32x2_t v262;
  float32x2_t v263;
  unsigned int v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x2_t v277;
  float32x2_t v278;
  int v279;
  int8x8_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  int8x8_t v285;
  int8x16_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x2_t v298;
  float32x2_t v299;
  int v300;
  int8x8_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  __int16 v306;
  uint64_t v307;
  __int16 v308;
  unsigned int v309;
  float32x4_t v310;
  uint64_t v311;
  char *v312;
  float32x4_t v313;
  float32x4_t v314;
  __int32 v315;
  int v316;
  float v317;
  __int32 v318;
  uint64_t v319;
  char v320;
  char v321;
  int8x16_t v322;
  float32x2_t v323;
  float32x2_t v324;
  float32x2_t v325;
  float32x2_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float v329;
  float v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x2_t v333;
  float32x2_t v334;
  float32x4_t v335;
  float32x2_t v336;
  float32x2_t v337;
  int32x2_t v338;
  float32x4_t v339;
  uint64_t v340;
  float32x2_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x2_t v345;
  float32x2_t v346;
  float32x2_t v347;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x2_t v352;
  float32x2_t v353;
  float32x4_t v354;
  float32x2_t v355;
  float32x2_t v357;
  float32x2_t v358;
  uint64_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v363;
  char v364;
  float32x4_t v365;
  _BOOL4 v366;
  float32x4_t v367;
  uint64_t v368[2];
  __int16 v369;
  uint64_t v370[2];
  __int16 v371;

  _X8 = *(_QWORD *)(a1 + 24);
  __asm { PRFM            #0, [X8] }
  _X8 = *(_QWORD *)(a1 + 32);
  __asm { PRFM            #0, [X8] }
  _X8 = *(_QWORD *)(a1 + 40);
  __asm { PRFM            #0, [X8] }
  _X8 = *(_QWORD *)(a1 + 48);
  __asm { PRFM            #0, [X8] }
  _X25 = a2 + 7684;
  *(_QWORD *)(a2 + 7684) = 0;
  v321 = *(_BYTE *)(a1 + 150);
  v27 = *(_DWORD *)(a1 + 112);
  v26 = *(_DWORD *)(a1 + 116);
  v29 = v26 == 4 || v26 == 2;
  v30 = *(unsigned __int8 *)(a1 + 149);
  v31 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(v31 + 30) = 0;
  v32 = *(_DWORD *)(a1 + 144);
  if (!v32)
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    result = 1;
    *(_QWORD *)(v31 + 32) = 0;
    return result;
  }
  v34 = *(float *)&a7;
  v366 = v29;
  if (!v30)
  {
    physx::Dy::getFrictionPatches(a2, *(float **)(a1 + 160), *(unsigned __int8 *)(a1 + 168), (float *)(a1 + 56), (float *)(a1 + 84), a8, a6, a7, a8, *(float *)&a9, a10, a11, a12);
    v32 = *(_DWORD *)(a1 + 144);
  }
  v37 = v27 | v26;
  physx::Dy::createContactPatches(a2, *(_QWORD *)(a1 + 136), v32, 0.999);
  v38 = a1 + 56;
  v39 = a1 + 84;
  physx::Dy::correlatePatches(a2, *(_QWORD *)(a1 + 136), (float *)(a1 + 56), (float *)(a1 + 84), 0, 0, 0.999);
  physx::Dy::growPatches(a2, *(_QWORD *)(a1 + 136), (float *)(a1 + 56), (float *)(a1 + 84), 0, a8, *(float *)(a1 + 152) + v34);
  v46 = *(unsigned int *)(a2 + 7688);
  v364 = v37;
  if (!(_DWORD)v46)
  {
    _X7 = 0;
    v60 = 0;
    LOBYTE(v48) = 0;
    v57 = 0;
    v61 = v366;
LABEL_51:
    *(_QWORD *)(a1 + 160) = _X7;
    v312 = v57;
    *(_QWORD *)(v31 + 32) = v57;
    *(_BYTE *)(a1 + 168) = v48;
    *(_WORD *)(v31 + 30) = v60 >> 4;
    v69 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(v31 + 40) = v69;
    if (v69)
      v70 = *(_WORD *)(a1 + 144);
    else
      v70 = 0;
    *(_WORD *)(v31 + 28) = v70;
    if (_X7)
    {
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X7,#0x80]
        PRFM            #0, [X7,#0x100]
      }
      v74 = *(_DWORD *)(a2 + 7688);
      if (v74)
      {
        v75 = 0;
        v76 = 104 * v74;
        v77 = 7296;
        _X11 = _X7;
        do
        {
          if (*(_DWORD *)(a2 + v77))
          {
            *(_DWORD *)_X11 = *(_DWORD *)(a2 + v75 + 2816);
            *(_QWORD *)(_X11 + 20) = *(_QWORD *)(a2 + v75 + 2836);
            *(_QWORD *)(_X11 + 32) = *(_QWORD *)(a2 + v75 + 2848);
            *(_QWORD *)(_X11 + 44) = *(_QWORD *)(a2 + v75 + 2860);
            *(_QWORD *)(_X11 + 56) = *(_QWORD *)(a2 + v75 + 2872);
            *(_QWORD *)(_X11 + 68) = *(_QWORD *)(a2 + v75 + 2884);
            *(_OWORD *)(_X11 + 80) = *(_OWORD *)(a2 + v75 + 2896);
            *(_QWORD *)(_X11 + 96) = *(_QWORD *)(a2 + v75 + 2912);
            *(_OWORD *)(_X11 + 4) = *(_OWORD *)(a2 + v75 + 2820);
            *(_DWORD *)(_X11 + 28) = *(_DWORD *)(a2 + v75 + 2844);
            *(_DWORD *)(_X11 + 40) = *(_DWORD *)(a2 + v75 + 2856);
            *(_DWORD *)(_X11 + 52) = *(_DWORD *)(a2 + v75 + 2868);
            *(_DWORD *)(_X11 + 64) = *(_DWORD *)(a2 + v75 + 2880);
            *(_DWORD *)(_X11 + 76) = *(_DWORD *)(a2 + v75 + 2892);
            __asm { PRFM            #0, [X11,#0x168] }
            _X11 += 104;
          }
          v75 += 104;
          v77 += 4;
        }
        while (v76 != v75);
      }
    }
    if (v312)
    {
      v81 = *(_QWORD *)(a1 + 40);
      v80 = *(_QWORD *)(a1 + 48);
      v309 = v60;
      if ((v364 & 8) != 0)
      {
        v306 = *(_WORD *)(v31 + 16);
        v307 = *(_QWORD *)(a1 + 32);
        v370[0] = *(_QWORD *)(a1 + 24);
        v370[1] = v81;
        v371 = v306;
        v308 = *(_WORD *)(v31 + 18);
        v368[0] = v307;
        v368[1] = v80;
        v369 = v308;
        v40.i32[0] = *(_DWORD *)a1;
        v41.i32[0] = *(_DWORD *)(a1 + 4);
        v42.i32[0] = *(_DWORD *)(a1 + 8);
        v43.i32[0] = *(_DWORD *)(a1 + 12);
        v44.i32[0] = *(_DWORD *)(a1 + 152);
        v45.i32[0] = *(_DWORD *)(a1 + 156);
        physx::Dy::setupFinalizeExtSolverContacts(*(_QWORD *)(a1 + 136), a2, v38, v39, v312, v370, v368, _X7, a5, *(int32x2_t *)&a6, v40, v41, v42, v43, v44, v45, a4);
      }
      else
      {
        v311 = _X7;
        if (v61)
          v82 = 5;
        else
          v82 = 1;
        v320 = v82;
        _X8 = a2 + 7556;
        __asm
        {
          PRFM            #0, [X8]
          PRFM            #0, [X25]
        }
        v86 = *(unsigned int *)(a2 + 7688);
        if ((_DWORD)v86)
        {
          v87 = 0;
          v88 = 0;
          v89 = *(_QWORD *)(a1 + 136);
          v319 = *(_QWORD *)(a1 + 128);
          v90 = *(float32x2_t *)a1;
          v91 = *(float32x2_t *)(a1 + 8);
          v92 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a9, 0);
          v316 = HIDWORD(*(_QWORD *)a1);
          v92.i32[3] = 0;
          v93 = *(float *)(a1 + 152);
          v94 = *(float *)(a1 + 156);
          v95 = (int32x2_t)vmul_f32(*(float32x2_t *)a1, *(float32x2_t *)(v81 + 12));
          v96 = vmul_n_f32(vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v91, 0)), COERCE_FLOAT(*(_QWORD *)(v80 + 12)));
          v97 = vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)(v81 + 68), 0), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v80 + 68), 0));
          v98 = *(int32x4_t *)(a1 + 56);
          v99 = *(float32x4_t *)(a1 + 72);
          v99.i64[1] = *(unsigned int *)(a1 + 80);
          v100 = *(float32x4_t *)(a1 + 100);
          v100.i64[1] = *(unsigned int *)(a1 + 108);
          v101 = *(float32x4_t *)v81;
          v103 = *(float32x4_t *)(v81 + 16);
          v101.i32[3] = 0;
          v102 = *(float32x4_t *)v80;
          v105 = *(float32x4_t *)(v80 + 16);
          v102.i32[3] = 0;
          v106 = *(float32x4_t *)(v81 + 32);
          v103.i32[3] = 0;
          v104 = *(float32x4_t *)(v80 + 32);
          v105.i32[3] = 0;
          v106.i32[3] = 0;
          v107 = *(int8x16_t *)(v81 + 44);
          v108 = v107.i32[3];
          v107.i32[3] = 0;
          v109 = *(_DWORD *)(v81 + 60);
          v111.i64[1] = *(unsigned int *)(v81 + 64);
          v363 = v111;
          v365 = (float32x4_t)v107;
          v104.i32[3] = 0;
          v367 = v104;
          v110 = *(int8x16_t *)(v80 + 44);
          v107.i32[0] = v110.i32[3];
          v110.i32[3] = 0;
          v107.i32[1] = *(_DWORD *)(v80 + 60);
          v107.i32[2] = *(_DWORD *)(v80 + 64);
          v360 = (float32x4_t)v107;
          v361 = (float32x4_t)v110;
          *(int32x2_t *)v111.f32 = vdup_n_s32(0x3F4CCCCDu);
          v107.i64[0] = 0;
          v107.i32[2] = 0;
          v107.i32[3] = v96.i32[1];
          v110.i64[0] = 0;
          v110.i32[2] = v95.i32[0];
          v112 = *(int32x4_t *)(a1 + 84);
          v322 = vorrq_s8(v107, v110);
          v113 = (int8x16_t)v98;
          v331 = (float32x4_t)vdupq_laneq_s32(v98, 3);
          LODWORD(v329) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v331.f32, *(float32x2_t *)v331.f32).u32[0];
          v114 = (int8x16_t)v112;
          v327 = (float32x4_t)vdupq_laneq_s32(v112, 3);
          LODWORD(v330) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v327.f32, *(float32x2_t *)v327.f32).u32[0];
          _X21 = v312;
          v116 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
          v113.i32[3] = 0;
          v114.i32[3] = 0;
          v315 = v91.i32[1];
          v117 = vmul_n_f32(*(float32x2_t *)v111.f32, *(float *)&a5);
          v347 = v96;
          v317 = -v96.f32[0];
          v313 = v102;
          v314 = v101;
          v310 = vsubq_f32(v101, v102);
          v332 = (float32x4_t)v113;
          v333 = *(float32x2_t *)v112.i8;
          v334 = *(float32x2_t *)v98.i8;
          v326 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
          v325 = (float32x2_t)vext_s8(*(int8x8_t *)v98.i8, (int8x8_t)v326, 4uLL);
          v328 = (float32x4_t)v114;
          v324 = (float32x2_t)vextq_s8(v114, v114, 8uLL).u64[0];
          v323 = (float32x2_t)vext_s8(*(int8x8_t *)v112.i8, (int8x8_t)v324, 4uLL);
          v345 = (float32x2_t)vdup_lane_s32(v95, 0);
          v346 = *(float32x2_t *)v111.f32;
          v118 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
          v318 = v95.i32[0];
          v352 = v91;
          v353 = *(float32x2_t *)a1;
          v343 = v99;
          v344 = v92;
          v342 = v100;
          v350 = v106;
          v351 = v103;
          v349 = v105;
          while (1)
          {
            v119 = a2 + 4 * v87;
            v120 = *(_DWORD *)(v119 + 7296);
            if (v120)
              break;
LABEL_101:
            if (++v87 >= v86)
              goto LABEL_105;
          }
          v121 = *(unsigned __int16 *)(a2 + 44 * *(unsigned int *)(v119 + 7424));
          v122 = (unsigned int *)(v89 + (v121 << 6));
          v123 = (const float *)(v122 + 15);
          _X8 = (int32x2_t *)(_X21 + 80);
          __asm { PRFM            #0, [X21,#0xD0] }
          v126 = vld1_dup_f32(v123);
          __asm { PRFM            #0, [X21,#0x150] }
          *((_QWORD *)_X21 + 8) = v319;
          _X21[1] = v321;
          *((_DWORD *)_X21 + 3) = v95.i32[0];
          *((float *)_X21 + 12) = v317;
          v128 = *v122;
          v129 = (float32x4_t)*v122;
          v129.i32[1] = v122[1];
          v130 = v129;
          v130.i32[2] = v122[2];
          *((float32x4_t *)_X21 + 2) = v130;
          v131 = *(_DWORD *)(v119 + 7424);
          v354 = v130;
          v357 = *(float32x2_t *)v129.f32;
          v338 = (int32x2_t)v128;
          v340 = v121;
          if (v131 == 0xFFFF)
          {
            v132 = (int32x2_t *)(_X21 + 80);
          }
          else
          {
            v133 = vmulq_f32(v130, v130);
            v133.i64[0] = vpaddq_f32(v133, v133).u64[0];
            v134 = vpadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32);
            v135 = vmlsq_f32(vmulq_f32(v314, v130), v313, v130);
            v135.i64[0] = vpaddq_f32(v135, v135).u64[0];
            v136 = vpadd_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32);
            v137 = vmul_n_f32(v134, *(float *)v95.i32);
            v138 = vmul_f32(v347, v134);
            v139 = (float32x2_t)vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u64[0];
            v140 = (float32x2_t)vext_s8(*(int8x8_t *)v129.f32, (int8x8_t)v139, 4uLL);
            v141 = vneg_f32(v139);
            v142 = vneg_f32(*(float32x2_t *)v129.f32);
            do
            {
              v143 = (unsigned __int16 *)(a2 + 44 * v131);
              v144 = *((unsigned __int8 *)v143 + 5);
              if (*((_BYTE *)v143 + 5))
              {
                v145 = 0;
                v146 = v89 + ((unint64_t)*v143 << 6);
                do
                {
                  __asm { PRFM            #0, [X8,#0x100] }
                  v148 = v146 + (v145 << 6);
                  v149.i64[0] = *(_QWORD *)(v148 + 16);
                  v149.i64[1] = *(unsigned int *)(v148 + 24);
                  v111.i32[0] = *(_DWORD *)(v148 + 12);
                  v150.i64[0] = *(_QWORD *)(v148 + 32);
                  v150.i64[1] = *(unsigned int *)(v148 + 40);
                  v151 = (int8x16_t)vsubq_f32(v149, v99);
                  v152 = (int8x8_t)vmla_f32(vmul_f32(v140, *(float32x2_t *)v151.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 4uLL), v142);
                  *(int8x8_t *)v153.i8 = vext_s8(v152, (int8x8_t)vmla_f32(vmul_f32(v357, (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL)), *(float32x2_t *)v151.i8, v141), 4uLL);
                  v154 = vsubq_f32(v149, v100);
                  v153.i64[1] = v152.u32[0];
                  v155 = (int8x8_t)vmla_f32(vmul_f32(v140, *(float32x2_t *)v154.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 4uLL), v142);
                  *(int8x8_t *)v154.f32 = vext_s8(v155, (int8x8_t)vmla_f32(vmul_f32(v357, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL)), *(float32x2_t *)v154.f32, v141), 4uLL);
                  v156 = vmulq_f32(v354, v150);
                  v154.i64[1] = v155.u32[0];
                  v157 = (float32x4_t)vbicq_s8(v153, (int8x16_t)vcgtq_f32(v92, vabsq_f32((float32x4_t)v153)));
                  v158 = (float32x4_t)vbicq_s8((int8x16_t)v154, (int8x16_t)vcgtq_f32(v92, vabsq_f32(v154)));
                  v159 = vmulq_n_f32(v106, v157.f32[0]);
                  v159.i32[3] = 0;
                  v160 = vmulq_lane_f32(v365, *(float32x2_t *)v157.f32, 1);
                  v160.i32[3] = 0;
                  v161 = vmulq_laneq_f32(v363, v157, 2);
                  v161.i32[3] = 0;
                  v162 = vaddq_f32(v161, vaddq_f32(v159, v160));
                  v163 = vmulq_n_f32(v367, v158.f32[0]);
                  v163.i32[3] = 0;
                  v164 = vmulq_lane_f32(v361, *(float32x2_t *)v158.f32, 1);
                  v164.i32[3] = 0;
                  v165 = vmulq_laneq_f32(v360, v158, 2);
                  v165.i32[3] = 0;
                  v166 = vaddq_f32(v165, vaddq_f32(v163, v164));
                  v167 = vmulq_f32(v162, v162);
                  v167.i64[0] = vpaddq_f32(v167, v167).u64[0];
                  v168 = vmulq_f32(v166, v166);
                  v168.i64[0] = vpaddq_f32(v168, v168).u64[0];
                  v169 = vadd_f32(vadd_f32(v137, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v167.f32, *(float32x2_t *)v167.f32), v90, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v168.f32, *(float32x2_t *)v168.f32), v91, 1), v138));
                  v170 = (int8x16_t)vmulq_f32(v103, v157);
                  v171 = (float32x2_t)vextq_s8(v170, v170, 8uLL).u64[0];
                  v172 = vmulq_f32(v105, v158);
                  v173 = (float32x2_t)vpaddq_f32(v172, v172).u64[0];
                  v174 = vrecpe_f32(v169);
                  v175 = 4;
                  do
                  {
                    v174 = vmul_f32(v174, vrecps_f32(v169, v174));
                    --v175;
                  }
                  while (v175);
                  v176 = vpadd_f32(*(float32x2_t *)v170.i8, v171);
                  v177 = (float32x2_t)vpaddq_f32(v156, v156).u64[0];
                  v132 = _X8 + 6;
                  v178 = vsub_f32(vadd_f32(v136, vpadd_f32(v176, v176)), vpadd_f32(v173, v173));
                  v179 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v169), 0), (int8x8_t)v174);
                  v111.f32[0] = v111.f32[0] - v93;
                  v180 = (int8x8_t)vmul_f32(vmax_f32(v97, vmul_n_f32(v117, v111.f32[0])), v179);
                  v181 = vneg_f32(v178);
                  v182 = (int32x2_t)vand_s8(vand_s8((int8x8_t)vcgt_f32(v116, v178), (int8x8_t)vcgtz_f32(v126)), (int8x8_t)vcgt_f32(v181, vmul_n_f32(v118, v111.f32[0])));
                  v111.i32[0] = v111.f32[0] <= v94;
                  v183 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcltz_s32(vshl_n_s32((int32x2_t)vmvn_s8(vand_s8((int8x8_t)v182, *(int8x8_t *)v111.f32)), 0x1FuLL)), 0), v180);
                  v184 = (int8x8_t)vdup_lane_s32(v182, 0);
                  v185 = vsub_f32(vadd_f32(vpadd_f32(v177, v177), (float32x2_t)vand_s8(v184, (int8x8_t)vmul_f32(v126, v181))), v178);
                  v186 = (int32x2_t)vmla_f32(vneg_f32(v183), v179, v185);
                  *(float32x2_t *)v111.f32 = vmla_f32((float32x2_t)vbic_s8((int8x8_t)vneg_f32(vmax_f32(v183, 0)), v184), v179, v185);
                  _X8[4] = vzip1_s32((int32x2_t)v179, v186);
                  _X8[5].i32[0] = v111.i32[0];
                  _X8[5].i32[1] = *(_DWORD *)(v146 + (v145 << 6) + 28);
                  *(float32x4_t *)_X8->i8 = v162;
                  *(float32x4_t *)_X8[2].i8 = v166;
                  ++v145;
                  _X8 += 6;
                }
                while (v145 != v144);
              }
              else
              {
                v132 = _X8;
              }
              v131 = *(unsigned __int16 *)(a2 + 44 * v131 + 2);
              _X8 = v132;
            }
            while (v131 != 0xFFFF);
          }
          bzero(v132, (4 * v120));
          v188.i32[0] = 1.0;
          if ((v122[12] & 4) != 0 && *(_WORD *)(a2 + 104 * v87 + 2818) == 2)
            *(float *)v188.i32 = 0.5;
          v189 = (char *)v132 + 4 * ((v120 + 3) & 0xFFFFFFFC);
          v190 = v89 + (v340 << 6);
          v191 = *(float *)v188.i32 * *(float *)(v190 + 44);
          *(float *)v188.i32 = *(float *)v188.i32 * *(float *)(v190 + 56);
          *((_QWORD *)&v192 + 1) = v322.i64[1];
          *(float *)&v192 = v191;
          DWORD1(v192) = vdupq_lane_s32(v188, 0).i32[1];
          if ((v122[12] & 1) != 0)
          {
            _X21[2] = v120;
          }
          else
          {
            v193 = a2 + 104 * v87;
            v194 = *(unsigned __int16 *)(v193 + 2818);
            _X21[2] = v120;
            if (v194)
            {
              v195 = (_WORD *)(v193 + 2818);
              _X21[3] = 2 * v194;
              *_X21 = v320;
              *((_OWORD *)_X21 + 1) = v192;
              *((_DWORD *)_X21 + 1) = v316;
              *((_DWORD *)_X21 + 2) = v315;
              *(int32x2_t *)v187.i8 = vdup_lane_s32((int32x2_t)v357, 1);
              *((_DWORD *)_X21 + 13) = 0;
              *(int8x8_t *)v196.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v354, 2)), 4uLL);
              v196.i64[1] = v187.u32[0];
              *(int8x8_t *)v187.i8 = vext_s8((int8x8_t)vneg_f32(*(float32x2_t *)v187.i8), (int8x8_t)v338, 4uLL);
              v197 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32((float32x2_t)vdup_n_s32(0x3F3504F3u), vabs_f32((float32x2_t)vdup_lane_s32(v338, 0))), 0), 0x1FuLL)), v196, v187);
              v198 = vmulq_f32(v310, v354);
              v198.i64[0] = vpaddq_f32(v198, v198).u64[0];
              v199 = vmulq_n_f32(v354, vpadd_f32(*(float32x2_t *)v198.f32, *(float32x2_t *)v198.f32).f32[0]);
              v199.i32[3] = 0;
              v200 = vsubq_f32(v310, v199);
              v201 = vmulq_f32(v200, v200);
              v201.i64[0] = vpaddq_f32(v201, v201).u64[0];
              v202 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v201.f32, *(float32x2_t *)v201.f32), (float32x2_t)vdup_n_s32(0x38D1B717u)), 0), (int8x16_t)v200, v197);
              v203 = vmulq_f32(v202, v202);
              v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
              v204 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
              v205 = vrsqrte_f32(v204);
              v206 = 4;
              v91 = v352;
              v90 = v353;
              v99 = v343;
              v92 = v344;
              v100 = v342;
              v106 = v350;
              v103 = v351;
              v105 = v349;
              do
              {
                v205 = vmul_f32(v205, vrsqrts_f32(vmul_f32(v205, v205), v204));
                --v206;
              }
              while (v206);
              __asm { FMOV            V4.2S, #1.0 }
              v208 = vmul_f32(v204, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v204), 0), _D4, (int8x8_t)v205));
              v209 = vrecpe_f32(v208);
              v210 = 4;
              do
              {
                v209 = vmul_f32(v209, vrecps_f32(v208, v209));
                --v210;
              }
              while (v210);
              *((_QWORD *)_X21 + 7) = v311 + 104 * v88;
              if (*v195)
              {
                v211 = 0;
                v212 = (float32x2_t)vextq_s8((int8x16_t)v354, (int8x16_t)v354, 8uLL).u64[0];
                v213 = vmulq_n_f32(v202, v209.f32[0]);
                v214 = v213;
                v214.i32[3] = 0;
                v215 = (float32x2_t)vextq_s8((int8x16_t)v214, (int8x16_t)v214, 8uLL).u64[0];
                v216 = (float32x2_t)vext_s8(*(int8x8_t *)v213.f32, (int8x8_t)v215, 4uLL);
                v355 = vneg_f32(v215);
                v217 = (int8x8_t)vmls_f32(vmul_f32(v212, *(float32x2_t *)v213.f32), v357, v215);
                v218 = vneg_f32(*(float32x2_t *)v213.f32);
                v219 = (int8x8_t)vmls_f32(vmul_f32(v357, v216), (float32x2_t)vext_s8((int8x8_t)v357, (int8x8_t)v212, 4uLL), *(float32x2_t *)v213.f32);
                v220 = (float32x2_t)vext_s8(v219, v217, 4uLL);
                *(float32x2_t *)v221.f32 = v220;
                v221.i64[1] = v219.u32[0];
                v222 = vmulq_f32(v314, v214);
                v222.i64[0] = vpaddq_f32(v222, v222).u64[0];
                v358 = vpadd_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32);
                v223 = vmulq_f32(v313, v214);
                v223.i64[0] = vpaddq_f32(v223, v223).u64[0];
                v341 = vpadd_f32(*(float32x2_t *)v223.f32, *(float32x2_t *)v223.f32);
                v224 = v214;
                v224.i32[3] = 0;
                v339 = v224;
                v225 = (float32x2_t)vext_s8((int8x8_t)v220, (int8x8_t)v219.u32[0], 4uLL);
                v226 = vneg_f32((float32x2_t)v219.u32[0]);
                v227 = vneg_f32(v220);
                v228 = vmulq_f32(v314, v221);
                v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
                v337 = vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32);
                v229 = vmulq_f32(v313, v221);
                v229.i64[0] = vpaddq_f32(v229, v229).u64[0];
                v336 = vpadd_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32);
                v230 = v221;
                v230.i32[3] = 0;
                v335 = v230;
                _X12 = (float32x4_t *)((char *)v132 + 4 * ((v120 + 3) & 0xFFFFFFFC));
                do
                {
                  __asm
                  {
                    PRFM            #0, [X12,#0x100]
                    PRFM            #0, [X12,#0x180]
                  }
                  v234 = *(unsigned __int16 *)(a2 + 4 * v87 + 2 * v211 + 7556);
                  if (v234 == 0xFFFF)
                    v234 = *(unsigned __int16 *)(a2 + 44 * *(unsigned int *)(v119 + 7424));
                  v235 = a2 + 104 * v87 + 12 * v211;
                  v236.i64[0] = *(_QWORD *)(v235 + 2856);
                  v236.i64[1] = *(unsigned int *)(v235 + 2864);
                  v237.i64[0] = *(_QWORD *)(v235 + 2880);
                  v237.i64[1] = *(unsigned int *)(v235 + 2888);
                  v238 = vmulq_n_f32(v236, v329);
                  v238.i32[3] = 0;
                  v239 = (float32x2_t)vextq_s8((int8x16_t)v236, (int8x16_t)v236, 8uLL).u64[0];
                  v240 = (int8x8_t)vmls_f32(vmul_f32(v334, (float32x2_t)vext_s8(*(int8x8_t *)v236.f32, (int8x8_t)v239, 4uLL)), v325, *(float32x2_t *)v236.f32);
                  *(int8x8_t *)v241.f32 = vext_s8(v240, (int8x8_t)vmls_f32(vmul_f32(v326, *(float32x2_t *)v236.f32), v334, v239), 4uLL);
                  v241.i64[1] = v240.u32[0];
                  v242 = vmlaq_f32(v238, v331, v241);
                  v242.i64[1] = vextq_s8((int8x16_t)v242, (int8x16_t)v242, 8uLL).u32[0];
                  v243 = vmulq_f32(v332, v236);
                  v243.i64[0] = vpaddq_f32(v243, v243).u64[0];
                  v244 = vmlaq_n_f32(v242, v332, vpadd_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v243.f32).f32[0]);
                  v245 = vaddq_f32(v244, v244);
                  v246 = v245;
                  v246.i32[3] = 0;
                  v247 = vmulq_n_f32(v237, v330);
                  v247.i32[3] = 0;
                  v244.i64[0] = vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL).u64[0];
                  v248 = (int8x8_t)vmls_f32(vmul_f32(v333, (float32x2_t)vext_s8(*(int8x8_t *)v237.f32, *(int8x8_t *)v244.f32, 4uLL)), v323, *(float32x2_t *)v237.f32);
                  *(int8x8_t *)v249.f32 = vext_s8(v248, (int8x8_t)vmls_f32(vmul_f32(v324, *(float32x2_t *)v237.f32), v333, *(float32x2_t *)v244.f32), 4uLL);
                  v249.i64[1] = v248.u32[0];
                  v250 = vmlaq_f32(v247, v327, v249);
                  v189 = (char *)&_X12[8];
                  v250.i64[1] = vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL).u32[0];
                  v251 = vmulq_f32(v328, v237);
                  v251.i64[0] = vpaddq_f32(v251, v251).u64[0];
                  v252 = vmlaq_n_f32(v250, v328, vpadd_f32(*(float32x2_t *)v251.f32, *(float32x2_t *)v251.f32).f32[0]);
                  v253 = vaddq_f32(v252, v252);
                  v254 = v253;
                  v254.i32[3] = 0;
                  v255 = vaddq_f32(v99, v246);
                  v256 = vaddq_f32(v100, v254);
                  v257 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v255, v256), (int8x16_t)vcgtq_f32(v92, vabdq_f32(v255, v256)));
                  v258 = v89 + ((unint64_t)v234 << 6);
                  v259 = (float32x2_t)vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u64[0];
                  v260 = (float32x2_t)vext_s8(*(int8x8_t *)v245.f32, (int8x8_t)v259, 4uLL);
                  *(float32x2_t *)v255.f32 = vmla_f32(vmul_f32(v216, *(float32x2_t *)v245.f32), v260, v218);
                  *(int8x8_t *)v246.f32 = vext_s8(*(int8x8_t *)v255.f32, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v213.f32, v259), *(float32x2_t *)v245.f32, v355), 4uLL);
                  v246.i64[1] = v255.u32[0];
                  v261.i64[0] = *(_QWORD *)(v258 + 32);
                  v262 = (float32x2_t)vextq_s8((int8x16_t)v254, (int8x16_t)v254, 8uLL).u64[0];
                  v263 = (float32x2_t)vext_s8(*(int8x8_t *)v253.f32, (int8x8_t)v262, 4uLL);
                  *(float32x2_t *)v255.f32 = vmla_f32(vmul_f32(v216, *(float32x2_t *)v253.f32), v263, v218);
                  *(int8x8_t *)v256.f32 = vext_s8(*(int8x8_t *)v255.f32, (int8x8_t)vmla_f32(vmul_f32(*(float32x2_t *)v213.f32, v262), *(float32x2_t *)v253.f32, v355), 4uLL);
                  v256.i64[1] = v255.u32[0];
                  v264 = *(_DWORD *)(v258 + 40);
                  v265 = (float32x4_t)vbicq_s8((int8x16_t)v246, (int8x16_t)vcgtq_f32(v92, vabsq_f32(v246)));
                  v266 = vmulq_n_f32(v350, v265.f32[0]);
                  v266.i32[3] = 0;
                  v267 = vmulq_lane_f32(v365, *(float32x2_t *)v265.f32, 1);
                  v267.i32[3] = 0;
                  v268 = (float32x4_t)vbicq_s8((int8x16_t)v256, (int8x16_t)vcgtq_f32(v92, vabsq_f32(v256)));
                  v269 = vmulq_laneq_f32(v363, v265, 2);
                  v269.i32[3] = 0;
                  v270 = vaddq_f32(v269, vaddq_f32(v266, v267));
                  v271 = vmulq_n_f32(v367, v268.f32[0]);
                  v271.i32[3] = 0;
                  v272 = vmulq_lane_f32(v361, *(float32x2_t *)v268.f32, 1);
                  v272.i32[3] = 0;
                  v273 = vmulq_laneq_f32(v360, v268, 2);
                  v273.i32[3] = 0;
                  v274 = vaddq_f32(v273, vaddq_f32(v271, v272));
                  v275 = vmulq_f32(v270, v270);
                  v275.i64[0] = vpaddq_f32(v275, v275).u64[0];
                  v276 = vmulq_f32(v274, v274);
                  v276.i64[0] = vpaddq_f32(v276, v276).u64[0];
                  v277 = vadd_f32(vadd_f32(v345, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v275.f32, *(float32x2_t *)v275.f32), v353, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v276.f32, *(float32x2_t *)v276.f32), v352, 1), v347));
                  v278 = vrecpe_f32(v277);
                  v279 = 4;
                  do
                  {
                    v278 = vmul_f32(v278, vrecps_f32(v277, v278));
                    --v279;
                  }
                  while (v279);
                  v261.i64[1] = v264;
                  v280 = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v277), 0), (int8x8_t)vmul_f32(v278, v346));
                  v281 = vmulq_f32(v351, v265);
                  v281.i64[0] = vpaddq_f32(v281, v281).u64[0];
                  v282 = vmulq_f32(v349, v268);
                  v282.i64[0] = vpaddq_f32(v282, v282).u64[0];
                  *(float32x2_t *)v281.f32 = vsub_f32(vadd_f32(v358, vpadd_f32(*(float32x2_t *)v281.f32, *(float32x2_t *)v281.f32)), vadd_f32(v341, vpadd_f32(*(float32x2_t *)v282.f32, *(float32x2_t *)v282.f32)));
                  v283 = vmulq_f32(v214, v261);
                  v283.i64[0] = vpaddq_f32(v283, v283).u64[0];
                  v281.i32[0] = vsub_f32(vpadd_f32(*(float32x2_t *)v283.f32, *(float32x2_t *)v283.f32), *(float32x2_t *)v281.f32).u32[0];
                  v270.i32[3] = v280.i32[1];
                  v284 = vmulq_f32(v214, v257);
                  v284.i64[0] = vpaddq_f32(v284, v284).u64[0];
                  v274.i32[3] = vmul_n_f32(vpadd_f32(*(float32x2_t *)&v284, *(float32x2_t *)&v284), *(float *)&a5).i32[1];
                  _X12[1] = v270;
                  _X12[2] = v274;
                  v285 = (int8x8_t)vmla_f32(vmul_f32(v225, *(float32x2_t *)v245.f32), v260, v227);
                  *(int8x8_t *)v284.f32 = vext_s8(v285, (int8x8_t)vmla_f32(vmul_f32(v220, v259), *(float32x2_t *)v245.f32, v226), 4uLL);
                  *_X12 = v339;
                  v284.i64[1] = v285.u32[0];
                  *(float32x2_t *)v283.f32 = vmla_f32(vmul_f32(v225, *(float32x2_t *)v253.f32), v263, v227);
                  *(int8x8_t *)v286.i8 = vext_s8(*(int8x8_t *)v283.f32, (int8x8_t)vmla_f32(vmul_f32(v220, v262), *(float32x2_t *)v253.f32, v226), 4uLL);
                  v286.i64[1] = v283.u32[0];
                  _X12[3].i32[0] = v281.i32[0];
                  v92 = v344;
                  v287 = (float32x4_t)vbicq_s8((int8x16_t)v284, (int8x16_t)vcgtq_f32(v344, vabsq_f32(v284)));
                  v106 = v350;
                  v288 = vmulq_n_f32(v350, v287.f32[0]);
                  v288.i32[3] = 0;
                  v289 = vmulq_lane_f32(v365, *(float32x2_t *)v287.f32, 1);
                  v289.i32[3] = 0;
                  v290 = (float32x4_t)vbicq_s8(v286, (int8x16_t)vcgtq_f32(v344, vabsq_f32((float32x4_t)v286)));
                  v291 = vmulq_laneq_f32(v363, v287, 2);
                  v291.i32[3] = 0;
                  v111 = vaddq_f32(v291, vaddq_f32(v288, v289));
                  v292 = vmulq_n_f32(v367, v290.f32[0]);
                  v292.i32[3] = 0;
                  v293 = vmulq_lane_f32(v361, *(float32x2_t *)v290.f32, 1);
                  v293.i32[3] = 0;
                  v294 = vmulq_laneq_f32(v360, v290, 2);
                  v294.i32[3] = 0;
                  v295 = vaddq_f32(v294, vaddq_f32(v292, v293));
                  v296 = vmulq_f32(v111, v111);
                  v296.i64[0] = vpaddq_f32(v296, v296).u64[0];
                  v91 = v352;
                  v90 = v353;
                  v297 = vmulq_f32(v295, v295);
                  v297.i64[0] = vpaddq_f32(v297, v297).u64[0];
                  v298 = vadd_f32(vadd_f32(v345, vmul_lane_f32(vpadd_f32(*(float32x2_t *)v296.f32, *(float32x2_t *)v296.f32), v353, 1)), vsub_f32(vmul_lane_f32(vpadd_f32(*(float32x2_t *)v297.f32, *(float32x2_t *)v297.f32), v352, 1), v347));
                  v299 = vrecpe_f32(v298);
                  v300 = 4;
                  do
                  {
                    v299 = vmul_f32(v299, vrecps_f32(v298, v299));
                    --v300;
                  }
                  while (v300);
                  v301 = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v298), 0), (int8x8_t)vmul_f32(v299, v346));
                  v302 = vmulq_f32(v221, v261);
                  v302.i64[0] = vpaddq_f32(v302, v302).u64[0];
                  v103 = v351;
                  v303 = vmulq_f32(v351, v287);
                  v303.i64[0] = vpaddq_f32(v303, v303).u64[0];
                  v304 = vmulq_f32(v349, v290);
                  v105 = v349;
                  v304.i64[0] = vpaddq_f32(v304, v304).u64[0];
                  v111.i32[3] = v301.i32[1];
                  _X12[4] = v335;
                  _X12[5] = v111;
                  v305 = vmulq_f32(v221, v257);
                  v305.i64[0] = vpaddq_f32(v305, v305).u64[0];
                  v111.i32[1] = HIDWORD(a5);
                  v295.i32[3] = vmul_n_f32(vpadd_f32(*(float32x2_t *)&v305, *(float32x2_t *)&v305), *(float *)&a5).i32[1];
                  _X12[6] = v295;
                  _X12[7].i32[0] = vsub_f32(vpadd_f32(*(float32x2_t *)v302.f32, *(float32x2_t *)v302.f32), vsub_f32(vadd_f32(v337, vpadd_f32(*(float32x2_t *)v303.f32, *(float32x2_t *)v303.f32)), vadd_f32(v336, vpadd_f32(*(float32x2_t *)v304.f32, *(float32x2_t *)v304.f32)))).u32[0];
                  ++v211;
                  _X12 += 8;
                  v100 = v342;
                  v99 = v343;
                }
                while (v211 < (unsigned __int16)*v195);
              }
              goto LABEL_100;
            }
          }
          _X21[3] = 0;
          *_X21 = v320;
          *((_OWORD *)_X21 + 1) = v192;
          *((_DWORD *)_X21 + 1) = v316;
          *((_DWORD *)_X21 + 2) = v315;
          *((_DWORD *)_X21 + 13) = 0;
          v91 = v352;
          v90 = v353;
          v99 = v343;
          v92 = v344;
          v100 = v342;
          v106 = v350;
          v103 = v351;
          v105 = v349;
LABEL_100:
          ++v88;
          v86 = *(unsigned int *)(a2 + 7688);
          _X21 = v189;
          v95.i32[0] = v318;
          goto LABEL_101;
        }
      }
LABEL_105:
      *(_DWORD *)&v312[v309] = 0;
    }
    return 1;
  }
  v47 = 0;
  v48 = 0;
  if ((v37 & 8) != 0)
    v49 = 112;
  else
    v49 = 48;
  if ((v37 & 8) != 0)
    v50 = 8;
  else
    v50 = 7;
  v51 = (unsigned __int16 *)(a2 + 2818);
  v52 = (_DWORD *)(a2 + 7424);
  do
  {
    if (*v52 != 0xFFFF)
      ++v48;
    v53 = *(v52 - 32);
    if (v53)
    {
      v47 += v53 * v49 + ((4 * v53 + 12) & 0xFFFFFFF0) + 80;
      if ((*((_BYTE *)v51 - 1) & 1) == 0)
        v47 += *v51 << v50;
    }
    ++v52;
    v51 += 52;
    --v46;
  }
  while (v46);
  v359 = a4;
  v54 = (104 * v48 + 15) & 0xFFFFFFF0;
  v55 = (v47 + 15) & 0xFFFFFFF0;
  if (v55)
  {
    v56 = (**(uint64_t (***)(uint64_t, _QWORD))a3)(a3, v55 + 16);
    if (v56 == -1)
      v57 = 0;
    else
      v57 = (char *)v56;
  }
  else
  {
    v57 = 0;
  }
  v62 = v55;
  if (v55)
    v63 = v57 == 0;
  else
    v63 = 0;
  v64 = !v63;
  if (v54)
    v65 = v64 == 0;
  else
    v65 = 1;
  if (v65)
  {
    _X7 = 0;
  }
  else
  {
    v66 = v57;
    v67 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 8))(a3, (104 * v48 + 15) & 0xFFFFFFF0);
    v57 = v66;
    v38 = a1 + 56;
    if (v67 == -1)
      _X7 = 0;
    else
      _X7 = v67;
  }
  result = 0;
  if ((v64 & 1) == 0)
  {
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    *(_QWORD *)(v31 + 32) = 0;
    *(_WORD *)(v31 + 30) = 0;
    return result;
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_WORD *)(v31 + 30) = 0;
  if (v54)
    v68 = _X7 == 0;
  else
    v68 = 0;
  v60 = v62;
  a4 = v359;
  v61 = v366;
  v39 = a1 + 84;
  if (!v68)
    goto LABEL_51;
  return result;
}

uint64_t physx::Dy::getFrictionPatches(uint64_t a1, float *_X1, int a3, float *a4, float *a5, float a6, double a7, double a8, float a9, float a10, float a11, float a12, float a13)
{
  float v13;
  float v14;
  uint64_t v15;
  char v16;
  float *v17;
  float *v18;
  int v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;

  v15 = 1;
  if (_X1 && a3)
  {
    v16 = 0;
    v17 = _X1 + 18;
    v18 = _X1;
    do
    {
      __asm { PRFM            #0, [X1,#0x80] }
      v24 = *(unsigned __int8 *)v18;
      v18 += 26;
      if (!v24)
      {
        v25 = *((unsigned __int16 *)_X1 + 1);
        if (*((_WORD *)_X1 + 1))
        {
          if ((*((_BYTE *)_X1 + 1) & 2) == 0)
          {
            if ((v16 & 1) == 0)
            {
              v26 = a4[1];
              v27 = a4[2];
              v28 = a4[3];
              v29 = a5[4] - a4[4];
              v30 = a5[5] - a4[5];
              v31 = a5[6] - a4[6];
              v32 = v29 + v29;
              v33 = v30 + v30;
              v34 = v31 + v31;
              v35 = (float)(v28 * v28) + -0.5;
              v36 = (float)((float)-(float)(v26 * (float)(v30 + v30)) - (float)(*a4 * (float)(v29 + v29)))
                  - (float)(v27 * v34);
              a9 = (float)((float)(v28 * (float)((float)(v27 * (float)(v30 + v30)) - (float)(v26 * v34)))
                         + (float)((float)(v29 + v29) * v35))
                 - (float)(*a4 * v36);
              a10 = (float)((float)(v28 * (float)((float)(*a4 * v34) - (float)(v27 * v32)))
                          + (float)((float)(v30 + v30) * v35))
                  - (float)(v26 * v36);
              a11 = (float)((float)(v28 * (float)((float)(v26 * v32) - (float)(*a4 * v33))) + (float)(v34 * v35))
                  - (float)(v27 * v36);
              v38 = a5[2];
              v37 = a5[3];
              v39 = a5[1];
              a12 = (float)((float)((float)(v28 * *a5) - (float)(*a4 * v37)) - (float)(v26 * v38)) + (float)(v39 * v27);
              a13 = (float)((float)((float)(v28 * v39) - (float)(v26 * v37)) - (float)(v27 * *a5)) + (float)(v38 * *a4);
              v13 = (float)((float)((float)(v28 * v38) - (float)(v27 * v37)) - (float)(*a4 * v39)) + (float)(*a5 * v26);
              v14 = (float)((float)((float)(*a4 * *a5) + (float)(v28 * v37)) + (float)(v26 * v39)) + (float)(v27 * v38);
            }
            v40 = _X1[6];
            v41 = _X1[7] + _X1[7];
            v42 = _X1[8] + _X1[8];
            v43 = _X1[9] + _X1[9];
            v44 = (float)(v14 * v14) + -0.5;
            v45 = (float)(a13 * v42) + (float)(a12 * v41);
            v46 = (float)(v14 * (float)((float)(a13 * v43) - (float)(v13 * v42))) + (float)(v41 * v44);
            v47 = (float)(v14 * (float)((float)(v13 * v41) - (float)(a12 * v43))) + (float)(v42 * v44);
            v48 = (float)(a12 * v42) - (float)(a13 * v41);
            v49 = v45 + (float)(v13 * v43);
            v50 = v46 + (float)(a12 * v49);
            v51 = v47 + (float)(a13 * v49);
            v52 = (float)((float)(v14 * v48) + (float)(v43 * v44)) + (float)(v13 * v49);
            v54 = _X1[4];
            v53 = _X1[5];
            if ((float)((float)((float)(v53 * v51) + (float)(v54 * v50)) + (float)(v40 * v52)) > 0.999)
            {
              v55 = v17;
              while (1)
              {
                v56 = *(v55 - 2) + *(v55 - 2);
                v57 = *(v55 - 1) + *(v55 - 1);
                v58 = *v55 + *v55;
                v59 = (float)((float)(a13 * v57) + (float)(a12 * v56)) + (float)(v13 * v58);
                if (fabsf((float)((float)(v53* (float)(*(v55 - 7)- (float)(a10+ (float)((float)((float)(v14* (float)((float)(v58 * (float)-a12)+ (float)(v13 * v56)))+ (float)(v57 * v44))+ (float)(a13 * v59)))))+ (float)((float)(*(v55 - 8)- (float)(a9+ (float)((float)((float)(v14* (float)((float)(v57 * (float)-v13)+ (float)(a13 * v58)))+ (float)(v56 * v44))+ (float)(a12 * v59))))* v54))+ (float)((float)(*(v55 - 6)- (float)(a11+ (float)((float)((float)(v14
                                                                     * (float)((float)(v56 * (float)-a13)
                                                                             + (float)(a12 * v57)))
                                                             + (float)(v58 * v44))
                                                     + (float)(v13 * v59))))
                             * v40)) >= a6)
                  break;
                v55 += 3;
                if (!--v25)
                {
                  v60 = *(unsigned int *)(a1 + 7688);
                  if ((_DWORD)v60 != 32)
                  {
                    v61 = a1 + 4 * v60;
                    *(_DWORD *)(v61 + 7556) = -1;
                    v62 = v54 + v54;
                    v63 = v53 + v53;
                    v64 = v40 + v40;
                    v66 = a4[2];
                    v65 = a4[3];
                    v67 = (float)(v65 * v65) + -0.5;
                    v68 = a4[1];
                    v69 = (float)((float)(v63 * v68) + (float)(*a4 * v62)) + (float)(v66 * v64);
                    v70 = (float)((float)(v65 * (float)((float)(v68 * v64) - (float)(v66 * v63))) + (float)(v62 * v67))
                        + (float)(*a4 * v69);
                    v71 = (float)((float)(v65 * (float)((float)(v66 * v62) - (float)(*a4 * v64))) + (float)(v63 * v67))
                        + (float)(v68 * v69);
                    v72 = (float)((float)(v65 * (float)((float)(*a4 * v63) - (float)(v68 * v62))) + (float)(v64 * v67))
                        + (float)(v66 * v69);
                    v73 = (float *)(a1 + 12 * v60);
                    v73[1536] = v70;
                    v73[1537] = v71;
                    v73[1538] = v72;
                    *(_DWORD *)(v61 + 7296) = 0;
                    v74 = *(unsigned int *)(a1 + 7688);
                    v75 = a1 + 24 * v74;
                    *(_OWORD *)(v75 + 6528) = xmmword_2261A6E10;
                    *(int32x2_t *)(v75 + 6544) = vdup_n_s32(0xFE7FFFFF);
                    *(_DWORD *)(a1 + 4 * v74 + 7424) = 0xFFFF;
                    LODWORD(v74) = *(_DWORD *)(a1 + 7688);
                    *(_DWORD *)(a1 + 7688) = v74 + 1;
                    v76 = a1 + 104 * v74;
                    v78 = *((_OWORD *)_X1 + 4);
                    v77 = *((_OWORD *)_X1 + 5);
                    v79 = *((_QWORD *)_X1 + 12);
                    *(_OWORD *)(v76 + 2864) = *((_OWORD *)_X1 + 3);
                    *(_QWORD *)(v76 + 2912) = v79;
                    *(_OWORD *)(v76 + 2896) = v77;
                    *(_OWORD *)(v76 + 2880) = v78;
                    v80 = *(_OWORD *)_X1;
                    v81 = *((_OWORD *)_X1 + 1);
                    *(_OWORD *)(v76 + 2848) = *((_OWORD *)_X1 + 2);
                    *(_OWORD *)(v76 + 2832) = v81;
                    *(_OWORD *)(v76 + 2816) = v80;
                    break;
                  }
                  return 0;
                }
              }
            }
            v16 = 1;
          }
        }
      }
      v17 += 26;
      _X1 = v18;
      --a3;
    }
    while (a3);
    return 1;
  }
  return v15;
}

float32x2_t physx::Dy::setupExtSolverContact(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, _QWORD *a6, float32x4_t *a7, float32x4_t *a8, int8x8_t *a9, float32x2_t *a10, float32x2_t *a11, float32x2_t *a12, float32x2_t *a13, float32x2_t *a14, float32x2_t *a15, uint64_t a16, uint64_t a17, float32x2_t *a18, uint64_t a19, float32x4_t *a20,float32x4_t *a21)
{
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int8x8_t v29;
  float32x2_t v30;
  float v31;
  float32x4_t v32;
  int8x8_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x2_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x2_t ImpulseResponse;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  int8x8_t v62;
  float32x2_t v63;
  int32x2_t v64;
  int8x8_t v65;
  double v66;
  float32x2_t v67;
  double v68;
  float32x2_t v69;
  int8x8_t v70;
  float32x2_t v71;
  int8x8_t v72;
  float32x4_t v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x2_t result;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x2_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88[2];
  float32x4_t v89[3];

  v83 = *(int32x2_t *)(a16 + 12);
  v23.i32[0] = v83.i32[1];
  v23.i32[1] = *(_DWORD *)(a16 + 20);
  v23.i64[1] = *(unsigned int *)(a16 + 24);
  v24 = (int8x16_t)vsubq_f32(v23, *a7);
  v25 = (int8x16_t)vsubq_f32(v23, *a8);
  v26 = *(float32x4_t *)a9->i8;
  v27 = (float32x2_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v28 = (float32x2_t)vext_s8(*a9, (int8x8_t)v27, 4uLL);
  v29 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL), (float32x2_t)*a9), *(float32x2_t *)v24.i8, v27);
  v30 = vmls_f32(vmul_f32(*(float32x2_t *)v24.i8, v28), (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 4uLL), (float32x2_t)*a9);
  v31 = v30.f32[0];
  *(int8x8_t *)v32.f32 = vext_s8((int8x8_t)v30, v29, 4uLL);
  v32.i64[1] = v30.u32[0];
  v33 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v25.i8, v28), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 4uLL), (float32x2_t)*a9);
  *(int8x8_t *)v34.f32 = vext_s8(v33, (int8x8_t)vmls_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), (float32x2_t)*a9), *(float32x2_t *)v25.i8, v27), 4uLL);
  v34.i64[1] = v33.u32[0];
  v82 = v32;
  v35 = v32;
  if (*(__int16 *)(a1 + 16) == -1)
  {
    v36 = *(_QWORD *)(a1 + 8);
    v37 = *(float32x4_t *)(v36 + 44);
    v38 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 3);
    v38.i32[1] = *(_DWORD *)(v36 + 60);
    v38.i32[2] = *(_DWORD *)(v36 + 64);
    v39 = vmulq_lane_f32(*(float32x4_t *)(v36 + 32), v30, 1);
    v39.i32[3] = 0;
    v40 = vmulq_n_f32(v37, *(float *)v29.i32);
    v40.i32[3] = 0;
    v41 = vmulq_n_f32(v38, v31);
    v41.i32[3] = 0;
    v35 = vaddq_f32(vaddq_f32(v39, v40), v41);
  }
  v42 = *a12;
  v86 = *(float32x4_t *)a9->i8;
  v87 = v35;
  v43 = vnegq_f32(v26);
  v43.i32[3] = 0;
  v44 = vnegq_f32(v34);
  v81 = v34;
  if (*(__int16 *)(a2 + 16) == -1)
  {
    v45 = *(_QWORD *)(a2 + 8);
    v46 = *(float32x4_t *)(v45 + 44);
    v47 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 3);
    v47.i32[1] = *(_DWORD *)(v45 + 60);
    v47.i32[2] = *(_DWORD *)(v45 + 64);
    v48 = vmulq_n_f32(*(float32x4_t *)(v45 + 32), v44.f32[0]);
    v48.i32[3] = 0;
    v49 = vmulq_lane_f32(v46, *(float32x2_t *)v44.f32, 1);
    v49.i32[3] = 0;
    v50 = vmulq_laneq_f32(v47, v44, 2);
    v50.i32[3] = 0;
    v44 = vaddq_f32(vaddq_f32(v48, v49), v50);
  }
  else
  {
    v44.i32[3] = 0;
  }
  v84 = v43;
  v85 = v44;
  ImpulseResponse = physx::Dy::getImpulseResponse((uint64_t *)a1, &v86, v89, a3, a5, (uint64_t *)a2, &v84, v88, *(double *)v43.i64, *(float32x2_t *)v44.f32, a4, a6, a19);
  v52 = vaddq_f32(vmulq_f32(*a20, *(float32x4_t *)a9->i8), vmulq_f32(v82, a20[1]));
  v53 = vaddq_f32(vmulq_f32(*(float32x4_t *)a9->i8, *a21), vmulq_f32(v81, a21[1]));
  v54 = (int8x16_t)vsubq_f32(v52, v53);
  v55 = (float32x2_t)vextq_s8(v54, v54, 8uLL).u64[0];
  v56 = vadd_f32(ImpulseResponse, (float32x2_t)vdup_n_s32(0x38D1B717u));
  v57 = vrecpe_f32(v56);
  v58 = 4;
  do
  {
    v57 = vmul_f32(v57, vrecps_f32(v56, v57));
    --v58;
  }
  while (v58);
  v59 = vpadd_f32(*(float32x2_t *)v54.i8, v55);
  v60 = vsub_f32((float32x2_t)vdup_lane_s32(v83, 0), v42);
  v61 = vpadd_f32(v59, v59);
  v62 = (int8x8_t)vcgt_f32(*a15, v61);
  v63 = vneg_f32(v61);
  v64 = (int32x2_t)vand_s8((int8x8_t)vcgt_f32(v63, vmul_f32(v60, *a10)), vand_s8((int8x8_t)vcgtz_f32(*a14), v62));
  v65 = (int8x8_t)vdup_lane_s32(v64, 0);
  v66 = COERCE_DOUBLE(vand_s8(v65, (int8x8_t)vmul_f32(*a14, v63)));
  if (*(__int16 *)(a1 + 16) == -1)
  {
    v69 = (float32x2_t)vpaddq_f32(v52, v52).u64[0];
    v68 = COERCE_DOUBLE(vsub_f32(*(float32x2_t *)&v66, vpadd_f32(v69, v69)));
  }
  else
  {
    v67 = (float32x2_t)vpaddq_f32(v53, v53).u64[0];
    v68 = COERCE_DOUBLE(vadd_f32(vpadd_f32(v67, v67), *(float32x2_t *)&v66));
    if (*(__int16 *)(a2 + 16) != -1)
      v68 = v66;
  }
  v70 = (int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8(vand_s8((int8x8_t)v64, (int8x8_t)vcge_f32(*a18, v60))), 0);
  v71 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_n_s32(0x3727C5ACu), ImpulseResponse)), 0), (int8x8_t)v57);
  v72 = (int8x8_t)vmul_f32(vmax_f32(*a13, vmul_f32(v60, *a11)), v71);
  v73 = *(float32x4_t *)(a16 + 32);
  v73.i64[1] = *(unsigned int *)(a16 + 40);
  v74 = (float32x2_t)vand_s8(v70, v72);
  v75 = vmulq_f32(*(float32x4_t *)a9->i8, v73);
  v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
  *(float32x2_t *)v75.f32 = vadd_f32(*(float32x2_t *)&v68, vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32));
  v76 = vmla_f32(vneg_f32(v74), v71, *(float32x2_t *)v75.f32);
  *(int32x2_t *)(a17 + 32) = vzip1_s32((int32x2_t)v71, (int32x2_t)v76);
  *(_DWORD *)(a17 + 40) = vmla_f32((float32x2_t)vbic_s8((int8x8_t)vneg_f32(vmax_f32(v74, 0)), v65), v71, *(float32x2_t *)v75.f32).u32[0];
  *(_DWORD *)(a17 + 44) = *(_DWORD *)(a16 + 28);
  v77 = vnegq_f32(v85);
  v77.i32[3] = 0;
  result = vmax_f32(vmla_f32(v76, v71, v63), 0);
  *(float32x4_t *)a17 = v87;
  *(float32x4_t *)(a17 + 16) = v77;
  v79 = v89[1];
  *(float32x4_t *)(a17 + 48) = v89[0];
  *(float32x4_t *)(a17 + 64) = v79;
  v80 = v88[1];
  *(float32x4_t *)(a17 + 80) = v88[0];
  *(float32x4_t *)(a17 + 96) = v80;
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContacts4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, float a5, double a6, double a7, float a8, double a9, double a10, double a11, double a12)
{
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t *v17;
  uint64_t *v26;
  uint64_t v35;
  float v36;
  char v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  float32x4_t v43;
  char v44;
  uint64_t v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  int j;
  uint64_t v53;
  __int128 v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  float32x4_t v61;
  float32x4_t v62;

  for (i = 2; i != 106; i += 26)
    *(_WORD *)(a3[i] + 30) = 0;
  v13 = 0;
  v14 = 0;
  v15 = a2 + 16;
  *(_DWORD *)(a2 + 4112) = 0;
  while (1)
  {
    v16 = (float32x4_t *)&a3[26 * v13];
    v17 = (uint64_t *)v16[1].i64[0];
    v16[8].i64[1] = v15 + ((unint64_t)v14 << 6);
    _X3 = *v17;
    _X8 = v17[1];
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X8]
    }
    v26 = *(uint64_t **)(a1 + 8 * v13);
    if (v14 + *((unsigned __int8 *)v26 + 24) > 0x40)
      return 1;
    _X3 = a3[26 * v13 + 20];
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X3,#0x40]
      PRFM            #0, [X3,#0x80]
    }
    _X7 = *v26;
    if (v13 >= 3)
    {
      _X19 = v26[1];
    }
    else
    {
      __asm { PRFM            #0, [X7] }
      _X19 = v26[1];
      __asm { PRFM            #0, [X19] }
    }
    v35 = v16[2].i64[1];
    v36 = *(float *)(v16[3].i64[0] + 76);
    if (*(float *)(v35 + 76) < v36)
      v36 = *(float *)(v35 + 76);
    if (!_X7)
      break;
    v37 = *(_BYTE *)(_X7 + 43);
    v38 = (v37 & 2) != 0 ? 64 : 16;
    if ((*(_BYTE *)(_X7 + 43) & 4) != 0)
      break;
    v39 = *((unsigned __int8 *)v26 + 25);
    if (!*((_BYTE *)v26 + 25))
      break;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = *(float32x4_t *)_X7;
    if ((*(_BYTE *)(_X7 + 43) & 2) != 0)
      v44 = 6;
    else
      v44 = 4;
    if (v37 < 0)
      v45 = 32;
    else
      v45 = v38;
    v46 = v37 & 0xFFFFFF82;
    if (v37 < 0)
      v47 = 5;
    else
      v47 = v44;
    v48 = v14;
    do
    {
      if (v40)
      {
        v49 = *(unsigned __int8 *)(_X7 + 41);
        v50 = v49 > v41;
        LODWORD(v51) = (v49 - v41) << v47;
        if (v50)
          v51 = v51;
        else
          v51 = 0;
        _X19 += v51;
        _X7 += 48;
      }
      v41 = *(unsigned __int8 *)(_X7 + 41);
      if (*(_BYTE *)(_X7 + 41))
      {
        for (j = *(unsigned __int8 *)(_X7 + 41); j; --j)
        {
          if (v42)
            v53 = v45;
          else
            v53 = 0;
          _X19 += v53;
          __asm { PRFM            #0, [X19,#0x80] }
          _X3 = (_OWORD *)(v15 + ((unint64_t)v48 << 6));
          __asm { PRFM            #0, [X3,#0x80] }
          *(float *)&a12 = v36;
          if (((v37 >> 5) & 1) != 0)
          {
            if (!v46)
            {
              LODWORD(a12) = 2139095039;
LABEL_42:
              *(_QWORD *)&v57 = *(_QWORD *)(_X7 + 16);
              v58 = v15 + ((unint64_t)v48 << 6);
              DWORD2(v57) = *(_DWORD *)(_X7 + 24);
              HIDWORD(v57) = *(_DWORD *)(_X19 + 12);
              *_X3 = v57;
              *(_QWORD *)(v58 + 16) = *(_QWORD *)_X19;
              LODWORD(v57) = *(_DWORD *)(_X19 + 8);
              *(_BYTE *)(v58 + 48) = *(_BYTE *)(_X7 + 42);
              *(_DWORD *)(v58 + 24) = v57;
              *(_DWORD *)(v58 + 28) = LODWORD(a12);
              *(_DWORD *)(v58 + 44) = *(_DWORD *)(_X7 + 36);
              *(int32x2_t *)(v58 + 56) = vrev64_s32(*(int32x2_t *)(_X7 + 28));
              if (v46)
              {
                a12 = *(double *)(_X19 + 16);
                v59 = *(_DWORD *)(_X19 + 24);
              }
              else
              {
                a12 = 0.0;
                v59 = 0;
              }
              *(double *)(v58 + 32) = a12;
              *(_DWORD *)(v58 + 40) = v59;
              v48 = (v48 + 1);
              goto LABEL_46;
            }
            LODWORD(a12) = *(_DWORD *)(_X19 + 28);
          }
          if (*(float *)&a12 != 0.0)
            goto LABEL_42;
LABEL_46:
          v42 = 1;
        }
      }
      ++v40;
    }
    while (v40 != v39);
    *(_DWORD *)(a2 + 4112) = v48;
    if ((_DWORD)v48 == (_DWORD)v14)
      return 1;
    v60 = &a3[26 * v13];
    *((_DWORD *)v60 + 36) = v48 - v14;
    *((_BYTE *)v60 + 148) = (v37 & 0x20) != 0;
    *((_BYTE *)v60 + 149) = (*((unsigned __int8 *)v60 + 149) | v37 & 0x10) != 0;
    v61 = *v16;
    v62 = vmulq_f32(v43, *v16);
    *v16 = v62;
    ++v13;
    v14 = v48;
    if (v13 == 4)
      return physx::Dy::createFinalizeSolverContacts4(a2 + 4128, a3, a4, a5, a6, a7, a8, a9, v62.f32[0], v61.f32[0], *(float *)&a12);
  }
  *(_DWORD *)(a2 + 4112) = v14;
  return 1;
}

uint64_t physx::Dy::createFinalizeSolverContacts4Coulomb1D(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t (***a4)(_QWORD), double a5, int32x2_t a6, double a7, double a8, float a9)
{
  *(float *)&a7 = a9;
  return physx::Dy::createFinalizeSolverContacts4Coulomb(a1, a2, a3, a4, 1, a5, a6, *(int32x2_t *)&a7);
}

uint64_t physx::Dy::createFinalizeSolverContacts4Coulomb2D(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t (***a4)(_QWORD), double a5, int32x2_t a6, double a7, double a8, float a9)
{
  *(float *)&a7 = a9;
  return physx::Dy::createFinalizeSolverContacts4Coulomb(a1, a2, a3, a4, 2, a5, a6, *(int32x2_t *)&a7);
}

uint64_t physx::Dy::createFinalizeSolverContacts4(uint64_t a1, _QWORD *a2, uint64_t a3, float a4, double a5, double a6, float a7, double a8, float a9, float a10, float a11)
{
  float v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  int FrictionPatches;
  _QWORD *v22;
  unsigned int *v23;
  uint64_t *v24;
  unsigned int v25;
  float *v26;
  float *v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  float32x4_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int *v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  int v65;
  int *v66;
  int *v67;
  uint64_t v68;
  int v69;
  int v70;
  _BOOL4 v71;
  uint64_t i;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v78;
  uint64_t j;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD *v101;
  _BOOL4 v102;
  _BOOL4 v103;
  _BOOL4 v104;
  float32x4_t v105;
  int32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  char v205;
  float32x4_t *v206;
  int8x8_t v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  float32x4_t v221;
  unsigned int v222;
  unsigned int v223;
  __int8 v224;
  int32x4_t v225;
  int32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t v230;
  uint64_t v231;
  float32x4_t v232;
  float32x4_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  int v246;
  _BOOL4 v247;
  int v248;
  int v249;
  int v250;
  float32x4_t v252;
  float32x4_t *v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int32x4_t *v268;
  int32x4_t *v269;
  int32x4_t *v270;
  int32x4_t *v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  unsigned int v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  int v324;
  float32x4_t v325;
  float32x4_t v326;
  int8x16_t v327;
  float32x4_t v328;
  float32x4_t v329;
  int8x16_t v330;
  __int128 v331;
  unsigned int v332;
  uint64_t v333;
  _BOOL4 v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  uint64_t v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  int v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int v350;
  unsigned __int32 v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unsigned int v355;
  unsigned __int32 v356;
  unsigned __int32 v357;
  uint64_t v358;
  unsigned int v359;
  unsigned __int32 v360;
  unsigned __int32 v361;
  uint64_t v362;
  unsigned int v363;
  unsigned __int32 v364;
  unsigned __int32 v365;
  unsigned __int32 v366;
  unsigned __int32 v367;
  uint64_t v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t *v375;
  int8x16_t v376;
  float32x4_t v377;
  float32x4_t v378;
  int8x16_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  int8x16_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  int v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  size_t v398;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  unsigned __int32 v408;
  unsigned __int32 v409;
  unsigned __int32 v410;
  unsigned __int32 v411;
  unsigned __int32 v412;
  float v414;
  float32x4_t v415;
  uint64_t v419;
  float32x2_t v420;
  float32x4_t v421;
  uint64_t v422;
  float32x2_t v423;
  float32x4_t v424;
  uint64_t v425;
  float32x2_t v426;
  float32x4_t v427;
  uint64_t v428;
  float32x2_t v429;
  float32x4_t v430;
  float32x2_t v431;
  float32x4_t v432;
  float32x2_t v433;
  float32x4_t v434;
  float32x2_t v435;
  float32x4_t v436;
  float32x2_t v437;
  float32x4_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  int32x4_t *v443;
  int32x4_t v444;
  int32x4_t *v445;
  int32x4_t v446;
  int32x4_t *v447;
  int32x4_t v448;
  int32x4_t *v449;
  int8x16_t v450;
  int8x16_t v451;
  int8x16_t v452;
  float32x4_t v453;
  int8x16_t v454;
  int8x16_t v455;
  int8x16_t v456;
  float32x2_t v457;
  int8x8_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  int8x8_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  int32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  int32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  int32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  int32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  float32x4_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t *v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  int v555;
  float32x4_t v556;
  int8x16_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  int v582;
  float32x4_t v583;
  float32x4_t v584;
  unsigned int v585;
  uint64_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  uint64_t v590;
  uint64_t v591;
  char v592;
  float32x4_t v593;
  float32x4_t v594;
  unsigned int v595;
  __int8 v596;
  __int8 v597;
  __int8 v598;
  __int8 v599;
  float32x4_t v600;
  unsigned int v601;
  uint64_t v602;
  uint64_t v603;
  __int8 v604;
  __int8 v605;
  float32x4_t v606;
  int32x4_t *v607;
  int32x4_t *v608;
  int32x4_t *v609;
  float32x4_t *v610;
  _BOOL4 v611;
  _BOOL4 v612;
  _BOOL4 v613;
  int v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  float32x4_t v620;
  uint64_t v621;
  float32x4_t v622;
  uint64_t v623;
  float32x4_t v624;
  int32x4_t *v625;
  float32x4_t *v626;
  _BOOL4 v627;
  uint64_t v628;
  uint64_t v629;
  unsigned int v630;
  float32x4_t v631;
  unsigned int v632;
  float32x4_t v633;
  unsigned int v634;
  float32x4_t v635;
  unsigned int v636;
  uint64_t v637;
  unsigned int v638;
  unsigned int v639;
  unsigned int v640;
  float32x4_t v642;
  float v643;
  float32x4_t v644;
  uint64_t v645;
  _BOOL4 v647;
  float32x2_t v648;
  float32x2_t v649;
  float32x2_t v650;
  float32x2_t v651;
  float32x2_t v652;
  float32x2_t v653;
  float32x2_t v654;
  float32x2_t v655;
  float32x2_t v656;
  float32x2_t v657;
  float32x2_t v658;
  float32x2_t v659;
  float32x2_t v660;
  float32x2_t v661;
  float32x2_t v662;
  float32x2_t v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x2_t v673;
  float v674;
  float32x4_t v675;
  float32x2_t v676;
  float v677;
  float32x4_t v678;
  float32x2_t v679;
  float v680;
  float32x4_t v681;
  float32x2_t v682;
  float v683;
  float v684;
  float32x4_t v685;
  float32x2_t v686;
  float32x4_t v687;
  float32x2_t v688;
  float v689;
  float32x4_t v690;
  float32x2_t v691;
  float v692;
  float32x4_t v693;
  float32x2_t v694;
  float v695;
  unsigned int v696;
  unsigned __int32 v697;
  float32x4_t v698;
  unsigned int v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  _BOOL4 v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float32x4_t v723;
  float32x4_t v724;
  _QWORD *v725;
  float32x4_t v726;
  int32x2_t v727;
  float32x4_t v728;
  _QWORD *v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  float32x4_t v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x4_t v741;
  float32x4_t v742;
  float32x4_t v743;
  float32x4_t v745;
  uint64_t v746;
  float32x4_t v747;
  float32x4_t v749;
  _DWORD v750[8];
  _OWORD v751[2];
  float32x4_t v752;
  float32x4_t v753;
  float32x4_t v754;
  float32x4_t v755;
  _OWORD v756[8];
  _OWORD v757[8];
  uint64_t v758;

  v12 = *(float *)&a6;
  v727 = *(int32x2_t *)&a5;
  v13 = a2;
  LODWORD(v15) = 0;
  v16 = 0;
  v758 = *MEMORY[0x24BDAC8D0];
  v729 = a2 + 85;
  v725 = a2 + 33;
  v746 = a1 + 7684;
  *(_QWORD *)(a1 + 7684) = 0;
  v17 = a1 + 7296;
  v18 = a1 + 7424;
  do
  {
    v19 = &v13[26 * v16];
    LODWORD(a5) = *((_DWORD *)v19 + 1);
    v755.i32[v16] = *(_DWORD *)v19;
    LODWORD(a6) = *((_DWORD *)v19 + 3);
    v754.i32[v16] = *((_DWORD *)v19 + 2);
    v753.i32[v16] = LODWORD(a5);
    v752.i32[v16] = LODWORD(a6);
    *((_DWORD *)v19 + 46) = v15;
    v20 = (unsigned int *)(v19 + 23);
    if (!*((_BYTE *)v19 + 149))
    {
      FrictionPatches = physx::Dy::getFrictionPatches(a1, (float *)v13[26 * v16 + 20], LOBYTE(v13[26 * v16 + 21]), (float *)v19 + 14, (float *)v19 + 21, a7, a5, a6, a7, *(float *)&a8, a9, a10, a11);
      v13 = a2;
      if (!FrictionPatches)
        return 1;
    }
    v22 = &v13[26 * v16];
    *((_DWORD *)v22 + 48) = *(_DWORD *)(a1 + 7684);
    v23 = (unsigned int *)(v22 + 24);
    v24 = (uint64_t *)(v23 - 14);
    if (!physx::Dy::createContactPatches(a1, *((_QWORD *)v23 - 7), *(v23 - 12), 0.999))
      return 1;
    v25 = *v23;
    WORD2(v13[26 * v16 + 24]) = *(_WORD *)(a1 + 7684) - *v23;
    v26 = (float *)(v19 + 7);
    v27 = (float *)v19 + 21;
    if ((physx::Dy::correlatePatches(a1, *v24, v26, v27, v25, *v20, 0.999) & 1) != 0)
      return 1;
    physx::Dy::growPatches(a1, *v24, v26, v27, *v20, a7, *(float *)&v13[26 * v16 + 19] + v12);
    LODWORD(v15) = *(_DWORD *)(a1 + 7688);
    v28 = *v20;
    if (v15 <= *v20)
    {
      v30 = a4;
      v13 = a2;
    }
    else
    {
      v29 = *(_DWORD *)(a1 + 7688);
      v30 = a4;
      v13 = a2;
      do
      {
        v31 = v29 - 1;
        if (*(_DWORD *)(a1 + 4 * (v29 - 1) + 7424) == 0xFFFF)
        {
          if (v29 < v15)
          {
            v32 = v29;
            do
            {
              v33 = a1 + 4 * (v32 - 1);
              *(_DWORD *)(v33 + 7424) = *(_DWORD *)(v18 + 4 * v32);
              *(_DWORD *)(v33 + 7296) = *(_DWORD *)(v17 + 4 * v32++);
              v15 = *(unsigned int *)(a1 + 7688);
            }
            while (v32 < v15);
            v28 = *v20;
          }
          LODWORD(v15) = v15 - 1;
          *(_DWORD *)(a1 + 7688) = v15;
        }
        v29 = v31;
      }
      while (v31 > v28);
    }
    HIDWORD(v13[26 * v16++ + 23]) = v15 - v28;
  }
  while (v16 != 4);
  v34 = 0;
  memset(v751, 0, sizeof(v751));
  do
  {
    v35 = &v13[26 * v34];
    v36 = *((unsigned int *)v35 + 46);
    v37 = (*((_DWORD *)v35 + 47) + v36);
    if (v36 >= v37)
    {
      v750[v34 + 4] = 0;
LABEL_31:
      *((_QWORD *)v751 + v34) = 0;
      goto LABEL_32;
    }
    v38 = 0;
    v39 = v37 - v36;
    v40 = (int *)(a1 + 7424 + 4 * v36);
    do
    {
      v41 = *v40++;
      if (v41 != 0xFFFF)
        ++v38;
      --v39;
    }
    while (v39);
    v750[v34 + 4] = v38;
    v42 = 104 * v38 + 15;
    if ((v42 & 0xFFFFFFF0) == 0)
      goto LABEL_31;
    v43 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 8))(a3, v42 & 0xFFFFFFF0);
    v13 = a2;
    v30 = a4;
    if (v43 == -1)
      v44 = 0;
    else
      v44 = v43;
    *((_QWORD *)v751 + v34) = v44;
    if (!v44)
      return 0;
LABEL_32:
    ++v34;
  }
  while (v34 != 4);
  v45 = 0;
  LODWORD(v46) = 0;
  LOBYTE(v47) = 0;
  v48.i32[3] = 0;
  memset(v757, 0, sizeof(v757));
  memset(v756, 0, sizeof(v756));
  do
  {
    v47 = v47 || BYTE4(v13[26 * v45 + 18]) != 0;
    v49 = HIDWORD(v13[26 * v45 + 23]);
    if (v49)
    {
      v50 = 0;
      v51 = v13[26 * v45 + 23];
      v52 = (int *)v756;
      v53 = (unsigned int *)v757;
      v54 = HIDWORD(v13[26 * v45 + 23]);
      do
      {
        v55 = v51;
        v56 = (*(_BYTE *)(a1 + 104 * v51 + 2817) & 1) == 0 && *(_WORD *)(a1 + 104 * v51 + 2818) != 0;
        v57 = *(_DWORD *)(a1 + 4 * v55 + 7296);
        if (v57)
        {
          v58 = *v53;
          if (v57 > *v53)
            v58 = *(_DWORD *)(a1 + 4 * v55 + 7296);
          *v53 = v58;
          v50 += v57;
          if (v56)
          {
            v59 = *(unsigned __int16 *)(a1 + 104 * v55 + 2818);
            v60 = 2 * v59;
            if (2 * v59 <= *v52)
              v60 = *v52;
            *v52 = v60;
            v50 += 2 * v59;
          }
        }
        ++v52;
        ++v53;
        v51 = v55 + 1;
        --v54;
      }
      while (v54);
    }
    else
    {
      v50 = 0;
    }
    if (v49 <= v46)
      v46 = v46;
    else
      v46 = v49;
    v750[v45++] = v50;
  }
  while (v45 != 4);
  v61 = 0;
  if ((_DWORD)v46)
  {
    v62 = v756;
    v63 = v46;
    do
    {
      if (*v62++)
        ++v61;
      --v63;
    }
    while (v63);
    v65 = 0;
    v66 = (int *)v756;
    v67 = (int *)v757;
    v68 = v46;
    do
    {
      v69 = *v67++;
      v65 += v69;
      v70 = *v66++;
      LODWORD(v63) = v70 + v63;
      --v68;
    }
    while (v68);
    v61 *= 144;
  }
  else
  {
    v65 = 0;
    LODWORD(v63) = 0;
  }
  LOBYTE(v71) = 0;
  for (i = 116; i != 948; i += 208)
    v71 = v71 || *(_DWORD *)((char *)v13 + i) == 1;
  v73 = v63 + v65;
  if (v71)
    v74 = 144;
  else
    v74 = 96;
  if (v47)
    v75 = v65;
  else
    v75 = 0;
  v76 = v61 + 208 * v46 + 16 * (v73 + v75) + v74 * v73;
  if (v76)
  {
    if (v76 + 16 > 0x4000)
      return 1;
    v78 = (**(uint64_t (***)(uint64_t))a3)(a3);
    if ((unint64_t)(v78 + 1) < 2)
      return 0;
    v30 = a4;
    v13 = a2;
  }
  else
  {
    v78 = 0;
  }
  for (j = 0; j != 4; ++j)
  {
    _X17 = *((_QWORD *)v751 + j);
    v81 = &v13[26 * j];
    v82 = v81[2];
    v81[20] = _X17;
    *((_BYTE *)v81 + 168) = v750[j + 4];
    if (_X17)
    {
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X17,#0x80]
        PRFM            #0, [X17,#0x100]
      }
      v90 = &v13[26 * j];
      v93 = *((_DWORD *)v90 + 47);
      v92 = (unsigned int *)v90 + 47;
      v91 = v93;
      if (v93)
      {
        v94 = 0;
        do
        {
          v95 = v94 + LODWORD(v13[26 * j + 23]);
          if (*(_DWORD *)(a1 + 4 * v95 + 7424) != 0xFFFF)
          {
            v96 = a1 + 104 * v95;
            v97 = *(_OWORD *)(v96 + 2816);
            v98 = *(_OWORD *)(v96 + 2848);
            *(_OWORD *)(_X17 + 16) = *(_OWORD *)(v96 + 2832);
            *(_OWORD *)(_X17 + 32) = v98;
            *(_OWORD *)_X17 = v97;
            v48 = *(float32x4_t *)(v96 + 2864);
            v99 = *(_OWORD *)(v96 + 2880);
            v100 = *(_OWORD *)(v96 + 2896);
            *(_QWORD *)(_X17 + 96) = *(_QWORD *)(v96 + 2912);
            *(_OWORD *)(_X17 + 64) = v99;
            *(_OWORD *)(_X17 + 80) = v100;
            *(float32x4_t *)(_X17 + 48) = v48;
            _X17 += 104;
            v91 = *v92;
          }
          ++v94;
        }
        while (v94 < v91);
      }
    }
    v101 = &v13[26 * j];
    *((_WORD *)v101 + 99) += v750[j];
    *(_QWORD *)(v82 + 32) = v78;
    *(_WORD *)(v82 + 30) = v76 >> 4;
    *(_WORD *)(v82 + 28) = *((_DWORD *)v101 + 36);
    *(_QWORD *)(v82 + 40) = v101[22];
  }
  v585 = v76;
  v102 = *((_BYTE *)v13 + 148) || *((_BYTE *)v13 + 356) || *((_BYTE *)v13 + 564) || *((_BYTE *)v13 + 772) != 0;
  LOBYTE(v103) = 0;
  LOBYTE(v104) = 0;
  v749 = v753;
  v48.i32[2] = *((_DWORD *)v13 + 143);
  v48.i32[1] = *((_DWORD *)v13 + 91);
  v48.i32[0] = *((_DWORD *)v13 + 39);
  v105 = v48;
  v105.i32[3] = *((_DWORD *)v13 + 195);
  v600 = v105;
  v106 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
  v714 = v752;
  v598 = *((_BYTE *)v13 + 358);
  v599 = *((_BYTE *)v13 + 150);
  v107 = 116;
  v596 = *((_BYTE *)v13 + 774);
  v597 = *((_BYTE *)v13 + 566);
  while (2)
  {
    if (v103)
    {
      v103 = 1;
      if (!v104)
        goto LABEL_98;
LABEL_100:
      v104 = 1;
    }
    else
    {
      v103 = *(_DWORD *)((char *)v13 + v107) == 1;
      if (v104)
        goto LABEL_100;
LABEL_98:
      v104 = *(_DWORD *)((char *)v13 + v107) == 4;
    }
    v107 += 208;
    if (v107 != 948)
      continue;
    break;
  }
  v586 = v78;
  if (v103)
    v108 = 144;
  else
    v108 = 96;
  v645 = v108;
  _X8 = a1 + 7556;
  __asm { PRFM            #0, [X8] }
  _X8 = v746;
  __asm { PRFM            #0, [X8] }
  v113 = *((_DWORD *)v13 + 47);
  v114 = *((_DWORD *)v13 + 99);
  v115 = *((_DWORD *)v13 + 151);
  if (v115 <= *((_DWORD *)v13 + 203))
    v115 = *((_DWORD *)v13 + 203);
  if (v114 <= v115)
    v114 = v115;
  if (v113 <= v114)
    v113 = v114;
  v595 = v113;
  if (v113)
  {
    v602 = 0;
    v603 = 0;
    v637 = 0;
    v636 = 0;
    v601 = 0;
    v701 = 0;
    v700 = 0;
    v702 = 0;
    v116 = 0;
    v699 = 0;
    v118 = v13[5];
    v117 = v13[6];
    v120 = v13[31];
    v119 = v13[32];
    v122.i32[0] = *(_DWORD *)(v118 + 64);
    v121.i32[0] = *(_DWORD *)(v118 + 68);
    v121.i32[1] = *(_DWORD *)(v120 + 68);
    v124 = v13[57];
    v123 = v13[58];
    v121.i32[2] = *(_DWORD *)(v124 + 68);
    v125 = v13[83];
    v121.i32[3] = *(_DWORD *)(v125 + 68);
    v127.i32[0] = *(_DWORD *)(v117 + 64);
    v126.i32[0] = *(_DWORD *)(v117 + 68);
    v126.i32[1] = *(_DWORD *)(v119 + 68);
    v126.i32[2] = *(_DWORD *)(v123 + 68);
    v128 = v13[84];
    v126.i32[3] = *(_DWORD *)(v128 + 68);
    v594 = vmaxq_f32(v121, v126);
    v129 = *(int32x4_t *)(v118 + 16);
    v130 = *(int32x4_t *)(v124 + 16);
    v131 = vzip1q_s32(*(int32x4_t *)v118, *(int32x4_t *)v124);
    v132 = *(int32x4_t *)(v120 + 16);
    v133 = *(int32x4_t *)(v125 + 16);
    v134 = vzip1q_s32(*(int32x4_t *)v120, *(int32x4_t *)v125);
    v135 = (float32x4_t)vzip1q_s32(v131, v134);
    v136 = (float32x4_t)vzip2q_s32(v131, v134);
    v137 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v118, *(int32x4_t *)v124), vzip2q_s32(*(int32x4_t *)v120, *(int32x4_t *)v125));
    v138 = *(int32x4_t *)(v117 + 16);
    v139 = *(int32x4_t *)(v123 + 16);
    v140 = vzip1q_s32(*(int32x4_t *)v117, *(int32x4_t *)v123);
    v141 = *(int32x4_t *)(v119 + 16);
    v142 = *(int32x4_t *)(v128 + 16);
    v733 = (float32x4_t)v106;
    v143 = vzip1q_s32(*(int32x4_t *)v119, *(int32x4_t *)v128);
    v144 = (float32x4_t)vzip1q_s32(v140, v143);
    v145 = (float32x4_t)vzip2q_s32(v140, v143);
    v146 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v117, *(int32x4_t *)v123), vzip2q_s32(*(int32x4_t *)v119, *(int32x4_t *)v128));
    v147 = vzip1q_s32(v129, v130);
    v148 = vzip2q_s32(v129, v130);
    v149 = vzip1q_s32(v132, v133);
    v745 = (float32x4_t)vzip1q_s32(v147, v149);
    v743 = (float32x4_t)vzip2q_s32(v147, v149);
    v742 = (float32x4_t)vzip1q_s32(v148, vzip2q_s32(v132, v133));
    v150 = (float32x4_t)vzip1q_s32(v138, v139);
    v151 = vzip2q_s32(v138, v139);
    v152 = vzip1q_s32(v141, v142);
    v732 = (float32x4_t)vzip1q_s32((int32x4_t)v150, v152);
    v724 = (float32x4_t)vzip2q_s32((int32x4_t)v150, v152);
    v121.i64[0] = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)v118, *(int32x4_t *)v120), *(int32x4_t *)v118).u64[0];
    v121.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)v125), HIDWORD(*(_OWORD *)v124));
    v150.i64[0] = vuzp2q_s32(vuzp2q_s32(*(int32x4_t *)v117, *(int32x4_t *)v119), *(int32x4_t *)v117).u64[0];
    v150.i64[1] = __PAIR64__(HIDWORD(*(_OWORD *)v128), HIDWORD(*(_OWORD *)v123));
    v731 = (float32x4_t)vzip1q_s32(v151, vzip2q_s32(v141, v142));
    v747 = vmulq_f32(v755, v121);
    v713 = vmulq_f32(v754, v150);
    v153 = *(int32x4_t *)(v118 + 32);
    v154 = *(int32x4_t *)(v118 + 44);
    v155 = *(int32x4_t *)(v120 + 32);
    v156 = *(int32x4_t *)(v120 + 44);
    v157 = *(int32x4_t *)(v124 + 32);
    v158 = *(int32x4_t *)(v124 + 44);
    v159 = vzip1q_s32(v153, v157);
    v160 = *(int32x4_t *)(v125 + 32);
    v161 = *(int32x4_t *)(v125 + 44);
    v162 = vzip2q_s32(v153, v157);
    v163 = vzip1q_s32(v155, v160);
    v741 = (float32x4_t)vzip1q_s32(v159, v163);
    v740 = (float32x4_t)vzip2q_s32(v159, v163);
    v739 = (float32x4_t)vzip1q_s32(v162, vzip2q_s32(v155, v160));
    v164 = vzip1q_s32(v154, v158);
    v165 = vzip2q_s32(v154, v158);
    v166 = vzip1q_s32(v156, v161);
    v738 = (float32x4_t)vzip1q_s32(v164, v166);
    v737 = (float32x4_t)vzip2q_s32(v164, v166);
    v164.i32[0] = vdupq_laneq_s32(v154, 3).u32[0];
    v164.i32[1] = v158.i32[3];
    v164.i32[2] = *(_DWORD *)(v118 + 60);
    v164.i32[3] = *(_DWORD *)(v124 + 60);
    v154.i32[0] = vdupq_laneq_s32(v156, 3).u32[0];
    v154.i32[1] = v161.i32[3];
    v154.i32[2] = *(_DWORD *)(v120 + 60);
    v736 = (float32x4_t)vzip1q_s32(v165, vzip2q_s32(v156, v161));
    v154.i32[3] = *(_DWORD *)(v125 + 60);
    v735 = (float32x4_t)vzip1q_s32(v164, v154);
    v734 = (float32x4_t)vzip2q_s32(v164, v154);
    v167 = *(int32x4_t *)(v117 + 32);
    v168 = *(int32x4_t *)(v123 + 32);
    v169 = vzip1q_s32(v167, v168);
    v170 = vzip2q_s32(v167, v168);
    v171 = *(int32x4_t *)(v119 + 32);
    v172 = *(int32x4_t *)(v128 + 32);
    v173 = vzip1q_s32(v171, v172);
    v710 = (float32x4_t)vzip1q_s32(v169, v173);
    v709 = (float32x4_t)vzip2q_s32(v169, v173);
    v708 = (float32x4_t)vzip1q_s32(v170, vzip2q_s32(v171, v172));
    v174 = *(int32x4_t *)(v117 + 44);
    v175 = *(int32x4_t *)(v123 + 44);
    v176 = vzip1q_s32(v174, v175);
    v177 = *(int32x4_t *)(v119 + 44);
    v178 = *(int32x4_t *)(v128 + 44);
    v179 = vzip1q_s32(v177, v178);
    v707 = (float32x4_t)vzip1q_s32(v176, v179);
    v706 = (float32x4_t)vzip2q_s32(v176, v179);
    v180 = vzip2q_s32(v174, v175);
    v174.i32[0] = vdupq_laneq_s32(v174, 3).u32[0];
    v174.i32[1] = v175.i32[3];
    v705 = (float32x4_t)vzip1q_s32(v180, vzip2q_s32(v177, v178));
    v175.i32[0] = vdupq_laneq_s32(v177, 3).u32[0];
    v175.i32[1] = v178.i32[3];
    v174.i32[2] = *(_DWORD *)(v117 + 60);
    v174.i32[3] = *(_DWORD *)(v123 + 60);
    v175.i32[2] = *(_DWORD *)(v119 + 60);
    v175.i32[3] = *(_DWORD *)(v128 + 60);
    v181 = vzip1q_s32(v174, v175);
    v704 = (float32x4_t)v181;
    v182 = vzip2q_s32(v174, v175);
    v703 = (float32x4_t)v182;
    v182.i64[0] = v13[9];
    v175.i64[0] = v13[61];
    v183 = vzip1q_s32(v182, v175);
    v175.i64[0] = v13[35];
    v181.i64[0] = v13[87];
    v184 = vzip1q_s32(v175, v181);
    v185 = vzip1q_s32(v183, v184);
    v723 = (float32x4_t)v185;
    v186 = vzip2q_s32(v183, v184);
    v722 = (float32x4_t)v186;
    v186.i64[0] = *(_QWORD *)((char *)v13 + 100);
    v184.i64[0] = *(_QWORD *)((char *)v725 + 252);
    v187 = vzip1q_s32(v186, v184);
    v184.i64[0] = *(_QWORD *)((char *)v725 + 44);
    v185.i64[0] = *(_QWORD *)((char *)v729 + 44);
    v188 = vzip1q_s32(v184, v185);
    v721 = (float32x4_t)vzip1q_s32(v187, v188);
    v720 = (float32x4_t)vzip2q_s32(v187, v188);
    v712 = v104;
    v187.i32[0] = *((_DWORD *)v13 + 38);
    v187.i32[1] = *((_DWORD *)v13 + 90);
    v187.i32[2] = *((_DWORD *)v13 + 142);
    v187.i32[3] = *((_DWORD *)v13 + 194);
    v644 = (float32x4_t)v187;
    v643 = v30 * 0.8;
    v189 = *(int32x4_t *)(v13 + 7);
    v693 = (float32x4_t)vdupq_laneq_s32(v189, 3);
    LODWORD(v695) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v693.f32, *(float32x2_t *)v693.f32).u32[0];
    v190 = *(int32x4_t *)v725;
    v690 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v725, 3);
    LODWORD(v692) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v690.f32, *(float32x2_t *)v690.f32).u32[0];
    v191 = *((int32x4_t *)v725 + 13);
    v687 = (float32x4_t)vdupq_laneq_s32(v191, 3);
    LODWORD(v689) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v687.f32, *(float32x2_t *)v687.f32).u32[0];
    v192 = *(int32x4_t *)v729;
    v685 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v729, 3);
    LODWORD(v684) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v685.f32, *(float32x2_t *)v685.f32).u32[0];
    v193 = *(int32x4_t *)((char *)v13 + 84);
    v681 = (float32x4_t)vdupq_laneq_s32(v193, 3);
    LODWORD(v683) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v681.f32, *(float32x2_t *)v681.f32).u32[0];
    v194 = *(int32x4_t *)((char *)v725 + 28);
    v678 = (float32x4_t)vdupq_laneq_s32(v194, 3);
    LODWORD(v680) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v678.f32, *(float32x2_t *)v678.f32).u32[0];
    v122.i32[1] = *(_DWORD *)(v120 + 64);
    v122.i32[2] = *(_DWORD *)(v124 + 64);
    v122.i32[3] = *(_DWORD *)(v125 + 64);
    v642 = v122;
    v127.i32[1] = *(_DWORD *)(v119 + 64);
    v127.i32[2] = *(_DWORD *)(v123 + 64);
    v127.i32[3] = *(_DWORD *)(v128 + 64);
    v711 = v127;
    v593 = (float32x4_t)vdupq_lane_s32(v727, 0);
    v195 = *(int32x4_t *)((char *)v725 + 236);
    v675 = (float32x4_t)vdupq_laneq_s32(v195, 3);
    LODWORD(v677) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v675.f32, *(float32x2_t *)v675.f32).u32[0];
    v178.i32[0] = *((_DWORD *)v13 + 20);
    v178.i32[1] = *((_DWORD *)v13 + 72);
    v178.i32[2] = *((_DWORD *)v13 + 124);
    v178.i32[3] = *((_DWORD *)v13 + 176);
    v719 = (float32x4_t)v178;
    v196 = *(int32x4_t *)((char *)v729 + 28);
    v672 = (float32x4_t)vdupq_laneq_s32(v196, 3);
    LODWORD(v674) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v672.f32, *(float32x2_t *)v672.f32).u32[0];
    v178.i32[0] = *((_DWORD *)v13 + 27);
    v178.i32[1] = *((_DWORD *)v13 + 79);
    v178.i32[2] = *((_DWORD *)v13 + 131);
    v178.i32[3] = *((_DWORD *)v13 + 183);
    v718 = (float32x4_t)v178;
    v197 = (int8x16_t)v189;
    v197.i32[3] = 0;
    v198 = *(int8x16_t *)v725;
    v198.i32[3] = 0;
    v199 = (int8x16_t)v191;
    v199.i32[3] = 0;
    v200 = *(int8x16_t *)v729;
    v200.i32[3] = 0;
    v201 = (int8x16_t)v193;
    v201.i32[3] = 0;
    v202 = (int8x16_t)v194;
    v202.i32[3] = 0;
    v203 = (int8x16_t)v195;
    v203.i32[3] = 0;
    v204 = (int8x16_t)v196;
    v204.i32[3] = 0;
    if (v103)
      v205 = 7;
    else
      v205 = 8;
    v592 = v205;
    v591 = a1 + 7424;
    v590 = a1 + 7556;
    v206 = (float32x4_t *)v78;
    v730 = v135;
    v717 = v144;
    v728 = v136;
    v716 = v145;
    v588 = vsubq_f32(v136, v145);
    v589 = vsubq_f32(v135, v144);
    v726 = v137;
    v715 = v146;
    v587 = vsubq_f32(v137, v146);
    v670 = (float32x4_t)v198;
    v671 = (float32x4_t)v197;
    v694 = *(float32x2_t *)v189.i8;
    v662 = (float32x2_t)vextq_s8(v197, v197, 8uLL).u64[0];
    v661 = (float32x2_t)vext_s8(*(int8x8_t *)v189.i8, (int8x8_t)v662, 4uLL);
    v691 = *(float32x2_t *)v190.i8;
    v659 = (float32x2_t)vextq_s8(v198, v198, 8uLL).u64[0];
    v663 = (float32x2_t)vext_s8(*(int8x8_t *)v190.i8, (int8x8_t)v659, 4uLL);
    v668 = (float32x4_t)v200;
    v669 = (float32x4_t)v199;
    v688 = *(float32x2_t *)v191.i8;
    v658 = (float32x2_t)vextq_s8(v199, v199, 8uLL).u64[0];
    v660 = (float32x2_t)vext_s8(*(int8x8_t *)v191.i8, (int8x8_t)v658, 4uLL);
    v207 = (int8x8_t)vextq_s8(v200, v200, 8uLL).u64[0];
    v686 = *(float32x2_t *)v192.i8;
    v652 = (float32x2_t)vext_s8(*(int8x8_t *)v192.i8, v207, 4uLL);
    v666 = (float32x4_t)v202;
    v667 = (float32x4_t)v201;
    v682 = *(float32x2_t *)v193.i8;
    v656 = (float32x2_t)vextq_s8(v201, v201, 8uLL).u64[0];
    v657 = (float32x2_t)v207;
    v651 = (float32x2_t)vext_s8(*(int8x8_t *)v193.i8, (int8x8_t)v656, 4uLL);
    v679 = *(float32x2_t *)v194.i8;
    v655 = (float32x2_t)vextq_s8(v202, v202, 8uLL).u64[0];
    v650 = (float32x2_t)vext_s8(*(int8x8_t *)v194.i8, (int8x8_t)v655, 4uLL);
    v664 = (float32x4_t)v204;
    v665 = (float32x4_t)v203;
    v676 = *(float32x2_t *)v195.i8;
    v654 = (float32x2_t)vextq_s8(v203, v203, 8uLL).u64[0];
    v649 = (float32x2_t)vext_s8(*(int8x8_t *)v195.i8, (int8x8_t)v654, 4uLL);
    v673 = *(float32x2_t *)v196.i8;
    v653 = (float32x2_t)vextq_s8(v204, v204, 8uLL).u64[0];
    v648 = (float32x2_t)vext_s8(*(int8x8_t *)v196.i8, (int8x8_t)v653, 4uLL);
    v627 = v102;
    v208 = 0;
    while (1)
    {
      v209 = *((_DWORD *)v13 + 47);
      if (v208 < v209)
        HIDWORD(v637) = *((_DWORD *)v13 + 46) + v208;
      v210 = *((_DWORD *)v13 + 99);
      if (v208 < v210)
        LODWORD(v637) = *((_DWORD *)v13 + 98) + v208;
      v211 = *((_DWORD *)v13 + 151);
      if (v208 < v211)
        v636 = *((_DWORD *)v13 + 150) + v208;
      v212 = *((_DWORD *)v13 + 203);
      if (v208 < v212)
        v601 = *((_DWORD *)v13 + 202) + v208;
      if (v208 < v209)
        v213 = *(_DWORD *)(a1 + 4 * HIDWORD(v637) + 7296);
      else
        v213 = 0;
      if (v208 < v210)
        v214 = *(_DWORD *)(a1 + 4 * v637 + 7296);
      else
        v214 = 0;
      if (v208 < v211)
        v215 = *(_DWORD *)(a1 + 4 * v636 + 7296);
      else
        v215 = 0;
      v630 = *((_DWORD *)v13 + 203);
      v647 = v103;
      v639 = v116;
      if (v208 < v212)
      {
        v614 = 0;
        v216 = *(_DWORD *)(a1 + 4 * v601 + 7296);
      }
      else
      {
        v216 = 0;
        v614 = 8;
      }
      v605 = v216;
      v696 = *((_DWORD *)v13 + 151);
      v613 = v208 >= v211;
      v634 = *((_DWORD *)v13 + 99);
      v612 = v208 >= v210;
      v638 = v208;
      v632 = *((_DWORD *)v13 + 47);
      v217 = *(unsigned int *)(v591 + 4 * HIDWORD(v637));
      v218 = *(unsigned int *)(v591 + 4 * v637);
      v219 = *(unsigned int *)(v591 + 4 * v636);
      v611 = v208 >= v209;
      v220 = *(unsigned int *)(v591 + 4 * v601);
      v628 = v13[17];
      v629 = *(unsigned __int16 *)(a1 + 44 * v217);
      v616 = *(unsigned __int16 *)(a1 + 44 * v218);
      v617 = v13[43];
      v625 = (int32x4_t *)(v617 + (v616 << 6));
      v621 = v13[69];
      v618 = *(unsigned __int16 *)(a1 + 44 * v219);
      v608 = (int32x4_t *)(v628 + (v629 << 6));
      v609 = (int32x4_t *)(v621 + (v618 << 6));
      v623 = v13[95];
      v619 = *(unsigned __int16 *)(a1 + 44 * v220);
      v607 = (int32x4_t *)(v623 + (v619 << 6));
      v221.i32[0] = v608[3].i32[3];
      v221.i32[1] = v625[3].i32[3];
      v221.i32[2] = v609[3].i32[3];
      v221.i32[3] = v607[3].i32[3];
      v698 = v221;
      v606 = vnegq_f32(v221);
      v206->i8[4] = v599;
      v206->i8[5] = v598;
      v206->i8[6] = v597;
      v206->i8[7] = v596;
      v206->i8[3] = v627;
      if (v215 <= v216)
        v222 = v216;
      else
        v222 = v215;
      if (v214 > v222)
        v222 = v214;
      if (v213 <= v222)
        v223 = v222;
      else
        v223 = v213;
      v615 = 16 * v223;
      v610 = v206 + 13;
      v224 = v213;
      v604 = v215;
      bzero(&v206[13], 16 * v223);
      v13 = a2;
      v206->i8[1] = v223;
      v206->i8[8] = v224;
      v206->i8[9] = v214;
      v206->i8[10] = v604;
      v206->i8[11] = v605;
      v206[4] = v747;
      v206[5] = v713;
      v206[6] = v749;
      v206[7] = v714;
      v206[11].i64[0] = a2[16];
      v206[11].i64[1] = a2[42];
      v206[12].i64[0] = a2[68];
      v206[12].i64[1] = a2[94];
      v206[1] = v606;
      v225 = vzip1q_s32(*v608, *v609);
      v226 = vzip1q_s32(*v625, *v607);
      v227 = (float32x4_t)vzip1q_s32(v225, v226);
      v228 = (float32x4_t)vzip2q_s32(v225, v226);
      v229 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v608, *v609), vzip2q_s32(*v625, *v607));
      v206[8] = v227;
      v206[9] = v228;
      v626 = v206;
      v206[10] = v229;
      v230 = 0xFFFFLL;
      v231 = 0xFFFFLL;
      if ((_DWORD)v217 != 0xFFFF)
      {
        while (!*(_BYTE *)(a1 + 44 * v217 + 5))
        {
          v217 = *(unsigned __int16 *)(a1 + 44 * v217 + 2);
          v231 = 0xFFFFLL;
          if ((_DWORD)v217 == 0xFFFF)
            goto LABEL_149;
        }
        v231 = v217;
      }
LABEL_149:
      v232 = v733;
      v233 = v724;
      if ((_DWORD)v218 != 0xFFFF)
      {
        while (!*(_BYTE *)(a1 + 44 * v218 + 5))
        {
          v218 = *(unsigned __int16 *)(a1 + 44 * v218 + 2);
          v230 = 0xFFFFLL;
          if ((_DWORD)v218 == 0xFFFF)
            goto LABEL_154;
        }
        v230 = v218;
      }
LABEL_154:
      v234 = 0xFFFFLL;
      v235 = 0xFFFFLL;
      if ((_DWORD)v219 != 0xFFFF)
      {
        while (!*(_BYTE *)(a1 + 44 * v219 + 5))
        {
          v219 = *(unsigned __int16 *)(a1 + 44 * v219 + 2);
          v235 = 0xFFFFLL;
          if ((_DWORD)v219 == 0xFFFF)
            goto LABEL_159;
        }
        v235 = v219;
      }
LABEL_159:
      v236 = v639;
      if ((_DWORD)v220 != 0xFFFF)
      {
        while (!*(_BYTE *)(a1 + 44 * v220 + 5))
        {
          v220 = *(unsigned __int16 *)(a1 + 44 * v220 + 2);
          v234 = 0xFFFFLL;
          if ((_DWORD)v220 == 0xFFFF)
            goto LABEL_164;
        }
        v234 = v220;
      }
LABEL_164:
      if (v638 < v632)
      {
        v236 = 0xFFFF;
        v238 = v627;
        if ((_DWORD)v231 == 0xFFFF)
        {
          LODWORD(v701) = 0;
          v237 = 1;
LABEL_172:
          v231 = 0xFFFFLL;
        }
        else
        {
          v237 = 1;
          v239 = v231;
          while (v237 == *(unsigned __int8 *)(a1 + 44 * v239 + 5))
          {
            v237 = 0;
            v239 = *(unsigned __int16 *)(a1 + 44 * v239 + 2);
            if ((_DWORD)v239 == 0xFFFF)
            {
              v236 = v231;
              LODWORD(v701) = 0;
              goto LABEL_172;
            }
          }
          LODWORD(v701) = 0;
          v236 = v231;
          v231 = v239;
        }
      }
      else
      {
        v237 = 0;
        v238 = v627;
      }
      if (v638 < v634)
      {
        LODWORD(v702) = 0xFFFF;
        if ((_DWORD)v230 == 0xFFFF)
        {
          HIDWORD(v700) = 0;
          v240 = 1;
LABEL_182:
          v230 = 0xFFFFLL;
        }
        else
        {
          v240 = 1;
          v241 = v230;
          while (v240 == *(unsigned __int8 *)(a1 + 44 * v241 + 5))
          {
            v240 = 0;
            v241 = *(unsigned __int16 *)(a1 + 44 * v241 + 2);
            if ((_DWORD)v241 == 0xFFFF)
            {
              LODWORD(v702) = v230;
              HIDWORD(v700) = 0;
              goto LABEL_182;
            }
          }
          HIDWORD(v700) = 0;
          LODWORD(v702) = v230;
          v230 = v241;
        }
      }
      else
      {
        v240 = 0;
      }
      if (v638 < v696)
      {
        HIDWORD(v702) = 0xFFFF;
        if ((_DWORD)v235 == 0xFFFF)
        {
          LODWORD(v700) = 0;
          v242 = 1;
LABEL_192:
          v235 = 0xFFFFLL;
        }
        else
        {
          v242 = 1;
          v243 = v235;
          while (v242 == *(unsigned __int8 *)(a1 + 44 * v243 + 5))
          {
            v242 = 0;
            v243 = *(unsigned __int16 *)(a1 + 44 * v243 + 2);
            if ((_DWORD)v243 == 0xFFFF)
            {
              HIDWORD(v702) = v235;
              LODWORD(v700) = 0;
              goto LABEL_192;
            }
          }
          LODWORD(v700) = 0;
          HIDWORD(v702) = v235;
          v235 = v243;
        }
      }
      else
      {
        v242 = 0;
      }
      if (v638 < v630)
      {
        HIDWORD(v701) = 0xFFFF;
        if ((_DWORD)v234 == 0xFFFF)
        {
          v699 = 0;
          v244 = 1;
LABEL_202:
          v234 = 0xFFFFLL;
        }
        else
        {
          v244 = 1;
          v245 = v234;
          while (v244 == *(unsigned __int8 *)(a1 + 44 * v245 + 5))
          {
            v244 = 0;
            v245 = *(unsigned __int16 *)(a1 + 44 * v245 + 2);
            if ((_DWORD)v245 == 0xFFFF)
            {
              v699 = 0;
              HIDWORD(v701) = v234;
              goto LABEL_202;
            }
          }
          v699 = 0;
          HIDWORD(v701) = v234;
          v234 = v245;
        }
      }
      else
      {
        v244 = 0;
      }
      if (v638 < v632)
      {
        v247 = (_DWORD)v231 != 0xFFFF && v237 < *(unsigned __int8 *)(a1 + 44 * v231 + 5);
        v246 = !v247;
      }
      else
      {
        v246 = 1;
      }
      v248 = v638 >= v634 || (_DWORD)v230 == 0xFFFF || v240 >= *(unsigned __int8 *)(a1 + 44 * v230 + 5)
           ? 2
           : 0;
      v249 = v638 >= v696 || (_DWORD)v235 == 0xFFFF || v242 >= *(unsigned __int8 *)(a1 + 44 * v235 + 5)
           ? 4
           : 0;
      v250 = v638 >= v630 || (_DWORD)v234 == 0xFFFF || v244 >= *(unsigned __int8 *)(a1 + 44 * v234 + 5)
           ? 8
           : 0;
      _X2 = &v610[v223];
      v252 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v730, v227), v728, v228), v726, v229), vmlaq_f32(vmlaq_f32(vmulq_f32(v717, v227), v716, v228), v715, v229));
      if ((v611 | (2 * v612) | (4 * v613) | v614) != 0xF)
        break;
      v253 = &v610[v223];
LABEL_282:
      v640 = v236;
      v349 = v615;
      if (!v238)
        v349 = 0;
      v350 = v638;
      if (v638 < v632)
      {
        v353 = v628;
        v352 = v629;
        if ((*(_BYTE *)(v628 + (v629 << 6) + 48) & 1) != 0)
          v351 = 0;
        else
          v351 = *(unsigned __int16 *)(a1 + 2816 + 104 * HIDWORD(v637) + 2);
        v103 = v647;
      }
      else
      {
        v351 = 0;
        v103 = v647;
        v353 = v628;
        v352 = v629;
      }
      v354 = v617 + (v616 << 6);
      v355 = *(unsigned __int8 *)(v354 + 48);
      if ((v355 & 1) != 0)
        v356 = 0;
      else
        v356 = *(unsigned __int16 *)(a1 + 2816 + 104 * v637 + 2);
      if (v638 < v634)
        v357 = v356;
      else
        v357 = 0;
      v358 = v621 + (v618 << 6);
      v359 = *(unsigned __int8 *)(v358 + 48);
      if ((v359 & 1) != 0)
        v360 = 0;
      else
        v360 = *(unsigned __int16 *)(a1 + 2816 + 104 * v636 + 2);
      if (v638 < v696)
        v361 = v360;
      else
        v361 = 0;
      v362 = v623 + (v619 << 6);
      v363 = *(unsigned __int8 *)(v362 + 48);
      if ((v363 & 1) != 0)
        v364 = 0;
      else
        v364 = *(unsigned __int16 *)(a1 + 2816 + 104 * v601 + 2);
      if (v638 < v630)
        v365 = v364;
      else
        v365 = 0;
      if (v361 <= v365)
        v366 = v365;
      else
        v366 = v361;
      if (v357 > v366)
        v366 = v357;
      if (v351 <= v366)
        v367 = v366;
      else
        v367 = v351;
      v368 = v353 + (v352 << 6);
      v369 = 1.0;
      if (((*(_WORD *)(a1 + 2816 + 104 * HIDWORD(v637) + 2) == 2) & (*(unsigned __int8 *)(v368 + 48) >> 2)) != 0)
        v370 = 0.5;
      else
        v370 = 1.0;
      if (((*(_WORD *)(a1 + 2816 + 104 * v637 + 2) == 2) & (v355 >> 2)) != 0)
        v371 = 0.5;
      else
        v371 = 1.0;
      if (((*(_WORD *)(a1 + 2816 + 104 * v636 + 2) == 2) & (v359 >> 2)) != 0)
        v372 = 0.5;
      else
        v372 = 1.0;
      if (((*(_WORD *)(a1 + 2816 + 104 * v601 + 2) == 2) & (v363 >> 2)) != 0)
        v369 = 0.5;
      v373.f32[0] = *(float *)(v368 + 44) * v370;
      v373.f32[1] = *(float *)(v354 + 44) * v371;
      v373.f32[2] = v372 * *(float *)(v358 + 44);
      v373.f32[3] = v369 * *(float *)(v362 + 44);
      v374.f32[0] = v370 * *(float *)(v368 + 56);
      v374.f32[1] = v371 * *(float *)(v354 + 56);
      v374.i64[1] = __PAIR64__(v369 * *(float *)(v362 + 56), v372 * *(float *)(v358 + 56));
      v626[2] = v373;
      v626[3] = v374;
      v626->i8[2] = 2 * v367;
      v626->i8[12] = 2 * v351;
      v375 = (float32x4_t *)((char *)v253 + v349);
      v626->i8[13] = 2 * v357;
      v626->i8[14] = 2 * v361;
      v626->i8[15] = 2 * v365;
      v626->i8[0] = v592;
      v697 = v367;
      if (v367)
      {
        v376 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F3504F3u), vabsq_f32(v227));
        v377 = vnegq_f32(v228);
        v378 = vnegq_f32(v229);
        v379 = vandq_s8(v376, (int8x16_t)v228);
        v380 = vnegq_f32(v227);
        v381 = vmlsq_f32(v589, v252, v227);
        v382 = vmlsq_f32(v588, v252, v228);
        v383 = vmlsq_f32(v587, v252, v229);
        v384 = (int8x16_t)vcgtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v383, v383), v382, v382), v381, v381), (float32x4_t)vdupq_n_s32(0x38D1B717u));
        v385 = (float32x4_t)vorrq_s8(vandq_s8(v384, (int8x16_t)v381), vbicq_s8((int8x16_t)v377, vorrq_s8(v384, v376)));
        v386 = (float32x4_t)vbslq_s8(v384, (int8x16_t)v382, vbslq_s8(v376, (int8x16_t)v378, (int8x16_t)v227));
        v387 = (float32x4_t)vbslq_s8(v384, (int8x16_t)v383, v379);
        v388 = vmlaq_f32(vmlaq_f32(vmulq_f32(v385, v385), v386, v386), v387, v387);
        v389 = vrsqrteq_f32(v388);
        v390 = 4;
        do
        {
          v389 = vmulq_f32(v389, vrsqrtsq_f32(vmulq_f32(v389, v389), v388));
          --v390;
        }
        while (v390);
        v391 = vmulq_f32(v389, v385);
        v392 = vmulq_f32(v389, v386);
        v393 = vmulq_f32(v389, v387);
        v631 = vmlaq_f32(vmulq_f32(v228, v393), v392, v378);
        v633 = v392;
        v622 = vmlaq_f32(vmulq_f32(v229, v391), v393, v380);
        v624 = v393;
        v620 = vmlaq_f32(vmulq_f32(v227, v392), v391, v377);
        v635 = v391;
        v394 = a2[20] + 104 * HIDWORD(v603);
        v395 = a2[46] + 104 * v603;
        v396 = a2[72] + 104 * HIDWORD(v602);
        v397 = a2[98] + 104 * v602;
        v375->i64[0] = 0;
        v375->i64[1] = 0;
        v375[1].i64[0] = v394;
        v375[1].i64[1] = v395;
        v375[2].i64[0] = v396;
        v375[2].i64[1] = v397;
        v375[3] = v391;
        v375[4] = v631;
        v375[5] = v392;
        v375[6] = v622;
        v375[7] = v393;
        v375[8] = v620;
        v398 = v626->u8[2];
        _X26 = &v375[v398 + 9];
        bzero(&v375[9], v398 * 16);
        v402 = v620;
        v403 = v622;
        v405 = v631;
        v404 = v633;
        v406 = v624;
        v407 = v635;
        v13 = a2;
        v408 = 0;
        v409 = 0;
        v410 = 0;
        v411 = 0;
        v412 = 0;
        __asm { FMOV            V0.4S, #1.0 }
        v414 = a4;
        v415 = v642;
        while (1)
        {
          __asm
          {
            PRFM            #0, [X26,#0x180]
            PRFM            #0, [X26,#0x200]
            PRFM            #0, [X26,#0x280]
          }
          if (v408 < v351)
            v412 = v408;
          if (v408 < v357)
            v411 = v408;
          if (v408 < v361)
            v410 = v408;
          if (v408 < v365)
            v409 = v408;
          v419 = a1 + 2816 + 104 * HIDWORD(v637) + 12 * v412;
          v420 = *(float32x2_t *)(v419 + 40);
          *(float32x2_t *)v421.f32 = v420;
          v421.i32[2] = *(_DWORD *)(v419 + 48);
          v422 = a1 + 2816 + 104 * v637 + 12 * v411;
          v423 = *(float32x2_t *)(v422 + 40);
          *(float32x2_t *)v424.f32 = v423;
          v424.i32[2] = *(_DWORD *)(v422 + 48);
          v425 = a1 + 2816 + 104 * v636 + 12 * v410;
          v426 = *(float32x2_t *)(v425 + 40);
          *(float32x2_t *)v427.f32 = v426;
          v427.i32[2] = *(_DWORD *)(v425 + 48);
          v428 = a1 + 2816 + 104 * v601 + 12 * v409;
          v429 = *(float32x2_t *)(v428 + 40);
          *(float32x2_t *)v430.f32 = v429;
          v430.i32[2] = *(_DWORD *)(v428 + 48);
          v431 = *(float32x2_t *)(v419 + 64);
          *(float32x2_t *)v432.f32 = v431;
          v432.i32[2] = *(_DWORD *)(v419 + 72);
          v433 = *(float32x2_t *)(v422 + 64);
          *(float32x2_t *)v434.f32 = v433;
          v434.i32[2] = *(_DWORD *)(v422 + 72);
          v435 = *(float32x2_t *)(v425 + 64);
          *(float32x2_t *)v436.f32 = v435;
          v436.i32[2] = *(_DWORD *)(v425 + 72);
          v437 = *(float32x2_t *)(v428 + 64);
          *(float32x2_t *)v438.f32 = v437;
          v438.i32[2] = *(_DWORD *)(v428 + 72);
          v439 = *(unsigned __int16 *)(v590 + 4 * HIDWORD(v637) + 2 * v412);
          v440 = *(unsigned __int16 *)(v590 + 4 * v637 + 2 * v411);
          v441 = *(unsigned __int16 *)(v590 + 4 * v636 + 2 * v410);
          v442 = *(unsigned __int16 *)(v590 + 4 * v601 + 2 * v409);
          v443 = (int32x4_t *)(v628 + (v629 << 6) + 32);
          if (v439 != 0xFFFF)
            v443 = (int32x4_t *)(a2[17] + (v439 << 6) + 32);
          v444 = *v443;
          v445 = (int32x4_t *)(v628 + (v629 << 6) + 32);
          if ((_DWORD)v440 != 0xFFFF)
            v445 = (int32x4_t *)(a2[43] + (v440 << 6) + 32);
          v446 = *v445;
          v447 = (int32x4_t *)(v628 + (v629 << 6) + 32);
          if ((_DWORD)v441 != 0xFFFF)
            v447 = (int32x4_t *)(a2[69] + (v441 << 6) + 32);
          v448 = *v447;
          v449 = (int32x4_t *)(v628 + (v629 << 6) + 32);
          if ((_DWORD)v442 != 0xFFFF)
            v449 = (int32x4_t *)(a2[95] + (v442 << 6) + 32);
          v400.i32[0] = v351;
          v401.i32[0] = v408;
          v450 = (int8x16_t)_Q0;
          v450.i32[0] = 0;
          v451 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v400, (uint32x4_t)v401), 0), (int8x16_t)_Q0, v450);
          v452 = v451;
          v452.i32[1] = 0;
          v450.i32[0] = v357;
          v453 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v450, (uint32x4_t)v401), 0);
          v454 = vbslq_s8((int8x16_t)v453, v451, v452);
          v455 = v454;
          v455.i32[2] = 0;
          v453.i32[0] = v361;
          v456 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v453, (uint32x4_t)v401), 0), v454, v455);
          v455.i32[0] = v365;
          v455.i64[0] = vcgtq_u32((uint32x4_t)v455, (uint32x4_t)v401).u64[0];
          v421.i32[3] = 0;
          v457 = (float32x2_t)vextq_s8((int8x16_t)v421, (int8x16_t)v421, 8uLL).u64[0];
          *(float32x2_t *)v453.f32 = vmls_f32(vmul_f32(v662, v420), v694, v457);
          v458 = (int8x8_t)vmls_f32(vmul_f32(v694, (float32x2_t)vext_s8((int8x8_t)v420, (int8x8_t)v457, 4uLL)), v661, v420);
          *(int8x8_t *)v453.f32 = vext_s8(v458, *(int8x8_t *)v453.f32, 4uLL);
          v453.i64[1] = v458.u32[0];
          v459 = vmulq_n_f32(v421, v695);
          v459.i32[3] = 0;
          v460 = vmlaq_f32(v459, v693, v453);
          v460.i64[1] = vextq_s8((int8x16_t)v460, (int8x16_t)v460, 8uLL).u32[0];
          v461 = (float32x4_t)v456;
          v461.i32[3] = 0;
          v424.i32[3] = 0;
          _Q0 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v455.i8, 0), v456, (int8x16_t)v461);
          v455.i64[0] = vextq_s8((int8x16_t)v424, (int8x16_t)v424, 8uLL).u64[0];
          *(float32x2_t *)v461.f32 = vmls_f32(vmul_f32(v659, v423), v691, *(float32x2_t *)v455.i8);
          *(float32x2_t *)v455.i8 = vmls_f32(vmul_f32(v691, (float32x2_t)vext_s8((int8x8_t)v423, *(int8x8_t *)v455.i8, 4uLL)), v663, v423);
          v427.i32[3] = 0;
          v462 = vmulq_f32(v671, v421);
          v462.i64[0] = vpaddq_f32(v462, v462).u64[0];
          LODWORD(v463) = vpadd_f32(*(float32x2_t *)v462.f32, *(float32x2_t *)v462.f32).u32[0];
          *(int8x8_t *)v461.f32 = vext_s8(*(int8x8_t *)v455.i8, *(int8x8_t *)v461.f32, 4uLL);
          v461.i64[1] = v455.u32[0];
          v464 = vmulq_n_f32(v424, v692);
          v464.i32[3] = 0;
          v465 = vmlaq_f32(v464, v690, v461);
          v466 = vmlaq_n_f32(v460, v671, v463);
          v465.i64[1] = vextq_s8((int8x16_t)v465, (int8x16_t)v465, 8uLL).u32[0];
          v467 = vmulq_f32(v670, v424);
          v467.i64[0] = vpaddq_f32(v467, v467).u64[0];
          v468 = vmlaq_n_f32(v465, v670, vpadd_f32(*(float32x2_t *)v467.f32, *(float32x2_t *)v467.f32).f32[0]);
          v467.i64[0] = vextq_s8((int8x16_t)v427, (int8x16_t)v427, 8uLL).u64[0];
          v469 = (int8x8_t)vmls_f32(vmul_f32(v658, v426), v688, *(float32x2_t *)v467.f32);
          *(float32x2_t *)v467.f32 = vmls_f32(vmul_f32(v688, (float32x2_t)vext_s8((int8x8_t)v426, *(int8x8_t *)v467.f32, 4uLL)), v660, v426);
          v430.i32[3] = 0;
          *(int8x8_t *)v470.f32 = vext_s8(*(int8x8_t *)v467.f32, v469, 4uLL);
          v470.i64[1] = v467.u32[0];
          v471 = vmulq_n_f32(v427, v689);
          v471.i32[3] = 0;
          v472 = vmlaq_f32(v471, v687, v470);
          v472.i64[1] = vextq_s8((int8x16_t)v472, (int8x16_t)v472, 8uLL).u32[0];
          v473 = vmulq_f32(v669, v427);
          v473.i64[0] = vpaddq_f32(v473, v473).u64[0];
          v474 = vmlaq_n_f32(v472, v669, vpadd_f32(*(float32x2_t *)v473.f32, *(float32x2_t *)v473.f32).f32[0]);
          v473.i64[0] = vextq_s8((int8x16_t)v430, (int8x16_t)v430, 8uLL).u64[0];
          *(float32x2_t *)v470.f32 = vmls_f32(vmul_f32(v657, v429), v686, *(float32x2_t *)v473.f32);
          *(float32x2_t *)v473.f32 = vmls_f32(vmul_f32(v686, (float32x2_t)vext_s8((int8x8_t)v429, *(int8x8_t *)v473.f32, 4uLL)), v652, v429);
          v407 = vmulq_f32(v407, _Q0);
          v404 = vmulq_f32(v404, _Q0);
          v406 = vmulq_f32(v406, _Q0);
          v475 = (int32x4_t)vaddq_f32(v466, v466);
          v476 = (int32x4_t)vaddq_f32(v468, v468);
          v477 = (int32x4_t)vaddq_f32(v474, v474);
          *(int8x8_t *)v470.f32 = vext_s8(*(int8x8_t *)v473.f32, *(int8x8_t *)v470.f32, 4uLL);
          v470.i64[1] = v473.u32[0];
          v478 = vmulq_n_f32(v430, v684);
          v478.i32[3] = 0;
          v479 = vmlaq_f32(v478, v685, v470);
          v479.i64[1] = vextq_s8((int8x16_t)v479, (int8x16_t)v479, 8uLL).u32[0];
          v480 = vmulq_f32(v668, v430);
          v480.i64[0] = vpaddq_f32(v480, v480).u64[0];
          v481 = vmlaq_n_f32(v479, v668, vpadd_f32(*(float32x2_t *)v480.f32, *(float32x2_t *)v480.f32).f32[0]);
          v482 = (int32x4_t)vaddq_f32(v481, v481);
          v483 = vzip1q_s32(v475, v477);
          v484 = vzip2q_s32(v475, v477);
          v485 = vzip1q_s32(v476, v482);
          v486 = vzip2q_s32(v476, v482);
          v487 = (float32x4_t)vzip1q_s32(v483, v485);
          v488 = (float32x4_t)vzip2q_s32(v483, v485);
          v432.i32[3] = 0;
          v434.i32[3] = 0;
          v436.i32[3] = 0;
          v438.i32[3] = 0;
          v483.i64[0] = vextq_s8((int8x16_t)v432, (int8x16_t)v432, 8uLL).u64[0];
          *(float32x2_t *)v476.i8 = vmls_f32(vmul_f32(v656, v431), v682, *(float32x2_t *)v483.i8);
          *(float32x2_t *)v483.i8 = vmls_f32(vmul_f32(v682, (float32x2_t)vext_s8((int8x8_t)v431, *(int8x8_t *)v483.i8, 4uLL)), v651, v431);
          v489 = vmulq_n_f32(v432, v683);
          v489.i32[3] = 0;
          *(int8x8_t *)v490.f32 = vext_s8(*(int8x8_t *)v483.i8, *(int8x8_t *)v476.i8, 4uLL);
          v490.i64[1] = v483.u32[0];
          v491 = vmlaq_f32(v489, v681, v490);
          v492 = (float32x4_t)vzip1q_s32(v484, v486);
          v491.i64[1] = vextq_s8((int8x16_t)v491, (int8x16_t)v491, 8uLL).u32[0];
          v493 = vmulq_f32(v667, v432);
          v493.i64[0] = vpaddq_f32(v493, v493).u64[0];
          v494 = vmlaq_n_f32(v491, v667, vpadd_f32(*(float32x2_t *)v493.f32, *(float32x2_t *)v493.f32).f32[0]);
          v495 = (int32x4_t)vaddq_f32(v494, v494);
          v496 = vmulq_n_f32(v434, v680);
          v496.i32[3] = 0;
          v484.i64[0] = vextq_s8((int8x16_t)v434, (int8x16_t)v434, 8uLL).u64[0];
          *(float32x2_t *)v486.i8 = vmls_f32(vmul_f32(v679, (float32x2_t)vext_s8((int8x8_t)v433, *(int8x8_t *)v484.i8, 4uLL)), v650, v433);
          *(int8x8_t *)v497.f32 = vext_s8(*(int8x8_t *)v486.i8, (int8x8_t)vmls_f32(vmul_f32(v655, v433), v679, *(float32x2_t *)v484.i8), 4uLL);
          v497.i64[1] = v486.u32[0];
          v498 = vmlaq_f32(v496, v678, v497);
          v498.i64[1] = vextq_s8((int8x16_t)v498, (int8x16_t)v498, 8uLL).u32[0];
          v499 = vmulq_f32(v666, v434);
          v499.i64[0] = vpaddq_f32(v499, v499).u64[0];
          v500 = vmlaq_n_f32(v498, v666, vpadd_f32(*(float32x2_t *)v499.f32, *(float32x2_t *)v499.f32).f32[0]);
          v501 = (int32x4_t)vaddq_f32(v500, v500);
          v502 = vmulq_n_f32(v436, v677);
          v502.i32[3] = 0;
          v500.i64[0] = vextq_s8((int8x16_t)v436, (int8x16_t)v436, 8uLL).u64[0];
          *(float32x2_t *)v484.i8 = vmls_f32(vmul_f32(v676, (float32x2_t)vext_s8((int8x8_t)v435, *(int8x8_t *)v500.f32, 4uLL)), v649, v435);
          *(int8x8_t *)v503.f32 = vext_s8(*(int8x8_t *)v484.i8, (int8x8_t)vmls_f32(vmul_f32(v654, v435), v676, *(float32x2_t *)v500.f32), 4uLL);
          v503.i64[1] = v484.u32[0];
          v504 = vmlaq_f32(v502, v675, v503);
          v504.i64[1] = vextq_s8((int8x16_t)v504, (int8x16_t)v504, 8uLL).u32[0];
          v505 = vmulq_f32(v665, v436);
          v505.i64[0] = vpaddq_f32(v505, v505).u64[0];
          v506 = vmlaq_n_f32(v504, v665, vpadd_f32(*(float32x2_t *)v505.f32, *(float32x2_t *)v505.f32).f32[0]);
          v507 = vmulq_n_f32(v438, v674);
          v507.i32[3] = 0;
          v508 = (int32x4_t)vaddq_f32(v506, v506);
          v506.i64[0] = vextq_s8((int8x16_t)v438, (int8x16_t)v438, 8uLL).u64[0];
          *(float32x2_t *)v500.f32 = vmls_f32(vmul_f32(v673, (float32x2_t)vext_s8((int8x8_t)v437, *(int8x8_t *)v506.f32, 4uLL)), v648, v437);
          *(int8x8_t *)v509.f32 = vext_s8(*(int8x8_t *)v500.f32, (int8x8_t)vmls_f32(vmul_f32(v653, v437), v673, *(float32x2_t *)v506.f32), 4uLL);
          v509.i64[1] = v500.u32[0];
          v510 = vmlaq_f32(v507, v672, v509);
          v510.i64[1] = vextq_s8((int8x16_t)v510, (int8x16_t)v510, 8uLL).u32[0];
          v511 = vmulq_f32(v664, v438);
          v511.i64[0] = vpaddq_f32(v511, v511).u64[0];
          v512 = vmlaq_n_f32(v510, v664, vpadd_f32(*(float32x2_t *)v511.f32, *(float32x2_t *)v511.f32).f32[0]);
          v513 = (int32x4_t)vaddq_f32(v512, v512);
          v514 = vzip1q_s32(v495, v508);
          v515 = vzip1q_s32(v501, v513);
          v516 = vzip2q_s32(v501, v513);
          v517 = (float32x4_t)vzip1q_s32(v514, v515);
          v518 = (float32x4_t)vzip2q_s32(v514, v515);
          v519 = (float32x4_t)vzip1q_s32(vzip2q_s32(v495, v508), v516);
          v520 = vmlsq_f32(vmulq_f32(v406, v488), v404, v492);
          v521 = vmlsq_f32(vmulq_f32(v407, v492), v406, v487);
          v522 = vmlsq_f32(vmulq_f32(v404, v487), v407, v488);
          v523 = (float32x4_t)vbicq_s8((int8x16_t)v520, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v520)));
          v524 = (float32x4_t)vbicq_s8((int8x16_t)v521, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v521)));
          v525 = (float32x4_t)vbicq_s8((int8x16_t)v522, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v522)));
          v526 = vmlaq_f32(vmlaq_f32(vmulq_f32(v741, v523), v524, v740), v525, v739);
          v527 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v523), v524, v737), v525, v736);
          v528 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v523), v524, v734), v525, v415);
          v529 = vmlaq_f32(v747, v749, vmlaq_f32(vmlaq_f32(vmulq_f32(v526, v526), v527, v527), v528, v528));
          v530 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v730, v407), v728, v404), v726, v406), v745, v523), v743, v524), v742, v525);
          v531 = *v449;
          if (v103)
          {
            v532 = vmlsq_f32(vmulq_f32(v406, v518), v404, v519);
            v533 = vmlsq_f32(vmulq_f32(v407, v519), v406, v517);
            v534 = vmlsq_f32(vmulq_f32(v404, v517), v407, v518);
            v535 = (float32x4_t)vbicq_s8((int8x16_t)v532, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v532)));
            v536 = (float32x4_t)vbicq_s8((int8x16_t)v533, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v533)));
            v537 = (float32x4_t)vbicq_s8((int8x16_t)v534, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v534)));
            v538 = vmlaq_f32(vmlaq_f32(vmulq_f32(v710, v535), v536, v709), v537, v708);
            v539 = vmlaq_f32(vmlaq_f32(vmulq_f32(v707, v535), v536, v706), v537, v705);
            v540 = vmlaq_f32(vmlaq_f32(vmulq_f32(v704, v535), v536, v703), v537, v711);
            v415 = v642;
            v529 = vaddq_f32(v529, vmlaq_f32(v713, v714, vmlaq_f32(vmlaq_f32(vmulq_f32(v538, v538), v539, v539), v540, v540)));
            v414 = a4;
            _X26[6] = v538;
            _X26[7] = v539;
            _X26[8] = v540;
          }
          else
          {
            if (!v712)
              goto LABEL_352;
            v535 = vmlsq_f32(vmulq_f32(v406, v518), v404, v519);
            v536 = vmlsq_f32(vmulq_f32(v407, v519), v406, v517);
            v537 = vmlsq_f32(vmulq_f32(v404, v517), v407, v518);
          }
          v530 = vsubq_f32(v530, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v717, v407), v716, v404), v715, v406), v732, v535), v724, v536), v731, v537));
LABEL_352:
          v541 = (float32x4_t *)((char *)_X26 + v645);
          v375 = (float32x4_t *)((char *)_X26 + v645 + v645);
          v405 = vmulq_f32(v405, _Q0);
          v403 = vmulq_f32(v403, _Q0);
          v402 = vmulq_f32(v402, _Q0);
          v542 = vsubq_f32(vaddq_f32(v723, v487), vaddq_f32(v721, v517));
          v543 = vsubq_f32(vaddq_f32(v722, v488), vaddq_f32(v720, v518));
          v544 = vsubq_f32(vaddq_f32(v719, v492), vaddq_f32(v718, v519));
          v545 = vzip1q_s32(v444, v448);
          v546 = vzip2q_s32(v444, v448);
          v547 = vzip1q_s32(v446, v531);
          v548 = vzip2q_s32(v446, v531);
          v549 = (float32x4_t)vzip1q_s32(v545, v547);
          v550 = (float32x4_t)vzip2q_s32(v545, v547);
          v551 = (float32x4_t)vzip1q_s32(v546, v548);
          v552 = vnegq_f32(v492);
          v553 = vnegq_f32(v487);
          v554 = vnegq_f32(v488);
          v555 = 4;
          v556 = vrecpeq_f32(v529);
          do
          {
            v556 = vmulq_f32(v556, vrecpsq_f32(v556, v529));
            --v555;
          }
          while (v555);
          v557 = (int8x16_t)vcgtzq_f32(v529);
          v558 = (float32x4_t)vdupq_n_s32(0x3F4CCCCDu);
          v401 = (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v556, v558), v557);
          v559 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v407, v549), v550, v404), v551, v406), v530);
          *_X26 = v526;
          _X26[1] = v527;
          v560 = vmulq_f32(_Q0, v401);
          _X26[2] = v528;
          _X26[3] = vmulq_f32(vsubq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v407, v542), v543, v404), v544, v406), v414), v559), v560);
          _X26[4] = v560;
          _X26[5] = vmulq_f32(v560, vnegq_f32(v559));
          v561 = vmlaq_f32(vmulq_f32(v402, v488), v403, v552);
          v562 = vmlaq_f32(vmulq_f32(v405, v492), v402, v553);
          v563 = vmlaq_f32(vmulq_f32(v403, v487), v405, v554);
          v400 = v733;
          v564 = (float32x4_t)vbicq_s8((int8x16_t)v561, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v561)));
          v565 = (float32x4_t)vbicq_s8((int8x16_t)v562, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v562)));
          v566 = (float32x4_t)vbicq_s8((int8x16_t)v563, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v563)));
          v567 = vmlaq_f32(vmlaq_f32(vmulq_f32(v741, v564), v565, v740), v566, v739);
          v568 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v564), v565, v737), v566, v736);
          v569 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v564), v565, v734), v566, v415);
          v570 = vmlaq_f32(v747, v749, vmlaq_f32(vmlaq_f32(vmulq_f32(v567, v567), v568, v568), v569, v569));
          v571 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v730, v405), v728, v403), v726, v402), v745, v564), v743, v565), v742, v566);
          if (v103)
          {
            v572 = vmlsq_f32(vmulq_f32(v402, v518), v403, v519);
            v573 = vmlsq_f32(vmulq_f32(v405, v519), v402, v517);
            v574 = vmlsq_f32(vmulq_f32(v403, v517), v405, v518);
            v575 = (float32x4_t)vbicq_s8((int8x16_t)v572, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v572)));
            v576 = (float32x4_t)vbicq_s8((int8x16_t)v573, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v573)));
            v577 = (float32x4_t)vbicq_s8((int8x16_t)v574, (int8x16_t)vcgtq_f32(v733, vabsq_f32(v574)));
            v578 = vmlaq_f32(vmlaq_f32(vmulq_f32(v710, v575), v576, v709), v577, v708);
            v579 = vmlaq_f32(vmlaq_f32(vmulq_f32(v707, v575), v576, v706), v577, v705);
            v580 = vmlaq_f32(vmlaq_f32(vmulq_f32(v704, v575), v576, v703), v577, v711);
            v401 = v714;
            v400 = vmlaq_f32(v713, v714, vmlaq_f32(vmlaq_f32(vmulq_f32(v578, v578), v579, v579), v580, v580));
            v570 = vaddq_f32(v570, v400);
            v541[6] = v578;
            v541[7] = v579;
            v541[8] = v580;
            v571 = vsubq_f32(v571, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v717, v405), v716, v403), v715, v402), v732, v575), v724, v576), v731, v577));
          }
          else if (v712)
          {
            v571 = vsubq_f32(v571, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v717, v405), v716, v403), v715, v402), v732, vmlsq_f32(vmulq_f32(v402, v518), v403, v519)), v724, vmlsq_f32(vmulq_f32(v405, v519), v402, v517)), v731, vmlsq_f32(vmulq_f32(v403, v517), v405, v518)));
          }
          v581 = vrecpeq_f32(v570);
          v582 = 4;
          do
          {
            v581 = vmulq_f32(v581, vrecpsq_f32(v581, v570));
            --v582;
          }
          while (v582);
          v583 = vmulq_f32(_Q0, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v581, v558), (int8x16_t)vcgtzq_f32(v570)));
          v584 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v405, v549), v550, v403), v551, v402), v571);
          *v541 = v567;
          v541[1] = v568;
          v541[2] = v569;
          v541[3] = vmulq_f32(vsubq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v405, v542), v543, v403), v544, v402), v414), v584), v583);
          v541[4] = v583;
          v541[5] = vmulq_f32(v583, vnegq_f32(v584));
          ++v408;
          _X26 = (float32x4_t *)((char *)_X26 + v645 + v645);
          if (v408 == v697)
          {
            LODWORD(v603) = v603 + 1;
            ++HIDWORD(v603);
            LODWORD(v602) = v602 + 1;
            ++HIDWORD(v602);
            v350 = v638;
            break;
          }
        }
      }
      v208 = v350 + 1;
      v206 = v375;
      v116 = v640;
      if (v208 == v595)
        goto LABEL_363;
    }
    v254 = 0;
    v255 = (uint64_t)_X2 + v223 * v645;
    v256 = v248 | v246 | v249 | v250;
    while (2)
    {
      __asm
      {
        PRFM            #0, [X2,#0x180]
        PRFM            #0, [X2,#0x200]
        PRFM            #0, [X2,#0x280]
      }
      v260 = a2[17];
      v261 = v701 + *(unsigned __int16 *)(a1 + 44 * v236);
      v262 = a2[43];
      v263 = HIDWORD(v700) + *(unsigned __int16 *)(a1 + 44 * v702);
      v264 = a2[69];
      v265 = v700 + *(unsigned __int16 *)(a1 + 44 * HIDWORD(v702));
      v266 = a2[95];
      v267 = v699 + *(unsigned __int16 *)(a1 + 44 * HIDWORD(v701));
      v268 = (int32x4_t *)(v260 + (v261 << 6));
      v269 = (int32x4_t *)(v262 + (v263 << 6));
      v270 = (int32x4_t *)(v264 + (v265 << 6));
      v271 = (int32x4_t *)(v266 + (v267 << 6));
      v272 = v268[1];
      v273 = v268[2];
      v274 = v270[1];
      v275 = v270[2];
      v276 = vzip1q_s32(v272, v274);
      v277 = vzip2q_s32(v272, v274);
      v278 = v269[1];
      v279 = v269[2];
      v281 = v271[1];
      v280 = v271[2];
      v282 = vzip1q_s32(v278, v281);
      v283 = vzip2q_s32(v278, v281);
      v284 = (float32x4_t)vzip1q_s32(v276, v282);
      v285 = (float32x4_t)vzip2q_s32(v276, v282);
      v286 = (float32x4_t)vzip1q_s32(v277, v283);
      v287 = vsubq_f32(v284, v723);
      v288 = vsubq_f32(v285, v722);
      v289 = vsubq_f32(v286, v719);
      v290 = vmlsq_f32(vmulq_f32(v229, v288), v228, v289);
      v291 = vmlsq_f32(vmulq_f32(v227, v289), v229, v287);
      v292 = vmlsq_f32(vmulq_f32(v228, v287), v227, v288);
      v293 = (float32x4_t)vbicq_s8((int8x16_t)v290, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v290)));
      v294 = (float32x4_t)vbicq_s8((int8x16_t)v291, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v291)));
      v295 = (float32x4_t)vbicq_s8((int8x16_t)v292, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v292)));
      v296 = vmlaq_f32(vmulq_f32(v741, v293), v294, v740);
      v297 = vmlaq_f32(vmulq_f32(v738, v293), v294, v737);
      v298 = vmlaq_f32(vmulq_f32(v735, v293), v294, v734);
      v299 = vmlaq_f32(vmulq_f32(v745, v293), v743, v294);
      v300.i32[0] = v268->i32[3];
      v300.i32[1] = v269->i32[3];
      v300.i32[2] = v270->i32[3];
      v300.i32[3] = v271->i32[3];
      v301 = vsubq_f32(v284, v721);
      v302 = vsubq_f32(v285, v720);
      v303 = vsubq_f32(v286, v718);
      v304 = vmlaq_f32(v296, v295, v739);
      v305 = vmlaq_f32(v297, v295, v736);
      v306 = vmlaq_f32(v298, v295, v642);
      v307 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v306, v306), v305, v305), v304, v304), v749, v747);
      v308 = vaddq_f32(v252, vmlaq_f32(v299, v742, v295));
      if (v647)
      {
        v309 = vmlsq_f32(vmulq_f32(v229, v302), v228, v303);
        v310 = vmlsq_f32(vmulq_f32(v227, v303), v229, v301);
        v311 = vmlsq_f32(vmulq_f32(v228, v301), v227, v302);
        v312 = (float32x4_t)vbicq_s8((int8x16_t)v309, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v309)));
        v313 = (float32x4_t)vbicq_s8((int8x16_t)v310, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v310)));
        v314 = (float32x4_t)vbicq_s8((int8x16_t)v311, (int8x16_t)vcgtq_f32(v232, vabsq_f32(v311)));
        v315 = vmlaq_f32(vmlaq_f32(vmulq_f32(v710, v312), v313, v709), v314, v708);
        v316 = vmlaq_f32(vmlaq_f32(vmulq_f32(v707, v312), v313, v706), v314, v705);
        v317 = vmlaq_f32(vmlaq_f32(vmulq_f32(v704, v312), v313, v703), v314, v711);
        v233 = v724;
        v232 = v733;
        v307 = vaddq_f32(v307, vmlaq_f32(v713, v714, vmlaq_f32(vmlaq_f32(vmulq_f32(v317, v317), v316, v316), v315, v315)));
        v308 = vsubq_f32(v308, vmlaq_f32(vmlaq_f32(vmulq_f32(v732, v312), v724, v313), v731, v314));
        _X2[6] = v315;
        _X2[7] = v316;
        _X2[8] = v317;
      }
      else if (v712)
      {
        v308 = vsubq_f32(v308, vmlaq_f32(vmlaq_f32(vmulq_f32(v732, vmlsq_f32(vmulq_f32(v229, v302), v228, v303)), v233, vmlsq_f32(vmulq_f32(v227, v303), v229, v301)), v731, vmlsq_f32(vmulq_f32(v228, v301), v227, v302)));
      }
      v318 = v254 + 1;
      v253 = (float32x4_t *)((char *)_X2 + v645);
      v319 = vzip1q_s32(v273, v275);
      v320 = vzip2q_s32(v273, v275);
      v321 = vzip1q_s32(v279, v280);
      v322 = vmlaq_f32(vmlaq_f32(vmulq_f32(v229, (float32x4_t)vzip1q_s32(v320, vzip2q_s32(v279, v280))), v228, (float32x4_t)vzip2q_s32(v319, v321)), v227, (float32x4_t)vzip1q_s32(v319, v321));
      v323 = vrecpeq_f32(v307);
      v324 = 4;
      do
      {
        v323 = vmulq_f32(v323, vrecpsq_f32(v323, v307));
        --v324;
      }
      while (v324);
      v325 = (float32x4_t)vandq_s8((int8x16_t)v323, (int8x16_t)vcgtzq_f32(v307));
      v326 = vsubq_f32(v300, v644);
      v327 = vandq_s8(vandq_s8((int8x16_t)vcgtq_f32(v593, v308), (int8x16_t)vcgtzq_f32(v698)), (int8x16_t)vcgtq_f32(vnegq_f32(v308), vmulq_n_f32(v326, a4)));
      v328 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v325, vnegq_f32(vmaxq_f32(v594, vmulq_n_f32(v326, v643)))), vandq_s8(v327, (int8x16_t)vcgeq_f32(v600, v326)));
      v329 = vsubq_f32(v308, v322);
      *_X2 = v304;
      _X2[1] = v305;
      _X2[2] = v306;
      _X2[3] = v325;
      v330 = vbslq_s8(v327, (int8x16_t)v328, (int8x16_t)vmaxq_f32(v328, (float32x4_t)0));
      _X2[4] = (float32x4_t)v330;
      _X2[5] = vmlsq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_f32(vmulq_f32(v308, v606), v325), v327), v328), v325, v329);
      if (v238)
      {
        v330.i32[0] = *(_DWORD *)(v260 + (v261 << 6) + 28);
        v305.i32[0] = *(_DWORD *)(v262 + (v263 << 6) + 28);
        v306.i32[0] = *(_DWORD *)(v264 + (v265 << 6) + 28);
        v329.i32[0] = *(_DWORD *)(v266 + (v267 << 6) + 28);
        *(int8x8_t *)&v331 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v330.i8, 0), *(int8x8_t *)v305.f32, 4uLL);
        *((int8x8_t *)&v331 + 1) = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v306.f32, 0), *(int8x8_t *)v329.f32, 4uLL);
        *(_OWORD *)(v255 + 16 * v254) = v331;
      }
      if ((v256 & 1) != 0)
      {
        v335 = v256;
        if ((v256 & 2) == 0)
          goto LABEL_247;
      }
      else
      {
        v332 = v237 + 1;
        v333 = 0xFFFFLL;
        if ((_DWORD)v231 == 0xFFFF)
        {
          v334 = 0;
        }
        else
        {
          v333 = v231;
          while (1)
          {
            v336 = *(unsigned __int8 *)(a1 + 44 * v333 + 5);
            if (v332 != v336)
              break;
            v332 = 0;
            v333 = *(unsigned __int16 *)(a1 + 44 * v333 + 2);
            if ((_DWORD)v333 == 0xFFFF)
            {
              v332 = 0;
              v334 = 0;
              v333 = 0xFFFFLL;
              goto LABEL_246;
            }
          }
          v334 = v332 < v336;
        }
LABEL_246:
        v335 = v256 | !v334;
        v236 = v231;
        LODWORD(v701) = v237;
        v237 = v332;
        v231 = v333;
        if ((v256 & 2) == 0)
        {
LABEL_247:
          v337 = v240 + 1;
          v338 = 0xFFFFLL;
          if ((_DWORD)v230 == 0xFFFF)
          {
            v339 = 2;
          }
          else
          {
            v338 = v230;
            while (1)
            {
              v340 = *(unsigned __int8 *)(a1 + 44 * v338 + 5);
              if (v337 != v340)
                break;
              v337 = 0;
              v338 = *(unsigned __int16 *)(a1 + 44 * v338 + 2);
              if ((_DWORD)v338 == 0xFFFF)
              {
                v339 = 2;
                v338 = 0xFFFFLL;
                goto LABEL_256;
              }
            }
            if (v337 >= v340)
              v339 = 2;
            else
              v339 = 0;
          }
LABEL_256:
          v335 = v339 | v335;
          LODWORD(v702) = v230;
          HIDWORD(v700) = v240;
          v240 = v337;
          v230 = v338;
        }
      }
      if ((v256 & 4) != 0)
      {
        if ((v256 & 8) != 0)
          goto LABEL_280;
LABEL_270:
        v345 = v244 + 1;
        v346 = 0xFFFFLL;
        if ((_DWORD)v234 == 0xFFFF)
        {
          v347 = 8;
        }
        else
        {
          v346 = v234;
          while (1)
          {
            v348 = *(unsigned __int8 *)(a1 + 44 * v346 + 5);
            if (v345 != v348)
              break;
            v345 = 0;
            v346 = *(unsigned __int16 *)(a1 + 44 * v346 + 2);
            if ((_DWORD)v346 == 0xFFFF)
            {
              v347 = 8;
              v346 = 0xFFFFLL;
              goto LABEL_279;
            }
          }
          if (v345 >= v348)
            v347 = 8;
          else
            v347 = 0;
        }
LABEL_279:
        v335 = v347 | v335;
        v699 = v244;
        HIDWORD(v701) = v234;
        v244 = v345;
        v234 = v346;
      }
      else
      {
        v341 = v242 + 1;
        v342 = 0xFFFFLL;
        if ((_DWORD)v235 == 0xFFFF)
        {
          v343 = 4;
        }
        else
        {
          v342 = v235;
          while (1)
          {
            v344 = *(unsigned __int8 *)(a1 + 44 * v342 + 5);
            if (v341 != v344)
              break;
            v341 = 0;
            v342 = *(unsigned __int16 *)(a1 + 44 * v342 + 2);
            if ((_DWORD)v342 == 0xFFFF)
            {
              v343 = 4;
              v342 = 0xFFFFLL;
              goto LABEL_269;
            }
          }
          if (v341 >= v344)
            v343 = 4;
          else
            v343 = 0;
        }
LABEL_269:
        v335 = v343 | v335;
        HIDWORD(v702) = v235;
        LODWORD(v700) = v242;
        v242 = v341;
        v235 = v342;
        if ((v256 & 8) == 0)
          goto LABEL_270;
      }
LABEL_280:
      _X2 = v253;
      v254 = v318;
      _ZF = (_DWORD)v256 == 15;
      v256 = v335;
      if (_ZF)
        goto LABEL_282;
      continue;
    }
  }
LABEL_363:
  *(_DWORD *)(v586 + v585) = 0;
  return 2;
}

uint64_t physx::Dy::createFinalizeSolverContacts4Coulomb(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t (***a4)(_QWORD), int a5, double a6, int32x2_t a7, int32x2_t a8)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t i;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v30;
  float v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  char v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  int j;
  uint64_t v54;
  float v58;
  __int128 v59;
  int32x2_t *v60;
  int32x2_t v61;
  int v62;
  unsigned int v63;
  _DWORD *v64;
  unsigned int *v65;
  int8x8_t v66;
  int32x2_t v67;
  int32x2_t v68;
  int32x2_t v69;
  float v70;
  float v71;
  float32_t v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int8x8_t v77;
  char v78;
  unsigned int v79;
  int v80;
  int v81;
  float32x4_t *v82;
  float32x4_t *v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  char v87;
  __int32 v88;
  int v89;
  int v90;
  int v91;
  float32x4_t *v92;
  float32x4_t *v93;
  uint64_t v94;
  __int32 v95;
  __int32 v96;
  int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  _WORD *v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  int v107;
  uint64_t v108;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int32x4_t v117;
  int32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int8x8_t v126;
  int32x2_t v127;
  float32x4_t v128;
  int8x8_t v129;
  uint64_t v130;
  float32x4_t v131;
  int32x2_t v132;
  float32x4_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int8x16_t v166;
  float32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  __int32 *v199;
  __int32 *v200;
  __int32 *v201;
  __int32 *v202;
  __int32 *v203;
  __int32 *v204;
  _DWORD *v205;
  float32x4_t v206;
  uint64_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  uint64_t v211;
  char v212;
  char v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  unsigned int v217;
  uint64_t v218;
  float32x4_t v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  int32x4_t *v237;
  int32x4_t *v238;
  int32x4_t *v239;
  int32x4_t *v240;
  const float *v241;
  int8x8_t v242;
  const float *v243;
  int8x8_t v244;
  float32x4_t v245;
  const float *v246;
  int8x8_t v247;
  const float *v248;
  int8x8_t v249;
  unsigned int v250;
  __int128 v251;
  int32x4_t v252;
  int32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  int8x16_t v259;
  float32x4_t v260;
  float32x4_t v261;
  int8x16_t v262;
  int8x16_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  int8x16_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  int v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  uint64_t v280;
  uint64_t k;
  int v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  _BOOL4 v294;
  int v295;
  int v296;
  int v297;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  float32x4_t v307;
  uint64_t v308;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  int32x4_t v316;
  int8x16_t v317;
  int32x4_t v318;
  int8x16_t v319;
  int32x4_t v320;
  int8x16_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  int8x8_t v335;
  const float *v336;
  int8x8_t v337;
  int8x8_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  int32x4_t v359;
  int8x16_t v360;
  int32x4_t v361;
  int32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  __int128 v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  int v373;
  unsigned int v374;
  int v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  int8x16_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t *v383;
  int v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  int v415;
  uint64_t v416;
  _BOOL4 v417;
  uint64_t v418;
  unsigned int v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  unsigned int v423;
  unsigned int v424;
  int v425;
  unsigned int v426;
  int v427;
  unsigned int v428;
  uint64_t v429;
  unsigned int v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  uint64_t v435;
  __int128 v436;
  float32x4_t v437;
  float32x4_t v438;
  __int128 v439;
  float32x4_t v440;
  char v441;
  _DWORD *v442;
  char v443;
  char v444;
  char v445;
  char v446;
  char v447;
  int v448;
  unsigned int v449;
  float32x4_t v450;
  unsigned int v451;
  unsigned int v452;
  unsigned int v453;
  unsigned int v454;
  unsigned int v455;
  float32x4_t v457;
  int8x8_t v458;
  int8x8_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  uint64_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v477;
  _DWORD *v478;
  int v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  float32x4_t v484;
  int v485;
  int v486;
  int v487;
  int8x8_t v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  unsigned int v510;
  float32x4_t v511;
  uint64_t *v512;
  unsigned int v513;
  float32x4_t v514;
  uint64_t v516;
  float32x4_t v517;
  float32x4_t v518;
  uint64_t *v519;
  float32x4_t v520;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v527;
  _DWORD *v528;
  float32x4_t v529;
  float32x4_t v531;
  float32x4_t v533;
  unsigned int v534;
  float32x4_t v535;
  _DWORD v536[4];
  __int128 v537;
  __int128 v538;
  float32x4_t v539;
  float32x4_t v540;
  _OWORD v541[2];
  float32x4_t v542;
  float32x4_t v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  float32x4_t v550;
  float32x4_t v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  uint64_t v558;

  v8 = a2;
  v9 = a1;
  v558 = *MEMORY[0x24BDAC8D0];
  v519 = (uint64_t *)(a3 + 181);
  v512 = (uint64_t *)(a3 + 77);
  for (i = 4; i != 212; i += 52)
    *(_WORD *)(*(_QWORD *)&a3[i] + 30) = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a2 + 4;
  a2[1028] = 0;
  v16 = (uint64_t)(a2 + 1032);
  v528 = a2 + 2953;
  *(_QWORD *)(a2 + 2953) = 0;
  if (a5 == 1)
    v17 = 1;
  else
    v17 = 2;
  v478 = a3;
  v18 = a3;
  do
  {
    v19 = &a3[52 * v13];
    v20 = (uint64_t *)*((_QWORD *)v19 + 2);
    v21 = (uint64_t)&v15[16 * (unint64_t)v14];
    *((_QWORD *)v19 + 17) = v21;
    _X11 = *v20;
    _X10 = v20[1];
    __asm
    {
      PRFM            #0, [X11]
      PRFM            #0, [X10]
    }
    v30 = *(uint64_t **)(v9 + 8 * v13);
    if (v14 + *((unsigned __int8 *)v30 + 24) > 0x40)
      return 1;
    v31 = *(float *)(*((_QWORD *)v19 + 5) + 76);
    if (v31 >= *(float *)(*((_QWORD *)v19 + 6) + 76))
      v31 = *(float *)(*((_QWORD *)v19 + 6) + 76);
    v32 = *v30;
    if (!*v30)
    {
      v35 = v8[1028];
LABEL_72:
      v8[1028] = v35;
      return 1;
    }
    v33 = *(_BYTE *)(v32 + 43);
    if ((v33 & 2) != 0)
      v34 = 64;
    else
      v34 = 16;
    v35 = v8[1028];
    if ((*(_BYTE *)(v32 + 43) & 4) != 0)
      goto LABEL_72;
    v37 = *(float *)v32;
    v36 = *(float *)(v32 + 4);
    v540.i32[v13] = *(_DWORD *)v32;
    v39 = *(float *)(v32 + 8);
    v38 = *(float *)(v32 + 12);
    v539.f32[v13] = v39;
    v40 = *((unsigned __int8 *)v30 + 25);
    _X14 = v30[1];
    *((float *)&v538 + v13) = v36;
    *((float *)&v537 + v13) = v38;
    if (!v40)
      goto LABEL_72;
    v534 = v14;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = (v33 >> 5) & 1;
    if ((v33 & 2) != 0)
      v46 = 6;
    else
      v46 = 4;
    v47 = v33 < 0;
    if (v33 < 0)
      v34 = 32;
    v48 = v33 & 0xFFFFFF82;
    if (v47)
      v46 = 5;
    v49 = v35;
    do
    {
      if (v42)
      {
        v50 = *(unsigned __int8 *)(v32 + 41);
        _CF = v50 >= v43;
        v51 = v50 - v43;
        v47 = v51 != 0 && _CF;
        LODWORD(v52) = v51 << v46;
        if (v47)
          v52 = v52;
        else
          v52 = 0;
        _X14 += v52;
        v32 += 48;
      }
      v43 = *(unsigned __int8 *)(v32 + 41);
      if (*(_BYTE *)(v32 + 41))
      {
        for (j = *(unsigned __int8 *)(v32 + 41); j; --j)
        {
          if (v44)
            v54 = v34;
          else
            v54 = 0;
          _X14 += v54;
          __asm { PRFM            #0, [X14,#0x80] }
          _X6 = &v15[16 * (unint64_t)v49];
          __asm { PRFM            #0, [X6,#0x80] }
          v58 = v31;
          if (v45)
          {
            if (!v48)
            {
              v58 = 3.4028e38;
LABEL_41:
              *(_QWORD *)&v59 = *(_QWORD *)(v32 + 16);
              v60 = (int32x2_t *)&v15[16 * (unint64_t)v49];
              DWORD2(v59) = *(_DWORD *)(v32 + 24);
              HIDWORD(v59) = *(_DWORD *)(_X14 + 12);
              *_X6 = v59;
              v60[2] = *(int32x2_t *)_X14;
              v60[3].i32[0] = *(_DWORD *)(_X14 + 8);
              v60[6].i8[0] = *(_BYTE *)(v32 + 42);
              *(float *)&v60[3].i32[1] = v58;
              v60[5].i32[1] = *(_DWORD *)(v32 + 36);
              v60[7] = vrev64_s32(*(int32x2_t *)(v32 + 28));
              if (v48)
              {
                v61 = *(int32x2_t *)(_X14 + 16);
                v62 = *(_DWORD *)(_X14 + 24);
              }
              else
              {
                v61 = 0;
                v62 = 0;
              }
              v60[4] = v61;
              v60[5].i32[0] = v62;
              ++v49;
              goto LABEL_45;
            }
            v58 = *(float *)(_X14 + 28);
          }
          if (v58 != 0.0)
            goto LABEL_41;
LABEL_45:
          v44 = 1;
        }
      }
      ++v42;
    }
    while (v42 != v40);
    v8[1028] = v49;
    v63 = v49 - v35;
    if (v49 == v35)
      return 1;
    v64 = &v18[52 * v13];
    v64[46] = v12;
    v65 = v64 + 46;
    *(v65 - 10) = v63;
    *((_BYTE *)v65 - 36) = v45;
    v65[2] = v11;
    physx::Dy::createContactPatches(v16, v21, v63, 0.999);
    if ((physx::Dy::correlatePatches(v16, *((_QWORD *)v19 + 17), (float *)v19 + 14, (float *)v19 + 21, v65[2], *v65, 0.999) & 1) != 0)return 1;
    v70 = *((float *)v19 + 1);
    v540.f32[v13] = v37 * *(float *)v19;
    v71 = *((float *)v19 + 3);
    v72 = v39 * *((float *)v19 + 2);
    v14 = v63 + v534;
    v8 = a2;
    v11 = a2[2953];
    v73 = &v18[52 * v13];
    *((_WORD *)v73 + 98) = v11 - v65[2];
    v12 = a2[2954];
    v74 = v12 - *v65;
    v539.f32[v13] = v72;
    *((float *)&v538 + v13) = v36 * v70;
    v73[47] = v74;
    *((float *)&v537 + v13++) = v38 * v71;
    a3 = v18;
    v9 = a1;
  }
  while (v13 != 4);
  v75 = 0;
  LODWORD(v76) = 0;
  v77.i32[1] = 0;
  v550 = 0u;
  v551 = 0u;
  v78 = a5 != 1;
  v552 = 0u;
  v553 = 0u;
  v554 = 0u;
  v555 = 0u;
  v556 = 0u;
  v557 = 0u;
  v542 = 0u;
  v543 = 0u;
  v544 = 0u;
  v545 = 0u;
  v546 = 0u;
  v547 = 0u;
  v548 = 0u;
  v549 = 0u;
  do
  {
    v79 = v18[52 * v75 + 47];
    if (v79)
    {
      v80 = 0;
      v81 = v18[52 * v75 + 46];
      v82 = &v542;
      v83 = &v550;
      v84 = v18[52 * v75 + 47];
      do
      {
        v85 = v81;
        v86 = a2[v81 + 2856];
        if (v86)
        {
          v87 = BYTE1(a2[26 * v81 + 1736]);
          v88 = v83->i32[0];
          if (v86 > v83->i32[0])
            v88 = v86;
          v83->i32[0] = v88;
          v80 += v86;
          if ((v87 & 1) == 0)
          {
            v89 = v82->i32[0];
            if (v86 << v78 > v82->i32[0])
              v89 = v86 << v78;
            v82->i32[0] = v89;
            v80 += v86 << v78;
          }
        }
        v82 = (float32x4_t *)((char *)v82 + 4);
        v83 = (float32x4_t *)((char *)v83 + 4);
        v81 = v85 + 1;
        --v84;
      }
      while (v84);
    }
    else
    {
      v80 = 0;
    }
    if (v79 <= v76)
      v76 = v76;
    else
      v76 = v79;
    v536[v75++] = v80;
  }
  while (v75 != 4);
  if ((_DWORD)v76)
  {
    v90 = 0;
    v91 = 0;
    v92 = &v542;
    v93 = &v550;
    v94 = v76;
    do
    {
      v95 = v93->i32[0];
      v93 = (float32x4_t *)((char *)v93 + 4);
      v91 += v95;
      v96 = v92->i32[0];
      v92 = (float32x4_t *)((char *)v92 + 4);
      v90 += v96;
      --v94;
    }
    while (v94);
  }
  else
  {
    v91 = 0;
    v90 = 0;
  }
  v98 = v90 + v91;
  if ((((v18[81] | v18[29]) | (v18[133] | v18[185])) & 1) != 0)
    v99 = 192;
  else
    v99 = 144;
  v100 = 272 * v76 + v99 * v98;
  if (!v100)
  {
    v101 = 0;
    goto LABEL_84;
  }
  if (v100 + 16 > 0x4000)
    return 1;
  v101 = (**a4)(a4);
  if ((unint64_t)(v101 + 1) < 2)
    return 0;
  a3 = v478;
LABEL_84:
  v448 = a5 != 1;
  v102 = 0;
  v103 = (_WORD *)a3 + 99;
  v434 = v100;
  do
  {
    v104 = *(_QWORD *)(v103 - 91);
    *(_QWORD *)(v104 + 32) = v101;
    *v103 += v536[v102];
    v103 += 104;
    *(_WORD *)(v104 + 30) = v100 >> 4;
    v105 = *(_QWORD *)(a1 + 8 * v102);
    v106 = *(unsigned __int8 *)(v105 + 24);
    *(_QWORD *)(v104 + 40) = *(_QWORD *)(v105 + 16);
    *(_WORD *)(v104 + 28) = v106;
    ++v102;
  }
  while (v102 != 4);
  v435 = v101;
  v107 = a3[81] | a3[29] | a3[133] | a3[185];
  v108 = 12;
  if ((v107 & 1) == 0)
    v108 = 9;
  _X10 = a2 + 2921;
  __asm { PRFM            #0, [X10] }
  _X10 = v528;
  __asm { PRFM            #0, [X10] }
  v113 = a3[47];
  v114 = a3[99];
  v115 = a3[151];
  if (v115 <= a3[203])
    v115 = a3[203];
  if (v114 <= v115)
    v114 = v115;
  if (v113 <= v114)
    v113 = v114;
  v449 = v113;
  if (v113)
  {
    v116 = 0;
    v453 = 0;
    v454 = 0;
    v451 = 0;
    v117.i64[1] = v540.i64[1];
    v118.i64[1] = v539.i64[1];
    v119 = *((_QWORD *)a3 + 31);
    v120 = *((_QWORD *)a3 + 32);
    v77.i32[0] = *(_DWORD *)(v119 + 68);
    v122 = *((_QWORD *)a3 + 57);
    v121 = *((_QWORD *)a3 + 58);
    v67.i32[0] = *(_DWORD *)(v122 + 68);
    v123 = *((_QWORD *)a3 + 83);
    v66.i32[0] = *(_DWORD *)(v123 + 68);
    v125 = *((_QWORD *)a3 + 5);
    v124 = *((_QWORD *)a3 + 6);
    v206.i32[0] = *(_DWORD *)(v125 + 64);
    v68.i32[0] = *(_DWORD *)(v125 + 68);
    v126 = (int8x8_t)vdup_lane_s32(v68, 0);
    v127 = vdup_lane_s32(v67, 0);
    *(int8x8_t *)v128.f32 = vext_s8(v126, v77, 4uLL);
    v129 = vext_s8((int8x8_t)v127, v66, 4uLL);
    *(int8x8_t *)&v128.u32[2] = v129;
    v129.i32[0] = *(_DWORD *)(v120 + 68);
    v127.i32[0] = *(_DWORD *)(v121 + 68);
    v130 = *((_QWORD *)a3 + 84);
    v126.i32[0] = *(_DWORD *)(v130 + 68);
    v69.i32[0] = *(_DWORD *)(v124 + 68);
    *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)vdup_lane_s32(v69, 0), v129, 4uLL);
    v132 = (int32x2_t)vext_s8((int8x8_t)vdup_lane_s32(v127, 0), v126, 4uLL);
    *(int32x2_t *)&v131.u32[2] = v132;
    v133 = vmaxq_f32(v128, v131);
    v128.i32[0] = a3[38];
    v131.i32[0] = a3[90];
    v132.i32[0] = a3[142];
    v126.i32[0] = a3[194];
    *(int8x8_t *)v131.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v128.f32, 0), *(int8x8_t *)v131.f32, 4uLL);
    *(int8x8_t *)&v131.u32[2] = vext_s8((int8x8_t)vdup_lane_s32(v132, 0), v126, 4uLL);
    v470 = v131;
    v471 = v133;
    v134 = *(int32x4_t *)(v125 + 16);
    v135 = *(int8x16_t *)v119;
    v136 = *(int32x4_t *)(v119 + 16);
    v137 = *(int32x4_t *)v122;
    v138 = *(int32x4_t *)(v122 + 16);
    v139 = *(int32x4_t *)v123;
    v140 = *(int32x4_t *)(v123 + 16);
    v141 = *(int32x4_t *)v124;
    v142 = *(int32x4_t *)(v124 + 16);
    v143 = *(int32x4_t *)(v120 + 16);
    v144 = *(int32x4_t *)(v121 + 16);
    v145 = *(int32x4_t *)(v130 + 16);
    v146 = vzip1q_s32(*(int32x4_t *)v125, *(int32x4_t *)v122);
    v147 = vzip1q_s32(*(int32x4_t *)v119, *(int32x4_t *)v123);
    v148 = vzip1q_s32(v146, v147);
    v149 = (float32x4_t)vzip2q_s32(v146, v147);
    v150 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v125, *(int32x4_t *)v122), vzip2q_s32(*(int32x4_t *)v119, *(int32x4_t *)v123));
    v151 = vzip1q_s32(*(int32x4_t *)v124, *(int32x4_t *)v121);
    v152 = vzip1q_s32(*(int32x4_t *)v120, *(int32x4_t *)v130);
    v153 = (float32x4_t)vzip1q_s32(v151, v152);
    v154 = (float32x4_t)vzip2q_s32(v151, v152);
    v155 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v124, *(int32x4_t *)v121), vzip2q_s32(*(int32x4_t *)v120, *(int32x4_t *)v130));
    v156 = (float32x4_t)v148;
    v157 = vzip1q_s32(v134, v138);
    v158 = vzip2q_s32(v134, v138);
    v159 = vzip1q_s32(v136, v140);
    v160 = vzip1q_s32(v157, v159);
    v535 = (float32x4_t)vzip2q_s32(v157, v159);
    v533 = (float32x4_t)vzip1q_s32(v158, vzip2q_s32(v136, v140));
    v161 = vzip1q_s32(v142, v144);
    v162 = vzip2q_s32(v142, v144);
    v163 = vzip1q_s32(v143, v145);
    v164 = vzip2q_s32(v143, v145);
    v165 = vzip1q_s32(v161, v163);
    v166 = (int8x16_t)vzip2q_s32(v161, v163);
    v507 = (float32x4_t)v166;
    v508 = (float32x4_t)v165;
    *(int32x2_t *)v166.i8 = vdup_laneq_s32(*(int32x4_t *)v119, 3);
    *(int32x2_t *)v135.i8 = vdup_laneq_s32(*(int32x4_t *)v123, 3);
    v128.i64[0] = vextq_s8(*(int8x16_t *)v125, v166, 0xCuLL).u64[0];
    v128.i64[1] = vextq_s8(*(int8x16_t *)v122, v135, 0xCuLL).u64[0];
    v167 = (float32x4_t)vzip1q_s32(v162, v164);
    v506 = v167;
    *(int32x2_t *)v167.f32 = vdup_laneq_s32(*(int32x4_t *)v120, 3);
    *(int32x2_t *)v135.i8 = vdup_laneq_s32(*(int32x4_t *)v130, 3);
    v167.i64[0] = vextq_s8(*(int8x16_t *)v124, (int8x16_t)v167, 0xCuLL).u64[0];
    v168 = (int32x4_t)vextq_s8(*(int8x16_t *)v121, v135, 0xCuLL);
    v167.i64[1] = v168.i64[0];
    v518 = vmulq_f32(v540, v128);
    v169 = (int32x4_t)vmulq_f32(v539, v167);
    v450 = (float32x4_t)v169;
    v169.i64[0] = *(_QWORD *)(v125 + 32);
    v117.i64[0] = *(_QWORD *)(v125 + 44);
    v118.i64[0] = *(_QWORD *)(v125 + 56);
    v167.i64[0] = *(_QWORD *)(v119 + 32);
    v168.i64[0] = *(_QWORD *)(v119 + 44);
    v162.i64[0] = *(_QWORD *)(v119 + 56);
    v137.i64[0] = *(_QWORD *)(v122 + 32);
    v163.i64[0] = *(_QWORD *)(v122 + 44);
    v139.i64[0] = *(_QWORD *)(v122 + 56);
    v164.i64[0] = *(_QWORD *)(v123 + 32);
    v141.i64[0] = *(_QWORD *)(v123 + 44);
    v165.i64[0] = *(_QWORD *)(v123 + 56);
    v170 = vzip1q_s32(v169, v137);
    v137.i64[0] = *(_QWORD *)(v124 + 32);
    v171 = vzip1q_s32((int32x4_t)v167, v164);
    v531 = (float32x4_t)vzip1q_s32(v170, v171);
    v172 = vzip2q_s32(v170, v171);
    v529 = (float32x4_t)v172;
    v172.i64[0] = *(_QWORD *)(v124 + 44);
    v173 = vzip1q_s32(v117, v163);
    v171.i64[0] = *(_QWORD *)(v124 + 56);
    v174 = vzip1q_s32(v168, v141);
    v175 = vzip1q_s32(v173, v174);
    v176 = vzip2q_s32(v173, v174);
    v525 = (float32x4_t)v176;
    v527 = (float32x4_t)v175;
    v176.i64[0] = *(_QWORD *)(v120 + 32);
    v177 = vzip1q_s32(v118, v139);
    v174.i64[0] = *(_QWORD *)(v120 + 44);
    v178 = vzip1q_s32(v162, v165);
    v179 = vzip1q_s32(v177, v178);
    v180 = vzip2q_s32(v177, v178);
    v523 = (float32x4_t)v180;
    v524 = (float32x4_t)v179;
    v180.i64[0] = *(_QWORD *)(v121 + 32);
    v181 = vzip1q_s32(v137, v180);
    v178.i64[0] = *(_QWORD *)(v130 + 32);
    v182 = vzip1q_s32(v176, v178);
    v183 = vzip1q_s32(v181, v182);
    v184 = vzip2q_s32(v181, v182);
    v504 = (float32x4_t)v184;
    v505 = (float32x4_t)v183;
    v184.i64[0] = *(_QWORD *)(v121 + 44);
    v185 = vzip1q_s32(v172, v184);
    v184.i64[0] = *(_QWORD *)(v130 + 44);
    v186 = vzip1q_s32(v174, v184);
    v187 = vzip1q_s32(v185, v186);
    v188 = vzip2q_s32(v185, v186);
    v502 = (float32x4_t)v188;
    v503 = (float32x4_t)v187;
    v188.i64[0] = *(_QWORD *)(v121 + 56);
    v189 = vzip1q_s32(v171, v188);
    v186.i64[0] = *(_QWORD *)(v120 + 56);
    v187.i64[0] = *(_QWORD *)(v130 + 56);
    v190 = vzip1q_s32(v186, v187);
    v191 = vzip1q_s32(v189, v190);
    v192 = vzip2q_s32(v189, v190);
    v500 = (float32x4_t)v192;
    v501 = (float32x4_t)v191;
    v192.i64[0] = *((_QWORD *)a3 + 9);
    v190.i64[0] = *((_QWORD *)a3 + 61);
    v193 = vzip1q_s32(v192, v190);
    v190.i64[0] = *((_QWORD *)a3 + 35);
    v191.i64[0] = *((_QWORD *)a3 + 87);
    v194 = vzip1q_s32(v190, v191);
    v195 = vzip1q_s32(v193, v194);
    v196 = vzip2q_s32(v193, v194);
    v468 = (float32x4_t)v196;
    v469 = (float32x4_t)v195;
    v196.i64[0] = *(_QWORD *)(a3 + 25);
    v194.i64[0] = v512[26];
    v197 = vzip1q_s32(v196, v194);
    v194.i64[0] = *v512;
    v195.i64[0] = *v519;
    v198 = vzip1q_s32(v194, v195);
    v466 = (float32x4_t)vzip2q_s32(v197, v198);
    v467 = (float32x4_t)vzip1q_s32(v197, v198);
    v197.i32[0] = a3[39];
    v197.i32[1] = a3[91];
    v197.i32[2] = a3[143];
    v197.i32[3] = a3[195];
    v465 = (float32x4_t)v197;
    v464 = (float32x4_t)vdupq_lane_s32(a8, 0);
    v446 = *((_BYTE *)a3 + 358);
    v447 = *((_BYTE *)a3 + 150);
    v199 = (__int32 *)(v120 + 40);
    v200 = (__int32 *)(v120 + 52);
    v201 = (__int32 *)(v120 + 64);
    v202 = (__int32 *)(v121 + 40);
    v203 = (__int32 *)(v121 + 52);
    v204 = (__int32 *)(v121 + 64);
    v197.i32[0] = *(_DWORD *)(v125 + 40);
    v197.i32[1] = *(_DWORD *)(v119 + 40);
    v197.i32[2] = *(_DWORD *)(v122 + 40);
    v197.i32[3] = *(_DWORD *)(v123 + 40);
    v522 = (float32x4_t)v197;
    v197.i32[0] = *(_DWORD *)(v125 + 52);
    v197.i32[1] = *(_DWORD *)(v119 + 52);
    v197.i32[2] = *(_DWORD *)(v122 + 52);
    v197.i32[3] = *(_DWORD *)(v123 + 52);
    v520 = (float32x4_t)v197;
    v205 = v478;
    v206.i32[1] = *(_DWORD *)(v119 + 64);
    v206.i32[2] = *(_DWORD *)(v122 + 64);
    v206.i32[3] = *(_DWORD *)(v123 + 64);
    v197.i32[0] = *(_DWORD *)(v124 + 40);
    v197.i32[1] = *v199;
    v197.i32[2] = *v202;
    v197.i32[3] = *(_DWORD *)(v130 + 40);
    v499 = (float32x4_t)v197;
    if ((v107 & 1) != 0)
      v207 = 176;
    else
      v207 = 128;
    v463 = v207;
    v208.i32[2] = *v203;
    v208.i32[3] = *(_DWORD *)(v130 + 52);
    v208.i32[1] = *v200;
    v208.i32[0] = *(_DWORD *)(v124 + 52);
    v498 = v208;
    v209.i32[1] = *v201;
    v209.i32[2] = *v204;
    v209.i32[3] = *(_DWORD *)(v130 + 64);
    v209.i32[0] = *(_DWORD *)(v124 + 64);
    v509 = v209;
    v210 = (float32x4_t)v160;
    v211 = v101 + (v207 * v91) + 176 * v449;
    if ((v107 & 1) != 0)
      v212 = 7;
    else
      v212 = 8;
    v444 = v212;
    v445 = *((_BYTE *)v478 + 566);
    if ((v107 & 1) != 0)
      v213 = 13;
    else
      v213 = 14;
    v443 = v213;
    v462 = (float32x4_t)vdupq_lane_s32(a7, 0);
    v214.i32[0] = v478[20];
    v214.i32[1] = v478[72];
    v215.i32[1] = HIDWORD(a6);
    v442 = a2 + 2888;
    v214.i32[2] = v478[124];
    v441 = *((_BYTE *)v478 + 774);
    v214.i32[3] = v478[176];
    v461 = v214;
    v216.i32[0] = v478[27];
    v216.i32[1] = v478[79];
    v217 = 0;
    v216.i32[2] = v478[131];
    v216.i32[3] = v478[183];
    v460 = v216;
    v218 = v101;
    v496 = v154;
    v497 = v153;
    v439 = v538;
    v440 = vsubq_f32(v156, v153);
    v219 = vsubq_f32(v149, v154);
    v495 = v155;
    v437 = vsubq_f32(v150, v155);
    v438 = v219;
    v436 = v537;
    while (1)
    {
      v220 = v205[47];
      if (v217 < v220)
        v116 = v205[46] + v217;
      v221 = v205[99];
      if (v217 < v221)
        v454 = v205[98] + v217;
      v222 = v205[151];
      if (v217 < v222)
        v453 = v205[150] + v217;
      v223 = v205[203];
      if (v217 < v223)
        v451 = v205[202] + v217;
      v516 = v218;
      if (v217 < v220)
        v224 = a2[v116 + 2856];
      else
        v224 = 0;
      if (v217 < v221)
        v225 = a2[v454 + 2856];
      else
        v225 = 0;
      if (v217 < v222)
        v226 = a2[v453 + 2856];
      else
        v226 = 0;
      v513 = v205[151];
      v510 = v205[99];
      v491 = v205[47];
      v455 = v217;
      v489 = v205[203];
      if (v217 < v223)
      {
        v487 = 0;
        v227 = a2[v451 + 2856];
      }
      else
      {
        v227 = 0;
        v487 = 8;
      }
      v493 = v224 << v448;
      v228 = v225 << v448;
      v229 = v226 << v448;
      v230 = v227 << v448;
      if (v226 <= v227)
        v231 = v227;
      else
        v231 = v226;
      if (v225 > v231)
        v231 = v225;
      if (v224 <= v231)
        v232 = v231;
      else
        v232 = v224;
      v452 = v116;
      v233 = v442[v116];
      v234 = v442[v454];
      v235 = v442[v453];
      v236 = v442[v451];
      v237 = (int32x4_t *)(*((_QWORD *)v205 + 17)
                         + ((unint64_t)*(unsigned __int16 *)(v16 + 44 * v233) << 6));
      v238 = (int32x4_t *)(*((_QWORD *)v205 + 43)
                         + ((unint64_t)*(unsigned __int16 *)(v16 + 44 * v234) << 6));
      v239 = (int32x4_t *)(*((_QWORD *)v205 + 69)
                         + ((unint64_t)*(unsigned __int16 *)(v16 + 44 * v235) << 6));
      v240 = (int32x4_t *)(*((_QWORD *)v205 + 95) + ((unint64_t)*(unsigned __int16 *)(v16 + 44 * v236) << 6));
      v241 = (const float *)&v237[3].i32[3];
      v242 = (int8x8_t)vld1_dup_f32(v241);
      v215.i32[0] = v238[3].i32[3];
      v243 = (const float *)&v239[3].i32[3];
      v219.i32[0] = v240[3].i32[3];
      v244 = (int8x8_t)vld1_dup_f32(v243);
      *(int8x8_t *)v245.f32 = vext_s8(v242, *(int8x8_t *)v215.f32, 4uLL);
      *(int8x8_t *)&v245.u32[2] = vext_s8(v244, *(int8x8_t *)v219.f32, 4uLL);
      v246 = (const float *)&v237[2].i32[3];
      v247 = (int8x8_t)vld1_dup_f32(v246);
      v215.i32[0] = v238[2].i32[3];
      v248 = (const float *)&v239[2].i32[3];
      v219.i32[0] = v240[2].i32[3];
      v249 = (int8x8_t)vld1_dup_f32(v248);
      *(_WORD *)(v516 + 2) = v211 - v516;
      *(_BYTE *)(v516 + 4) = v224;
      *(_BYTE *)(v516 + 5) = v225;
      *(_BYTE *)(v516 + 6) = v226;
      *(_BYTE *)(v516 + 7) = v227;
      *(_BYTE *)(v516 + 1) = v232;
      *(float32x4_t *)(v516 + 80) = v518;
      *(float32x4_t *)(v516 + 96) = v450;
      *(_OWORD *)(v516 + 112) = v439;
      *(_OWORD *)(v516 + 128) = v436;
      v477 = v245;
      *(float32x4_t *)(v516 + 16) = v245;
      *(_BYTE *)(v516 + 8) = v447;
      *(_BYTE *)(v516 + 9) = v446;
      *(_BYTE *)(v516 + 10) = v445;
      *(_BYTE *)(v516 + 11) = v441;
      *(_BYTE *)v516 = v444;
      *(_QWORD *)(v516 + 144) = *((_QWORD *)v205 + 16);
      *(_QWORD *)(v516 + 152) = *((_QWORD *)v205 + 42);
      *(_QWORD *)(v516 + 160) = *((_QWORD *)v205 + 68);
      *(_QWORD *)(v516 + 168) = *((_QWORD *)v205 + 94);
      if (v229 <= v230)
        v250 = v227 << v448;
      else
        v250 = v226 << v448;
      if (v228 > v250)
        v250 = v225 << v448;
      if (v493 > v250)
        LOBYTE(v250) = v224 << v448;
      *(_BYTE *)(v211 + 7) = v493;
      *(_BYTE *)(v211 + 8) = v228;
      *(_BYTE *)(v211 + 9) = v229;
      *(_BYTE *)(v211 + 10) = v230;
      *(_BYTE *)(v211 + 3) = v224;
      *(_BYTE *)(v211 + 4) = v225;
      *(_BYTE *)(v211 + 5) = v226;
      *(_BYTE *)(v211 + 6) = v227;
      *(_BYTE *)(v211 + 2) = v250;
      *(int8x8_t *)&v251 = vext_s8(v247, *(int8x8_t *)v215.f32, 4uLL);
      *((int8x8_t *)&v251 + 1) = vext_s8(v249, *(int8x8_t *)v219.f32, 4uLL);
      *(float32x4_t *)(v211 + 48) = v450;
      *(_OWORD *)(v211 + 64) = v439;
      *(_OWORD *)(v211 + 80) = v436;
      *(_BYTE *)(v211 + 1) = v232;
      *(_BYTE *)v211 = v443;
      *(_OWORD *)(v211 + 16) = v251;
      *(float32x4_t *)(v211 + 32) = v518;
      *(_DWORD *)(v211 + 12) = v448;
      v252 = vzip1q_s32(*v237, *v239);
      v253 = vzip1q_s32(*v238, *v240);
      v254 = (float32x4_t)vzip1q_s32(v252, v253);
      v255 = (float32x4_t)vzip2q_s32(v252, v253);
      v256 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v237, *v239), vzip2q_s32(*v238, *v240));
      *(float32x4_t *)(v516 + 32) = v254;
      *(float32x4_t *)(v516 + 48) = v255;
      *(float32x4_t *)(v516 + 64) = v256;
      v257 = vmlaq_f32(vmulq_f32(v254, v254), v255, v255);
      v258 = vmulq_f32(v497, v254);
      v259 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F3504F3u), vabsq_f32(v254));
      v260 = vnegq_f32(v255);
      v261 = vnegq_f32(v256);
      v262 = vbslq_s8(v259, (int8x16_t)v261, (int8x16_t)v254);
      v263 = vandq_s8(v259, (int8x16_t)v255);
      v264 = vmlaq_f32(vmlaq_f32(vmulq_f32(v440, v254), v438, v255), v437, v256);
      v265 = vnegq_f32(v254);
      v266 = vmlsq_f32(v440, v264, v254);
      v267 = vmlsq_f32(v438, v264, v255);
      v268 = vmlsq_f32(v437, v264, v256);
      v269 = (int8x16_t)vcgtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, v268), v267, v267), v266, v266), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu));
      v270 = (float32x4_t)vorrq_s8(vandq_s8(v269, (int8x16_t)v266), vbicq_s8((int8x16_t)v260, vorrq_s8(v269, v259)));
      v271 = (float32x4_t)vbslq_s8(v269, (int8x16_t)v267, v262);
      v272 = (float32x4_t)vbslq_s8(v269, (int8x16_t)v268, v263);
      v273 = vmlaq_f32(vmlaq_f32(vmulq_f32(v272, v272), v271, v271), v270, v270);
      v274 = vrsqrteq_f32(v273);
      v275 = 4;
      do
      {
        v274 = vmulq_f32(v274, vrsqrtsq_f32(vmulq_f32(v274, v274), v273));
        --v275;
      }
      while (v275);
      v276 = vmulq_f32(v274, v270);
      v277 = vmulq_f32(v274, v271);
      v278 = vmulq_f32(v274, v272);
      v279 = vmlaq_f32(vmulq_f32(v255, v278), v277, v261);
      v215 = vmlaq_f32(vmulq_f32(v256, v276), v278, v265);
      v550 = v276;
      v551 = v279;
      v219 = vmlaq_f32(vmulq_f32(v254, v277), v276, v260);
      v542 = v277;
      v543 = v215;
      v541[0] = v278;
      v541[1] = v219;
      v280 = 0xFFFFLL;
      for (k = 0xFFFFLL; (_DWORD)v233 != 0xFFFF; k = 0xFFFFLL)
      {
        if (*(_BYTE *)(v16 + 44 * v233 + 5))
        {
          k = v233;
          break;
        }
        v233 = *(unsigned __int16 *)(v16 + 44 * v233 + 2);
      }
      while ((_DWORD)v234 != 0xFFFF)
      {
        if (*(_BYTE *)(v16 + 44 * v234 + 5))
        {
          v280 = v234;
          break;
        }
        v234 = *(unsigned __int16 *)(v16 + 44 * v234 + 2);
        v280 = 0xFFFFLL;
      }
      v282 = 0xFFFF;
      v283 = 0xFFFFLL;
      if ((_DWORD)v235 == 0xFFFF)
        goto LABEL_156;
      do
      {
        if (*(_BYTE *)(v16 + 44 * v235 + 5))
        {
          v283 = v235;
          break;
        }
        v235 = *(unsigned __int16 *)(v16 + 44 * v235 + 2);
        v283 = 0xFFFFLL;
      }
      while ((_DWORD)v235 != 0xFFFF);
LABEL_156:
      while (v236 != 0xFFFF)
      {
        if (*(_BYTE *)(v16 + 44 * v236 + 5))
        {
          v282 = v236;
          break;
        }
        v236 = *(unsigned __int16 *)(v16 + 44 * v236 + 2);
        v282 = 0xFFFF;
      }
      v284 = 0xFFFFLL;
      v485 = k;
      v285 = 1;
      if ((_DWORD)k == 0xFFFF)
      {
LABEL_164:
        v286 = 0xFFFFLL;
      }
      else
      {
        v286 = k;
        while (v285 == *(unsigned __int8 *)(v16 + 44 * v286 + 5))
        {
          v285 = 0;
          v286 = *(unsigned __int16 *)(v16 + 44 * v286 + 2);
          if ((_DWORD)v286 == 0xFFFF)
            goto LABEL_164;
        }
      }
      v287 = 1;
      if ((_DWORD)v280 != 0xFFFF)
      {
        v284 = v280;
        while (v287 == *(unsigned __int8 *)(v16 + 44 * v284 + 5))
        {
          v287 = 0;
          v284 = *(unsigned __int16 *)(v16 + 44 * v284 + 2);
          if ((_DWORD)v284 == 0xFFFF)
          {
            v284 = 0xFFFFLL;
            break;
          }
        }
      }
      v288 = 0xFFFF;
      v289 = 1;
      if ((_DWORD)v283 == 0xFFFF)
      {
LABEL_174:
        v290 = 0xFFFFLL;
      }
      else
      {
        v290 = v283;
        while (v289 == *(unsigned __int8 *)(v16 + 44 * v290 + 5))
        {
          v289 = 0;
          v290 = *(unsigned __int16 *)(v16 + 44 * v290 + 2);
          if ((_DWORD)v290 == 0xFFFF)
            goto LABEL_174;
        }
      }
      v291 = 1;
      if (v282 != 0xFFFF)
      {
        v288 = v282;
        while (v291 == *(unsigned __int8 *)(v16 + 44 * v288 + 5))
        {
          v291 = 0;
          v288 = *(unsigned __int16 *)(v16 + 44 * v288 + 2);
          if (v288 == 0xFFFF)
          {
            v288 = 0xFFFF;
            break;
          }
        }
      }
      if (v455 < v491)
      {
        v294 = (_DWORD)v286 != 0xFFFF && v285 < *(unsigned __int8 *)(v16 + 44 * v286 + 5);
        v292 = v280;
        v293 = !v294;
      }
      else
      {
        v292 = v280;
        v293 = 1;
      }
      v295 = v455 >= v510 || (_DWORD)v284 == 0xFFFF || v287 >= *(unsigned __int8 *)(v16 + 44 * v284 + 5)
           ? 2
           : 0;
      v296 = v455 >= v222 || (_DWORD)v290 == 0xFFFF || v289 >= *(unsigned __int8 *)(v16 + 44 * v290 + 5)
           ? 4
           : 0;
      v494 = v289;
      if (v455 >= v489 || v288 == 0xFFFF || v291 >= *(unsigned __int8 *)(v16 + 44 * v288 + 5))
        v297 = 8;
      else
        v297 = 0;
      _X23 = v516 + 176;
      v211 += 16 * v232 + 96;
      if (((v455 >= v491) | (2 * (v455 >= v510)) | (4 * (v455 >= v513)) | v487) != 0xF)
        break;
      v218 = v516 + 176;
LABEL_260:
      v217 = v455 + 1;
      v205 = v478;
      v116 = v452;
      if (v455 + 1 == v449)
        goto LABEL_261;
    }
    v299 = v290;
    v300 = v284;
    v301 = v286;
    v481 = v291;
    v492 = v287;
    v482 = v288;
    v483 = v282;
    v302 = 0;
    v480 = 0;
    v303 = 0;
    v304 = 0;
    v305 = 0;
    v306 = v295 | v293 | v296 | v297;
    v474 = v255;
    v475 = v254;
    v307 = vmlaq_f32(v257, v256, v256);
    v472 = vmulq_f32(v518, v307);
    v473 = vmlaq_f32(vmlaq_f32(vmulq_f32(v156, v254), v149, v255), v150, v256);
    v457 = vmlaq_f32(vmlaq_f32(v258, v496, v255), v495, v256);
    v511 = vmulq_f32(v450, v307);
    v484 = v256;
    LODWORD(v308) = v485;
    while (2)
    {
      v490 = v285;
      __asm
      {
        PRFM            #0, [X23,#0x180]
        PRFM            #0, [X23,#0x200]
        PRFM            #0, [X23,#0x280]
      }
      v486 = v308;
      v479 = v283;
      v312 = *((_QWORD *)v478 + 17)
           + ((unint64_t)(v305 + *(unsigned __int16 *)(v16 + 44 * v308)) << 6);
      v313 = *((_QWORD *)v478 + 43) + ((unint64_t)(v304 + *(unsigned __int16 *)(v16 + 44 * v292)) << 6);
      v314 = *((_QWORD *)v478 + 69)
           + ((unint64_t)(v303 + *(unsigned __int16 *)(v16 + 44 * v283)) << 6);
      v315 = *((_QWORD *)v478 + 95) + ((unint64_t)(v480 + *(unsigned __int16 *)(v16 + 44 * v483)) << 6);
      v317 = *(int8x16_t *)(v312 + 16);
      v316 = *(int32x4_t *)(v312 + 32);
      v319 = *(int8x16_t *)(v314 + 16);
      v318 = *(int32x4_t *)(v314 + 32);
      v320 = vzip1q_s32((int32x4_t)v317, (int32x4_t)v319);
      v321 = *(int8x16_t *)(v313 + 16);
      v322 = *(int32x4_t *)(v313 + 32);
      v323 = *(int32x4_t *)(v315 + 16);
      v324 = *(int32x4_t *)(v315 + 32);
      v325 = vzip1q_s32((int32x4_t)v321, v323);
      v326 = (float32x4_t)vzip1q_s32(v320, v325);
      v327 = (float32x4_t)vzip2q_s32(v320, v325);
      v328 = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v317, (int32x4_t)v319), vzip2q_s32((int32x4_t)v321, v323));
      v335.i32[1] = v461.i32[1];
      v329 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v326, v469), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v326, v469)));
      v330 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v327, v468), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v327, v468)));
      v331 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v328, v461), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v328, v461)));
      v332 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v326, v467), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v326, v467)));
      v333 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v327, v466), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v327, v466)));
      v334 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v328, v460), (int8x16_t)vcgtq_f32(v464, vabdq_f32(v328, v460)));
      v312 += 12;
      v335.i32[0] = *(_DWORD *)(v313 + 12);
      v336 = (const float *)(v314 + 12);
      v337 = (int8x8_t)vld1_dup_f32((const float *)v312);
      v338 = (int8x8_t)vld1_dup_f32(v336);
      v488 = v338;
      v338.i32[0] = *(_DWORD *)(v315 + 12);
      v339 = vmlsq_f32(vmulq_f32(v256, v330), v474, v331);
      v340 = vmlsq_f32(vmulq_f32(v475, v331), v256, v329);
      v341 = vmlaq_f32(vmulq_f32(v531, v339), v340, v529);
      v342 = vmlaq_f32(vmulq_f32(v527, v339), v340, v525);
      v343 = vmlaq_f32(vmulq_f32(v524, v339), v340, v523);
      v344 = vmlaq_f32(vmulq_f32(v210, v339), v535, v340);
      v345 = vmlsq_f32(vmulq_f32(v474, v329), v475, v330);
      v346 = vmlaq_f32(v341, v345, v522);
      v347 = vmlaq_f32(v342, v345, v520);
      v348 = vmlaq_f32(v343, v345, v206);
      v349 = vmlaq_f32(v344, v533, v345);
      v350 = vaddq_f32(v472, vmlaq_f32(vmlaq_f32(vmulq_f32(v346, v346), v347, v347), v348, v348));
      v351 = vaddq_f32(v473, v349);
      v514 = v334;
      v517 = v333;
      if ((v107 & 1) != 0)
      {
        v353 = vmlsq_f32(vmulq_f32(v256, v333), v474, v334);
        v354 = vmlsq_f32(vmulq_f32(v475, v334), v256, v332);
        v352 = v332;
        v458 = v337;
        v459 = v335;
        v355 = vmlsq_f32(vmulq_f32(v474, v332), v475, v333);
        v356 = vmlaq_f32(vmlaq_f32(vmulq_f32(v505, v353), v354, v504), v355, v499);
        v357 = vmlaq_f32(vmlaq_f32(vmulq_f32(v503, v353), v354, v502), v355, v498);
        v358 = vmlaq_f32(vmlaq_f32(vmulq_f32(v501, v353), v354, v500), v355, v509);
        v350 = vaddq_f32(v350, vaddq_f32(v511, vmlaq_f32(vmlaq_f32(vmulq_f32(v356, v356), v357, v357), v358, v358)));
        v351 = vsubq_f32(v351, vaddq_f32(v457, vmlaq_f32(vmlaq_f32(vmulq_f32(v508, v353), v507, v354), v506, v355)));
        *(float32x4_t *)(_X23 + 128) = v356;
        *(float32x4_t *)(_X23 + 144) = v357;
        v256 = v484;
        *(float32x4_t *)(_X23 + 160) = v358;
        v337 = v458;
        v335 = v459;
      }
      else
      {
        v352 = v332;
      }
      v308 = v301;
      v218 = _X23 + v463;
      v359 = vzip1q_s32(v316, v318);
      v360 = (int8x16_t)vzip2q_s32(v316, v318);
      v361 = vzip1q_s32(v322, v324);
      v362 = vzip2q_s32(v322, v324);
      v363 = (float32x4_t)vzip1q_s32(v359, v361);
      v364 = (float32x4_t)vzip2q_s32(v359, v361);
      v365 = (float32x4_t)vzip1q_s32((int32x4_t)v360, v362);
      *(int8x8_t *)v366.f32 = vext_s8(v337, v335, 4uLL);
      *(int8x8_t *)&v366.u32[2] = vext_s8(v488, v338, 4uLL);
      *(int32x2_t *)v360.i8 = vdup_laneq_s32((int32x4_t)v321, 3);
      *(int32x2_t *)v321.i8 = vdup_laneq_s32(v323, 3);
      *(_QWORD *)&v367 = vextq_s8(v317, v360, 0xCuLL).u64[0];
      *((_QWORD *)&v367 + 1) = vextq_s8(v319, v321, 0xCuLL).u64[0];
      v368 = vmlaq_f32(vmlaq_f32(vmulq_f32(v256, v365), v364, v474), v363, v475);
      v369 = vnegq_f32(v331);
      v370 = vnegq_f32(v329);
      v371 = vnegq_f32(v330);
      v372 = vrecpeq_f32(v350);
      v373 = 4;
      v374 = v285;
      do
      {
        v372 = vmulq_f32(v372, vrecpsq_f32(v372, v350));
        --v373;
      }
      while (v373);
      v375 = 0;
      v376 = (float32x4_t)vandq_s8((int8x16_t)v372, (int8x16_t)vcgtzq_f32(v350));
      v377 = vsubq_f32(v366, v470);
      v378 = vnegq_f32(v351);
      v379 = vandq_s8(vandq_s8((int8x16_t)vcgtq_f32(v462, v351), (int8x16_t)vcgtzq_f32(v477)), (int8x16_t)vcgtq_f32(v378, vmulq_n_f32(v377, *(float *)&a6)));
      *(float32x4_t *)_X23 = v346;
      *(float32x4_t *)(_X23 + 16) = v347;
      *(float32x4_t *)(_X23 + 32) = v348;
      *(_QWORD *)(_X23 + 48) = 0;
      *(_QWORD *)(_X23 + 56) = 0;
      *(float32x4_t *)(_X23 + 64) = v376;
      *(float32x4_t *)(_X23 + 80) = vsubq_f32(vaddq_f32(v368, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v477, v378), v379)), v351);
      *(int8x16_t *)(_X23 + 96) = vbicq_s8((int8x16_t)vmulq_f32(v376, vmaxq_f32(v471, vmulq_n_f32(v377, *(float *)&a6 * 0.8))), vandq_s8(v379, (int8x16_t)vcgeq_f32(v465, v377)));
      *(_OWORD *)(_X23 + 112) = v367;
      v380 = v517;
      v381 = vnegq_f32(v514);
      v382 = vnegq_f32(v352);
      v219 = vnegq_f32(v517);
      v383 = (float32x4_t *)v211;
      v384 = v299;
      do
      {
        v385 = *(&v550 + v302);
        v386 = *(&v542 + v302);
        v387 = (float32x4_t)v541[v302];
        v388 = vmlaq_f32(vmulq_f32(v330, v387), v386, v369);
        v389 = vmlaq_f32(vmulq_f32(v331, v385), v387, v370);
        v390 = vmlaq_f32(vmulq_f32(v531, v388), v389, v529);
        v391 = vmlaq_f32(vmulq_f32(v527, v388), v389, v525);
        v392 = vmlaq_f32(vmulq_f32(v524, v388), v389, v523);
        v393 = vmlaq_f32(vmulq_f32(v210, v388), v535, v389);
        v394 = vmlaq_f32(vmulq_f32(v329, v386), v385, v371);
        v395 = vmlaq_f32(v390, v394, v522);
        v396 = vmlaq_f32(v391, v394, v520);
        v397 = vmlaq_f32(v392, v394, v206);
        v398 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v150, v387), v149, v386), v156, v385), vmlaq_f32(v393, v533, v394));
        v215.i32[1] = v518.i32[1];
        v399 = vaddq_f32(v518, vmlaq_f32(vmlaq_f32(vmulq_f32(v395, v395), v396, v396), v397, v397));
        if ((v107 & 1) != 0)
        {
          v400 = vmlaq_f32(vmulq_f32(v380, v387), v386, v381);
          v401 = vmlaq_f32(vmulq_f32(v514, v385), v387, v382);
          v215 = v150;
          v402 = v149;
          v403 = v156;
          v404 = v210;
          v405 = v206;
          v406 = vmlaq_f32(vmulq_f32(v505, v400), v401, v504);
          v407 = vmlaq_f32(vmulq_f32(v503, v400), v401, v502);
          v408 = vmlaq_f32(vmulq_f32(v501, v400), v401, v500);
          v409 = vmlaq_f32(vmulq_f32(v508, v400), v507, v401);
          v410 = vmlaq_f32(vmulq_f32(v352, v386), v385, v219);
          v411 = vmlaq_f32(v406, v410, v499);
          v412 = vmlaq_f32(v407, v410, v498);
          v413 = vmlaq_f32(v408, v410, v509);
          v398 = vsubq_f32(v398, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v495, v387), v496, v386), v497, v385), vmlaq_f32(v409, v506, v410)));
          v380 = v517;
          v399 = vaddq_f32(v399, vaddq_f32(v511, vmlaq_f32(vmlaq_f32(vmulq_f32(v411, v411), v412, v412), v413, v413)));
          v383[9] = v411;
          v383[10] = v412;
          v156 = v403;
          v149 = v402;
          v150 = v215;
          v383[11] = v413;
          v206 = v405;
          v210 = v404;
        }
        v211 = (uint64_t)&v383[v108];
        v302 = 1 - v302;
        v414 = vrecpeq_f32(v399);
        v415 = 4;
        do
        {
          v414 = vmulq_f32(v414, vrecpsq_f32(v414, v399));
          --v415;
        }
        while (v415);
        v383[6].i64[0] = 0;
        v383[6].i64[1] = 0;
        v383[4] = v396;
        v383[5] = v397;
        v383[7] = vnegq_f32((float32x4_t)vandq_s8((int8x16_t)v414, (int8x16_t)vcgtzq_f32(v399)));
        v383[8] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v363, v385), v386, v364), v387, v365), v398);
        *v383 = v385;
        v383[1] = v386;
        v383[2] = v387;
        v383[3] = v395;
        ++v375;
        v383 = (float32x4_t *)((char *)v383 + v108 * 16);
      }
      while (v375 != v17);
      if ((v306 & 1) != 0)
      {
        v416 = v308;
        v490 = v305;
        LODWORD(v308) = v486;
        v418 = v306;
        v256 = v484;
        if ((v306 & 2) == 0)
          goto LABEL_228;
      }
      else
      {
        v374 = v285 + 1;
        v416 = 0xFFFFLL;
        v256 = v484;
        if ((_DWORD)v308 == 0xFFFF)
        {
          v417 = 0;
        }
        else
        {
          v416 = v308;
          while (1)
          {
            v424 = *(unsigned __int8 *)(v16 + 44 * v416 + 5);
            if (v374 != v424)
              break;
            v374 = 0;
            v416 = *(unsigned __int16 *)(v16 + 44 * v416 + 2);
            if ((_DWORD)v416 == 0xFFFF)
            {
              v374 = 0;
              v417 = 0;
              v416 = 0xFFFFLL;
              goto LABEL_227;
            }
          }
          v417 = v374 < v424;
        }
LABEL_227:
        v418 = v306 | !v417;
        if ((v306 & 2) == 0)
        {
LABEL_228:
          v419 = v492 + 1;
          v420 = 0xFFFFLL;
          if ((_DWORD)v300 == 0xFFFF)
          {
            v425 = 2;
          }
          else
          {
            v420 = v300;
            while (1)
            {
              v426 = *(unsigned __int8 *)(v16 + 44 * v420 + 5);
              if (v419 != v426)
                break;
              v419 = 0;
              v420 = *(unsigned __int16 *)(v16 + 44 * v420 + 2);
              if ((_DWORD)v420 == 0xFFFF)
              {
                v425 = 2;
                v420 = 0xFFFFLL;
                goto LABEL_237;
              }
            }
            if (v419 >= v426)
              v425 = 2;
            else
              v425 = 0;
          }
LABEL_237:
          v418 = v425 | v418;
          if ((v306 & 4) == 0)
          {
LABEL_238:
            v421 = v494 + 1;
            v422 = 0xFFFFLL;
            if ((_DWORD)v299 == 0xFFFF)
            {
              v427 = 4;
              v423 = v481;
            }
            else
            {
              v422 = v299;
              v423 = v481;
              while (1)
              {
                v428 = *(unsigned __int8 *)(v16 + 44 * v422 + 5);
                if (v421 != v428)
                  break;
                v421 = 0;
                v422 = *(unsigned __int16 *)(v16 + 44 * v422 + 2);
                if ((_DWORD)v422 == 0xFFFF)
                {
                  v427 = 4;
                  v422 = 0xFFFFLL;
                  goto LABEL_247;
                }
              }
              if (v421 >= v428)
                v427 = 4;
              else
                v427 = 0;
            }
LABEL_247:
            v418 = v427 | v418;
            v218 = _X23 + v463;
            if ((v306 & 8) == 0)
            {
LABEL_248:
              v429 = v218;
              v430 = v423 + 1;
              v431 = 0xFFFF;
              if (v482 == 0xFFFF)
              {
                v432 = 8;
              }
              else
              {
                v431 = v482;
                while (1)
                {
                  v433 = *(unsigned __int8 *)(v16 + 44 * v431 + 5);
                  if (v430 != v433)
                    break;
                  v430 = 0;
                  v431 = *(unsigned __int16 *)(v16 + 44 * v431 + 2);
                  if (v431 == 0xFFFF)
                  {
                    v432 = 8;
                    v431 = 0xFFFF;
                    goto LABEL_257;
                  }
                }
                if (v430 >= v433)
                  v432 = 8;
                else
                  v432 = 0;
              }
LABEL_257:
              v418 = v432 | v418;
              v483 = v482;
              v480 = v423;
              v482 = v431;
              v481 = v430;
              v218 = v429;
            }
LABEL_258:
            _X23 = v218;
            v292 = v300;
            v303 = v494;
            v304 = v492;
            v305 = v490;
            v299 = v422;
            v494 = v421;
            v300 = v420;
            v492 = v419;
            LODWORD(v283) = v384;
            v301 = v416;
            v285 = v374;
            _ZF = (_DWORD)v306 == 15;
            v306 = v418;
            if (_ZF)
              goto LABEL_260;
            continue;
          }
LABEL_220:
          v421 = v494;
          v422 = v299;
          v494 = v303;
          v384 = v479;
          v423 = v481;
          if ((v306 & 8) == 0)
            goto LABEL_248;
          goto LABEL_258;
        }
      }
      break;
    }
    v419 = v492;
    v420 = v300;
    v492 = v304;
    LODWORD(v300) = v292;
    if ((v306 & 4) == 0)
      goto LABEL_238;
    goto LABEL_220;
  }
LABEL_261:
  *(_QWORD *)(v435 + v434) = 0xFFFFFFFF00000000;
  return 2;
}

uint64_t physx::Dy::createFinalizeSolverContactsCoulomb(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (***a4)(_QWORD, _QWORD), int a5, uint64_t a6, double a7, int32x2_t a8, int32x2_t a9, double a10, double a11, double a12, double a13, int32x2_t a14)
{
  float32x2_t v14;
  uint64_t v17;
  float v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v31;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;
  char v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  uint64_t v47;
  int i;
  uint64_t v49;
  float v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v64;
  int v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x2_t v68;
  int8x8_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  char v75;
  int *v76;
  int32x2_t v77;
  int32x2_t v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  char v84;
  uint64_t v85;
  uint64_t result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  char v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float v109;
  float v110;
  float32x2_t v111;
  float v112;
  float32x2_t v113;
  float32x2_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  float32x2_t *v118;
  unsigned __int32 v119;
  const float *v120;
  float32x2_t v121;
  uint64_t v122;
  float32x2_t v123;
  float32x4_t v127;
  float32x4_t v128;
  float32x2_t v129;
  float32x4_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  unsigned __int16 *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  float32x4_t v143;
  float32x4_t v144;
  int8x16_t v145;
  int8x8_t v146;
  int8x16_t v147;
  float32x4_t v148;
  int8x8_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  int8x16_t v164;
  float32x2_t v165;
  float32x4_t v166;
  float32x2_t v167;
  float32x2_t v168;
  int v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  int8x8_t v174;
  float32x2_t v175;
  int32x2_t v176;
  float32x2_t v177;
  int8x8_t v178;
  float32x2_t v179;
  int32x2_t v180;
  uint64_t v181;
  int v182;
  float32x2_t v183;
  float32x2_t v184;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  char v192;
  int v193;
  int v194;
  unsigned int v199;
  __int32 *v200;
  int32x2_t v201;
  int32x2_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x2_t v205;
  float32x2_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x2_t v216;
  float32x2_t v217;
  int v218;
  float32x2_t v219;
  float32x2_t v220;
  int v221;
  float32x4_t v222;
  int8x16_t v223;
  float32x2_t v224;
  float32x2_t v225;
  int8x8_t v226;
  float32x4_t v227;
  unsigned __int16 *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  int v232;
  unint64_t v233;
  float32x4_t v234;
  float32x4_t v235;
  int8x16_t v236;
  int8x16_t v237;
  float32x2_t v238;
  float32x2_t v239;
  float32x2_t v240;
  float32x2_t v241;
  uint64_t v242;
  float32x4_t v243;
  float32x2_t v244;
  float32x2_t v245;
  int8x8_t v246;
  float32x2_t v247;
  float32x2_t v248;
  float32x4_t v249;
  float32x4_t v250;
  int8x8_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x2_t v260;
  float32x2_t v261;
  int v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  __int16 v272;
  uint64_t v273;
  __int16 v274;
  unsigned int v275;
  _DWORD *v276;
  uint64_t v277;
  unsigned int v278;
  char v279;
  float32x4_t v280;
  float32x4_t v281;
  uint64_t v282;
  float32x4_t v283;
  int v284;
  char v285;
  double v286;
  double v287;
  float v288;
  uint64_t v289;
  int32x2_t v290;
  uint64_t v291;
  uint64_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x2_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  _QWORD *v302;
  float32x4_t v303;
  float32x4_t v305;
  float32x4_t v307;
  uint64_t v308[2];
  __int16 v309;
  uint64_t v310[2];
  __int16 v311;

  v17 = *(_QWORD *)(a1 + 16);
  *(_WORD *)(v17 + 30) = 0;
  *(_DWORD *)(a3 + 4112) = 0;
  _X8 = *(_QWORD *)(a1 + 160);
  __asm { PRFM            #0, [X8] }
  _X8 = *(_QWORD *)(a1 + 40);
  _X9 = *(_QWORD *)(a1 + 48);
  if (*(float *)(_X8 + 76) >= *(float *)(_X9 + 76))
    v26 = *(float *)(_X9 + 76);
  else
    v26 = *(float *)(_X8 + 76);
  v27 = *a2;
  if (!*a2
    || ((v28 = *(_BYTE *)(v27 + 43), (v28 & 2) != 0) ? (v29 = 64) : (v29 = 16),
        (*(_BYTE *)(v27 + 43) & 4) != 0 || (v31 = *((unsigned __int8 *)a2 + 25), !*((_BYTE *)a2 + 25))))
  {
    *(_DWORD *)(a3 + 4112) = 0;
    goto LABEL_59;
  }
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = (_QWORD *)(a3 + 11812);
  v39 = (_BYTE *)(a3 + 6945);
  v40 = a3 + 16;
  _X13 = a2[1];
  v14.i32[0] = *(_DWORD *)v27;
  LODWORD(a11) = *(_DWORD *)(v27 + 4);
  a14.i32[0] = *(_DWORD *)(v27 + 8);
  LODWORD(a10) = *(_DWORD *)(v27 + 12);
  if ((*(_BYTE *)(v27 + 43) & 2) != 0)
    v42 = 6;
  else
    v42 = 4;
  if (v28 < 0)
  {
    v29 = 32;
    v42 = 5;
  }
  v43 = v28 & 0xFFFFFF82;
  do
  {
    if (v35)
    {
      v44 = *(unsigned __int8 *)(v27 + 41);
      _CF = v44 >= v36;
      v46 = v44 - v36;
      v45 = v46 != 0 && _CF;
      LODWORD(v47) = v46 << v42;
      if (v45)
        v47 = v47;
      else
        v47 = 0;
      _X13 += v47;
      v27 += 48;
    }
    v36 = *(unsigned __int8 *)(v27 + 41);
    if (*(_BYTE *)(v27 + 41))
    {
      for (i = *(unsigned __int8 *)(v27 + 41); i; --i)
      {
        if (v37)
          v49 = v29;
        else
          v49 = 0;
        _X13 += v49;
        __asm { PRFM            #0, [X13,#0x80] }
        _X3 = (_OWORD *)(v40 + ((unint64_t)v34 << 6));
        __asm { PRFM            #0, [X3,#0x80] }
        v53 = v26;
        if ((v28 & 0x20) != 0)
        {
          if (!v43)
          {
            v53 = 3.4028e38;
LABEL_32:
            *(_QWORD *)&v54 = *(_QWORD *)(v27 + 16);
            v55 = v40 + ((unint64_t)v34 << 6);
            DWORD2(v54) = *(_DWORD *)(v27 + 24);
            HIDWORD(v54) = *(_DWORD *)(_X13 + 12);
            *_X3 = v54;
            *(_QWORD *)(v55 + 16) = *(_QWORD *)_X13;
            *(_DWORD *)(v55 + 24) = *(_DWORD *)(_X13 + 8);
            *(_BYTE *)(v55 + 48) = *(_BYTE *)(v27 + 42);
            *(float *)(v55 + 28) = v53;
            *(_DWORD *)(v55 + 44) = *(_DWORD *)(v27 + 36);
            *(int32x2_t *)(v55 + 56) = vrev64_s32(*(int32x2_t *)(v27 + 28));
            if (v43)
            {
              v56 = *(_QWORD *)(_X13 + 16);
              v57 = *(_DWORD *)(_X13 + 24);
            }
            else
            {
              v56 = 0;
              v57 = 0;
            }
            *(_QWORD *)(v55 + 32) = v56;
            *(_DWORD *)(v55 + 40) = v57;
            ++v34;
            goto LABEL_36;
          }
          v53 = *(float *)(_X13 + 28);
        }
        if (v53 != 0.0)
          goto LABEL_32;
LABEL_36:
        v37 = 1;
      }
    }
    ++v35;
  }
  while (v35 != v31);
  *(_DWORD *)(a3 + 4112) = v34;
  if (!v34)
  {
LABEL_59:
    *(_QWORD *)(a1 + 160) = 0;
    *(_BYTE *)(a1 + 168) = 0;
    return 1;
  }
  v290 = a14;
  v286 = a11;
  v287 = a10;
  _X10 = *(_QWORD *)(a1 + 24);
  __asm { PRFM            #0, [X10] }
  _X10 = *(_QWORD *)(a1 + 32);
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X8]
    PRFM            #0, [X9]
  }
  v64 = a3 + 4128;
  *v38 = 0;
  v302 = v38;
  v289 = a3;
  physx::Dy::createContactPatches(a3 + 4128, a3 + 16, v34, 0.999);
  if (a5 == 1)
    v65 = 1;
  else
    v65 = 2;
  physx::Dy::correlatePatches(v64, v40, (float *)(a1 + 56), (float *)(a1 + 84), 0, 0, 0.999);
  v70 = v289;
  v71 = *(_DWORD *)(a1 + 116) | *(_DWORD *)(a1 + 112);
  v72 = *(unsigned int *)(v289 + 11816);
  v284 = a5;
  if ((_DWORD)v72)
  {
    v73 = 0;
    if ((v71 & 8) != 0)
      v74 = 112;
    else
      v74 = 48;
    if ((v71 & 8) != 0)
      v75 = 7;
    else
      v75 = 6;
    v76 = (int *)(v289 + 11424);
    v77 = *(int32x2_t *)&v286;
    v78 = *(int32x2_t *)&v287;
    do
    {
      v80 = *v76++;
      v79 = v80;
      if (v80)
      {
        v81 = v73 + v79 * v74 + 80;
        v82 = (4 * v79 + 12) & 0xFFFFFFF0;
        if ((*v39 & 1) != 0)
          v73 = v82 + v81;
        else
          v73 = (v79 << (a5 != 1) << v75) + v81 + v82;
      }
      v39 += 104;
      --v72;
    }
    while (v72);
    v83 = (v73 + 15) & 0xFFFFFFF0;
    if (v83)
    {
      v84 = *(_BYTE *)(a1 + 116) | *(_BYTE *)(a1 + 112);
      v85 = (**a4)(a4, v83 + 16);
      if ((unint64_t)(v85 + 1) <= 1)
      {
        result = 0;
        *(_QWORD *)(a1 + 160) = 0;
        *(_QWORD *)(v17 + 32) = 0;
        *(_WORD *)(v17 + 30) = 0;
        *(_BYTE *)(a1 + 168) = 0;
        return result;
      }
      _X23 = v85;
      v70 = v289;
      v77 = *(int32x2_t *)&v286;
      v78 = *(int32x2_t *)&v287;
      LOBYTE(v71) = v84;
    }
    else
    {
      _X23 = 0;
    }
  }
  else
  {
    _X23 = 0;
    v83 = 0;
    v77 = *(int32x2_t *)&v286;
    v78 = *(int32x2_t *)&v287;
  }
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(v17 + 32) = _X23;
  *((_BYTE *)a2 + 24) = v34;
  v278 = v83;
  *(_WORD *)(v17 + 30) = v83 >> 4;
  if (_X23)
  {
    v89 = *(_QWORD *)(a1 + 40);
    v88 = *(_QWORD *)(a1 + 48);
    if ((v71 & 8) != 0)
    {
      v272 = *(_WORD *)(v17 + 16);
      v273 = *(_QWORD *)(a1 + 32);
      v310[0] = *(_QWORD *)(a1 + 24);
      v310[1] = v89;
      v311 = v272;
      v274 = *(_WORD *)(v17 + 18);
      v308[0] = v273;
      v308[1] = v88;
      v309 = v274;
      v67.i32[0] = *(_DWORD *)(a1 + 152);
      v68.i32[0] = *(_DWORD *)(a1 + 156);
      v66.i32[0] = v14.i32[0];
      v182 = physx::Dy::setupFinalizeExtSolverContactsCoulomb(v40, v64, a1 + 56, a1 + 84, (int32x2_t *)_X23, v310, v308, v65, a7, a8, v66, v77, v290, v78, v67, v68, a6);
      v275 = v83;
    }
    else
    {
      _X9 = v70 + 11684;
      __asm { PRFM            #0, [X9] }
      _X9 = v302;
      __asm { PRFM            #0, [X9] }
      v94 = *(unsigned int *)(v70 + 11816);
      if (*(_DWORD *)(a1 + 116) == 2)
        v95 = 5;
      else
        v95 = 1;
      if (*(_DWORD *)(a1 + 116) == 2)
        v96 = 11;
      else
        v96 = 10;
      v279 = v96;
      v277 = _X23;
      if ((_DWORD)v94)
      {
        v97 = 0;
        v98 = *(_QWORD *)(a1 + 128);
        v99 = (float32x4_t)vdupq_lane_s32(a9, 0);
        v99.i32[3] = 0;
        v100 = *(float32x4_t *)(a1 + 72);
        v100.i64[1] = *(unsigned int *)(a1 + 80);
        v101 = *(float32x4_t *)(a1 + 100);
        v101.i64[1] = *(unsigned int *)(a1 + 108);
        v295 = v101;
        v101.i64[0] = *(_QWORD *)v89;
        v101.i64[1] = *(unsigned int *)(v89 + 8);
        v281 = v101;
        v101.i64[0] = *(_QWORD *)v88;
        v101.i64[1] = *(unsigned int *)(v88 + 8);
        v280 = v101;
        v101.i64[0] = *(_QWORD *)(v89 + 16);
        v101.i64[1] = *(unsigned int *)(v89 + 24);
        v294 = v101;
        v101.i64[0] = *(_QWORD *)(v88 + 16);
        v101.i64[1] = *(unsigned int *)(v88 + 24);
        v307 = v101;
        v102.i64[0] = *(_QWORD *)(v89 + 32);
        v103.i64[0] = *(_QWORD *)(v89 + 44);
        v104 = *(_BYTE *)(a1 + 150);
        v105 = vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)(v89 + 68), 0), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v88 + 68), 0));
        v102.i64[1] = *(unsigned int *)(v89 + 40);
        v103.i64[1] = *(unsigned int *)(v89 + 52);
        v303 = v103;
        v305 = v102;
        v106.i64[0] = *(_QWORD *)(v89 + 56);
        v106.i64[1] = *(unsigned int *)(v89 + 64);
        v301 = v106;
        v106.i64[0] = *(_QWORD *)(v88 + 32);
        v106.i64[1] = *(unsigned int *)(v88 + 40);
        v300 = v106;
        v106.i64[0] = *(_QWORD *)(v88 + 44);
        v106.i64[1] = *(unsigned int *)(v88 + 52);
        v299 = v106;
        v106.i64[0] = *(_QWORD *)(v88 + 56);
        v106.i64[1] = *(unsigned int *)(v88 + 64);
        v298 = v106;
        v107 = vmul_n_f32((float32x2_t)vdup_n_s32(0x3F4CCCCDu), *(float *)&a7);
        *(float32x2_t *)v103.f32 = vmul_f32(v14, *(float32x2_t *)(v89 + 12));
        v108 = vmul_n_f32(vneg_f32((float32x2_t)vdup_lane_s32(v290, 0)), COERCE_FLOAT(*(_QWORD *)(v88 + 12)));
        v109 = *(float *)(a1 + 152);
        v110 = *(float *)(a1 + 156);
        v111 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
        v297 = v108;
        v112 = -v108.f32[0];
        v113 = (float32x2_t)vdup_lane_s32(a8, 0);
        v288 = v103.f32[0];
        v114 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.f32, 0);
        do
        {
          v115 = v70 + 4 * v97;
          v116 = *(_DWORD *)(v115 + 11424);
          if (v116)
          {
            v117 = *(_DWORD *)(v115 + 11552);
            v118 = (float32x2_t *)(v40 + ((unint64_t)*(unsigned __int16 *)(v64 + 44 * v117) << 6));
            v119 = v118[1].u32[0];
            v120 = (const float *)&v118[7] + 1;
            v121 = vld1_dup_f32(v120);
            v122 = _X23 + 48;
            v123 = *v118;
            __asm
            {
              PRFM            #0, [X23,#0xB0]
              PRFM            #0, [X23,#0x130]
              PRFM            #0, [X23,#0x1B0]
            }
            *(_BYTE *)(_X23 + 1) = v116;
            *(_BYTE *)_X23 = v95;
            *(float *)(_X23 + 8) = v288;
            *(float *)(_X23 + 12) = v112;
            *(_DWORD *)(_X23 + 4) = v77.i32[0];
            *(float32x2_t *)(_X23 + 16) = v123;
            *(_DWORD *)(_X23 + 24) = v119;
            *(_DWORD *)(_X23 + 28) = v78.i32[0];
            *(_BYTE *)(_X23 + 40) = v104;
            *(_QWORD *)(_X23 + 32) = v98;
            if (v117 == 0xFFFF)
            {
              _X23 += 48;
            }
            else
            {
              *(float32x2_t *)v127.f32 = v123;
              v127.i64[1] = v119;
              v128 = vmulq_f32(v127, v127);
              v128.i64[0] = vpaddq_f32(v128, v128).u64[0];
              v129 = vpadd_f32(*(float32x2_t *)v128.f32, *(float32x2_t *)v128.f32);
              v130 = vmlsq_f32(vmulq_f32(v281, v127), v280, v127);
              v130.i64[0] = vpaddq_f32(v130, v130).u64[0];
              v131 = vpadd_f32(*(float32x2_t *)v130.f32, *(float32x2_t *)v130.f32);
              v132 = vmul_n_f32(v129, v288);
              v133 = vmul_f32(v108, v129);
              v134 = (float32x2_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
              v135 = (float32x2_t)vext_s8((int8x8_t)v123, (int8x8_t)v134, 4uLL);
              v136 = vneg_f32(v134);
              v137 = vneg_f32(v123);
              do
              {
                v138 = (unsigned __int16 *)(v64 + 44 * v117);
                v139 = *((unsigned __int8 *)v138 + 5);
                if (*((_BYTE *)v138 + 5))
                {
                  v140 = 0;
                  v141 = v40 + ((unint64_t)*v138 << 6);
                  do
                  {
                    v142 = v141 + (v140 << 6);
                    v143.i64[0] = *(_QWORD *)(v142 + 16);
                    v143.i64[1] = *(unsigned int *)(v142 + 24);
                    v69.i32[0] = *(_DWORD *)(v142 + 12);
                    v144.i64[0] = *(_QWORD *)(v142 + 32);
                    v144.i64[1] = *(unsigned int *)(v142 + 40);
                    v145 = (int8x16_t)vsubq_f32(v143, v100);
                    v146 = (int8x8_t)vmla_f32(vmul_f32(v135, *(float32x2_t *)v145.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 4uLL), v137);
                    *(int8x8_t *)v147.i8 = vext_s8(v146, (int8x8_t)vmla_f32(vmul_f32(v123, (float32x2_t)*(_OWORD *)&vextq_s8(v145, v145, 8uLL)), *(float32x2_t *)v145.i8, v136), 4uLL);
                    v148 = vsubq_f32(v143, v295);
                    v147.i64[1] = v146.u32[0];
                    v149 = (int8x8_t)vmla_f32(vmul_f32(v135, *(float32x2_t *)v148.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v148, (int8x16_t)v148, 4uLL), v137);
                    *(int8x8_t *)v148.f32 = vext_s8(v149, (int8x8_t)vmla_f32(vmul_f32(v123, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL)), *(float32x2_t *)v148.f32, v136), 4uLL);
                    v150 = vmulq_f32(v127, v144);
                    v148.i64[1] = v149.u32[0];
                    v151 = (float32x4_t)vbicq_s8(v147, (int8x16_t)vcgtq_f32(v99, vabsq_f32((float32x4_t)v147)));
                    v152 = (float32x4_t)vbicq_s8((int8x16_t)v148, (int8x16_t)vcgtq_f32(v99, vabsq_f32(v148)));
                    v153 = vmulq_n_f32(v305, v151.f32[0]);
                    v153.i32[3] = 0;
                    v154 = vmulq_lane_f32(v303, *(float32x2_t *)v151.f32, 1);
                    v154.i32[3] = 0;
                    v155 = vmulq_laneq_f32(v301, v151, 2);
                    v155.i32[3] = 0;
                    v156 = vaddq_f32(v155, vaddq_f32(v153, v154));
                    v157 = vmulq_n_f32(v300, v152.f32[0]);
                    v157.i32[3] = 0;
                    v158 = vmulq_lane_f32(v299, *(float32x2_t *)v152.f32, 1);
                    v158.i32[3] = 0;
                    v159 = vmulq_laneq_f32(v298, v152, 2);
                    v159.i32[3] = 0;
                    v160 = vaddq_f32(v159, vaddq_f32(v157, v158));
                    v161 = vmulq_f32(v156, v156);
                    v161.i64[0] = vpaddq_f32(v161, v161).u64[0];
                    v162 = vmulq_f32(v160, v160);
                    v162.i64[0] = vpaddq_f32(v162, v162).u64[0];
                    v163 = vadd_f32(vadd_f32(v132, vmul_n_f32(vpadd_f32(*(float32x2_t *)v161.f32, *(float32x2_t *)v161.f32), *(float *)v77.i32)), vsub_f32(vmul_n_f32(vpadd_f32(*(float32x2_t *)v162.f32, *(float32x2_t *)v162.f32), *(float *)v78.i32), v133));
                    v164 = (int8x16_t)vmulq_f32(v294, v151);
                    v165 = (float32x2_t)vextq_s8(v164, v164, 8uLL).u64[0];
                    v166 = vmulq_f32(v307, v152);
                    v167 = (float32x2_t)vpaddq_f32(v166, v166).u64[0];
                    v168 = vrecpe_f32(v163);
                    v169 = 4;
                    do
                    {
                      v168 = vmul_f32(v168, vrecps_f32(v163, v168));
                      --v169;
                    }
                    while (v169);
                    v170 = vpadd_f32(*(float32x2_t *)v164.i8, v165);
                    v171 = (float32x2_t)vpaddq_f32(v150, v150).u64[0];
                    _X23 = v122 + 48;
                    v172 = vsub_f32(vadd_f32(v131, vpadd_f32(v170, v170)), vpadd_f32(v167, v167));
                    v173 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v163), 0), (int8x8_t)v168);
                    *(float *)v69.i32 = *(float *)v69.i32 - v109;
                    v174 = (int8x8_t)vmul_f32(vmax_f32(v105, vmul_n_f32(v107, *(float *)v69.i32)), v173);
                    v175 = vneg_f32(v172);
                    v176 = (int32x2_t)vand_s8(vand_s8((int8x8_t)vcgt_f32(v113, v172), (int8x8_t)vcgtz_f32(v121)), (int8x8_t)vcgt_f32(v175, vmul_n_f32(v111, *(float *)v69.i32)));
                    v69.i32[0] = *(float *)v69.i32 <= v110;
                    v177 = (float32x2_t)vand_s8((int8x8_t)vdup_lane_s32(vcltz_s32(vshl_n_s32((int32x2_t)vmvn_s8(vand_s8((int8x8_t)v176, v69)), 0x1FuLL)), 0), v174);
                    v178 = (int8x8_t)vdup_lane_s32(v176, 0);
                    v179 = vsub_f32(vadd_f32(vpadd_f32(v171, v171), (float32x2_t)vand_s8(v178, (int8x8_t)vmul_f32(v121, v175))), v172);
                    v180 = (int32x2_t)vmla_f32(vneg_f32(v177), v173, v179);
                    v69 = (int8x8_t)vmla_f32((float32x2_t)vbic_s8((int8x8_t)vneg_f32(vmax_f32(v177, 0)), v178), v173, v179);
                    *(int32x2_t *)(v122 + 32) = vzip1_s32((int32x2_t)v173, v180);
                    *(_DWORD *)(v122 + 40) = v69.i32[0];
                    *(_DWORD *)(v122 + 44) = *(_DWORD *)(v141 + (v140 << 6) + 28);
                    *(float32x4_t *)v122 = v156;
                    *(float32x4_t *)(v122 + 16) = v160;
                    ++v140;
                    v122 += 48;
                  }
                  while (v140 != v139);
                }
                else
                {
                  _X23 = v122;
                }
                v117 = *(unsigned __int16 *)(v64 + 44 * v117 + 2);
                v122 = _X23;
              }
              while (v117 != 0xFFFF);
            }
          }
          ++v97;
        }
        while (v97 != v94);
        v181 = 0;
        v182 = 0;
        v285 = v284 != 1;
        v283 = vsubq_f32(v281, v280);
        v183 = (float32x2_t)vdup_n_s32(0x3F3504F3u);
        v184 = (float32x2_t)vdup_n_s32(0x3727C5ACu);
        __asm { FMOV            V12.2S, #1.0 }
        v186 = v277;
        v282 = v94;
        do
        {
          v187 = v70 + 4 * v181;
          v188 = *(_DWORD *)(v187 + 11424);
          if (v188)
          {
            v189 = *(unsigned __int16 *)(v64 + 44 * *(unsigned int *)(v187 + 11552));
            *(_WORD *)(v186 + 2) = _X23 - v186;
            v293 = v186;
            v291 = *(unsigned __int8 *)(v186 + 1);
            v190 = v40 + (v189 << 6);
            v191 = *(_DWORD *)(v190 + 44);
            v192 = *(_BYTE *)(v190 + 48);
            *(_BYTE *)(_X23 + 1) = v188;
            v193 = v188 << v285;
            if ((v192 & 1) != 0)
              LOBYTE(v193) = 0;
            *(_BYTE *)(_X23 + 2) = v193;
            v194 = 4 * v188;
            _X24 = _X23 + 32 + ((v194 + 12) & 0xFFFFFFF0);
            bzero((void *)(_X23 + 32), (v194 << v285));
            __asm
            {
              PRFM            #0, [X24,#0x80]
              PRFM            #0, [X24,#0x100]
              PRFM            #0, [X24,#0x180]
            }
            v199 = *(_DWORD *)(v187 + 11552);
            v200 = (__int32 *)(v40 + ((unint64_t)*(unsigned __int16 *)(v64 + 44 * v199) << 6));
            v201.i32[0] = *v200;
            v202.i32[0] = v200[1];
            v203 = *(float32x2_t *)v200;
            v204 = (float32x4_t)*(unint64_t *)v200;
            v204.i32[2] = v200[2];
            v205 = (float32x2_t)vdup_lane_s32(v201, 0);
            v206 = (float32x2_t)vdup_lane_s32(v202, 0);
            *(int8x8_t *)v207.i8 = vext_s8(0, (int8x8_t)vneg_f32((float32x2_t)vdup_laneq_s32((int32x4_t)v204, 2)), 4uLL);
            v207.i64[1] = v206.u32[0];
            *(int8x8_t *)v208.i8 = vext_s8((int8x8_t)vneg_f32(v206), (int8x8_t)v205, 4uLL);
            v209 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vdupq_lane_s32(vcgt_f32(v183, vabs_f32(v205)), 0), 0x1FuLL)), v207, v208);
            v210 = vmulq_f32(v283, v204);
            v210.i64[0] = vpaddq_f32(v210, v210).u64[0];
            v211 = vmulq_n_f32(v204, vpadd_f32(*(float32x2_t *)v210.f32, *(float32x2_t *)v210.f32).f32[0]);
            v211.i32[3] = 0;
            v212 = vsubq_f32(v283, v211);
            v213 = vmulq_f32(v212, v212);
            v213.i64[0] = vpaddq_f32(v213, v213).u64[0];
            v214 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v213.f32, *(float32x2_t *)v213.f32), v184), 0), (int8x16_t)v212, v209);
            v215 = vmulq_f32(v214, v214);
            v215.i64[0] = vpaddq_f32(v215, v215).u64[0];
            v216 = vpadd_f32(*(float32x2_t *)v215.f32, *(float32x2_t *)v215.f32);
            v217 = vrsqrte_f32(v216);
            v218 = 4;
            do
            {
              v217 = vmul_f32(v217, vrsqrts_f32(vmul_f32(v217, v217), v216));
              --v218;
            }
            while (v218);
            v219 = vmul_f32(v216, (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceqz_f32(v216), 0), _D12, (int8x8_t)v217));
            v220 = vrecpe_f32(v219);
            v221 = 4;
            do
            {
              v220 = vmul_f32(v220, vrecps_f32(v219, v220));
              --v221;
            }
            while (v221);
            v186 = 48 * v291 + v293 + 48;
            v70 = v289;
            if ((v192 & 1) == 0)
            {
              *(_DWORD *)(_X23 + 4) = v191;
              *(float *)(_X23 + 8) = v288;
              *(float *)(_X23 + 12) = v112;
              *(_DWORD *)(_X23 + 16) = LODWORD(v286);
              *(_DWORD *)(_X23 + 20) = LODWORD(v287);
              *(_BYTE *)_X23 = v279;
              if (v199 != 0xFFFF)
              {
                v222 = vmulq_n_f32(v214, v220.f32[0]);
                v223 = (int8x16_t)v222;
                v223.i32[3] = 0;
                v224 = (float32x2_t)vextq_s8(v223, v223, 8uLL).u64[0];
                v225 = (float32x2_t)vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
                v226 = (int8x8_t)vmls_f32(vmul_f32((float32x2_t)vext_s8((int8x8_t)v203, (int8x8_t)v225, 4uLL), *(float32x2_t *)v222.f32), (float32x2_t)vext_s8(*(int8x8_t *)v222.f32, (int8x8_t)v224, 4uLL), v203);
                *(int8x8_t *)v227.f32 = vext_s8(v226, (int8x8_t)vmls_f32(vmul_f32(v203, v224), *(float32x2_t *)v222.f32, v225), 4uLL);
                v227.i64[1] = v226.u32[0];
                do
                {
                  v228 = (unsigned __int16 *)(v64 + 44 * v199);
                  v229 = *((unsigned __int8 *)v228 + 5);
                  if (*((_BYTE *)v228 + 5))
                  {
                    v230 = 0;
                    v231 = v40 + ((unint64_t)*v228 << 6);
                    do
                    {
                      v232 = 0;
                      v233 = v231 + (v230 << 6);
                      v234.i64[0] = *(_QWORD *)(v233 + 32);
                      v234.i64[1] = *(unsigned int *)(v233 + 40);
                      v235.i64[0] = *(_QWORD *)(v233 + 16);
                      v235.i64[1] = *(unsigned int *)(v233 + 24);
                      v236 = vbicq_s8((int8x16_t)vsubq_f32(v235, v295), (int8x16_t)vcgtq_f32(v99, vabdq_f32(v235, v295)));
                      v237 = vbicq_s8((int8x16_t)vsubq_f32(v235, v100), (int8x16_t)vcgtq_f32(v99, vabdq_f32(v235, v100)));
                      v238 = (float32x2_t)vextq_s8(v237, v237, 8uLL).u64[0];
                      v239 = (float32x2_t)vext_s8(*(int8x8_t *)v237.i8, (int8x8_t)v238, 4uLL);
                      v240 = (float32x2_t)vextq_s8(v236, v236, 8uLL).u64[0];
                      v241 = (float32x2_t)vext_s8(*(int8x8_t *)v236.i8, (int8x8_t)v240, 4uLL);
                      v242 = _X24;
                      v243 = v227;
                      do
                      {
                        v227 = (float32x4_t)v223;
                        v223 = (int8x16_t)v243;
                        v244 = (float32x2_t)vextq_s8((int8x16_t)v227, (int8x16_t)v227, 8uLL).u64[0];
                        v245 = (float32x2_t)vextq_s8((int8x16_t)v227, (int8x16_t)v227, 4uLL).u64[0];
                        v246 = (int8x8_t)vmls_f32(vmul_f32(v238, *(float32x2_t *)v227.f32), *(float32x2_t *)v237.i8, v244);
                        v247 = vmls_f32(vmul_f32(*(float32x2_t *)v237.i8, v245), v239, *(float32x2_t *)v227.f32);
                        v248 = vmls_f32(vmul_f32(*(float32x2_t *)v236.i8, v245), v241, *(float32x2_t *)v227.f32);
                        v249 = vmulq_lane_f32(v305, v247, 1);
                        v249.i32[3] = 0;
                        v250 = vmulq_n_f32(v303, *(float *)v246.i32);
                        v250.i32[3] = 0;
                        v251 = (int8x8_t)vmls_f32(vmul_f32(v240, *(float32x2_t *)v227.f32), *(float32x2_t *)v236.i8, v244);
                        v252 = vmulq_n_f32(v301, v247.f32[0]);
                        v252.i32[3] = 0;
                        v253 = vaddq_f32(vaddq_f32(v249, v250), v252);
                        v254 = vmulq_lane_f32(v300, v248, 1);
                        v254.i32[3] = 0;
                        v255 = vmulq_n_f32(v299, *(float *)v251.i32);
                        v255.i32[3] = 0;
                        v256 = vmulq_n_f32(v298, v248.f32[0]);
                        v256.i32[3] = 0;
                        v257 = vaddq_f32(vaddq_f32(v254, v255), v256);
                        v258 = vmulq_f32(v253, v253);
                        v258.i64[0] = vpaddq_f32(v258, v258).u64[0];
                        v259 = vmulq_f32(v257, v257);
                        v259.i64[0] = vpaddq_f32(v259, v259).u64[0];
                        v260 = vadd_f32(vadd_f32(v114, vmul_n_f32(vpadd_f32(*(float32x2_t *)v258.f32, *(float32x2_t *)v258.f32), *(float *)&v286)), vsub_f32(vmul_n_f32(vpadd_f32(*(float32x2_t *)v259.f32, *(float32x2_t *)v259.f32), *(float *)&v287), v297));
                        v261 = vrecpe_f32(v260);
                        v262 = 4;
                        do
                        {
                          v261 = vmul_f32(v261, vrecps_f32(v260, v261));
                          --v262;
                        }
                        while (v262);
                        _X24 = v242 + 64;
                        *(int8x8_t *)v263.f32 = vext_s8((int8x8_t)v247, v246, 4uLL);
                        v263.i64[1] = v247.u32[0];
                        *(int8x8_t *)v264.f32 = vext_s8((int8x8_t)v248, v251, 4uLL);
                        v264.i64[1] = v248.u32[0];
                        *(int8x8_t *)v265.f32 = vand_s8((int8x8_t)vdup_lane_s32(vcgtz_f32(v260), 0), (int8x8_t)v261);
                        v266 = vmulq_f32(v281, v227);
                        v266.i64[0] = vpaddq_f32(v266, v266).u64[0];
                        v267 = vmulq_f32(v294, v263);
                        v267.i64[0] = vpaddq_f32(v267, v267).u64[0];
                        *(float32x2_t *)v267.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v266.f32, *(float32x2_t *)v266.f32), vpadd_f32(*(float32x2_t *)v267.f32, *(float32x2_t *)v267.f32));
                        v268 = vmulq_f32(v280, v227);
                        v268.i64[0] = vpaddq_f32(v268, v268).u64[0];
                        v269 = vmulq_f32(v307, v264);
                        v269.i64[0] = vpaddq_f32(v269, v269).u64[0];
                        *(float32x2_t *)v269.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v268.f32, *(float32x2_t *)v268.f32), vpadd_f32(*(float32x2_t *)v269.f32, *(float32x2_t *)v269.f32));
                        v270 = v227;
                        v270.i32[3] = 0;
                        v265.i64[1] = v265.i64[0];
                        v253.i32[3] = vnegq_f32(v265).i32[3];
                        *(float32x4_t *)v242 = v270;
                        *(float32x4_t *)(v242 + 16) = v253;
                        *(float32x4_t *)(v242 + 32) = v257;
                        v271 = vmulq_f32(v234, v227);
                        v271.i64[0] = vpaddq_f32(v271, v271).u64[0];
                        *(_DWORD *)(v242 + 48) = vsub_f32(vpadd_f32(*(float32x2_t *)v271.f32, *(float32x2_t *)v271.f32), vsub_f32(*(float32x2_t *)v267.f32, *(float32x2_t *)v269.f32)).u32[0];
                        ++v232;
                        v242 += 64;
                        v243 = v227;
                      }
                      while (v232 != v65);
                      ++v230;
                    }
                    while (v230 != v229);
                    v182 = 1;
                  }
                  v199 = *(unsigned __int16 *)(v64 + 44 * v199 + 2);
                }
                while (v199 != 0xFFFF);
              }
            }
            _X23 = _X24;
            v94 = v282;
          }
          ++v181;
        }
        while (v181 != v94);
      }
      else
      {
        v182 = 0;
      }
      *(_BYTE *)_X23 = 0;
      v275 = v278;
      _X23 = v277;
    }
    v276 = (_DWORD *)(_X23 + v275);
    *v276 = 0;
    v276[1] = v182 << 31 >> 31;
  }
  return 1;
}

uint64_t physx::Dy::FeatherstoneArticulation::willStoreStaticConstraint(physx::Dy::FeatherstoneArticulation *this)
{
  return 1;
}

uint64_t physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>::getName() [T = physx::Cm::SpatialVectorF]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 32 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_OWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(_OWORD **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[2 * v7];
    v10 = *(_OWORD **)v3;
    v11 = v6;
    do
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11 += 2;
      v10 += 2;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::SpatialImpulseResponseMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialImpulseResponseMatrix>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  _OWORD *v15;

  v2 = a2;
  v4 = 192 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialImpulseResponseMatrix>::getName() [T = "
         "physx::Dy::SpatialImpulseResponseMatrix]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = *a1;
  if (v9)
  {
    v11 = result + 192 * v9;
    v12 = *a1;
    v13 = result;
    do
    {
      for (i = 0; i != 192; i += 32)
      {
        v15 = (_OWORD *)(v13 + i);
        *v15 = *(_OWORD *)(v12 + i);
        v15[1] = *(_OWORD *)(v12 + i + 16);
      }
      v13 += 192;
      v12 += 192;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::SpatialMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialMatrix>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = a2;
  v4 = 112 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialMatrix>::getName() [T = physx::Dy::SpatialMatrix]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = *a1;
  if (v9)
  {
    v11 = result + 112 * v9;
    v12 = *a1;
    v13 = result;
    do
    {
      *(_QWORD *)v13 = *(_QWORD *)v12;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v13 + 24) = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v13 + 32) = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v13 + 40) = *(_QWORD *)(v12 + 40);
      *(_QWORD *)(v13 + 48) = *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v13 + 56) = *(_QWORD *)(v12 + 56);
      *(_QWORD *)(v13 + 64) = *(_QWORD *)(v12 + 64);
      *(_QWORD *)(v13 + 72) = *(_QWORD *)(v12 + 72);
      *(_QWORD *)(v13 + 80) = *(_QWORD *)(v12 + 80);
      *(_QWORD *)(v13 + 88) = *(_QWORD *)(v12 + 88);
      *(_QWORD *)(v13 + 96) = *(_QWORD *)(v12 + 96);
      *(_DWORD *)(v13 + 104) = *(_DWORD *)(v12 + 104);
      *(_DWORD *)(v13 + 108) = *(_DWORD *)(v12 + 108);
      v13 += 112;
      v12 += 112;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::InvStIs,physx::shdfnd::ReflectionAllocator<physx::Dy::InvStIs>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  __int128 *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v2 = a2;
  v4 = 36 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::InvStIs>::getName() [T = physx::Dy::InvStIs]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = (__int128 *)*a1;
  if (v9)
  {
    v11 = result + 36 * v9;
    v12 = result;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      *(_DWORD *)(v12 + 32) = *((_DWORD *)v10 + 8);
      *(_OWORD *)v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      v12 += 36;
      v10 = (__int128 *)((char *)v10 + 36);
    }
    while (v12 < v11);
    v10 = (__int128 *)*a1;
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::SpatialSubspaceMatrix,physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  _QWORD *v15;

  v2 = a2;
  v4 = 76 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::SpatialSubspaceMatrix>::getName() [T = physx::"
         "Dy::SpatialSubspaceMatrix]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = *a1;
  if (v9)
  {
    v11 = result + 76 * v9;
    v12 = *a1;
    v13 = result;
    do
    {
      for (i = 0; i != 72; i += 24)
      {
        v15 = (_QWORD *)(v13 + i);
        *v15 = *(_QWORD *)(v12 + i);
        v15[1] = *(_QWORD *)(v12 + i + 8);
        v15[2] = *(_QWORD *)(v12 + i + 16);
      }
      *(_DWORD *)(v13 + 72) = *(_DWORD *)(v12 + 72);
      v13 += 76;
      v12 += 76;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::IsInvD,physx::shdfnd::ReflectionAllocator<physx::Dy::IsInvD>>::recreate(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t i;
  _OWORD *v15;

  v2 = a2;
  v4 = 96 * a2;
  v5 = physx::shdfnd::Foundation::mInstance;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance, a2))
  {
    v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::IsInvD>::getName() [T = physx::Dy::IsInvD]";
  }
  else
  {
    v6 = "<allocation names disabled>";
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, v4, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
  v8 = result;
  v9 = *((_DWORD *)a1 + 2);
  v10 = *a1;
  if (v9)
  {
    v11 = result + 96 * v9;
    v12 = *a1;
    v13 = result;
    do
    {
      for (i = 0; i != 96; i += 32)
      {
        v15 = (_OWORD *)(v13 + i);
        *v15 = *(_OWORD *)(v12 + i);
        v15[1] = *(_OWORD *)(v12 + i + 16);
      }
      v13 += 96;
      v12 += 96;
    }
    while (v13 < v11);
  }
  if ((*((_DWORD *)a1 + 3) & 0x80000000) == 0 && v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *a1 = v8;
  *((_DWORD *)a1 + 3) = v2;
  return result;
}

uint64_t physx::shdfnd::Array<float,physx::shdfnd::ReflectionAllocator<float>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _DWORD *v6;
  uint64_t v7;
  int *v8;
  unint64_t v9;
  int *v10;
  _DWORD *v11;
  int v12;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<float>::getName() [T = float]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 4 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = (_DWORD *)result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(v3 + 8);
  v8 = *(int **)v3;
  if ((_DWORD)v7)
  {
    v9 = (unint64_t)&v6[v7];
    v10 = *(int **)v3;
    v11 = v6;
    do
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    while ((unint64_t)v11 < v9);
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::growAndPushBack(uint64_t result, __int128 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  _OWORD *v8;
  unsigned int v9;
  unint64_t v10;
  __int128 *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  if ((v4 & 0x7FFFFFFF) != 0)
    v5 = 2 * v4;
  else
    v5 = 1;
  if (v5)
  {
    v6 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v7 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::getName() [T = physx::P"
           "xSolverConstraintDesc]";
    else
      v7 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v6 + 24)
                                                                                              + 16))(v6 + 24, 48 * v5, v7, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v8 = (_OWORD *)result;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(v3 + 8);
  if (v9)
  {
    v10 = (unint64_t)&v8[3 * v9];
    v11 = *(__int128 **)v3;
    v12 = v8;
    do
    {
      v13 = *v11;
      v14 = v11[2];
      v12[1] = v11[1];
      v12[2] = v14;
      *v12 = v13;
      v12 += 3;
      v11 += 3;
    }
    while ((unint64_t)v12 < v10);
    v15 = *(_DWORD *)(v3 + 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = &v8[3 * v15];
  v17 = *a2;
  v18 = a2[2];
  v16[1] = a2[1];
  v16[2] = v18;
  *v16 = v17;
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && *(_QWORD *)v3)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v8;
  ++*(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

uint64_t physx::shdfnd::sort<physx::PxSolverConstraintDesc,physx::Dy::ArticulationStaticConstraintSortPredicate,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  _OWORD *v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned __int16 *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  __int128 *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81;
  BOOL v82;
  _BYTE v83[4];
  uint64_t v84;
  _OWORD *v85;
  char v86;
  void *v87;
  char v88;
  _OWORD v89[8];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v88 = 0;
  v87 = v89;
  v84 = 0x2000000000;
  v85 = v89;
  v86 = 0;
  v2 = a2 - 1;
  if (a2 - 1 >= 1)
  {
    v3 = result;
    v4 = 0;
    v5 = result + 66;
    v6 = v89;
    memset(v89, 0, sizeof(v89));
    while (1)
    {
      if (v2 > v4)
      {
        if ((v2 - v4) < 5)
        {
LABEL_51:
          v61 = v4;
          v62 = v4 + 1;
          v63 = (unsigned __int16 *)(v5 + 48 * v4);
          do
          {
            v64 = 0;
            v65 = v61++;
            v66 = v63;
            v67 = v65;
            do
            {
              v68 = *(v66 - 1);
              v70 = *v66;
              v66 += 24;
              v69 = v70;
              if (v68 == 0xFFFF)
                v68 = v69;
              v71 = v3 + 48 * v67;
              v72 = *(unsigned __int16 *)(v71 + 16);
              v73 = *(unsigned __int16 *)(v71 + 18);
              if (v72 != 0xFFFF)
                v73 = v72;
              result = (v62 + v64);
              if (v68 < v73)
                v67 = v62 + v64;
              ++v64;
            }
            while (v65 + v64 < v2);
            if (v67 != (_DWORD)v65)
            {
              v74 = (__int128 *)(v3 + 48 * v67);
              v75 = *v74;
              v76 = v74[1];
              v77 = (__int128 *)(v3 + 48 * v65);
              v78 = v74[2];
              v80 = v77[1];
              v79 = v77[2];
              *v74 = *v77;
              v74[1] = v80;
              v74[2] = v79;
              v77[1] = v76;
              v77[2] = v78;
              *v77 = v75;
            }
            ++v62;
            v63 += 24;
          }
          while (v61 != v2);
        }
        else
        {
          while (1)
          {
            v7 = v4 + v2;
            if (v4 + v2 < 0 != __OFADD__(v4, v2))
              ++v7;
            v8 = v3 + 48 * (v7 >> 1);
            v9 = v3 + 48 * v4;
            if (*(unsigned __int16 *)(v8 + 16) == 0xFFFF)
              v10 = *(unsigned __int16 *)(v8 + 18);
            else
              v10 = *(unsigned __int16 *)(v8 + 16);
            v11 = *(unsigned __int16 *)(v9 + 16);
            v12 = *(unsigned __int16 *)(v9 + 18);
            if (v11 == 0xFFFF)
              v13 = *(unsigned __int16 *)(v9 + 18);
            else
              v13 = *(unsigned __int16 *)(v9 + 16);
            if (v10 < v13)
            {
              v14 = *(_OWORD *)v9;
              v15 = *(_OWORD *)(v9 + 16);
              v16 = *(_OWORD *)(v9 + 32);
              v18 = *(_OWORD *)(v8 + 16);
              v17 = *(_OWORD *)(v8 + 32);
              *(_OWORD *)v9 = *(_OWORD *)v8;
              *(_OWORD *)(v9 + 16) = v18;
              *(_OWORD *)(v9 + 32) = v17;
              *(_OWORD *)(v8 + 16) = v15;
              *(_OWORD *)(v8 + 32) = v16;
              *(_OWORD *)v8 = v14;
              v11 = *(unsigned __int16 *)(v9 + 16);
              v12 = *(unsigned __int16 *)(v9 + 18);
            }
            v19 = v3 + 48 * v2;
            v20 = *(unsigned __int16 *)(v19 + 16);
            result = *(unsigned __int16 *)(v19 + 18);
            if (v20 == 0xFFFF)
              v21 = *(unsigned __int16 *)(v19 + 18);
            else
              v21 = *(unsigned __int16 *)(v19 + 16);
            if (v11 == 0xFFFF)
              v11 = v12;
            if (v21 < v11)
            {
              v22 = *(_OWORD *)v9;
              v23 = *(_OWORD *)(v9 + 16);
              v24 = *(_OWORD *)(v9 + 32);
              v26 = *(_OWORD *)(v19 + 16);
              v25 = *(_OWORD *)(v19 + 32);
              *(_OWORD *)v9 = *(_OWORD *)v19;
              *(_OWORD *)(v9 + 16) = v26;
              *(_OWORD *)(v9 + 32) = v25;
              *(_OWORD *)(v19 + 16) = v23;
              *(_OWORD *)(v19 + 32) = v24;
              *(_OWORD *)v19 = v22;
              v20 = *(unsigned __int16 *)(v19 + 16);
              result = *(unsigned __int16 *)(v19 + 18);
            }
            if (v20 == 0xFFFF)
              v27 = result;
            else
              v27 = v20;
            v28 = *(unsigned __int16 *)(v8 + 16);
            if (v28 == 0xFFFF)
              v28 = *(unsigned __int16 *)(v8 + 18);
            if (v27 < v28)
            {
              v29 = *(_OWORD *)v8;
              v30 = *(_OWORD *)(v8 + 16);
              v31 = *(_OWORD *)(v8 + 32);
              v33 = *(_OWORD *)(v19 + 16);
              v32 = *(_OWORD *)(v19 + 32);
              *(_OWORD *)v8 = *(_OWORD *)v19;
              *(_OWORD *)(v8 + 16) = v33;
              *(_OWORD *)(v8 + 32) = v32;
              *(_OWORD *)(v19 + 16) = v30;
              *(_OWORD *)(v19 + 32) = v31;
              *(_OWORD *)v19 = v29;
            }
            v34 = v2 - 1;
            v35 = *(_OWORD *)v8;
            v36 = *(_OWORD *)(v8 + 16);
            v37 = v3 + 48 * v34;
            v38 = *(_OWORD *)(v8 + 32);
            v40 = *(_OWORD *)(v37 + 16);
            v39 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)v8 = *(_OWORD *)v37;
            *(_OWORD *)(v8 + 16) = v40;
            *(_OWORD *)(v8 + 32) = v39;
            *(_OWORD *)(v37 + 16) = v36;
            *(_OWORD *)(v37 + 32) = v38;
            *(_OWORD *)v37 = v35;
            v41 = v4;
            while (1)
            {
              v42 = *(unsigned __int16 *)(v37 + 18);
              if (*(unsigned __int16 *)(v37 + 16) != 0xFFFF)
                v42 = *(unsigned __int16 *)(v37 + 16);
              v43 = v3 + 48 * v41;
              do
              {
                v44 = *(unsigned __int16 *)(v43 + 64);
                if (v44 == 0xFFFF)
                  v44 = *(unsigned __int16 *)(v43 + 66);
                v43 += 48;
                ++v41;
              }
              while (v44 < v42);
              v45 = (_OWORD *)(v3 + 48 * (int)v34);
              do
              {
                v46 = *((unsigned __int16 *)v45 - 16);
                if (v46 == 0xFFFF)
                  v46 = *((unsigned __int16 *)v45 - 15);
                v45 -= 3;
                LODWORD(v34) = v34 - 1;
              }
              while (v42 < v46);
              if (v41 >= (int)v34)
                break;
              v47 = *(_OWORD *)v43;
              v48 = *(_OWORD *)(v43 + 16);
              v49 = *(_OWORD *)(v43 + 32);
              v51 = v45[1];
              v50 = v45[2];
              *(_OWORD *)v43 = *v45;
              *(_OWORD *)(v43 + 16) = v51;
              *(_OWORD *)(v43 + 32) = v50;
              v45[1] = v48;
              v45[2] = v49;
              *v45 = v47;
            }
            v52 = *(_OWORD *)v43;
            v53 = *(_OWORD *)(v43 + 16);
            v54 = *(_OWORD *)(v43 + 32);
            v56 = *(_OWORD *)(v37 + 16);
            v55 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)v43 = *(_OWORD *)v37;
            *(_OWORD *)(v43 + 16) = v56;
            *(_OWORD *)(v43 + 32) = v55;
            *(_OWORD *)(v37 + 16) = v53;
            *(_OWORD *)(v37 + 32) = v54;
            *(_OWORD *)v37 = v52;
            v57 = v84;
            v58 = HIDWORD(v84) - 1;
            if (v41 - v4 >= v2 - v41)
            {
              if (v84 >= v58)
              {
                result = (uint64_t)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow((uint64_t)v83);
                v57 = v84;
                v6 = v85;
              }
              LODWORD(v84) = v57 + 1;
              *((_DWORD *)v6 + v57) = v41 + 1;
              v60 = v84;
              LODWORD(v84) = v84 + 1;
              *((_DWORD *)v6 + v60) = v2;
              v2 = v41 - 1;
            }
            else
            {
              if (v84 >= v58)
              {
                result = (uint64_t)physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow((uint64_t)v83);
                v57 = v84;
                v6 = v85;
              }
              LODWORD(v84) = v57 + 1;
              *((_DWORD *)v6 + v57) = v4;
              v59 = v84;
              LODWORD(v84) = v84 + 1;
              *((_DWORD *)v6 + v59) = v41 - 1;
              v4 = v41 + 1;
            }
            if (v2 <= v4)
              break;
            if ((v2 - v4) <= 4)
              goto LABEL_51;
          }
        }
      }
      v81 = v84;
      if (!(_DWORD)v84)
        break;
      LODWORD(v84) = v84 - 1;
      v2 = *((_DWORD *)v6 + (v81 - 1));
      LODWORD(v84) = v81 - 2;
      v4 = *((_DWORD *)v6 + (v81 - 2));
    }
    if (v86)
      v82 = v6 == 0;
    else
      v82 = 1;
    if (!v82)
    {
      result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, v6);
      if (v88)
        return physx::shdfnd::TempAllocator::deallocate((physx::shdfnd::TempAllocator *)&v87, (char *)v87);
    }
  }
  return result;
}

void *physx::shdfnd::internal::Stack<physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>::grow(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  void *v6;
  void *result;

  v2 = 2 * *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = 4 * v2;
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>::getName() [T = physx::P"
           "xSolverConstraintDesc]";
    else
      v5 = "<allocation names disabled>";
    v6 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                                  + 16))(v4 + 24, v3, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsSortInternals.h", 155);
  }
  else
  {
    v6 = 0;
  }
  result = memcpy(v6, *(const void **)(a1 + 16), (4 * *(_DWORD *)(a1 + 4)));
  if (*(_BYTE *)(a1 + 24) && *(_QWORD *)(a1 + 16))
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationInternalConstraint,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalConstraint>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalConstraint>::getName() ["
           "T = physx::Dy::ArticulationInternalConstraint]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 176 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(_QWORD *)v3;
  if (v7)
  {
    v9 = v6 + 176 * v7;
    v10 = v6;
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)v8;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v10 + 40) = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(v8 + 48);
      *(_QWORD *)(v10 + 56) = *(_QWORD *)(v8 + 56);
      *(_QWORD *)(v10 + 64) = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v10 + 72) = *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v10 + 80) = *(_QWORD *)(v8 + 80);
      *(_QWORD *)(v10 + 88) = *(_QWORD *)(v8 + 88);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v8 + 96);
      v11 = *(_OWORD *)(v8 + 112);
      v12 = *(_OWORD *)(v8 + 128);
      v13 = *(_OWORD *)(v8 + 160);
      *(_OWORD *)(v10 + 144) = *(_OWORD *)(v8 + 144);
      *(_OWORD *)(v10 + 160) = v13;
      *(_OWORD *)(v10 + 112) = v11;
      *(_OWORD *)(v10 + 128) = v12;
      v10 += 176;
      v8 += 176;
    }
    while (v10 < v9);
    v8 = *(_QWORD *)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::Dy::ArticulationInternalLockedAxis,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalLockedAxis>>::recreate(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;

  v3 = result;
  if (a2)
  {
    v4 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v5 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationInternalLockedAxis>::getName() ["
           "T = physx::Dy::ArticulationInternalLockedAxis]";
    else
      v5 = "<allocation names disabled>";
    result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v4 + 24)
                                                                                              + 16))(v4 + 24, 80 * a2, v5, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/foundation/include/PsArray.h", 553);
    v6 = result;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_DWORD *)(v3 + 8);
  v8 = *(_QWORD *)v3;
  if (v7)
  {
    v9 = v6 + 80 * v7;
    v10 = v6;
    do
    {
      *(_QWORD *)v10 = *(_QWORD *)v8;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v8 + 32);
      *(_QWORD *)(v10 + 40) = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v10 + 48) = *(_QWORD *)(v8 + 48);
      *(_DWORD *)(v10 + 56) = *(_DWORD *)(v8 + 56);
      v11 = *(_OWORD *)(v8 + 60);
      *(_DWORD *)(v10 + 76) = *(_DWORD *)(v8 + 76);
      *(_OWORD *)(v10 + 60) = v11;
      v10 += 80;
      v8 += 80;
    }
    while (v10 < v9);
    v8 = *(_QWORD *)v3;
  }
  if ((*(_DWORD *)(v3 + 12) & 0x80000000) == 0 && v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  *(_QWORD *)v3 = v6;
  *(_DWORD *)(v3 + 12) = a2;
  return result;
}

uint64_t physx::Dy::DynamicsContext::create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, char a11, char a12, char a13, char a14)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                            + 16))(physx::shdfnd::Foundation::mInstance + 24, 784, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyDynamics.cpp", 134);
  if (result)
    return physx::Dy::DynamicsContext::DynamicsContext(result, a1, a2, a3, a4, a5, a6, a7, a9, a8, a10, a11, a12, a13, a14);
  return result;
}

uint64_t physx::Dy::DynamicsContext::destroy(physx::Dy::DynamicsContext *this)
{
  (*(void (**)(physx::Dy::DynamicsContext *))(*(_QWORD *)this + 56))(this);
  return (*(uint64_t (**)(uint64_t, physx::Dy::DynamicsContext *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                      + 24)
                                                                          + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Dy::DynamicsContext::resetThreadContexts(physx::Dy::DynamicsContext *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 50);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  v3 = *(_QWORD **)v2;
  *(_QWORD *)v2 = 0;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v3)
  {
    v5 = v3;
    do
    {
      v6 = (_QWORD *)*v5;
      v5[1479] = 0;
      *((_DWORD *)v5 + 2960) = 0;
      v5[1485] = 0;
      *((_DWORD *)v5 + 2972) = 0;
      v5[1533] = v5[1502];
      v5[1535] = v5[1508];
      v5[1530] = 0;
      *((_DWORD *)v5 + 2974) = 0;
      v5[1488] = 0;
      *((_OWORD *)v5 + 763) = 0uLL;
      v5 = v6;
    }
    while (v6);
    do
    {
      v7 = (_QWORD *)*v3;
      v8 = *((_QWORD *)this + 50);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
      *v3 = *(_QWORD *)v8;
      *(_QWORD *)v8 = v3;
      result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
      v3 = v7;
    }
    while (v7);
  }
  return result;
}

uint64_t physx::Dy::DynamicsContext::DynamicsContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15)
{
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 72) = a10;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 88) = _D1;
  *(float *)(a1 + 96) = a9;
  *(_BYTE *)(a1 + 100) = a12;
  *(_BYTE *)(a1 + 101) = a13;
  *(_BYTE *)(a1 + 102) = a14;
  *(_DWORD *)(a1 + 120) = -1073741824;
  *(_DWORD *)(a1 + 140) = 32;
  *(_QWORD *)(a1 + 224) = a7;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = a5;
  *(_QWORD *)a1 = &off_24ED8CDF0;
  v27 = a1 + 288;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::SListT((uint64_t *)(a1 + 400));
  *(_QWORD *)(a1 + 408) = a2;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_QWORD *)(a1 + 688) = a8;
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 736) = a3;
  *(_QWORD *)(a1 + 744) = a4;
  *(_QWORD *)(a1 + 752) = a6;
  *(_QWORD *)(a1 + 768) = a11;
  v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyContext.h", 262);
  v28[1] = 0;
  v28[2] = 0;
  *v28 = a7;
  *(_QWORD *)(a1 + 8) = v28;
  v29 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/include/DyContext.h", 264);
  v29[1] = 0;
  v29[2] = 0;
  *v29 = a7;
  *(_QWORD *)(a1 + 16) = v29;
  v30 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyDynamics.cpp", 190);
  v30[1] = 0;
  v30[2] = 0;
  *v30 = a7;
  *(_QWORD *)(a1 + 576) = v30;
  v31 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 24, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DyDynamics.cpp", 191);
  v31[1] = 0;
  v31[2] = 0;
  *v31 = a7;
  *(_QWORD *)(a1 + 584) = v31;
  *(_DWORD *)(a1 + 684) = 0;
  *(_DWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0xFFFF00000000;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 356) = 0x1FFFFFFFF7FFFFFLL;
  *(_OWORD *)(a1 + 304) = xmmword_2261A69E0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(v27 + 76) = xmmword_2261A6A10;
  *(_DWORD *)(a1 + 380) = 1065353216;
  *(_QWORD *)(v27 + 102) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24)
                                                                                         + 16))(physx::shdfnd::Foundation::mInstance + 24, 16, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DySolverControl.cpp", 174);
  if (v32)
  {
    *(_QWORD *)v32 = &off_24ED8CF58;
    *(_BYTE *)(v32 + 8) = a15;
  }
  *(_QWORD *)(a1 + 608) = v32;
  v33 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DySolverControlPF.cpp", 200);
  if (v33)
    *v33 = &off_24ED8CFC0;
  *(_QWORD *)(a1 + 616) = v33;
  v34 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 16))(physx::shdfnd::Foundation::mInstance + 24, 8, "NonTrackedAlloc", "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowleveldynamics/src/DySolverControlPF.cpp", 200);
  if (v34)
    *v34 = &off_24ED8CFC0;
  *(_QWORD *)(a1 + 624) = v34;
  return a1;
}

void physx::Dy::DynamicsContext::~DynamicsContext(physx::Dy::DynamicsContext *this)
{
  uint64_t i;
  _QWORD *v3;
  int v4;
  BOOL v5;
  _QWORD *v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  physx::shdfnd::SListImpl *j;
  physx::Dy::ThreadContext *v29;
  uint64_t v30;

  *(_QWORD *)this = &off_24ED8CDF0;
  for (i = 608; i != 632; i += 8)
    (***(void (****)(_QWORD))((char *)this + i))(*(_QWORD *)((char *)this + i));
  v3 = (_QWORD *)*((_QWORD *)this + 72);
  if (v3)
  {
    v4 = *((_DWORD *)v3 + 5);
    if (v4 < 0
      || ((v4 & 0x7FFFFFFF) != 0 ? (v5 = v3[1] == 0) : (v5 = 1),
          v5 || ((*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 24))(*v3, v3[1]), *((_QWORD *)this + 72))))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 72) = 0;
  v6 = (_QWORD *)*((_QWORD *)this + 73);
  if (v6)
  {
    v7 = *((_DWORD *)v6 + 5);
    if (v7 < 0
      || ((v7 & 0x7FFFFFFF) != 0 ? (v8 = v6[1] == 0) : (v8 = 1),
          v8 || ((*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 24))(*v6, v6[1]), *((_QWORD *)this + 73))))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 73) = 0;
  v9 = *((_DWORD *)this + 169);
  if ((v9 & 0x80000000) == 0 && (v9 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 83))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v10 = *((_DWORD *)this + 165);
  if ((v10 & 0x80000000) == 0 && (v10 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 81))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v11 = *((_DWORD *)this + 161);
  if ((v11 & 0x80000000) == 0 && (v11 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 79))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v12 = *((_DWORD *)this + 151);
  if ((v12 & 0x80000000) == 0 && (v12 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 74))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v13 = *((_DWORD *)this + 143);
  if ((v13 & 0x80000000) == 0 && (v13 & 0x7FFFFFFF) != 0)
  {
    v14 = *((_QWORD *)this + 70);
    if (v14)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v14 - *(_QWORD *)(v14 - 8));
  }
  v15 = *((_DWORD *)this + 139);
  if ((v15 & 0x80000000) == 0 && (v15 & 0x7FFFFFFF) != 0)
  {
    v16 = *((_QWORD *)this + 68);
    if (v16)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v16 - *(_QWORD *)(v16 - 8));
  }
  v17 = *((_DWORD *)this + 135);
  if ((v17 & 0x80000000) == 0 && (v17 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 66))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v18 = *((_DWORD *)this + 131);
  if ((v18 & 0x80000000) == 0 && (v18 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 64))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v19 = *((_DWORD *)this + 127);
  if ((v19 & 0x80000000) == 0 && (v19 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 62))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v20 = *((_DWORD *)this + 123);
  if ((v20 & 0x80000000) == 0 && (v20 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 60))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v21 = *((_DWORD *)this + 119);
  if ((v21 & 0x80000000) == 0 && (v21 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 58))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
  v22 = *((_DWORD *)this + 115);
  if ((v22 & 0x80000000) == 0 && (v22 & 0x7FFFFFFF) != 0)
  {
    v23 = *((_QWORD *)this + 56);
    if (v23)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v23 - *(_QWORD *)(v23 - 8));
  }
  v24 = *((_DWORD *)this + 111);
  if ((v24 & 0x80000000) == 0 && (v24 & 0x7FFFFFFF) != 0)
  {
    v25 = *((_QWORD *)this + 54);
    if (v25)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v25 - *(_QWORD *)(v25 - 8));
  }
  v26 = *((_DWORD *)this + 107);
  if ((v26 & 0x80000000) == 0 && (v26 & 0x7FFFFFFF) != 0)
  {
    v27 = *((_QWORD *)this + 52);
    if (v27)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v27 - *(_QWORD *)(v27 - 8));
  }
  for (j = (physx::shdfnd::SListImpl *)*((_QWORD *)this + 50); ; j = (physx::shdfnd::SListImpl *)*((_QWORD *)this + 50))
  {
    v29 = (physx::Dy::ThreadContext *)physx::shdfnd::SListImpl::pop(j);
    if (!v29)
      break;
    physx::Dy::ThreadContext::~ThreadContext(v29);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24, v30 - *(_QWORD *)(v30 - 8));
  }
  physx::shdfnd::SListT<physx::shdfnd::ReflectionAllocator<physx::shdfnd::SListImpl>>::~SListT((uint64_t)this + 400);
  physx::Dy::Context::~Context(this);
}

{
  physx::Dy::DynamicsContext::~DynamicsContext(this);
  JUMPOUT(0x2276933B8);
}

void physx::Dy::Context::~Context(physx::Dy::Context *this)
{
  _QWORD *v2;
  int v3;
  BOOL v4;
  _QWORD *v5;
  int v6;
  BOOL v7;
  int v8;

  *(_QWORD *)this = &unk_24ED8D578;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_DWORD *)v2 + 5);
    if (v3 < 0
      || ((v3 & 0x7FFFFFFF) != 0 ? (v4 = v2[1] == 0) : (v4 = 1),
          v4 || ((*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 24))(*v2, v2[1]), *((_QWORD *)this + 1))))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 1) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 2);
  if (v5)
  {
    v6 = *((_DWORD *)v5 + 5);
    if (v6 < 0
      || ((v6 & 0x7FFFFFFF) != 0 ? (v7 = v5[1] == 0) : (v7 = 1),
          v7 || ((*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 24))(*v5, v5[1]), *((_QWORD *)this + 2))))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
    }
  }
  *((_QWORD *)this + 2) = 0;
  v8 = *((_DWORD *)this + 61);
  if ((v8 & 0x80000000) == 0 && (v8 & 0x7FFFFFFF) != 0 && *((_QWORD *)this + 29) != 0)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 28) + 24))(*((_QWORD *)this + 28));
  if (*((_QWORD *)this + 3))
    (*(void (**)(uint64_t))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance + 24) + 24))(physx::shdfnd::Foundation::mInstance + 24);
}

uint64_t physx::Dy::DynamicsContext::setDescFromIndices(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12[0] = a4;
  v12[1] = 0;
  v4 = *(unsigned __int8 *)(a3 + 16);
  if ((_DWORD)v4 == 2)
  {
    *(_QWORD *)a2 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFC0;
    *(_WORD *)(a2 + 16) = *(_WORD *)a3 & 0x3F;
  }
  else
  {
    *(_WORD *)(a2 + 16) = -1;
    if ((_DWORD)v4 == 3)
      v5 = result + 256;
    else
      v5 = *(_QWORD *)(result + 544) + 32 * (v12[v4] + *(_DWORD *)a3);
    *(_QWORD *)a2 = v5;
    v6 = *(unsigned __int8 *)(a3 + 16);
    if (v6 == 3)
      v7 = 0;
    else
      v7 = *(_DWORD *)a3 + v12[v6] + 1;
    *(_DWORD *)(a2 + 20) = v7;
  }
  v8 = *(unsigned __int8 *)(a3 + 17);
  if ((_DWORD)v8 == 2)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFC0;
    *(_WORD *)(a2 + 18) = *(_WORD *)(a3 + 8) & 0x3F;
  }
  else
  {
    *(_WORD *)(a2 + 18) = -1;
    if ((_DWORD)v8 == 3)
      v9 = result + 256;
    else
      v9 = *(_QWORD *)(result + 544) + 32 * (v12[v8] + *(_DWORD *)(a3 + 8));
    *(_QWORD *)(a2 + 8) = v9;
    v10 = *(unsigned __int8 *)(a3 + 17);
    if (v10 == 3)
      v11 = 0;
    else
      v11 = *(_DWORD *)(a3 + 8) + v12[v10] + 1;
    *(_DWORD *)(a2 + 24) = v11;
  }
  return result;
}

uint64_t physx::Dy::DynamicsContext::update(physx::Dy::DynamicsContext *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, float a9, uint64_t a10, __int128 *a11, uint64_t a12, uint64_t a13)
{
  __int128 v17;
  __int128 v18;
  float v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  _OWORD v62[7];
  _OWORD v63[3];

  v17 = *a11;
  v18 = a11[1];
  *((_QWORD *)this + 91) = *((_QWORD *)a11 + 4);
  *(_OWORD *)((char *)this + 696) = v17;
  *(_OWORD *)((char *)this + 712) = v18;
  v19 = 1.0 / a9;
  if (a9 == 0.0)
    v19 = 0.0;
  *((float *)this + 22) = a9;
  *((float *)this + 23) = v19;
  *((_QWORD *)this + 13) = *(_QWORD *)a13;
  *((_DWORD *)this + 28) = *(_DWORD *)(a13 + 8);
  v20 = *(_DWORD *)(a2 + 552);
  v21 = *(unsigned int *)(a2 + 432);
  if ((_DWORD)v21)
  {
    v22 = *(unsigned int **)(a2 + 424);
    v23 = *(_DWORD *)(a2 + 200);
    v24 = *(_QWORD *)(a2 + 176);
    do
    {
      v25 = *v22++;
      v26 = *(_QWORD *)(*(_QWORD *)(v24 + 8 * (v25 / v23)) + 8 * (v25 % v23));
      if (v26)
        *(_BYTE *)(v26 + 82) = 0;
      --v21;
    }
    while (v21);
  }
  v27 = (_DWORD *)*((_QWORD *)this + 31);
  v27[152] = *(_DWORD *)(a2 + 416);
  if (v20)
  {
    v27[151] = *(_DWORD *)(a2 + 384);
    v27[150] = *(_DWORD *)(a2 + 460);
    *((_DWORD *)this + 171) = 0;
    physx::Dy::DynamicsContext::resetThreadContexts(this);
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
    v28 = physx::Cm::FlushPool::allocate(*((pthread_mutex_t ***)this + 93), 64, 0x10u);
    *(_QWORD *)(v28 + 8) = *((_QWORD *)this + 96);
    *(_QWORD *)(v28 + 16) = 0;
    *(_DWORD *)(v28 + 32) = 0;
    *(_QWORD *)v28 = &off_24ED8D328;
    *(_QWORD *)(v28 + 40) = this;
    *(_QWORD *)(v28 + 48) = a2;
    *(_QWORD *)(v28 + 56) = a4;
    *(_DWORD *)(v28 + 32) = 1;
    *(_QWORD *)(v28 + 24) = a3;
    if (a3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
      *(_QWORD *)(v28 + 16) = *(_QWORD *)(*(_QWORD *)(v28 + 24) + 16);
    }
    *((_QWORD *)this + 34) = 0;
    *((_DWORD *)this + 70) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_DWORD *)this + 66) = 0;
    v29 = *(unsigned int *)(a2 + 416);
    v30 = *(_QWORD *)(a2 + 408);
    *((_DWORD *)this + 170) = v29;
    v31 = *(_DWORD *)(a2 + 384);
    v58 = *(_DWORD *)(a2 + 400);
    v32 = v31 + v29;
    v33 = *((_DWORD *)this + 139) & 0x7FFFFFFF;
    if (v31 + v29 > v33)
    {
      v34 = (v32 + 31) & 0xFFFFFFE0;
      if (v33 < v34)
        physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::recreate((unint64_t *)this + 68, v34);
      v35 = (v32 & 0xFFFFFFE0) + 32;
      if ((*((_DWORD *)this + 143) & 0x7FFFFFFFu) < v35)
        physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::recreate((unint64_t *)this + 70, (v32 & 0xFFFFFFE0) + 32);
      if ((*((_DWORD *)this + 161) & 0x7FFFFFFFu) < v35)
        physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 632, (v32 & 0xFFFFFFE0) + 32);
    }
    v60 = a2;
    memset(v63, 0, 32);
    physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::resize((uint64_t)this + 544, v31 + v29, (uint64_t)v63);
    memset(v62, 0, sizeof(v62));
    physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::resize((uint64_t)this + 560, (v32 + 1), (uint64_t)v62);
    v61 = 0;
    v59 = v31;
    physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::resize((uint64_t)this + 632, v31, &v61);
    v36 = *((_QWORD *)this + 70);
    *(_OWORD *)v36 = *((_OWORD *)this + 18);
    *(_OWORD *)(v36 + 16) = *((_OWORD *)this + 19);
    *(_QWORD *)(v36 + 32) = *((_QWORD *)this + 40);
    *(_QWORD *)(v36 + 40) = *((_QWORD *)this + 41);
    *(_QWORD *)(v36 + 48) = *((_QWORD *)this + 42);
    *(_QWORD *)(v36 + 56) = *((_QWORD *)this + 43);
    *(_DWORD *)(v36 + 64) = *((_DWORD *)this + 88);
    v37 = *(_QWORD *)((char *)this + 356);
    *(_DWORD *)(v36 + 76) = *((_DWORD *)this + 91);
    *(_QWORD *)(v36 + 68) = v37;
    *(_OWORD *)(v36 + 80) = *((_OWORD *)this + 23);
    *(_QWORD *)(v36 + 96) = *((_QWORD *)this + 48);
    *(_DWORD *)(v36 + 104) = *((_DWORD *)this + 98);
    *(_DWORD *)(v36 + 108) = *((_DWORD *)this + 99);
    bzero(*((void **)this + 68), (32 * v29));
    if ((_DWORD)v29)
    {
      v38 = v30;
      v39 = 0;
      v40 = v29;
      do
      {
        v41 = v40 - 1024;
        v42 = v29;
        if (v40 >= 0x400)
          v43 = 1024;
        else
          v43 = v40;
        v44 = physx::Cm::FlushPool::allocate(*((pthread_mutex_t ***)this + 93), 72, 0x10u);
        v45 = *((_QWORD *)this + 70) + 112 * v39;
        *(_QWORD *)(v44 + 8) = *((_QWORD *)this + 96);
        *(_QWORD *)(v44 + 16) = 0;
        *(_DWORD *)(v44 + 32) = 0;
        *(_QWORD *)v44 = &off_24ED8D398;
        *(_QWORD *)(v44 + 40) = v38 + 4 * v39;
        *(_DWORD *)(v44 + 48) = v43;
        v29 = v42;
        *(_QWORD *)(v44 + 56) = v60 + 224;
        *(_QWORD *)(v44 + 64) = v45;
        *(_DWORD *)(v44 + 32) = 1;
        *(_QWORD *)(v44 + 24) = v28;
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
        *(_QWORD *)(v44 + 16) = *(_QWORD *)(*(_QWORD *)(v44 + 24) + 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
        v39 += 1024;
        v40 = v41;
      }
      while (v39 < v42);
    }
    v46 = *(_DWORD *)(v60 + 456);
    v47 = v46 + (v58 << 6) + *(_DWORD *)(v60 + 460);
    *((_DWORD *)this + 106) = 0;
    v48 = (v47 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 107) & 0x7FFFFFFFu) < v48)
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 416, (v47 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 106) = v47;
    *((_DWORD *)this + 110) = 0;
    if ((*((_DWORD *)this + 111) & 0x7FFFFFFFu) < v48)
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 432, (v47 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 110) = v47;
    *((_DWORD *)this + 114) = 0;
    if ((*((_DWORD *)this + 115) & 0x7FFFFFFFu) < v48)
      physx::shdfnd::Array<physx::PxSolverConstraintDesc,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverConstraintDesc>>>::recreate((uint64_t)this + 448, (v47 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 114) = v47;
    *((_DWORD *)this + 118) = 0;
    if ((*((_DWORD *)this + 119) & 0x7FFFFFFFu) < v48)
      physx::shdfnd::Array<physx::PxConstraintBatchHeader,physx::shdfnd::ReflectionAllocator<physx::PxConstraintBatchHeader>>::recreate((uint64_t)this + 464, (v47 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 118) = v47;
    *((_DWORD *)this + 168) = 0;
    v49 = (v46 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 169) & 0x7FFFFFFFu) < v49)
      physx::shdfnd::Array<physx::PxsIndexedContactManager,physx::shdfnd::ReflectionAllocator<physx::PxsIndexedContactManager>>::recreate((uint64_t)this + 664, v49);
    *((_DWORD *)this + 168) = v46;
    *((_DWORD *)this + 122) = 0;
    v50 = (v59 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 123) & 0x7FFFFFFFu) < v50)
      physx::shdfnd::Array<physx::Cm::SpatialVector,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVector>>::recreate((uint64_t)this + 480, (v59 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 122) = v59;
    *((_DWORD *)this + 126) = 0;
    if ((*((_DWORD *)this + 127) & 0x7FFFFFFFu) < v50)
      physx::shdfnd::Array<physx::PxsBodyCore *,physx::shdfnd::ReflectionAllocator<physx::PxsBodyCore *>>::recreate((uint64_t)this + 496, (v59 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 126) = v59;
    *((_DWORD *)this + 130) = 0;
    if ((*((_DWORD *)this + 131) & 0x7FFFFFFFu) < v50)
      physx::shdfnd::Array<physx::PxsRigidBody *,physx::shdfnd::ReflectionAllocator<physx::PxsRigidBody *>>::recreate((uint64_t)this + 512, (v59 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 130) = v59;
    *((_DWORD *)this + 134) = 0;
    v51 = (v58 + 63) & 0xFFFFFFC0;
    if ((*((_DWORD *)this + 135) & 0x7FFFFFFFu) < v51)
      physx::shdfnd::Array<physx::Dy::ArticulationV *,physx::shdfnd::ReflectionAllocator<physx::Dy::ArticulationV *>>::recreate((uint64_t)this + 528, v51);
    *((_DWORD *)this + 134) = v58;
    *((_DWORD *)this + 164) = 0;
    if ((*((_DWORD *)this + 165) & 0x7FFFFFFFu) < v50)
      physx::shdfnd::Array<unsigned int,physx::shdfnd::ReflectionAllocator<unsigned int>>::recreate((uint64_t)this + 648, (v59 + 63) & 0xFFFFFFC0);
    *((_DWORD *)this + 164) = v59;
    v52 = *((_QWORD *)this + 1);
    *(_DWORD *)(v52 + 16) = 0;
    v53 = v46 - 1;
    if (!v46)
      v53 = 0;
    v54 = v53 | (v53 >> 1) | ((v53 | (v53 >> 1)) >> 2);
    v55 = v54 | (v54 >> 4) | ((v54 | (v54 >> 4)) >> 8);
    v56 = (v55 | HIWORD(v55)) + 1;
    if ((*(_DWORD *)(v52 + 20) & 0x7FFFFFFFu) < v56)
      physx::shdfnd::Array<physx::Dy::ThresholdStreamElement,physx::shdfnd::VirtualAllocator>::recreate(v52, v56);
    *((_DWORD *)this + 190) = 1 - *((_DWORD *)this + 190);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
  }
  else
  {
    *((_QWORD *)v27 + 75) = 0;
    *((_DWORD *)this + 171) = 0;
    return physx::Dy::DynamicsContext::resetThreadContexts(this);
  }
}

uint64_t physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::resize(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxSolverBody,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBody>>>::recreate((unint64_t *)result, a2);
  v6 = *(unsigned int *)(v5 + 8);
  if (v6 < a2)
  {
    v7 = *(_QWORD *)v5 + 32 * a2;
    v8 = *(_QWORD *)v5 + 32 * v6;
    do
    {
      *(_QWORD *)v8 = *(_QWORD *)a3;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(a3 + 12);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(v8 + 28) = *(_DWORD *)(a3 + 28);
      v8 += 32;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::resize(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  if ((*(_DWORD *)(result + 12) & 0x7FFFFFFFu) < a2)
    result = physx::shdfnd::Array<physx::PxSolverBodyData,physx::shdfnd::AlignedAllocator<128u,physx::shdfnd::ReflectionAllocator<physx::PxSolverBodyData>>>::recreate((unint64_t *)result, a2);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 < v4)
  {
    v7 = *(_QWORD *)v5 + 112 * v4;
    v8 = *(_QWORD *)v5 + 112 * v6;
    do
    {
      *(_OWORD *)v8 = *(_OWORD *)a3;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v8 + 32) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(v8 + 56) = *(_QWORD *)(a3 + 56);
      *(_DWORD *)(v8 + 64) = *(_DWORD *)(a3 + 64);
      v9 = *(_QWORD *)(a3 + 68);
      *(_DWORD *)(v8 + 76) = *(_DWORD *)(a3 + 76);
      *(_QWORD *)(v8 + 68) = v9;
      *(_OWORD *)(v8 + 80) = *(_OWORD *)(a3 + 80);
      *(_QWORD *)(v8 + 96) = *(_QWORD *)(a3 + 96);
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(a3 + 104);
      *(_DWORD *)(v8 + 108) = *(_DWORD *)(a3 + 108);
      v8 += 112;
    }
    while (v8 < v7);
  }
  *(_DWORD *)(v5 + 8) = v4;
  return result;
}

uint64_t physx::Dy::DynamicsContext::mergeResults(physx::Dy::DynamicsContext *this)
{
  uint64_t v2;
  int32x4_t *v3;
  uint64_t result;
  int32x4_t *v5;
  int32x4_t *v6;
  int32x4_t *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 50);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  v3 = *(int32x4_t **)v2;
  *(_QWORD *)v2 = 0;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v3)
  {
    v5 = v3;
    do
    {
      v6 = (int32x4_t *)v5->i64[0];
      *(int32x4_t *)(*((_QWORD *)this + 31) + 600) = vaddq_s32(*(int32x4_t *)(*((_QWORD *)this + 31) + 600), v5[769]);
      v5[769] = 0uLL;
      v5 = v6;
    }
    while (v6);
    do
    {
      v7 = (int32x4_t *)v3->i64[0];
      v8 = *((_QWORD *)this + 50);
      pthread_mutex_lock((pthread_mutex_t *)(v8 + 8));
      v3->i64[0] = *(_QWORD *)v8;
      *(_QWORD *)v8 = v3;
      result = pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
      v3 = v7;
    }
    while (v7);
  }
  return result;
}

void physx::Dy::PxsPreIntegrateTask::runInternal(float32x2_t *this)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  float32x2_t *v14;
  float32x2_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float32x2_t v31;
  float v32;
  float v33;
  float v34;
  float32x2_t v35;
  float v36;
  float v37;
  float v38;
  int v39;
  uint64_t v40;
  float32x2_t *v41;
  float v42;
  float32x2_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x2_t v49;
  float v50;
  float32x2_t v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  unsigned int v57;
  signed int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  signed int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  float32x2_t v68;
  unsigned __int32 v69;
  int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;

  v2 = this[11].f32[0];
  v4 = this[14].u32[0];
  v3 = this[14].u32[1];
  v71 = v3;
  v72 = *(_QWORD *)&this[7] + 8 * v4;
  v5 = (int *)(*(_QWORD *)&this[8] + 4 * v4);
  v7 = (unsigned int *)this[12];
  v6 = (unsigned int *)this[13];
  v75 = *(_QWORD *)&this[9] + 32 * v4;
  v69 = this[14].u32[0];
  v70 = v5;
  v67 = *(_QWORD *)&this[6] + 8 * v4;
  v68 = this[10];
  if (v3 < 2)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v73 = 8 * v3 - 8;
    _X27 = *(_QWORD *)&this[10] + 112 * v4 + 240;
    v12 = *(_QWORD *)&this[6] + 8 * v4 + 8;
    v13 = *(_QWORD *)&this[9] + 32 * v4 + 14;
    v74 = this[11].f32[0];
    do
    {
      v14 = *(float32x2_t **)(v12 + v8 - 8);
      _X9 = *(_QWORD *)(v12 + v8);
      __asm
      {
        PRFM            #0, [X9]
        PRFM            #0, [X9,#0x80]
        PRFUM           #0, [X27,#-0x80]
        PRFM            #0, [X27]
      }
      if (v14[3].i16[3] > v9)
        v9 = v14[3].i16[3];
      if (HIBYTE(v14[3].u16[3]) > v10)
        v10 = HIBYTE(v14[3].u16[3]);
      v24 = v14[8];
      v25 = v14[9].f32[0];
      if (!v14[19].i8[5])
      {
        v26 = *(float *)(*(_QWORD *)(v72 + v8) + 76);
        v24 = vadd_f32(v24, vmul_n_f32(vmul_n_f32(this[15], v2), v26));
        v25 = v25 + (float)(v26 * (float)(v2 * this[16].f32[0]));
      }
      v27 = v14[12].f32[0];
      v28 = v14[12].f32[1];
      if ((float)(1.0 - (float)(v2 * v14[13].f32[0])) < 0.0)
        v29 = 0.0;
      else
        v29 = 1.0 - (float)(v2 * v14[13].f32[0]);
      if ((float)(1.0 - (float)(v2 * v14[13].f32[1])) < 0.0)
        v30 = 0.0;
      else
        v30 = 1.0 - (float)(v2 * v14[13].f32[1]);
      v31 = vmul_n_f32(v24, v29);
      v32 = v29 * v25;
      v33 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v31, v31).i32[1]), v31.f32[0], v31.f32[0]) + (float)(v32 * v32);
      if (v33 > v28)
      {
        v34 = sqrtf(v28 / v33);
        v31 = vmul_n_f32(v31, v34);
        v32 = v32 * v34;
      }
      v35 = vmul_n_f32(v14[10], v30);
      v36 = v30 * v14[11].f32[0];
      v37 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v35, v35).i32[1]), v35.f32[0], v35.f32[0]) + (float)(v36 * v36);
      if (v37 > v27)
      {
        v38 = sqrtf(v27 / v37);
        v35 = vmul_n_f32(v35, v38);
        v36 = v36 * v38;
      }
      v14[8] = v31;
      v14[9].f32[0] = v32;
      v14[10] = v35;
      v14[11].f32[0] = v36;
      v39 = *v5++;
      physx::Dy::copyToSolverBodyData((uint64_t)&v14[8], (uint64_t)&v14[10], (float *)&v14[14], (uint64_t)v14, v39, _X27 - 128, v14[19].u8[6], v14[15].f32[1], v14[9].f32[1], v14[16].f32[0], v14[11].f32[1]);
      *(_DWORD *)(v75 + 4 * v8 + 28) = 0;
      *(_DWORD *)(v13 - 2) = 0;
      v8 += 8;
      _X27 += 112;
      v13 += 32;
      v2 = v74;
    }
    while (v73 != v8);
  }
  v40 = v71 - 1;
  v41 = *(float32x2_t **)(v67 + 8 * v40);
  v42 = v41[12].f32[1];
  v43 = v41[8];
  v44 = v41[9].f32[0];
  v45 = 1.0 - (float)(v2 * v41[13].f32[0]);
  if (!v41[19].i8[5])
  {
    v46 = *(float *)(*(_QWORD *)(v72 + 8 * v40) + 76);
    v43 = vadd_f32(v43, vmul_n_f32(vmul_n_f32(this[15], v2), v46));
    v44 = v44 + (float)(v46 * (float)(v2 * this[16].f32[0]));
  }
  v47 = v41[12].f32[0];
  v48 = 0.0;
  if (v45 < 0.0)
    v45 = 0.0;
  if ((float)(1.0 - (float)(v2 * v41[13].f32[1])) >= 0.0)
    v48 = 1.0 - (float)(v2 * v41[13].f32[1]);
  v49 = vmul_n_f32(v43, v45);
  v50 = v45 * v44;
  v51 = vmul_n_f32(v41[10], v48);
  v52 = v48 * v41[11].f32[0];
  v53 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v49, v49).i32[1]), v49.f32[0], v49.f32[0]) + (float)(v50 * v50);
  if (v53 > v42)
  {
    v54 = sqrtf(v42 / v53);
    v49 = vmul_n_f32(v49, v54);
    v50 = v50 * v54;
  }
  v55 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v51, v51).i32[1]), v51.f32[0], v51.f32[0]) + (float)(v52 * v52);
  if (v55 > v47)
  {
    v56 = sqrtf(v47 / v55);
    v51 = vmul_n_f32(v51, v56);
    v52 = v52 * v56;
  }
  v57 = HIBYTE(v41[3].u16[3]);
  if (v41[3].i16[3] <= v9)
    v58 = v9;
  else
    v58 = v41[3].i16[3];
  v41[8] = v49;
  v41[9].f32[0] = v50;
  v41[10] = v51;
  v41[11].f32[0] = v52;
  physx::Dy::copyToSolverBodyData((uint64_t)&v41[8], (uint64_t)&v41[10], (float *)&v41[14], (uint64_t)v41, v70[v40], *(_QWORD *)&v68 + 112 * v69 + 112 * v71, v41[19].u8[6], v41[15].f32[1], v41[9].f32[1], v41[16].f32[0], v41[11].f32[1]);
  v59 = v75 + 32 * v40;
  *(_DWORD *)(v59 + 28) = 0;
  *(_DWORD *)(v59 + 12) = 0;
LABEL_36:
  v60 = *v7;
  if ((int)*v7 <= v58)
    v61 = v58;
  else
    v61 = *v7;
  do
  {
    v62 = __ldaxr(v7);
    if (v62 != v60)
    {
      __clrex();
      goto LABEL_36;
    }
  }
  while (__stlxr(v61, v7));
  if (v57 <= v10)
    v63 = v10;
  else
    v63 = v57;
LABEL_46:
  v64 = *v6;
  if ((int)*v6 <= v63)
    v65 = v63;
  else
    v65 = *v6;
  do
  {
    v66 = __ldaxr(v6);
    if (v66 != v64)
    {
      __clrex();
      goto LABEL_46;
    }
  }
  while (__stlxr(v65, v6));
}

uint64_t physx::Dy::solveParallel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  int v12;
  int v13;
  unsigned int *v14;
  signed int v15;
  signed int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  void (*v25)(uint64_t, float);
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  int v36;
  float v51;
  __int16 v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float32x2_t v73;
  float v74;
  float32x2_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  BOOL v81;
  float v82;
  float v83;
  __float2 v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  uint64_t v95;
  uint64_t v96;
  float v97;
  float v98;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  int v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  unsigned int v116;
  float v117;
  float v118;
  float v119;
  unsigned int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v133;
  float v134;
  float v135;
  float v136;
  float32x2_t v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  __int16 *v167;
  char v168;
  int v169;
  __int16 v170;
  float v171;
  char v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  signed int v198;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  float v204;

  v4 = (unint64_t)physx::shdfnd::SListImpl::pop(*(physx::shdfnd::SListImpl **)(a1 + 400));
  if (!v4)
  {
    v5 = physx::shdfnd::Foundation::mInstance;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)physx::shdfnd::Foundation::mInstance + 40))(physx::shdfnd::Foundation::mInstance))
      v6 = "static const char *physx::shdfnd::ReflectionAllocator<physx::Dy::ThreadContext>::getName() [T = physx::Dy::ThreadContext]";
    else
      v6 = "<allocation names disabled>";
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)(v5 + 24) + 16))(v5 + 24, 12343, v6, "/Library/Caches/com.apple.xbs/Sources/REKit/ThirdParty/PhysX/physx/source/lowlevel/common/include/utils/PxcThreadCoherentCache.h", 82);
    if (v7)
    {
      v4 = (v7 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v4 - 8) = v4 - v7;
    }
    else
    {
      v4 = 0;
    }
    physx::Dy::ThreadContext::ThreadContext((physx::Dy::ThreadContext *)v4, *(physx::PxcNpMemBlockPool **)(a1 + 408));
  }
  *(_DWORD *)(v4 + 12168) = 0;
  v8 = *(_DWORD *)(a2 + 224);
  if ((*(_DWORD *)(v4 + 12172) & 0x7FFFFFFFu) < v8)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v4 + 12160, v8);
    v8 = *(_DWORD *)(a2 + 224);
  }
  *(_DWORD *)(v4 + 12168) = v8;
  *(_DWORD *)(v4 + 12184) = 0;
  if ((*(_DWORD *)(v4 + 12188) & 0x7FFFFFFFu) < v8)
  {
    physx::shdfnd::Array<physx::Cm::SpatialVectorF,physx::shdfnd::ReflectionAllocator<physx::Cm::SpatialVectorF>>::recreate(v4 + 12176, v8);
    v8 = *(_DWORD *)(a2 + 224);
  }
  *(_DWORD *)(v4 + 12184) = v8;
  v9 = *(_QWORD *)(a1 + 8 * *(unsigned int *)(a1 + 148) + 608);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 24))(v9, a2, *(_QWORD *)(v4 + 12160), *(_QWORD *)(v4 + 12176));
  if (*(_DWORD *)(a2 + 124) < v10)
  {
    v12 = v10;
    v13 = 30000;
    while (*(_DWORD *)(a2 + 124) < v12)
    {
      if (!--v13)
      {
        sched_yield();
        v13 = 10000;
      }
    }
  }
  v190 = (_QWORD *)v4;
  v14 = (unsigned int *)(a2 + 144);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 128, v14));
  v195 = *(_DWORD *)(a2 + 24);
  v16 = *(_DWORD *)(a2 + 40);
  v194 = *(_QWORD *)(a2 + 88);
  v200 = *(_QWORD *)(a2 + 104);
  v201 = *(_QWORD *)(a2 + 112);
  v17 = a1;
  v191 = a2;
  v198 = v16;
  v18 = 0;
  if (v15 >= v16)
  {
    v20 = 128;
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 32);
    v20 = 128;
    do
    {
      if (v16 - v15 >= 128)
        v21 = 128;
      else
        v21 = v16 - v15;
      if (v16 - v15 >= 1)
      {
        if (v21 <= 1)
          v22 = 1;
        else
          v22 = v21;
        v23 = v19 + 96 * v15;
        v15 += v22;
        v24 = v22;
        do
        {
          v25 = (void (*)(uint64_t, float))physx::Dy::ArticulationPImpl::sUpdateBodies[*(unsigned int *)(*(_QWORD *)v23 + 40)];
          if (v25)
          {
            v25(v23, *(float *)(v17 + 88));
            v17 = a1;
          }
          v23 += 96;
          --v24;
        }
        while (v24);
        v18 += v22;
        v16 = v198;
      }
      v20 -= v21;
      if (!v20)
      {
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 128, v14));
        v20 = 128;
      }
    }
    while (v15 < v16);
  }
  v26 = v15 - v16;
  v27 = v195;
  if (v15 - v16 < v195)
  {
    v192 = *(_QWORD *)(v191 + 16) + 112 * *(unsigned int *)(v191 + 28) + 220;
    v193 = *(_QWORD *)(v191 + 8);
    while (1)
    {
      v28 = v27 - v26 >= v20 ? v20 : v27 - v26;
      if (v28 >= 1)
        break;
      do
LABEL_144:
        v185 = __ldaxr(v14);
      while (__stlxr(v185 + 128, v14));
      v26 = v185 - v16;
      v20 = 128;
      if (v26 >= v27)
        goto LABEL_146;
    }
    v196 = v28;
    v197 = v18;
    v29 = 32 * v26;
    v30 = v193;
    v31 = (float *)(v192 + 112 * v26);
    v32 = v26 + 4;
    v33 = v194;
    v34 = (uint64_t *)(v201 + 8 * v26);
    _X23 = v200 + 256 + 8 * v26;
    while (1)
    {
      if (v32 >= v195 - 1)
        v36 = v195 - 1;
      else
        v36 = v32;
      _X8 = *(_QWORD *)(v200 + 8 * v36);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
      }
      _X8 = (float32x2_t *)(v30 + v29);
      __asm { PRFM            #0, [X8,#0x80] }
      _X19 = v33 + v29;
      __asm
      {
        PRFM            #0, [X19,#0x80]
        PRFM            #0, [X23]
      }
      _X9 = v201 + 8 * v36;
      __asm { PRFM            #0, [X9] }
      v51 = *(float *)(v17 + 88);
      v52 = *(_WORD *)v31;
      if (!*(_WORD *)v31)
        goto LABEL_58;
      if ((v52 & 1) != 0)
      {
        *(_DWORD *)_X19 = 0;
        *(_DWORD *)(v30 + v29) = 0;
        if ((v52 & 2) == 0)
        {
LABEL_53:
          if ((v52 & 4) == 0)
            goto LABEL_54;
          goto LABEL_106;
        }
      }
      else if ((v52 & 2) == 0)
      {
        goto LABEL_53;
      }
      *(_DWORD *)(v33 + v29 + 4) = 0;
      *(_DWORD *)(v30 + v29 + 4) = 0;
      if ((v52 & 4) == 0)
      {
LABEL_54:
        if ((v52 & 8) != 0)
          goto LABEL_107;
        goto LABEL_55;
      }
LABEL_106:
      *(_DWORD *)(v33 + v29 + 8) = 0;
      *(_DWORD *)(v30 + v29 + 8) = 0;
      if ((v52 & 8) != 0)
      {
LABEL_107:
        *(_DWORD *)(_X19 + 16) = 0;
        *(_DWORD *)(v30 + v29 + 16) = 0;
        if ((v52 & 0x10) == 0)
        {
LABEL_56:
          if ((v52 & 0x20) == 0)
            goto LABEL_58;
LABEL_57:
          *(_DWORD *)(v33 + v29 + 24) = 0;
          *(_DWORD *)(v30 + v29 + 24) = 0;
          goto LABEL_58;
        }
        goto LABEL_108;
      }
LABEL_55:
      if ((v52 & 0x10) == 0)
        goto LABEL_56;
LABEL_108:
      *(_DWORD *)(v33 + v29 + 20) = 0;
      *(_DWORD *)(v30 + v29 + 20) = 0;
      if ((v52 & 0x20) != 0)
        goto LABEL_57;
LABEL_58:
      v53 = *(v31 - 25);
      v54 = v53 + *(float *)(_X19 + 8);
      v55 = *(float *)(_X19 + 16);
      v56 = *(v31 - 17);
      v57 = *(v31 - 14);
      v58 = *(v31 - 11);
      v59 = *(v31 - 21);
      v60 = *(float32x2_t *)(v31 - 27);
      v61 = *(float32x2_t *)(v31 - 3);
      v62 = *(float32x2_t *)(v31 - 19);
      v63 = v55 * v62.f32[0];
      v64 = *(float32x2_t *)(v31 - 16);
      v65 = *(float32x2_t *)(v31 - 13);
      v66 = *(float32x2_t *)(_X19 + 20);
      v67 = (float)((float)((float)(v55 * v56) + (float)(v57 * v66.f32[0])) + vmuls_lane_f32(v58, v66, 1)) + v59;
      *(v31 - 1) = (float)(v51 * v54) + *(v31 - 1);
      *(float32x2_t *)&v11 = vadd_f32(v60, *(float32x2_t *)_X19);
      *(float32x2_t *)(v31 - 3) = vadd_f32(vmul_n_f32(*(float32x2_t *)&v11, v51), v61);
      *(float32x2_t *)(v31 - 27) = vadd_f32(v60, *_X8);
      *(v31 - 25) = v53 + _X8[1].f32[0];
      v68 = _X8[2].f32[0];
      v69 = _X8[2].f32[1];
      v70 = (float)(v56 * v68) + (float)(v57 * v69);
      v71 = _X8[3].f32[0];
      v72 = v70 + (float)(v58 * v71);
      v73 = vmul_f32(v66, (float32x2_t)vzip2_s32((int32x2_t)v64, (int32x2_t)v65));
      v74 = (float)(vmuls_lane_f32(v55, v62, 1) + v73.f32[0]) + v73.f32[1];
      v75 = *(float32x2_t *)(v31 - 23);
      v76 = (float)((float)(v63 + vmul_f32(v66, v64).f32[0]) + vmuls_lane_f32(v65.f32[0], v66, 1)) + v75.f32[0];
      v77 = v74 + v75.f32[1];
      v78 = (float)((float)(v77 * v77) + (float)(v76 * v76)) + (float)(v67 * v67);
      *(float32x2_t *)(v31 - 23) = vadd_f32(v75, vadd_f32(vadd_f32(vmul_n_f32(v62, v68), vmul_n_f32(v64, v69)), vmul_n_f32(v65, v71)));
      *(v31 - 21) = v59 + v72;
      v204 = v51;
      if (v78 != 0.0)
      {
        v79 = sqrtf(v78);
        v202 = v11;
        if (v79 > 10000000.0)
        {
          v80 = 0.0;
          v81 = v78 <= 0.0;
          v82 = 0.0;
          v83 = 0.0;
          if (!v81)
          {
            v80 = v76 * (float)(1.0 / v79);
            v82 = v77 * (float)(1.0 / v79);
            v83 = v67 * (float)(1.0 / v79);
          }
          v76 = v80 * 10000000.0;
          v77 = v82 * 10000000.0;
          v79 = 10000000.0;
          v67 = v83 * 10000000.0;
        }
        v84 = __sincosf_stret((float)(v51 * v79) * 0.5);
        *(float *)v85.i32 = v76 * (float)(v84.__sinval / v79);
        v86 = *(float32x4_t *)(v31 - 7);
        *(float *)&v85.i32[1] = v77 * (float)(v84.__sinval / v79);
        *(float *)&v85.i32[2] = v67 * (float)(v84.__sinval / v79);
        v87 = (float32x4_t)vextq_s8(vextq_s8(v85, v85, 0xCuLL), v85, 8uLL);
        *(float *)&v85.i32[3] = -*(float *)v85.i32;
        v88 = (float32x4_t)vzip1q_s32((int32x4_t)v86, (int32x4_t)v86);
        v88.i32[0] = *(_QWORD *)(v31 - 5);
        _Q2 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v86, 3), (int8x16_t)v86, 4uLL), (float32x4_t)v85), (float32x4_t)0, v86);
        v90 = vzip2q_s32((int32x4_t)v87, (int32x4_t)v86);
        v91 = vmulq_n_f32(v86, v84.__cosval);
        v86.i32[3] = v87.i32[1];
        v92 = vrev64q_s32((int32x4_t)v87);
        v87.f32[3] = -(float)(v77 * (float)(v84.__sinval / v79));
        _Q0 = vaddq_f32(v91, vmlsq_f32(vmlaq_f32(_Q2, v88, v87), (float32x4_t)vzip1q_s32(v92, v90), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v86, (int32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 0xCuLL)), (int32x4_t)v86)));
        _Q1 = vmulq_f32(_Q0, _Q0);
        _Q2.i32[0] = _Q0.i32[2];
        __asm { FMLA            S1, S2, V0.S[2] }
        _Q2.i32[0] = _Q0.i32[3];
        __asm { FMLA            S1, S2, V0.S[3] }
        _Q1.f32[0] = sqrtf(_Q1.f32[0]);
        *(float32x4_t *)(v31 - 7) = vdivq_f32(_Q0, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0));
        v17 = a1;
        v11 = v202;
      }
      *(_QWORD *)_X19 = v11;
      *(float *)(_X19 + 8) = v54;
      *(float *)(_X19 + 16) = v76;
      *(float *)(_X19 + 20) = v77;
      *(float *)(_X19 + 24) = v67;
      v95 = *v34;
      v96 = *(_QWORD *)(*v34 + 40);
      *(_OWORD *)v95 = *(_OWORD *)v96;
      *(_QWORD *)(v95 + 16) = *(_QWORD *)(v96 + 16);
      *(_DWORD *)(v95 + 24) = *(_DWORD *)(v96 + 24);
      v97 = *(v31 - 7);
      v98 = *(v31 - 6);
      *(float *)v96 = v97;
      *(float *)(v96 + 4) = v98;
      _Q6 = *(_OWORD *)(v31 - 5);
      *(_OWORD *)(v96 + 8) = _Q6;
      *(float *)(v96 + 24) = *(v31 - 1);
      v100 = *(v31 - 27);
      v101 = *(v31 - 26);
      *(float *)(v96 + 64) = v100;
      *(float *)(v96 + 68) = v101;
      v102 = *(v31 - 25);
      *(float *)(v96 + 72) = v102;
      v103 = *(v31 - 23);
      v104 = *(v31 - 22);
      *(float *)(v96 + 80) = v103;
      *(float *)(v96 + 84) = v104;
      v105 = *(v31 - 21);
      v106 = *(unsigned int *)(*(_QWORD *)(a3 + 272) + 4 * (*(_DWORD *)(v31 - 9) & 0x1FFFFFF));
      *(float *)(v96 + 88) = v105;
      v107 = *(_DWORD *)(*(_QWORD *)(a3 + 136) + 4 * v106);
      v108 = *(float *)(v96 + 140);
      if (!*(_BYTE *)(v17 + 100))
      {
        v118 = v204;
        if (*(_BYTE *)(v17 + 102))
        {
          v119 = 1.0;
          if (v107)
          {
            v120 = *(_DWORD *)(v96 + 152);
            if (v120 >= 2)
              v119 = 1.0 / (float)v120;
          }
          *(float *)(v95 + 76) = v119;
        }
        if (v108 < 0.2 || v108 < v204)
        {
          v121 = *(float *)(v96 + 112);
          v122 = *(float *)(v96 + 116);
          v123 = *(float *)(v96 + 120);
          if (v121 <= 0.0)
            v124 = 1.0;
          else
            v124 = 1.0 / v121;
          if (v122 <= 0.0)
            v125 = 1.0;
          else
            v125 = 1.0 / v122;
          if (v123 <= 0.0)
            v126 = 1.0;
          else
            v126 = 1.0 / v123;
          v127 = *(float *)(_X19 + 8);
          v128 = *(float *)(_X19 + 16) + *(float *)(_X19 + 16);
          v129 = *(float *)(_X19 + 20) + *(float *)(_X19 + 20);
          v130 = *(float *)(_X19 + 24) + *(float *)(_X19 + 24);
          _S19 = DWORD1(_Q6);
          __asm { FMLA            S20, S19, V6.S[1] }
          v133 = vmlas_n_f32((float)(v98 * v129) + (float)(v97 * v128), v130, *(float *)&_Q6);
          v134 = (float)(vmuls_lane_f32(-(float)((float)(v98 * v130) - (float)(*(float *)&_Q6 * v129)), *(float32x2_t *)&_Q6, 1)+ (float)(v128 * _S20))+ (float)(v97 * v133);
          v135 = (float)(vmuls_lane_f32(-(float)((float)(*(float *)&_Q6 * v128) - (float)(v97 * v130)), *(float32x2_t *)&_Q6, 1)+ (float)(v129 * _S20))+ (float)(v98 * v133);
          v136 = vmlas_n_f32(vmuls_lane_f32(-(float)((float)(v97 * v129) - (float)(v98 * v128)), *(float32x2_t *)&_Q6, 1)+ (float)(v130 * _S20), v133, *(float *)&_Q6);
          v137 = vadd_f32(*(float32x2_t *)_X19, *(float32x2_t *)(v95 + 48));
          *(float32x2_t *)(v95 + 48) = v137;
          v138 = v127 + *(float *)(v95 + 56);
          *(float *)(v95 + 56) = v138;
          v139 = v134 + *(float *)(v95 + 64);
          v140 = v135 + *(float *)(v95 + 68);
          *(float *)(v95 + 64) = v139;
          *(float *)(v95 + 68) = v140;
          v141 = v136 + *(float *)(v95 + 72);
          *(float *)(v95 + 72) = v141;
          v142 = *(float *)(v96 + 124);
          if (v142 == 0.0)
            v142 = 1.0;
          v143 = (float)((float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v137, v137).i32[1]), v137.f32[0], v137.f32[0])
                               + (float)(v138 * v138))
                       + (float)((float)((float)((float)(v125 * (float)(v140 * v140))
                                               + (float)((float)(v139 * v139) * v124))
                                       + (float)((float)(v141 * v141) * v126))
                               * v142))
               * 0.5;
          v144 = (float)(*(_DWORD *)(v96 + 148) + 1);
          v145 = *(float *)(v96 + 132) * v144;
          if (v143 >= v145)
          {
            *(_QWORD *)(v95 + 48) = 0;
            *(_DWORD *)(v95 + 56) = 0;
            v146 = 1.0;
            *(_QWORD *)(v95 + 64) = 0;
            *(_DWORD *)(v95 + 72) = 0;
            if (v145 != 0.0)
            {
              v147 = v143 / v145;
              if (v147 >= 2.0)
                v146 = 1.0;
              else
                v146 = v147 * 0.5;
            }
            v148 = (float)(v204 * (float)(v144 + -1.0)) + (float)(v146 * 0.4);
            *(float *)(v96 + 144) = v148;
            *(_WORD *)(v95 + 28) = 8 * (v108 == 0.0);
            goto LABEL_134;
          }
        }
        goto LABEL_133;
      }
      v109 = *(float *)(v96 + 112);
      v110 = *(float *)(v96 + 116);
      if (v109 <= 0.0)
        v111 = 1.0;
      else
        v111 = 1.0 / v109;
      if (v110 <= 0.0)
        v112 = 1.0;
      else
        v112 = 1.0 / v110;
      v113 = *(float *)(v96 + 120);
      v114 = *(float *)(v96 + 124);
      v81 = v113 <= 0.0;
      v115 = 1.0 / v113;
      if (v81)
        v115 = 1.0;
      if (v114 == 0.0)
        v114 = 1.0;
      if (v107)
      {
        v116 = *(_DWORD *)(v96 + 152);
        if (v116 >= 0xA)
          v116 = 10;
        v117 = (float)v116;
      }
      else
      {
        v117 = 0.0;
      }
      v149 = *(float *)_X19;
      v150 = *(float *)(_X19 + 4);
      v151 = *(float *)(_X19 + 8);
      v152 = *(float *)(_X19 + 16) + *(float *)(_X19 + 16);
      v153 = *(float *)(_X19 + 20) + *(float *)(_X19 + 20);
      v154 = *(float *)(_X19 + 24) + *(float *)(_X19 + 24);
      _S19 = DWORD1(_Q6);
      __asm { FMLA            S31, S19, V6.S[1] }
      v157 = vmlas_n_f32((float)(v98 * v153) + (float)(v97 * v152), v154, *(float *)&_Q6);
      v158 = (float)(vmuls_lane_f32(-(float)((float)(v98 * v154) - (float)(*(float *)&_Q6 * v153)), *(float32x2_t *)&_Q6, 1)+ (float)(v152 * _S31))+ (float)(v97 * v157);
      v159 = (float)(vmuls_lane_f32(-(float)((float)(*(float *)&_Q6 * v152) - (float)(v97 * v154)), *(float32x2_t *)&_Q6, 1)+ (float)(v153 * _S31))+ (float)(v98 * v157);
      v160 = vmlas_n_f32(vmuls_lane_f32(-(float)((float)(v97 * v153) - (float)(v98 * v152)), *(float32x2_t *)&_Q6, 1)+ (float)(v154 * _S31), v157, *(float *)&_Q6);
      v161 = (float)((float)((float)((float)(v150 * v150) + (float)(v149 * v149)) + (float)(v151 * v151))
                   + (float)(v114
                           * (float)((float)((float)(v112 * (float)(v159 * v159)) + (float)((float)(v158 * v158) * v111))
                                   + (float)((float)(v160 * v160) * v115))))
           * 0.5;
      v162 = v117 * *(float *)(v96 + 136);
      v118 = v204;
      v163 = fmaxf(*(float *)(v95 + 60) - v204, 0.0);
      *(float *)(v95 + 60) = v163;
      v164 = v204 + *(float *)(v95 + 76);
      if (v164 > 1.0)
        v164 = 1.0;
      if (v161 >= v162)
      {
        *(_DWORD *)(v95 + 60) = 1069547520;
        if (v107)
          v171 = v164;
        else
          v171 = 1.0;
        goto LABEL_127;
      }
      if (!v107)
      {
        v171 = 1.0;
LABEL_127:
        v167 = (__int16 *)(v95 + 28);
        v172 = *(_WORD *)(v95 + 28);
        *(float *)(v95 + 76) = v171;
        LOWORD(v169) = v172 & 1;
LABEL_128:
        v170 = 4 * v169;
        goto LABEL_129;
      }
      if (v117 > 1.0)
      {
        v165 = (float)(v204 * -0.5) + 1.0;
        *(float *)(v96 + 64) = v165 * v100;
        *(float *)(v96 + 68) = v165 * v101;
        *(float *)(v96 + 72) = v165 * v102;
        *(float *)(v96 + 80) = v165 * v103;
        *(float *)(v96 + 84) = v165 * v104;
        *(float *)(v96 + 88) = v165 * v105;
        v164 = (float)(v164 * 0.75) + 0.025;
      }
      v166 = *(float *)(v96 + 136);
      v167 = (__int16 *)(v95 + 28);
      v168 = *(_WORD *)(v95 + 28);
      *(float *)(v95 + 76) = v164;
      v169 = v168 & 1;
      if (v163 != 0.0 || v161 >= (float)(v166 * 0.25))
        goto LABEL_128;
      if (v169)
        v170 = 1;
      else
        v170 = 3;
      *(_OWORD *)v96 = *(_OWORD *)v95;
      *(_QWORD *)(v96 + 16) = *(_QWORD *)(v95 + 16);
      *(_DWORD *)(v96 + 24) = *(_DWORD *)(v95 + 24);
LABEL_129:
      *v167 = v170;
      if (v108 < 0.2 || v108 < v204)
      {
        v173 = v149 + *(float *)(v95 + 48);
        v174 = v150 + *(float *)(v95 + 52);
        v175 = v151 + *(float *)(v95 + 56);
        v176 = *(float *)(v95 + 68);
        v177 = v158 + *(float *)(v95 + 64);
        *(float *)(v95 + 48) = v173;
        *(float *)(v95 + 52) = v174;
        *(float *)(v95 + 56) = v175;
        v178 = v159 + v176;
        *(float *)(v95 + 64) = v177;
        *(float *)(v95 + 68) = v178;
        v179 = v160 + *(float *)(v95 + 72);
        *(float *)(v95 + 72) = v179;
        v180 = *(float *)(v96 + 132);
        if (v161 >= v180)
        {
          v181 = (float)((float)((float)((float)(v174 * v174) + (float)(v173 * v173)) + (float)(v175 * v175))
                       + (float)(v114
                               * (float)((float)((float)(v112 * (float)(v178 * v178))
                                               + (float)((float)(v177 * v177) * v111))
                                       + (float)((float)(v179 * v179) * v115))))
               * 0.5;
          v182 = (float)(*(_DWORD *)(v96 + 148) + 1);
          if (v181 >= (float)(v180 * v182))
          {
            *(_QWORD *)(v95 + 64) = 0;
            *(_DWORD *)(v95 + 72) = 0;
            v183 = 1.0;
            *(_QWORD *)(v95 + 48) = 0;
            *(_DWORD *)(v95 + 56) = 0;
            if (v180 != 0.0)
            {
              v184 = v181 / (float)(v180 * v182);
              if (v184 >= 2.0)
                v183 = 1.0;
              else
                v183 = v184 * 0.5;
            }
            v148 = (float)(v204 * (float)(v182 + -1.0)) + (float)(v183 * 0.4);
            *(float *)(v96 + 144) = v148;
            if (v108 == 0.0)
              *v167 = v170 | 8;
            goto LABEL_134;
          }
        }
      }
LABEL_133:
      v148 = fmaxf(v108 - v118, 0.0);
      *(float *)(v96 + 144) = v148;
LABEL_134:
      if (v148 == 0.0)
      {
        *(_WORD *)(v95 + 28) |= 0x10u;
        *(_QWORD *)(v95 + 48) = 0;
        *(_DWORD *)(v95 + 56) = 0;
        *(_QWORD *)(v95 + 64) = 0;
        *(_DWORD *)(v95 + 72) = 0;
      }
      v31 += 28;
      ++v34;
      v30 += 32;
      v33 += 32;
      ++v32;
      _X23 += 8;
      if (!--v28)
      {
        v18 = v197 + v196;
        v27 = v195;
        v16 = v198;
        goto LABEL_144;
      }
    }
  }
LABEL_146:
  __dmb(0xBu);
  v186 = (unsigned int *)(v191 + 148);
  do
    v187 = __ldaxr(v186);
  while (__stlxr(v187 + v18, v186));
  v188 = *(_QWORD *)(v17 + 400);
  pthread_mutex_lock((pthread_mutex_t *)(v188 + 8));
  *v190 = *(_QWORD *)v188;
  *(_QWORD *)v188 = v190;
  return pthread_mutex_unlock((pthread_mutex_t *)(v188 + 8));
}

uint64_t physx::Dy::BlockAllocator::reserveConstraintData(physx::Dy::BlockAllocator *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  **((_DWORD **)this + 4) += a2;
  v2 = *((_QWORD *)this + 2);
  v3 = (a2 + 15) & 0xFFFFFFF0;
  if (v3 > 0x4000)
    return physx::PxcNpMemBlockPool::acquireExceptionalConstraintMemory(*(pthread_mutex_t ***)v2, (a2 + 15) & 0xFFFFFFF0);
  v5 = *(_QWORD *)(v2 + 8);
  if (v5 && (v6 = *(unsigned int *)(v2 + 16), v6 + v3 <= 0x4000))
  {
    result = v5 + v6;
    *(_DWORD *)(v2 + 16) = v6 + v3;
  }
  else
  {
    result = physx::PxcNpMemBlockPool::acquire(*(_QWORD *)v2, *((_QWORD *)this + 1), (_DWORD *)(*(_QWORD *)v2 + 244), (int *)(*(_QWORD *)v2 + 240), 1);
    *(_QWORD *)(v2 + 8) = result;
    *(_DWORD *)(v2 + 16) = v3;
  }
  return result;
}

uint64_t physx::Dy::BlockAllocator::reserveFrictionData(physx::Dy::BlockAllocator *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  if (a2 > 0x4000)
    return -1;
  v4 = *((_QWORD *)this + 3);
  result = *(_QWORD *)(v4 + 8);
  if (!result || (v5 = *(_DWORD *)(v4 + 16), v5 + a2 > 0x4000))
  {
    result = physx::PxcNpMemBlockPool::acquire(*(_QWORD *)v4, *(_QWORD *)v4 + 16 * *(unsigned int *)(*(_QWORD *)v4 + 180) + 56, 0, 0, 0);
    *(_QWORD *)(v4 + 8) = result;
    *(_DWORD *)(v4 + 16) = 0;
    if (!result)
      return result;
    v5 = 0;
  }
  result += v5;
  *(_DWORD *)(v4 + 16) = v5 + a2;
  return result;
}

uint64_t physx::Dy::PxsSolverCreateFinalizeConstraintsTask::runInternal(physx::Dy::PxsSolverCreateFinalizeConstraintsTask *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (**v56)(physx::Dy::PxsCreateFinalizeContactsTask *__hidden);
  int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (**v71)(physx::Dy::PxsCreateArticConstraintsTask *__hidden);
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;

  v2 = **((_QWORD **)this + 6);
  v3 = *(_DWORD *)(v2 + 11896);
  v4 = *(_DWORD *)(v2 + 12024);
  v5 = *(_DWORD *)(v2 + 11908);
  v6 = v5 + v3;
  v74 = v3;
  if (v3)
  {
    v3 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *(int **)(v2 + 11920);
    v11 = *v10;
    if (*((_BYTE *)this + 72))
      v12 = 1;
    else
      v12 = 4;
    while (1)
    {
      v13 = v11 - v9 >= v12 ? v12 : v11 - v9;
      if (v13)
        break;
      LOWORD(v19) = 0;
LABEL_16:
      v9 += (unsigned __int16)v19;
      if (v11 != v74 && v11 == v9)
      {
        v10[v7] = v8;
        v8 = 0;
        v11 = v10[++v7];
      }
      if (v9 >= v74)
      {
        v10[v7] = v8;
        goto LABEL_42;
      }
    }
    v14 = *(_QWORD *)(v2 + 12032);
    v15 = v14 + 48 * v9;
    v16 = *(__int16 *)(v15 + 16);
    v17 = *(unsigned __int16 *)(v15 + 18);
    if (v16 != -1 || v17 != 0xFFFF)
    {
      LOWORD(v19) = 1;
LABEL_14:
      v20 = *(_QWORD *)(v2 + 12040);
      v21 = v3;
      v22 = (unsigned int *)(v20 + 8 * v3++);
      *v22 = v9;
      *(_WORD *)(v20 + 8 * v21 + 4) = v19;
      ++v8;
      goto LABEL_16;
    }
    v23 = *(unsigned __int16 *)(v14 + 48 * v9 + 30);
    LOWORD(v19) = 1;
    if (v23 == 1)
    {
      if (v7 == -1 || v13 < 2)
        goto LABEL_14;
    }
    else
    {
      if (v13 < 2)
        goto LABEL_14;
      if (v23 != 2 || v7 == -1)
        goto LABEL_14;
    }
    if ((unsigned __int16)v13 <= 2u)
      v25 = 2;
    else
      v25 = (unsigned __int16)v13;
    v19 = 1;
    while (v23 == *(unsigned __int16 *)(v14 + 48 * (v9 + v19) + 30))
    {
      v26 = v14 + 48 * (v9 + v19);
      v27 = *(__int16 *)(v26 + 16);
      v28 = *(unsigned __int16 *)(v26 + 18);
      if (v27 != -1 || v28 != 0xFFFF)
        break;
      if (v25 == ++v19)
      {
        LOWORD(v19) = v13;
        goto LABEL_14;
      }
    }
    goto LABEL_14;
  }
LABEL_42:
  *(_DWORD *)(v2 + 11928) = *(_DWORD *)(v2 + 12232);
  v30 = v3;
  if (v4 != v6)
  {
    v31 = *(_QWORD *)(v2 + 12040);
    v32 = v4 - v5;
    v33 = v74;
    v34 = v3;
    do
    {
      v30 = v34 + 1;
      v35 = v31 + 8 * v34;
      *(_DWORD *)v35 = v33;
      *(_WORD *)(v35 + 4) = 1;
      ++v33;
      v34 = v30;
    }
    while (v32 != v33);
  }
  *(_DWORD *)(v2 + 12192) = v3;
  *(_DWORD *)(v2 + 12196) = v30 - v3;
  *(_DWORD *)(v2 + 12048) = v30;
  v36 = v2;
  v37 = *(_QWORD *)(v2 + 12032);
  v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (v30 + 63 >= 0x40)
  {
    v40 = 0;
    v41 = (v30 + 63) >> 6;
    LODWORD(v42) = (v30 + 15) >> 4;
    if (v41 >= result)
      v42 = v41;
    else
      v42 = v42;
    v43 = v42;
    v44 = (v30 + v42 - 1) / v42;
    v72 = v42;
    do
    {
      v73 = v43;
      if (v43 >= 0x40uLL)
        v45 = 64;
      else
        v45 = v43;
      if ((v42 - v40) >= 0x40)
        v46 = 64;
      else
        v46 = v42 - v40;
      result = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((_QWORD *)this + 5) + 744), 88 * v46, 0x10u);
      if (v46)
      {
        v47 = result;
        v48 = 0;
        do
        {
          v49 = v44 * (v48 + v40);
          v50 = v49 + v44;
          if (v49 + v44 >= v30)
            v50 = v30;
          v51 = *((_QWORD *)this + 5);
          v52 = *(_QWORD *)(v51 + 560);
          v53 = *((_QWORD *)this + 8);
          v54 = *(_QWORD *)(v51 + 768);
          *(_QWORD *)(v47 + 16) = 0;
          *(_QWORD *)(v47 + 24) = 0;
          *(_DWORD *)(v47 + 32) = 0;
          *(_QWORD *)v47 = &off_24ED8D478;
          *(_QWORD *)(v47 + 8) = v54;
          *(_DWORD *)(v47 + 36) = v74;
          *(_QWORD *)(v47 + 40) = v37;
          *(_QWORD *)(v47 + 48) = v52;
          *(_QWORD *)(v47 + 56) = v36;
          *(_QWORD *)(v47 + 64) = v51;
          *(_QWORD *)(v47 + 72) = v53;
          *(_DWORD *)(v47 + 80) = v49;
          *(_DWORD *)(v47 + 84) = v50;
          v55 = *((_QWORD *)this + 3);
          *(_DWORD *)(v47 + 32) = 1;
          *(_QWORD *)(v47 + 24) = v55;
          if (v55)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v55 + 32))(v55);
            *(_QWORD *)(v47 + 16) = *(_QWORD *)(*(_QWORD *)(v47 + 24) + 16);
            v56 = *(void (***)(physx::Dy::PxsCreateFinalizeContactsTask *__hidden))v47;
          }
          else
          {
            v56 = &off_24ED8D478;
          }
          result = ((uint64_t (*)(uint64_t))v56[5])(v47);
          ++v48;
          v47 += 88;
          --v45;
        }
        while (v45);
      }
      v40 += 64;
      v43 = v73 - 64;
      LODWORD(v42) = v72;
    }
    while (v40 < v72);
  }
  v57 = *(_DWORD *)(*((_QWORD *)this + 6) + 12);
  v58 = v57 & 0x7FFFFFFF;
  if ((v57 & 0x7FFFFFFF) != 0)
  {
    v59 = 0;
    v60 = 0;
    v61 = v57 & 0x7FFFFFFF;
    do
    {
      v62 = v61 - 32;
      if (v61 >= 0x20)
        v63 = 32;
      else
        v63 = v61;
      v64 = physx::Cm::FlushPool::allocate(*(pthread_mutex_t ***)(*((_QWORD *)this + 5) + 744), 88, 0x10u);
      v65 = *(_QWORD *)(v36 + 11984) + v59;
      v66 = *((_QWORD *)this + 5);
      v67 = *(_QWORD *)(v66 + 560);
      v68 = *((_QWORD *)this + 8);
      v69 = *(_QWORD *)(v66 + 768);
      *(_QWORD *)(v64 + 16) = 0;
      *(_QWORD *)(v64 + 24) = 0;
      *(_DWORD *)(v64 + 32) = 0;
      *(_QWORD *)v64 = &off_24ED8D4E8;
      *(_QWORD *)(v64 + 8) = v69;
      *(_QWORD *)(v64 + 40) = v65;
      *(_DWORD *)(v64 + 48) = v63;
      *(_QWORD *)(v64 + 56) = v67;
      *(_QWORD *)(v64 + 64) = v36;
      *(_QWORD *)(v64 + 72) = v66;
      *(_QWORD *)(v64 + 80) = v68;
      v70 = *((_QWORD *)this + 3);
      *(_DWORD *)(v64 + 32) = 1;
      *(_QWORD *)(v64 + 24) = v70;
      if (v70)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 32))(v70);
        *(_QWORD *)(v64 + 16) = *(_QWORD *)(*(_QWORD *)(v64 + 24) + 16);
        v71 = *(void (***)(physx::Dy::PxsCreateArticConstraintsTask *__hidden))v64;
      }
      else
      {
        v71 = &off_24ED8D4E8;
      }
      result = ((uint64_t (*)(uint64_t))v71[5])(v64);
      v60 += 32;
      v59 += 256;
      v61 = v62;
    }
    while (v60 < v58);
  }
  return result;
}

uint64_t physx::Dy::createContactPatches(uint64_t a1, uint64_t a2, unsigned int a3, float a4)
{
  unsigned int v4;
  uint64_t v6;
  int v7;
  char v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  float v21;
  float v22;
  float v23;
  float v24;
  char v25;

  v4 = *(_DWORD *)(a1 + 7684);
  if (v4 == 64)
    return 0;
  if (a3)
  {
    v6 = a1 + 44 * v4++;
    v7 = *(_DWORD *)(a2 + 44);
    v8 = *(_BYTE *)(a2 + 48);
    *(_DWORD *)v6 = 0;
    *(_BYTE *)(v6 + 5) = 1;
    *(_BYTE *)(v6 + 4) = v8;
    *(_DWORD *)(v6 + 8) = v7;
    *(_QWORD *)(v6 + 12) = *(_QWORD *)(a2 + 56);
    v10 = *(float *)(a2 + 16);
    v9 = *(float *)(a2 + 20);
    v11 = *(float *)(a2 + 24);
    if (a3 == 1)
    {
      v12 = *(float *)(a2 + 24);
      v13 = *(float *)(a2 + 20);
      v14 = *(float *)(a2 + 16);
    }
    else
    {
      v15 = 0;
      v16 = 1;
      do
      {
        v17 = (float *)(a2 + ((unint64_t)v15 << 6));
        v18 = v16 + 1;
        v19 = a2 + 44 + (v16 << 6);
        v20 = 1;
        v12 = v11;
        v13 = v9;
        v14 = v10;
        while (1)
        {
          v21 = *(float *)v19;
          if (*(float *)v19 != v17[11]
            || *(float *)(v19 + 12) != v17[14]
            || *(float *)(v19 + 16) != v17[15]
            || (float)((float)((float)(*(float *)(v19 - 40) * v17[1]) + (float)(*(float *)(v19 - 44) * *v17))
                     + (float)(*(float *)(v19 - 36) * v17[2])) < a4)
          {
            break;
          }
          v22 = *(float *)(v19 - 28);
          v23 = *(float *)(v19 - 24);
          if (v14 >= v22)
            v14 = *(float *)(v19 - 28);
          if (v13 >= v23)
            v13 = *(float *)(v19 - 24);
          v24 = *(float *)(v19 - 20);
          if (v12 >= v24)
            v12 = *(float *)(v19 - 20);
          if (v10 <= v22)
            v10 = *(float *)(v19 - 28);
          if (v9 <= v23)
            v9 = *(float *)(v19 - 24);
          if (v11 <= v24)
            v11 = *(float *)(v19 - 20);
          ++v20;
          ++v18;
          v19 += 64;
          if (v18 - a3 == 1)
          {
            if (a3 != v16)
              *(_BYTE *)(v6 + 5) = a3 + 1 - v16;
            goto LABEL_31;
          }
        }
        if (v4 == 64)
          return 0;
        v15 = v18 - 1;
        *(_BYTE *)(v6 + 5) = v20;
        *(float *)(v6 + 20) = v14;
        *(float *)(v6 + 24) = v13;
        *(float *)(v6 + 28) = v12;
        *(float *)(v6 + 32) = v10;
        *(float *)(v6 + 36) = v9;
        *(float *)(v6 + 40) = v11;
        v6 = a1 + 44 * v4++;
        v25 = *(_BYTE *)(v19 + 4);
        *(_WORD *)v6 = v18 - 1;
        *(_BYTE *)(v6 + 5) = 1;
        *(_WORD *)(v6 + 2) = 0;
        *(_BYTE *)(v6 + 4) = v25;
        *(float *)(v6 + 8) = v21;
        *(_QWORD *)(v6 + 12) = *(_QWORD *)(v19 + 12);
        v10 = *(float *)(v19 - 28);
        v9 = *(float *)(v19 - 24);
        v16 = v18;
        v11 = *(float *)(v19 - 20);
        v12 = v11;
        v13 = v9;
        v14 = v10;
      }
      while (v18 != a3);
    }
LABEL_31:
    *(float *)(v6 + 20) = v14;
    *(float *)(v6 + 24) = v13;
    *(float *)(v6 + 28) = v12;
    *(float *)(v6 + 32) = v10;
    *(float *)(v6 + 36) = v9;
    *(float *)(v6 + 40) = v11;
  }
  *(_DWORD *)(a1 + 7684) = v4;
  return 1;
}

uint64_t physx::Dy::correlatePatches(uint64_t a1, uint64_t a2, float *a3, float *a4, unsigned int a5, unsigned int a6, float a7)
{
  unsigned int v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  unsigned int v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  int v23;
  char v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;

  v7 = *(_DWORD *)(a1 + 7688);
  v8 = *(unsigned int *)(a1 + 7684);
  if (v8 > a5)
  {
    v9 = 0;
    v10 = a5;
    while (1)
    {
      v11 = (float *)(a2 + ((unint64_t)*(unsigned __int16 *)(a1 + 44 * v10) << 6));
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      v15 = a6;
      if (v7 > a6)
      {
        v16 = (float *)(a1 + 44 * v10);
        v17 = v16 + 4;
        v18 = v16 + 2;
        v19 = v16 + 3;
        v20 = (float *)(a1 + 104 * a6 + 2828);
        v21 = (float *)(a1 + 12 * a6 + 6152);
        v15 = a6;
        while ((float)((float)((float)(v13 * *(v21 - 1)) + (float)(v12 * *(v21 - 2))) + (float)(v14 * *v21)) < a7
             || *(v20 - 2) != *v17
             || *(v20 - 1) != *v18
             || *v20 != *v19)
        {
          ++v15;
          v21 += 3;
          v20 += 26;
          if (v7 == v15)
            goto LABEL_12;
        }
      }
      if (v15 != v7)
        break;
LABEL_12:
      if (!(v9 & 1 | (v7 == 32)))
      {
        v9 = 0;
        v22 = a1 + 104 * v7;
        v46 = a1 + 44 * v10;
        v23 = *(_DWORD *)(v46 + 16);
        v24 = *(_BYTE *)(v46 + 4);
        v26 = a3[2];
        v25 = a3[3];
        v27 = (float)(v25 * v25) + -0.5;
        v28 = *a3;
        v29 = a3[1];
        v30 = (float)((float)((float)(v13 + v13) * v29) + (float)(*a3 * (float)(v12 + v12)))
            + (float)(v26 * (float)(v14 + v14));
        v31 = (float)((float)((float)(v12 + v12) * v27)
                    - (float)((float)((float)(v29 * (float)(v14 + v14)) - (float)(v26 * (float)(v13 + v13))) * v25))
            + (float)(*a3 * v30);
        v32 = (float)((float)((float)(v13 + v13) * v27)
                    - (float)((float)((float)(v26 * (float)(v12 + v12)) - (float)(*a3 * (float)(v14 + v14))) * v25))
            + (float)(v29 * v30);
        v33 = (float)((float)((float)(v14 + v14) * v27)
                    - (float)((float)((float)(*a3 * (float)(v13 + v13)) - (float)(v29 * (float)(v12 + v12))) * v25))
            + (float)(v26 * v30);
        *(float *)(v22 + 2832) = v31;
        *(float *)(v22 + 2836) = v32;
        *(float *)(v22 + 2840) = v33;
        v35 = a4[2];
        v34 = a4[3];
        v36 = (float)(v34 * v34) + -0.5;
        v37 = *a4;
        v38 = a4[1];
        v39 = (float)((float)((float)(v13 + v13) * v38) + (float)(*a4 * (float)(v12 + v12)))
            + (float)(v35 * (float)(v14 + v14));
        v40 = (float)((float)((float)(v13 + v13) * v36)
                    - (float)((float)((float)(v35 * (float)(v12 + v12)) - (float)(*a4 * (float)(v14 + v14))) * v34))
            + (float)(v38 * v39);
        v41 = (float)((float)((float)(v14 + v14) * v36)
                    - (float)((float)((float)(*a4 * (float)(v13 + v13)) - (float)(v38 * (float)(v12 + v12))) * v34))
            + (float)(v35 * v39);
        *(float *)(v22 + 2844) = (float)((float)((float)(v12 + v12) * v36)
                                       - (float)((float)((float)(v38 * (float)(v14 + v14))
                                                       - (float)(v35 * (float)(v13 + v13)))
                                               * v34))
                               + (float)(*a4 * v39);
        *(float *)(v22 + 2848) = v40;
        *(float *)(v22 + 2852) = v41;
        *(float *)(v22 + 2904) = (float)((float)((float)(v25 * v37) - (float)(v28 * v34)) - (float)(v29 * v35))
                               + (float)(v38 * v26);
        *(float *)(v22 + 2908) = (float)((float)((float)(v25 * v38) - (float)(v29 * v34)) - (float)(v26 * v37))
                               + (float)(v35 * v28);
        *(float *)(v22 + 2912) = (float)((float)((float)(v25 * v35) - (float)(v26 * v34)) - (float)(v28 * v38))
                               + (float)(v37 * v29);
        *(float *)(v22 + 2916) = (float)((float)((float)(v28 * v37) + (float)(v25 * v34)) + (float)(v29 * v38))
                               + (float)(v26 * v35);
        *(_WORD *)(v22 + 2818) = 0;
        *(_BYTE *)(v22 + 2816) = 0;
        *(_QWORD *)(v22 + 2824) = *(_QWORD *)(v46 + 8);
        *(_DWORD *)(v22 + 2820) = v23;
        *(_BYTE *)(v22 + 2817) = v24;
        v42 = (float *)(a1 + 12 * v7);
        v42[1536] = v12;
        v42[1537] = v13;
        v42[1538] = v14;
        v43 = a1 + 4 * v7;
        *(_DWORD *)(v43 + 7296) = *(unsigned __int8 *)(v46 + 5);
        v44 = (_QWORD *)(a1 + 24 * v7);
        v44[816] = *(_QWORD *)(v46 + 20);
        v44[817] = *(_QWORD *)(v46 + 28);
        v45 = v7;
        v44[818] = *(_QWORD *)(v46 + 36);
        LOWORD(v46) = -1;
        *(_WORD *)(v43 + 7556) = -1;
        ++v7;
        *(_WORD *)(v43 + 7558) = -1;
LABEL_20:
        *(_WORD *)(a1 + 44 * v10 + 2) = v46;
        *(_DWORD *)(a1 + 4 * v45 + 7424) = v10;
        v8 = *(unsigned int *)(a1 + 7684);
        goto LABEL_21;
      }
      v9 = 1;
LABEL_21:
      if (++v10 >= v8)
        goto LABEL_24;
    }
    v45 = v15;
    v47 = a1 + 24 * v15;
    v48 = a1 + 44 * v10;
    v49 = *(float *)(v47 + 6536);
    if (v49 >= *(float *)(v48 + 28))
      v49 = *(float *)(v48 + 28);
    *(int8x8_t *)(v47 + 6528) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v48 + 20), *(float32x2_t *)(v47 + 6528)), *(int8x8_t *)(v47 + 6528), *(int8x8_t *)(v48 + 20));
    *(float *)(v47 + 6536) = v49;
    v50 = *(float *)(v47 + 6548);
    if (v50 <= *(float *)(v48 + 40))
      v50 = *(float *)(v48 + 40);
    *(int8x8_t *)(v47 + 6540) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v47 + 6540), *(float32x2_t *)(v48 + 32)), *(int8x8_t *)(v47 + 6540), *(int8x8_t *)(v48 + 32));
    *(float *)(v47 + 6548) = v50;
    v46 = a1 + 4 * v15;
    *(_DWORD *)(v46 + 7296) += *(unsigned __int8 *)(v48 + 5);
    LODWORD(v46) = *(_DWORD *)(v46 + 7424);
    goto LABEL_20;
  }
  v9 = 0;
LABEL_24:
  *(_DWORD *)(a1 + 7688) = v7;
  return v9 & 1;
}

uint64_t physx::Dy::growPatches(uint64_t result, uint64_t a2, float *a3, float *a4, unsigned int a5, float a6, float a7)
{
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  _WORD *v26;
  int v27;
  unsigned int v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  unsigned int v46;
  uint64_t v47;
  _WORD *v48;
  _WORD *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  unsigned __int16 *v56;
  int v57;
  uint64_t i;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float *v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int *)(result + 7688);
  if (v8 <= a5)
    return result;
  v10 = a3[2];
  v9 = a3[3];
  v11 = (float)(v9 * v9) + -0.5;
  v12 = *a3;
  v13 = a3[1];
  v14 = -v10;
  v15 = -*a3;
  v16 = -v13;
  v17 = a6 * a6;
  v19 = a4[2];
  v18 = a4[3];
  v20 = (float)(v18 * v18) + -0.5;
  v21 = *a4;
  v22 = a4[1];
  v23 = a5;
  v24 = -*a4;
  v25 = result + 104 * a5 + 2856;
  do
  {
    v26 = (_WORD *)(result + 104 * v23 + 2818);
    v27 = (unsigned __int16)*v26;
    if (v27 == 2 || (v28 = *(_DWORD *)(result + 4 * v23 + 7424), v28 == 0xFFFF))
    {
      if (!*(_DWORD *)(result + 4 * v23 + 7296))
        goto LABEL_36;
      v29 = (float *)(result + 24 * v23);
      v30 = v29[1635] - v29[1632];
      v31 = v29[1636] - v29[1633];
      v32 = v29[1637] - v29[1634];
      v7 = (float)((float)(v31 * v31) + (float)(v30 * v30)) + (float)(v32 * v32);
      v33 = (float *)(result + 104 * v23);
      v34 = v33[714] - v33[717];
      v35 = v33[715] - v33[718];
      v36 = v33[716] - v33[719];
      if ((float)((float)((float)((float)(v35 * v35) + (float)(v34 * v34)) + (float)(v36 * v36)) * 4.0) >= v7)
        goto LABEL_36;
      *v26 = 0;
      v28 = *(_DWORD *)(result + 4 * v23 + 7424);
      if (v28 == 0xFFFF)
        goto LABEL_34;
LABEL_11:
      v46 = 0;
      goto LABEL_12;
    }
    if (v27 != 1)
      goto LABEL_11;
    v37 = (float *)(result + 104 * v23);
    v38 = v37[714] + v37[714];
    v39 = v37[715] + v37[715];
    v40 = v37[716] + v37[716];
    v41 = (float)((float)(v13 * v39) + (float)(v12 * v38)) + (float)(v10 * v40);
    v42 = (float)((float)(v9 * (float)((float)(v39 * v14) + (float)(v13 * v40))) + (float)(v38 * v11))
        + (float)(v12 * v41);
    v43 = (float)((float)(v9 * (float)((float)(v40 * v15) + (float)(v10 * v38))) + (float)(v39 * v11))
        + (float)(v13 * v41);
    v44 = (float)((float)(v9 * (float)((float)(v38 * v16) + (float)(v12 * v39))) + (float)(v40 * v11))
        + (float)(v10 * v41);
    v7 = a3[4] + v42;
    v45 = a3[6] + v44;
    v92 = a3[5] + v43;
    v93 = v45;
    v46 = 1;
LABEL_12:
    v47 = result + 4 * v23;
    v48 = (_WORD *)(v47 + 7558);
    v49 = (_WORD *)(v47 + 7556);
    v51 = v92;
    v50 = v93;
    v52 = v94;
    v53 = v95;
    v54 = 0.0;
    v55 = v96;
    do
    {
      v56 = (unsigned __int16 *)(result + 44 * v28);
      v57 = *((unsigned __int8 *)v56 + 5);
      if (*((_BYTE *)v56 + 5))
      {
        for (i = 0; v57 != (_DWORD)i; ++i)
        {
          v59 = *v56;
          v60 = i + v59;
          v61 = a2 + ((i + v59) << 6);
          if (*(float *)(v61 + 12) < a7)
          {
            v62 = (float *)(v61 + 16);
            if (v46 != 1)
            {
              if (v46)
              {
                v68 = *v62;
                v69 = a2 + (v60 << 6);
                v70 = *(float *)(v69 + 20);
                v71 = *(float *)(v69 + 24);
                v72 = (float)((float)((float)(v70 - v51) * (float)(v70 - v51))
                            + (float)((float)(*v62 - v7) * (float)(*v62 - v7)))
                    + (float)((float)(v71 - v50) * (float)(v71 - v50));
                v73 = (float)((float)((float)(v70 - v53) * (float)(v70 - v53))
                            + (float)((float)(*v62 - v52) * (float)(*v62 - v52)))
                    + (float)((float)(v71 - v55) * (float)(v71 - v55));
                if (v72 <= v73)
                {
                  if (v73 > v54)
                  {
                    *v49 = v59 + i;
                    v50 = v71;
                    v51 = v70;
                    v7 = v68;
                    v54 = v73;
                  }
                }
                else if (v72 > v54)
                {
                  *v48 = v59 + i;
                  v55 = v71;
                  v53 = v70;
                  v52 = v68;
                  v54 = v72;
                }
                continue;
              }
              *v49 = v60;
              v7 = *v62;
              v63 = a2 + (v60 << 6);
              v51 = *(float *)(v63 + 20);
              v50 = *(float *)(v63 + 24);
LABEL_21:
              v46 = 1;
              continue;
            }
            v64 = *v62;
            v65 = a2 + (v60 << 6);
            v66 = *(float *)(v65 + 20);
            v67 = *(float *)(v65 + 24);
            v54 = (float)((float)((float)(v66 - v51) * (float)(v66 - v51))
                        + (float)((float)(*v62 - v7) * (float)(*v62 - v7)))
                + (float)((float)(v67 - v50) * (float)(v67 - v50));
            if (v54 <= v17)
              goto LABEL_21;
            *v48 = v59 + i;
            v46 = 2;
            v55 = v67;
            v53 = v66;
            v52 = v64;
          }
        }
      }
      v28 = *(unsigned __int16 *)(result + 44 * v28 + 2);
    }
    while (v28 != 0xFFFF);
    v93 = v50;
    v94 = v52;
    v95 = v53;
    v96 = v55;
    v74 = (unsigned __int16)*v26;
    v91 = v7;
    v92 = v51;
    if (v74 < v46)
    {
      v75 = v46 - v74;
      v76 = 3 * v74;
      v77 = &v92;
      v78 = v25;
      do
      {
        v79 = v77[v76 - 1];
        v80 = v77[v76];
        v81 = v77[v76 + 1];
        v82 = (float)(v79 - a3[4]) + (float)(v79 - a3[4]);
        v83 = (float)(v80 - a3[5]) + (float)(v80 - a3[5]);
        v84 = (float)(v81 - a3[6]) + (float)(v81 - a3[6]);
        v85 = (float)((float)(v13 * v83) + (float)(v12 * v82)) + (float)(v10 * v84);
        v86 = (float *)(v78 + v76 * 4);
        *v86 = (float)((float)(v82 * v11) - (float)((float)((float)(v83 * v14) + (float)(v13 * v84)) * v9))
             + (float)(v12 * v85);
        v86[1] = (float)((float)(v83 * v11) - (float)((float)((float)(v84 * v15) + (float)(v10 * v82)) * v9))
               + (float)(v13 * v85);
        v86[2] = (float)((float)(v84 * v11) - (float)((float)((float)(v82 * v16) + (float)(v12 * v83)) * v9))
               + (float)(v10 * v85);
        v87 = (float)(v79 - a4[4]) + (float)(v79 - a4[4]);
        v88 = (float)(v80 - a4[5]) + (float)(v80 - a4[5]);
        v7 = (float)(v81 - a4[6]) + (float)(v81 - a4[6]);
        v89 = (float)((float)(v22 * v88) + (float)(v21 * v87)) + (float)(v19 * v7);
        v86[6] = (float)((float)(v87 * v20) - (float)((float)((float)(v88 * (float)-v19) + (float)(v22 * v7)) * v18))
               + (float)(v21 * v89);
        v86[7] = (float)((float)(v88 * v20) - (float)((float)((float)(v7 * v24) + (float)(v19 * v87)) * v18))
               + (float)(v22 * v89);
        v86[8] = (float)((float)(v7 * v20) - (float)((float)((float)(v87 * (float)-v22) + (float)(v21 * v88)) * v18))
               + (float)(v19 * v89);
        v78 += 12;
        v77 += 3;
        --v75;
      }
      while (v75);
    }
    if (!v46)
    {
LABEL_34:
      LOWORD(v46) = 0;
      v90 = result + 104 * v23;
      *(_QWORD *)(v90 + 2880) = 0;
      *(_DWORD *)(v90 + 2888) = 0;
      *(_QWORD *)(v90 + 2856) = 0;
      *(_DWORD *)(v90 + 2864) = 0;
    }
    *v26 = v46;
LABEL_36:
    ++v23;
    v25 += 104;
  }
  while (v23 != v8);
  return result;
}

float physx::Dy::copyToSolverBodyData(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, int a5, uint64_t a6, int a7, float a8, float a9, float a10, float a11)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float result;

  *(_DWORD *)(a6 + 72) = a5;
  v11 = a3[1];
  v12 = sqrtf(*a3);
  v13 = 0.0;
  if (*a3 == 0.0)
    v12 = 0.0;
  v14 = sqrtf(v11);
  if (v11 == 0.0)
    v15 = 0.0;
  else
    v15 = v14;
  v16 = a3[2];
  v17 = sqrtf(v16);
  if (v16 != 0.0)
    v13 = v17;
  v18 = *(float *)a4;
  v19 = *(float *)(a4 + 4);
  v20 = *(float *)(a4 + 8);
  v21 = *(float *)(a4 + 12);
  v22 = v19 + v19;
  v23 = v20 + v20;
  v24 = v19 * (float)(v19 + v19);
  v25 = v20 * (float)(v20 + v20);
  v26 = (float)(v18 + v18) * v19;
  v27 = (float)(v18 + v18) * v20;
  v28 = (float)(v18 + v18) * v21;
  v29 = v22 * v20;
  v30 = v22 * v21;
  v31 = v23 * v21;
  v32 = (float)(1.0 - v24) - v25;
  v33 = v26 + v31;
  v34 = v27 - v30;
  v35 = v26 - v31;
  v36 = 1.0 - (float)(v18 * (float)(v18 + v18));
  v37 = v36 - v25;
  v38 = v29 + v28;
  v39 = v27 + v30;
  v40 = v29 - v28;
  v41 = v36 - v24;
  v42 = v12 * v32;
  v43 = v12 * v33;
  v44 = v15 * v35;
  v45 = v15 * v37;
  v46 = v13 * v39;
  v47 = v13 * v40;
  v48 = (float)((float)(v35 * (float)(v15 * v35)) + (float)((float)(v12 * v32) * v32))
      + (float)((float)(v13 * v39) * v39);
  v49 = (float)((float)(v37 * (float)(v15 * v37)) + (float)((float)(v12 * v33) * v33))
      + (float)((float)(v13 * v40) * v40);
  v50 = (float)((float)(v38 * (float)(v15 * v38)) + (float)((float)(v12 * v34) * v34))
      + (float)((float)(v13 * v41) * v41);
  v51 = (float)((float)(v37 * v44) + (float)(v42 * v33)) + (float)(v46 * v40);
  *(float *)(a6 + 32) = v48;
  *(float *)(a6 + 36) = v51;
  v52 = (float)((float)(v38 * v44) + (float)(v42 * v34)) + (float)(v46 * v41);
  *(float *)(a6 + 40) = v52;
  *(float *)(a6 + 44) = v51;
  v53 = (float)((float)(v38 * v45) + (float)(v43 * v34)) + (float)(v47 * v41);
  *(float *)(a6 + 48) = v49;
  *(float *)(a6 + 52) = v53;
  *(float *)(a6 + 56) = v52;
  *(float *)(a6 + 60) = v53;
  *(float *)(a6 + 64) = v50;
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a1 + 8);
  *(_QWORD *)(a6 + 16) = *(_QWORD *)a2;
  *(_DWORD *)(a6 + 24) = *(_DWORD *)(a2 + 8);
  if (!a7)
    goto LABEL_16;
  if ((a7 & 1) != 0)
  {
    *(_DWORD *)a6 = 0;
    if ((a7 & 2) == 0)
    {
LABEL_11:
      if ((a7 & 4) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((a7 & 2) == 0)
  {
    goto LABEL_11;
  }
  *(_DWORD *)(a6 + 4) = 0;
  if ((a7 & 4) == 0)
  {
LABEL_12:
    if ((a7 & 8) == 0)
      goto LABEL_13;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)(a6 + 8) = 0;
  if ((a7 & 8) == 0)
  {
LABEL_13:
    if ((a7 & 0x10) == 0)
      goto LABEL_14;
LABEL_21:
    *(_DWORD *)(a6 + 20) = 0;
    if ((a7 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_20:
  *(_DWORD *)(a6 + 16) = 0;
  if ((a7 & 0x10) != 0)
    goto LABEL_21;
LABEL_14:
  if ((a7 & 0x20) != 0)
LABEL_15:
    *(_DWORD *)(a6 + 24) = 0;
LABEL_16:
  *(float *)(a6 + 12) = a8;
  *(float *)(a6 + 68) = a9;
  *(float *)(a6 + 76) = a10;
  *(_OWORD *)(a6 + 80) = *(_OWORD *)a4;
  *(_QWORD *)(a6 + 96) = *(_QWORD *)(a4 + 16);
  result = *(float *)(a4 + 24);
  *(float *)(a6 + 104) = result;
  *(_WORD *)(a6 + 108) = a7;
  *(float *)(a6 + 28) = a11;
  return result;
}

uint64_t **physx::Dy::solve1D(uint64_t **result, double a2, double a3, double a4, double a5, float32x2_t a6, float32x2_t a7, float32x2_t a8, float32x2_t a9)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  float32x4_t v13;
  float32x4_t v14;
  _DWORD *v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  const float *v29;
  float32x2_t v30;
  const float *v31;
  float32x2_t v32;
  const float *v33;
  float32x2_t v34;
  const float *v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;

  v9 = result[4];
  if (v9)
  {
    v11 = *result;
    v10 = result[1];
    v13.i64[0] = **result;
    v12 = *result + 1;
    v13.i64[1] = *v12;
    v14.i64[0] = *v10;
    v14.i64[1] = *((unsigned int *)v10 + 2);
    v16.i64[0] = (*result)[2];
    v15 = *result + 3;
    v16.i64[1] = *v15;
    v17.i64[0] = v10[2];
    v17.i64[1] = *((unsigned int *)v10 + 6);
    v18 = *((unsigned __int8 *)v9 + 1);
    if (*((_BYTE *)v9 + 1))
    {
      a6.i32[0] = *((_DWORD *)v9 + 3);
      a7.i32[0] = *((_DWORD *)v9 + 7);
      a8.i32[0] = *((_DWORD *)v9 + 9);
      _X15 = (unsigned int *)(v9 + 9);
      a9.i32[0] = *((_DWORD *)v9 + 11);
      do
      {
        __asm { PRFM            #0, [X15,#0x48] }
        v25.i64[0] = *((_QWORD *)_X15 - 3);
        v25.i64[1] = *(_X15 - 4);
        v26.i64[0] = *((_QWORD *)_X15 - 1);
        v26.i64[1] = *_X15;
        v27.i64[0] = *((_QWORD *)_X15 + 1);
        v27.i64[1] = _X15[4];
        v28.i64[0] = *((_QWORD *)_X15 + 3);
        v28.i64[1] = _X15[8];
        v29 = (const float *)(_X15 - 3);
        v30 = vld1_dup_f32(v29);
        v31 = (const float *)(_X15 + 16);
        v32 = vld1_dup_f32(v31);
        v33 = (const float *)(_X15 + 15);
        v34 = vld1_dup_f32(v33);
        v35 = (const float *)(_X15 + 14);
        v36 = vld1_dup_f32(v35);
        v37 = vsubq_f32(vmlaq_f32(vmulq_f32(v16, v27), v25, v13), vmlaq_f32(vmulq_f32(v17, v28), v26, v14));
        v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
        v38 = vmin_f32(v34, vmax_f32(v36, vmla_n_f32(vmla_n_f32(v30, vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), *((float *)_X15 + 5)), v32, *((float *)_X15 + 9))));
        v39 = vsub_f32(v38, v32);
        v13 = vmlaq_n_f32(v13, v25, vmul_f32(a6, v39).f32[0]);
        v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
        v14 = vmlsq_lane_f32(v14, v26, vmul_f32(a7, v39), 0);
        v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
        v16 = vmlaq_n_f32(v16, v27, vmul_f32(a8, v39).f32[0]);
        _X15[16] = v38.i32[0];
        v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
        v17 = vmlaq_n_f32(v17, v28, vmul_f32(a9, v39).f32[0]);
        v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
        _X15 += 24;
        --v18;
      }
      while (v18);
    }
    *v11 = v13.i64[0];
    *v12 = v13.i32[2];
    v11[2] = v16.i64[0];
    *v15 = v16.i32[2];
    *v10 = v14.i64[0];
    *((_DWORD *)v10 + 2) = v14.i32[2];
    v10[2] = v17.i64[0];
    *((_DWORD *)v10 + 6) = v17.i32[2];
  }
  return result;
}

uint64_t **physx::Dy::solveContact(uint64_t **result, _BYTE *a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  int8x16_t v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  float32x4_t v13;
  float32x4_t v14;
  _DWORD *v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v27;
  uint64_t v28;
  float v29;
  const float *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v37;
  float *v38;
  uint64_t v39;
  const float *v40;
  float32x4_t v42;
  float32x4_t v43;
  float32x2_t v44;
  const float *v45;
  float32x2_t v46;
  float32x4_t v47;
  const float *v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int8x16_t v58;
  uint64_t v59;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x2_t v65;
  const float *i32;
  float32x2_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x2_t v71;
  float32x2_t v72;

  v11 = *result;
  v10 = result[1];
  v13.i64[0] = **result;
  v12 = *result + 1;
  v13.i64[1] = *v12;
  v14.i64[0] = *v10;
  v14.i64[1] = *((unsigned int *)v10 + 2);
  v16.i64[0] = (*result)[2];
  v15 = *result + 3;
  v16.i64[1] = *v15;
  v17.i64[0] = v10[2];
  v17.i64[1] = *((unsigned int *)v10 + 6);
  if (*((_WORD *)result + 15))
  {
    _X15 = (unint64_t)result[4];
    v19 = _X15 + 16 * *((unsigned __int16 *)result + 15);
    do
    {
      v20 = *(unsigned __int8 *)(_X15 + 2);
      v21 = *(unsigned __int8 *)(_X15 + 3);
      __asm { PRFM            #0, [X15,#0x50] }
      v27 = 3 * *(unsigned __int8 *)(_X15 + 2);
      v28 = _X15 + 80 + 48 * *(unsigned __int8 *)(_X15 + 2);
      a9.i32[0] = *(_DWORD *)(_X15 + 8);
      v29 = *(float *)(_X15 + 12);
      v30 = (const float *)(_X15 + 48);
      a8.i32[0] = *(_DWORD *)(_X15 + 4);
      v31 = vld1q_dup_f32(v30);
      if (*(_BYTE *)(_X15 + 2))
      {
        v32 = *(float32x4_t *)(_X15 + 32);
        v33 = vmulq_n_f32(v32, v29);
        v33.i32[3] = 0;
        v34 = vmulq_f32(v31, v32);
        v34.i32[3] = 0;
        v35 = vnegq_f32(v34);
        _X3 = (float32x4_t *)(_X15 + 112);
        v37 = 0;
        v38 = (float *)(_X15 + 80 + 48 * *(unsigned __int8 *)(_X15 + 2));
        v39 = *(unsigned __int8 *)(_X15 + 2);
        v40 = v38;
        do
        {
          __asm { PRFM            #0, [X3,#0x60] }
          v43 = _X3[-2];
          v42 = _X3[-1];
          v44 = vld1_dup_f32(v40++);
          v9.i32[0] = _X3->i32[0];
          v45 = &_X3->f32[3];
          v46 = vld1_dup_f32(v45);
          v47 = vsubq_f32(vmlaq_f32(vmulq_f32(v16, v43), v32, v13), vmlaq_f32(vmulq_f32(v17, v42), v32, v14));
          v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
          v48 = &_X3->f32[1];
          v49 = vld1_dup_f32(v48);
          *(float32x2_t *)v9.i8 = vmin_f32(vadd_f32(v44, vmax_f32(vmls_lane_f32(v49, vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32), *(float32x2_t *)v9.i8, 0), vneg_f32(v44))), v46);
          v50 = vsub_f32(*(float32x2_t *)v9.i8, v44);
          v13 = vmlaq_n_f32(v13, v33, v50.f32[0]);
          v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
          v14 = vmlaq_n_f32(v14, v35, v50.f32[0]);
          v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
          v16 = vmlaq_n_f32(v16, v43, vmul_f32(a8, v50).f32[0]);
          v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
          v17 = vmlsq_lane_f32(v17, v42, vmul_f32(a9, v50), 0);
          v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
          *v38 = *(float *)v9.i32;
          v37 = vadd_f32(v37, *(float32x2_t *)v9.i8);
          _X3 += 3;
          v38 = (float *)v40;
          --v39;
        }
        while (v39);
      }
      else
      {
        v37 = 0;
      }
      result = (uint64_t **)((4 * v20 + 12) & 0x7F0);
      if (*a2 && (_DWORD)v21)
      {
        v51 = *(float32x2_t *)(_X15 + 16);
        if (a2[1])
        {
          _X3 = *(_QWORD *)(_X15 + 56);
          __asm { PRFM            #0, [X3] }
        }
        v54 = vmul_n_f32(v37, v51.f32[0]);
        v55 = vmul_lane_f32(v37, v51, 1);
        v56 = vneg_f32(v55);
        _X2 = (int32x4_t *)((char *)&result[2 * v27 + 14] + _X15);
        v58 = 0uLL;
        v59 = v21;
        do
        {
          __asm { PRFM            #0, [X2,#0x60] }
          v61 = _X2[-2];
          v62 = *(float32x4_t *)_X2;
          v63 = (float32x4_t)v61;
          v63.i32[3] = 0;
          v64 = (float32x4_t)_X2[-1];
          v64.i32[3] = 0;
          v65 = (float32x2_t)vdup_laneq_s32(v61, 3);
          v62.i32[3] = 0;
          i32 = (const float *)_X2[1].i32;
          v67 = vld1_dup_f32(i32);
          v68 = vmulq_n_f32(v63, v29);
          v68.i32[3] = 0;
          v69 = vmulq_f32(v31, v63);
          v69.i32[3] = 0;
          v70 = vsubq_f32(vmlaq_f32(vmulq_f32(v16, v64), v63, v13), vmlaq_f32(vmulq_f32(v17, v62), v63, v14));
          v70.i64[0] = vpaddq_f32(v70, v70).u64[0];
          v71 = vmls_laneq_f32(vmls_laneq_f32(v65, vsub_f32((float32x2_t)vdup_laneq_s32(*_X2, 3), v67), (float32x4_t)_X2[-1], 3), vpadd_f32(*(float32x2_t *)v70.f32, *(float32x2_t *)v70.f32), (float32x4_t)_X2[-1], 3);
          v9 = (int8x16_t)vdupq_lane_s32(vcgt_f32(vabs_f32(v71), v54), 0);
          *(int8x8_t *)v70.f32 = vbsl_s8(*(int8x8_t *)v9.i8, (int8x8_t)vmin_f32(v55, vmax_f32(v56, v71)), (int8x8_t)v71);
          v72 = vsub_f32(*(float32x2_t *)v70.f32, v65);
          v13 = vmlaq_n_f32(v13, v68, v72.f32[0]);
          v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
          v14 = vmlsq_lane_f32(v14, v69, v72, 0);
          v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
          v16 = vmlaq_n_f32(v16, v64, vmul_f32(a8, v72).f32[0]);
          v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
          v17 = vmlsq_lane_f32(v17, v62, vmul_f32(a9, v72), 0);
          v17.i64[1] = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u32[0];
          v58 = vorrq_s8(v9, v58);
          v61.i32[3] = v70.i32[1];
          _X2[-2] = v61;
          _X2 += 4;
          --v59;
        }
        while (v59);
        *(_DWORD *)(_X15 + 52) = v58.i32[0];
      }
      _X15 = (unint64_t)&result[8 * v21] + v28;
    }
    while (_X15 < v19);
  }
  *v11 = v13.i64[0];
  *v12 = v13.i32[2];
  *v10 = v14.i64[0];
  *((_DWORD *)v10 + 2) = v14.i32[2];
  v11[2] = v16.i64[0];
  *v15 = v16.i32[2];
  v10[2] = v17.i64[0];
  *((_DWORD *)v10 + 6) = v17.i32[2];
  return result;
}

int32x4_t *physx::Dy::solveContact_BStatic(int32x4_t *result, _BYTE *a2, double a3, double a4, double a5, float32x2_t a6)
{
  int8x16_t v6;
  uint64_t *v7;
  _DWORD *v8;
  float32x4_t v9;
  _DWORD *v10;
  float32x4_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x2_t v22;
  float *v23;
  const float *v24;
  float32x4_t v30;
  float32x2_t v31;
  const float *v32;
  float32x2_t v33;
  float32x4_t v34;
  const float *v35;
  float32x2_t v36;
  float32x2_t v37;
  uint64_t v38;
  float32x2_t v39;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  int8x16_t v46;
  uint64_t v47;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;

  v7 = (uint64_t *)result->i64[0];
  v9.i64[0] = *(_QWORD *)result->i64[0];
  v8 = (_DWORD *)(result->i64[0] + 8);
  v9.i64[1] = *v8;
  v11.i64[0] = *(_QWORD *)(result->i64[0] + 16);
  v10 = (_DWORD *)(result->i64[0] + 24);
  v11.i64[1] = *v10;
  if (result[1].i16[7])
  {
    v12 = result[2].u64[0];
    v13 = v12 + 16 * result[1].u16[7];
    do
    {
      v14 = *(unsigned __int8 *)(v12 + 2);
      v15 = 3 * *(unsigned __int8 *)(v12 + 2);
      v16 = *(unsigned __int8 *)(v12 + 3);
      v17 = v12 + 48 * *(unsigned __int8 *)(v12 + 2) + 80;
      v18 = *(float *)(v12 + 12);
      a6.i32[0] = *(_DWORD *)(v12 + 4);
      if (*(_BYTE *)(v12 + 2))
      {
        v19 = *(float32x4_t *)(v12 + 32);
        v20 = vmulq_n_f32(v19, v18);
        v20.i32[3] = 0;
        _X17 = (float32x4_t *)(v12 + 112);
        v22 = 0;
        v23 = (float *)(v12 + 48 * *(unsigned __int8 *)(v12 + 2) + 80);
        result = (int32x4_t *)*(unsigned __int8 *)(v12 + 2);
        v24 = v23;
        do
        {
          __asm { PRFM            #0, [X17,#0x60] }
          v30 = _X17[-2];
          v31 = vld1_dup_f32(v24++);
          v6.i32[0] = _X17->i32[0];
          v32 = &_X17->f32[3];
          v33 = vld1_dup_f32(v32);
          v34 = vmlaq_f32(vmulq_f32(v11, v30), v19, v9);
          v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
          v35 = &_X17->f32[1];
          v36 = vld1_dup_f32(v35);
          *(float32x2_t *)v6.i8 = vmin_f32(vadd_f32(v31, vmax_f32(vmls_lane_f32(v36, vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32), *(float32x2_t *)v6.i8, 0), vneg_f32(v31))), v33);
          v37 = vsub_f32(*(float32x2_t *)v6.i8, v31);
          v9 = vmlaq_n_f32(v9, v20, v37.f32[0]);
          v9.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
          v11 = vmlaq_n_f32(v11, v30, vmul_f32(a6, v37).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          *v23 = *(float *)v6.i32;
          v22 = vadd_f32(v22, *(float32x2_t *)v6.i8);
          _X17 += 3;
          v23 = (float *)v24;
          result = (int32x4_t *)((char *)result - 1);
        }
        while (result);
      }
      else
      {
        v22 = 0;
      }
      v38 = (4 * v14 + 12) & 0x7F0;
      if (*a2 && (_DWORD)v16)
      {
        v39 = *(float32x2_t *)(v12 + 16);
        if (a2[1])
        {
          _X17 = *(_QWORD *)(v12 + 56);
          __asm { PRFM            #0, [X17] }
        }
        v42 = vmul_n_f32(v22, v39.f32[0]);
        v43 = vmul_lane_f32(v22, v39, 1);
        v44 = vneg_f32(v43);
        _X16 = (int32x4_t *)(v12 + 16 * v15 + v38 + 112);
        v46 = 0uLL;
        v47 = v16;
        do
        {
          __asm { PRFM            #0, [X16,#0x60] }
          v49 = _X16[-2];
          v50 = (float32x4_t)v49;
          v50.i32[3] = 0;
          v51 = (float32x4_t)_X16[-1];
          v51.i32[3] = 0;
          v52 = (float32x2_t)vdup_laneq_s32(v49, 3);
          result = _X16 + 1;
          v53 = vld1_dup_f32((const float *)result->i32);
          v54 = vmulq_n_f32(v50, v18);
          v54.i32[3] = 0;
          v55 = vmlaq_f32(vmulq_f32(v11, v51), v50, v9);
          v50.i64[0] = vpaddq_f32(v55, v55).u64[0];
          v56 = vmls_laneq_f32(vmls_laneq_f32(v52, vsub_f32((float32x2_t)vdup_laneq_s32(*_X16, 3), v53), (float32x4_t)_X16[-1], 3), vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32), (float32x4_t)_X16[-1], 3);
          v6 = (int8x16_t)vdupq_lane_s32(vcgt_f32(vabs_f32(v56), v42), 0);
          *(int8x8_t *)v50.f32 = vbsl_s8(*(int8x8_t *)v6.i8, (int8x8_t)vmin_f32(v43, vmax_f32(v44, v56)), (int8x8_t)v56);
          v57 = vsub_f32(*(float32x2_t *)v50.f32, v52);
          v9 = vmlaq_n_f32(v9, v54, v57.f32[0]);
          v9.i64[1] = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u32[0];
          v11 = vmlaq_n_f32(v11, v51, vmul_f32(a6, v57).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          v46 = vorrq_s8(v6, v46);
          v49.i32[3] = v50.i32[1];
          _X16[-2] = v49;
          _X16 += 4;
          --v47;
        }
        while (v47);
        *(_DWORD *)(v12 + 52) = v46.i32[0];
      }
      v12 = v17 + v38 + (v16 << 6);
    }
    while (v12 < v13);
  }
  *v7 = v9.i64[0];
  *v8 = v9.i32[2];
  v7[2] = v11.i64[0];
  *v10 = v11.i32[2];
  return result;
}

uint64_t physx::Dy::concludeContact(uint64_t result)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;

  if (*(_WORD *)(result + 30))
  {
    _X14 = *(unsigned __int8 **)(result + 32);
    v2 = &_X14[16 * *(unsigned __int16 *)(result + 30)];
    do
    {
      v3 = _X14 + 80;
      v4 = _X14[2];
      v5 = _X14[3];
      __asm
      {
        PRFM            #0, [X14,#0xD0]
        PRFM            #0, [X14,#0x150]
        PRFM            #0, [X14,#0x1D0]
      }
      v13 = *_X14;
      if (v4)
      {
        if (v13 == 3)
          result = 112;
        else
          result = 48;
        v14 = v4;
        do
        {
          v15 = &v3[result];
          *((_DWORD *)v3 + 9) = *((_DWORD *)v3 + 10);
          v3 += result;
          --v14;
        }
        while (v14);
      }
      else
      {
        v15 = v3;
      }
      v16 = &v15[(4 * (_WORD)v4 + 12) & 0x7F0];
      if (v5)
      {
        if (v13 == 3)
          v17 = 128;
        else
          v17 = 64;
        do
        {
          _X14 = &v16[v17];
          *((_DWORD *)v16 + 11) = 0;
          v16 += v17;
          --v5;
        }
        while (v5);
      }
      else
      {
        _X14 = v16;
      }
    }
    while (_X14 < v2);
  }
  return result;
}

uint64_t physx::Dy::writeBackContact(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float *v4;
  unsigned __int8 *v6;
  float v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  int v17;
  int v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  _BYTE *v23;
  char v24;
  float v25;
  float v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (*(_WORD *)(result + 30))
  {
    _X15 = *(unsigned __int8 **)(result + 32);
    v4 = *(float **)(result + 40);
    v6 = &_X15[16 * *(unsigned __int16 *)(result + 30)];
    v7 = 0.0;
    do
    {
      v8 = _X15[1];
      v9 = _X15[2];
      v10 = _X15[3];
      __asm
      {
        PRFM            #0, [X15,#0x150]
        PRFM            #0, [X15,#0x1D0]
      }
      v17 = *_X15;
      if (v17 == 3)
        v18 = 112;
      else
        v18 = 48;
      v19 = (uint64_t)&_X15[v18 * v9 + 80];
      if (v4 && _X15[2])
      {
        v20 = (float *)v19;
        v21 = _X15[2];
        do
        {
          v22 = *v20++;
          *v4++ = v22;
          v7 = v7 + v22;
          --v21;
        }
        while (v21);
      }
      if (*((_DWORD *)_X15 + 13))
      {
        v23 = (_BYTE *)*((_QWORD *)_X15 + 7);
        if (v23)
          *v23 = 1;
      }
      if (v17 == 3)
        v24 = 7;
      else
        v24 = 6;
      _X15 = (unsigned __int8 *)(v19 + ((4 * (_WORD)v9 + 12) & 0x7F0) + (v10 << v24));
    }
    while (_X15 < v6);
    if ((v8 & 1) != 0 && *(unsigned __int16 *)(result + 16) == 0xFFFF && *(__int16 *)(result + 18) == -1 && v7 != 0.0)
    {
      v25 = *(float *)(a3 + 28);
      v26 = *(float *)(a4 + 28);
      if (v25 < 3.4028e38 || v26 < 3.4028e38)
      {
        if (v25 >= v26)
          v25 = *(float *)(a4 + 28);
        v27 = *(_DWORD *)(a3 + 72) << 7;
        v28 = *(_DWORD *)(a4 + 72) << 7;
        v29 = *(_QWORD *)(*(_QWORD *)(result + 32) + 64);
        if (v28 >= v27)
          v30 = *(_DWORD *)(a3 + 72) << 7;
        else
          v30 = *(_DWORD *)(a4 + 72) << 7;
        if (v28 > v27)
          v27 = *(_DWORD *)(a4 + 72) << 7;
        v31 = *(_QWORD *)(a2 + 8);
        v32 = *(unsigned int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v32 + 1;
        v33 = v31 + 32 * v32;
        *(_QWORD *)v33 = v29;
        *(float *)(v33 + 8) = v7;
        *(float *)(v33 + 12) = v25;
        *(_DWORD *)(v33 + 16) = v30;
        *(_DWORD *)(v33 + 20) = v27;
      }
    }
  }
  return result;
}

uint64_t physx::Dy::writeBack1D(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _BOOL4 v19;

  v1 = *(_QWORD *)(result + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(result + 32);
    v3 = *(unsigned __int8 *)(v2 + 1);
    if (*(_BYTE *)(v2 + 1))
    {
      v4 = v2 + 112;
      v5 = 96;
      if (*(_BYTE *)v2 == 4)
        v5 = 160;
      v6 = 0.0;
      v7 = 0.0;
      v8 = 0.0;
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
      do
      {
        if ((*(_BYTE *)(v4 + 28) & 2) != 0)
        {
          v12 = *(float *)(v4 + 24);
          v8 = v8 + (float)(v12 * *(float *)(v4 - 64));
          v7 = v7 + (float)(v12 * *(float *)(v4 - 60));
          v6 = v6 + (float)(v12 * *(float *)(v4 - 56));
          v11 = v11 + (float)(v12 * *(float *)v4);
          v10 = v10 + (float)(v12 * *(float *)(v4 + 4));
          v9 = v9 + (float)(v12 * *(float *)(v4 + 8));
        }
        v4 += v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      v11 = 0.0;
      v10 = 0.0;
      v9 = 0.0;
      v8 = 0.0;
      v7 = 0.0;
      v6 = 0.0;
    }
    v14 = *(float *)(v2 + 20);
    v13 = *(float *)(v2 + 24);
    v15 = *(float *)(v2 + 16);
    v16 = v11 - (float)((float)(v14 * v6) - (float)(v13 * v7));
    v17 = v10 - (float)((float)(v13 * v8) - (float)(v15 * v6));
    v18 = v9 - (float)((float)(v15 * v7) - (float)(v14 * v8));
    *(float *)v1 = v8;
    *(float *)(v1 + 4) = v7;
    *(float *)(v1 + 8) = v6;
    *(float *)(v1 + 16) = v16;
    *(float *)(v1 + 20) = v17;
    *(float *)(v1 + 24) = v18;
    if (*(_BYTE *)(v2 + 3))
      v19 = sqrtf((float)((float)(v7 * v7) + (float)(v8 * v8)) + (float)(v6 * v6)) > *(float *)(v2 + 4)
         || sqrtf((float)((float)(v17 * v17) + (float)(v16 * v16)) + (float)(v18 * v18)) > *(float *)(v2 + 8);
    else
      v19 = 0;
    *(_DWORD *)(v1 + 12) = v19;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  _BOOL4 v24;

  v1 = *(_QWORD *)(result + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(result + 32);
    v3 = *(unsigned __int8 *)(v2 + 1);
    if (*(_BYTE *)(v2 + 1))
    {
      v4 = v2 + 176;
      v5 = 96;
      if (*(_BYTE *)v2 == 4)
        v5 = 160;
      v6 = 0.0;
      v7 = 0.0;
      v8 = 0.0;
      v9 = 0.0;
      v10 = 0.0;
      v11 = 0.0;
      do
      {
        if ((*(_BYTE *)(v4 + 84) & 2) != 0)
        {
          v12 = *(float *)(v4 + 76);
          v13 = *(float *)(v4 + 4);
          v14 = *(float *)(v4 + 8);
          v8 = v8 + (float)(v12 * *(float *)v4);
          v7 = v7 + (float)(v12 * v13);
          v6 = v6 + (float)(v12 * v14);
          v16 = *(float *)(v2 + 36);
          v15 = *(float *)(v2 + 40);
          v17 = *(float *)(v2 + 32);
          v11 = v11 + (float)(v12 * (float)(*(float *)(v4 + 32) + (float)((float)(v13 * v15) - (float)(v14 * v16))));
          v10 = v10
              + (float)(v12 * (float)((float)((float)(v14 * v17) - (float)(*(float *)v4 * v15)) + *(float *)(v4 + 36)));
          v9 = v9
             + (float)(v12 * (float)((float)((float)(*(float *)v4 * v16) - (float)(v13 * v17)) + *(float *)(v4 + 40)));
        }
        v4 += v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      v11 = 0.0;
      v10 = 0.0;
      v9 = 0.0;
      v8 = 0.0;
      v7 = 0.0;
      v6 = 0.0;
    }
    v19 = *(float *)(v2 + 20);
    v18 = *(float *)(v2 + 24);
    v20 = *(float *)(v2 + 16);
    v21 = v11 - (float)((float)(v19 * v6) - (float)(v18 * v7));
    v22 = v10 - (float)((float)(v18 * v8) - (float)(v20 * v6));
    v23 = v9 - (float)((float)(v20 * v7) - (float)(v19 * v8));
    *(float *)v1 = v8;
    *(float *)(v1 + 4) = v7;
    *(float *)(v1 + 8) = v6;
    *(float *)(v1 + 16) = v21;
    *(float *)(v1 + 20) = v22;
    *(float *)(v1 + 24) = v23;
    if (*(_BYTE *)(v2 + 3))
      v24 = sqrtf((float)((float)(v7 * v7) + (float)(v8 * v8)) + (float)(v6 * v6)) > *(float *)(v2 + 4)
         || sqrtf((float)((float)(v22 * v22) + (float)(v21 * v21)) + (float)(v23 * v23)) > *(float *)(v2 + 8);
    else
      v24 = 0;
    *(_DWORD *)(v1 + 12) = v24;
  }
  return result;
}

uint64_t **physx::Dy::solve1DBlock(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10)
{
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 2)
  {
    v12 = a2 - 1;
    v13 = a1;
    do
    {
      _X8 = *(_QWORD *)(v13 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solve1D((uint64_t **)v13, a3, a4, a5, a6, a7, a8, a9, a10);
      v13 += 48;
      --v12;
    }
    while (v12);
  }
  return physx::Dy::solve1D((uint64_t **)(a1 + 48 * (a2 - 1)), a3, a4, a5, a6, a7, a8, a9, a10);
}

float physx::Dy::solve1DConcludeBlock(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10)
{
  uint64_t i;
  uint64_t v13;
  unsigned __int8 *v22;
  int v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  float result;
  unsigned __int8 *v29;
  int v30;
  float *v31;
  int v32;
  uint64_t v33;

  if (a2 >= 2)
  {
    for (i = 1; i != a2; ++i)
    {
      v13 = a1 + 48 * i;
      _X8 = *(_QWORD *)(v13 + 32);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solve1D((uint64_t **)(v13 - 48), a3, a4, a5, a6, a7, a8, a9, a10);
      v22 = *(unsigned __int8 **)(v13 - 16);
      if (v22)
      {
        v23 = v22[1];
        if (v22[1])
        {
          v25 = *v22;
          v24 = v22 + 76;
          if (v25 == 4)
            v26 = 160;
          else
            v26 = 96;
          do
          {
            LODWORD(a3) = *v24;
            *(v24 - 4) = *v24;
            v24 = (_DWORD *)((char *)v24 + v26);
            --v23;
          }
          while (v23);
        }
      }
    }
  }
  v27 = a1 + 48 * (a2 - 1);
  physx::Dy::solve1D((uint64_t **)v27, a3, a4, a5, a6, a7, a8, a9, a10);
  v29 = *(unsigned __int8 **)(v27 + 32);
  if (v29)
  {
    v30 = v29[1];
    if (v29[1])
    {
      v32 = *v29;
      v31 = (float *)(v29 + 76);
      v33 = 96;
      if (v32 == 4)
        v33 = 160;
      do
      {
        result = *v31;
        *(v31 - 4) = *v31;
        v31 = (float *)((char *)v31 + v33);
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t physx::Dy::solve1DBlockWriteBack(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t **v22;

  if (a2 >= 2)
  {
    v12 = a2 - 1;
    v13 = a1;
    do
    {
      _X8 = *(_QWORD *)(v13 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solve1D((uint64_t **)v13, a3, a4, a5, a6, a7, a8, a9, a10);
      physx::Dy::writeBack1D(v13);
      v13 += 48;
      --v12;
    }
    while (v12);
  }
  v22 = (uint64_t **)(a1 + 48 * (a2 - 1));
  physx::Dy::solve1D(v22, a3, a4, a5, a6, a7, a8, a9, a10);
  return physx::Dy::writeBack1D((uint64_t)v22);
}

uint64_t **physx::Dy::solveContactBlock(uint64_t a1, unsigned int a2, _BYTE *a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x2_t a10)
{
  uint64_t v13;
  uint64_t v14;

  if (a2 >= 2)
  {
    v13 = a2 - 1;
    v14 = a1;
    do
    {
      _X8 = *(_QWORD *)(v14 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solveContact((uint64_t **)v14, a3, a4, a5, a6, a7, a8, a9, a10);
      v14 += 48;
      --v13;
    }
    while (v13);
  }
  return physx::Dy::solveContact((uint64_t **)(a1 + 48 * (a2 - 1)), a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t physx::Dy::solveContactConcludeBlock(uint64_t a1, unsigned int a2, _BYTE *a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x2_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t **v23;

  if (a2 >= 2)
  {
    v13 = a2 - 1;
    v14 = a1;
    do
    {
      _X8 = *(_QWORD *)(v14 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solveContact((uint64_t **)v14, a3, a4, a5, a6, a7, a8, a9, a10);
      physx::Dy::concludeContact(v14);
      v14 += 48;
      --v13;
    }
    while (v13);
  }
  v23 = (uint64_t **)(a1 + 48 * (a2 - 1));
  physx::Dy::solveContact(v23, a3, a4, a5, a6, a7, a8, a9, a10);
  return physx::Dy::concludeContact((uint64_t)v23);
}

uint64_t physx::Dy::solveContactBlockWriteBack(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x2_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;

  if (a2 >= 2)
  {
    v13 = a2 - 1;
    v14 = a1;
    do
    {
      _X8 = *(_QWORD *)(v14 + 80);
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      v23 = *(_QWORD *)(a3 + 24);
      v24 = v23 + 112 * *(unsigned int *)(v14 + 20);
      v25 = v23 + 112 * *(unsigned int *)(v14 + 24);
      physx::Dy::solveContact((uint64_t **)v14, (_BYTE *)a3, a4, a5, a6, a7, a8, a9, a10);
      physx::Dy::writeBackContact(v14, a3, v24, v25);
      v14 += 48;
      --v13;
    }
    while (v13);
  }
  v26 = *(_QWORD *)(a3 + 24);
  v27 = a1 + 48 * (a2 - 1);
  v28 = v26 + 112 * *(unsigned int *)(v27 + 20);
  v29 = v26 + 112 * *(unsigned int *)(v27 + 24);
  physx::Dy::solveContact((uint64_t **)v27, (_BYTE *)a3, a4, a5, a6, a7, a8, a9, a10);
  result = physx::Dy::writeBackContact(v27, a3, v28, v29);
  v31 = *(_DWORD *)(a3 + 16);
  if (v31 > *(_DWORD *)(a3 + 20) - 4)
  {
    v32 = *(unsigned int **)(a3 + 48);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + v31, v32));
    v34 = *(_DWORD *)(a3 + 16);
    if (v34)
    {
      v35 = 0;
      v36 = 0;
      v37 = v31 - v34 + v33;
      do
      {
        v38 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v35);
        v39 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v37 + v36));
        v40 = v38[1];
        *v39 = *v38;
        v39[1] = v40;
        ++v36;
        v35 += 32;
      }
      while (v36 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

int32x4_t *physx::Dy::solveContact_BStaticBlock(int32x4_t *a1, unsigned int a2, _BYTE *a3, double a4, double a5, double a6, float32x2_t a7)
{
  uint64_t v10;
  int32x4_t *v11;

  if (a2 >= 2)
  {
    v10 = a2 - 1;
    v11 = a1;
    do
    {
      _X8 = v11[5].i64[0];
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solveContact_BStatic(v11, a3, a4, a5, a6, a7);
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  return physx::Dy::solveContact_BStatic(&a1[3 * a2 - 3], a3, a4, a5, a6, a7);
}

uint64_t physx::Dy::solveContact_BStaticConcludeBlock(int32x4_t *a1, unsigned int a2, _BYTE *a3, double a4, double a5, double a6, float32x2_t a7)
{
  uint64_t v10;
  int32x4_t *v11;
  int32x4_t *v20;

  if (a2 >= 2)
  {
    v10 = a2 - 1;
    v11 = a1;
    do
    {
      _X8 = v11[5].i64[0];
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      physx::Dy::solveContact_BStatic(v11, a3, a4, a5, a6, a7);
      physx::Dy::concludeContact((uint64_t)v11);
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  v20 = &a1[3 * a2 - 3];
  physx::Dy::solveContact_BStatic(v20, a3, a4, a5, a6, a7);
  return physx::Dy::concludeContact((uint64_t)v20);
}

uint64_t physx::Dy::solveContact_BStaticBlockWriteBack(int32x4_t *a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, float32x2_t a7)
{
  uint64_t v10;
  int32x4_t *v11;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;

  if (a2 >= 2)
  {
    v10 = a2 - 1;
    v11 = a1;
    do
    {
      _X8 = v11[5].i64[0];
      __asm
      {
        PRFM            #0, [X8]
        PRFM            #0, [X8,#0x80]
        PRFM            #0, [X8,#0x100]
      }
      v20 = *(_QWORD *)(a3 + 24);
      v21 = v20 + 112 * v11[1].u32[1];
      v22 = v20 + 112 * v11[1].u32[2];
      physx::Dy::solveContact_BStatic(v11, (_BYTE *)a3, a4, a5, a6, a7);
      physx::Dy::writeBackContact((uint64_t)v11, a3, v21, v22);
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  v23 = *(_QWORD *)(a3 + 24);
  v24 = &a1[3 * a2 - 3];
  v25 = v23 + 112 * v24[1].u32[1];
  v26 = v23 + 112 * v24[1].u32[2];
  physx::Dy::solveContact_BStatic(v24, (_BYTE *)a3, a4, a5, a6, a7);
  result = physx::Dy::writeBackContact((uint64_t)v24, a3, v25, v26);
  v28 = *(_DWORD *)(a3 + 16);
  if (v28 > *(_DWORD *)(a3 + 20) - 4)
  {
    v29 = *(unsigned int **)(a3 + 48);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 + v28, v29));
    v31 = *(_DWORD *)(a3 + 16);
    if (v31)
    {
      v32 = 0;
      v33 = 0;
      v34 = v28 - v31 + v30;
      do
      {
        v35 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v32);
        v36 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v34 + v33));
        v37 = v35[1];
        *v36 = *v35;
        v36[1] = v37;
        ++v33;
        v32 += 32;
      }
      while (v33 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

float32x4_t physx::Dy::solveExt1D(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, float32x4_t *a9)
{
  uint64_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t result;

  v9 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v9 + 1))
  {
    v10 = 0;
    v11 = *a5;
    _X11 = v9 + 128;
    do
    {
      __asm { PRFM            #0, [X11,#0x50] }
      v19 = *(float32x4_t *)(_X11 - 80);
      v18 = *(float32x4_t *)(_X11 - 64);
      v20 = (float32x2_t)vdup_laneq_s32((int32x4_t)v19, 3);
      v19.i32[3] = 0;
      v18.i32[3] = 0;
      v21 = *(float32x4_t *)(_X11 - 48);
      v21.i32[3] = 0;
      v22 = *(float32x4_t *)(_X11 - 32);
      v22.i32[3] = 0;
      v23 = vsubq_f32(vmlaq_f32(vmulq_f32(v21, *a4), v19, *a2), vmlaq_f32(vmulq_f32(v11, v22), v18, *a3));
      v23.i64[0] = vpaddq_f32(v23, v23).u64[0];
      *(float32x2_t *)v23.f32 = vmin_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_X11, 1), vmax_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)_X11, 0), vmla_laneq_f32(vmla_laneq_f32(v20, vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32), *(float32x4_t *)(_X11 - 48), 3), (float32x2_t)vdup_laneq_s32(*(int32x4_t *)_X11, 2), *(float32x4_t *)(_X11 - 32), 3)));
      v20.i32[0] = vsub_f32(*(float32x2_t *)v23.f32, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)_X11, *(int8x16_t *)_X11, 8uLL)).u32[0];
      *(_DWORD *)(_X11 + 8) = v23.i32[0];
      v24 = (int8x16_t)vmlaq_n_f32(*a6, v19, v20.f32[0]);
      v24.i64[1] = vextq_s8(v24, v24, 8uLL).u32[0];
      *a6 = (float32x4_t)v24;
      v25 = (int8x16_t)vmlaq_n_f32(*a8, v21, v20.f32[0]);
      v25.i64[1] = vextq_s8(v25, v25, 8uLL).u32[0];
      *a8 = (float32x4_t)v25;
      v26 = (int8x16_t)vmlaq_n_f32(*a7, v18, v20.f32[0]);
      v26.i64[1] = vextq_s8(v26, v26, 8uLL).u32[0];
      *a7 = (float32x4_t)v26;
      v27 = (int8x16_t)vmlaq_n_f32(*a9, v22, v20.f32[0]);
      v27.i64[1] = vextq_s8(v27, v27, 8uLL).u32[0];
      *a9 = (float32x4_t)v27;
      v28 = (int8x16_t)vmlaq_n_f32(*a2, *(float32x4_t *)(_X11 + 16), v20.f32[0]);
      v28.i64[1] = vextq_s8(v28, v28, 8uLL).u32[0];
      *a2 = (float32x4_t)v28;
      v29 = (int8x16_t)vmlaq_n_f32(*a4, *(float32x4_t *)(_X11 + 32), v20.f32[0]);
      v29.i64[1] = vextq_s8(v29, v29, 8uLL).u32[0];
      *a4 = (float32x4_t)v29;
      v30 = (int8x16_t)vmlaq_n_f32(*a3, *(float32x4_t *)(_X11 + 48), v20.f32[0]);
      v30.i64[1] = vextq_s8(v30, v30, 8uLL).u32[0];
      *a3 = (float32x4_t)v30;
      v11 = vmlaq_n_f32(*a5, *(float32x4_t *)(_X11 + 64), v20.f32[0]);
      v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
      *a5 = v11;
      ++v10;
      _X11 += 160;
    }
    while (v10 < *(unsigned __int8 *)(v9 + 1));
  }
  v31 = vmulq_n_f32(*a6, *(float *)(v9 + 32));
  v31.i32[3] = 0;
  *a6 = v31;
  v32 = vmulq_n_f32(*a7, *(float *)(v9 + 40));
  v32.i32[3] = 0;
  *a7 = v32;
  v33 = vmulq_n_f32(*a8, *(float *)(v9 + 36));
  v33.i32[3] = 0;
  *a8 = v33;
  result = vmulq_n_f32(*a9, *(float *)(v9 + 44));
  result.i32[3] = 0;
  *a9 = result;
  return result;
}

float physx::Dy::solveExt1D(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  _DWORD *v12;
  uint64_t v13;
  float result;
  __int32 v15;
  _DWORD *v16;
  __int32 v17;
  uint64_t v18;
  uint64_t v19;
  __int32 v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  float32x4_t v24[2];
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v4 = *(_DWORD **)a1;
  if (v4 == *(_DWORD **)(a1 + 8))
  {
    (*(void (**)(_DWORD *, _QWORD, _QWORD, float32x4_t *, float32x4_t *))(*(_QWORD *)v4 + 304))(v4, *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), &v25, v24);
    v29 = v26;
    v30 = v25;
    v7 = v24[0];
    v8 = v24[1];
LABEL_8:
    v27 = v8;
    v28 = v7;
    goto LABEL_10;
  }
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
  {
    v5.i64[0] = *(_QWORD *)v4;
    v5.i64[1] = v4[2];
    v6.i64[0] = *((_QWORD *)v4 + 2);
    v6.i64[1] = v4[6];
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)v4 + 312))(&v25);
    v5 = v25;
    v6 = v26;
  }
  v29 = v6;
  v30 = v5;
  if (*(unsigned __int16 *)(a1 + 18) != 0xFFFF)
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 312))(&v25);
    v7 = v25;
    v8 = v26;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10.i64[0] = *(_QWORD *)v9;
  v10.i64[1] = *(unsigned int *)(v9 + 8);
  v28 = v10;
  v10.i64[0] = *(_QWORD *)(v9 + 16);
  v10.i64[1] = *(unsigned int *)(v9 + 24);
  v27 = v10;
LABEL_10:
  v25 = 0u;
  v23 = 0u;
  v24[0] = 0u;
  v22 = 0u;
  v11 = physx::Dy::solveExt1D(a1, &v30, &v28, &v29, &v27, &v25, v24, (float32x4_t *)&v23, (float32x4_t *)&v22);
  v12 = *(_DWORD **)a1;
  v13 = *(unsigned __int16 *)(a1 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    (*(void (**)(_DWORD *, uint64_t, float32x4_t *, __n128 *, _QWORD, float32x4_t *, __n128 *, _QWORD, float32x4_t, _QWORD))(*(_QWORD *)v12 + 264))(v12, v13, &v25, &v23, *(unsigned __int16 *)(a1 + 18), v24, &v22, *(_QWORD *)(a2 + 56), v11, *(_QWORD *)(a2 + 64));
  }
  else
  {
    if ((_DWORD)v13 == 0xFFFF)
    {
      v15 = v30.i32[2];
      *(_QWORD *)v12 = v30.i64[0];
      v12[2] = v15;
      v16 = *(_DWORD **)a1;
      v17 = v29.i32[2];
      *((_QWORD *)v16 + 2) = v29.i64[0];
      v16[6] = v17;
    }
    else
    {
      (*(void (**)(_DWORD *, uint64_t, _QWORD, _QWORD, float32x4_t, __n128))(*(_QWORD *)v12 + 256))(v12, v13, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v25, v23);
    }
    v18 = *(unsigned __int16 *)(a1 + 18);
    if ((_DWORD)v18 == 0xFFFF)
    {
      v19 = *(_QWORD *)(a1 + 8);
      v20 = v28.i32[2];
      *(_QWORD *)v19 = v28.i64[0];
      *(_DWORD *)(v19 + 8) = v20;
      v21 = *(_QWORD *)(a1 + 8);
      result = v27.f32[2];
      *(_QWORD *)(v21 + 16) = v27.i64[0];
      *(float *)(v21 + 24) = result;
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float32x4_t, __n128))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), v18, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v24[0], v22);
    }
  }
  return result;
}

float32x2_t physx::Dy::solveExtContacts(float32x4_t *a1, unsigned int a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, double a9, double a10, double a11, double a12, float32x4_t *a13, float32x4_t *a14, float32x4_t *a15, float *a16)
{
  float *v16;
  uint64_t v17;
  float32x2_t result;
  const float *v20;
  float32x4_t v26;
  float32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  const float *v30;
  float32x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x2_t v40;

  if (a2)
  {
    v16 = a16;
    v17 = a2;
    _X13 = a1 + 4;
    result = 0;
    v20 = a16;
    do
    {
      __asm { PRFM            #0, [X13,#0x30] }
      v27 = _X13[-4];
      v26 = _X13[-3];
      v28 = vld1_dup_f32(v20++);
      LODWORD(a12) = _X13[-2].i32[0];
      v29 = vsubq_f32(vmlaq_f32(vmulq_f32(v27, *a5), *a3, *a4), vmlaq_f32(vmulq_f32(v26, *a7), *a3, *a6));
      v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
      v30 = &_X13[-2].f32[1];
      v31 = vld1_dup_f32(v30);
      a12 = COERCE_DOUBLE(vmax_f32(vmls_lane_f32(v31, vpadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), *(float32x2_t *)&a12, 0), vneg_f32(v28)));
      v32 = (int8x16_t)vmlaq_n_f32(*a4, _X13[-1], *(float *)&a12);
      v32.i64[1] = vextq_s8(v32, v32, 8uLL).u32[0];
      *a4 = (float32x4_t)v32;
      v33 = (int8x16_t)vmlaq_n_f32(*a5, *_X13, *(float *)&a12);
      v33.i64[1] = vextq_s8(v33, v33, 8uLL).u32[0];
      *a5 = (float32x4_t)v33;
      v34 = (int8x16_t)vmlaq_n_f32(*a6, _X13[1], *(float *)&a12);
      v34.i64[1] = vextq_s8(v34, v34, 8uLL).u32[0];
      *a6 = (float32x4_t)v34;
      v35 = (int8x16_t)vmlaq_n_f32(*a7, _X13[2], *(float *)&a12);
      v35.i64[1] = vextq_s8(v35, v35, 8uLL).u32[0];
      *a7 = (float32x4_t)v35;
      v36 = (int8x16_t)vmlaq_n_f32(*a8, *a3, *(float *)&a12);
      v36.i64[1] = vextq_s8(v36, v36, 8uLL).u32[0];
      *a8 = (float32x4_t)v36;
      v37 = (int8x16_t)vmlaq_n_f32(*a13, v27, *(float *)&a12);
      v37.i64[1] = vextq_s8(v37, v37, 8uLL).u32[0];
      *a13 = (float32x4_t)v37;
      v38 = (int8x16_t)vmlaq_n_f32(*a14, *a3, *(float *)&a12);
      v38.i64[1] = vextq_s8(v38, v38, 8uLL).u32[0];
      *a14 = (float32x4_t)v38;
      v39 = (int8x16_t)vmlaq_n_f32(*a15, v26, *(float *)&a12);
      v39.i64[1] = vextq_s8(v39, v39, 8uLL).u32[0];
      *a15 = (float32x4_t)v39;
      v40 = vadd_f32(v28, *(float32x2_t *)&a12);
      *v16 = v40.f32[0];
      result = vadd_f32(result, v40);
      _X13 += 7;
      v16 = (float *)v20;
      --v17;
    }
    while (v17);
  }
  else
  {
    return 0;
  }
  return result;
}

double physx::Dy::solveExtContact(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, float32x4_t *a8, double result, __n128 a10, int8x16_t a11, int8x16_t a12, float32x4_t *a13, char a14)
{
  unsigned int v19;
  uint64_t v20;
  float *v26;
  uint64_t v27;
  float32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  int8x16_t v42;
  uint64_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  const float *v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x2_t v52;
  int32x2_t v53;
  float32x2_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  __int128 v59;
  int8x16_t v60;
  int8x16_t v61;
  float32x2_t v62;
  char *v63;
  int32x4_t v67;
  float32x4_t v68;
  __n128 v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72[2];

  if (*(_WORD *)(a1 + 30))
  {
    _X27 = *(char **)(a1 + 32);
    v63 = &_X27[16 * *(unsigned __int16 *)(a1 + 30)];
    do
    {
      v19 = _X27[2];
      v20 = _X27[3];
      __asm { PRFM            #0, [X27,#0x50] }
      v26 = (float *)&_X27[112 * _X27[2] + 80];
      v27 = (4 * v19 + 12) & 0x7F0;
      _X20 = (char *)v26 + v27;
      v71 = 0u;
      v72[0] = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = *((int32x4_t *)_X27 + 2);
      v29 = (float32x4_t)v67;
      v29.i32[3] = 0;
      v68 = v29;
      v30 = physx::Dy::solveExtContacts((float32x4_t *)_X27 + 5, v19, &v68, a2, a4, a3, a5, v72, *(double *)v67.i64, a10.n128_f64[0], *(double *)a11.i64, *(double *)a12.i64, &v70, &v71, (float32x4_t *)&v69, v26);
      v31 = v71;
      v32 = v72[0];
      a10 = v69;
      v33 = v70;
      if (a14 && (_DWORD)v20)
      {
        v34 = vmax_f32(v30, (float32x2_t)vdup_laneq_s32(v67, 3));
        __asm { PRFM            #0, [X20] }
        v36 = *(float32x2_t *)(_X27 + 16);
        v37 = vmul_n_f32(v34, v36.f32[0]);
        v38 = vmul_lane_f32(v34, v36, 1);
        v39 = vneg_f32(v38);
        v40 = vneg_f32(v37);
        _X8 = (uint64_t)&_X27[112 * v19 + 112 + v27];
        v42 = 0uLL;
        v43 = v20;
        do
        {
          __asm { PRFM            #0, [X8,#0x60] }
          v45 = *(float32x4_t *)(_X8 - 32);
          v46 = *(float32x4_t *)_X8;
          v47 = *(float32x4_t *)(_X8 - 16);
          v47.i32[3] = 0;
          v48 = (float32x2_t)vdup_laneq_s32((int32x4_t)v45, 3);
          v45.i32[3] = 0;
          v46.i32[3] = 0;
          v49 = (const float *)(_X8 + 16);
          v50 = vld1_dup_f32(v49);
          v51 = vsubq_f32(vmlaq_f32(vmulq_f32(v47, *a4), v45, *a2), vmlaq_f32(vmulq_f32(v46, *a5), v45, *a3));
          v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
          v52 = vmls_laneq_f32(vmls_laneq_f32(v48, vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)_X8, 3), v50), *(float32x4_t *)(_X8 - 16), 3), vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32), *(float32x4_t *)(_X8 - 16), 3);
          v53 = vcgt_f32(v40, v52);
          *(int32x2_t *)v51.f32 = vcgt_f32(v52, v37);
          v54 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(v53, 0), (int8x8_t)vmax_f32(v39, v52), vbsl_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v51.f32, 0), (int8x8_t)vmin_f32(v38, v52), (int8x8_t)v52));
          v48.i32[0] = vsub_f32(v54, v48).u32[0];
          v55 = (int8x16_t)vmlaq_n_f32(*a2, *(float32x4_t *)(_X8 + 32), v48.f32[0]);
          v55.i64[1] = vextq_s8(v55, v55, 8uLL).u32[0];
          *a2 = (float32x4_t)v55;
          v56 = (int8x16_t)vmlaq_n_f32(*a4, *(float32x4_t *)(_X8 + 48), v48.f32[0]);
          v56.i64[1] = vextq_s8(v56, v56, 8uLL).u32[0];
          *a4 = (float32x4_t)v56;
          v57 = (int8x16_t)vmlaq_n_f32(*a3, *(float32x4_t *)(_X8 + 64), v48.f32[0]);
          v57.i64[1] = vextq_s8(v57, v57, 8uLL).u32[0];
          *a3 = (float32x4_t)v57;
          v58 = (int8x16_t)vmlaq_n_f32(*a5, *(float32x4_t *)(_X8 + 80), v48.f32[0]);
          v42 = vorrq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)vorr_s8((int8x8_t)v53, *(int8x8_t *)v51.f32), 0), v42);
          v58.i64[1] = vextq_s8(v58, v58, 8uLL).u32[0];
          *a5 = (float32x4_t)v58;
          v32 = vmlaq_n_f32(v32, v45, v48.f32[0]);
          v32.i64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u32[0];
          v33 = vmlaq_n_f32(v33, v47, v48.f32[0]);
          v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
          v31 = vmlaq_n_f32(v31, v45, v48.f32[0]);
          v31.i64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u32[0];
          a10 = (__n128)vmlaq_n_f32((float32x4_t)a10, v46, v48.f32[0]);
          a10.n128_u64[1] = vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL).u32[0];
          v59 = *(_OWORD *)(_X8 - 32);
          HIDWORD(v59) = v54.i32[1];
          *(_OWORD *)(_X8 - 32) = v59;
          _X8 += 128;
          --v43;
        }
        while (v43);
        *((_DWORD *)_X27 + 13) = v42.i32[0];
      }
      v60 = (int8x16_t)vmlaq_laneq_f32(*a6, v32, *((float32x4_t *)_X27 + 1), 2);
      v60.i64[1] = vextq_s8(v60, v60, 8uLL).u32[0];
      *a6 = (float32x4_t)v60;
      v61 = (int8x16_t)vmlaq_n_f32(*a8, v33, *((float *)_X27 + 1));
      v61.i64[1] = vextq_s8(v61, v61, 8uLL).u32[0];
      *a8 = (float32x4_t)v61;
      a12 = (int8x16_t)vmlsq_laneq_f32(*a7, v31, *((float32x4_t *)_X27 + 1), 3);
      v62 = (float32x2_t)vextq_s8(a12, a12, 8uLL).u32[0];
      a12.i64[1] = v62.u32[0];
      *a7 = (float32x4_t)a12;
      v62.i32[0] = *((_DWORD *)_X27 + 2);
      a11 = (int8x16_t)vmlsq_lane_f32(*a13, (float32x4_t)a10, v62, 0);
      *(_QWORD *)&result = vextq_s8(a11, a11, 8uLL).u32[0];
      a11.i64[1] = LODWORD(result);
      *a13 = (float32x4_t)a11;
      _X27 = &_X20[128 * v20];
    }
    while (_X27 < v63);
  }
  return result;
}

float physx::Dy::solveExtContact(uint64_t a1, uint64_t a2, double a3, double a4, int8x16_t a5, int8x16_t a6)
{
  _DWORD *v8;
  float32x4_t v9;
  __n128 v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  double v14;
  _DWORD *v15;
  uint64_t v16;
  float result;
  __int32 v18;
  _DWORD *v19;
  __int32 v20;
  uint64_t v21;
  uint64_t v22;
  __int32 v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  float32x4_t v27[2];
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;

  v8 = *(_DWORD **)a1;
  if (v8 == *(_DWORD **)(a1 + 8))
  {
    (*(void (**)(_DWORD *, _QWORD, _QWORD, float32x4_t *, float32x4_t *))(*(_QWORD *)v8 + 304))(v8, *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), &v28, v27);
    v32 = v29;
    v33 = v28;
    v11 = v27[0];
    v10 = (__n128)v27[1];
LABEL_8:
    v30 = (float32x4_t)v10;
    v31 = v11;
    goto LABEL_10;
  }
  if (*(unsigned __int16 *)(a1 + 16) == 0xFFFF)
  {
    v9.i64[0] = *(_QWORD *)v8;
    v9.i64[1] = v8[2];
    v10.n128_u64[0] = *((_QWORD *)v8 + 2);
    v10.n128_u64[1] = v8[6];
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)v8 + 312))(&v28);
    v9 = v28;
    v10 = (__n128)v29;
  }
  v32 = (float32x4_t)v10;
  v33 = v9;
  if (*(unsigned __int16 *)(a1 + 18) != 0xFFFF)
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 312))(&v28);
    v11 = v28;
    v10 = (__n128)v29;
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(a1 + 8);
  v13.i64[0] = *(_QWORD *)v12;
  v13.i64[1] = *(unsigned int *)(v12 + 8);
  v31 = v13;
  v13.i64[0] = *(_QWORD *)(v12 + 16);
  v13.i64[1] = *(unsigned int *)(v12 + 24);
  v30 = v13;
LABEL_10:
  v28 = 0u;
  v26 = 0u;
  v27[0] = 0u;
  v25 = 0u;
  v14 = physx::Dy::solveExtContact(a1, &v33, &v31, &v32, &v30, &v28, v27, (float32x4_t *)&v26, 0.0, v10, a5, a6, (float32x4_t *)&v25, *(_BYTE *)a2);
  v15 = *(_DWORD **)a1;
  v16 = *(unsigned __int16 *)(a1 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    (*(void (**)(_DWORD *, uint64_t, float32x4_t *, __n128 *, _QWORD, float32x4_t *, __n128 *, _QWORD, double, _QWORD))(*(_QWORD *)v15 + 264))(v15, v16, &v28, &v26, *(unsigned __int16 *)(a1 + 18), v27, &v25, *(_QWORD *)(a2 + 56), v14, *(_QWORD *)(a2 + 64));
  }
  else
  {
    if ((_DWORD)v16 == 0xFFFF)
    {
      v18 = v33.i32[2];
      *(_QWORD *)v15 = v33.i64[0];
      v15[2] = v18;
      v19 = *(_DWORD **)a1;
      v20 = v32.i32[2];
      *((_QWORD *)v19 + 2) = v32.i64[0];
      v19[6] = v20;
    }
    else
    {
      (*(void (**)(_DWORD *, uint64_t, _QWORD, _QWORD, float32x4_t, __n128))(*(_QWORD *)v15 + 256))(v15, v16, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v28, v26);
    }
    v21 = *(unsigned __int16 *)(a1 + 18);
    if ((_DWORD)v21 == 0xFFFF)
    {
      v22 = *(_QWORD *)(a1 + 8);
      v23 = v31.i32[2];
      *(_QWORD *)v22 = v31.i64[0];
      *(_DWORD *)(v22 + 8) = v23;
      v24 = *(_QWORD *)(a1 + 8);
      result = v30.f32[2];
      *(_QWORD *)(v24 + 16) = v30.i64[0];
      *(float *)(v24 + 24) = result;
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, float32x4_t, __n128))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), v21, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v27[0], v25);
    }
  }
  return result;
}

void physx::Dy::solveExtContactBlock(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v9;

  if (a2)
  {
    v9 = a2;
    do
    {
      *(float *)&a4 = physx::Dy::solveExtContact(a1, a3, a4, a5, a6, a7);
      a1 += 48;
      --v9;
    }
    while (v9);
  }
}

uint64_t physx::Dy::solveExtContactConcludeBlock(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    v8 = result;
    v9 = a2;
    do
    {
      physx::Dy::solveExtContact(v8, a3, a4, a5, a6, a7);
      result = physx::Dy::concludeContact(v8);
      v8 += 48;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t physx::Dy::solveExtContactBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;

  if (a2)
  {
    v8 = result;
    v9 = a2;
    do
    {
      if (*(__int16 *)(v8 + 16) == -1)
        v10 = *(_DWORD *)(v8 + 20);
      else
        v10 = 0;
      if (*(__int16 *)(v8 + 18) == -1)
        v11 = *(_DWORD *)(v8 + 24);
      else
        v11 = 0;
      v12 = *(_QWORD *)(a3 + 24);
      v13 = v12 + 112 * v10;
      v14 = v12 + 112 * v11;
      physx::Dy::solveExtContact(v8, a3, a4, a5, a6, a7);
      result = physx::Dy::writeBackContact(v8, a3, v13, v14);
      v8 += 48;
      --v9;
    }
    while (v9);
  }
  v15 = *(_DWORD *)(a3 + 16);
  if (v15)
  {
    v16 = *(unsigned int **)(a3 + 48);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + v15, v16));
    v18 = *(_DWORD *)(a3 + 16);
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = v15 - v18 + v17;
      do
      {
        v22 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v19);
        v23 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v21 + v20));
        v24 = v22[1];
        *v23 = *v22;
        v23[1] = v24;
        ++v20;
        v19 += 32;
      }
      while (v20 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

void physx::Dy::solveExt1DBlock(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = a2;
    do
    {
      physx::Dy::solveExt1D(a1, a3);
      a1 += 48;
      --v5;
    }
    while (v5);
  }
}

void physx::Dy::solveExt1DConcludeBlock(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  if (a2)
  {
    v5 = 0;
    v6 = a2;
    do
    {
      physx::Dy::solveExt1D(a1 + 48 * v5, a3);
      v7 = *(unsigned __int8 **)(a1 + 48 * v5 + 32);
      if (v7)
      {
        v8 = v7[1];
        if (v7[1])
        {
          v10 = *v7;
          v9 = v7 + 76;
          if (v10 == 4)
            v11 = 160;
          else
            v11 = 96;
          do
          {
            *(v9 - 4) = *v9;
            v9 = (_DWORD *)((char *)v9 + v11);
            --v8;
          }
          while (v8);
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

uint64_t physx::Dy::solveExt1DBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    v4 = result;
    v5 = a2;
    do
    {
      physx::Dy::solveExt1D(v4, a3);
      result = physx::Dy::writeBack1D(v4);
      v4 += 48;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t physx::Dy::writeBackContact4_Block(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  float32x4_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  __n128 *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int16 *v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int32 v41;
  __n128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int16 *)(result + 30);
  v8 = *(_QWORD *)(result + 32);
  v7 = *(_DWORD **)(result + 40);
  v9 = *(_DWORD **)(result + 88);
  v10 = *(_DWORD **)(result + 136);
  v11 = *(_DWORD **)(result + 184);
  if (*(_BYTE *)v8 == 7)
    v12 = 144;
  else
    v12 = 96;
  v41 = 0;
  v13 = 0uLL;
  if (v6)
  {
    v14 = v8 + 16 * v6;
    do
    {
      v15 = v8 + 208;
      v16 = *(unsigned __int8 *)(v8 + 1);
      v17 = *(unsigned __int8 *)(v8 + 2);
      v18 = 16 * v16;
      if ((*(_BYTE *)(v8 + 3) & 1) != 0)
        v19 = 16 * v16;
      else
        v19 = 0;
      if (*(_BYTE *)(v8 + 2))
        v20 = 9;
      else
        v20 = 0;
      a6.n128_u32[0] = *(_DWORD *)(v8 + 4);
      a6 = (__n128)vmovl_u8((uint8x8_t)a6.n128_u64[0]);
      a6.n128_u32[0] &= 0xFF01FF01;
      a6.n128_u16[2] &= 0xFF01u;
      a6.n128_u16[3] &= 0xFF01u;
      a6.n128_u64[0] = (unint64_t)vmovn_s16((int16x8_t)a6);
      v41 = a6.n128_u32[0];
      if (v16)
      {
        for (i = 0; i != v16; ++i)
        {
          a6 = *(__n128 *)(v15 + 16 * i);
          if (v7 && i < *(unsigned __int8 *)(v8 + 8))
            *v7++ = a6.n128_u32[0];
          if (v9 && i < *(unsigned __int8 *)(v8 + 9))
            *v9++ = a6.n128_u32[1];
          if (v10 && i < *(unsigned __int8 *)(v8 + 10))
            *v10++ = a6.n128_u32[2];
          if (v11 && i < *(unsigned __int8 *)(v8 + 11))
            *v11++ = a6.n128_u32[3];
          v13 = vaddq_f32(v13, (float32x4_t)a6);
        }
      }
      v22 = (v12 * v16);
      v23 = (__n128 *)(v15 + 16 * v16 + v19 + v22);
      if ((_DWORD)v17)
      {
        v24 = 0;
        a6 = *v23;
        v42 = *v23;
        v25 = v8 + 12;
        v26 = v8 + v19 + v18 + v22 + 224;
        do
        {
          if (*(_BYTE *)(v25 + v24) && v42.n128_u32[v24])
            **(_BYTE **)(v26 + 8 * v24) = 1;
          ++v24;
        }
        while (v24 != 4);
      }
      v8 = (unint64_t)v23[v20 + v17].n128_u64 + (v12 * v17);
    }
    while (v8 < v14);
    v8 = *(_QWORD *)(result + 32);
  }
  v27 = 0;
  v28 = v8 + 176;
  v42 = (__n128)v13;
  v29 = (__int16 *)(result + 18);
  do
  {
    if (*((_BYTE *)&v41 + v27))
    {
      if (*(v29 - 1) == -1 && *v29 == -1)
      {
        v30 = v42.n128_f32[v27];
        if (v30 != 0.0)
        {
          v31 = *(_QWORD *)(a3 + 8 * v27);
          v32 = *(float *)(v31 + 28);
          v33 = *(_QWORD *)(a4 + 8 * v27);
          v34 = *(float *)(v33 + 28);
          if (v32 < 3.4028e38 || v34 < 3.4028e38)
          {
            if (v32 >= v34)
              v32 = *(float *)(v33 + 28);
            v36 = *(_DWORD *)(v31 + 72) << 7;
            v37 = *(_DWORD *)(v33 + 72) << 7;
            v38 = *(_QWORD *)(v28 + 8 * v27);
            v39 = *(unsigned int *)(a2 + 16);
            *(_DWORD *)(a2 + 16) = v39 + 1;
            result = *(_QWORD *)(a2 + 8) + 32 * v39;
            *(_QWORD *)result = v38;
            if (v37 >= v36)
              v40 = v36;
            else
              v40 = v37;
            if (v37 <= v36)
              v37 = v36;
            *(float *)(result + 8) = v30;
            *(float *)(result + 12) = v32;
            *(_DWORD *)(result + 16) = v40;
            *(_DWORD *)(result + 20) = v37;
          }
        }
      }
    }
    ++v27;
    v29 += 24;
  }
  while (v27 != 4);
  return result;
}

int32x4_t **physx::Dy::solveContactPreBlock(int32x4_t **a1, uint64_t a2, _BYTE *a3)
{
  return physx::Dy::solveContact4_Block(a1, a3);
}

int32x4_t **physx::Dy::solveContact4_Block(int32x4_t **result, _BYTE *a2)
{
  int32x4_t *v2;
  float *v3;
  int32x4_t *v4;
  int32x4_t *v5;
  int32x4_t *v6;
  int32x4_t *v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t *v11;
  int32x4_t *v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t *v19;
  float *v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float *v24;
  int32x4_t v25;
  float *i32;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  uint64_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  __int8 v60;
  int32x4_t *v61;
  uint64_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t v74;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t *v94;
  float32x4_t *v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  float32x4_t *v112;
  float32x4_t *v113;
  float32x4_t *v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x2x2_t v135;
  float32x2x2_t v136;
  int32x4_t v137;
  int32x4_t v138;
  float32x2x2_t v139;
  int32x4_t v140;
  float32x2x2_t v141;
  float32x2x2_t v142;
  int32x4_t v143;
  int32x4_t v144;
  float32x2x2_t v145;
  int32x4_t v146;
  float32x2x2_t v147;
  int32x4_t v148;
  float32x2x2_t v149;
  int32x4_t v150;
  float *v151;
  float *v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  int32x4_t v160;

  v3 = (float *)*result;
  v2 = result[1];
  v5 = result[6];
  v4 = result[7];
  v7 = result[12];
  v6 = result[13];
  v8 = **result;
  v9 = vzip1q_s32(v8, *v7);
  v10 = vzip2q_s32(v8, *v7);
  v12 = result[18];
  v11 = result[19];
  v13 = v5[1];
  v14 = v12[1];
  v15 = vzip1q_s32(*v5, *v12);
  v16 = vzip2q_s32(*v5, *v12);
  v17 = (float32x4_t)vzip1q_s32(v9, v15);
  v18 = (float32x4_t)vzip2q_s32(v9, v15);
  v19 = *result + 1;
  v21 = v2[1];
  v22 = v4[1];
  v23 = *v6;
  v25 = v7[1];
  v152 = (float *)v6;
  v27 = v6[1];
  i32 = (float *)v6[1].i32;
  v28 = v11[1];
  v29 = (float32x4_t)vzip1q_s32(v10, v16);
  v154 = vzip2q_s32(v10, v16);
  v30 = vzip1q_s32(*v2, v23);
  v31 = vzip2q_s32(*v2, v23);
  v32 = vzip1q_s32(*v4, *v11);
  v33 = vzip2q_s32(*v4, *v11);
  v34 = (float32x4_t)vzip1q_s32(v30, v32);
  v35 = (float32x4_t)vzip2q_s32(v30, v32);
  v36 = (float32x4_t)vzip1q_s32(v31, v33);
  v156 = vzip2q_s32(v31, v33);
  v37 = vzip1q_s32(*v19, v25);
  v38 = vzip2q_s32(*v19, v25);
  v39 = vzip1q_s32(v13, v14);
  v40 = vzip2q_s32(v13, v14);
  v41 = (float32x4_t)vzip1q_s32(v37, v39);
  v42 = (float32x4_t)vzip2q_s32(v37, v39);
  v43 = (float32x4_t)vzip1q_s32(v38, v40);
  v153 = vzip2q_s32(v38, v40);
  v44 = vzip1q_s32(v21, v27);
  v45 = vzip2q_s32(v21, v27);
  v46 = vzip1q_s32(v22, v28);
  v47 = vzip2q_s32(v22, v28);
  v48 = (float32x4_t)vzip1q_s32(v44, v46);
  v49 = (float32x4_t)vzip2q_s32(v44, v46);
  v50 = (float32x4_t)vzip1q_s32(v45, v47);
  v155 = vzip2q_s32(v45, v47);
  v51 = (float32x4_t *)result[4];
  v52 = *((unsigned __int16 *)result + 15);
  v160 = vdupq_n_s32(0x7F7FFFFFu);
  if (v52)
  {
    v53 = &v51[v52];
    v54 = v51[4];
    v55 = vaddq_f32(v54, v51[5]);
    _X8 = v51 + 22;
    v157 = v55;
    v158 = v51[5];
    do
    {
      v57 = v51 + 13;
      v58 = v51->u8[1];
      v59 = v51->u8[2];
      v60 = v51->i8[3];
      if ((v60 & 1) != 0)
        v61 = (int32x4_t *)&v51[9 * v51->u8[1] + 13 + v51->u8[1]];
      else
        v61 = &v160;
      if ((v51->i8[3] & 1) != 0)
        v62 = v58;
      else
        v62 = 0;
      if (v51->i8[2])
        v63 = 9;
      else
        v63 = 0;
      v64 = v51[6];
      v65 = v51[7];
      v66 = v51[8];
      v159 = v51[10];
      if (v51->i8[1])
      {
        v67 = v54;
        v68 = 0;
        v69 = v51[9];
        v70 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, v66), v69, v18), v51[10], v29), vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v66), v69, v35), v51[10], v36));
        v71 = &v51[v58 + 21];
        v72 = 0uLL;
        _X19 = _X8;
        v74 = 0uLL;
        do
        {
          __asm
          {
            PRFM            #0, [X19,#0x40]
            PRFM            #0, [X19,#0x80]
          }
          _X8 = _X19 + 12;
          __asm { PRFM            #0, [X19,#0xC0] }
          v82 = v57[v68];
          if ((v60 & 1) != 0)
            v83 = v68;
          else
            v83 = 0;
          v84 = v71[-8];
          v85 = v71[-7];
          v86 = v71[-2];
          v87 = v71[-1];
          v88 = *v71;
          v89 = v71[-6];
          v90 = vminq_f32(vaddq_f32(v82, vmaxq_f32(vmlsq_f32(v71[-3], v71[-5], vaddq_f32(v70, vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v41, v84), v42, v85), v43, v89), vmlaq_f32(vmlaq_f32(vmulq_f32(v48, v86), v49, v87), v50, *v71)))), vnegq_f32(v82))), (float32x4_t)v61[v83]);
          v91 = vsubq_f32(v90, v82);
          v74 = vaddq_f32(v74, v91);
          v92 = vmulq_f32(v64, v91);
          v93 = vmulq_f32(v65, v91);
          v70 = vmlaq_f32(v70, v91, v55);
          v41 = vmlaq_f32(v41, v92, v84);
          v48 = vmlsq_f32(v48, v93, v86);
          v42 = vmlaq_f32(v42, v92, v85);
          v49 = vmlsq_f32(v49, v93, v87);
          v43 = vmlaq_f32(v43, v92, v89);
          v57[v68] = v90;
          v50 = vmlsq_f32(v50, v93, v88);
          v72 = vaddq_f32(v72, v90);
          ++v68;
          v71 += 9;
          _X19 = _X8;
        }
        while (v58 != v68);
      }
      else
      {
        v69 = v51[9];
        v67 = v54;
        v74 = 0uLL;
        v72 = 0uLL;
      }
      v94 = (int8x16_t *)&v51[9 * v58 + 13 + v58 + v62];
      v95 = (float32x4_t *)&v94[v63];
      v96 = &v95[v59];
      v54 = v67;
      v97 = vmulq_f32(v67, v74);
      v98 = vmulq_f32(v158, v74);
      v17 = vmlaq_f32(v17, v97, v66);
      v34 = vmlsq_f32(v34, v98, v66);
      v18 = vmlaq_f32(v18, v97, v69);
      v35 = vmlsq_f32(v35, v98, v69);
      v29 = vmlaq_f32(v29, v97, v159);
      v36 = vmlsq_f32(v36, v98, v159);
      if ((_DWORD)v59 && *a2)
      {
        v99 = v51[2];
        v100 = v51[3];
        if (a2[1])
        {
          _X19 = v94[1].i64[0];
          __asm { PRFM            #0, [X19] }
          _X19 = v94[1].i64[1];
          __asm { PRFM            #0, [X19] }
          _X19 = v94[2].i64[0];
          __asm { PRFM            #0, [X19] }
        }
        v107 = 0;
        v108 = vmulq_f32(v72, v99);
        v109 = vmulq_f32(v72, v100);
        v110 = vnegq_f32(v109);
        v111 = 0uLL;
        v112 = &v95[v59];
        do
        {
          v113 = _X8;
          __asm
          {
            PRFM            #0, [X8,#0x40]
            PRFM            #0, [X8,#0x80]
            PRFM            #0, [X8,#0xC0]
            PRFM            #0, [X8,#0x100]
          }
          v118 = (float32x4_t *)&v94[v107 & 1];
          v119 = v118[3];
          v120 = v118[5];
          v121 = v118[7];
          v122 = v112[1];
          v123 = v112[6];
          v124 = v112[7];
          v125 = v112[2];
          v126 = v112[8];
          v127 = vmlsq_f32(vsubq_f32(*v95, v112[3]), v112[4], vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v17, v119), v120, v18), v121, v29), vmlaq_f32(vmlaq_f32(vmulq_f32(v41, *v112), v42, v122), v43, v125)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v119), v120, v35), v121, v36), vmlaq_f32(vmlaq_f32(vmulq_f32(v48, v123), v49, v124), v50, v126))));
          v111 = vorrq_s8(v111, (int8x16_t)vcgtq_f32(vabsq_f32(v127), v108));
          v128 = (float32x4_t)vbslq_s8(v111, (int8x16_t)vminq_f32(v109, vmaxq_f32(v110, v127)), (int8x16_t)v127);
          v129 = vsubq_f32(v128, *v95);
          *v95++ = v128;
          v130 = vmulq_f32(v67, v129);
          v131 = vmulq_f32(v158, v129);
          v17 = vmlaq_f32(v17, v130, v119);
          v34 = vmlsq_f32(v34, v131, v119);
          v18 = vmlaq_f32(v18, v130, v120);
          v35 = vmlsq_f32(v35, v131, v120);
          v29 = vmlaq_f32(v29, v130, v121);
          v36 = vmlsq_f32(v36, v131, v121);
          v132 = vmulq_f32(v64, v129);
          v133 = *v112;
          v112 += 9;
          v41 = vmlaq_f32(v41, v132, v133);
          v42 = vmlaq_f32(v42, v132, v122);
          v43 = vmlaq_f32(v43, v132, v125);
          v134 = vmulq_f32(v65, v129);
          v48 = vmlsq_f32(v48, v134, v123);
          v49 = vmlsq_f32(v49, v134, v124);
          v50 = vmlsq_f32(v50, v134, v126);
          _X8 = v113 + 16;
          ++v107;
        }
        while (v59 != v107);
        *v94 = v111;
        v54 = v67;
        v55 = v157;
      }
      v51 = &v96[9 * v59];
    }
    while (v51 < v53);
  }
  v135 = (float32x2x2_t)vzip1q_s32((int32x4_t)v17, (int32x4_t)v29);
  v136 = (float32x2x2_t)vzip2q_s32((int32x4_t)v17, (int32x4_t)v29);
  v137 = vzip1q_s32((int32x4_t)v18, v154);
  v138 = vzip2q_s32((int32x4_t)v18, v154);
  v139 = (float32x2x2_t)vzip1q_s32((int32x4_t)v34, (int32x4_t)v36);
  v140 = vzip1q_s32((int32x4_t)v35, v156);
  v141 = (float32x2x2_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v43);
  v142 = (float32x2x2_t)vzip2q_s32((int32x4_t)v41, (int32x4_t)v43);
  v143 = vzip1q_s32((int32x4_t)v42, v153);
  v144 = vzip2q_s32((int32x4_t)v42, v153);
  vst2_f32(v3, v135);
  vst2_f32((float *)v19->i32, v141);
  *v5 = vzip2q_s32((int32x4_t)v135, v137);
  v5[1] = vzip2q_s32((int32x4_t)v141, v143);
  vst2_f32((float *)v7->i32, v136);
  v24 = (float *)v7[1].i32;
  vst2_f32(v24, v142);
  *v12 = vzip2q_s32((int32x4_t)v136, v138);
  v12[1] = vzip2q_s32((int32x4_t)v142, v144);
  v145 = (float32x2x2_t)vzip1q_s32((int32x4_t)v48, (int32x4_t)v50);
  v146 = vzip1q_s32((int32x4_t)v49, v155);
  if (*((_DWORD *)result + 6))
  {
    vst2_f32((float *)v2->i32, v139);
    v20 = (float *)v2[1].i32;
    vst2_f32(v20, v145);
  }
  if (*((_DWORD *)result + 18))
  {
    *v4 = vzip2q_s32((int32x4_t)v139, v140);
    v4[1] = vzip2q_s32((int32x4_t)v145, v146);
  }
  v147 = (float32x2x2_t)vzip2q_s32((int32x4_t)v34, (int32x4_t)v36);
  v148 = vzip2q_s32((int32x4_t)v35, v156);
  v149 = (float32x2x2_t)vzip2q_s32((int32x4_t)v48, (int32x4_t)v50);
  v150 = vzip2q_s32((int32x4_t)v49, v155);
  if (*((_DWORD *)result + 30))
  {
    v151 = v152;
    vst2_f32(v151, v147);
    vst2_f32(i32, v149);
  }
  if (*((_DWORD *)result + 42))
  {
    *v11 = vzip2q_s32((int32x4_t)v147, v148);
    v11[1] = vzip2q_s32((int32x4_t)v149, v150);
  }
  return result;
}

double physx::Dy::solveContactPreBlock_Static(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  double result;

  *(_QWORD *)&result = physx::Dy::solveContact4_StaticBlock(a1, a3).u64[0];
  return result;
}

int32x4_t physx::Dy::solveContact4_StaticBlock(uint64_t a1, _BYTE *a2)
{
  int32x4_t *v2;
  int32x4_t *v3;
  int32x4_t *v4;
  int32x4_t *v5;
  unint64_t v6;
  uint64_t v7;
  float *i32;
  int32x4_t v9;
  int32x4_t v10;
  float *v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int32x4_t *v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v48;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t *v63;
  float32x4_t *v64;
  float32x4_t v65;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t *v78;
  int8x16_t v79;
  float32x4_t *v80;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  float32x2x2_t v100;
  float32x2x2_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x2x2_t v104;
  float32x2x2_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t result;
  int32x4_t v109;

  v2 = *(int32x4_t **)a1;
  v3 = *(int32x4_t **)(a1 + 48);
  v4 = *(int32x4_t **)(a1 + 96);
  v5 = *(int32x4_t **)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(unsigned __int16 *)(a1 + 30);
  v109 = vdupq_n_s32(0x7F7FFFFFu);
  v9 = v2[1];
  v10 = v3[1];
  v12 = v4[1];
  v13 = vzip1q_s32(*v2, *v4);
  v14 = vzip2q_s32(*v2, *v4);
  v15 = v5[1];
  v16 = vzip1q_s32(*v3, *v5);
  v17 = vzip2q_s32(*v3, *v5);
  v18 = (float32x4_t)vzip1q_s32(v13, v16);
  v19 = (float32x4_t)vzip2q_s32(v13, v16);
  v20 = (float32x4_t)vzip1q_s32(v14, v17);
  v21 = vzip1q_s32(v9, v12);
  v22 = vzip2q_s32(v9, v12);
  v23 = vzip1q_s32(v10, v15);
  v24 = vzip2q_s32(v10, v15);
  v25 = (float32x4_t)vzip1q_s32(v21, v23);
  v26 = (float32x4_t)vzip2q_s32(v21, v23);
  v27 = (float32x4_t)vzip1q_s32(v22, v24);
  if (v7)
  {
    v28 = *(float32x4_t *)(v6 + 64);
    _X2 = v6 + 304;
    v30 = v6 + 16 * v7;
    do
    {
      v31 = v6 + 208;
      v32 = *(unsigned __int8 *)(v6 + 1);
      v33 = *(unsigned __int8 *)(v6 + 2);
      v34 = *(_BYTE *)(v6 + 3);
      v35 = 16 * v32;
      v36 = v6 + 208 + 16 * v32;
      v37 = v36 + 96 * v32;
      if ((v34 & 1) != 0)
        v38 = (int32x4_t *)(v36 + 96 * *(unsigned __int8 *)(v6 + 1));
      else
        v38 = &v109;
      if ((*(_BYTE *)(v6 + 3) & 1) == 0)
        v35 = 0;
      if (*(_BYTE *)(v6 + 2))
        v39 = 144;
      else
        v39 = 0;
      v40 = *(float32x4_t *)(v6 + 96);
      v42 = *(float32x4_t *)(v6 + 128);
      v41 = *(float32x4_t *)(v6 + 144);
      v43 = *(float32x4_t *)(v6 + 160);
      if (*(_BYTE *)(v6 + 1))
      {
        v44 = 0;
        v45 = vmlaq_f32(vmlaq_f32(vmulq_f32(v18, v42), v41, v19), v43, v20);
        v46 = 0uLL;
        _X25 = _X2;
        v48 = 0uLL;
        do
        {
          __asm
          {
            PRFM            #0, [X25,#0x40]
            PRFM            #0, [X25,#0x80]
          }
          _X2 = _X25 + 192;
          __asm { PRFM            #0, [X25,#0xC0] }
          v56 = *(float32x4_t *)(v31 + 16 * v44);
          if ((v34 & 1) != 0)
            v57 = v44;
          else
            v57 = 0;
          v58 = *(float32x4_t *)(v36 + 16);
          v59 = *(float32x4_t *)(v36 + 32);
          v60 = vminq_f32(vaddq_f32(v56, vmaxq_f32(vmlsq_f32(*(float32x4_t *)(v36 + 80), *(float32x4_t *)(v36 + 48), vmlaq_f32(vmlaq_f32(vmlaq_f32(v45, v25, *(float32x4_t *)v36), v26, v58), v27, v59)), vnegq_f32(v56))), (float32x4_t)v38[v57]);
          v61 = vsubq_f32(v60, v56);
          v62 = vmulq_f32(v40, v61);
          v48 = vaddq_f32(v48, v61);
          v45 = vmlaq_f32(v45, v61, v28);
          v25 = vmlaq_f32(v25, v62, *(float32x4_t *)v36);
          v26 = vmlaq_f32(v26, v62, v58);
          *(float32x4_t *)(v31 + 16 * v44) = v60;
          v27 = vmlaq_f32(v27, v62, v59);
          v46 = vaddq_f32(v46, v60);
          ++v44;
          v36 += 96;
          _X25 = _X2;
        }
        while (v32 != v44);
      }
      else
      {
        v48 = 0uLL;
        v46 = 0uLL;
      }
      v63 = (int8x16_t *)(v37 + v35);
      v64 = (float32x4_t *)(v37 + v35 + v39);
      v65 = vmulq_f32(v28, v48);
      v18 = vmlaq_f32(v18, v65, v42);
      v19 = vmlaq_f32(v19, v65, v41);
      v20 = vmlaq_f32(v20, v65, v43);
      if ((_DWORD)v33 && *a2)
      {
        if (a2[1])
        {
          _X21 = v63[1].i64[0];
          __asm { PRFM            #0, [X21] }
          _X21 = v63[1].i64[1];
          __asm { PRFM            #0, [X21] }
          _X21 = v63[2].i64[0];
          __asm { PRFM            #0, [X21] }
          _X21 = v63[2].i64[1];
          __asm { PRFM            #0, [X21] }
        }
        v74 = 0;
        v75 = vmulq_f32(v46, *(float32x4_t *)(v6 + 32));
        v76 = vmulq_f32(v46, *(float32x4_t *)(v6 + 48));
        v77 = vnegq_f32(v76);
        v78 = (float32x4_t *)(v6 + 16 * v33 + v35 + v39 + 112 * v32 + 272);
        v79 = 0uLL;
        v80 = v64;
        do
        {
          __asm
          {
            PRFM            #0, [X2,#0x40]
            PRFM            #0, [X2,#0x80]
            PRFM            #0, [X2,#0xC0]
          }
          _X2 += 192;
          v84 = (float32x4_t *)&v63[v74 & 1];
          v85 = v84[3];
          v86 = v84[5];
          v87 = v84[7];
          v88 = v78[-4];
          v89 = v78[-3];
          v90 = v78[-2];
          v91 = vsubq_f32(*v80, v78[-1]);
          v92 = *v78;
          v78 += 6;
          v93 = vmlsq_f32(v91, v92, vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v18, v85), v86, v19), v87, v20), vmlaq_f32(vmlaq_f32(vmulq_f32(v25, v88), v26, v89), v27, v90)));
          v79 = vorrq_s8(v79, (int8x16_t)vcgtq_f32(vabsq_f32(v93), v75));
          v94 = (float32x4_t)vbslq_s8(v79, (int8x16_t)vminq_f32(v76, vmaxq_f32(v77, v93)), (int8x16_t)v93);
          v95 = vsubq_f32(v94, *v80);
          v96 = vmulq_f32(v28, v95);
          v97 = vmulq_f32(v40, v95);
          v18 = vmlaq_f32(v18, v96, v85);
          v25 = vmlaq_f32(v25, v97, v88);
          v19 = vmlaq_f32(v19, v96, v86);
          v26 = vmlaq_f32(v26, v97, v89);
          v20 = vmlaq_f32(v20, v96, v87);
          v27 = vmlaq_f32(v27, v97, v90);
          *v80++ = v94;
          ++v74;
        }
        while (v33 != v74);
        *v63 = v79;
      }
      v6 = (unint64_t)&v64[6 * v33 + v33];
    }
    while (v6 < v30);
  }
  v98 = vzip2q_s32(v22, v24);
  v99 = vzip2q_s32(v14, v17);
  v100 = (float32x2x2_t)vzip1q_s32((int32x4_t)v18, (int32x4_t)v20);
  v101 = (float32x2x2_t)vzip2q_s32((int32x4_t)v18, (int32x4_t)v20);
  v102 = vzip1q_s32((int32x4_t)v19, v99);
  v103 = vzip2q_s32((int32x4_t)v19, v99);
  v104 = (float32x2x2_t)vzip1q_s32((int32x4_t)v25, (int32x4_t)v27);
  v105 = (float32x2x2_t)vzip2q_s32((int32x4_t)v25, (int32x4_t)v27);
  v106 = vzip1q_s32((int32x4_t)v26, v98);
  vst2_f32((float *)v2->i32, v100);
  *v3 = vzip2q_s32((int32x4_t)v100, v102);
  v107 = vzip2q_s32((int32x4_t)v26, v98);
  vst2_f32((float *)v4->i32, v101);
  *v5 = vzip2q_s32((int32x4_t)v101, v103);
  i32 = (float *)v2[1].i32;
  vst2_f32(i32, v104);
  v3[1] = vzip2q_s32((int32x4_t)v104, v106);
  result = vzip2q_s32((int32x4_t)v105, v107);
  v11 = (float *)v4[1].i32;
  vst2_f32(v11, v105);
  v5[1] = result;
  return result;
}

uint64_t physx::Dy::solveContactPreBlock_Conclude(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  physx::Dy::solveContact4_Block((int32x4_t **)a1, a3);
  return physx::Dy::concludeContact4_Block(*(unsigned __int16 *)(a1 + 30), *(unsigned __int8 **)(a1 + 32), 0x90u, 0x90u);
}

uint64_t physx::Dy::concludeContact4_Block(uint64_t result, unsigned __int8 *a2, unsigned int a3, unsigned int a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  unsigned __int8 *v12;
  int v13;

  if ((_WORD)result)
  {
    v4 = &a2[16 * (unsigned __int16)result];
    do
    {
      v5 = a2[1];
      v6 = a2[2];
      v7 = 16 * v5;
      v8 = v5 * a3;
      if ((a2[3] & 1) != 0)
        v9 = 16 * v5;
      else
        v9 = 0;
      v10 = (uint64_t)&a2[16 * v5 + 208 + v9 + v8];
      if (a2[2])
        v10 += 16 * v6 + 144;
      if (a2[1])
      {
        v11 = (float32x4_t *)&a2[v7 + 288];
        do
        {
          *v11 = vsubq_f32(*v11, v11[-1]);
          v11 = (float32x4_t *)((char *)v11 + a3);
          LODWORD(v5) = v5 - 1;
        }
        while ((_DWORD)v5);
      }
      if ((_DWORD)v6)
      {
        v12 = &a2[16 * v6 + 432 + v9 + v7 + v8];
        v13 = v6;
        do
        {
          *((_OWORD *)v12 - 2) = *(_OWORD *)v12;
          v12 += a4;
          --v13;
        }
        while (v13);
      }
      a2 = (unsigned __int8 *)(v10 + v6 * a4);
    }
    while (a2 < v4);
  }
  return result;
}

uint64_t physx::Dy::solveContactPreBlock_ConcludeStatic(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  physx::Dy::solveContact4_StaticBlock(a1, a3);
  return physx::Dy::concludeContact4_Block(*(unsigned __int16 *)(a1 + 30), *(unsigned __int8 **)(a1 + 32), 0x60u, 0x60u);
}

uint64_t physx::Dy::solveContactPreBlock_WriteBack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  __n128 v15;
  uint64_t result;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  _QWORD v27[4];
  _QWORD v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  physx::Dy::solveContact4_Block((int32x4_t **)a1, (_BYTE *)a3);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = v5 + 112 * *(unsigned int *)(a1 + 20);
  v7 = v5 + 112 * *(unsigned int *)(a1 + 68);
  v8 = v5 + 112 * *(unsigned int *)(a1 + 116);
  v9 = v5 + 112 * *(unsigned int *)(a1 + 164);
  v10 = v5 + 112 * *(unsigned int *)(a1 + 24);
  v11 = v5 + 112 * *(unsigned int *)(a1 + 72);
  v12 = v5 + 112 * *(unsigned int *)(a1 + 120);
  v13 = v5 + 112 * *(unsigned int *)(a1 + 168);
  v28[0] = v6;
  v28[1] = v7;
  v28[2] = v8;
  v28[3] = v9;
  v27[0] = v10;
  v27[1] = v11;
  v27[2] = v12;
  v27[3] = v13;
  result = physx::Dy::writeBackContact4_Block(a1, a3, (uint64_t)v28, (uint64_t)v27, v14, v15);
  v17 = *(_DWORD *)(a3 + 16);
  if (v17 > *(_DWORD *)(a3 + 20) - 4)
  {
    v18 = *(unsigned int **)(a3 + 48);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + v17, v18));
    v20 = *(_DWORD *)(a3 + 16);
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = v17 - v20 + v19;
      do
      {
        v24 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v21);
        v25 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v23 + v22));
        v26 = v24[1];
        *v25 = *v24;
        v25[1] = v26;
        ++v22;
        v21 += 32;
      }
      while (v22 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t physx::Dy::solveContactPreBlock_WriteBackStatic(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t result;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  _QWORD v27[4];
  _QWORD v28[5];

  v28[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v5 = physx::Dy::solveContact4_StaticBlock((uint64_t)a1, (_BYTE *)a3).u64[0];
  v6 = *(_QWORD *)(a3 + 24);
  v7 = v6 + 112 * a1[5];
  v8 = v6 + 112 * a1[17];
  v9 = v6 + 112 * a1[29];
  v10 = v6 + 112 * a1[41];
  v11 = v6 + 112 * a1[6];
  v12 = v6 + 112 * a1[18];
  v13 = v6 + 112 * a1[30];
  v14 = v6 + 112 * a1[42];
  v28[0] = v7;
  v28[1] = v8;
  v28[2] = v9;
  v28[3] = v10;
  v27[0] = v11;
  v27[1] = v12;
  v27[2] = v13;
  v27[3] = v14;
  result = physx::Dy::writeBackContact4_Block((uint64_t)a1, a3, (uint64_t)v28, (uint64_t)v27, v5, v15);
  v17 = *(_DWORD *)(a3 + 16);
  if (v17 > *(_DWORD *)(a3 + 20) - 4)
  {
    v18 = *(unsigned int **)(a3 + 48);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + v17, v18));
    v20 = *(_DWORD *)(a3 + 16);
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = v17 - v20 + v19;
      do
      {
        v24 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v21);
        v25 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v23 + v22));
        v26 = v24[1];
        *v25 = *v24;
        v25[1] = v26;
        ++v22;
        v21 += 32;
      }
      while (v22 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

int32x4_t physx::Dy::solve1D4_Block(int32x4_t **a1)
{
  int32x4_t *v1;
  float *v2;
  int32x4_t *v3;
  int32x4_t *v4;
  int32x4_t *v5;
  int32x4_t *v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  float32x4_t *v11;
  int32x4_t *v12;
  float *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float *i32;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float *v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int32 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  float32x2x2_t v82;
  float32x2x2_t v83;
  int32x4_t v84;
  int32x4_t v85;
  float32x2x2_t v86;
  float32x2x2_t v87;
  int32x4_t v88;
  int32x4_t v89;
  float32x2x2_t v90;
  float32x2x2_t v91;
  int32x4_t v92;
  int32x4_t v93;
  float32x2x2_t v94;
  int32x4_t v95;
  float32x2x2_t v96;
  int32x4_t v97;
  int32x4_t result;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;

  v2 = (float *)*a1;
  v1 = a1[1];
  v4 = a1[6];
  v3 = a1[7];
  v6 = a1[12];
  v5 = a1[13];
  v7 = **a1;
  v8 = vzip1q_s32(v7, *v6);
  v10 = a1[18];
  v9 = a1[19];
  v11 = (float32x4_t *)a1[4];
  v12 = *a1 + 1;
  v14 = v1[1];
  v15 = v4[1];
  v16 = v3[1];
  v18 = v6[1];
  v19 = v10[1];
  v20 = vzip2q_s32(v7, *v6);
  v21 = vzip1q_s32(*v4, *v10);
  v22 = v9[1];
  v23 = (float32x4_t)vzip1q_s32(v8, v21);
  v24 = (float32x4_t)vzip2q_s32(v8, v21);
  v104 = vzip2q_s32(*v4, *v10);
  v105 = v20;
  v25 = (float32x4_t)vzip1q_s32(v20, v104);
  v26 = vzip1q_s32(*v1, *v5);
  v27 = vzip1q_s32(*v3, *v9);
  v28 = (float32x4_t)vzip1q_s32(v26, v27);
  v29 = (float32x4_t)vzip2q_s32(v26, v27);
  v102 = vzip2q_s32(*v3, *v9);
  v103 = vzip2q_s32(*v1, *v5);
  v30 = (float32x4_t)vzip1q_s32(v103, v102);
  v31 = vzip1q_s32(*v12, v18);
  v32 = vzip1q_s32(v15, v19);
  v34 = v5[1];
  v35 = (float32x4_t)vzip1q_s32(v31, v32);
  v36 = (float32x4_t)vzip2q_s32(v31, v32);
  v100 = vzip2q_s32(v15, v19);
  v101 = vzip2q_s32(*v12, v18);
  v37 = (float32x4_t)vzip1q_s32(v101, v100);
  v38 = vzip1q_s32(v14, v34);
  v39 = vzip2q_s32(v14, v34);
  v40 = vzip1q_s32(v16, v22);
  v41 = vzip2q_s32(v16, v22);
  v42 = (float32x4_t)vzip1q_s32(v38, v40);
  v43 = (float32x4_t)vzip2q_s32(v38, v40);
  v99 = v39;
  v44 = (float32x4_t)vzip1q_s32(v39, v41);
  v45 = v11->i32[1];
  if (v45)
  {
    v46 = v11[3];
    v47 = v11[4];
    _X3 = v11 + 25;
    v49 = v11[5];
    v50 = v11[6];
    do
    {
      __asm
      {
        PRFM            #0, [X3,#0x80]
        PRFM            #0, [X3,#0xC0]
        PRFM            #0, [X3,#0x100]
        PRFM            #0, [X3,#0x140]
        PRFM            #0, [X3,#0x180]
      }
      v60 = _X3[-15];
      v61 = _X3[-14];
      v62 = _X3[2];
      v63 = _X3[3];
      v65 = _X3[-13];
      v64 = _X3[-12];
      v67 = _X3[4];
      v66 = _X3[5];
      v68 = _X3[-11];
      v69 = _X3[-10];
      v70 = _X3[6];
      v71 = _X3[7];
      v72 = vmaxq_f32(_X3[-2], vminq_f32(_X3[-1], vmlaq_f32(vmlaq_f32(_X3[-6], _X3[-4], vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v23, v60), v24, v61), v25, v65), vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v64), v36, v68), v37, v69)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v28, v62), v29, v63), v30, v67), vmlaq_f32(vmlaq_f32(vmulq_f32(v42, v66), v43, v70), v44, v71)))), _X3[-3], *_X3)));
      v73 = vsubq_f32(v72, *_X3);
      v74 = vmulq_f32(v46, v73);
      v23 = vmlaq_f32(v23, v74, v60);
      v24 = vmlaq_f32(v24, v74, v61);
      v25 = vmlaq_f32(v25, v74, v65);
      v75 = vmulq_f32(v47, v73);
      v28 = vmlsq_f32(v28, v75, v62);
      v29 = vmlsq_f32(v29, v75, v63);
      v30 = vmlsq_f32(v30, v75, v67);
      v76 = vmulq_f32(v49, v73);
      v35 = vmlaq_f32(v35, v76, v64);
      v36 = vmlaq_f32(v36, v76, v68);
      v37 = vmlaq_f32(v37, v76, v69);
      v77 = vmulq_f32(v50, v73);
      v42 = vmlsq_f32(v42, v77, v66);
      v43 = vmlsq_f32(v43, v77, v70);
      v44 = vmlsq_f32(v44, v77, v71);
      *_X3 = v72;
      _X3 += 23;
      --v45;
    }
    while (v45);
  }
  v78 = vzip2q_s32(v99, v41);
  v79 = vzip2q_s32(v101, v100);
  v80 = vzip2q_s32(v103, v102);
  v81 = vzip2q_s32(v105, v104);
  v82 = (float32x2x2_t)vzip1q_s32((int32x4_t)v23, (int32x4_t)v25);
  v83 = (float32x2x2_t)vzip2q_s32((int32x4_t)v23, (int32x4_t)v25);
  v84 = vzip1q_s32((int32x4_t)v24, v81);
  v85 = vzip2q_s32((int32x4_t)v24, v81);
  v86 = (float32x2x2_t)vzip1q_s32((int32x4_t)v28, (int32x4_t)v30);
  v87 = (float32x2x2_t)vzip2q_s32((int32x4_t)v28, (int32x4_t)v30);
  vst2_f32(v2, v82);
  v88 = vzip1q_s32((int32x4_t)v29, v80);
  *v4 = vzip2q_s32((int32x4_t)v82, v84);
  v89 = vzip2q_s32((int32x4_t)v29, v80);
  vst2_f32((float *)v6->i32, v83);
  *v10 = vzip2q_s32((int32x4_t)v83, v85);
  vst2_f32((float *)v1->i32, v86);
  v90 = (float32x2x2_t)vzip1q_s32((int32x4_t)v35, (int32x4_t)v37);
  *v3 = vzip2q_s32((int32x4_t)v86, v88);
  v91 = (float32x2x2_t)vzip2q_s32((int32x4_t)v35, (int32x4_t)v37);
  v92 = vzip1q_s32((int32x4_t)v36, v79);
  vst2_f32((float *)v5->i32, v87);
  *v9 = vzip2q_s32((int32x4_t)v87, v89);
  v93 = vzip2q_s32((int32x4_t)v36, v79);
  vst2_f32((float *)v12->i32, v90);
  v4[1] = vzip2q_s32((int32x4_t)v90, v92);
  v94 = (float32x2x2_t)vzip1q_s32((int32x4_t)v42, (int32x4_t)v44);
  i32 = (float *)v6[1].i32;
  vst2_f32(i32, v91);
  v10[1] = vzip2q_s32((int32x4_t)v91, v93);
  v95 = vzip1q_s32((int32x4_t)v43, v78);
  v13 = (float *)v1[1].i32;
  vst2_f32(v13, v94);
  v3[1] = vzip2q_s32((int32x4_t)v94, v95);
  v96 = (float32x2x2_t)vzip2q_s32((int32x4_t)v42, (int32x4_t)v44);
  v97 = vzip2q_s32((int32x4_t)v43, v78);
  result = vzip2q_s32((int32x4_t)v96, v97);
  v33 = (float *)v5[1].i32;
  vst2_f32(v33, v96);
  v9[1] = result;
  return result;
}

int32x4_t physx::Dy::solve1D4Block_Conclude(int32x4_t **a1)
{
  int32x4_t result;
  int32x4_t *v3;
  unsigned __int32 v4;
  uint64_t v5;
  int32x4_t *v6;

  result.i64[0] = physx::Dy::solve1D4_Block(a1).u64[0];
  v3 = a1[4];
  if (v3->i32[1])
  {
    v4 = 0;
    v5 = 272;
    if (v3->i8[0] == 9)
      v5 = 368;
    v6 = v3 + 20;
    do
    {
      result = *v6;
      v6[-1] = *v6;
      ++v4;
      v6 = (int32x4_t *)((char *)v6 + v5);
    }
    while (v4 < v3->i32[1]);
  }
  return result;
}

void physx::Dy::solve1D4Block_WriteBack(uint64_t a1)
{
  int32x2_t *v2;
  int32x2_t *v3;
  int32x2_t *v4;
  int32x2_t *v5;
  float32x4_t *v9;
  __int32 v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t *v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int v34;
  int8x16_t v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  int32x2_t v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;

  physx::Dy::solve1D4_Block((int32x4_t **)a1);
  v2 = *(int32x2_t **)(a1 + 40);
  v3 = *(int32x2_t **)(a1 + 88);
  v4 = *(int32x2_t **)(a1 + 136);
  v5 = *(int32x2_t **)(a1 + 184);
  if (v2)
    _ZF = 0;
  else
    _ZF = v3 == 0;
  if (!_ZF || v4 != 0 || v5 != 0)
  {
    v9 = *(float32x4_t **)(a1 + 32);
    v10 = v9->i32[1];
    if (v10)
    {
      v11 = 0uLL;
      v12 = 272;
      if (v9->i8[0] == 9)
        v12 = 368;
      v13 = v9 + 16;
      v14.i64[0] = 0x200000002;
      v14.i64[1] = 0x200000002;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      v19 = 0uLL;
      do
      {
        v20 = (float32x4_t)vbicq_s8((int8x16_t)v13[9], (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13[10], v14)));
        v11 = vmlaq_f32(v11, v20, v13[-6]);
        v15 = vmlaq_f32(v15, v20, v13[-5]);
        v16 = vmlaq_f32(v16, v20, v13[-4]);
        v17 = vmlaq_f32(v17, v20, *v13);
        v19 = vmlaq_f32(v19, v20, v13[1]);
        v18 = vmlaq_f32(v18, v20, v13[2]);
        v13 = (float32x4_t *)((char *)v13 + v12);
        --v10;
      }
      while (v10);
    }
    else
    {
      v19 = 0uLL;
      v18 = 0uLL;
      v17 = 0uLL;
      v16 = 0uLL;
      v15 = 0uLL;
      v11 = 0uLL;
    }
    v22 = v9[8];
    v21 = v9[9];
    v23 = v9[7];
    v24 = vsubq_f32(v17, vmlsq_f32(vmulq_f32(v16, v22), v15, v21));
    v25 = vsubq_f32(v19, vmlsq_f32(vmulq_f32(v11, v21), v16, v23));
    v26 = vnegq_f32(v22);
    v27 = vmlaq_f32(vmlaq_f32(vmulq_f32(v11, v11), v15, v15), v16, v16);
    v28 = vmulq_f32(v24, v24);
    v29 = vrsqrteq_f32(v27);
    v30 = 4;
    do
    {
      v29 = vmulq_f32(v29, vrsqrtsq_f32(vmulq_f32(v29, v29), v27));
      --v30;
    }
    while (v30);
    v31 = vsubq_f32(v18, vmlaq_f32(vmulq_f32(v15, v23), v11, v26));
    v32 = vmlaq_f32(vmlaq_f32(v28, v25, v25), v31, v31);
    v33 = vrsqrteq_f32(v32);
    v34 = 4;
    do
    {
      v33 = vmulq_f32(v33, vrsqrtsq_f32(vmulq_f32(v33, v33), v32));
      --v34;
    }
    while (v34);
    __asm { FMOV            V19.4S, #1.0 }
    v39 = vorrq_s8((int8x16_t)vcgtq_f32(vmulq_f32(v32, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v32), _Q19, (int8x16_t)v33)), v9[2]), (int8x16_t)vcgtq_f32(vmulq_f32(v27, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v27), _Q19, (int8x16_t)v29)), v9[1]));
    if (v2)
    {
      *v2 = vzip1_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v15.f32);
      v2[1].i32[0] = v16.i32[0];
      v2[2] = vzip1_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)v25.f32);
      v2[3].i32[0] = v31.i32[0];
      if (v9->i8[12])
        v40 = v39.i32[0] == 0;
      else
        v40 = 1;
      v41 = !v40;
      v2[1].i32[1] = v41;
    }
    if (v3)
    {
      *v3 = vzip2_s32(*(int32x2_t *)v11.f32, *(int32x2_t *)v15.f32);
      v3[1].i32[0] = v16.i32[1];
      v3[2] = vzip2_s32(*(int32x2_t *)v24.f32, *(int32x2_t *)v25.f32);
      v3[3].i32[0] = v31.i32[1];
      if (v9->i8[13])
        v42 = v39.i32[1] == 0;
      else
        v42 = 1;
      v43 = !v42;
      v3[1].i32[1] = v43;
    }
    v44 = (int32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v45 = (int32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    v46 = (int32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    v47 = (int32x2_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    if (v4)
    {
      *v4 = vzip1_s32(v45, v44);
      v4[1].i32[0] = v16.i32[2];
      v4[2] = vzip1_s32(v47, v46);
      v4[3].i32[0] = v31.i32[2];
      if (v9->i8[14])
        v48 = v39.i32[2] == 0;
      else
        v48 = 1;
      v49 = !v48;
      v4[1].i32[1] = v49;
    }
    if (v5)
    {
      *v5 = vzip2_s32(v45, v44);
      v5[1].i32[0] = v16.i32[3];
      v5[2] = vzip2_s32(v47, v46);
      v5[3].i32[0] = v31.i32[3];
      if (v9->i8[15])
        v50 = v39.i32[3] == 0;
      else
        v50 = 1;
      v51 = !v50;
      v5[1].i32[1] = v51;
    }
  }
}

uint64_t physx::Dy::SolverCoreGeneral::destroyV(physx::Dy::SolverCoreGeneral *this)
{
  (*(void (**)(physx::Dy::SolverCoreGeneral *))(*(_QWORD *)this + 8))(this);
  return (*(uint64_t (**)(uint64_t, physx::Dy::SolverCoreGeneral *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                        + 24)
                                                                            + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

__n128 physx::Dy::SolverCoreGeneral::solveV_Blocks(uint64_t a1, int *a2)
{
  uint64_t i;
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t j;
  uint64_t v11;
  void (**v12)(uint64_t);
  uint64_t k;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  int v18;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  void (*v39)(uint64_t *, unint64_t);
  int v40;
  int v41;
  uint64_t m;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  int v47;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v54;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int ii;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void (*v68)(uint64_t *, unint64_t);
  int jj;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t n;
  unsigned int *v75;
  uint64_t v76;
  unsigned int v77;
  int v79;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v86;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  __n128 v96;
  _BYTE v97[1024];
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  for (i = 16; i != 1040; i += 32)
    *(_QWORD *)&v97[i] = 0x7F0000007FLL;
  result = *(__n128 *)(a2 + 58);
  v96 = result;
  v5 = a2[16];
  v6 = a2[6];
  v8 = *a2;
  v7 = a2[1];
  v95 = a2[10];
  v9 = (uint64_t *)*((_QWORD *)a2 + 4);
  if ((_DWORD)v5)
  {
    v91 = *((_QWORD *)a2 + 11);
    v92 = *((_QWORD *)a2 + 1);
    v93 = a2[1];
    v94 = (uint64_t *)*((_QWORD *)a2 + 4);
    v11 = *((_QWORD *)a2 + 6);
    for (j = *((_QWORD *)a2 + 7); v8; --v8)
    {
      if (v8 == 1)
        v12 = (void (**)(uint64_t))&physx::Dy::gVTableSolveConcludeBlock;
      else
        v12 = physx::Dy::gVTableSolveBlock;
      if ((int)v5 >= 1)
      {
        for (k = 0; k != v5; ++k)
        {
          v14 = (unsigned int *)(j + 8 * k);
          v15 = *((unsigned __int16 *)v14 + 2);
          v16 = *v14;
          _X9 = *(_QWORD *)(v11 + 48 * v16 + 32);
          v18 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
          do
          {
            __asm { PRFM            #0, [X9] }
            _X9 += 32;
            _CF = __CFADD__(v18++, 1);
          }
          while (!_CF);
          if ((_DWORD)v15)
          {
            v24 = (uint64_t *)(v11 + 8 + 48 * v16);
            v25 = v15;
            do
            {
              _X11 = *(v24 - 1);
              __asm { PRFM            #0, [X11] }
              v29 = *v24;
              v24 += 6;
              _X11 = v29;
              __asm { PRFM            #0, [X11] }
              --v25;
            }
            while (v25);
          }
          v12[*(unsigned __int16 *)(j + 8 * k + 6)](v11 + 48 * v16);
        }
      }
      v31 = v94;
      v32 = v95;
      if ((_DWORD)v95)
      {
        do
        {
          v33 = *v31;
          v31 += 12;
          (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD, float, float, float))(*(_QWORD *)v33 + 272))(v33, v96.n128_u64[0], v96.n128_u64[1], 0, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
          --v32;
        }
        while (v32);
      }
    }
    if ((_DWORD)v6)
    {
      v34 = v91 + 16;
      v35 = v92 + 16;
      do
      {
        *(_QWORD *)(v34 - 16) = *(_QWORD *)(v35 - 16);
        *(_DWORD *)(v34 - 8) = *(_DWORD *)(v35 - 8);
        result.n128_u64[0] = *(_QWORD *)v35;
        *(_QWORD *)v34 = *(_QWORD *)v35;
        result.n128_u32[0] = *(_DWORD *)(v35 + 8);
        *(_DWORD *)(v34 + 8) = result.n128_u32[0];
        v34 += 32;
        v35 += 32;
        --v6;
      }
      while (v6);
    }
    v37 = v94;
    v36 = v95;
    if ((_DWORD)v95)
    {
      v38 = v94;
      do
      {
        v39 = (void (*)(_QWORD, _QWORD))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*v38 + 40)];
        if (v39)
          v39(v38, v96.n128_u64[1]);
        v38 += 12;
        --v36;
      }
      while (v36);
    }
    if (v93 < 2)
    {
      v41 = 0;
    }
    else
    {
      v40 = 0;
      v41 = v93 - 1;
      do
      {
        if ((int)v5 >= 1)
        {
          for (m = 0; m != v5; ++m)
          {
            v43 = (unsigned int *)(j + 8 * m);
            v44 = *((unsigned __int16 *)v43 + 2);
            v45 = *v43;
            _X9 = *(_QWORD *)(v11 + 48 * v45 + 32);
            v47 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v47++, 1);
            }
            while (!_CF);
            if ((_DWORD)v44)
            {
              v49 = (uint64_t *)(v11 + 8 + 48 * v45);
              v50 = v44;
              do
              {
                _X11 = *(v49 - 1);
                __asm { PRFM            #0, [X11] }
                v54 = *v49;
                v49 += 6;
                _X11 = v54;
                __asm { PRFM            #0, [X11] }
                --v50;
              }
              while (v50);
            }
            physx::Dy::gVTableSolveBlock[*(unsigned __int16 *)(j + 8 * m + 6)](v11 + 48 * v45);
          }
        }
        v56 = v37;
        v57 = v95;
        if ((_DWORD)v95)
        {
          do
          {
            v58 = *v56;
            v56 += 12;
            (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, _QWORD, float, float, float))(*(_QWORD *)v58 + 272))(v58, v96.n128_u64[0], v96.n128_u64[1], 1, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
            --v57;
          }
          while (v57);
        }
        ++v40;
        v37 = v94;
      }
      while (v40 != v41);
    }
    if (v41 < v93)
    {
      if ((int)v5 >= 1)
      {
        for (n = 0; n != v5; ++n)
        {
          v75 = (unsigned int *)(j + 8 * n);
          v76 = *((unsigned __int16 *)v75 + 2);
          v77 = *v75;
          _X9 = *(_QWORD *)(v11 + 48 * v77 + 32);
          v79 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
          do
          {
            __asm { PRFM            #0, [X9] }
            _X9 += 32;
            _CF = __CFADD__(v79++, 1);
          }
          while (!_CF);
          if ((_DWORD)v76)
          {
            v81 = (uint64_t *)(v11 + 8 + 48 * v77);
            v82 = v76;
            do
            {
              _X11 = *(v81 - 1);
              __asm { PRFM            #0, [X11] }
              v86 = *v81;
              v81 += 6;
              _X11 = v86;
              __asm { PRFM            #0, [X11] }
              --v82;
            }
            while (v82);
          }
          physx::Dy::gVTableSolveWriteBackBlock[*(unsigned __int16 *)(j + 8 * n + 6)](v11 + 48 * v77);
        }
      }
      v89 = v94;
      v88 = v95;
      if ((_DWORD)v95)
      {
        do
        {
          (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, _QWORD, float, float, float))(*(_QWORD *)*v89 + 272))(*v89, v96.n128_u64[0], v96.n128_u64[1], 1, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
          v90 = *v89;
          v89 += 12;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 280))(v90, 0);
          --v88;
        }
        while (v88);
      }
    }
  }
  else
  {
    if ((_DWORD)v6)
    {
      v59 = *((_QWORD *)a2 + 11) + 16;
      v60 = *((_QWORD *)a2 + 1) + 16;
      do
      {
        *(_QWORD *)(v59 - 16) = *(_QWORD *)(v60 - 16);
        *(_DWORD *)(v59 - 8) = *(_DWORD *)(v60 - 8);
        result.n128_u64[0] = *(_QWORD *)v60;
        *(_QWORD *)v59 = *(_QWORD *)v60;
        result.n128_u32[0] = *(_DWORD *)(v60 + 8);
        *(_DWORD *)(v59 + 8) = result.n128_u32[0];
        v59 += 32;
        v60 += 32;
        --v6;
      }
      while (v6);
    }
    v61 = v95;
    if (v8)
    {
      for (ii = 0; ii != v8; ++ii)
      {
        v63 = v9;
        v64 = v95;
        if ((_DWORD)v95)
        {
          do
          {
            v65 = *v63;
            v63 += 12;
            (*(void (**)(uint64_t, unint64_t, unint64_t, _QWORD, _QWORD, float, float, float))(*(_QWORD *)v65 + 272))(v65, v96.n128_u64[0], v96.n128_u64[1], 0, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
            --v64;
          }
          while (v64);
        }
      }
    }
    if ((_DWORD)v95)
    {
      v66 = v9;
      v67 = v95;
      do
      {
        v68 = (void (*)(_QWORD, _QWORD))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*v66 + 40)];
        if (v68)
          v68(v66, v96.n128_u64[1]);
        v66 += 12;
        --v67;
      }
      while (v67);
    }
    if (v7)
    {
      for (jj = 0; jj != v7; ++jj)
      {
        v70 = v9;
        v71 = v95;
        if ((_DWORD)v95)
        {
          do
          {
            v72 = *v70;
            v70 += 12;
            (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, _QWORD, float, float, float))(*(_QWORD *)v72 + 272))(v72, v96.n128_u64[0], v96.n128_u64[1], 1, 0, *((float *)a2 + 38), *((float *)a2 + 39), 0.0);
            --v71;
          }
          while (v71);
        }
      }
    }
    if ((_DWORD)v95)
    {
      do
      {
        v73 = *v9;
        v9 += 12;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 280))(v73, 0);
        --v61;
      }
      while (v61);
    }
  }
  return result;
}

uint64_t physx::Dy::SolverCoreGeneral::solveVParallelAndWriteBack(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  float v5;
  float v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  unsigned int v13;
  signed int v14;
  uint64_t v15;
  int v16;
  char v17;
  void (**v18)(uint64_t);
  signed int v19;
  int v20;
  int v21;
  signed int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  int v31;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v42;
  unsigned int v44;
  int v45;
  uint64_t v46;
  int v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  int v70;
  unsigned int *v71;
  signed int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  int v86;
  signed int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  signed int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  unsigned int v99;
  int v101;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v108;
  unsigned int v110;
  int v111;
  int v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  signed int v122;
  int v123;
  signed int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int v131;
  int v133;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v140;
  int v142;
  unsigned int v143;
  int v144;
  int v145;
  signed int v146;
  signed int v147;
  int v148;
  uint64_t v149;
  _QWORD *v150;
  int v151;
  uint64_t v152;
  unsigned int v153;
  signed int v155;
  int v157;
  char v158;
  int v159;
  signed int v160;
  signed int v161;
  int v162;
  int v163;
  float v164;
  unsigned int v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  signed int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  unsigned int *v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int *v191;
  uint64_t v192;
  signed int v193;
  signed int v194;
  signed int v195;
  signed int v196;
  signed int v197;
  signed int v198;
  uint64_t v199;
  unsigned int *v200;
  uint64_t v201;
  unsigned int *v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  signed int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  _BYTE v217[1024];
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  v203 = a2[24];
  for (i = 16; i != 1040; i += 32)
    *(_QWORD *)&v217[i] = 0x7F0000007FLL;
  v155 = a2[6];
  v170 = a2[10];
  v162 = a2[16];
  v5 = *((float *)a2 + 38);
  v6 = *((float *)a2 + 39);
  v164 = *(float *)a2;
  v7 = (unsigned int *)(a2 + 30);
  v8 = (unsigned int *)(a2 + 31);
  v9 = (unsigned int *)(a2 + 35);
  v10 = *((_QWORD *)a2 + 6);
  v177 = *((_QWORD *)a2 + 4);
  v178 = (unsigned int *)(a2 + 34);
  v192 = a2[20];
  v11 = *((_QWORD *)a2 + 9);
  do
  {
    v12 = __ldaxr(v7);
    v13 = __stlxr(v12 + v203, v7);
  }
  while (v13);
  v202 = (unsigned int *)(a2 + 30);
  v14 = 0;
  v171 = 0;
  v172 = 0;
  v209 = 0;
  v210 = v203;
  v179 = 0;
  v163 = 0;
  v187 = 0;
  v191 = (unsigned int *)(a2 + 35);
  v166 = 0;
  v15 = *((_QWORD *)a2 + 7);
  v16 = LODWORD(v164) - 1;
  v17 = 1;
  v159 = LODWORD(v164) - 1;
  v160 = 0;
  v185 = (unsigned int *)(a2 + 31);
  v186 = v11;
  do
  {
    v158 = v17;
    if ((v17 & 1) != 0)
      v18 = physx::Dy::gVTableSolveBlock;
    else
      v18 = (void (**)(uint64_t))&physx::Dy::gVTableSolveConcludeBlock;
    v165 = v13 + v16;
    if (v172 < v13 + v16)
    {
      v168 = v179;
      v157 = (v159 - v172) * v170;
      v167 = v170 + v163;
      v19 = v160;
      v181 = v163;
      v180 = -(uint64_t)v179;
      do
      {
        v174 = v19;
        if ((int)*v9 < v19)
        {
          v20 = 30000;
          while ((int)*v9 < v19)
          {
            if (!--v20)
            {
              sched_yield();
              v19 = v174;
              v20 = 10000;
            }
          }
        }
        if ((_DWORD)v192)
        {
          v199 = 0;
          v204 = v171 * v162;
          do
          {
            if ((int)*v8 < v14)
            {
              v21 = 30000;
              while ((int)*v8 < v14)
              {
                if (!--v21)
                {
                  sched_yield();
                  v21 = 10000;
                }
              }
            }
            v22 = *(_DWORD *)(v11 + 4 * v199) + v209;
            v209 = v22;
            if (v12 < v22)
            {
              v193 = v14;
              v23 = 0;
              v24 = v210;
              do
              {
                v211 = v24;
                if (v22 - v12 >= v24)
                  v25 = v24;
                else
                  v25 = v22 - v12;
                if (v25 >= 1)
                {
                  v26 = v12 - v204;
                  do
                  {
                    v27 = (unsigned int *)(v15 + 8 * v26);
                    v28 = *((unsigned __int16 *)v27 + 2);
                    v29 = *v27;
                    _X9 = *(_QWORD *)(v10 + 48 * v29 + 32);
                    v31 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                    do
                    {
                      __asm { PRFM            #0, [X9] }
                      _X9 += 32;
                      _CF = __CFADD__(v31++, 1);
                    }
                    while (!_CF);
                    if ((_DWORD)v28)
                    {
                      v37 = (uint64_t *)(v10 + 8 + 48 * v29);
                      v38 = v28;
                      do
                      {
                        _X11 = *(v37 - 1);
                        __asm { PRFM            #0, [X11] }
                        v42 = *v37;
                        v37 += 6;
                        _X11 = v42;
                        __asm { PRFM            #0, [X11] }
                        --v38;
                      }
                      while (v38);
                    }
                    v18[*(unsigned __int16 *)(v15 + 8 * v26++ + 6)](v10 + 48 * v29);
                  }
                  while (v26 < v25 + v12 - v204);
                }
                v24 = v211 - v25;
                if (v211 == v25)
                {
                  v24 = v203;
                  do
                    v12 = __ldaxr(v202);
                  while (__stlxr(v12 + v203, v202));
                }
                else
                {
                  v12 += v25;
                }
                v23 += v25;
                v22 = v209;
              }
              while (v12 < v209);
              v210 = v24;
              if (v23)
              {
                __dmb(0xBu);
                v9 = v191;
                v8 = v185;
                do
                  v44 = __ldaxr(v185);
                while (__stlxr(v44 + v23, v185));
              }
              else
              {
                v9 = v191;
                v8 = v185;
              }
              v14 = v193;
              v11 = v186;
            }
            v14 += *(_DWORD *)(v11 + 4 * v199++);
          }
          while (v199 != v192);
        }
        if ((int)*v8 < v14)
        {
          v45 = 30000;
          while ((int)*v8 < v14)
          {
            if (!--v45)
            {
              sched_yield();
              v45 = 10000;
            }
          }
        }
        v194 = v14;
        v46 = v166;
        v181 += v170;
        v47 = v181;
        if ((int)v166 >= v181)
        {
          v49 = v187;
        }
        else
        {
          v48 = v178;
          v49 = v187;
          do
          {
            if ((int)v49 >= v47)
              v50 = v47;
            else
              v50 = v49;
            if ((int)v46 < v50)
            {
              if ((int)v49 >= v167)
                v51 = v167;
              else
                v51 = v49;
              v188 = v49;
              v52 = (int)v49;
              if ((int)v49 >= (uint64_t)v167)
                v52 = v167;
              v53 = v52 - (int)v46;
              v54 = v46;
              v55 = (uint64_t *)(v177 + 96 * (v180 + (int)v46));
              do
              {
                v56 = *v55;
                v55 += 12;
                (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, float, float, float))(*(_QWORD *)v56 + 272))(v56, a3, a4, 0, 0, v5, v6, 0.0);
                --v53;
              }
              while (v53);
              v9 = v191;
              do
                v57 = __ldaxr(v191);
              while (__stlxr(v57 + v51 - v54, v191));
              v46 = v51;
              v48 = v178;
              v49 = v188;
              v47 = v181;
            }
            if ((_DWORD)v49 == (_DWORD)v46)
            {
              do
              {
                v46 = __ldaxr(v48);
                v49 = (v46 + 2);
              }
              while (__stlxr(v49, v48));
            }
          }
          while ((int)v46 < v47);
        }
        v166 = v46;
        v187 = v49;
        v19 = v174 + v170;
        v168 += v170;
        ++v171;
        v167 += v170;
        v180 -= v170;
        ++v172;
        v8 = v185;
        v11 = v186;
        v14 = v194;
      }
      while (v172 != v165);
      v163 += v157;
      v160 += v157;
      v179 = v168;
      v172 = v165;
      v16 = LODWORD(v164) - 1;
    }
    v17 = 0;
    ++v159;
    v13 = 1;
  }
  while ((v158 & 1) != 0);
  v195 = v14;
  v58 = (unsigned int *)(a2 + 32);
  v200 = (unsigned int *)(a2 + 33);
  v59 = *((_QWORD *)a2 + 1);
  v175 = *((_QWORD *)a2 + 11);
  do
    v60 = __ldaxr(v58);
  while (__stlxr(v60 + 32, v58));
  v61 = v170;
  if ((int)*v9 < v160)
  {
    v62 = 30000;
    while ((int)*v9 < v160)
    {
      if (!--v62)
      {
        sched_yield();
        v62 = 10000;
      }
    }
  }
  if ((int)*v185 < v14)
  {
    v63 = 30000;
    while ((int)*v185 < v14)
    {
      if (!--v63)
      {
        sched_yield();
        v63 = 10000;
      }
    }
  }
  v182 = v59;
  if (v60 >= (int)v170)
  {
    v64 = 0;
    v65 = 32;
  }
  else
  {
    v64 = 0;
    v65 = 32;
    do
    {
      if (v61 - v60 >= 32)
        v66 = 32;
      else
        v66 = v61 - v60;
      if (v61 - v60 >= 1)
      {
        v205 = v64;
        if (v66 <= 1)
          v67 = 1;
        else
          v67 = v66;
        v68 = v177 + 96 * v60;
        v60 += v67;
        do
        {
          v69 = (void (*)(uint64_t, uint64_t))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*(_QWORD *)v68 + 40)];
          if (v69)
            v69(v68, a4);
          v68 += 96;
          --v67;
        }
        while (v67);
        v61 = v170;
        v64 = v205;
      }
      v65 -= v66;
      if (!v65)
      {
        do
          v60 = __ldaxr(v58);
        while (__stlxr(v60 + 32, v58));
        v65 = 32;
      }
      v64 += v66;
    }
    while (v60 < v61);
  }
  v70 = v60 - v61;
  if (v60 - v61 >= v155)
  {
    v71 = v185;
    v72 = v195;
  }
  else
  {
    v71 = v185;
    v72 = v195;
    do
    {
      v73 = v155 - v70;
      if (v65 < v155 - v70)
        v73 = v65;
      if (v73 >= 1)
      {
        v74 = 32 * v70;
        v75 = v73;
        v76 = v182;
        v77 = v175;
        do
        {
          _X13 = v76 + v74;
          __asm { PRFM            #0, [X13,#0x100] }
          _X14 = v77 + v74;
          __asm { PRFM            #0, [X14,#0x100] }
          *(_QWORD *)_X14 = *(_QWORD *)(v76 + v74);
          *(_DWORD *)(_X14 + 8) = *(_DWORD *)(v76 + v74 + 8);
          *(_QWORD *)(_X14 + 16) = *(_QWORD *)(v76 + v74 + 16);
          *(_DWORD *)(_X14 + 24) = *(_DWORD *)(v76 + v74 + 24);
          v77 += 32;
          v76 += 32;
          --v75;
        }
        while (v75);
      }
      v64 += v73;
      do
        v82 = __ldaxr(v58);
      while (__stlxr(v82 + 32, v58));
      v70 = v82 - v61;
      v65 = 32;
    }
    while ((int)(v82 - v61) < v155);
  }
  if (v64)
  {
    __dmb(0xBu);
    do
      v83 = __ldaxr(v200);
    while (__stlxr(v83 + v64, v200));
  }
  if ((int)*v200 < v61 + v155)
  {
    v84 = 30000;
    while ((int)*v200 < v61 + v155)
    {
      if (!--v84)
      {
        sched_yield();
        v84 = 10000;
      }
    }
  }
  if (a2[1] < 2)
  {
    LODWORD(v201) = v166;
    v85 = v187;
    v86 = v210;
  }
  else
  {
    v176 = v179;
    v169 = v61 + v163;
    v173 = 1;
    v85 = v187;
    v201 = v166;
    v183 = -(uint64_t)v179;
    v86 = v210;
    v87 = v160;
    do
    {
      v161 = v87;
      v206 = v85;
      if ((int)*v191 < v87)
      {
        v88 = 30000;
        while ((int)*v191 < v161)
        {
          if (!--v88)
          {
            sched_yield();
            v85 = v206;
            v88 = 10000;
          }
        }
      }
      if ((_DWORD)v192)
      {
        v89 = 0;
        v212 = v171 * v162;
        v90 = v201;
        do
        {
          if ((int)*v71 < v72)
          {
            v91 = 30000;
            while ((int)*v71 < v72)
            {
              if (!--v91)
              {
                sched_yield();
                v90 = v201;
                v85 = v206;
                v91 = 10000;
              }
            }
          }
          v92 = *(_DWORD *)(v186 + 4 * v89) + v209;
          v209 = v92;
          if (v12 < v92)
          {
            v189 = v89;
            v196 = v72;
            v93 = 0;
            do
            {
              v94 = v86;
              if (v92 - v12 >= v86)
                v95 = v86;
              else
                v95 = v92 - v12;
              if (v95 >= 1)
              {
                v96 = v12 - v212;
                do
                {
                  v97 = (unsigned int *)(v15 + 8 * v96);
                  v98 = *((unsigned __int16 *)v97 + 2);
                  v99 = *v97;
                  _X9 = *(_QWORD *)(v10 + 48 * v99 + 32);
                  v101 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                  do
                  {
                    __asm { PRFM            #0, [X9] }
                    _X9 += 32;
                    _CF = __CFADD__(v101++, 1);
                  }
                  while (!_CF);
                  if ((_DWORD)v98)
                  {
                    v103 = (uint64_t *)(v10 + 8 + 48 * v99);
                    v104 = v98;
                    do
                    {
                      _X11 = *(v103 - 1);
                      __asm { PRFM            #0, [X11] }
                      v108 = *v103;
                      v103 += 6;
                      _X11 = v108;
                      __asm { PRFM            #0, [X11] }
                      --v104;
                    }
                    while (v104);
                  }
                  physx::Dy::gVTableSolveBlock[*(unsigned __int16 *)(v15 + 8 * v96++ + 6)](v10 + 48 * v99);
                }
                while (v96 < v95 + v12 - v212);
              }
              v86 -= v95;
              if (v94 == v95)
              {
                do
                  v12 = __ldaxr(v202);
                while (__stlxr(v12 + v203, v202));
                v86 = v203;
              }
              else
              {
                v12 += v95;
              }
              v93 += v95;
              v92 = v209;
            }
            while (v12 < v209);
            if (v93)
            {
              __dmb(0xBu);
              v71 = v185;
              v72 = v196;
              v85 = v206;
              v90 = v201;
              do
                v110 = __ldaxr(v185);
              while (__stlxr(v110 + v93, v185));
            }
            else
            {
              v71 = v185;
              v72 = v196;
              v85 = v206;
              v90 = v201;
            }
            v89 = v189;
          }
          v72 += *(_DWORD *)(v186 + 4 * v89++);
        }
        while (v89 != v192);
      }
      else
      {
        v90 = v201;
      }
      if ((int)*v71 < v72)
      {
        v111 = 30000;
        while ((int)*v71 < v72)
        {
          if (!--v111)
          {
            sched_yield();
            v90 = v201;
            v85 = v206;
            v111 = 10000;
          }
        }
      }
      v163 += v170;
      v112 = v163;
      if ((int)v90 < v163)
      {
        v113 = v178;
        v197 = v72;
        v213 = v86;
        do
        {
          if ((int)v85 < v112)
            v112 = v85;
          if ((int)v90 < v112)
          {
            if ((int)v85 >= v169)
              v114 = v169;
            else
              v114 = v85;
            v207 = v85;
            v115 = (int)v85;
            if ((int)v85 >= (uint64_t)v169)
              v115 = v169;
            v116 = v115 - (int)v90;
            v117 = v90;
            v118 = (uint64_t *)(v177 + 96 * (v183 + (int)v90));
            do
            {
              v119 = *v118;
              v118 += 12;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, float, float, float))(*(_QWORD *)v119 + 272))(v119, a3, a4, 1, 0, v5, v6, 0.0);
              --v116;
            }
            while (v116);
            do
              v120 = __ldaxr(v191);
            while (__stlxr(v120 + v114 - v117, v191));
            v90 = v114;
            v113 = v178;
            v71 = v185;
            v72 = v197;
            v86 = v213;
            v85 = v207;
          }
          if ((_DWORD)v85 == (_DWORD)v90)
          {
            do
            {
              v90 = __ldaxr(v113);
              v85 = (v90 + 2);
            }
            while (__stlxr(v85, v113));
          }
          v112 = v163;
        }
        while ((int)v90 < v163);
      }
      v201 = v90;
      v87 = v161 + v170;
      ++v171;
      v176 += v170;
      v169 += v170;
      v183 -= v170;
      ++v173;
    }
    while (v173 < a2[1]);
    v160 = v161 + v170;
    v179 = v176;
  }
  v208 = v85;
  if (a2[35] < v160 && (int)*v191 < v160)
  {
    v121 = 30000;
    while ((int)*v191 < v160)
    {
      if (!--v121)
      {
        sched_yield();
        v85 = v208;
        v121 = 10000;
      }
    }
  }
  if ((_DWORD)v192)
  {
    v184 = 0;
    v190 = v171 * v162;
    v122 = v201;
    do
    {
      if ((int)*v71 < v72)
      {
        v123 = 30000;
        while ((int)*v71 < v72)
        {
          if (!--v123)
          {
            sched_yield();
            v122 = v201;
            v85 = v208;
            v123 = 10000;
          }
        }
      }
      v124 = *(_DWORD *)(v186 + 4 * v184) + v209;
      v209 = v124;
      if (v12 < v124)
      {
        v198 = v72;
        v125 = 0;
        do
        {
          v214 = v125;
          v126 = v86;
          if (v124 - v12 >= v86)
            v127 = v86;
          else
            v127 = v124 - v12;
          if (v127 >= 1)
          {
            v128 = v12 - v190;
            do
            {
              v129 = (unsigned int *)(v15 + 8 * v128);
              v130 = *((unsigned __int16 *)v129 + 2);
              v131 = *v129;
              _X9 = *(_QWORD *)(v10 + 48 * v131 + 32);
              v133 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
              do
              {
                __asm { PRFM            #0, [X9] }
                _X9 += 32;
                _CF = __CFADD__(v133++, 1);
              }
              while (!_CF);
              if ((_DWORD)v130)
              {
                v135 = (uint64_t *)(v10 + 8 + 48 * v131);
                v136 = v130;
                do
                {
                  _X11 = *(v135 - 1);
                  __asm { PRFM            #0, [X11] }
                  v140 = *v135;
                  v135 += 6;
                  _X11 = v140;
                  __asm { PRFM            #0, [X11] }
                  --v136;
                }
                while (v136);
              }
              physx::Dy::gVTableSolveWriteBackBlock[*(unsigned __int16 *)(v15 + 8 * v128++ + 6)](v10 + 48 * v131);
            }
            while (v128 < v127 + v12 - v190);
          }
          v86 -= v127;
          if (v126 == v127)
          {
            v142 = v214;
            do
              v12 = __ldaxr(v202);
            while (__stlxr(v12 + v203, v202));
            v86 = v203;
          }
          else
          {
            v12 += v127;
            v142 = v214;
          }
          v125 = v127 + v142;
          v124 = v209;
        }
        while (v12 < v209);
        if (v125)
        {
          __dmb(0xBu);
          v71 = v185;
          v72 = v198;
          v85 = v208;
          v122 = v201;
          do
            v143 = __ldaxr(v185);
          while (__stlxr(v143 + v125, v185));
        }
        else
        {
          v71 = v185;
          v72 = v198;
          v85 = v208;
          v122 = v201;
        }
      }
      v72 += *(_DWORD *)(v186 + 4 * v184++);
    }
    while (v184 != v192);
  }
  else
  {
    v122 = v201;
  }
  if ((int)*v71 < v72)
  {
    v144 = 30000;
    while ((int)*v71 < v72)
    {
      if (!--v144)
      {
        sched_yield();
        v122 = v201;
        v85 = v208;
        v144 = 10000;
      }
    }
  }
  v145 = v163 + v170;
  if (v122 < v163 + (int)v170)
  {
    v146 = v122;
    do
    {
      if ((int)v85 >= v145)
        v147 = v163 + v170;
      else
        v147 = v85;
      v148 = v147 - v146;
      if (v147 > v146)
      {
        v149 = v85;
        v150 = (_QWORD *)(v177 - 96 * v179 + 96 * v146);
        v151 = v147 - v146;
        do
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, float, float, float))(*(_QWORD *)*v150
                                                                                                + 272))(*v150, a3, a4, 0, 0, v5, v6, 0.0);
          v152 = *v150;
          v150 += 12;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v152 + 280))(v152, 0);
          --v151;
        }
        while (v151);
        do
          v153 = __ldaxr(v191);
        while (__stlxr(v153 + v148, v191));
        v146 = v147;
        v85 = v149;
      }
      if ((_DWORD)v85 == v146)
      {
        do
        {
          v146 = __ldaxr(v178);
          v85 = (v146 + 2);
        }
        while (__stlxr(v85, v178));
      }
    }
    while (v146 < v145);
  }
  return (v162 + v162 * v171);
}

uint64_t physx::Dy::SolverCoreGeneral::writeBackV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t result;

  if (a5)
  {
    v12 = a5;
    v13 = a4 + 4;
    do
    {
      v14 = *(uint64_t (**)(void))(a10 + 8 * **(unsigned __int8 **)(a2 + 48 * *(unsigned int *)(v13 - 4) + 32));
      v13 += 8;
      result = v14();
      --v12;
    }
    while (v12);
  }
  *a8 = 0;
  return result;
}

void physx::Dy::solveExtContactCoulombBlock(uint64_t a1, unsigned int a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2;
    do
    {
      physx::Dy::solveExtContactCoulomb(a1);
      a1 += 48;
      --v3;
    }
    while (v3);
  }
}

uint64_t physx::Dy::solveExtContactCoulombBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;

  if (a2)
  {
    v4 = result;
    v5 = a2;
    do
    {
      if (*(__int16 *)(v4 + 16) == -1)
        v6 = *(_DWORD *)(v4 + 20);
      else
        v6 = 0;
      if (*(__int16 *)(v4 + 18) == -1)
        v7 = *(_DWORD *)(v4 + 24);
      else
        v7 = 0;
      v8 = *(_QWORD *)(a3 + 24);
      v9 = v8 + 112 * v6;
      v10 = v8 + 112 * v7;
      physx::Dy::solveExtContactCoulomb(v4);
      result = physx::Dy::writeBackContactCoulomb(v4, a3, v9, v10);
      v4 += 48;
      --v5;
    }
    while (v5);
  }
  v11 = *(_DWORD *)(a3 + 16);
  if (v11)
  {
    v12 = *(unsigned int **)(a3 + 48);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + v11, v12));
    v14 = *(_DWORD *)(a3 + 16);
    if (v14)
    {
      v15 = 0;
      v16 = 0;
      v17 = v11 - v14 + v13;
      do
      {
        v18 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v15);
        v19 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v17 + v16));
        v20 = v18[1];
        *v19 = *v18;
        v19[1] = v20;
        ++v16;
        v15 += 32;
      }
      while (v16 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

unint64_t physx::Dy::solveExtContactCoulombConcludeBlock(unint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = result;
    v3 = a2;
    do
    {
      physx::Dy::solveExtContactCoulomb(v2);
      result = physx::Dy::concludeContactCoulomb(*(_QWORD *)(v2 + 32));
      v2 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t physx::Dy::solveExtFrictionBlock(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float32x2_t a10, float32x4_t a11)
{
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    v12 = result;
    v13 = a2;
    do
    {
      result = physx::Dy::solveExtFriction(v12, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      v12 += 48;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t physx::Dy::solveExtFrictionBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float32x2_t a10, float32x4_t a11)
{
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    v12 = result;
    v13 = a2;
    do
    {
      result = physx::Dy::solveExtFriction(v12, a3, a4, a5, a6, a7, a8, a9, a10, a11);
      v12 += 48;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t physx::Dy::SolverCoreGeneralPF::destroyV(physx::Dy::SolverCoreGeneralPF *this)
{
  (*(void (**)(physx::Dy::SolverCoreGeneralPF *))(*(_QWORD *)this + 8))(this);
  return (*(uint64_t (**)(uint64_t, physx::Dy::SolverCoreGeneralPF *))(*(_QWORD *)(physx::shdfnd::Foundation::mInstance
                                                                                          + 24)
                                                                              + 24))(physx::shdfnd::Foundation::mInstance + 24, this);
}

uint64_t physx::Dy::SolverCoreGeneralPF::solveV_Blocks(uint64_t a1, int *a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t (**v14)(uint64_t);
  uint64_t j;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  int v20;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v31;
  uint64_t result;
  int v34;
  uint64_t v35;
  uint64_t (**v36)(uint64_t);
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  int v41;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, _QWORD);
  int v56;
  uint64_t k;
  unsigned int *v58;
  uint64_t v59;
  unsigned int v60;
  int v62;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v69;
  uint64_t m;
  unsigned int *v72;
  uint64_t v73;
  unsigned int v74;
  int v76;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v83;
  uint64_t v85;
  int v86;
  uint64_t n;
  unsigned int *v88;
  uint64_t v89;
  unsigned int v90;
  int v92;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v99;
  uint64_t ii;
  unsigned int *v102;
  uint64_t v103;
  unsigned int v104;
  int v106;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v113;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  _OWORD *v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, _QWORD);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  __int128 v145;
  _BYTE v146[1024];
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  for (i = 16; i != 1040; i += 32)
    *(_QWORD *)&v146[i] = 0x7F0000007FLL;
  v3 = *((_QWORD *)a2 + 1);
  v141 = *((_QWORD *)a2 + 2);
  v139 = v146;
  v140 = 0x2000000000;
  v138 = 0;
  v145 = *(_OWORD *)(a2 + 58);
  v4 = a2[16];
  v5 = a2[6];
  v6 = a2[10];
  v7 = *((_QWORD *)a2 + 4);
  if ((_DWORD)v4)
  {
    v125 = *((_QWORD *)a2 + 11);
    v126 = v3;
    v127 = a2[6];
    v128 = *((_QWORD *)a2 + 4);
    v129 = a2[10];
    v8 = a2[44];
    v10 = *((_QWORD *)a2 + 6);
    v9 = *((_QWORD *)a2 + 7);
    v12 = *((_QWORD *)a2 + 20);
    v11 = *((_QWORD *)a2 + 21);
    v131 = a2[1];
    v132 = *a2;
    if (*a2)
    {
      v13 = *a2;
      do
      {
        v133 = v13;
        if (v13 == 1)
          v14 = (uint64_t (**)(uint64_t))&physx::Dy::gVTableSolveConcludeBlockCoulomb;
        else
          v14 = physx::Dy::gVTableSolveBlockCoulomb;
        if ((int)v4 >= 1)
        {
          for (j = 0; j != v4; ++j)
          {
            v16 = (unsigned int *)(v9 + 8 * j);
            v17 = *((unsigned __int16 *)v16 + 2);
            v18 = *v16;
            _X9 = *(_QWORD *)(v10 + 48 * v18 + 32);
            v20 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v20++, 1);
            }
            while (!_CF);
            if ((_DWORD)v17)
            {
              v26 = (uint64_t *)(v10 + 8 + 48 * v18);
              v27 = v17;
              do
              {
                _X11 = *(v26 - 1);
                __asm { PRFM            #0, [X11] }
                v31 = *v26;
                v26 += 6;
                _X11 = v31;
                __asm { PRFM            #0, [X11] }
                --v27;
              }
              while (v27);
            }
            result = v14[*(unsigned __int16 *)(v9 + 8 * j + 6)](v10 + 48 * v18);
          }
        }
        v13 = v133 - 1;
      }
      while (v133 != 1);
    }
    if ((int)v8 > 0)
    {
      v34 = 2 * v132;
      if (2 * v132)
      {
        do
        {
          v35 = 0;
          v134 = v34;
          if (v34 == 1)
            v36 = (uint64_t (**)(uint64_t))&physx::Dy::gVTableSolveConcludeBlockCoulomb;
          else
            v36 = physx::Dy::gVTableSolveBlockCoulomb;
          do
          {
            v37 = (unsigned int *)(v11 + 8 * v35);
            v38 = *((unsigned __int16 *)v37 + 2);
            v39 = *v37;
            _X9 = *(_QWORD *)(v12 + 48 * v39 + 32);
            v41 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v41++, 1);
            }
            while (!_CF);
            if ((_DWORD)v38)
            {
              v43 = (uint64_t *)(v12 + 8 + 48 * v39);
              v44 = v38;
              do
              {
                _X11 = *(v43 - 1);
                __asm { PRFM            #0, [X11] }
                v48 = *v43;
                v43 += 6;
                _X11 = v48;
                __asm { PRFM            #0, [X11] }
                --v44;
              }
              while (v44);
            }
            result = v36[*(unsigned __int16 *)(v11 + 8 * v35++ + 6)](v12 + 48 * v39);
          }
          while (v35 != v8);
          v34 = v134 - 1;
        }
        while (v134 != 1);
      }
    }
    v50 = v127;
    v51 = v128;
    if ((_DWORD)v127)
    {
      v52 = v125 + 16;
      v53 = v126 + 16;
      do
      {
        *(_QWORD *)(v52 - 16) = *(_QWORD *)(v53 - 16);
        *(_DWORD *)(v52 - 8) = *(_DWORD *)(v53 - 8);
        *(_QWORD *)v52 = *(_QWORD *)v53;
        *(_DWORD *)(v52 + 8) = *(_DWORD *)(v53 + 8);
        v52 += 32;
        v53 += 32;
        --v50;
      }
      while (v50);
    }
    v54 = v129;
    if ((_DWORD)v129)
    {
      do
      {
        v55 = (uint64_t (*)(uint64_t, _QWORD))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*(_QWORD *)v51 + 40)];
        if (v55)
          result = v55(v51, *((_QWORD *)&v145 + 1));
        v51 += 96;
        --v54;
      }
      while (v54);
    }
    if (v131 != 1)
    {
      v56 = 0;
      do
      {
        v135 = v56;
        if ((int)v4 >= 1)
        {
          for (k = 0; k != v4; ++k)
          {
            v58 = (unsigned int *)(v9 + 8 * k);
            v59 = *((unsigned __int16 *)v58 + 2);
            v60 = *v58;
            _X9 = *(_QWORD *)(v10 + 48 * v60 + 32);
            v62 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v62++, 1);
            }
            while (!_CF);
            if ((_DWORD)v59)
            {
              v64 = (uint64_t *)(v10 + 8 + 48 * v60);
              v65 = v59;
              do
              {
                _X11 = *(v64 - 1);
                __asm { PRFM            #0, [X11] }
                v69 = *v64;
                v64 += 6;
                _X11 = v69;
                __asm { PRFM            #0, [X11] }
                --v65;
              }
              while (v65);
            }
            result = physx::Dy::gVTableSolveBlockCoulomb[*(unsigned __int16 *)(v9 + 8 * k + 6)](v10 + 48 * v60);
          }
        }
        if ((int)v8 >= 1)
        {
          for (m = 0; m != v8; ++m)
          {
            v72 = (unsigned int *)(v11 + 8 * m);
            v73 = *((unsigned __int16 *)v72 + 2);
            v74 = *v72;
            _X9 = *(_QWORD *)(v12 + 48 * v74 + 32);
            v76 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
            do
            {
              __asm { PRFM            #0, [X9] }
              _X9 += 32;
              _CF = __CFADD__(v76++, 1);
            }
            while (!_CF);
            if ((_DWORD)v73)
            {
              v78 = (uint64_t *)(v12 + 8 + 48 * v74);
              v79 = v73;
              do
              {
                _X11 = *(v78 - 1);
                __asm { PRFM            #0, [X11] }
                v83 = *v78;
                v78 += 6;
                _X11 = v83;
                __asm { PRFM            #0, [X11] }
                --v79;
              }
              while (v79);
            }
            result = physx::Dy::gVTableSolveBlockCoulomb[*(unsigned __int16 *)(v11 + 8 * m + 6)](v12 + 48 * v74);
          }
        }
        v56 = v135 + 1;
      }
      while (v135 + 1 != v131 - 1);
    }
    v137 = *((_QWORD *)a2 + 27);
    v85 = *((_QWORD *)a2 + 25);
    v86 = a2[52];
    v138 = 1;
    v144 = v137;
    v143 = v86;
    v142 = v85;
    if (v131)
    {
      v136 = v85;
      if ((int)v4 >= 1)
      {
        for (n = 0; n != v4; ++n)
        {
          v88 = (unsigned int *)(v9 + 8 * n);
          v89 = *((unsigned __int16 *)v88 + 2);
          v90 = *v88;
          _X9 = *(_QWORD *)(v10 + 48 * v90 + 32);
          v92 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
          do
          {
            __asm { PRFM            #0, [X9] }
            _X9 += 32;
            _CF = __CFADD__(v92++, 1);
          }
          while (!_CF);
          if ((_DWORD)v89)
          {
            v94 = (uint64_t *)(v10 + 8 + 48 * v90);
            v95 = v89;
            do
            {
              _X11 = *(v94 - 1);
              __asm { PRFM            #0, [X11] }
              v99 = *v94;
              v94 += 6;
              _X11 = v99;
              __asm { PRFM            #0, [X11] }
              --v95;
            }
            while (v95);
          }
          result = physx::Dy::gVTableSolveWriteBackBlockCoulomb[*(unsigned __int16 *)(v9 + 8 * n + 6)](v10 + 48 * v90);
        }
      }
      v85 = v136;
      if ((int)v8 >= 1)
      {
        for (ii = 0; ii != v8; ++ii)
        {
          v102 = (unsigned int *)(v11 + 8 * ii);
          v103 = *((unsigned __int16 *)v102 + 2);
          v104 = *v102;
          _X9 = *(_QWORD *)(v12 + 48 * v104 + 32);
          v106 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
          do
          {
            __asm { PRFM            #0, [X9] }
            _X9 += 32;
            _CF = __CFADD__(v106++, 1);
          }
          while (!_CF);
          if ((_DWORD)v103)
          {
            v108 = (uint64_t *)(v12 + 8 + 48 * v104);
            v109 = v103;
            do
            {
              _X11 = *(v108 - 1);
              __asm { PRFM            #0, [X11] }
              v113 = *v108;
              v108 += 6;
              _X11 = v113;
              __asm { PRFM            #0, [X11] }
              --v109;
            }
            while (v109);
          }
          result = physx::Dy::gVTableSolveWriteBackBlockCoulomb[*(unsigned __int16 *)(v11 + 8 * ii + 6)](v12 + 48 * v104);
        }
      }
    }
    v115 = v140;
    if ((_DWORD)v140)
    {
      do
        v116 = __ldaxr((unsigned int *)&v137);
      while (__stlxr(v116 + v115, (unsigned int *)&v137));
      if ((_DWORD)v140)
      {
        v117 = 0;
        v118 = 0;
        v119 = v115 - v140 + v116;
        do
        {
          v120 = (_OWORD *)(v85 + 32 * (v119 + v118));
          v121 = *(_OWORD *)&v139[v117 + 16];
          *v120 = *(_OWORD *)&v139[v117];
          v120[1] = v121;
          ++v118;
          v117 += 32;
        }
        while (v118 < v140);
      }
    }
  }
  else
  {
    if ((_DWORD)v5)
    {
      v122 = *((_QWORD *)a2 + 11) + 16;
      v123 = v3 + 16;
      do
      {
        *(_QWORD *)(v122 - 16) = *(_QWORD *)(v123 - 16);
        *(_DWORD *)(v122 - 8) = *(_DWORD *)(v123 - 8);
        *(_QWORD *)v122 = *(_QWORD *)v123;
        *(_DWORD *)(v122 + 8) = *(_DWORD *)(v123 + 8);
        v122 += 32;
        v123 += 32;
        --v5;
      }
      while (v5);
    }
    if ((_DWORD)v6)
    {
      do
      {
        v124 = (uint64_t (*)(uint64_t, _QWORD))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*(_QWORD *)v7 + 40)];
        if (v124)
          result = v124(v7, *((_QWORD *)&v145 + 1));
        v7 += 96;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t physx::Dy::SolverCoreGeneralPF::solveVParallelAndWriteBack(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t i;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  signed int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t (**v19)(uint64_t);
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  signed int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  int v36;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v47;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  uint64_t (**v56)(uint64_t);
  unsigned int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  int v70;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v77;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int *v82;
  signed int v83;
  signed int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  signed int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int *v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  signed int v110;
  uint64_t v111;
  int v112;
  int v113;
  signed int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  int v126;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v133;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  unsigned int v148;
  int v150;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v157;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  signed int v162;
  int v163;
  int v164;
  signed int v165;
  int v166;
  unsigned int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t j;
  unsigned int *v172;
  uint64_t v173;
  unsigned int v174;
  int v176;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v183;
  unsigned int v185;
  uint64_t v186;
  signed int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int *v196;
  uint64_t v197;
  unsigned int v198;
  int v200;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v207;
  unsigned int v209;
  signed int v211;
  int v212;
  int v214;
  signed int v215;
  char v216;
  uint64_t v217;
  int v218;
  unsigned int v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  char v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int *v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  signed int v249;
  signed int v250;
  signed int v251;
  signed int v252;
  signed int v253;
  signed int v254;
  signed int v255;
  unsigned int *v256;
  unsigned int *v257;
  unsigned int v258;
  int v259;
  unsigned int *v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  int v265;
  int v266;
  uint64_t v267;
  int v268;
  signed int v269;
  signed int v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  unsigned int v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  _BYTE v290[1024];
  uint64_t v291;

  v291 = *MEMORY[0x24BDAC8D0];
  v4 = a2[24];
  for (i = 16; i != 1040; i += 32)
    *(_QWORD *)&v290[i] = 0x7F0000007FLL;
  v220 = a2[44];
  v221 = a2[16];
  v6 = *a2;
  v211 = a2[6];
  v212 = a2[1];
  v215 = a2[10];
  v7 = (unsigned int *)(a2 + 30);
  v8 = (unsigned int *)(a2 + 31);
  v257 = (unsigned int *)(a2 + 49);
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + v4, v7));
  v256 = (unsigned int *)(a2 + 30);
  do
  {
    v10 = __ldaxr(v257);
    v11 = __stlxr(v10 + v4, v257);
  }
  while (v11);
  v217 = v10;
  v12 = 0;
  v229 = 0;
  v13 = 0;
  v270 = 0;
  v239 = *((_QWORD *)a2 + 9);
  v14 = a2[20];
  v240 = *((_QWORD *)a2 + 23);
  v241 = (unsigned int *)(a2 + 31);
  v242 = a2[48];
  v15 = *((_QWORD *)a2 + 6);
  v286 = *((_QWORD *)a2 + 7);
  v222 = v6;
  v16 = v15 + 8;
  v17 = 1;
  v288 = *((_QWORD *)a2 + 21);
  v263 = *((_QWORD *)a2 + 20);
  v18 = v6 - 1;
  v276 = v4;
  v233 = v14;
  v279 = v15;
  v271 = v4;
  v225 = v6 - 1;
  do
  {
    v243 = v18;
    v234 = v17;
    if ((v17 & 1) != 0)
      v19 = physx::Dy::gVTableSolveBlockCoulomb;
    else
      v19 = (uint64_t (**)(uint64_t))&physx::Dy::gVTableSolveConcludeBlockCoulomb;
    if (v12 < v11 + v225)
    {
      v258 = v225 + v229 + v11 - v12;
      v20 = v229;
      do
      {
        v230 = v20;
        if ((_DWORD)v14)
        {
          v21 = 0;
          v281 = v20 * v221;
          do
          {
            if ((int)*v8 < v13)
            {
              v22 = 30000;
              while ((int)*v8 < v13)
              {
                if (!--v22)
                {
                  sched_yield();
                  v22 = 10000;
                }
              }
            }
            v23 = *(_DWORD *)(v239 + 4 * v21);
            v270 += v23;
            v24 = v270;
            if (v9 < v270)
            {
              v264 = *(_DWORD *)(v239 + 4 * v21);
              v272 = v21;
              v249 = v13;
              v25 = 0;
              v26 = v276;
              do
              {
                v27 = v24 - v9;
                v277 = v26;
                if (v27 >= v26)
                  v28 = v26;
                else
                  v28 = v27;
                v29 = v15;
                v30 = v286;
                if (v28 >= 1)
                {
                  v31 = v9 - v281;
                  do
                  {
                    v32 = (unsigned int *)(v30 + 8 * v31);
                    v33 = *((unsigned __int16 *)v32 + 2);
                    v34 = *v32;
                    _X9 = *(_QWORD *)(v29 + 48 * v34 + 32);
                    v36 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                    do
                    {
                      __asm { PRFM            #0, [X9] }
                      _X9 += 32;
                      _CF = __CFADD__(v36++, 1);
                    }
                    while (!_CF);
                    if ((_DWORD)v33)
                    {
                      v42 = (uint64_t *)(v16 + 48 * v34);
                      v43 = v33;
                      do
                      {
                        _X11 = *(v42 - 1);
                        __asm { PRFM            #0, [X11] }
                        v47 = *v42;
                        v42 += 6;
                        _X11 = v47;
                        __asm { PRFM            #0, [X11] }
                        --v43;
                      }
                      while (v43);
                    }
                    v30 = v286;
                    v19[*(unsigned __int16 *)(v286 + 8 * v31++ + 6)](v29 + 48 * v34);
                  }
                  while (v31 < v28 + v9 - v281);
                }
                v26 = v277 - v28;
                v4 = v271;
                if (v277 == v28)
                {
                  v15 = v279;
                  do
                    v9 = __ldaxr(v256);
                  while (__stlxr(v9 + v271, v256));
                  v26 = v271;
                }
                else
                {
                  v9 += v28;
                  v15 = v279;
                }
                v25 += v28;
                v24 = v270;
              }
              while (v9 < v270);
              v276 = v26;
              if (v25)
              {
                __dmb(0xBu);
                v8 = v241;
                v13 = v249;
                do
                  v49 = __ldaxr(v241);
                while (__stlxr(v49 + v25, v241));
              }
              else
              {
                v8 = v241;
                v13 = v249;
              }
              v14 = v233;
              v21 = v272;
              v23 = v264;
            }
            v13 += v23;
            ++v21;
          }
          while (v21 != v14);
        }
        v20 = v230 + 1;
      }
      while (v230 + 1 != v258);
      v229 = v258;
      v18 = v243;
      v12 = v243;
    }
    v17 = 0;
    ++v18;
    v11 = 1;
  }
  while ((v234 & 1) != 0);
  v50 = 0;
  v226 = 0;
  v51 = 0;
  v52 = v263;
  v53 = 1;
  v54 = 2 * v222 - 1;
  v273 = v4;
  v55 = v217;
  v214 = v54;
  do
  {
    v216 = v53;
    v218 = v54;
    if ((v53 & 1) != 0)
      v56 = physx::Dy::gVTableSolveBlockCoulomb;
    else
      v56 = (uint64_t (**)(uint64_t))&physx::Dy::gVTableSolveConcludeBlockCoulomb;
    if (v12 < v50 + v214)
    {
      v223 = v214 + v226 + v50 - v12;
      v57 = v226;
      do
      {
        v227 = v57;
        if ((_DWORD)v242)
        {
          v244 = 0;
          v259 = v57 * v220;
          do
          {
            if ((int)*v8 < v13)
            {
              v58 = 30000;
              while ((int)*v8 < v13)
              {
                if (!--v58)
                {
                  sched_yield();
                  v58 = 10000;
                }
              }
            }
            v59 = v244;
            v60 = *(_DWORD *)(v240 + 4 * v244);
            v51 += v60;
            if ((int)v55 < v51)
            {
              v235 = *(_DWORD *)(v240 + 4 * v244);
              v250 = v13;
              v61 = 0;
              v62 = v273;
              v265 = v51;
              do
              {
                v274 = v62;
                if (v51 - (int)v55 >= v62)
                  v63 = v62;
                else
                  v63 = v51 - v55;
                v64 = v288;
                if (v63 >= 1)
                {
                  v65 = (int)v55 - v259;
                  do
                  {
                    v66 = (unsigned int *)(v64 + 8 * v65);
                    v67 = *((unsigned __int16 *)v66 + 2);
                    v68 = *v66;
                    _X9 = *(_QWORD *)(v52 + 48 * v68 + 32);
                    v70 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                    do
                    {
                      __asm { PRFM            #0, [X9] }
                      _X9 += 32;
                      _CF = __CFADD__(v70++, 1);
                    }
                    while (!_CF);
                    if ((_DWORD)v67)
                    {
                      v72 = (uint64_t *)(v263 + 8 + 48 * v68);
                      v73 = v67;
                      do
                      {
                        _X11 = *(v72 - 1);
                        __asm { PRFM            #0, [X11] }
                        v77 = *v72;
                        v72 += 6;
                        _X11 = v77;
                        __asm { PRFM            #0, [X11] }
                        --v73;
                      }
                      while (v73);
                    }
                    v64 = v288;
                    v56[*(unsigned __int16 *)(v288 + 8 * v65++ + 6)](v52 + 48 * v68);
                  }
                  while (v65 < v63 + (int)v55 - v259);
                }
                v62 = v274 - v63;
                if (v274 == v63)
                {
                  v62 = v271;
                  v52 = v263;
                  do
                    v55 = __ldaxr(v257);
                  while (__stlxr(v55 + v271, v257));
                }
                else
                {
                  v55 = (v63 + v55);
                  v52 = v263;
                }
                v51 = v265;
                v61 += v63;
              }
              while ((int)v55 < v265);
              v273 = v62;
              if (v61)
              {
                __dmb(0xBu);
                v8 = v241;
                v60 = v235;
                do
                  v79 = __ldaxr(v241);
                while (__stlxr(v79 + v61, v241));
                v13 = v250;
                v59 = v244;
              }
              else
              {
                v8 = v241;
                v13 = v250;
                v59 = v244;
                v60 = v235;
              }
            }
            v13 += v60;
            v244 = v59 + 1;
          }
          while (v59 + 1 != v242);
        }
        v57 = v227 + 1;
      }
      while (v227 + 1 != v223);
      v226 = v223;
      v54 = v218;
      v12 = v218;
    }
    v53 = 0;
    ++v54;
    v50 = 1;
  }
  while ((v216 & 1) != 0);
  v80 = v233;
  if ((int)*v8 < v13)
  {
    v81 = 30000;
    while ((int)*v8 < v13)
    {
      if (!--v81)
      {
        sched_yield();
        v81 = 10000;
      }
    }
  }
  v82 = (unsigned int *)(a2 + 32);
  v282 = *((_QWORD *)a2 + 4);
  v245 = *((_QWORD *)a2 + 1);
  v260 = (unsigned int *)(a2 + 33);
  v236 = *((_QWORD *)a2 + 11);
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 + 64, v82));
  v251 = v13;
  v84 = v215;
  if (v83 >= v215)
  {
    v85 = 0;
    v86 = 64;
  }
  else
  {
    v85 = 0;
    v86 = 64;
    do
    {
      v87 = v84 - v83;
      if (v87 >= 64)
        v88 = 64;
      else
        v88 = v87;
      if (v87 >= 1)
      {
        if (v88 <= 1)
          v89 = 1;
        else
          v89 = v88;
        v90 = v282 + 96 * v83;
        v83 += v89;
        do
        {
          v91 = (void (*)(uint64_t, uint64_t))physx::Dy::ArticulationPImpl::sSaveVelocity[*(unsigned int *)(*(_QWORD *)v90 + 40)];
          if (v91)
            v91(v90, a4);
          v90 += 96;
          --v89;
        }
        while (v89);
        v80 = v233;
      }
      v86 -= v88;
      if (!v86)
      {
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 + 64, v82));
        v86 = 64;
      }
      v85 += 2 * v88;
      v84 = v215;
    }
    while (v83 < v215);
  }
  v92 = v83 - v84;
  if (v83 - v84 < v211)
  {
    do
    {
      v93 = v211 - v92;
      if (v86 < v211 - v92)
        v93 = v86;
      if (v93 >= 1)
      {
        v94 = 32 * v92;
        v95 = v93;
        v96 = v245;
        v97 = v236;
        do
        {
          _X13 = v96 + v94;
          __asm { PRFM            #0, [X13,#0x100] }
          _X14 = v97 + v94;
          __asm { PRFM            #0, [X14,#0x100] }
          *(_QWORD *)_X14 = *(_QWORD *)(v96 + v94);
          *(_DWORD *)(_X14 + 8) = *(_DWORD *)(v96 + v94 + 8);
          *(_QWORD *)(_X14 + 16) = *(_QWORD *)(v96 + v94 + 16);
          *(_DWORD *)(_X14 + 24) = *(_DWORD *)(v96 + v94 + 24);
          v97 += 32;
          v96 += 32;
          --v95;
        }
        while (v95);
      }
      v85 += v93;
      do
        v102 = __ldaxr(v82);
      while (__stlxr(v102 + 64, v82));
      v92 = v102 - v215;
      v86 = 64;
    }
    while ((int)(v102 - v215) < v211);
  }
  if (v85)
  {
    __dmb(0xBu);
    do
      v103 = __ldaxr(v260);
    while (__stlxr(v103 + v85, v260));
  }
  v104 = v271;
  v105 = v241;
  if ((int)*v260 < v215 + v211)
  {
    v106 = 30000;
    while ((int)*v260 < v215 + v211)
    {
      if (!--v106)
      {
        sched_yield();
        v106 = 10000;
      }
    }
  }
  if (v212 == 1)
  {
    LODWORD(v108) = v55;
    v219 = v229;
    v160 = v226;
  }
  else
  {
    v107 = v229;
    v219 = v229 + v212 - 1;
    v283 = v279 + 8;
    v108 = v55;
    do
    {
      v231 = v107;
      if (v80)
      {
        v109 = 0;
        v246 = v107 * v221;
        v110 = v251;
        v111 = v286;
        v266 = v51;
        v261 = v108;
        do
        {
          v252 = v110;
          if ((int)*v105 < v110)
          {
            v112 = 30000;
            while ((int)*v105 < v252)
            {
              if (!--v112)
              {
                sched_yield();
                v112 = 10000;
              }
            }
          }
          v113 = *(_DWORD *)(v239 + 4 * v109);
          v270 += v113;
          v114 = v270;
          if (v9 < v270)
          {
            v224 = *(_DWORD *)(v239 + 4 * v109);
            v237 = v109;
            v115 = 0;
            v116 = v276;
            do
            {
              v117 = v114 - v9;
              v118 = v116;
              if (v117 >= v116)
                v119 = v116;
              else
                v119 = v117;
              v120 = v279;
              if (v119 >= 1)
              {
                v121 = v9 - v246;
                do
                {
                  v122 = (unsigned int *)(v286 + 8 * v121);
                  v123 = *((unsigned __int16 *)v122 + 2);
                  v124 = *v122;
                  _X9 = *(_QWORD *)(v120 + 48 * v124 + 32);
                  v126 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                  do
                  {
                    __asm { PRFM            #0, [X9] }
                    _X9 += 32;
                    _CF = __CFADD__(v126++, 1);
                  }
                  while (!_CF);
                  if ((_DWORD)v123)
                  {
                    v128 = (uint64_t *)(v283 + 48 * v124);
                    v129 = v123;
                    do
                    {
                      _X11 = *(v128 - 1);
                      __asm { PRFM            #0, [X11] }
                      v133 = *v128;
                      v128 += 6;
                      _X11 = v133;
                      __asm { PRFM            #0, [X11] }
                      --v129;
                    }
                    while (v129);
                  }
                  v120 = v279;
                  physx::Dy::gVTableSolveBlockCoulomb[*(unsigned __int16 *)(v286 + 8 * v121++ + 6)](v279 + 48 * v124);
                }
                while (v121 < v119 + v9 - v246);
              }
              v116 = v118 - v119;
              if (v118 == v119)
              {
                v108 = v261;
                do
                  v9 = __ldaxr(v256);
                while (__stlxr(v9 + v104, v256));
                v116 = v104;
                v51 = v266;
              }
              else
              {
                v9 += v119;
                v51 = v266;
                v108 = v261;
              }
              v115 += v119;
              v114 = v270;
            }
            while (v9 < v270);
            v276 = v116;
            if (v115)
            {
              __dmb(0xBu);
              v105 = v241;
              v113 = v224;
              do
                v135 = __ldaxr(v241);
              while (__stlxr(v135 + v115, v241));
              v109 = v237;
            }
            else
            {
              v105 = v241;
              v109 = v237;
              v113 = v224;
            }
          }
          v110 = v113 + v252;
          ++v109;
        }
        while (v109 != v233);
      }
      else
      {
        v110 = v251;
        v111 = v286;
      }
      v136 = v231 + 1;
      v232 = v231 + 1;
      if ((_DWORD)v242)
      {
        v137 = 0;
        v247 = (int)(v9 - v136 * v221);
        do
        {
          v253 = v110;
          if ((int)*v105 < v110)
          {
            v138 = 30000;
            while ((int)*v105 < v253)
            {
              if (!--v138)
              {
                sched_yield();
                v138 = 10000;
              }
            }
          }
          v139 = *(_DWORD *)(v240 + 4 * v137);
          v51 += v139;
          if ((int)v108 < v51)
          {
            v238 = *(_DWORD *)(v240 + 4 * v137);
            v267 = v137;
            v140 = 0;
            v141 = v273;
            do
            {
              v262 = v108;
              v142 = v141;
              if (v51 - (int)v108 >= v141)
                v143 = v141;
              else
                v143 = v51 - v108;
              v144 = v279;
              if (v143 >= 1)
              {
                v145 = v247;
                do
                {
                  v146 = (unsigned int *)(v111 + 8 * v145);
                  v147 = *((unsigned __int16 *)v146 + 2);
                  v148 = *v146;
                  _X9 = *(_QWORD *)(v144 + 48 * v148 + 32);
                  v150 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
                  do
                  {
                    __asm { PRFM            #0, [X9] }
                    _X9 += 32;
                    _CF = __CFADD__(v150++, 1);
                  }
                  while (!_CF);
                  if ((_DWORD)v147)
                  {
                    v152 = (uint64_t *)(v283 + 48 * v148);
                    v153 = v147;
                    do
                    {
                      _X11 = *(v152 - 1);
                      __asm { PRFM            #0, [X11] }
                      v157 = *v152;
                      v152 += 6;
                      _X11 = v157;
                      __asm { PRFM            #0, [X11] }
                      --v153;
                    }
                    while (v153);
                  }
                  v144 = v279;
                  physx::Dy::gVTableSolveBlockCoulomb[*(unsigned __int16 *)(v111 + 8 * v145++ + 6)](v279 + 48 * v148);
                }
                while (v145 < v143 + (int)v247);
              }
              v141 = v142 - v143;
              if (v142 == v143)
              {
                v104 = v271;
                do
                  v108 = __ldaxr(v257);
                while (__stlxr(v108 + v271, v257));
                v141 = v271;
              }
              else
              {
                v108 = (v143 + v262);
                v104 = v271;
              }
              v140 += v143;
            }
            while ((int)v108 < v51);
            v273 = v141;
            if (v140)
            {
              __dmb(0xBu);
              v137 = v267;
              do
                v159 = __ldaxr(v241);
              while (__stlxr(v159 + v140, v241));
              v105 = v241;
            }
            else
            {
              v105 = v241;
              v137 = v267;
            }
            v139 = v238;
          }
          v110 = v139 + v253;
          ++v137;
        }
        while (v137 != v242);
      }
      v251 = v110;
      v107 = v232;
      v80 = v233;
    }
    while (v232 != v219);
    v160 = v226 + v212 - 1;
  }
  v228 = v160;
  if (v80)
  {
    v161 = 0;
    v162 = v251;
    v268 = v51;
    do
    {
      v254 = v162;
      if ((int)*v105 < v162)
      {
        v163 = 30000;
        while ((int)*v105 < v254)
        {
          if (!--v163)
          {
            sched_yield();
            v163 = 10000;
          }
        }
      }
      v164 = *(_DWORD *)(v239 + 4 * v161);
      v270 += v164;
      v165 = v270;
      if (v9 < v270)
      {
        v248 = *(_DWORD *)(v239 + 4 * v161);
        v284 = v161;
        v166 = 0;
        v167 = v276;
        do
        {
          v168 = v165 - v9;
          v278 = v167;
          if (v168 >= (int)v167)
            v169 = v167;
          else
            v169 = v168;
          v170 = v279;
          if ((int)v169 >= 1)
          {
            for (j = 0; j != v169; ++j)
            {
              v172 = (unsigned int *)(v286 + 8 * j);
              v173 = *((unsigned __int16 *)v172 + 2);
              v174 = *v172;
              _X9 = *(_QWORD *)(v170 + 48 * v174 + 32);
              v176 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
              do
              {
                __asm { PRFM            #0, [X9] }
                _X9 += 32;
                _CF = __CFADD__(v176++, 1);
              }
              while (!_CF);
              if ((_DWORD)v173)
              {
                v178 = (uint64_t *)(v279 + 8 + 48 * v174);
                v179 = v173;
                do
                {
                  _X11 = *(v178 - 1);
                  __asm { PRFM            #0, [X11] }
                  v183 = *v178;
                  v178 += 6;
                  _X11 = v183;
                  __asm { PRFM            #0, [X11] }
                  --v179;
                }
                while (v179);
              }
              v170 = v279;
              physx::Dy::gVTableSolveWriteBackBlockCoulomb[*(unsigned __int16 *)(v286 + 8 * j + 6)](v279 + 48 * v174);
            }
          }
          v167 = v278 - v169;
          if (v278 == (_DWORD)v169)
          {
            do
              v9 = __ldaxr(v256);
            while (__stlxr(v9 + v104, v256));
            v167 = v104;
          }
          else
          {
            v9 += v169;
          }
          v51 = v268;
          v166 += v169;
          v165 = v270;
        }
        while (v9 < v270);
        v276 = v167;
        if (v166)
        {
          __dmb(0xBu);
          v161 = v284;
          do
            v185 = __ldaxr(v241);
          while (__stlxr(v185 + v166, v241));
          v105 = v241;
        }
        else
        {
          v105 = v241;
          v161 = v284;
        }
        v164 = v248;
      }
      v162 = v164 + v254;
      ++v161;
    }
    while (v161 != v233);
  }
  else
  {
    v162 = v251;
  }
  if ((_DWORD)v242)
  {
    v186 = 0;
    v287 = v228 * v220;
    v187 = v108;
    do
    {
      v255 = v162;
      if ((int)*v241 < v162)
      {
        v188 = 30000;
        while ((int)*v241 < v255)
        {
          if (!--v188)
          {
            sched_yield();
            v188 = 10000;
          }
        }
      }
      v189 = *(_DWORD *)(v240 + 4 * v186);
      v51 += v189;
      if (v187 < v51)
      {
        v280 = *(_DWORD *)(v240 + 4 * v186);
        v285 = v186;
        v190 = 0;
        v191 = v273;
        v269 = v51;
        do
        {
          v275 = v191;
          if (v51 - v187 >= v191)
            v192 = v191;
          else
            v192 = v51 - v187;
          v193 = v288;
          v194 = v263;
          if (v192 >= 1)
          {
            v195 = v187 - v287;
            do
            {
              v196 = (unsigned int *)(v193 + 8 * v195);
              v197 = *((unsigned __int16 *)v196 + 2);
              v198 = *v196;
              _X9 = *(_QWORD *)(v194 + 48 * v198 + 32);
              v200 = ~((_X9 + 383) >> 5) + (_X9 >> 5);
              do
              {
                __asm { PRFM            #0, [X9] }
                _X9 += 32;
                _CF = __CFADD__(v200++, 1);
              }
              while (!_CF);
              if ((_DWORD)v197)
              {
                v202 = (uint64_t *)(v263 + 8 + 48 * v198);
                v203 = v197;
                do
                {
                  _X11 = *(v202 - 1);
                  __asm { PRFM            #0, [X11] }
                  v207 = *v202;
                  v202 += 6;
                  _X11 = v207;
                  __asm { PRFM            #0, [X11] }
                  --v203;
                }
                while (v203);
              }
              v194 = v263;
              v193 = v288;
              physx::Dy::gVTableSolveWriteBackBlockCoulomb[*(unsigned __int16 *)(v288 + 8 * v195++ + 6)](v263 + 48 * v198);
            }
            while (v195 < v192 + v187 - v287);
          }
          v191 = v275 - v192;
          if (v275 == v192)
          {
            v191 = v271;
            do
              v187 = __ldaxr(v257);
            while (__stlxr(v187 + v271, v257));
          }
          else
          {
            v187 += v192;
          }
          v51 = v269;
          v190 += v192;
        }
        while (v187 < v269);
        v273 = v191;
        if (v190)
        {
          __dmb(0xBu);
          v186 = v285;
          do
            v209 = __ldaxr(v241);
          while (__stlxr(v209 + v190, v241));
        }
        else
        {
          v186 = v285;
        }
        v189 = v280;
      }
      v162 = v189 + v255;
      ++v186;
    }
    while (v186 != v242);
  }
  return v220 + v220 * v228 + v221 + v221 * v219;
}

uint64_t physx::Dy::SolverCoreGeneralPF::writeBackV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t result;

  if (a5)
  {
    v12 = a5;
    v13 = a4 + 4;
    do
    {
      v14 = *(uint64_t (**)(void))(a10 + 8 * **(unsigned __int8 **)(a2 + 48 * *(unsigned int *)(v13 - 4) + 32));
      v13 += 8;
      result = v14();
      --v12;
    }
    while (v12);
  }
  *a8 = 0;
  return result;
}

float *physx::Dy::solveContactCoulomb(float *result, double a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8)
{
  float32x2_t v8;
  uint64_t v9;
  uint64_t *v10;
  _DWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  _DWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v30;
  const float *v31;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  const float *v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;

  v10 = *(uint64_t **)result;
  v9 = *((_QWORD *)result + 1);
  v12.i64[0] = **(_QWORD **)result;
  v11 = (_DWORD *)(*(_QWORD *)result + 8);
  v12.i64[1] = *v11;
  v13.i64[0] = *(_QWORD *)v9;
  v13.i64[1] = *(unsigned int *)(v9 + 8);
  v15.i64[0] = *(_QWORD *)(*(_QWORD *)result + 16);
  v14 = (_DWORD *)(*(_QWORD *)result + 24);
  v15.i64[1] = *v14;
  v16.i64[0] = *(_QWORD *)(v9 + 16);
  v16.i64[1] = *(unsigned int *)(v9 + 24);
  v17 = *((_QWORD *)result + 4);
  if (*(_WORD *)(v17 + 2))
  {
    v18 = v17 + *(unsigned __int16 *)(v17 + 2);
    do
    {
      v19 = *(unsigned __int8 *)(v17 + 1);
      result = (float *)(v17 + *(unsigned __int16 *)(v17 + 2));
      __asm { PRFM            #0, [X0,#0x20] }
      if (*(_BYTE *)(v17 + 1))
      {
        v25.i64[0] = *(_QWORD *)(v17 + 16);
        v25.i64[1] = *(unsigned int *)(v17 + 24);
        a7.i32[0] = *(_DWORD *)(v17 + 4);
        a8.i32[0] = *(_DWORD *)(v17 + 28);
        result += 8;
        v26 = vmulq_n_f32(v25, *(float *)(v17 + 8));
        v26.i32[3] = 0;
        v27 = vmulq_n_f32(v25, *(float *)(v17 + 12));
        v27.i32[3] = 0;
        v28 = vnegq_f32(v27);
        _X1 = (const float *)(v17 + 92);
        v30 = *(unsigned __int8 *)(v17 + 1);
        v31 = result;
        do
        {
          __asm { PRFUM           #0, [X1,#0x54] }
          v33 = *(float32x4_t *)(_X1 - 11);
          v34 = *(float32x4_t *)(_X1 - 7);
          v35 = vld1_dup_f32(v31++);
          v36 = vld1_dup_f32(_X1);
          v8.f32[0] = *(_X1 - 3);
          v37 = vsubq_f32(vmlaq_f32(vmulq_f32(v15, v33), v25, v12), vmlaq_f32(vmulq_f32(v16, v34), v25, v13));
          v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
          v38 = _X1 - 2;
          v39 = vld1_dup_f32(v38);
          v40 = vmin_f32(vadd_f32(v35, vmax_f32(vmls_lane_f32(v39, vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32), v8, 0), vneg_f32(v35))), v36);
          v41 = vsub_f32(v40, v35);
          v12 = vmlaq_n_f32(v12, v26, v41.f32[0]);
          v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
          v13 = vmlaq_n_f32(v13, v28, v41.f32[0]);
          v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
          v8 = vmul_f32(a7, v41);
          v15 = vmlaq_n_f32(v15, v33, v8.f32[0]);
          v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
          v16 = vmlsq_lane_f32(v16, v34, vmul_f32(a8, v41), 0);
          v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
          *result = v40.f32[0];
          _X1 += 12;
          result = (float *)v31;
          --v30;
        }
        while (v30);
      }
      v17 += 48 * v19 + 48;
    }
    while (v17 < v18);
  }
  *v10 = v12.i64[0];
  *v11 = v12.i32[2];
  *(_QWORD *)v9 = v13.i64[0];
  *(_DWORD *)(v9 + 8) = v13.i32[2];
  v10[2] = v15.i64[0];
  *v14 = v15.i32[2];
  *(_QWORD *)(v9 + 16) = v16.i64[0];
  *(_DWORD *)(v9 + 24) = v16.i32[2];
  return result;
}

uint64_t **physx::Dy::solveFriction(uint64_t **result, double a2, double a3, double a4, double a5, double a6, float32x2_t a7, float32x2_t a8)
{
  float32x2_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _DWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  _DWORD *v14;
  float32x4_t v15;
  float32x4_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  const float *v25;
  const float *v26;
  float32x4_t v27;
  float32x4_t v28;
  unsigned int v29;
  unsigned int v30;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  const float *v42;
  float32x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x2_t v51;

  v10 = *result;
  v9 = result[1];
  v12.i64[0] = **result;
  v11 = *result + 1;
  v12.i64[1] = *v11;
  v13.i64[0] = *v9;
  v13.i64[1] = *((unsigned int *)v9 + 2);
  v15.i64[0] = (*result)[2];
  v14 = *result + 3;
  v15.i64[1] = *v14;
  v16.i64[0] = v9[2];
  v16.i64[1] = *((unsigned int *)v9 + 6);
  if (*((_WORD *)result + 15))
  {
    v17 = (unint64_t)result[4];
    v18 = v17 + 16 * *((unsigned __int16 *)result + 15);
    do
    {
      v19 = v17 + 32;
      result = (uint64_t **)*(unsigned __int8 *)(v17 + 1);
      v20 = v17 + 32 + ((4 * (_WORD)result + 12) & 0x7F0);
      v21 = *(unsigned __int8 *)(v17 + 2);
      if (*(_BYTE *)(v17 + 2))
      {
        v22 = 0;
        v23 = 0;
        v24 = *(float *)(v17 + 4);
        a7.i32[0] = *(_DWORD *)(v17 + 16);
        a8.i32[0] = *(_DWORD *)(v17 + 20);
        v25 = (const float *)(v17 + 12);
        v26 = (const float *)(v17 + 8);
        v27 = vld1q_dup_f32(v26);
        v28 = vld1q_dup_f32(v25);
        if (v21 / result <= 1)
          v29 = 1;
        else
          v29 = v21 / result;
        do
        {
          if (result <= v21)
          {
            v30 = v22 + v29;
            do
            {
              _X6 = v20 + ((unint64_t)v22 << 6);
              __asm { PRFM            #0, [X6,#0x80] }
              v37 = *(int32x4_t *)_X6;
              v38 = *(float32x4_t *)_X6;
              v38.i32[3] = 0;
              v39 = *(float32x4_t *)(_X6 + 16);
              v39.i32[3] = 0;
              v40 = *(float32x4_t *)(_X6 + 32);
              v40.i32[3] = 0;
              v41 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)_X6, 3);
              v42 = (const float *)(_X6 + 48);
              v43 = vld1_dup_f32(v42);
              v8.f32[0] = v24 * *(float *)(v19 + 4 * v23);
              v8 = (float32x2_t)vdup_lane_s32((int32x2_t)v8, 0);
              v44 = vmulq_f32(v12, v38);
              v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
              v45 = vmulq_f32(v15, v39);
              v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
              v46 = vmulq_f32(v13, v38);
              v46.i64[0] = vpaddq_f32(v46, v46).u64[0];
              v47 = vmulq_f32(v16, v40);
              v47.i64[0] = vpaddq_f32(v47, v47).u64[0];
              *(float32x2_t *)v44.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32), vpadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32));
              *(float32x2_t *)v45.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32), vpadd_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32));
              v48 = vmulq_f32(v27, v38);
              v48.i32[3] = 0;
              v49 = vmulq_f32(v28, v38);
              v49.i32[3] = 0;
              v50 = vmax_f32(vmin_f32(vmla_laneq_f32(vmls_laneq_f32(v41, v43, *(float32x4_t *)(_X6 + 16), 3), vsub_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.f32), *(float32x4_t *)(_X6 + 16), 3), v8), vneg_f32(v8));
              v51 = vsub_f32(v50, v41);
              v12 = vmlaq_n_f32(v12, v48, v51.f32[0]);
              v12.i64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
              v13 = vmlsq_lane_f32(v13, v49, v51, 0);
              v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
              v15 = vmlaq_n_f32(v15, v39, vmul_f32(a7, v51).f32[0]);
              v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
              v16 = vmlsq_lane_f32(v16, v40, vmul_f32(a8, v51), 0);
              v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
              v37.i32[3] = v50.i32[1];
              *(int32x4_t *)_X6 = v37;
              ++v22;
            }
            while (v30 != v22);
            v22 = v30;
          }
          ++v23;
        }
        while (v22 < v21);
      }
      v17 = v20 + (v21 << 6);
    }
    while (v17 < v18);
  }
  *v10 = v12.i64[0];
  *v11 = v12.i32[2];
  *v9 = v13.i64[0];
  *((_DWORD *)v9 + 2) = v13.i32[2];
  v10[2] = v15.i64[0];
  *v14 = v15.i32[2];
  v9[2] = v16.i64[0];
  *((_DWORD *)v9 + 6) = v16.i32[2];
  return result;
}

uint64_t physx::Dy::solveContactCoulomb_BStatic(uint64_t result, unint64_t _X1, double a3, double a4, double a5, float32x2_t a6, double a7, double a8, double a9, float32x2_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  unint64_t v12;
  unsigned int v13;
  float *v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v25;
  const float *v26;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  const float *v32;
  float32x2_t v33;
  float32x2_t v34;

  v10.i64[0] = *(_QWORD *)result;
  v10.i64[1] = *(unsigned int *)(result + 8);
  v11.i64[0] = *(_QWORD *)(result + 16);
  v11.i64[1] = *(unsigned int *)(result + 24);
  if (*(_WORD *)(_X1 + 2))
  {
    v12 = _X1 + *(unsigned __int16 *)(_X1 + 2);
    do
    {
      v13 = *(unsigned __int8 *)(_X1 + 1);
      __asm { PRFM            #0, [X1,#0x30] }
      _X13 = _X1 + *(unsigned __int16 *)(_X1 + 2);
      __asm { PRFM            #0, [X13,#0x20] }
      if (*(_BYTE *)(_X1 + 1))
      {
        v21 = (float *)(_X13 + 32);
        v22.i64[0] = *(_QWORD *)(_X1 + 16);
        v22.i64[1] = *(unsigned int *)(_X1 + 24);
        a6.i32[0] = *(_DWORD *)(_X1 + 4);
        v23 = vmulq_n_f32(v22, *(float *)(_X1 + 8));
        v23.i32[3] = 0;
        _X14 = (const float *)(_X1 + 92);
        v25 = *(unsigned __int8 *)(_X1 + 1);
        v26 = v21;
        do
        {
          __asm { PRFUM           #0, [X14,#0x54] }
          v28 = *(float32x4_t *)(_X14 - 11);
          v29 = vld1_dup_f32(v26++);
          a10.f32[0] = *(_X14 - 3);
          v30 = vld1_dup_f32(_X14);
          v31 = vmlaq_f32(vmulq_f32(v11, v28), v22, v10);
          v31.i64[0] = vpaddq_f32(v31, v31).u64[0];
          v32 = _X14 - 2;
          v33 = vld1_dup_f32(v32);
          a10 = vmin_f32(vadd_f32(v29, vmax_f32(vmls_lane_f32(v33, vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v31.f32), a10, 0), vneg_f32(v29))), v30);
          v34 = vsub_f32(a10, v29);
          v10 = vmlaq_n_f32(v10, v23, v34.f32[0]);
          v10.i64[1] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u32[0];
          v11 = vmlaq_n_f32(v11, v28, vmul_f32(a6, v34).f32[0]);
          v11.i64[1] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u32[0];
          *v21 = a10.f32[0];
          _X14 += 12;
          v21 = (float *)v26;
          --v25;
        }
        while (v25);
      }
      _X1 += 48 + 48 * v13;
    }
    while (_X1 < v12);
  }
  *(_QWORD *)result = v10.i64[0];
  *(_DWORD *)(result + 8) = v10.i32[2];
  *(_QWORD *)(result + 16) = v11.i64[0];
  *(_DWORD *)(result + 24) = v11.i32[2];
  return result;
}

unint64_t physx::Dy::solveFriction_BStatic(unint64_t result)
{
  float32x2_t v1;
  uint64_t *v2;
  _DWORD *v3;
  float32x4_t v4;
  _DWORD *v5;
  float32x4_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  const float *v16;
  const float *v17;
  float32x4_t v18;
  float32x4_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x2_t v32;
  const float *v33;
  float32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;

  v2 = *(uint64_t **)result;
  v4.i64[0] = **(_QWORD **)result;
  v3 = (_DWORD *)(*(_QWORD *)result + 8);
  v4.i64[1] = *v3;
  v6.i64[0] = *(_QWORD *)(*(_QWORD *)result + 16);
  v5 = (_DWORD *)(*(_QWORD *)result + 24);
  v6.i64[1] = *v5;
  v7 = *(unsigned __int16 *)(result + 30);
  if (*(_WORD *)(result + 30))
  {
    result = *(_QWORD *)(result + 32);
    v8 = result + 16 * v7;
    do
    {
      v9 = *(unsigned __int8 *)(result + 2);
      v10 = *(unsigned __int8 *)(result + 1);
      v11 = result + 32;
      v12 = result + 32 + ((4 * (_WORD)v10 + 12) & 0x7F0);
      if (*(_BYTE *)(result + 2))
      {
        LODWORD(v13) = 0;
        v14 = 0;
        v15 = *(float *)(result + 4);
        v16 = (const float *)(result + 16);
        v17 = (const float *)(result + 8);
        v18 = vld1q_dup_f32(v16);
        v19 = vld1q_dup_f32(v17);
        if (v9 / v10 <= 1)
          v20 = 1;
        else
          v20 = v9 / v10;
        do
        {
          if (v10 <= v9)
          {
            v21 = v13 + v20;
            do
            {
              v22 = v12 + ((unint64_t)v13 << 6);
              v13 = (v13 + 1);
              _X4 = v12 + (v13 << 6);
              __asm { PRFM            #0, [X4] }
              v29 = *(int32x4_t *)v22;
              v30 = *(float32x4_t *)v22;
              v30.i32[3] = 0;
              v31 = *(float32x4_t *)(v22 + 16);
              v31.i32[3] = 0;
              v32 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v22, 3);
              v33 = (const float *)(v22 + 48);
              v34 = vld1_dup_f32(v33);
              v1.f32[0] = v15 * *(float *)(v11 + 4 * v14);
              v1 = (float32x2_t)vdup_lane_s32((int32x2_t)v1, 0);
              v35 = vmulq_f32(v4, v30);
              v35.i64[0] = vpaddq_f32(v35, v35).u64[0];
              v36 = vmulq_f32(v6, v31);
              v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
              v37 = vmulq_f32(v18, v31);
              v37.i32[3] = 0;
              v38 = vmulq_f32(v19, v30);
              v38.i32[3] = 0;
              v39 = vmax_f32(vmin_f32(vmla_laneq_f32(vmls_laneq_f32(v32, v34, *(float32x4_t *)(v22 + 16), 3), vadd_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32)), *(float32x4_t *)(v22 + 16), 3), v1), vneg_f32(v1));
              v32.i32[0] = vsub_f32(v39, v32).u32[0];
              v4 = vmlaq_n_f32(v4, v38, v32.f32[0]);
              v4.i64[1] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u32[0];
              v6 = vmlaq_n_f32(v6, v37, v32.f32[0]);
              v6.i64[1] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u32[0];
              v29.i32[3] = v39.i32[1];
              *(int32x4_t *)v22 = v29;
            }
            while (v21 != (_DWORD)v13);
            LODWORD(v13) = v21;
          }
          ++v14;
        }
        while (v13 < v9);
      }
      result = v12 + (v9 << 6);
    }
    while (result < v8);
  }
  *v2 = v4.i64[0];
  *v3 = v4.i32[2];
  v2[2] = v6.i64[0];
  *v5 = v6.i32[2];
  return result;
}

unint64_t physx::Dy::concludeContactCoulomb(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  int v3;
  uint64_t v11;

  if (*(_WORD *)(result + 2))
  {
    v1 = result + *(unsigned __int16 *)(result + 2);
    do
    {
      v2 = result + 48;
      v3 = *(unsigned __int8 *)(result + 1);
      __asm
      {
        PRFM            #0, [X0,#0xB0]
        PRFM            #0, [X0,#0x130]
        PRFM            #0, [X0,#0x1B0]
      }
      if (*(_BYTE *)(result + 1))
      {
        if (*(_BYTE *)result == 3)
          v11 = 112;
        else
          v11 = 48;
        do
        {
          result = v2 + v11;
          *(_DWORD *)(v2 + 36) = *(_DWORD *)(v2 + 40);
          v2 += v11;
          --v3;
        }
        while (v3);
      }
      else
      {
        result += 48;
      }
    }
    while (result < v1);
  }
  return result;
}

uint64_t physx::Dy::writeBackContactCoulomb(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  float *v7;
  float v8;
  char v10;
  unsigned int v11;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(result + 32);
  v5 = 48;
  if (*(_BYTE *)v4 == 3)
    v5 = 112;
  if (*(_WORD *)(v4 + 2))
  {
    v6 = v4 + *(unsigned __int16 *)(v4 + 2);
    v7 = *(float **)(result + 40);
    v8 = 0.0;
    _X12 = *(_QWORD *)(result + 32);
    do
    {
      v10 = *(_BYTE *)(_X12 + 40);
      v11 = *(unsigned __int8 *)(_X12 + 1);
      __asm
      {
        PRFM            #0, [X12,#0x130]
        PRFM            #0, [X12,#0x1B0]
      }
      if (v7 && *(_BYTE *)(_X12 + 1))
      {
        v18 = (float *)(_X12 + *(unsigned __int16 *)(_X12 + 2) + 32);
        v19 = *(unsigned __int8 *)(_X12 + 1);
        do
        {
          v20 = *v18++;
          *v7++ = v20;
          v8 = v8 + v20;
          --v19;
        }
        while (v19);
      }
      _X12 += 48 + v5 * (unint64_t)v11;
    }
    while (_X12 < v6);
    if ((v10 & 1) != 0 && *(unsigned __int16 *)(result + 16) == 0xFFFF && *(__int16 *)(result + 18) == -1 && v8 != 0.0)
    {
      v21 = *(float *)(a3 + 28);
      v22 = *(float *)(a4 + 28);
      if (v21 < 3.4028e38 || v22 < 3.4028e38)
      {
        if (v21 >= v22)
          v21 = *(float *)(a4 + 28);
        v23 = *(_DWORD *)(a3 + 72) << 7;
        v24 = *(_DWORD *)(a4 + 72) << 7;
        v25 = *(_QWORD *)(v4 + 32);
        if (v24 >= v23)
          v26 = *(_DWORD *)(a3 + 72) << 7;
        else
          v26 = *(_DWORD *)(a4 + 72) << 7;
        if (v24 > v23)
          v23 = *(_DWORD *)(a4 + 72) << 7;
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(unsigned int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v28 + 1;
        v29 = v27 + 32 * v28;
        *(_QWORD *)v29 = v25;
        *(float *)(v29 + 8) = v8;
        *(float *)(v29 + 12) = v21;
        *(_DWORD *)(v29 + 16) = v26;
        *(_DWORD *)(v29 + 20) = v23;
      }
    }
  }
  return result;
}

uint64_t **physx::Dy::solveFrictionBlock(uint64_t **result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  uint64_t **v9;
  uint64_t v10;

  if (a2)
  {
    v9 = result;
    v10 = a2;
    do
    {
      result = physx::Dy::solveFriction(v9, a3, a4, a5, a6, a7, a8, a9);
      v9 += 6;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t **physx::Dy::solveFrictionBlockWriteBack(uint64_t **result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  uint64_t **v9;
  uint64_t v10;

  if (a2)
  {
    v9 = result;
    v10 = a2;
    do
    {
      result = physx::Dy::solveFriction(v9, a3, a4, a5, a6, a7, a8, a9);
      v9 += 6;
      --v10;
    }
    while (v10);
  }
  return result;
}

unint64_t physx::Dy::solveFriction_BStaticBlock(unint64_t result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = result;
    v3 = a2;
    do
    {
      result = physx::Dy::solveFriction_BStatic(v2);
      v2 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t physx::Dy::solveFriction_BStaticBlockWriteBack(unint64_t result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = result;
    v3 = a2;
    do
    {
      result = physx::Dy::solveFriction_BStatic(v2);
      v2 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

float *physx::Dy::solveContactCoulombBlock(float *result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  float *v9;
  uint64_t v10;

  if (a2)
  {
    v9 = result;
    v10 = a2;
    do
    {
      result = physx::Dy::solveContactCoulomb(v9, a3, a4, a5, a6, a7, a8, a9);
      v9 += 12;
      --v10;
    }
    while (v10);
  }
  return result;
}

unint64_t physx::Dy::solveContactCoulombConcludeBlock(unint64_t result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8, float32x2_t a9)
{
  unint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v9 = result;
    v10 = a2;
    do
    {
      physx::Dy::solveContactCoulomb((float *)v9, a3, a4, a5, a6, a7, a8, a9);
      result = physx::Dy::concludeContactCoulomb(*(_QWORD *)(v9 + 32));
      v9 += 48;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t physx::Dy::solveContactCoulombBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x2_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;

  if (a2)
  {
    v11 = result;
    v12 = a2;
    do
    {
      v13 = *(_QWORD *)(a3 + 24);
      v14 = v13 + 112 * *(unsigned int *)(v11 + 20);
      v15 = v13 + 112 * *(unsigned int *)(v11 + 24);
      physx::Dy::solveContactCoulomb((float *)v11, a4, a5, a6, a7, a8, a9, a10);
      result = physx::Dy::writeBackContactCoulomb(v11, a3, v14, v15);
      v11 += 48;
      --v12;
    }
    while (v12);
  }
  v16 = *(_DWORD *)(a3 + 16);
  if (v16 > *(_DWORD *)(a3 + 20) - 4)
  {
    v17 = *(unsigned int **)(a3 + 48);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + v16, v17));
    v19 = *(_DWORD *)(a3 + 16);
    if (v19)
    {
      v20 = 0;
      v21 = 0;
      v22 = v16 - v19 + v18;
      do
      {
        v23 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v20);
        v24 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v22 + v21));
        v25 = v23[1];
        *v24 = *v23;
        v24[1] = v25;
        ++v21;
        v20 += 32;
      }
      while (v21 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t physx::Dy::solveContactCoulomb_BStaticBlock(uint64_t result, unsigned int a2, double a3, double a4, double a5, float32x2_t a6, double a7, double a8, double a9, float32x2_t a10)
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  if (a2)
  {
    v10 = a2;
    v11 = (unint64_t *)(result + 32);
    do
    {
      v12 = *(v11 - 4);
      v13 = *v11;
      v11 += 6;
      result = physx::Dy::solveContactCoulomb_BStatic(v12, v13, a3, a4, a5, a6, a7, a8, a9, a10);
      --v10;
    }
    while (v10);
  }
  return result;
}

unint64_t physx::Dy::solveContactCoulomb_BStaticConcludeBlock(unint64_t result, unsigned int a2, double a3, double a4, double a5, float32x2_t a6, double a7, double a8, double a9, float32x2_t a10)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  if (a2)
  {
    v10 = a2;
    v11 = (unint64_t *)(result + 32);
    do
    {
      physx::Dy::solveContactCoulomb_BStatic(*(v11 - 4), *v11, a3, a4, a5, a6, a7, a8, a9, a10);
      v12 = *v11;
      v11 += 6;
      result = physx::Dy::concludeContactCoulomb(v12);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t physx::Dy::solveContactCoulomb_BStaticBlockWriteBack(uint64_t result, unsigned int a2, uint64_t a3, double a4, double a5, double a6, float32x2_t a7, double a8, double a9, double a10, float32x2_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;

  if (a2)
  {
    v12 = result;
    v13 = a2;
    do
    {
      v14 = *(_QWORD *)(a3 + 24);
      v15 = v14 + 112 * *(unsigned int *)(v12 + 20);
      v16 = v14 + 112 * *(unsigned int *)(v12 + 24);
      physx::Dy::solveContactCoulomb_BStatic(*(_QWORD *)v12, *(_QWORD *)(v12 + 32), a4, a5, a6, a7, a8, a9, a10, a11);
      result = physx::Dy::writeBackContactCoulomb(v12, a3, v15, v16);
      v12 += 48;
      --v13;
    }
    while (v13);
  }
  v17 = *(_DWORD *)(a3 + 16);
  if (v17 > *(_DWORD *)(a3 + 20) - 4)
  {
    v18 = *(unsigned int **)(a3 + 48);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + v17, v18));
    v20 = *(_DWORD *)(a3 + 16);
    if (v20)
    {
      v21 = 0;
      v22 = 0;
      v23 = v17 - v20 + v19;
      do
      {
        v24 = (_OWORD *)(*(_QWORD *)(a3 + 8) + v21);
        v25 = (_OWORD *)(*(_QWORD *)(a3 + 32) + 32 * (v23 + v22));
        v26 = v24[1];
        *v25 = *v24;
        v25[1] = v26;
        ++v22;
        v21 += 32;
      }
      while (v22 < *(unsigned int *)(a3 + 16));
    }
    *(_DWORD *)(a3 + 16) = 0;
  }
  return result;
}

float physx::Dy::solveExtContactCoulomb(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  char *v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  unsigned int v16;
  unint64_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  uint64_t v28;
  uint64_t v29;
  __int32 v30;
  uint64_t v31;
  __int32 v32;
  uint64_t v33;
  float result;
  uint64_t v35;
  __int32 v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  float32x4_t v42;
  __n128 v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51[128];
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;

  v1 = (unsigned __int16 *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v54 = *MEMORY[0x24BDAC8D0];
  if (v1[8] == 0xFFFF)
  {
    v5.i64[0] = **(_QWORD **)v1;
    v5.i64[1] = *(unsigned int *)(*(_QWORD *)v1 + 8);
    v6.i64[0] = *(_QWORD *)(*(_QWORD *)v1 + 16);
    v6.i64[1] = *(unsigned int *)(*(_QWORD *)v1 + 24);
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)v1 + 312))(&v52);
    v5 = v52;
    v6 = v53;
  }
  v49 = v6;
  v50 = v5;
  if (*((unsigned __int16 *)v4 + 9) == 0xFFFF)
  {
    v9 = v4[1];
    v7.i64[0] = *(_QWORD *)v9;
    v7.i64[1] = *(unsigned int *)(v9 + 8);
    v8.i64[0] = *(_QWORD *)(v9 + 16);
    v8.i64[1] = *(unsigned int *)(v9 + 24);
  }
  else
  {
    (*(void (**)(float32x4_t *__return_ptr))(*(_QWORD *)v4[1] + 312))(&v52);
    v7 = v52;
    v8 = v53;
  }
  v47 = v8;
  v48 = v7;
  _X25 = (float32x4_t *)v4[4];
  if (_X25->i16[1])
  {
    v11 = (char *)_X25 + _X25->u16[1];
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v38 = (float32x4_t)v12;
      v39 = (float32x4_t)v15;
      v40 = (float32x4_t)v13;
      v42 = (float32x4_t)v14;
      v16 = _X25->u8[1];
      _X9 = (float *)((char *)_X25[2].f32 + _X25->u16[1]);
      __asm
      {
        PRFM            #0, [X8,#0x20]
        PRFM            #0, [X25,#0x30]
      }
      v24 = (unint64_t)&_X25[7 * _X25->u8[1] + 3];
      v52 = 0u;
      v51[0] = 0u;
      v45 = 0u;
      v46 = 0u;
      v25.i64[0] = _X25[1].i64[0];
      v25.i64[1] = _X25[1].u32[2];
      v44 = v25;
      physx::Dy::solveExtContacts(_X25 + 3, v16, &v44, &v50, &v49, &v48, &v47, &v52, *(double *)v25.i64, v15.n128_f64[0], v14.n128_f64[0], v13.n128_f64[0], &v46, v51, &v45, _X9);
      v12 = (__n128)vmlaq_n_f32(v38, v52, _X25->f32[2]);
      v12.n128_u64[1] = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
      v15 = (__n128)vmlaq_n_f32(v39, v46, _X25->f32[1]);
      v26 = (float32x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
      v15.n128_u64[1] = v26.u32[0];
      v26.i32[0] = _X25->i32[3];
      v13 = (__n128)vmlsq_lane_f32(v40, v51[0], v26, 0);
      v27 = (float32x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u32[0];
      v13.n128_u64[1] = v27.u32[0];
      v27.i32[0] = _X25[1].i32[3];
      v14 = (__n128)vmlsq_lane_f32(v42, v45, v27, 0);
      v14.n128_u64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u32[0];
      _X25 = (float32x4_t *)v24;
    }
    while (v24 < (unint64_t)v11);
  }
  else
  {
    v15 = 0uLL;
    v14 = 0uLL;
    v13 = 0uLL;
    v12 = 0uLL;
  }
  v28 = *((unsigned __int16 *)v4 + 8);
  if ((_DWORD)v28 == 0xFFFF)
  {
    v29 = *v4;
    v30 = v50.i32[2];
    *(_QWORD *)v29 = v50.i64[0];
    *(_DWORD *)(v29 + 8) = v30;
    v31 = *v4;
    v32 = v49.i32[2];
    *(_QWORD *)(v31 + 16) = v49.i64[0];
    *(_DWORD *)(v31 + 24) = v32;
  }
  else
  {
    v41 = v13;
    v43 = v14;
    (*(void (**)(_QWORD, uint64_t, float32x4_t *, float32x4_t *, __n128, __n128))(*(_QWORD *)*v4 + 256))(*v4, v28, &v52, v51, v12, v15);
    v13 = v41;
    v14 = v43;
  }
  v33 = *((unsigned __int16 *)v4 + 9);
  if ((_DWORD)v33 == 0xFFFF)
  {
    v35 = v4[1];
    v36 = v48.i32[2];
    *(_QWORD *)v35 = v48.i64[0];
    *(_DWORD *)(v35 + 8) = v36;
    v37 = v4[1];
    result = v47.f32[2];
    *(_QWORD *)(v37 + 16) = v47.i64[0];
    *(float *)(v37 + 24) = result;
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, __n128, __n128))(*(_QWORD *)v4[1] + 256))(v4[1], v33, *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), v13, v14);
  }
  return result;
}

uint64_t physx::Dy::solveExtFriction(uint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x2_t a9, float32x4_t a10)
{
  float32x4_t v10;
  _QWORD *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  float v31;
  unsigned int v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  float32x4_t *v38;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  const float *f32;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  __n128 v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;

  v12 = (_QWORD *)result;
  if (*(unsigned __int16 *)(result + 16) == 0xFFFF)
  {
    v13.i64[0] = **(_QWORD **)result;
    v13.i64[1] = *(unsigned int *)(*(_QWORD *)result + 8);
    v14.i64[0] = *(_QWORD *)(*(_QWORD *)result + 16);
    v14.i64[1] = *(unsigned int *)(*(_QWORD *)result + 24);
  }
  else
  {
    result = (uint64_t)(*(_QWORD *(**)(float32x4_t *__return_ptr))(**(_QWORD **)result + 312))(&v66);
    v13 = v66;
    v14 = v67;
  }
  v62 = v14;
  v64 = v13;
  if (*((unsigned __int16 *)v12 + 9) == 0xFFFF)
  {
    v17 = v12[1];
    v15.i64[0] = *(_QWORD *)v17;
    v15.i64[1] = *(unsigned int *)(v17 + 8);
    v16.i64[0] = *(_QWORD *)(v17 + 16);
    v16.i64[1] = *(unsigned int *)(v17 + 24);
  }
  else
  {
    result = (uint64_t)(*(_QWORD *(**)(float32x4_t *__return_ptr))(*(_QWORD *)v12[1] + 312))(&v66);
    v15 = v66;
    v16 = v67;
  }
  if (*((_WORD *)v12 + 15))
  {
    v18 = v12[4];
    v19 = v18 + 16 * *((unsigned __int16 *)v12 + 15);
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    v25 = v62;
    v24 = v64;
    do
    {
      v26 = *(unsigned __int8 *)(v18 + 1);
      v27 = v18 + 32 + ((4 * (_WORD)v26 + 12) & 0x7F0);
      v28 = *(unsigned __int8 *)(v18 + 2);
      if (*(_BYTE *)(v18 + 2))
      {
        v29 = 0;
        LODWORD(v30) = 0;
        v31 = *(float *)(v18 + 4);
        v32 = v28 / v26;
        if (v28 / v26 <= 1)
          v32 = 1;
        v33 = 0uLL;
        v34 = 0uLL;
        v35 = 0uLL;
        v36 = 0uLL;
        do
        {
          if (v26 <= v28)
          {
            result = v29;
            v37 = v30 + v32;
            do
            {
              v38 = (float32x4_t *)(v27 + ((unint64_t)v30 << 7));
              v30 = (v30 + 1);
              _X2 = v27 + (v30 << 7);
              __asm { PRFM            #0, [X2] }
              a10 = *v38;
              v45 = *v38;
              v45.i32[3] = 0;
              v46 = v38[1];
              v46.i32[3] = 0;
              v47 = v38[2];
              v47.i32[3] = 0;
              v48 = (float32x2_t)vdup_laneq_s32(*(int32x4_t *)v38, 3);
              f32 = v38[3].f32;
              v50 = vld1_dup_f32(f32);
              v10.f32[0] = v31 * *(float *)(v18 + 32 + 4 * v29);
              v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 0);
              v52 = vsubq_f32(vmlaq_f32(vmulq_f32(v25, v46), v45, v24), vmlaq_f32(vmulq_f32(v16, v47), v45, v15));
              v52.i64[0] = vpaddq_f32(v52, v52).u64[0];
              v53 = vmax_f32(vmin_f32(vsub_f32(v48, vmul_laneq_f32(vadd_f32(v50, vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)), v38[1], 3)), v51), vneg_f32(v51));
              v48.i32[0] = vsub_f32(v53, v48).u32[0];
              v24 = vmlaq_n_f32(v24, v38[4], v48.f32[0]);
              v24.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u32[0];
              v25 = vmlaq_n_f32(v25, v38[5], v48.f32[0]);
              v25.i64[1] = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u32[0];
              v10 = v38[7];
              v15 = vmlaq_n_f32(v15, v38[6], v48.f32[0]);
              v15.i64[1] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
              v16 = vmlaq_n_f32(v16, v10, v48.f32[0]);
              v16.i64[1] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u32[0];
              v36 = vmlaq_n_f32(v36, v45, v48.f32[0]);
              v36.i64[1] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u32[0];
              v34 = vmlaq_n_f32(v34, v46, v48.f32[0]);
              v34.i64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
              v35 = vmlaq_n_f32(v35, v45, v48.f32[0]);
              v35.i64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u32[0];
              v33 = vmlaq_n_f32(v33, v47, v48.f32[0]);
              v33.i64[1] = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u32[0];
              a10.i32[3] = v53.i32[1];
              *v38 = a10;
            }
            while (v37 != (_DWORD)v30);
            LODWORD(v30) = v37;
          }
          ++v29;
        }
        while (v30 < v28);
      }
      else
      {
        v36 = 0uLL;
        v35 = 0uLL;
        v34 = 0uLL;
        v33 = 0uLL;
      }
      a10.i32[0] = *(_DWORD *)(v18 + 12);
      v20 = (__n128)vmlaq_n_f32((float32x4_t)v20, v36, *(float *)(v18 + 8));
      a9.i32[0] = *(_DWORD *)(v18 + 20);
      v22 = (__n128)vmlaq_n_f32((float32x4_t)v22, v34, *(float *)(v18 + 16));
      v20.n128_u64[1] = vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u32[0];
      v22.n128_u64[1] = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u32[0];
      v21 = (__n128)vmlsq_lane_f32((float32x4_t)v21, v35, *(float32x2_t *)a10.f32, 0);
      v21.n128_u64[1] = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u32[0];
      v23 = (__n128)vmlsq_lane_f32((float32x4_t)v23, v33, a9, 0);
      v23.n128_u64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u32[0];
      v18 = v27 + (v28 << 7);
    }
    while (v18 < v19);
  }
  else
  {
    v23 = 0uLL;
    v22 = 0uLL;
    v21 = 0uLL;
    v20 = 0uLL;
    v25 = v62;
    v24 = v64;
  }
  v54 = *((unsigned __int16 *)v12 + 8);
  if ((_DWORD)v54 == 0xFFFF)
  {
    v55 = (_QWORD *)*v12;
    *(_DWORD *)(*v12 + 8) = v24.i32[2];
    *v55 = v24.i64[0];
    v56 = *v12;
    *(_QWORD *)(v56 + 16) = v25.i64[0];
    *(_DWORD *)(v56 + 24) = v25.i32[2];
  }
  else
  {
    v63 = v16;
    v65 = v15;
    v60 = v21;
    v61 = v23;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, __n128, __n128))(*(_QWORD *)*v12 + 256))(*v12, v54, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v20, v22);
    v21 = v60;
    v23 = v61;
    v16 = v63;
    v15 = v65;
  }
  v57 = *((unsigned __int16 *)v12 + 9);
  if ((_DWORD)v57 != 0xFFFF)
    return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, __n128, __n128))(*(_QWORD *)v12[1] + 256))(v12[1], v57, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), v21, v23);
  v58 = v12[1];
  *(_DWORD *)(v58 + 8) = v15.i32[2];
  *(_QWORD *)v58 = v15.i64[0];
  v59 = v12[1];
  *(_QWORD *)(v59 + 16) = v16.i64[0];
  *(_DWORD *)(v59 + 24) = v16.i32[2];
  return result;
}

uint64_t physx::Dy::createFinalizeSolverContacts4Step(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, float a7, float a8, double a9, float a10, float a11)
{
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  float *v26;
  float *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int *v61;
  int *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v69;
  uint64_t i;
  uint64_t v72;
  uint64_t v73;
  uint64_t v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  _BOOL4 v96;
  _BOOL4 v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  _DWORD *v102;
  float v103;
  float v104;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int32x4_t *v112;
  int32x4_t *v113;
  int32x4_t *v114;
  int32x4_t *v115;
  int32x4_t *v116;
  float32x4_t v117;
  float32x4_t v118;
  int32x4_t *v119;
  int32x4_t *v120;
  int32x4_t *v121;
  float32x4_t v122;
  float32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  uint64_t v144;
  uint64_t v145;
  int32x4_t v146;
  int32x4_t v147;
  uint64_t v148;
  uint64_t v149;
  int32x4_t v150;
  int32x4_t v151;
  uint64_t v152;
  uint64_t v153;
  int32x4_t v154;
  uint64_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  uint64_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  unsigned int v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int8x16_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int32x4_t v203;
  int8x16_t v204;
  float32x4_t *v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  float32x4_t v218;
  unsigned int v219;
  unsigned int v220;
  int32x4_t v221;
  int32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  int v239;
  _BOOL4 v240;
  int v241;
  int v242;
  int v243;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t *v247;
  int v248;
  float32x4_t *v249;
  uint64_t v250;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int32x4_t *v262;
  int32x4_t v263;
  int32x4_t *v264;
  int32x4_t v265;
  int32x4_t *v266;
  int32x4_t v267;
  int32x4_t *v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  int v303;
  int32x4_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  int v316;
  float32x4_t v317;
  int8x16_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  unsigned int v322;
  uint64_t v323;
  _BOOL4 v324;
  uint64_t v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t v328;
  int v329;
  unsigned int v330;
  unsigned int v331;
  uint64_t v332;
  int v333;
  unsigned int v334;
  unsigned int v335;
  uint64_t v336;
  int v337;
  unsigned int v338;
  uint64_t v339;
  unsigned __int32 v340;
  unsigned __int32 v341;
  unsigned __int32 v342;
  unsigned int v343;
  unsigned __int32 v344;
  float32x4_t *v345;
  uint64_t v346;
  uint64_t v347;
  float32x4_t *v348;
  uint64_t v349;
  unsigned int v350;
  unsigned __int32 v351;
  uint64_t v352;
  unsigned int v353;
  unsigned __int32 v354;
  uint64_t v355;
  unsigned int v356;
  unsigned __int32 v357;
  unsigned __int32 v358;
  unsigned __int32 v359;
  uint64_t v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  int8x16_t v376;
  float32x4_t v377;
  float32x4_t v378;
  int8x16_t v379;
  int8x16_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  int8x16_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  int v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  unsigned __int32 v405;
  unsigned __int32 v406;
  unsigned __int32 v407;
  unsigned __int32 v408;
  unsigned __int32 v409;
  uint64_t v410;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  uint64_t v420;
  float32x2_t v421;
  float32x4_t v422;
  uint64_t v423;
  float32x2_t v424;
  float32x4_t v425;
  uint64_t v426;
  float32x2_t v427;
  float32x4_t v428;
  uint64_t v429;
  float32x2_t v430;
  float32x4_t v431;
  float32x2_t v432;
  float32x4_t v433;
  float32x2_t v434;
  float32x4_t v435;
  float32x2_t v436;
  float32x4_t v437;
  float32x2_t v438;
  float32x4_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int32x4_t *v444;
  int32x4_t *v445;
  int32x4_t *v446;
  int32x4_t *v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int8x16_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int8x16_t v454;
  int8x16_t v455;
  int8x16_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x2_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  int8x8_t v467;
  float32x4_t v468;
  float32x4_t v469;
  int32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  int32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  int32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  float32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  int32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  int32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float32x4_t v514;
  int32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  float32x4_t v537;
  float32x4_t v538;
  int32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  int v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  int v591;
  unsigned int v592;
  uint64_t v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  uint64_t v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  unsigned int v602;
  __int8 v603;
  __int8 v604;
  __int8 v605;
  __int8 v606;
  float v607;
  uint64_t v608;
  uint64_t v609;
  unsigned int v610;
  __int8 v611;
  __int8 v612;
  __int8 v613;
  int32x4_t *v614;
  int32x4_t *v615;
  int32x4_t *v616;
  float32x4_t *v617;
  _BOOL4 v618;
  _BOOL4 v619;
  _BOOL4 v620;
  int v621;
  float32x4_t v622;
  uint64_t v623;
  uint64_t v624;
  float32x4_t v625;
  uint64_t v626;
  float32x4_t v627;
  uint64_t v628;
  int32x4_t *v629;
  float32x4_t *v630;
  unsigned int v631;
  uint64_t v632;
  unsigned int v633;
  _BOOL4 v634;
  uint64_t v635;
  _BOOL4 v636;
  _BOOL4 v637;
  float32x2_t v638;
  float32x2_t v639;
  float32x2_t v640;
  float32x2_t v641;
  float32x2_t v642;
  float32x2_t v643;
  float32x2_t v644;
  float32x2_t v645;
  float32x2_t v646;
  float32x2_t v647;
  float32x2_t v648;
  float32x2_t v649;
  float32x2_t v650;
  float32x2_t v651;
  float32x2_t v652;
  float32x2_t v653;
  uint64_t v654;
  float32x4_t v655;
  float v656;
  float32x4_t v657;
  float32x2_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x2_t v667;
  float v668;
  float32x4_t v669;
  float32x2_t v670;
  float v671;
  float32x4_t v672;
  float32x2_t v673;
  float v674;
  float v675;
  float32x4_t v676;
  float32x2_t v677;
  float32x4_t v678;
  float32x2_t v679;
  float v680;
  float32x4_t v681;
  int32x4_t v682;
  float v683;
  float32x4_t v684;
  float32x2_t v685;
  float v686;
  uint64_t v687;
  unsigned __int32 v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  float32x4_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  uint64_t v718;
  float32x4_t v719;
  int32x4_t v720;
  uint64_t v721;
  int32x4_t v722;
  int32x4_t v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x4_t v728;
  float32x4_t v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  float32x4_t v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x4_t v741;
  int32x2_t v742;
  uint64_t v743;
  float32x4_t v744;
  uint64_t v745;
  uint64_t v746;
  float32x4_t v747;
  float32x4_t v748;
  uint64_t v749;
  unsigned int v750;
  float32x4_t v751;
  unsigned int v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  unsigned int v758;
  float32x4_t v759;
  uint64_t v760;
  unsigned int v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  _DWORD v770[8];
  _OWORD v771[2];
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  _OWORD v776[8];
  _OWORD v777[8];
  uint64_t v778;

  v742 = *(int32x2_t *)&a6;
  v607 = *(float *)&a5;
  v13 = a2;
  LODWORD(v15) = 0;
  v16 = 0;
  v778 = *MEMORY[0x24BDAC8D0];
  v749 = a2 + 564;
  v745 = a2 + 296;
  v760 = a1 + 7684;
  *(_QWORD *)(a1 + 7684) = 0;
  v17 = a1 + 7296;
  v18 = a1 + 7424;
  do
  {
    v19 = v13 + 224 * v16;
    LODWORD(a5) = *(_DWORD *)(v19 + 4);
    v775.i32[v16] = *(_DWORD *)v19;
    LODWORD(a6) = *(_DWORD *)(v19 + 12);
    v774.i32[v16] = *(_DWORD *)(v19 + 8);
    v773.i32[v16] = LODWORD(a5);
    v772.i32[v16] = LODWORD(a6);
    *(_DWORD *)(v19 + 192) = v15;
    v20 = (unsigned int *)(v19 + 192);
    if (!*(_BYTE *)(v19 + 157)
      && !physx::Dy::getFrictionPatches(a1, *(float **)(v13 + 224 * v16 + 168), *(unsigned __int8 *)(v13 + 224 * v16 + 176), (float *)(v19 + 72), (float *)(v19 + 100), a8, a5, a6, a7, a8, *(float *)&a9, a10, a11))
    {
      return 1;
    }
    v21 = v13 + 224 * v16;
    *(_DWORD *)(v21 + 200) = *(_DWORD *)(a1 + 7684);
    v22 = (unsigned int *)(v21 + 200);
    v23 = v13;
    v24 = (uint64_t *)(v22 - 14);
    if (!physx::Dy::createContactPatches(a1, *((_QWORD *)v22 - 7), *(v22 - 12), 0.999))
      return 1;
    v25 = *v22;
    *(_WORD *)(v23 + 224 * v16 + 204) = *(_WORD *)(a1 + 7684) - *v22;
    v26 = (float *)(v19 + 72);
    v27 = (float *)(v19 + 100);
    if ((physx::Dy::correlatePatches(a1, *v24, v26, v27, v25, *v20, 0.999) & 1) != 0)
      return 1;
    physx::Dy::growPatches(a1, *v24, v26, v27, *v20, a8, *(float *)(v23 + 224 * v16 + 160) + a7);
    LODWORD(v15) = *(_DWORD *)(a1 + 7688);
    v28 = *v20;
    v13 = v23;
    if (v15 > *v20)
    {
      v29 = *(_DWORD *)(a1 + 7688);
      do
      {
        v30 = v29 - 1;
        if (*(_DWORD *)(a1 + 4 * (v29 - 1) + 7424) == 0xFFFF)
        {
          if (v29 < v15)
          {
            v31 = v29;
            do
            {
              v32 = a1 + 4 * (v31 - 1);
              *(_DWORD *)(v32 + 7424) = *(_DWORD *)(v18 + 4 * v31);
              *(_DWORD *)(v32 + 7296) = *(_DWORD *)(v17 + 4 * v31++);
              v15 = *(unsigned int *)(a1 + 7688);
            }
            while (v31 < v15);
            v28 = *v20;
          }
          LODWORD(v15) = v15 - 1;
          *(_DWORD *)(a1 + 7688) = v15;
        }
        v29 = v30;
      }
      while (v30 > v28);
    }
    *(_DWORD *)(v23 + 224 * v16++ + 196) = v15 - v28;
  }
  while (v16 != 4);
  v33 = 0;
  memset(v771, 0, sizeof(v771));
  do
  {
    v34 = v23 + 224 * v33;
    v35 = *(unsigned int *)(v34 + 192);
    v36 = (*(_DWORD *)(v34 + 196) + v35);
    if (v35 >= v36)
    {
      v770[v33 + 4] = 0;
LABEL_29:
      *((_QWORD *)v771 + v33) = 0;
      goto LABEL_30;
    }
    v37 = 0;
    v38 = v36 - v35;
    v39 = (int *)(a1 + 7424 + 4 * v35);
    do
    {
      v40 = *v39++;
      if (v40 != 0xFFFF)
        ++v37;
      --v38;
    }
    while (v38);
    v770[v33 + 4] = v37;
    v41 = 104 * v37 + 15;
    if ((v41 & 0xFFFFFFF0) == 0)
      goto LABEL_29;
    v42 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 8))(a3, v41 & 0xFFFFFFF0);
    if (v42 == -1)
      v43 = 0;
    else
      v43 = v42;
    *((_QWORD *)v771 + v33) = v43;
    if (!v43)
      return 0;
LABEL_30:
    ++v33;
  }
  while (v33 != 4);
  v44 = 0;
  LODWORD(v45) = 0;
  LOBYTE(v46) = 0;
  memset(v777, 0, sizeof(v777));
  memset(v776, 0, sizeof(v776));
  do
  {
    v46 = v46 || *(_BYTE *)(v23 + 224 * v44 + 156) != 0;
    v47 = *(_DWORD *)(v23 + 224 * v44 + 196);
    if (v47)
    {
      v48 = 0;
      v49 = *(_DWORD *)(v23 + 224 * v44 + 192);
      v50 = (int *)v776;
      v51 = (unsigned int *)v777;
      v52 = *(unsigned int *)(v23 + 224 * v44 + 196);
      do
      {
        v53 = v49;
        v54 = (*(_BYTE *)(a1 + 104 * v49 + 2817) & 1) == 0 && *(_WORD *)(a1 + 104 * v49 + 2818) != 0;
        v55 = *(_DWORD *)(a1 + 4 * v53 + 7296);
        if (v55)
        {
          v56 = *v51;
          if (v55 > *v51)
            v56 = *(_DWORD *)(a1 + 4 * v53 + 7296);
          *v51 = v56;
          v48 += v55;
          if (v54)
          {
            v57 = *(unsigned __int16 *)(a1 + 104 * v53 + 2818);
            v58 = 2 * v57;
            if (2 * v57 <= *v50)
              v58 = *v50;
            *v50 = v58;
            v48 += 2 * v57;
          }
        }
        ++v50;
        ++v51;
        v49 = v53 + 1;
        --v52;
      }
      while (v52);
    }
    else
    {
      v48 = 0;
    }
    if (v47 <= v45)
      v45 = v45;
    else
      v45 = v47;
    v770[v44++] = v48;
  }
  while (v44 != 4);
  if ((_DWORD)v45)
  {
    v59 = 0;
    v60 = 0;
    v61 = (int *)v776;
    v62 = (int *)v777;
    v63 = v45;
    do
    {
      v64 = *v62++;
      v60 += v64;
      v65 = *v61++;
      v59 += v65;
      --v63;
    }
    while (v63);
  }
  else
  {
    v60 = 0;
    v59 = 0;
  }
  if (v46)
    v66 = v60;
  else
    v66 = 0;
  v67 = 272 * v45 + 160 * v60 + 208 * v59 + 16 * (v59 + v60 + v66);
  if (v67)
  {
    if (v67 + 16 > 0x4000)
      return 1;
    v69 = (**(uint64_t (***)(uint64_t))a3)(a3);
    if ((unint64_t)(v69 + 1) < 2)
      return 0;
  }
  else
  {
    v69 = 0;
  }
  for (i = 0; i != 4; ++i)
  {
    _X17 = *((_QWORD *)v771 + i);
    v72 = v23 + 224 * i;
    v73 = *(_QWORD *)(v72 + 16);
    *(_QWORD *)(v72 + 168) = _X17;
    *(_BYTE *)(v72 + 176) = v770[i + 4];
    if (_X17)
    {
      __asm
      {
        PRFM            #0, [X17]
        PRFM            #0, [X17,#0x80]
        PRFM            #0, [X17,#0x100]
      }
      v81 = v23 + 224 * i;
      v84 = *(_DWORD *)(v81 + 196);
      v83 = (unsigned int *)(v81 + 196);
      v82 = v84;
      if (v84)
      {
        v85 = 0;
        do
        {
          v86 = v85 + *(_DWORD *)(v23 + 224 * i + 192);
          if (*(_DWORD *)(a1 + 4 * v86 + 7424) != 0xFFFF)
          {
            v87 = a1 + 104 * v86;
            v88 = *(_OWORD *)(v87 + 2816);
            v89 = *(_OWORD *)(v87 + 2848);
            *(_OWORD *)(_X17 + 16) = *(_OWORD *)(v87 + 2832);
            *(_OWORD *)(_X17 + 32) = v89;
            *(_OWORD *)_X17 = v88;
            v90 = *(_OWORD *)(v87 + 2864);
            v91 = *(_OWORD *)(v87 + 2880);
            v92 = *(_OWORD *)(v87 + 2896);
            *(_QWORD *)(_X17 + 96) = *(_QWORD *)(v87 + 2912);
            *(_OWORD *)(_X17 + 64) = v91;
            *(_OWORD *)(_X17 + 80) = v92;
            *(_OWORD *)(_X17 + 48) = v90;
            _X17 += 104;
            v82 = *v83;
          }
          ++v85;
        }
        while (v85 < v82);
      }
    }
    v93 = v23 + 224 * i;
    *(_WORD *)(v93 + 206) += v770[i];
    *(_QWORD *)(v73 + 32) = v69;
    *(_WORD *)(v73 + 30) = v67 >> 4;
    *(_WORD *)(v73 + 28) = *(_DWORD *)(v93 + 152);
    *(_QWORD *)(v73 + 40) = *(_QWORD *)(v93 + 184);
  }
  v592 = v67;
  v94 = *(_BYTE *)(v23 + 156) || *(_BYTE *)(v23 + 380) || *(_BYTE *)(v23 + 604) || *(_BYTE *)(v23 + 828) != 0;
  v636 = v94;
  v95 = 0;
  LOBYTE(v96) = 0;
  LOBYTE(v97) = 0;
  v98 = v775;
  v99 = v773;
  v100 = v774;
  v708 = v772;
  v101 = vdupq_lane_s32(*(int32x2_t *)&a9, 0);
  v605 = *(_BYTE *)(v23 + 382);
  v606 = *(_BYTE *)(v23 + 158);
  v102 = (_DWORD *)(v23 + 132);
  v604 = *(_BYTE *)(v23 + 606);
  v603 = *(_BYTE *)(v23 + 830);
  while (2)
  {
    if (v96)
    {
      v96 = 1;
      if (!v97)
        goto LABEL_83;
LABEL_85:
      v97 = 1;
    }
    else
    {
      v96 = *v102 == 1;
      if (v97)
        goto LABEL_85;
LABEL_83:
      v97 = *v102 == 4;
    }
    if (*(_BYTE *)(*(_QWORD *)(v102 - 27) + 62))
      v103 = 1.0;
    else
      v103 = 0.0;
    *(float *)((char *)v777 + v95) = v103;
    if (*(_BYTE *)(*(_QWORD *)(v102 - 25) + 62))
      v104 = 1.0;
    else
      v104 = 0.0;
    *(float *)((char *)v776 + v95) = v104;
    v95 += 4;
    v102 += 56;
    if (v95 != 16)
      continue;
    break;
  }
  v593 = v69;
  _X8 = a1 + 7556;
  __asm { PRFM            #0, [X8] }
  _X8 = v760;
  __asm { PRFM            #0, [X8] }
  v109 = *(_DWORD *)(v23 + 196);
  v110 = *(_DWORD *)(v23 + 420);
  v111 = *(_DWORD *)(v23 + 644);
  if (v111 <= *(_DWORD *)(v23 + 868))
    v111 = *(_DWORD *)(v23 + 868);
  if (v110 <= v111)
    v110 = v111;
  if (v109 <= v110)
    v109 = v110;
  v602 = v109;
  if (v109)
  {
    v610 = 0;
    v608 = 0;
    v609 = 0;
    v632 = 0;
    v631 = 0;
    v697 = 0;
    v696 = 0;
    v695 = 0;
    v694 = 0;
    v112 = *(int32x4_t **)(v23 + 728);
    v113 = *(int32x4_t **)(v23 + 56);
    v114 = *(int32x4_t **)(v23 + 64);
    v116 = *(int32x4_t **)(v23 + 280);
    v115 = *(int32x4_t **)(v23 + 288);
    v117.i32[0] = v113[1].i32[3];
    v118.i32[0] = v113[2].i32[0];
    v117.i32[1] = v116[1].i32[3];
    v119 = *(int32x4_t **)(v23 + 504);
    v120 = *(int32x4_t **)(v23 + 512);
    v117.i32[2] = v119[1].i32[3];
    v117.i32[3] = v112[1].i32[3];
    v121 = *(int32x4_t **)(v23 + 736);
    v122.i32[0] = v114[1].i32[3];
    v123.i32[0] = v114[2].i32[0];
    v122.i32[1] = v115[1].i32[3];
    v122.i32[2] = v120[1].i32[3];
    v122.i32[3] = v121[1].i32[3];
    v601 = vmaxq_f32(v117, v122);
    v124 = v113[1];
    v125 = v116[1];
    v126 = v119[1];
    v127 = v112[1];
    v128 = v114[1];
    v129 = v115[1];
    v130 = vzip1q_s32(*v113, *v119);
    v131 = vzip1q_s32(*v116, *v112);
    v132 = v120[1];
    v725 = (float32x4_t)vzip1q_s32(v130, v131);
    v730 = (float32x4_t)vzip2q_s32(v130, v131);
    v133 = v121[1];
    v134 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v113, *v119), vzip2q_s32(*v116, *v112));
    v135 = vzip1q_s32(*v114, *v120);
    v136 = vzip1q_s32(*v115, *v121);
    v137 = (float32x4_t)vzip1q_s32(v135, v136);
    v138 = (float32x4_t)vzip2q_s32(v135, v136);
    v139 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v114, *v120), vzip2q_s32(*v115, *v121));
    v140 = vzip1q_s32(v124, v126);
    v141 = vzip1q_s32(v125, v127);
    v689 = (float32x4_t)vzip1q_s32(v140, v141);
    v741 = (float32x4_t)vzip2q_s32(v140, v141);
    v740 = (float32x4_t)vzip1q_s32(vzip2q_s32(v124, v126), vzip2q_s32(v125, v127));
    v142 = vzip1q_s32(v128, v132);
    v143 = vzip1q_s32(v129, v133);
    v729 = (float32x4_t)vzip1q_s32(v142, v143);
    v728 = (float32x4_t)vzip2q_s32(v142, v143);
    v727 = (float32x4_t)vzip1q_s32(vzip2q_s32(v128, v132), vzip2q_s32(v129, v133));
    v118.i32[1] = v116[2].i32[0];
    v118.i32[2] = v119[2].i32[0];
    v118.i32[3] = v112[2].i32[0];
    v123.i32[1] = v115[2].i32[0];
    v123.i32[2] = v120[2].i32[0];
    v123.i32[3] = v121[2].i32[0];
    v692 = vmulq_f32(v98, v118);
    v707 = vmulq_f32(v100, v123);
    v145 = *(_QWORD *)(v23 + 40);
    v144 = *(_QWORD *)(v23 + 48);
    v146 = *(int32x4_t *)(v145 + 28);
    v147 = *(int32x4_t *)(v145 + 40);
    v148 = *(_QWORD *)(v23 + 264);
    v149 = *(_QWORD *)(v23 + 272);
    v150 = *(int32x4_t *)(v148 + 28);
    v151 = *(int32x4_t *)(v148 + 40);
    v152 = *(_QWORD *)(v23 + 488);
    v153 = *(_QWORD *)(v23 + 496);
    v154 = *(int32x4_t *)(v152 + 28);
    v155 = *(_QWORD *)(v23 + 712);
    v156 = vzip1q_s32(v146, v154);
    v157 = *(int32x4_t *)(v152 + 40);
    v158 = vzip2q_s32(v146, v154);
    v159 = *(int32x4_t *)(v155 + 28);
    v160 = vzip1q_s32(v150, v159);
    v161 = vzip2q_s32(v150, v159);
    v162 = *(int32x4_t *)(v155 + 40);
    v691 = (float32x4_t)vzip1q_s32(v156, v160);
    v690 = (float32x4_t)vzip2q_s32(v156, v160);
    v739 = (float32x4_t)vzip1q_s32(v158, v161);
    v163 = vzip1q_s32(v147, v157);
    v164 = vzip1q_s32(v151, v162);
    v738 = (float32x4_t)vzip1q_s32(v163, v164);
    v737 = (float32x4_t)vzip2q_s32(v163, v164);
    v736 = (float32x4_t)vzip1q_s32(vzip2q_s32(v147, v157), vzip2q_s32(v151, v162));
    v163.i32[0] = vdupq_laneq_s32(v147, 3).u32[0];
    v163.i32[1] = v157.i32[3];
    v163.i32[2] = *(_DWORD *)(v145 + 56);
    v163.i32[3] = *(_DWORD *)(v152 + 56);
    v147.i32[0] = vdupq_laneq_s32(v151, 3).u32[0];
    v147.i32[1] = v162.i32[3];
    v147.i32[2] = *(_DWORD *)(v148 + 56);
    v147.i32[3] = *(_DWORD *)(v155 + 56);
    v735 = (float32x4_t)vzip1q_s32(v163, v147);
    v734 = (float32x4_t)vzip2q_s32(v163, v147);
    v165 = *(int32x4_t *)(v144 + 28);
    v166 = *(int32x4_t *)(v153 + 28);
    v167 = vzip1q_s32(v165, v166);
    v168 = vzip2q_s32(v165, v166);
    v169 = *(int32x4_t *)(v149 + 28);
    v170 = *(_QWORD *)(v23 + 720);
    v171 = *(int32x4_t *)(v170 + 28);
    v172 = vzip1q_s32(v169, v171);
    v706 = (float32x4_t)vzip1q_s32(v167, v172);
    v705 = (float32x4_t)vzip2q_s32(v167, v172);
    v704 = (float32x4_t)vzip1q_s32(v168, vzip2q_s32(v169, v171));
    v173 = *(int32x4_t *)(v144 + 40);
    v174 = *(int32x4_t *)(v153 + 40);
    v175 = vzip1q_s32(v173, v174);
    v176 = *(int32x4_t *)(v149 + 40);
    v177 = *(int32x4_t *)(v170 + 40);
    v178 = vzip1q_s32(v176, v177);
    v703 = (float32x4_t)vzip1q_s32(v175, v178);
    v702 = (float32x4_t)vzip2q_s32(v175, v178);
    v179 = vzip2q_s32(v173, v174);
    v173.i32[0] = vdupq_laneq_s32(v173, 3).u32[0];
    v173.i32[1] = v174.i32[3];
    v701 = (float32x4_t)vzip1q_s32(v179, vzip2q_s32(v176, v177));
    v174.i32[0] = vdupq_laneq_s32(v176, 3).u32[0];
    v174.i32[1] = v177.i32[3];
    v173.i32[2] = *(_DWORD *)(v144 + 56);
    v173.i32[3] = *(_DWORD *)(v153 + 56);
    v174.i32[2] = *(_DWORD *)(v149 + 56);
    v174.i32[3] = *(_DWORD *)(v170 + 56);
    v180 = vzip1q_s32(v173, v174);
    v700 = (float32x4_t)v180;
    v181 = vzip2q_s32(v173, v174);
    v699 = (float32x4_t)v181;
    v181.i64[0] = *(_QWORD *)(v23 + 88);
    v174.i64[0] = *(_QWORD *)(v23 + 536);
    v182 = vzip1q_s32(v181, v174);
    v174.i64[0] = *(_QWORD *)(v23 + 312);
    v180.i64[0] = *(_QWORD *)(v23 + 760);
    v183 = vzip1q_s32(v174, v180);
    v184 = vzip1q_s32(v182, v183);
    v717 = (float32x4_t)v184;
    v185 = vzip2q_s32(v182, v183);
    v716 = (float32x4_t)v185;
    v185.i64[0] = *(_QWORD *)(v23 + 116);
    v183.i64[0] = *(_QWORD *)v749;
    v186 = vzip1q_s32(v185, v183);
    v183.i64[0] = *(_QWORD *)(v745 + 44);
    v184.i64[0] = *(_QWORD *)(v749 + 224);
    v187 = vzip1q_s32(v183, v184);
    v715 = (float32x4_t)vzip1q_s32(v186, v187);
    v714 = (float32x4_t)vzip2q_s32(v186, v187);
    v634 = v97;
    v186.i32[0] = *(_DWORD *)(v23 + 160);
    v186.i32[1] = *(_DWORD *)(v23 + 384);
    v186.i32[2] = *(_DWORD *)(v23 + 608);
    v186.i32[3] = *(_DWORD *)(v23 + 832);
    v600 = (float32x4_t)v186;
    v187.i32[0] = *(_DWORD *)(v145 + 60);
    v187.i32[1] = *(_DWORD *)(v148 + 60);
    v188 = 0;
    *(float *)v186.i32 = *(float *)&a4 * 0.8;
    v599 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.i8, 0));
    v189 = *(int32x4_t *)(v23 + 72);
    v684 = (float32x4_t)vdupq_laneq_s32(v189, 3);
    LODWORD(v686) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v684.f32, *(float32x2_t *)v684.f32).u32[0];
    v681 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v745, 3);
    LODWORD(v683) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v681.f32, *(float32x2_t *)v681.f32).u32[0];
    v190 = *(int32x4_t *)(v745 + 224);
    v678 = (float32x4_t)vdupq_laneq_s32(v190, 3);
    LODWORD(v680) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v678.f32, *(float32x2_t *)v678.f32).u32[0];
    v191 = *(int32x4_t *)(v749 + 180);
    v192 = vdupq_laneq_s32(v191, 3);
    LODWORD(v675) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v192.i8, *(float32x2_t *)v192.i8).u32[0];
    v676 = (float32x4_t)v192;
    v193 = *(int32x4_t *)(v23 + 100);
    v672 = (float32x4_t)vdupq_laneq_s32(v193, 3);
    LODWORD(v674) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v672.f32, *(float32x2_t *)v672.f32).u32[0];
    v187.i32[2] = *(_DWORD *)(v152 + 60);
    v187.i32[3] = *(_DWORD *)(v155 + 60);
    v733 = (float32x4_t)v187;
    v187.i32[0] = *(_DWORD *)(v144 + 60);
    v187.i32[1] = *(_DWORD *)(v149 + 60);
    v187.i32[2] = *(_DWORD *)(v153 + 60);
    v187.i32[3] = *(_DWORD *)(v170 + 60);
    v698 = (float32x4_t)v187;
    v598 = (float32x4_t)vdupq_lane_s32(v742, 0);
    v194 = *(int32x4_t *)(v745 + 28);
    v669 = (float32x4_t)vdupq_laneq_s32(v194, 3);
    LODWORD(v671) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v669.f32, *(float32x2_t *)v669.f32).u32[0];
    v187.i32[0] = *(_DWORD *)(v23 + 96);
    v187.i32[1] = *(_DWORD *)(v23 + 320);
    v187.i32[2] = *(_DWORD *)(v23 + 544);
    v187.i32[3] = *(_DWORD *)(v23 + 768);
    v713 = (float32x4_t)v187;
    v195 = *(int32x4_t *)(v745 + 252);
    v666 = (float32x4_t)vdupq_laneq_s32(v195, 3);
    LODWORD(v668) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v666.f32, *(float32x2_t *)v666.f32).u32[0];
    v187.i32[0] = *(_DWORD *)(v23 + 124);
    v187.i32[1] = *(_DWORD *)(v23 + 348);
    v187.i32[2] = *(_DWORD *)(v23 + 572);
    v187.i32[3] = *(_DWORD *)(v23 + 796);
    v712 = (float32x4_t)v187;
    v196 = (int8x16_t)v189;
    v196.i32[3] = 0;
    v197 = *(int8x16_t *)v745;
    v197.i32[3] = 0;
    v198 = (int8x16_t)v190;
    v198.i32[3] = 0;
    v199 = (int8x16_t)v191;
    v199.i32[3] = 0;
    v200 = (int8x16_t)v193;
    v200.i32[3] = 0;
    v201 = (int8x16_t)v194;
    v201.i32[3] = 0;
    v202 = (int8x16_t)v195;
    v202.i32[3] = 0;
    v203 = *(int32x4_t *)(v749 + 208);
    v204 = (int8x16_t)v203;
    v204.i32[3] = 0;
    v655 = (float32x4_t)vdupq_laneq_s32(v203, 3);
    LODWORD(v656) = vmla_f32((float32x2_t)0xBF000000BF000000, *(float32x2_t *)v655.f32, *(float32x2_t *)v655.f32).u32[0];
    v723 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    v597 = a1 + 7424;
    v654 = a1 + 7556;
    v205 = (float32x4_t *)v69;
    v711 = v137;
    v710 = v138;
    v595 = vsubq_f32(v730, v138);
    v596 = vsubq_f32(v725, v137);
    v724 = v134;
    v709 = v139;
    v594 = vsubq_f32(v134, v139);
    v664 = (float32x4_t)v197;
    v665 = (float32x4_t)v196;
    v685 = *(float32x2_t *)v189.i8;
    v653 = (float32x2_t)vextq_s8(v196, v196, 8uLL).u64[0];
    v652 = (float32x2_t)vext_s8(*(int8x8_t *)v189.i8, (int8x8_t)v653, 4uLL);
    v682 = *(int32x4_t *)v745;
    v651 = (float32x2_t)vextq_s8(v197, v197, 8uLL).u64[0];
    v650 = (float32x2_t)vext_s8(*(int8x8_t *)v745, (int8x8_t)v651, 4uLL);
    v662 = (float32x4_t)v199;
    v663 = (float32x4_t)v198;
    v679 = *(float32x2_t *)v190.i8;
    v649 = (float32x2_t)vextq_s8(v198, v198, 8uLL).u64[0];
    v648 = (float32x2_t)vext_s8(*(int8x8_t *)v190.i8, (int8x8_t)v649, 4uLL);
    v677 = *(float32x2_t *)v191.i8;
    v647 = (float32x2_t)vextq_s8(v199, v199, 8uLL).u64[0];
    v646 = (float32x2_t)vext_s8(*(int8x8_t *)v191.i8, (int8x8_t)v647, 4uLL);
    v660 = (float32x4_t)v201;
    v661 = (float32x4_t)v200;
    v673 = *(float32x2_t *)v193.i8;
    v645 = (float32x2_t)vextq_s8(v200, v200, 8uLL).u64[0];
    v644 = (float32x2_t)vext_s8(*(int8x8_t *)v193.i8, (int8x8_t)v645, 4uLL);
    v670 = *(float32x2_t *)v194.i8;
    v643 = (float32x2_t)vextq_s8(v201, v201, 8uLL).u64[0];
    v642 = (float32x2_t)vext_s8(*(int8x8_t *)v194.i8, (int8x8_t)v643, 4uLL);
    v658 = *(float32x2_t *)v203.i8;
    v659 = (float32x4_t)v202;
    v667 = *(float32x2_t *)v195.i8;
    v641 = (float32x2_t)vextq_s8(v202, v202, 8uLL).u64[0];
    v640 = (float32x2_t)vext_s8(*(int8x8_t *)v195.i8, (int8x8_t)v641, 4uLL);
    v657 = (float32x4_t)v204;
    v639 = (float32x2_t)vextq_s8(v204, v204, 8uLL).u64[0];
    v638 = (float32x2_t)vext_s8(*(int8x8_t *)v203.i8, (int8x8_t)v639, 4uLL);
    v732 = (float32x4_t)v777[0];
    v731 = (float32x4_t)v776[0];
    v726 = v99;
    v693 = (float32x4_t)v101;
    v635 = v23;
    while (1)
    {
      v206 = *(_DWORD *)(v13 + 196);
      if (v188 < v206)
        HIDWORD(v632) = *(_DWORD *)(v13 + 192) + v188;
      v207 = *(_DWORD *)(v13 + 420);
      if (v188 < v207)
        LODWORD(v632) = *(_DWORD *)(v13 + 416) + v188;
      v208 = *(_DWORD *)(v13 + 644);
      if (v188 < v208)
        v631 = *(_DWORD *)(v13 + 640) + v188;
      v209 = *(_DWORD *)(v13 + 868);
      if (v188 < v209)
        LODWORD(v608) = *(_DWORD *)(v13 + 864) + v188;
      if (v188 < v206)
        v210 = *(_DWORD *)(a1 + 4 * HIDWORD(v632) + 7296);
      else
        v210 = 0;
      if (v188 < v207)
        v211 = *(_DWORD *)(a1 + 4 * v632 + 7296);
      else
        v211 = 0;
      if (v188 < v208)
        v212 = *(_DWORD *)(a1 + 4 * v631 + 7296);
      else
        v212 = 0;
      v761 = *(_DWORD *)(v13 + 868);
      v637 = v96;
      if (v188 < v209)
      {
        v621 = 0;
        v213 = *(_DWORD *)(a1 + 4 * v608 + 7296);
      }
      else
      {
        v213 = 0;
        v621 = 8;
      }
      v613 = v213;
      v753 = *(_DWORD *)(v13 + 644);
      v620 = v188 >= v208;
      v758 = *(_DWORD *)(v13 + 420);
      v619 = v188 >= v207;
      v633 = v188;
      v750 = *(_DWORD *)(v13 + 196);
      v214 = *(unsigned int *)(v597 + 4 * HIDWORD(v632));
      v215 = *(unsigned int *)(v597 + 4 * v632);
      v216 = *(unsigned int *)(v597 + 4 * v631);
      v618 = v188 >= v206;
      v217 = *(unsigned int *)(v597 + 4 * v608);
      v743 = *(unsigned __int16 *)(a1 + 44 * v214);
      v721 = *(_QWORD *)(v13 + 144);
      v626 = *(_QWORD *)(v13 + 368);
      v624 = *(unsigned __int16 *)(a1 + 44 * v215);
      v718 = *(_QWORD *)(v13 + 592);
      v628 = *(unsigned __int16 *)(a1 + 44 * v216);
      v629 = (int32x4_t *)(v626 + (v624 << 6));
      v615 = (int32x4_t *)(v721 + (v743 << 6));
      v616 = (int32x4_t *)(v718 + (v628 << 6));
      v746 = *(_QWORD *)(v13 + 816);
      v687 = *(unsigned __int16 *)(a1 + 44 * v217);
      v614 = (int32x4_t *)(v746 + (v687 << 6));
      v218.i32[0] = v615[3].i32[3];
      v218.i32[1] = v629[3].i32[3];
      v218.i32[2] = v616[3].i32[3];
      v218.i32[3] = v614[3].i32[3];
      v622 = v218;
      v766 = vnegq_f32(v218);
      v205->i8[4] = v606;
      v205->i8[5] = v605;
      v205->i8[6] = v604;
      v205->i8[7] = v603;
      v205->i8[3] = v636;
      if (v212 <= v213)
        v219 = v213;
      else
        v219 = v212;
      if (v211 > v219)
        v219 = v211;
      if (v210 <= v219)
        v220 = v219;
      else
        v220 = v210;
      v623 = 16 * v220;
      v617 = v205 + 17;
      v611 = v211;
      v612 = v212;
      bzero(&v205[17], 16 * v220);
      v205->i8[1] = v220;
      v205->i8[8] = v210;
      v205->i8[9] = v611;
      v205->i8[10] = v612;
      v205->i8[11] = v613;
      v205[4] = v692;
      v205[5] = v707;
      v205[6] = v726;
      v205[7] = v708;
      v205[12].i64[0] = *(_QWORD *)(v13 + 136);
      v205[12].i64[1] = *(_QWORD *)(v13 + 360);
      v205[13].i64[0] = *(_QWORD *)(v13 + 584);
      v205[13].i64[1] = *(_QWORD *)(v13 + 808);
      v205[1] = v766;
      v221 = vzip1q_s32(*v615, *v616);
      v222 = vzip1q_s32(*v629, *v614);
      v223 = (float32x4_t)vzip1q_s32(v221, v222);
      v224 = (float32x4_t)vzip2q_s32(v221, v222);
      v225 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v615, *v616), vzip2q_s32(*v629, *v614));
      v205[8] = v223;
      v205[9] = v224;
      v630 = v205;
      v205[10] = v225;
      v205[11] = v601;
      v226 = 0xFFFFLL;
      v227 = 0xFFFFLL;
      if ((_DWORD)v214 != 0xFFFF)
      {
        while (!*(_BYTE *)(a1 + 44 * v214 + 5))
        {
          v214 = *(unsigned __int16 *)(a1 + 44 * v214 + 2);
          v227 = 0xFFFFLL;
          if ((_DWORD)v214 == 0xFFFF)
            goto LABEL_134;
        }
        v227 = v214;
      }
LABEL_134:
      v13 = v635;
      v228 = v608;
      if ((_DWORD)v215 != 0xFFFF)
      {
        while (!*(_BYTE *)(a1 + 44 * v215 + 5))
        {
          v215 = *(unsigned __int16 *)(a1 + 44 * v215 + 2);
          v226 = 0xFFFFLL;
          if ((_DWORD)v215 == 0xFFFF)
            goto LABEL_139;
        }
        v226 = v215;
      }
LABEL_139:
      v229 = 0xFFFFLL;
      v230 = 0xFFFFLL;
      if ((_DWORD)v216 == 0xFFFF)
        goto LABEL_144;
      do
      {
        if (*(_BYTE *)(a1 + 44 * v216 + 5))
        {
          v230 = v216;
          break;
        }
        v216 = *(unsigned __int16 *)(a1 + 44 * v216 + 2);
        v230 = 0xFFFFLL;
      }
      while ((_DWORD)v216 != 0xFFFF);
LABEL_144:
      while ((_DWORD)v217 != 0xFFFF)
      {
        if (*(_BYTE *)(a1 + 44 * v217 + 5))
        {
          v229 = v217;
          break;
        }
        v217 = *(unsigned __int16 *)(a1 + 44 * v217 + 2);
        v229 = 0xFFFFLL;
      }
      if (v633 < v750)
      {
        HIDWORD(v697) = 0xFFFF;
        if ((_DWORD)v227 == 0xFFFF)
        {
          HIDWORD(v695) = 0;
          v231 = 1;
LABEL_156:
          v227 = 0xFFFFLL;
        }
        else
        {
          v231 = 1;
          v232 = v227;
          while (v231 == *(unsigned __int8 *)(a1 + 44 * v232 + 5))
          {
            v231 = 0;
            v232 = *(unsigned __int16 *)(a1 + 44 * v232 + 2);
            if ((_DWORD)v232 == 0xFFFF)
            {
              HIDWORD(v695) = 0;
              HIDWORD(v697) = v227;
              goto LABEL_156;
            }
          }
          HIDWORD(v695) = 0;
          HIDWORD(v697) = v227;
          v227 = v232;
        }
      }
      else
      {
        v231 = 0;
      }
      if (v633 < v758)
      {
        LODWORD(v696) = 0xFFFF;
        if ((_DWORD)v226 == 0xFFFF)
        {
          LODWORD(v694) = 0;
          v233 = 1;
LABEL_166:
          v226 = 0xFFFFLL;
        }
        else
        {
          v233 = 1;
          v234 = v226;
          while (v233 == *(unsigned __int8 *)(a1 + 44 * v234 + 5))
          {
            v233 = 0;
            v234 = *(unsigned __int16 *)(a1 + 44 * v234 + 2);
            if ((_DWORD)v234 == 0xFFFF)
            {
              LODWORD(v694) = 0;
              LODWORD(v696) = v226;
              goto LABEL_166;
            }
          }
          LODWORD(v694) = 0;
          LODWORD(v696) = v226;
          v226 = v234;
        }
      }
      else
      {
        v233 = 0;
      }
      if (v633 < v753)
      {
        HIDWORD(v696) = 0xFFFF;
        if ((_DWORD)v230 == 0xFFFF)
        {
          HIDWORD(v694) = 0;
          v235 = 1;
LABEL_176:
          v230 = 0xFFFFLL;
        }
        else
        {
          v235 = 1;
          v236 = v230;
          while (v235 == *(unsigned __int8 *)(a1 + 44 * v236 + 5))
          {
            v235 = 0;
            v236 = *(unsigned __int16 *)(a1 + 44 * v236 + 2);
            if ((_DWORD)v236 == 0xFFFF)
            {
              HIDWORD(v694) = 0;
              HIDWORD(v696) = v230;
              goto LABEL_176;
            }
          }
          HIDWORD(v694) = 0;
          HIDWORD(v696) = v230;
          v230 = v236;
        }
      }
      else
      {
        v235 = 0;
      }
      if (v633 < v761)
      {
        LODWORD(v697) = 0xFFFF;
        if ((_DWORD)v229 == 0xFFFF)
        {
          LODWORD(v695) = 0;
          v237 = 1;
LABEL_186:
          v229 = 0xFFFFLL;
        }
        else
        {
          v237 = 1;
          v238 = v229;
          while (v237 == *(unsigned __int8 *)(a1 + 44 * v238 + 5))
          {
            v237 = 0;
            v238 = *(unsigned __int16 *)(a1 + 44 * v238 + 2);
            if ((_DWORD)v238 == 0xFFFF)
            {
              LODWORD(v695) = 0;
              LODWORD(v697) = v229;
              goto LABEL_186;
            }
          }
          LODWORD(v695) = 0;
          LODWORD(v697) = v229;
          v229 = v238;
        }
      }
      else
      {
        v237 = 0;
      }
      if (v633 < v750)
      {
        v240 = (_DWORD)v227 != 0xFFFF && v231 < *(unsigned __int8 *)(a1 + 44 * v227 + 5);
        v239 = !v240;
      }
      else
      {
        v239 = 1;
      }
      v241 = v633 >= v758 || (_DWORD)v226 == 0xFFFF || v233 >= *(unsigned __int8 *)(a1 + 44 * v226 + 5)
           ? 2
           : 0;
      v242 = v633 >= v753 || (_DWORD)v230 == 0xFFFF || v235 >= *(unsigned __int8 *)(a1 + 44 * v230 + 5)
           ? 4
           : 0;
      v243 = v633 >= v761 || (_DWORD)v229 == 0xFFFF || v237 >= *(unsigned __int8 *)(a1 + 44 * v229 + 5)
           ? 8
           : 0;
      _X2 = &v617[v220];
      v245 = vmlaq_f32(vmlaq_f32(vmulq_f32(v725, v223), v730, v224), v724, v225);
      v246 = vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v223), v710, v224), v709, v225);
      if ((v618 | (2 * v619) | (4 * v620) | v621) != 0xF)
        break;
      v247 = &v617[v220];
LABEL_268:
      if (v636)
        v339 = v623;
      else
        v339 = 0;
      v340 = *(unsigned __int16 *)(a1 + 2816 + 104 * v632 + 2);
      v341 = *(unsigned __int16 *)(a1 + 2816 + 104 * v631 + 2);
      v342 = *(unsigned __int16 *)(a1 + 2816 + 104 * v228 + 2);
      v343 = v633;
      if (v633 < v750)
      {
        v346 = v743;
        v347 = v721;
        if ((*(_BYTE *)(v721 + (v743 << 6) + 48) & 1) != 0)
          v344 = 0;
        else
          v344 = *(unsigned __int16 *)(a1 + 104 * HIDWORD(v632) + 2818);
        v96 = v637;
        v345 = v630;
      }
      else
      {
        v344 = 0;
        v96 = v637;
        v345 = v630;
        v346 = v743;
        v347 = v721;
      }
      v348 = (float32x4_t *)((char *)v247 + v339);
      v349 = v626 + (v624 << 6);
      v350 = *(unsigned __int8 *)(v349 + 48);
      if ((v350 & 1) != 0)
        v340 = 0;
      if (v633 < v758)
        v351 = v340;
      else
        v351 = 0;
      v352 = v718 + (v628 << 6);
      v353 = *(unsigned __int8 *)(v352 + 48);
      if ((v353 & 1) != 0)
        v341 = 0;
      if (v633 < v753)
        v354 = v341;
      else
        v354 = 0;
      v355 = v746 + (v687 << 6);
      v356 = *(unsigned __int8 *)(v355 + 48);
      if ((v356 & 1) != 0)
        v342 = 0;
      if (v633 < v761)
        v357 = v342;
      else
        v357 = 0;
      if (v354 <= v357)
        v358 = v357;
      else
        v358 = v354;
      if (v351 > v358)
        v358 = v351;
      if (v344 <= v358)
        v359 = v358;
      else
        v359 = v344;
      v360 = v347 + (v346 << 6);
      v361 = 1.0;
      if (((v344 == 2) & (*(unsigned __int8 *)(v360 + 48) >> 2)) != 0)
        v362 = 0.5;
      else
        v362 = 1.0;
      if (((v351 == 2) & (v350 >> 2)) != 0)
        v363 = 0.5;
      else
        v363 = 1.0;
      v364 = *(float *)(v360 + 44);
      v365 = *(float *)(v360 + 56);
      v366 = *(float *)(v349 + 44);
      v367 = *(float *)(v349 + 56);
      if (((v354 == 2) & (v353 >> 2)) != 0)
        v368 = 0.5;
      else
        v368 = 1.0;
      v369 = *(float *)(v352 + 44);
      v370 = *(float *)(v352 + 56);
      v371 = *(float *)(v355 + 44);
      v372 = *(float *)(v355 + 56);
      v345->i8[2] = 2 * v359;
      v345->i8[12] = 2 * v344;
      if (((v357 == 2) & (v356 >> 2)) != 0)
        v361 = 0.5;
      v345->i8[13] = 2 * v351;
      v345->i8[14] = 2 * v354;
      v345->i8[15] = 2 * v357;
      v345->i8[0] = 7;
      v688 = v359;
      if (v359)
      {
        v373 = vsubq_f32(v245, v246);
        v374.f32[0] = v364 * v362;
        v375.f32[0] = v365 * v362;
        v374.f32[1] = v366 * v363;
        v374.f32[2] = v368 * v369;
        v374.f32[3] = v361 * v371;
        v375.f32[1] = v363 * v367;
        v375.f32[2] = v368 * v370;
        v375.f32[3] = v361 * v372;
        v625 = v375;
        v627 = v374;
        v376 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F3504F3u), vabsq_f32(v223));
        v377 = vnegq_f32(v224);
        v378 = vnegq_f32(v225);
        v379 = vbslq_s8(v376, (int8x16_t)v378, (int8x16_t)v223);
        v380 = vandq_s8(v376, (int8x16_t)v224);
        v381 = vnegq_f32(v223);
        v382 = vmlsq_f32(v596, v373, v223);
        v383 = vmlsq_f32(v595, v373, v224);
        v384 = vmlsq_f32(v594, v373, v225);
        v385 = (int8x16_t)vcgtq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v384, v384), v383, v383), v382, v382), (float32x4_t)vdupq_n_s32(0x38D1B717u));
        v386 = (float32x4_t)vorrq_s8(vandq_s8(v385, (int8x16_t)v382), vbicq_s8((int8x16_t)v377, vorrq_s8(v385, v376)));
        v387 = (float32x4_t)vbslq_s8(v385, (int8x16_t)v383, v379);
        v388 = (float32x4_t)vbslq_s8(v385, (int8x16_t)v384, v380);
        v389 = vmlaq_f32(vmlaq_f32(vmulq_f32(v386, v386), v387, v387), v388, v388);
        v390 = vrsqrteq_f32(v389);
        v391 = 4;
        do
        {
          v390 = vmulq_f32(v390, vrsqrtsq_f32(vmulq_f32(v390, v390), v389));
          --v391;
        }
        while (v391);
        v392 = vmulq_f32(v390, v386);
        v393 = vmulq_f32(v390, v387);
        v394 = vmulq_f32(v390, v388);
        v719 = v393;
        v754 = vmlaq_f32(vmulq_f32(v224, v394), v393, v378);
        v747 = v394;
        v767 = vmlaq_f32(vmulq_f32(v225, v392), v394, v381);
        v751 = v392;
        v762 = vmlaq_f32(vmulq_f32(v223, v393), v392, v377);
        v395 = *(_QWORD *)(v13 + 168) + 104 * v610;
        v396 = *(_QWORD *)(v13 + 392) + 104 * HIDWORD(v609);
        v397 = *(_QWORD *)(v13 + 616) + 104 * v609;
        v398 = *(_QWORD *)(v13 + 840);
        v345[14].i64[0] = 0;
        v345[14].i64[1] = 0;
        v345[15].i64[0] = v395;
        v345[15].i64[1] = v396;
        v345[16].i64[0] = v397;
        v345[16].i64[1] = v398 + 104 * HIDWORD(v608);
        _X21 = &v348[(2 * v359)];
        bzero(v348, 16 * (2 * v359));
        v401 = v762;
        v402 = v767;
        v403 = v754;
        v404 = v719;
        v405 = 0;
        v406 = 0;
        v407 = 0;
        v408 = 0;
        v409 = 0;
        v410 = v721 + (v743 << 6) + 32;
        __asm { FMOV            V0.4S, #1.0 }
        v759 = _Q0;
        v96 = v637;
        v412 = v693;
        v343 = v633;
        v413 = v730;
        v414 = v692;
        v415 = v691;
        v416 = v690;
        do
        {
          __asm
          {
            PRFM            #0, [X21,#0x180]
            PRFM            #0, [X21,#0x200]
            PRFM            #0, [X21,#0x280]
          }
          if (v405 < v344)
            v409 = v405;
          if (v405 < v351)
            v408 = v405;
          if (v405 < v354)
            v407 = v405;
          if (v405 < v357)
            v406 = v405;
          v420 = a1 + 2816 + 104 * HIDWORD(v632) + 12 * v409;
          v421 = *(float32x2_t *)(v420 + 40);
          *(float32x2_t *)v422.f32 = v421;
          v422.i32[2] = *(_DWORD *)(v420 + 48);
          v423 = a1 + 2816 + 104 * v632 + 12 * v408;
          v424 = *(float32x2_t *)(v423 + 40);
          *(float32x2_t *)v425.f32 = v424;
          v425.i32[2] = *(_DWORD *)(v423 + 48);
          v426 = a1 + 2816 + 104 * v631 + 12 * v407;
          v427 = *(float32x2_t *)(v426 + 40);
          *(float32x2_t *)v428.f32 = v427;
          v428.i32[2] = *(_DWORD *)(v426 + 48);
          v429 = a1 + 2816 + 104 * v608 + 12 * v406;
          v430 = *(float32x2_t *)(v429 + 40);
          *(float32x2_t *)v431.f32 = v430;
          v431.i32[2] = *(_DWORD *)(v429 + 48);
          v432 = *(float32x2_t *)(v420 + 64);
          *(float32x2_t *)v433.f32 = v432;
          v433.i32[2] = *(_DWORD *)(v420 + 72);
          v434 = *(float32x2_t *)(v423 + 64);
          *(float32x2_t *)v435.f32 = v434;
          v435.i32[2] = *(_DWORD *)(v423 + 72);
          v436 = *(float32x2_t *)(v426 + 64);
          *(float32x2_t *)v437.f32 = v436;
          v437.i32[2] = *(_DWORD *)(v426 + 72);
          v438 = *(float32x2_t *)(v429 + 64);
          *(float32x2_t *)v439.f32 = v438;
          v439.i32[2] = *(_DWORD *)(v429 + 72);
          v440 = *(unsigned __int16 *)(v654 + 4 * HIDWORD(v632) + 2 * v409);
          v441 = *(unsigned __int16 *)(v654 + 4 * v632 + 2 * v408);
          v442 = *(unsigned __int16 *)(v654 + 4 * v631 + 2 * v407);
          v443 = *(unsigned __int16 *)(v654 + 4 * v608 + 2 * v406);
          v444 = (int32x4_t *)v410;
          if (v440 != 0xFFFF)
            v444 = (int32x4_t *)(*(_QWORD *)(v13 + 144) + (v440 << 6) + 32);
          v445 = (int32x4_t *)v410;
          if ((_DWORD)v441 != 0xFFFF)
            v445 = (int32x4_t *)(*(_QWORD *)(v13 + 368) + (v441 << 6) + 32);
          v722 = *v445;
          v446 = (int32x4_t *)v410;
          if ((_DWORD)v442 != 0xFFFF)
            v446 = (int32x4_t *)(*(_QWORD *)(v13 + 592) + (v442 << 6) + 32);
          v763 = v401;
          v768 = v402;
          v755 = v403;
          v720 = *v446;
          v447 = (int32x4_t *)v410;
          if ((_DWORD)v443 != 0xFFFF)
            v447 = (int32x4_t *)(*(_QWORD *)(v13 + 816) + (v443 << 6) + 32);
          v400.i32[0] = v344;
          v402.i32[0] = v405;
          v448 = (int8x16_t)v759;
          v448.i32[0] = 0;
          v449 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(v400, (uint32x4_t)v402), 0), (int8x16_t)v759, v448);
          v450 = v449;
          v450.i32[1] = 0;
          v448.i32[0] = v351;
          v451 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v448, (uint32x4_t)v402), 0);
          v452 = vbslq_s8(v451, v449, v450);
          v453 = v452;
          v453.i32[2] = 0;
          v451.i32[0] = v354;
          v454 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v451, (uint32x4_t)v402), 0);
          v455 = vbslq_s8(v454, v452, v453);
          v456 = v455;
          v456.i32[3] = 0;
          v454.i32[0] = v357;
          v457 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32((uint32x4_t)v454, (uint32x4_t)v402), 0), v455, v456);
          v458 = vmulq_f32(v751, v457);
          v404 = vmulq_f32(v404, v457);
          v759 = v457;
          v459 = vmulq_f32(v747, v457);
          v422.i32[3] = 0;
          v425.i32[3] = 0;
          v428.i32[3] = 0;
          v431.i32[3] = 0;
          v460 = vmulq_n_f32(v422, v686);
          v460.i32[3] = 0;
          v461 = (float32x2_t)vextq_s8((int8x16_t)v422, (int8x16_t)v422, 8uLL).u64[0];
          *(float32x2_t *)v454.i8 = vmls_f32(vmul_f32(v685, (float32x2_t)vext_s8((int8x8_t)v421, (int8x8_t)v461, 4uLL)), v652, v421);
          *(int8x8_t *)v462.f32 = vext_s8(*(int8x8_t *)v454.i8, (int8x8_t)vmls_f32(vmul_f32(v653, v421), v685, v461), 4uLL);
          v462.i64[1] = v454.u32[0];
          v463 = vmlaq_f32(v460, v684, v462);
          v463.i64[1] = vextq_s8((int8x16_t)v463, (int8x16_t)v463, 8uLL).u32[0];
          v464 = vmulq_f32(v665, v422);
          v464.i64[0] = vpaddq_f32(v464, v464).u64[0];
          v465 = vmlaq_n_f32(v463, v665, vpadd_f32(*(float32x2_t *)v464.f32, *(float32x2_t *)v464.f32).f32[0]);
          v466 = vmulq_n_f32(v425, v683);
          v466.i32[3] = 0;
          v462.i64[0] = vextq_s8((int8x16_t)v425, (int8x16_t)v425, 8uLL).u64[0];
          v467 = (int8x8_t)vmls_f32(vmul_f32(*(float32x2_t *)v682.i8, (float32x2_t)vext_s8((int8x8_t)v424, *(int8x8_t *)v462.f32, 4uLL)), v650, v424);
          *(int8x8_t *)v468.f32 = vext_s8(v467, (int8x8_t)vmls_f32(vmul_f32(v651, v424), *(float32x2_t *)v682.i8, *(float32x2_t *)v462.f32), 4uLL);
          v468.i64[1] = v467.u32[0];
          v469 = vmlaq_f32(v466, v681, v468);
          v470 = (int32x4_t)vaddq_f32(v465, v465);
          v469.i64[1] = vextq_s8((int8x16_t)v469, (int8x16_t)v469, 8uLL).u32[0];
          v471 = vmulq_f32(v664, v425);
          v471.i64[0] = vpaddq_f32(v471, v471).u64[0];
          v472 = vmlaq_n_f32(v469, v664, vpadd_f32(*(float32x2_t *)v471.f32, *(float32x2_t *)v471.f32).f32[0]);
          v473 = (int32x4_t)vaddq_f32(v472, v472);
          v474 = vmulq_n_f32(v428, v680);
          v474.i32[3] = 0;
          v462.i64[0] = vextq_s8((int8x16_t)v428, (int8x16_t)v428, 8uLL).u64[0];
          *(float32x2_t *)v465.f32 = vmls_f32(vmul_f32(v679, (float32x2_t)vext_s8((int8x8_t)v427, *(int8x8_t *)v462.f32, 4uLL)), v648, v427);
          *(int8x8_t *)v475.f32 = vext_s8(*(int8x8_t *)v465.f32, (int8x8_t)vmls_f32(vmul_f32(v649, v427), v679, *(float32x2_t *)v462.f32), 4uLL);
          v475.i64[1] = v465.u32[0];
          v476 = vmlaq_f32(v474, v678, v475);
          v476.i64[1] = vextq_s8((int8x16_t)v476, (int8x16_t)v476, 8uLL).u32[0];
          v477 = vmulq_f32(v663, v428);
          v477.i64[0] = vpaddq_f32(v477, v477).u64[0];
          v478 = vmlaq_n_f32(v476, v663, vpadd_f32(*(float32x2_t *)v477.f32, *(float32x2_t *)v477.f32).f32[0]);
          v479 = (int32x4_t)vaddq_f32(v478, v478);
          v480 = vmulq_n_f32(v431, v675);
          v480.i32[3] = 0;
          v478.i64[0] = vextq_s8((int8x16_t)v431, (int8x16_t)v431, 8uLL).u64[0];
          *(float32x2_t *)v462.f32 = vmls_f32(vmul_f32(v677, (float32x2_t)vext_s8((int8x8_t)v430, *(int8x8_t *)v478.f32, 4uLL)), v646, v430);
          *(int8x8_t *)v481.f32 = vext_s8(*(int8x8_t *)v462.f32, (int8x8_t)vmls_f32(vmul_f32(v647, v430), v677, *(float32x2_t *)v478.f32), 4uLL);
          v481.i64[1] = v462.u32[0];
          v482 = vmlaq_f32(v480, v676, v481);
          v482.i64[1] = vextq_s8((int8x16_t)v482, (int8x16_t)v482, 8uLL).u32[0];
          v483 = vmulq_f32(v662, v431);
          v483.i64[0] = vpaddq_f32(v483, v483).u64[0];
          v484 = vmlaq_n_f32(v482, v662, vpadd_f32(*(float32x2_t *)v483.f32, *(float32x2_t *)v483.f32).f32[0]);
          v485 = (int32x4_t)vaddq_f32(v484, v484);
          v486 = vzip1q_s32(v470, v479);
          v487 = vzip2q_s32(v470, v479);
          v488 = vzip1q_s32(v473, v485);
          v489 = vzip2q_s32(v473, v485);
          v490 = (float32x4_t)vzip1q_s32(v486, v488);
          v491 = (float32x4_t)vzip2q_s32(v486, v488);
          v492 = (float32x4_t)vzip1q_s32(v487, v489);
          v493 = vaddq_f32(v717, v490);
          v433.i32[3] = 0;
          v435.i32[3] = 0;
          v437.i32[3] = 0;
          v748 = vaddq_f32(v716, v491);
          v439.i32[3] = 0;
          v494 = vmulq_n_f32(v433, v674);
          v494.i32[3] = 0;
          v495 = vaddq_f32(v713, v492);
          v462.i64[0] = vextq_s8((int8x16_t)v433, (int8x16_t)v433, 8uLL).u64[0];
          *(float32x2_t *)v465.f32 = vmls_f32(vmul_f32(v673, (float32x2_t)vext_s8((int8x8_t)v432, *(int8x8_t *)v462.f32, 4uLL)), v644, v432);
          *(int8x8_t *)v496.f32 = vext_s8(*(int8x8_t *)v465.f32, (int8x8_t)vmls_f32(vmul_f32(v645, v432), v673, *(float32x2_t *)v462.f32), 4uLL);
          v496.i64[1] = v465.u32[0];
          v497 = vmlaq_f32(v494, v672, v496);
          v497.i64[1] = vextq_s8((int8x16_t)v497, (int8x16_t)v497, 8uLL).u32[0];
          v498 = vmulq_f32(v661, v433);
          v498.i64[0] = vpaddq_f32(v498, v498).u64[0];
          v499 = vmulq_n_f32(v435, v671);
          v499.i32[3] = 0;
          v500 = vmlaq_n_f32(v497, v661, vpadd_f32(*(float32x2_t *)v498.f32, *(float32x2_t *)v498.f32).f32[0]);
          v498.i64[0] = vextq_s8((int8x16_t)v435, (int8x16_t)v435, 8uLL).u64[0];
          *(float32x2_t *)v462.f32 = vmls_f32(vmul_f32(v670, (float32x2_t)vext_s8((int8x8_t)v434, *(int8x8_t *)v498.f32, 4uLL)), v642, v434);
          *(int8x8_t *)v501.f32 = vext_s8(*(int8x8_t *)v462.f32, (int8x8_t)vmls_f32(vmul_f32(v643, v434), v670, *(float32x2_t *)v498.f32), 4uLL);
          v501.i64[1] = v462.u32[0];
          v502 = vmlaq_f32(v499, v669, v501);
          v502.i64[1] = vextq_s8((int8x16_t)v502, (int8x16_t)v502, 8uLL).u32[0];
          v503 = (int32x4_t)vaddq_f32(v500, v500);
          v504 = vmulq_f32(v660, v435);
          v504.i64[0] = vpaddq_f32(v504, v504).u64[0];
          v505 = vmlaq_n_f32(v502, v660, vpadd_f32(*(float32x2_t *)v504.f32, *(float32x2_t *)v504.f32).f32[0]);
          v506 = (int32x4_t)vaddq_f32(v505, v505);
          v507 = vmulq_n_f32(v437, v668);
          v507.i32[3] = 0;
          v505.i64[0] = vextq_s8((int8x16_t)v437, (int8x16_t)v437, 8uLL).u64[0];
          *(float32x2_t *)v500.f32 = vmls_f32(vmul_f32(v667, (float32x2_t)vext_s8((int8x8_t)v436, *(int8x8_t *)v505.f32, 4uLL)), v640, v436);
          *(int8x8_t *)v508.f32 = vext_s8(*(int8x8_t *)v500.f32, (int8x8_t)vmls_f32(vmul_f32(v641, v436), v667, *(float32x2_t *)v505.f32), 4uLL);
          v508.i64[1] = v500.u32[0];
          v509 = vmlaq_f32(v507, v666, v508);
          v509.i64[1] = vextq_s8((int8x16_t)v509, (int8x16_t)v509, 8uLL).u32[0];
          v510 = vmulq_f32(v659, v437);
          v510.i64[0] = vpaddq_f32(v510, v510).u64[0];
          v511 = vmlaq_n_f32(v509, v659, vpadd_f32(*(float32x2_t *)v510.f32, *(float32x2_t *)v510.f32).f32[0]);
          v512 = vmulq_n_f32(v439, v656);
          v512.i32[3] = 0;
          v508.i64[0] = vextq_s8((int8x16_t)v439, (int8x16_t)v439, 8uLL).u64[0];
          *(float32x2_t *)v505.f32 = vmls_f32(vmul_f32(v658, (float32x2_t)vext_s8((int8x8_t)v438, *(int8x8_t *)v508.f32, 4uLL)), v638, v438);
          *(int8x8_t *)v513.f32 = vext_s8(*(int8x8_t *)v505.f32, (int8x8_t)vmls_f32(vmul_f32(v639, v438), v658, *(float32x2_t *)v508.f32), 4uLL);
          v513.i64[1] = v505.u32[0];
          v514 = vmlaq_f32(v512, v655, v513);
          v515 = (int32x4_t)vaddq_f32(v511, v511);
          v514.i64[1] = vextq_s8((int8x16_t)v514, (int8x16_t)v514, 8uLL).u32[0];
          v516 = vmulq_f32(v657, v439);
          v516.i64[0] = vpaddq_f32(v516, v516).u64[0];
          v517 = vmlaq_n_f32(v514, v657, vpadd_f32(*(float32x2_t *)v516.f32, *(float32x2_t *)v516.f32).f32[0]);
          v518 = (int32x4_t)vaddq_f32(v517, v517);
          v519 = vzip1q_s32(v503, v515);
          v520 = vzip2q_s32(v503, v515);
          v521 = vzip1q_s32(v506, v518);
          v522 = vzip2q_s32(v506, v518);
          v523 = (float32x4_t)vzip1q_s32(v519, v521);
          v524 = (float32x4_t)vzip2q_s32(v519, v521);
          v525 = (float32x4_t)vzip1q_s32(v520, v522);
          v526 = vaddq_f32(v715, v523);
          v527 = vaddq_f32(v714, v524);
          v528 = vaddq_f32(v712, v525);
          v529 = vmlsq_f32(vmulq_f32(v459, v491), v404, v492);
          v530 = vmlsq_f32(vmulq_f32(v458, v492), v459, v490);
          v531 = vmlsq_f32(vmulq_f32(v404, v490), v458, v491);
          v532 = (float32x4_t)vbicq_s8((int8x16_t)v529, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v529)));
          v533 = (float32x4_t)vbicq_s8((int8x16_t)v530, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v530)));
          v534 = (float32x4_t)vbicq_s8((int8x16_t)v531, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v531)));
          v535 = vmlaq_f32(vmlaq_f32(vmulq_f32(v415, v532), v533, v416), v534, v739);
          v536 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v532), v533, v737), v534, v736);
          v537 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v532), v533, v734), v534, v733);
          v538 = vmlaq_f32(v414, v726, vmlaq_f32(vmlaq_f32(vmulq_f32(v535, v535), v536, v536), v537, v537));
          v539 = *v447;
          v751 = v458;
          if (v637)
          {
            v540 = vmlsq_f32(vmulq_f32(v459, v524), v404, v525);
            v541 = vmlsq_f32(vmulq_f32(v458, v525), v459, v523);
            v542 = vmlsq_f32(vmulq_f32(v404, v523), v458, v524);
            v543 = (float32x4_t)vbicq_s8((int8x16_t)v540, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v540)));
            v544 = v459;
            v545 = (float32x4_t)vbicq_s8((int8x16_t)v541, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v541)));
            v546 = (float32x4_t)vbicq_s8((int8x16_t)v542, (int8x16_t)vcgtq_f32(v412, vabsq_f32(v542)));
            v547 = vmlaq_f32(vmlaq_f32(vmulq_f32(v706, v543), v545, v705), v546, v704);
            v548 = vmlaq_f32(vmlaq_f32(vmulq_f32(v703, v543), v545, v702), v546, v701);
            v549 = vmlaq_f32(vmlaq_f32(vmulq_f32(v700, v543), v545, v699), v546, v698);
            v538 = vaddq_f32(v538, vmlaq_f32(v707, v708, vmlaq_f32(vmlaq_f32(vmulq_f32(v547, v547), v548, v548), v549, v549)));
            v550 = v730;
            v551 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v458), v710, v404), v709, v544), v729, v543), v728, v545), v727, v546);
          }
          else
          {
            v547 = 0uLL;
            if (v634)
            {
              v551 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v458), v710, v404), v709, v459), v729, vmlsq_f32(vmulq_f32(v459, v524), v404, v525)), v728, vmlsq_f32(vmulq_f32(v458, v525), v459, v523)), v727, vmlsq_f32(vmulq_f32(v404, v523), v458, v524));
              v548 = 0uLL;
              v549 = 0uLL;
            }
            else
            {
              v548 = 0uLL;
              v549 = 0uLL;
              v551 = 0uLL;
            }
            v544 = v459;
            v550 = v413;
          }
          v552 = vsubq_f32(v493, v526);
          v744 = vsubq_f32(v748, v527);
          v553 = vsubq_f32(v495, v528);
          v554 = vzip1q_s32(*v444, v720);
          v555 = vzip1q_s32(v722, v539);
          v556 = vzip2q_s32(v722, v539);
          v557 = (float32x4_t)vzip1q_s32(v554, v555);
          v558 = (float32x4_t)vzip2q_s32(v554, v555);
          v559 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v444, v720), v556);
          v747 = v544;
          v348 = _X21 + 26;
          v756 = vmulq_f32(v755, v759);
          v769 = vmulq_f32(v768, v759);
          v764 = vmulq_f32(v763, v759);
          v560 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v725, v458), v550, v404), v724, v544), v689, v532), v741, v533), v740, v534);
          v561 = vnegq_f32(v492);
          _X21[6] = v547;
          _X21[7] = v548;
          v562 = vnegq_f32(v490);
          v563 = vnegq_f32(v491);
          _X21[8] = v549;
          v564 = vrecpeq_f32(v538);
          v565 = 4;
          do
          {
            v564 = vmulq_f32(v564, vrecpsq_f32(v564, v538));
            --v565;
          }
          while (v565);
          v566 = (float32x4_t)vdupq_n_s32(0x3F4CCCCDu);
          _X21[3] = v535;
          _X21[4] = v536;
          _X21[5] = v537;
          _X21[9] = vmlaq_f32(vmlaq_f32(vmulq_f32(v458, v552), v744, v404), v553, v544);
          _X21[10] = vmulq_f32(v759, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v564, v566), (int8x16_t)vcgtzq_f32(v538)));
          _X21[11] = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v458, v557), v558, v404), v559, v544), v731, v551), v732, v560);
          v401 = v764;
          v402 = v769;
          v567 = vmlaq_f32(vmulq_f32(v764, v491), v769, v561);
          v403 = v756;
          v568 = vmlaq_f32(vmulq_f32(v756, v492), v764, v562);
          v569 = vmlaq_f32(vmulq_f32(v769, v490), v756, v563);
          v412 = v693;
          v570 = (float32x4_t)vbicq_s8((int8x16_t)v567, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v567)));
          v571 = (float32x4_t)vbicq_s8((int8x16_t)v568, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v568)));
          v572 = (float32x4_t)vbicq_s8((int8x16_t)v569, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v569)));
          v415 = v691;
          v416 = v690;
          v573 = vmlaq_f32(vmlaq_f32(vmulq_f32(v691, v570), v571, v690), v572, v739);
          v574 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v570), v571, v737), v572, v736);
          v575 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v570), v571, v734), v572, v733);
          v414 = v692;
          v576 = vmlaq_f32(v692, v726, vmlaq_f32(vmlaq_f32(vmulq_f32(v573, v573), v574, v574), v575, v575));
          _X21[1] = v404;
          _X21[2] = v544;
          _X21[12] = (float32x4_t)v723;
          *_X21 = v458;
          if (v637)
          {
            v577 = vmlsq_f32(vmulq_f32(v764, v524), v769, v525);
            v578 = vmlsq_f32(vmulq_f32(v756, v525), v764, v523);
            v579 = vmlsq_f32(vmulq_f32(v769, v523), v756, v524);
            v580 = (float32x4_t)vbicq_s8((int8x16_t)v577, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v577)));
            v581 = (float32x4_t)vbicq_s8((int8x16_t)v578, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v578)));
            v582 = (float32x4_t)vbicq_s8((int8x16_t)v579, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v579)));
            v583 = vmlaq_f32(vmlaq_f32(vmulq_f32(v706, v580), v581, v705), v582, v704);
            v584 = vmlaq_f32(vmlaq_f32(vmulq_f32(v703, v580), v581, v702), v582, v701);
            v585 = vmlaq_f32(vmlaq_f32(vmulq_f32(v700, v580), v581, v699), v582, v698);
            v403 = v756;
            v576 = vaddq_f32(v576, vmlaq_f32(v707, v708, vmlaq_f32(vmlaq_f32(vmulq_f32(v583, v583), v584, v584), v585, v585)));
            v401 = v764;
            v586 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v756), v710, v769), v709, v764), v729, v580), v728, v581), v727, v582);
            v402 = v769;
            v587 = v730;
            v588 = v725;
          }
          else
          {
            v583 = 0uLL;
            v588 = v725;
            if (v634)
            {
              v586 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v711, v756), v710, v769), v709, v764), v729, vmlsq_f32(vmulq_f32(v764, v524), v769, v525)), v728, vmlsq_f32(vmulq_f32(v756, v525), v764, v523)), v727, vmlsq_f32(vmulq_f32(v769, v523), v756, v524));
              v584 = 0uLL;
              v585 = 0uLL;
            }
            else
            {
              v584 = 0uLL;
              v585 = 0uLL;
              v586 = 0uLL;
            }
            v587 = v730;
          }
          v400 = (uint32x4_t)v724;
          v589 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v588, v403), v587, v402), v724, v401), v689, v570), v741, v571), v740, v572);
          _X21[19] = v583;
          _X21[20] = v584;
          _X21[21] = v585;
          v590 = vrecpeq_f32(v576);
          v591 = 4;
          do
          {
            v590 = vmulq_f32(v590, vrecpsq_f32(v590, v576));
            --v591;
          }
          while (v591);
          _X21[13] = v403;
          _X21[14] = v402;
          _X21[15] = v401;
          _X21[16] = v573;
          _X21[17] = v574;
          _X21[18] = v575;
          _X21[22] = vmlaq_f32(vmlaq_f32(vmulq_f32(v403, v552), v744, v402), v553, v401);
          _X21[23] = vmulq_f32(v759, (float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v590, v566), (int8x16_t)vcgtzq_f32(v576)));
          _X21[24] = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v403, v557), v558, v402), v559, v401), v731, v586), v732, v589);
          _X21[25] = (float32x4_t)v723;
          ++v405;
          _X21 += 26;
          v413 = v730;
        }
        while (v405 != v688);
        v630[2] = v627;
        v630[3] = v625;
        ++HIDWORD(v609);
        ++v610;
        ++HIDWORD(v608);
        LODWORD(v609) = v609 + 1;
      }
      v188 = v343 + 1;
      v205 = v348;
      if (v188 == v602)
        goto LABEL_350;
    }
    v248 = 0;
    v249 = &_X2[10 * v220];
    v250 = v241 | v239 | v242 | v243;
    while (2)
    {
      __asm
      {
        PRFM            #0, [X2,#0x180]
        PRFM            #0, [X2,#0x200]
        PRFM            #0, [X2,#0x280]
      }
      v254 = *(_QWORD *)(v13 + 144);
      v255 = HIDWORD(v695) + *(unsigned __int16 *)(a1 + 44 * HIDWORD(v697));
      v256 = *(_QWORD *)(v13 + 368);
      v257 = v694 + *(unsigned __int16 *)(a1 + 44 * v696);
      v258 = *(_QWORD *)(v13 + 592);
      v259 = HIDWORD(v694) + *(unsigned __int16 *)(a1 + 44 * HIDWORD(v696));
      v260 = *(_QWORD *)(v13 + 816);
      v261 = v695 + *(unsigned __int16 *)(a1 + 44 * v697);
      v262 = (int32x4_t *)(v254 + (v255 << 6));
      v263 = v262[1];
      v264 = (int32x4_t *)(v256 + (v257 << 6));
      v265 = v264[1];
      v266 = (int32x4_t *)(v258 + (v259 << 6));
      v267 = v266[1];
      v268 = (int32x4_t *)(v260 + (v261 << 6));
      v269 = v268[1];
      v270 = vzip1q_s32(v263, v267);
      v271 = vzip2q_s32(v263, v267);
      v272 = vzip1q_s32(v265, v269);
      v273 = vzip2q_s32(v265, v269);
      v274 = (float32x4_t)vzip1q_s32(v270, v272);
      v275 = (float32x4_t)vzip2q_s32(v270, v272);
      v276 = (float32x4_t)vzip1q_s32(v271, v273);
      v277 = vsubq_f32(v274, v717);
      v278 = vsubq_f32(v275, v716);
      v279 = vsubq_f32(v276, v713);
      v280 = vsubq_f32(v274, v715);
      v281 = vsubq_f32(v275, v714);
      v282 = vsubq_f32(v276, v712);
      v283 = vmlsq_f32(vmulq_f32(v225, v278), v224, v279);
      v284 = vmlsq_f32(vmulq_f32(v223, v279), v225, v277);
      v285 = vmlsq_f32(vmulq_f32(v224, v277), v223, v278);
      v286 = (float32x4_t)vbicq_s8((int8x16_t)v283, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v283)));
      v287 = (float32x4_t)vbicq_s8((int8x16_t)v284, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v284)));
      v288 = (float32x4_t)vbicq_s8((int8x16_t)v285, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v285)));
      v289 = vmlaq_f32(vmlaq_f32(vmulq_f32(v691, v286), v287, v690), v288, v739);
      v290 = vmlaq_f32(vmlaq_f32(vmulq_f32(v738, v286), v287, v737), v288, v736);
      v291 = vmlaq_f32(vmlaq_f32(vmulq_f32(v735, v286), v287, v734), v288, v733);
      v292 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v291, v291), v290, v290), v289, v289), v726, v692);
      if (v637)
      {
        v293 = vmlsq_f32(vmulq_f32(v225, v281), v224, v282);
        v294 = vmlsq_f32(vmulq_f32(v223, v282), v225, v280);
        v295 = vmlsq_f32(vmulq_f32(v224, v280), v223, v281);
        v296 = (float32x4_t)vbicq_s8((int8x16_t)v293, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v293)));
        v297 = (float32x4_t)vbicq_s8((int8x16_t)v294, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v294)));
        v298 = (float32x4_t)vbicq_s8((int8x16_t)v295, (int8x16_t)vcgtq_f32(v693, vabsq_f32(v295)));
        v299 = vmlaq_f32(vmlaq_f32(vmulq_f32(v706, v296), v297, v705), v298, v704);
        v300 = vmlaq_f32(vmlaq_f32(vmulq_f32(v703, v296), v297, v702), v298, v701);
        v301 = vmlaq_f32(vmlaq_f32(vmulq_f32(v700, v296), v297, v699), v298, v698);
        v292 = vaddq_f32(v292, vmlaq_f32(v707, v708, vmlaq_f32(vmlaq_f32(vmulq_f32(v301, v301), v300, v300), v299, v299)));
        v302 = vaddq_f32(v246, vmlaq_f32(vmlaq_f32(vmulq_f32(v729, v296), v728, v297), v727, v298));
      }
      else
      {
        v299 = 0uLL;
        if (v634)
          v302 = vaddq_f32(v246, vmlaq_f32(vmlaq_f32(vmulq_f32(v729, vmlsq_f32(vmulq_f32(v225, v281), v224, v282)), v728, vmlsq_f32(vmulq_f32(v223, v282), v225, v280)), v727, vmlsq_f32(vmulq_f32(v224, v280), v223, v281)));
        else
          v302 = v246;
        v300 = 0uLL;
        v301 = 0uLL;
      }
      v303 = v248 + 1;
      v247 = _X2 + 10;
      v304 = v262[2];
      v305 = v264[2];
      v306 = v266[2];
      v307 = v268[2];
      v308 = vzip1q_s32(v304, v306);
      v309 = vzip2q_s32(v304, v306);
      v310 = vzip1q_s32(v305, v307);
      v311 = (float32x4_t)vzip1q_s32(v309, vzip2q_s32(v305, v307));
      v312.i32[0] = v262->i32[3];
      v312.i32[1] = v264->i32[3];
      v312.i32[2] = v266->i32[3];
      v312.i32[3] = v268->i32[3];
      v313 = vmlaq_f32(vmlaq_f32(vmulq_f32(v225, v311), v224, (float32x4_t)vzip2q_s32(v308, v310)), v223, (float32x4_t)vzip1q_s32(v308, v310));
      v314 = vaddq_f32(v245, vmlaq_f32(vmlaq_f32(vmulq_f32(v689, v286), v741, v287), v740, v288));
      _X2[3] = v299;
      _X2[4] = v300;
      _X2[5] = v301;
      v315 = vrecpeq_f32(v292);
      v316 = 4;
      do
      {
        v315 = vmulq_f32(v315, vrecpsq_f32(v315, v292));
        --v316;
      }
      while (v316);
      v317 = vsubq_f32(v314, v302);
      v318 = vandq_s8((int8x16_t)v315, (int8x16_t)vcgtzq_f32(v292));
      v319 = vsubq_f32(v312, v600);
      *_X2 = v289;
      _X2[1] = v290;
      _X2[2] = v291;
      _X2[6] = v319;
      _X2[7] = (float32x4_t)v318;
      v320 = vaddq_f32(v313, vmlsq_f32(vmlaq_f32((float32x4_t)vandq_s8((int8x16_t)vmulq_f32(v317, v766), vandq_s8(vandq_s8((int8x16_t)vcgtq_f32(v598, v317), (int8x16_t)vcgtzq_f32(v622)), (int8x16_t)vcgtq_f32(vnegq_f32(v317), vmulq_n_f32(v319, v607)))), v731, v302), v732, v314));
      _X2[8] = v320;
      _X2[9] = v599;
      if (v636)
      {
        v320.i32[0] = *(_DWORD *)(v254 + (v255 << 6) + 28);
        v290.i32[0] = *(_DWORD *)(v256 + (v257 << 6) + 28);
        v291.i32[0] = *(_DWORD *)(v258 + (v259 << 6) + 28);
        v318.i32[0] = *(_DWORD *)(v260 + (v261 << 6) + 28);
        *(int8x8_t *)v321.f32 = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v320.f32, 0), *(int8x8_t *)v290.f32, 4uLL);
        *(int8x8_t *)&v321.u32[2] = vext_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v291.f32, 0), *(int8x8_t *)v318.i8, 4uLL);
        v249[v248] = v321;
      }
      v13 = v635;
      if ((v250 & 1) != 0)
      {
        v325 = v250;
        v228 = v608;
        if ((v250 & 2) == 0)
          goto LABEL_233;
      }
      else
      {
        v322 = v231 + 1;
        v323 = 0xFFFFLL;
        v228 = v608;
        if ((_DWORD)v227 == 0xFFFF)
        {
          v324 = 0;
        }
        else
        {
          v323 = v227;
          while (1)
          {
            v326 = *(unsigned __int8 *)(a1 + 44 * v323 + 5);
            if (v322 != v326)
              break;
            v322 = 0;
            v323 = *(unsigned __int16 *)(a1 + 44 * v323 + 2);
            if ((_DWORD)v323 == 0xFFFF)
            {
              v322 = 0;
              v324 = 0;
              v323 = 0xFFFFLL;
              goto LABEL_232;
            }
          }
          v324 = v322 < v326;
        }
LABEL_232:
        v325 = v250 | !v324;
        HIDWORD(v695) = v231;
        HIDWORD(v697) = v227;
        v231 = v322;
        v227 = v323;
        if ((v250 & 2) == 0)
        {
LABEL_233:
          v327 = v233 + 1;
          v328 = 0xFFFFLL;
          if ((_DWORD)v226 == 0xFFFF)
          {
            v329 = 2;
          }
          else
          {
            v328 = v226;
            while (1)
            {
              v330 = *(unsigned __int8 *)(a1 + 44 * v328 + 5);
              if (v327 != v330)
                break;
              v327 = 0;
              v328 = *(unsigned __int16 *)(a1 + 44 * v328 + 2);
              if ((_DWORD)v328 == 0xFFFF)
              {
                v329 = 2;
                v328 = 0xFFFFLL;
                goto LABEL_242;
              }
            }
            if (v327 >= v330)
              v329 = 2;
            else
              v329 = 0;
          }
LABEL_242:
          v325 = v329 | v325;
          LODWORD(v694) = v233;
          LODWORD(v696) = v226;
          v233 = v327;
          v226 = v328;
        }
      }
      if ((v250 & 4) != 0)
      {
        if ((v250 & 8) != 0)
          goto LABEL_266;
LABEL_256:
        v335 = v237 + 1;
        v336 = 0xFFFFLL;
        if ((_DWORD)v229 == 0xFFFF)
        {
          v337 = 8;
        }
        else
        {
          v336 = v229;
          while (1)
          {
            v338 = *(unsigned __int8 *)(a1 + 44 * v336 + 5);
            if (v335 != v338)
              break;
            v335 = 0;
            v336 = *(unsigned __int16 *)(a1 + 44 * v336 + 2);
            if ((_DWORD)v336 == 0xFFFF)
            {
              v337 = 8;
              v336 = 0xFFFFLL;
              goto LABEL_265;
            }
          }
          if (v335 >= v338)
            v337 = 8;
          else
            v337 = 0;
        }
LABEL_265:
        v325 = v337 | v325;
        LODWORD(v695) = v237;
        LODWORD(v697) = v229;
        v237 = v335;
        v229 = v336;
      }
      else
      {
        v331 = v235 + 1;
        v332 = 0xFFFFLL;
        if ((_DWORD)v230 == 0xFFFF)
        {
          v333 = 4;
        }
        else
        {
          v332 = v230;
          while (1)
          {
            v334 = *(unsigned __int8 *)(a1 + 44 * v332 + 5);
            if (v331 != v334)
              break;
            v331 = 0;
            v332 = *(unsigned __int16 *)(a1 + 44 * v332 + 2);
            if ((_DWORD)v332 == 0xFFFF)
            {
              v333 = 4;
              v332 = 0xFFFFLL;
              goto LABEL_255;
            }
          }
          if (v331 >= v334)
            v333 = 4;
          else
            v333 = 0;
        }
LABEL_255:
        v325 = v333 | v325;
        HIDWORD(v694) = v235;
        HIDWORD(v696) = v230;
        v235 = v331;
        v230 = v332;
        if ((v250 & 8) == 0)
          goto LABEL_256;
      }
LABEL_266:
      _X2 = v247;
      v248 = v303;
      _ZF = (_DWORD)v250 == 15;
      v250 = v325;
      if (_ZF)
        goto LABEL_268;
      continue;
    }
  }
LABEL_350:
  *(_DWORD *)(v593 + v592) = 0;
  return 2;
}

uint64_t physx::Dy::createFinalizeSolverContacts4Step(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, float a8, float a9, double a10)
{
  uint64_t i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t *v15;
  uint64_t *v24;
  uint64_t v33;
  uint64_t v34;
  float v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  float32x4_t v43;
  float v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  float v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t v55;
  int j;
  uint64_t v57;
  float v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  float v67;
  float v68;
  float32x4_t v69;

  for (i = 16; i != 912; i += 224)
    *(_WORD *)(*(_QWORD *)(a3 + i) + 30) = 0;
  v11 = 0;
  v12 = 0;
  v13 = a2 + 16;
  *(_DWORD *)(a2 + 4112) = 0;
  while (1)
  {
    v14 = (float32x4_t *)(a3 + 224 * v11);
    v15 = (uint64_t *)v14[1].i64[0];
    v14[9].i64[0] = v13 + ((unint64_t)v12 << 6);
    _X3 = *v15;
    _X8 = v15[1];
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X8]
    }
    v24 = *(uint64_t **)(a1 + 8 * v11);
    if (v12 + *((unsigned __int8 *)v24 + 24) > 0x40
      || *(float *)(a3 + 224 * v11 + 212) != 0.0
      || *(float *)(a3 + 224 * v11 + 216) != 0.0)
    {
      return 1;
    }
    _X3 = *(_QWORD *)(a3 + 224 * v11 + 168);
    __asm
    {
      PRFM            #0, [X3]
      PRFM            #0, [X3,#0x40]
      PRFM            #0, [X3,#0x80]
    }
    _X7 = *v24;
    if (v11 >= 3)
    {
      _X19 = v24[1];
    }
    else
    {
      __asm { PRFM            #0, [X7] }
      _X19 = v24[1];
      __asm { PRFM            #0, [X19] }
    }
    v33 = v14[3].i64[1];
    v34 = v14[4].i64[0];
    v35 = *(float *)(v33 + 12) >= *(float *)(v34 + 12) ? *(float *)(v34 + 12) : *(float *)(v33 + 12);
    if (!_X7)
      break;
    v36 = *(_BYTE *)(_X7 + 43);
    v37 = (v36 & 2) != 0 ? 64 : 16;
    if ((*(_BYTE *)(_X7 + 43) & 4) != 0)
      break;
    v38 = *((unsigned __int8 *)v24 + 25);
    if (!*((_BYTE *)v24 + 25))
      break;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = v36;
    v43.i32[0] = *(_DWORD *)_X7;
    v44 = *(float *)(_X7 + 4);
    v45 = (v36 >> 5) & 1;
    if ((v36 & 2) != 0)
      v46 = 6;
    else
      v46 = 4;
    v47 = *(_DWORD *)(_X7 + 8);
    v48 = *(float *)(_X7 + 12);
    if (v42 < 0)
      v49 = 32;
    else
      v49 = v37;
    v50 = v42 & 0xFFFFFF82;
    if (v42 < 0)
      v51 = 5;
    else
      v51 = v46;
    v52 = v12;
    do
    {
      if (v39)
      {
        v53 = *(unsigned __int8 *)(_X7 + 41);
        v54 = v53 > v40;
        LODWORD(v55) = (v53 - v40) << v51;
        if (v54)
          v55 = v55;
        else
          v55 = 0;
        _X19 += v55;
        _X7 += 48;
      }
      v40 = *(unsigned __int8 *)(_X7 + 41);
      if (*(_BYTE *)(_X7 + 41))
      {
        for (j = *(unsigned __int8 *)(_X7 + 41); j; --j)
        {
          if (v41)
            v57 = v49;
          else
            v57 = 0;
          _X19 += v57;
          __asm { PRFM            #0, [X19,#0x80] }
          _X3 = (_OWORD *)(v13 + ((unint64_t)v52 << 6));
          __asm { PRFM            #0, [X3,#0x80] }
          v61 = v35;
          if (v45)
          {
            if (!v50)
            {
              v61 = 3.4028e38;
LABEL_45:
              *(_QWORD *)&v62 = *(_QWORD *)(_X7 + 16);
              v63 = v13 + ((unint64_t)v52 << 6);
              DWORD2(v62) = *(_DWORD *)(_X7 + 24);
              HIDWORD(v62) = *(_DWORD *)(_X19 + 12);
              *_X3 = v62;
              *(_QWORD *)(v63 + 16) = *(_QWORD *)_X19;
              LODWORD(v62) = *(_DWORD *)(_X19 + 8);
              *(_BYTE *)(v63 + 48) = *(_BYTE *)(_X7 + 42);
              *(_DWORD *)(v63 + 24) = v62;
              *(float *)(v63 + 28) = v61;
              *(_DWORD *)(v63 + 44) = *(_DWORD *)(_X7 + 36);
              *(int32x2_t *)(v63 + 56) = vrev64_s32(*(int32x2_t *)(_X7 + 28));
              if (v50)
              {
                v64 = *(_QWORD *)(_X19 + 16);
                v65 = *(_DWORD *)(_X19 + 24);
              }
              else
              {
                v64 = 0;
                v65 = 0;
              }
              *(_QWORD *)(v63 + 32) = v64;
              *(_DWORD *)(v63 + 40) = v65;
              v52 = (v52 + 1);
              goto LABEL_49;
            }
            v61 = *(float *)(_X19 + 28);
          }
          if (v61 != 0.0)
            goto LABEL_45;
LABEL_49:
          v41 = 1;
        }
      }
      ++v39;
    }
    while (v39 != v38);
    *(_DWORD *)(a2 + 4112) = v52;
    if ((v42 & 0x10) != 0 || (_DWORD)v52 == (_DWORD)v12)
      return 1;
    v66 = a3 + 224 * v11;
    *(_DWORD *)(v66 + 152) = v52 - v12;
    *(_BYTE *)(v66 + 156) = v45;
    if (*(_BYTE *)(v14[1].i64[1] + 62))
      v67 = 0.0;
    else
      v67 = v44;
    if (*(_BYTE *)(v14[2].i64[0] + 62))
      v68 = 0.0;
    else
      v68 = v48;
    v43.f32[1] = v67;
    v43.i64[1] = __PAIR64__(LODWORD(v68), v47);
    v69 = vmulq_f32(v43, *v14);
    *v14 = v69;
    ++v11;
    v12 = v52;
    if (v11 == 4)
      return physx::Dy::createFinalizeSolverContacts4Step(a2 + 4128, a3, a4, a5, a6, a7, a8, a9, a10, 0.0, v69.f32[0]);
  }
  *(_DWORD *)(a2 + 4112) = v12;
  return 1;
}

uint64_t physx::Dy::setupSolverConstraintStep4(uint64_t a1, uint64_t a2, float *a3, uint64_t (***a4)(_QWORD, _QWORD), float a5, float a6, float a7, float a8, float32_t a9)
{
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t (*v24)(_OWORD *);
  unsigned int v25;
  _OWORD *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v34;
  double v35;
  double v36;
  float32x4_t v37;
  uint64_t v38;
  __int128 v42;
  _OWORD v44[240];
  uint64_t v45;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v45 = *MEMORY[0x24BDAC8D0];
  *a3 = 0.0;
  __asm { FMOV            V0.4S, #1.0 }
  v42 = _Q0;
  while (1)
  {
    v24 = *(uint64_t (**)(_OWORD *))(a1 + 32 * v15 + 8);
    if (!v24)
      break;
    v25 = v16;
    v26 = &v44[5 * v16];
    bzero(&v26[5 * v18], 0x3C0uLL);
    if (v18 <= 0xB)
    {
      v27 = v18 + 1;
      v28 = (_DWORD *)&v44[5 * v18 + 3 + 5 * v25] + 3;
      do
      {
        *(v28 - 4) = -8388609;
        *v28 = 2139095039;
        v28 += 20;
      }
      while ((_DWORD)v27++ != 12);
    }
    v29 = a2 + 208 * v15;
    *(_OWORD *)v29 = v42;
    *(_DWORD *)(v29 + 172) = 0;
    *(_DWORD *)(v29 + 176) = 0;
    *(_DWORD *)(v29 + 180) = 0;
    v30 = v24(v26);
    if (v30 > v17)
      v17 = v30;
    if (!v30)
      break;
    v38 = a2 + 208 * v15;
    *(_QWORD *)(v38 + 136) = v26;
    *(_DWORD *)(v38 + 144) = v30;
    if (*(_BYTE *)(*(_QWORD *)(v29 + 24) + 62))
      *(_DWORD *)(v29 + 4) = 0;
    if (*(_BYTE *)(*(_QWORD *)(v29 + 32) + 62))
      *(_DWORD *)(v29 + 12) = 0;
    v18 = 12 - v30;
    v16 = v30 + v25;
    if (++v15 == 4)
    {
      *(float *)&v31 = a6;
      *(float *)&v32 = a7;
      *(float *)&v33 = a8;
      v34.f32[0] = a9;
      return physx::Dy::setupSolverConstraintStep4(a2, a3, a4, v17, a5, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  return 1;
}

uint64_t physx::Dy::setupSolverConstraintStep4(uint64_t a1, float *a2, uint64_t (***a3)(_QWORD, _QWORD), int a4, float a5, double a6, double a7, double a8, float32x4_t a9, double a10, double a11, float32x4_t a12)
{
  float v12;
  float v13;
  float v14;
  uint64_t v17;
  float v18;
  uint64_t v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  __int16 *v23;
  uint64_t i;
  int v25;
  __int16 v26;
  uint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t j;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  BOOL v47;
  BOOL v48;
  float32x2x2_t v49;
  int32x4_t v50;
  BOOL v51;
  uint64_t v52;
  int32x4_t v53;
  BOOL v54;
  float *v55;
  float *v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t *v95;
  int32x4_t *v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t *v101;
  int32x4_t *v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t *v107;
  int32x4_t *v108;
  int32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t *v115;
  int32x4_t *v116;
  float32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  float32x2_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v155;
  uint64_t v157;
  uint32x4_t v159;
  uint64_t v160;
  uint16x4_t v161;
  int8x16_t v162;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  _DWORD *v230;
  int v231;
  int v232;
  int v233;
  __int16 v234;
  __int16 v235;
  __int16 v236;
  __int16 v237;
  int32x2_t v238;
  int32x2_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  int v256;
  int v257;
  float32x4_t v258;
  int v259;
  float32x4_t v260;
  int v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  _DWORD *v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v293;
  uint64_t v294;
  float32x4_t v295;
  uint64_t v296;
  float32x4_t v297;
  float32x4_t v299;
  int v301;
  int v302;
  int v303;
  float v304[386];
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  _OWORD v308[24];
  uint64_t v309;

  v12 = a9.f32[0];
  v13 = *(float *)&a8;
  v14 = *(float *)&a7;
  v17 = 0;
  v18 = 0.0;
  v309 = *MEMORY[0x24BDAC8D0];
  v296 = a1 + 796;
  v294 = a1 + 380;
  memset(v308, 0, sizeof(v308));
  do
  {
    v304[v17 + 385] = v18;
    v19 = a1 + 208 * v17;
    v21 = (_DWORD *)(v19 + 144);
    v20 = *(_DWORD *)(v19 + 144);
    v22 = *(_QWORD *)(v19 + 136);
    if (v20)
    {
      v23 = (__int16 *)(v22 + 78);
      for (i = *(unsigned int *)(v19 + 144); i; --i)
      {
        if ((*(v23 - 1) & 0x40) != 0)
        {
          v25 = (unsigned __int16)*v23;
          if (v25 == 2048)
          {
            v26 = 1024;
            goto LABEL_9;
          }
          if (v25 == 2049)
          {
            v26 = 1025;
LABEL_9:
            *v23 = v26;
          }
        }
        v23 += 40;
      }
    }
    physx::Dy::preprocessRows((float **)v308 + LODWORD(v18), v22, (float32x4_t *)&v304[4 * LODWORD(v18) + 193], (float32x4_t *)&v304[4 * LODWORD(v18) + 1], v20, *(_QWORD *)(v19 + 40) + 28, *(_QWORD *)(v19 + 48) + 28, v19, *(float *)(*(_QWORD *)(v19 + 56) + 32), *(float *)(*(_QWORD *)(v19 + 64) + 32), a7, a8, a9, a10, a11, a12, *(_WORD *)(a1 + 208 * v17 + 168), HIBYTE(*(_WORD *)(a1 + 208 * v17 + 168)), 0);
    LODWORD(v18) += *v21;
    ++v17;
  }
  while (v17 != 4);
  v27 = (**a3)(a3, (368 * a4 + 656));
  if ((unint64_t)(v27 + 1) > 1)
  {
    v35 = 0;
    *a2 = v18;
    v275 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 62);
    v274 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 62);
    v273 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 232) + 62);
    v272 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 240) + 62);
    v271 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 440) + 62);
    v270 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 448) + 62);
    v269 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 648) + 62);
    v268 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 656) + 62);
    do
    {
      v36 = *(_QWORD *)(a1 + v35 + 16);
      *(_QWORD *)(v36 + 32) = v27;
      *(_WORD *)(v36 + 30) = (368 * a4 + 640) >> 4;
      *(_QWORD *)(v36 + 40) = *(_QWORD *)(a1 + v35 + 160);
      v35 += 208;
    }
    while (v35 != 832);
    v38.i32[0] = *(_DWORD *)a1;
    v37.i32[0] = *(_DWORD *)(a1 + 4);
    v38.i32[1] = *(_DWORD *)(a1 + 208);
    v38.i32[2] = *(_DWORD *)(a1 + 416);
    v38.i32[3] = *(_DWORD *)(a1 + 624);
    v40.i32[0] = *(_DWORD *)(a1 + 8);
    v39.i32[0] = *(_DWORD *)(a1 + 12);
    v40.i32[1] = *(_DWORD *)(a1 + 216);
    v40.i32[2] = *(_DWORD *)(a1 + 424);
    v40.i32[3] = *(_DWORD *)(a1 + 632);
    v41.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 32);
    v41.i32[1] = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 32);
    v41.i32[2] = *(_DWORD *)(*(_QWORD *)(a1 + 472) + 32);
    v41.i32[3] = *(_DWORD *)(*(_QWORD *)(a1 + 680) + 32);
    v42.i32[0] = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 32);
    v42.i32[1] = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 32);
    v42.i32[2] = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 32);
    v42.i32[3] = *(_DWORD *)(*(_QWORD *)(a1 + 688) + 32);
    v37.i32[1] = *(_DWORD *)(a1 + 212);
    v37.i32[2] = *(_DWORD *)(a1 + 420);
    v37.i32[3] = *(_DWORD *)(a1 + 628);
    v39.i32[1] = *(_DWORD *)(a1 + 220);
    v39.i32[2] = *(_DWORD *)(a1 + 428);
    v39.i32[3] = *(_DWORD *)(a1 + 636);
    v278 = v39;
    v279 = v37;
    v28.i64[0] = *(_QWORD *)(a1 + 172);
    LODWORD(v43) = *(_DWORD *)(a1 + 180);
    v30.i64[0] = *(_QWORD *)v294;
    LODWORD(v44) = *(_DWORD *)(a1 + 388);
    v29.i64[0] = *(_QWORD *)(v294 + 208);
    v31.i64[0] = *(_QWORD *)v296;
    HIDWORD(v43) = *(_DWORD *)(a1 + 596);
    HIDWORD(v44) = *(_DWORD *)(a1 + 804);
    v45.i32[0] = *(_DWORD *)(a1 + 148);
    v46.i32[0] = *(_DWORD *)(a1 + 152);
    v45.i32[1] = *(_DWORD *)(a1 + 356);
    v45.i32[2] = *(_DWORD *)(a1 + 564);
    v45.i32[3] = *(_DWORD *)(a1 + 772);
    v46.i32[1] = *(_DWORD *)(a1 + 360);
    v46.i32[2] = *(_DWORD *)(a1 + 568);
    v47 = v46.f32[0] != 3.4028e38 || v45.f32[0] != 3.4028e38;
    v46.i32[3] = *(_DWORD *)(a1 + 776);
    *(_BYTE *)(v27 + 12) = v47;
    v48 = *(float *)(a1 + 356) != 3.4028e38 || *(float *)(a1 + 360) != 3.4028e38;
    v49 = (float32x2x2_t)vzip1q_s32(v28, v29);
    v50 = vzip1q_s32(v30, v31);
    *(_BYTE *)(v27 + 13) = v48;
    v51 = *(float *)(a1 + 564) != 3.4028e38 || *(float *)(a1 + 568) != 3.4028e38;
    v52 = v27 + 640;
    v277 = vmulq_f32(v38, v41);
    v276 = vmulq_f32(v40, v42);
    v53 = vzip2q_s32((int32x4_t)v49, v50);
    *(_BYTE *)(v27 + 14) = v51;
    v54 = *(float *)(a1 + 772) != 3.4028e38 || *(float *)(a1 + 776) != 3.4028e38;
    *(_BYTE *)(v27 + 15) = v54;
    *(float32x4_t *)(v27 + 48) = v277;
    *(float32x4_t *)(v27 + 64) = v276;
    *(float32x4_t *)(v27 + 80) = v279;
    *(float32x4_t *)(v27 + 96) = v278;
    v55 = (float *)(v27 + 112);
    vst2_f32(v55, v49);
    *(int32x4_t *)(v27 + 128) = v53;
    v56 = (float *)(v27 + 144);
    vst2_f32(v56, *(float32x2x2_t *)&v43);
    *(_DWORD *)(v27 + 4) = a4;
    *(_BYTE *)v27 = 9;
    *(float32x4_t *)(v27 + 16) = vmulq_n_f32(v45, *(float *)&a6);
    *(float32x4_t *)(v27 + 32) = vmulq_n_f32(v46, *(float *)&a6);
    *(_BYTE *)(v27 + 8) = *(_DWORD *)(a1 + 144);
    *(_BYTE *)(v27 + 9) = *(_DWORD *)(a1 + 352);
    *(_BYTE *)(v27 + 10) = *(_DWORD *)(a1 + 560);
    *(_BYTE *)(v27 + 11) = *(_DWORD *)(a1 + 768);
    v57 = *(int32x4_t *)(a1 + 184);
    v58 = *(int32x4_t *)(v294 + 12);
    v59 = *(int32x4_t *)(v294 + 220);
    v60 = *(int32x4_t *)(v296 + 12);
    v61 = *(int32x4_t *)(a1 + 196);
    v62 = *(int32x4_t *)(v294 + 24);
    v63 = *(int32x4_t *)(v294 + 232);
    v64 = *(int32x4_t *)(v296 + 24);
    v65 = vzip1q_s32(v57, v59);
    v66 = vzip2q_s32(v57, v59);
    v67 = vzip1q_s32(v58, v60);
    v68 = (float32x4_t)vzip1q_s32(v65, v67);
    v69 = (float32x4_t)vzip2q_s32(v65, v67);
    v70 = (float32x4_t)vzip1q_s32(v66, vzip2q_s32(v58, v60));
    v71 = vzip1q_s32(v61, v63);
    v72 = vzip1q_s32(v62, v64);
    v73 = (float32x4_t)vzip1q_s32(v71, v72);
    v74 = (float32x4_t)vzip2q_s32(v71, v72);
    v75 = (float32x4_t)vzip1q_s32(vzip2q_s32(v61, v63), vzip2q_s32(v62, v64));
    v76 = *(int32x4_t *)(*(_QWORD *)(a1 + 40) + 16);
    v77 = *(int32x4_t *)(*(_QWORD *)(a1 + 48) + 16);
    v78 = *(int32x4_t *)(*(_QWORD *)(a1 + 248) + 16);
    v79 = *(int32x4_t *)(*(_QWORD *)(a1 + 256) + 16);
    v80 = *(int32x4_t *)(*(_QWORD *)(a1 + 456) + 16);
    v81 = *(int32x4_t *)(*(_QWORD *)(a1 + 464) + 16);
    v82 = *(int32x4_t *)(*(_QWORD *)(a1 + 664) + 16);
    v83 = *(int32x4_t *)(*(_QWORD *)(a1 + 672) + 16);
    v84 = vzip1q_s32(v76, v80);
    v85 = vzip2q_s32(v76, v80);
    v86 = vzip1q_s32(v78, v82);
    v87 = (float32x4_t)vzip1q_s32(v84, v86);
    v88 = (float32x4_t)vzip2q_s32(v84, v86);
    v89 = (float32x4_t)vzip1q_s32(v85, vzip2q_s32(v78, v82));
    v90 = vzip1q_s32(v77, v81);
    v91 = vzip1q_s32(v79, v83);
    v92 = (float32x4_t)vzip1q_s32(v90, v91);
    v93 = (float32x4_t)vzip2q_s32(v90, v91);
    v94 = (float32x4_t)vzip1q_s32(vzip2q_s32(v77, v81), vzip2q_s32(v79, v83));
    v95 = *(int32x4_t **)(a1 + 56);
    v96 = *(int32x4_t **)(a1 + 64);
    v98 = *v95;
    v97 = v95[1];
    v100 = *v96;
    v99 = v96[1];
    v101 = *(int32x4_t **)(a1 + 264);
    v102 = *(int32x4_t **)(a1 + 272);
    v104 = *v101;
    v103 = v101[1];
    v106 = *v102;
    v105 = v102[1];
    v107 = *(int32x4_t **)(a1 + 472);
    v108 = *(int32x4_t **)(a1 + 480);
    v110 = *v107;
    v109 = v107[1];
    v111 = vsubq_f32(v68, v87);
    v112 = vsubq_f32(v69, v88);
    v114 = *v108;
    v113 = v108[1];
    v115 = *(int32x4_t **)(a1 + 680);
    v116 = *(int32x4_t **)(a1 + 688);
    v117 = vsubq_f32(v70, v89);
    v118 = vsubq_f32(v73, v92);
    v120 = *v115;
    v119 = v115[1];
    v122 = *v116;
    v121 = v116[1];
    *(float32x4_t *)(v27 + 160) = v111;
    *(float32x4_t *)(v27 + 176) = v112;
    *(float32x4_t *)(v27 + 192) = v117;
    *(float32x4_t *)(v27 + 208) = v118;
    *(float32x4_t *)(v27 + 224) = vsubq_f32(v74, v93);
    *(float32x4_t *)(v27 + 240) = vsubq_f32(v75, v94);
    v123 = *(_DWORD *)(a1 + 144);
    v124 = *(_DWORD *)(a1 + 352);
    v125 = *(_DWORD *)(a1 + 560);
    v126 = *(_DWORD *)(a1 + 768);
    *(_OWORD *)(v27 + 256) = 0u;
    *(_OWORD *)(v27 + 272) = 0u;
    *(_OWORD *)(v27 + 288) = 0u;
    *(_OWORD *)(v27 + 304) = 0u;
    *(_OWORD *)(v27 + 320) = 0u;
    *(_OWORD *)(v27 + 336) = 0u;
    *(_OWORD *)(v27 + 352) = 0u;
    *(_OWORD *)(v27 + 368) = 0u;
    *(_OWORD *)(v27 + 384) = 0u;
    *(_OWORD *)(v27 + 400) = 0u;
    *(_OWORD *)(v27 + 416) = 0u;
    *(_OWORD *)(v27 + 432) = 0u;
    *(_OWORD *)(v27 + 448) = 0u;
    *(_OWORD *)(v27 + 464) = 0u;
    *(_OWORD *)(v27 + 480) = 0u;
    *(_OWORD *)(v27 + 496) = 0u;
    *(_OWORD *)(v27 + 512) = 0u;
    *(_OWORD *)(v27 + 528) = 0u;
    *(_OWORD *)(v27 + 544) = 0u;
    *(_OWORD *)(v27 + 560) = 0u;
    *(_OWORD *)(v27 + 576) = 0u;
    *(_OWORD *)(v27 + 592) = 0u;
    *(_OWORD *)(v27 + 608) = 0u;
    *(_OWORD *)(v27 + 624) = 0u;
    v127 = v305;
    v128 = v306;
    v129 = v307;
    if (!a4)
    {
LABEL_108:
      *(_QWORD *)v52 = 0;
      return 2;
    }
    v130 = 0;
    v131 = 0;
    v242 = 0;
    v243 = 0;
    v132 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
    v133 = vzip1q_s32(v98, v110);
    v134 = vzip1q_s32(v104, v120);
    v135 = vzip2q_s32(v104, v120);
    v136 = vzip1q_s32(v100, v114);
    v137 = vzip1q_s32(v106, v122);
    v138 = vzip2q_s32(v106, v122);
    v266 = (float32x4_t)vzip2q_s32(v136, v137);
    v267 = (float32x4_t)vzip2q_s32(v133, v134);
    v139 = vzip1q_s32(v97, v109);
    v140 = vzip1q_s32(v103, v119);
    v141 = vzip2q_s32(v103, v119);
    v142 = vzip1q_s32(v99, v113);
    v143 = vzip1q_s32(v105, v121);
    v250 = v27 + 304;
    v251 = v27 + 256;
    v264 = (float32x4_t)vzip2q_s32(v142, v143);
    v265 = (float32x4_t)vzip2q_s32(v139, v140);
    v248 = v27 + 400;
    v249 = v27 + 352;
    v246 = v27 + 496;
    v247 = v27 + 448;
    v244 = v27 + 592;
    v245 = v27 + 544;
    v262 = (float32x4_t)vzip1q_s32(vzip2q_s32(v98, v110), v135);
    v263 = (float32x4_t)vzip1q_s32(v133, v134);
    v261 = v123 - 1;
    v260 = (float32x4_t)vzip1q_s32(v136, v137);
    v259 = v305 + v124 - 1;
    v258 = (float32x4_t)vzip1q_s32(vzip2q_s32(v100, v114), v138);
    v256 = v307 + v126 - 1;
    v257 = v306 + v125 - 1;
    v255 = (float32x4_t)vzip1q_s32(v139, v140);
    v254 = (float32x4_t)vzip1q_s32(vzip2q_s32(v97, v109), v141);
    v252 = (float32x4_t)vzip1q_s32(vzip2q_s32(v99, v113), vzip2q_s32(v105, v121));
    v253 = (float32x4_t)vzip1q_s32(v142, v143);
    while (1)
    {
      v144 = *((_QWORD *)v308 + v130);
      if (v130 == v261)
        v145 = v130;
      else
        v145 = v130 + 1;
      if (v127 == v259)
        v146 = v127;
      else
        v146 = v127 + 1;
      if (v128 == v257)
        v147 = v128;
      else
        v147 = v128 + 1;
      if (v129 == v256)
        v148 = v129;
      else
        v148 = v129 + 1;
      __asm { FMOV            V0.4S, #1.0 }
      if ((*(_WORD *)(v144 + 76) & 0x20) != 0 && *(_BYTE *)(a1 + 170))
      {
        __asm { FMOV            V0.2S, #1.0 }
        _Q0 = (float32x4_t)vorrq_s8((int8x16_t)vmin_f32(v132, _D0).u32[0], (int8x16_t)xmmword_2260F8390);
      }
      v155 = *((_QWORD *)v308 + v127);
      if ((*(_WORD *)(v155 + 76) & 0x20) != 0 && *(_BYTE *)(a1 + 378))
      {
        __asm { FMOV            V1.2S, #1.0 }
        _Q0.i32[1] = vmin_f32(v132, _D1).i32[1];
      }
      v157 = *((_QWORD *)v308 + v128);
      if ((*(_WORD *)(v157 + 76) & 0x20) != 0 && *(_BYTE *)(a1 + 586))
      {
        __asm { FMOV            V1.2S, #1.0 }
        _Q0.i32[2] = vmin_f32(v132, _D1).u32[0];
      }
      v160 = *((_QWORD *)v308 + v129);
      v161.i16[0] = *(_WORD *)(v144 + 76);
      v161.i16[1] = *(_WORD *)(v155 + 76);
      v161.i16[2] = *(_WORD *)(v157 + 76);
      v161.i16[3] = *(_WORD *)(v160 + 76);
      v162 = (int8x16_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vshr_n_u16(v161, 6uLL), (int8x8_t)0x1000100010001)));
      v285 = v145;
      v284 = v147;
      v283 = v146;
      v282 = v148;
      if ((v161.i8[6] & 0x20) != 0 && *(_BYTE *)(a1 + 794))
      {
        __asm { FMOV            V1.2S, #1.0 }
        _Q0.i32[3] = vmin_f32(v132, _D1).i32[1];
      }
      v164 = *(int32x4_t *)&v304[4 * v130 + 193];
      v165 = *(int32x4_t *)&v304[4 * v127 + 193];
      v166 = *(int32x4_t *)&v304[4 * v128 + 193];
      v167 = *(int32x4_t *)&v304[4 * v129 + 193];
      v168 = *(int32x4_t *)&v304[4 * v130 + 1];
      v169 = *(int32x4_t *)&v304[4 * v127 + 1];
      v170 = *(int32x4_t *)&v304[4 * v128 + 1];
      v171 = *(int32x4_t *)(v144 + 16);
      v172 = *(int32x4_t *)(v157 + 16);
      v173 = vzip1q_s32(*(int32x4_t *)v144, *(int32x4_t *)v157);
      v174 = *(int32x4_t *)(v155 + 16);
      v175 = *(int32x4_t *)(v160 + 16);
      v176 = vzip1q_s32(*(int32x4_t *)v155, *(int32x4_t *)v160);
      v177 = (float32x4_t)vzip1q_s32(v173, v176);
      v178 = (float32x4_t)vzip2q_s32(v173, v176);
      v179 = (float32x4_t)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v144, *(int32x4_t *)v157), vzip2q_s32(*(int32x4_t *)v155, *(int32x4_t *)v160));
      v180 = vzip1q_s32(v171, v172);
      v181 = vzip2q_s32(v171, v172);
      v182 = vzip1q_s32(v174, v175);
      v183 = (float32x4_t)vzip1q_s32(v180, v182);
      v184 = (float32x4_t)vzip2q_s32(v180, v182);
      v185 = (float32x4_t)vzip1q_s32(v181, vzip2q_s32(v174, v175));
      v186 = *(float32x4_t *)(v144 + 48);
      v187 = *(float32x4_t *)(v155 + 48);
      v188 = *(int32x4_t *)(v157 + 48);
      v189 = *(int32x4_t *)(v160 + 48);
      v190 = vzip1q_s32((int32x4_t)v186, v188);
      v191 = vzip1q_s32((int32x4_t)v187, v189);
      v192 = (int8x16_t)vzip1q_s32(v190, v191);
      v193 = (int8x16_t)vzip2q_s32(v190, v191);
      v194 = (int8x16_t)vzip1q_s32(vzip2q_s32((int32x4_t)v186, v188), vzip2q_s32((int32x4_t)v187, v189));
      v195 = *(int32x4_t *)&v304[4 * v129 + 1];
      v186.i64[0] = vuzp2q_s32(vuzp2q_s32((int32x4_t)v186, (int32x4_t)v187), (int32x4_t)v186).u64[0];
      v186.i64[1] = __PAIR64__(v189.u32[3], v188.u32[3]);
      v187.i32[0] = *(_DWORD *)(v144 + 44);
      v187.i32[1] = *(_DWORD *)(v155 + 44);
      v187.i32[2] = *(_DWORD *)(v157 + 44);
      v187.i32[3] = *(_DWORD *)(v160 + 44);
      v196 = vzip1q_s32(v164, v166);
      v197 = vzip2q_s32(v164, v166);
      v198 = vzip1q_s32(v165, v167);
      v199 = vzip2q_s32(v165, v167);
      v200 = (float32x4_t)vzip1q_s32(v196, v198);
      v201 = (float32x4_t)vzip2q_s32(v196, v198);
      v202 = (float32x4_t)vzip1q_s32(v197, v199);
      v159.i32[3] = *(_DWORD *)(a1 + 768);
      v159.i32[2] = *(_DWORD *)(a1 + 560);
      v159.i32[1] = *(_DWORD *)(a1 + 352);
      v159.i32[0] = *(_DWORD *)(a1 + 144);
      v203 = (int8x16_t)vcgtq_u32(v159, (uint32x4_t)vdupq_n_s32(v131));
      *(_QWORD *)(v52 + 352) = 0;
      *(_QWORD *)(v52 + 360) = 0;
      *(int8x16_t *)v52 = vandq_s8((int8x16_t)v177, v203);
      *(int8x16_t *)(v52 + 16) = vandq_s8((int8x16_t)v178, v203);
      *(int8x16_t *)(v52 + 32) = vandq_s8((int8x16_t)v179, v203);
      v204 = vandq_s8(v162, v203);
      *(int8x16_t *)(v52 + 128) = vandq_s8(v204, (int8x16_t)v183);
      *(int8x16_t *)(v52 + 144) = vandq_s8(v204, (int8x16_t)v184);
      *(int8x16_t *)(v52 + 160) = vandq_s8(v204, (int8x16_t)v185);
      __asm { FMOV            V28.4S, #1.0 }
      *(int8x16_t *)(v52 + 336) = vandq_s8(v162, _Q28);
      *(float32x4_t *)(v52 + 272) = vmulq_f32(_Q0, v187);
      *(float32x4_t *)(v52 + 288) = vmulq_f32(_Q0, v186);
      *(_QWORD *)(v52 + 304) = 0;
      *(_QWORD *)(v52 + 312) = 0;
      v206 = *(int32x4_t *)(v144 + 32);
      v207 = *(int32x4_t *)(v155 + 32);
      v208 = *(int32x4_t *)(v157 + 32);
      v209 = *(int32x4_t *)(v160 + 32);
      v210 = vzip1q_s32(v206, v208);
      v211 = vzip2q_s32(v206, v208);
      v212 = vzip1q_s32(v207, v209);
      v213 = vzip2q_s32(v207, v209);
      v214 = (float32x4_t)vzip1q_s32(v210, v212);
      v215 = (float32x4_t)vzip2q_s32(v210, v212);
      v216 = (float32x4_t)vzip1q_s32(v211, v213);
      v217 = vzip1q_s32(v168, v170);
      v218 = vzip2q_s32(v168, v170);
      v219 = vzip1q_s32(v169, v195);
      v220 = vzip2q_s32(v169, v195);
      v221 = (float32x4_t)vzip1q_s32(v217, v219);
      v222 = (float32x4_t)vzip2q_s32(v217, v219);
      v223 = (float32x4_t)vzip1q_s32(v218, v220);
      *(int8x16_t *)(v52 + 64) = vandq_s8((int8x16_t)v214, v203);
      *(int8x16_t *)(v52 + 80) = vandq_s8((int8x16_t)v215, v203);
      *(int8x16_t *)(v52 + 96) = vandq_s8((int8x16_t)v216, v203);
      *(int8x16_t *)(v52 + 192) = vandq_s8(v204, v192);
      *(int8x16_t *)(v52 + 208) = vandq_s8(v204, v193);
      *(int8x16_t *)(v52 + 224) = vandq_s8(v204, v194);
      v295 = vaddq_f32(vmlaq_f32(vmulq_f32(v279, vmlaq_f32(vmlaq_f32(vmulq_f32(v200, v200), v201, v201), v202, v202)), v277, vmlaq_f32(vmlaq_f32(vmulq_f32(v177, v177), v178, v178), v179, v179)), vmlaq_f32(vmulq_f32(v278, vmlaq_f32(vmlaq_f32(vmulq_f32(v221, v221), v222, v222), v223, v223)), v276, vmlaq_f32(vmlaq_f32(vmulq_f32(v214, v214), v215, v215), v216, v216)));
      v281 = (_DWORD *)(v52 + 352);
      v297 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v262, v179), v267, v178), v263, v177), vmlaq_f32(vmlaq_f32(vmulq_f32(v254, v185), v265, v184), v255, v183));
      v299 = vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v252, v223), v264, v222), v253, v221), vmlaq_f32(vmlaq_f32(vmulq_f32(v258, v216), v266, v215), v260, v214));
      v286 = vmulq_f32(v279, v200);
      v287 = vmulq_f32(v279, v201);
      v288 = vmulq_f32(v279, v202);
      v289 = vmulq_f32(v278, v221);
      v290 = vmulq_f32(v278, v222);
      v291 = vmulq_f32(v278, v223);
      v293 = vsubq_f32(v297, v299);
      v238 = vzip1_s32(*(int32x2_t *)v297.f32, *(int32x2_t *)v299.f32);
        v275 != 0,
        v274 != 0);
      v239 = vzip2_s32(*(int32x2_t *)v297.f32, *(int32x2_t *)v299.f32);
        v273 != 0,
        v272 != 0);
      v240 = vzip2q_s32((int32x4_t)v297, (int32x4_t)v299).u64[0];
        v271 != 0,
        v270 != 0);
      v241 = vuzp2q_s32(vuzp2q_s32((int32x4_t)v297, (int32x4_t)v299), (int32x4_t)v297).u64[0];
        v269 != 0,
        v268 != 0);
      v224 = *(unsigned __int16 *)(v144 + 78);
      if (*(_BYTE *)(a1 + 168) || v131 >= *(_DWORD *)(a1 + 144))
      {
        v225 = a4;
        v226 = v285;
        v227 = v284;
        v228 = v283;
        v229 = v282;
        v230 = (_DWORD *)(v52 + 352);
      }
      else
      {
        v225 = a4;
        v226 = v285;
        v227 = v284;
        v228 = v283;
        v229 = v282;
        v230 = (_DWORD *)(v52 + 352);
        if (v224 == 1024)
        {
          *v281 |= 8u;
          *(_DWORD *)(v251 + 16 * HIDWORD(v243)) = v286.i32[0];
          *(_DWORD *)(v250 + 16 * HIDWORD(v243)) = v287.i32[0];
          *(_DWORD *)(v249 + 16 * HIDWORD(v243)) = v288.i32[0];
          *(_DWORD *)(v248 + 16 * HIDWORD(v243)) = v289.i32[0];
          *(_DWORD *)(v247 + 16 * HIDWORD(v243)) = v290.i32[0];
          *(_DWORD *)(v246 + 16 * HIDWORD(v243)) = v291.i32[0];
          *(_DWORD *)(v245 + 16 * HIDWORD(v243)) = v301;
          *(_DWORD *)(v244 + 16 * HIDWORD(v243)) = *(_DWORD *)(v52 + 48);
          ++HIDWORD(v243);
        }
        else if ((v224 & 0x800) != 0)
        {
          *v281 |= 0x10u;
        }
      }
      v231 = *(unsigned __int16 *)(v155 + 78);
      if (!*(_BYTE *)(a1 + 376) && v131 < *(_DWORD *)(a1 + 352))
      {
        if (v231 == 1024)
        {
          *(_DWORD *)(v52 + 356) |= 8u;
          *(_DWORD *)(v251 + 16 * v243 + 4) = v286.i32[1];
          *(_DWORD *)(v250 + 16 * v243 + 4) = v287.i32[1];
          *(_DWORD *)(v249 + 16 * v243 + 4) = v288.i32[1];
          *(_DWORD *)(v248 + 16 * v243 + 4) = v289.i32[1];
          *(_DWORD *)(v247 + 16 * v243 + 4) = v290.i32[1];
          *(_DWORD *)(v246 + 16 * v243 + 4) = v291.i32[1];
          *(_DWORD *)(v245 + 16 * v243 + 4) = v302;
          *(_DWORD *)(v244 + 16 * v243 + 4) = *(_DWORD *)(v52 + 52);
          LODWORD(v243) = v243 + 1;
        }
        else if ((v231 & 0x800) != 0)
        {
          *(_DWORD *)(v52 + 356) |= 0x10u;
        }
      }
      v232 = *(unsigned __int16 *)(v157 + 78);
      if (!*(_BYTE *)(a1 + 584) && v131 < *(_DWORD *)(a1 + 560))
      {
        if (v232 == 1024)
        {
          *(_DWORD *)(v52 + 360) |= 8u;
          *(_DWORD *)(v251 + 16 * HIDWORD(v242) + 8) = v286.i32[2];
          *(_DWORD *)(v250 + 16 * HIDWORD(v242) + 8) = v287.i32[2];
          *(_DWORD *)(v249 + 16 * HIDWORD(v242) + 8) = v288.i32[2];
          *(_DWORD *)(v248 + 16 * HIDWORD(v242) + 8) = v289.i32[2];
          *(_DWORD *)(v247 + 16 * HIDWORD(v242) + 8) = v290.i32[2];
          *(_DWORD *)(v246 + 16 * HIDWORD(v242) + 8) = v291.i32[2];
          *(_DWORD *)(v245 + 16 * HIDWORD(v242) + 8) = v303;
          *(_DWORD *)(v244 + 16 * HIDWORD(v242) + 8) = *(_DWORD *)(v52 + 56);
          ++HIDWORD(v242);
        }
        else if ((v232 & 0x800) != 0)
        {
          *(_DWORD *)(v52 + 360) |= 0x10u;
        }
      }
      v233 = *(unsigned __int16 *)(v160 + 78);
      if (!*(_BYTE *)(a1 + 792) && v131 < *(_DWORD *)(a1 + 768))
      {
        if (v233 == 1024)
        {
          *(_DWORD *)(v52 + 364) |= 8u;
          *(_DWORD *)(v251 + 16 * v242 + 12) = v286.i32[3];
          *(_DWORD *)(v250 + 16 * v242 + 12) = v287.i32[3];
          *(_DWORD *)(v249 + 16 * v242 + 12) = v288.i32[3];
          *(_DWORD *)(v248 + 16 * v242 + 12) = v289.i32[3];
          *(_DWORD *)(v247 + 16 * v242 + 12) = v290.i32[3];
          *(_DWORD *)(v246 + 16 * v242 + 12) = v291.i32[3];
          *(float *)(v245 + 16 * v242 + 12) = v304[0];
          *(_DWORD *)(v244 + 16 * v242 + 12) = *(_DWORD *)(v52 + 60);
          LODWORD(v242) = v242 + 1;
        }
        else if ((v233 & 0x800) != 0)
        {
          *(_DWORD *)(v52 + 364) |= 0x10u;
        }
      }
      v234 = *(_WORD *)(v144 + 76);
      if ((v234 & 0x10) != 0)
        *v230 |= 2u;
      v235 = *(_WORD *)(v155 + 76);
      if ((v235 & 0x10) != 0)
        *(_DWORD *)(v52 + 356) |= 2u;
      v236 = *(_WORD *)(v157 + 76);
      if ((v236 & 0x10) != 0)
        *(_DWORD *)(v52 + 360) |= 2u;
      v237 = *(_WORD *)(v160 + 76);
      if ((v237 & 0x10) != 0)
      {
        *(_DWORD *)(v52 + 364) |= 2u;
        if ((v234 & 8) == 0)
        {
LABEL_89:
          if ((v235 & 8) == 0)
            goto LABEL_90;
          goto LABEL_101;
        }
      }
      else if ((v234 & 8) == 0)
      {
        goto LABEL_89;
      }
      *v230 |= 4u;
      if ((v235 & 8) == 0)
      {
LABEL_90:
        if ((v236 & 8) == 0)
          goto LABEL_91;
        goto LABEL_102;
      }
LABEL_101:
      *(_DWORD *)(v52 + 356) |= 4u;
      if ((v236 & 8) == 0)
      {
LABEL_91:
        if ((v237 & 8) == 0)
          goto LABEL_92;
        goto LABEL_103;
      }
LABEL_102:
      *(_DWORD *)(v52 + 360) |= 4u;
      if ((v237 & 8) == 0)
      {
LABEL_92:
        if ((v224 & 1) == 0)
          goto LABEL_93;
        goto LABEL_104;
      }
LABEL_103:
      *(_DWORD *)(v52 + 364) |= 4u;
      if ((v224 & 1) == 0)
      {
LABEL_93:
        if ((v231 & 1) == 0)
          goto LABEL_94;
        goto LABEL_105;
      }
LABEL_104:
      *v230 |= 0x40u;
      if ((v231 & 1) == 0)
      {
LABEL_94:
        if ((v232 & 1) != 0)
          goto LABEL_106;
        goto LABEL_95;
      }
LABEL_105:
      *(_DWORD *)(v52 + 356) |= 0x40u;
      if ((v232 & 1) != 0)
      {
LABEL_106:
        *(_DWORD *)(v52 + 360) |= 0x40u;
        if ((v233 & 1) == 0)
          goto LABEL_97;
LABEL_96:
        *(_DWORD *)(v52 + 364) |= 0x40u;
        goto LABEL_97;
      }
LABEL_95:
      if ((v233 & 1) != 0)
        goto LABEL_96;
LABEL_97:
      v52 += 368;
      ++v131;
      v130 = v226;
      v127 = v228;
      v129 = v229;
      v128 = v227;
      if (v225 == v131)
        goto LABEL_108;
    }
  }
  for (j = 0; j != 832; j += 208)
  {
    v33 = *(_QWORD *)(a1 + j + 16);
    *(_QWORD *)(v33 + 32) = 0;
    *(_WORD *)(v33 + 30) = 0;
    *(_QWORD *)(v33 + 40) = *(_QWORD *)(a1 + j + 160);
  }
  return 0;
}

float *physx::Dy::`anonymous namespace'::setConstants(float *result, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, uint64_t a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, char a17, float a18, float a19, char a20,char a21)
{
  float v22;
  float v23;

  if (a17)
  {
    *result = 0.0;
    *a2 = 0.0;
    *a4 = 0.0;
    *a5 = 0.0;
    *a6 = 0.0;
    v22 = 0.0;
    *a7 = 0.0;
LABEL_10:
    *a3 = v22;
    return result;
  }
  if ((*(_WORD *)(a8 + 76) & 0x40) != 0)
    v23 = 100.0;
  else
    v23 = a15 * 1000.0;
  result = physx::Dy::setSolverConstantsStep(result, a2, a3, a4, a5, a6, a7, a8, a16, a9, a10, 1.0, a11, a12, v23, a13, a14);
  if (a20)
    *a3 = *a3 - a18;
  if (a21)
  {
    v22 = *a3 + a19;
    goto LABEL_10;
  }
  return result;
}

int32x4_t **physx::Dy::solveContact4_Block(int32x4_t **result, int32x2_t a2, float a3)
{
  int32x4_t *v3;
  float *v4;
  int32x4_t *v5;
  int32x4_t *v6;
  int32x4_t *v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t v11;
  int32x4_t *v12;
  float *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float *i32;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  unint64_t v60;
  uint64_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  unint64_t v85;
  unint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  int32x4_t *v95;
  uint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  float32x4_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  uint64_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t v139;
  float32x4_t *v140;
  int8x16_t v141;
  float32x4_t *v142;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x2x2_t v168;
  float32x2x2_t v169;
  int32x4_t v170;
  int32x4_t v171;
  float32x2x2_t v172;
  int32x4_t v173;
  float32x2x2_t v174;
  float32x2x2_t v175;
  int32x4_t v176;
  int32x4_t v177;
  float32x2x2_t v178;
  int32x4_t v179;
  float32x2x2_t v180;
  int32x4_t v181;
  float32x2x2_t v182;
  int32x4_t v183;
  float *v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v207;
  float32x4_t v208;
  int32x4_t v209;

  v4 = (float *)*result;
  v3 = result[1];
  v6 = result[6];
  v5 = result[7];
  v8 = result[12];
  v7 = result[13];
  v10 = result[18];
  v9 = result[19];
  v11 = **result;
  v12 = *result + 1;
  v14 = v3[1];
  v15 = v6[1];
  v16 = v5[1];
  v18 = v8[1];
  v19 = v7[1];
  v20 = v10[1];
  v21 = v9[1];
  v22 = vzip1q_s32(v11, *v8);
  v23 = vzip1q_s32(*v6, *v10);
  v24 = (float32x4_t)vzip1q_s32(v22, v23);
  v25 = (float32x4_t)vzip2q_s32(v22, v23);
  v26 = (float32x4_t)vzip1q_s32(vzip2q_s32(v11, *v8), vzip2q_s32(*v6, *v10));
  v27 = vzip1q_s32(*v3, *v7);
  v28 = vzip1q_s32(*v5, *v9);
  v29 = (float32x4_t)vzip1q_s32(v27, v28);
  v30 = (float32x4_t)vzip2q_s32(v27, v28);
  v31 = (float32x4_t)vzip1q_s32(vzip2q_s32(*v3, *v7), vzip2q_s32(*v5, *v9));
  v32 = vzip1q_s32(*v12, v18);
  v33 = vzip2q_s32(*v12, v18);
  v34 = vzip1q_s32(v15, v20);
  v35 = (float32x4_t)vzip1q_s32(v32, v34);
  v36 = (float32x4_t)vzip2q_s32(v32, v34);
  v37 = (float32x4_t)vzip1q_s32(v33, vzip2q_s32(v15, v20));
  v38 = vzip1q_s32(v14, v19);
  v39 = vzip2q_s32(v14, v19);
  v40 = vzip1q_s32(v16, v21);
  v41 = (float32x4_t)vzip1q_s32(v38, v40);
  v42 = (float32x4_t)vzip2q_s32(v38, v40);
  v43 = (float32x4_t)vzip1q_s32(v39, vzip2q_s32(v16, v21));
  v44 = (*result)[2];
  v45 = (*result)[3];
  v46 = v3[2];
  v47 = v3[3];
  v49 = v6[2];
  v48 = v6[3];
  v50 = v5[2];
  v51 = v5[3];
  v53 = v8[2];
  v52 = v8[3];
  v55 = v7[2];
  v54 = v7[3];
  v57 = v10[2];
  v56 = v10[3];
  v59 = v9[2];
  v58 = v9[3];
  v60 = (unint64_t)result[4];
  v61 = *((unsigned __int16 *)result + 15);
  v209 = vdupq_n_s32(0x7F7FFFFFu);
  if (v61)
  {
    v191 = (float32x4_t)vdupq_lane_s32(a2, 0);
    v62 = vzip1q_s32(v45, v52);
    v63 = vzip2q_s32(v45, v52);
    v64 = vzip1q_s32(v48, v56);
    v65 = vzip2q_s32(v48, v56);
    v66 = (float32x4_t)vzip1q_s32(v62, v64);
    v67 = (float32x4_t)vzip2q_s32(v62, v64);
    v68 = (float32x4_t)vzip1q_s32(v63, v65);
    v69 = vzip1q_s32(v47, v54);
    v70 = vzip2q_s32(v47, v54);
    v71 = vzip1q_s32(v51, v58);
    v72 = (float32x4_t)vzip1q_s32(v70, vzip2q_s32(v51, v58));
    v73 = vzip1q_s32(v44, v53);
    v74 = vzip2q_s32(v44, v53);
    v75 = vzip1q_s32(v49, v57);
    v76 = vzip2q_s32(v49, v57);
    v205 = (float32x4_t)vzip1q_s32(v73, v75);
    v77 = vzip2q_s32(v73, v75);
    v78 = (float32x4_t)vzip1q_s32(v74, v76);
    v79 = vzip1q_s32(v46, v55);
    v80 = vzip2q_s32(v46, v55);
    v81 = vzip1q_s32(v50, v59);
    v82 = (float32x4_t)vzip1q_s32(v79, v81);
    v83 = (float32x4_t)vzip2q_s32(v79, v81);
    v84 = (float32x4_t)vzip1q_s32(v80, vzip2q_s32(v50, v59));
    v85 = v60 + 16 * v61;
    v186 = *(float32x4_t *)(v60 + 80);
    v187 = *(float32x4_t *)(v60 + 64);
    v190 = vaddq_f32(v187, v186);
    v86 = v60 + 432;
    v87 = vsubq_f32(v66, (float32x4_t)vzip1q_s32(v69, v71));
    v88 = vsubq_f32(v67, (float32x4_t)vzip2q_s32(v69, v71));
    v89 = vsubq_f32(v68, v72);
    v90 = a3;
    v203 = v88;
    v204 = v87;
    v185 = v89;
    v201 = v84;
    v202 = (float32x4_t)v77;
    v199 = v83;
    v200 = v82;
    v198 = v78;
    do
    {
      v91 = v60 + 272;
      v92 = *(unsigned __int8 *)(v60 + 1);
      v93 = *(unsigned __int8 *)(v60 + 2);
      v94 = *(_BYTE *)(v60 + 3);
      if ((v94 & 1) != 0)
        v95 = (int32x4_t *)(v60 + 272 + 16 * *(unsigned __int8 *)(v60 + 1) + 160 * *(unsigned __int8 *)(v60 + 1));
      else
        v95 = &v209;
      if ((*(_BYTE *)(v60 + 3) & 1) != 0)
        v96 = 16 * v92;
      else
        v96 = 0;
      v97 = *(float32x4_t *)(v60 + 128);
      v207 = *(float32x4_t *)(v60 + 112);
      v208 = *(float32x4_t *)(v60 + 96);
      v99 = *(float32x4_t *)(v60 + 144);
      v98 = *(float32x4_t *)(v60 + 160);
      v192 = v98;
      v188 = v97;
      v189 = v99;
      if (*(_BYTE *)(v60 + 1))
      {
        v100 = 0;
        v196 = vmlaq_f32(vmlaq_f32(vmulq_f32(v87, v97), v99, v88), v98, v89);
        v101 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v97), v99, v25), v98, v26), vmlaq_f32(vmlaq_f32(vmulq_f32(v29, v97), v99, v30), v98, v31));
        v194 = vnegq_f32(*(float32x4_t *)(v60 + 176));
        v102 = (float32x4_t *)(v60 + 16 * v92 + 416);
        v103 = 0uLL;
        _X21 = v86;
        v105 = 0uLL;
        v106 = (float32x4_t)v77;
        do
        {
          __asm
          {
            PRFM            #0, [X21,#0x40]
            PRFM            #0, [X21,#0x80]
            PRFM            #0, [X21,#0xC0]
          }
          v114 = v102[-9];
          v115 = v102[-8];
          v117 = v102[-7];
          v116 = v102[-6];
          v118 = v102[-5];
          v119 = v102[-4];
          v120 = v82;
          v121 = v102[-1];
          v122 = vaddq_f32(v196, vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v205, v114), v115, v106), v117, v78), vmlaq_f32(vmlaq_f32(vmulq_f32(v82, v116), v118, v83), v119, v84)));
          v123 = v84;
          v124 = v78;
          v125 = v83;
          v126 = v102[-2];
          v127 = vaddq_f32(v102[-3], vsubq_f32(v122, vmulq_n_f32(v121, v90)));
          v128 = *v102;
          v102 += 10;
          v129 = vsubq_f32(vaddq_f32(v121, vminq_f32(v194, vmulq_f32(v128, vmaxq_f32(v191, v127)))), vaddq_f32(v101, vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v114), v36, v115), v37, v117), vmlaq_f32(vmlaq_f32(vmulq_f32(v41, v116), v42, v118), v43, v119))));
          v130 = *(float32x4_t *)(v91 + 16 * v100);
          if ((v94 & 1) != 0)
            v131 = v100;
          else
            v131 = 0;
          v132 = vminq_f32(vaddq_f32(v130, vmaxq_f32(vmulq_f32(v126, v129), vnegq_f32(v130))), (float32x4_t)v95[v131]);
          v133 = vsubq_f32(v132, v130);
          v134 = vmulq_f32(v208, v133);
          v35 = vmlaq_f32(v35, v134, v114);
          v36 = vmlaq_f32(v36, v134, v115);
          v37 = vmlaq_f32(v37, v134, v117);
          v83 = v125;
          v135 = vmulq_f32(v207, v133);
          v41 = vmlsq_f32(v41, v135, v116);
          v42 = vmlsq_f32(v42, v135, v118);
          v43 = vmlsq_f32(v43, v135, v119);
          v105 = vaddq_f32(v105, v133);
          v101 = vmlaq_f32(v101, v133, v190);
          v78 = v124;
          v84 = v123;
          *(float32x4_t *)(v91 + 16 * v100) = v132;
          v103 = vaddq_f32(v103, v132);
          v82 = v120;
          v86 = _X21 + 192;
          ++v100;
          _X21 += 192;
        }
        while (v92 != v100);
      }
      else
      {
        v105 = 0uLL;
        v103 = 0uLL;
        v106 = (float32x4_t)v77;
      }
      v136 = (float32x4_t *)(v60 + 272 + 16 * v92 + 160 * v92 + v96);
      v137 = vmulq_f32(v187, v105);
      v138 = vmulq_f32(v186, v105);
      v24 = vmlaq_f32(v24, v137, v188);
      v29 = vmlsq_f32(v29, v138, v188);
      v25 = vmlaq_f32(v25, v137, v189);
      v30 = vmlsq_f32(v30, v138, v189);
      v26 = vmlaq_f32(v26, v137, v192);
      v31 = vmlsq_f32(v31, v138, v192);
      if ((_DWORD)v93)
      {
        v139 = 0;
        v197 = vmulq_f32(v103, *(float32x4_t *)(v60 + 32));
        v195 = vmulq_f32(v103, *(float32x4_t *)(v60 + 48));
        v193 = vnegq_f32(v195);
        v140 = (float32x4_t *)(v60 + 16 * v93 + v96 + 176 * v92 + 464);
        v141 = 0uLL;
        v142 = v136;
        v89 = v185;
        do
        {
          _X21 = v86 + v139;
          __asm
          {
            PRFM            #0, [X21,#0x40]
            PRFM            #0, [X21,#0x80]
            PRFM            #0, [X21,#0xC0]
            PRFM            #0, [X21,#0x100]
          }
          v149 = v140[-12];
          v148 = v140[-11];
          v151 = v140[-10];
          v150 = v140[-9];
          v153 = v140[-6];
          v152 = v140[-5];
          v154 = v140[-8];
          v155 = v140[-7];
          v156 = v140[-4];
          v158 = v140[-2];
          v157 = v140[-1];
          v90 = a3;
          v159 = vaddq_f32(v140[-3], vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v204, v149), v148, v203), v151, v185), vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v205, v150), v154, v202), v155, v198), vmlaq_f32(vmlaq_f32(vmulq_f32(v200, v153), v152, v199), v156, v201))), vmulq_n_f32(v157, a3)));
          v160 = *v140;
          v140 += 13;
          v161 = vmlsq_f32(vmlsq_f32(*v142, v158, vsubq_f32(vmulq_f32(v160, v159), v157)), v158, vsubq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v149), v148, v25), v151, v26), vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v150), v36, v154), v37, v155)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v29, v149), v148, v30), v151, v31), vmlaq_f32(vmlaq_f32(vmulq_f32(v41, v153), v42, v152), v43, v156))));
          v162 = vminq_f32(v195, vmaxq_f32(v193, v161));
          v163 = vsubq_f32(v162, *v142);
          v164 = vmulq_f32(v187, v163);
          v165 = vmulq_f32(v186, v163);
          v24 = vmlaq_f32(v24, v164, v149);
          v29 = vmlsq_f32(v29, v165, v149);
          v25 = vmlaq_f32(v25, v164, v148);
          v30 = vmlsq_f32(v30, v165, v148);
          v26 = vmlaq_f32(v26, v164, v151);
          v31 = vmlsq_f32(v31, v165, v151);
          v166 = vmulq_f32(v208, v163);
          v35 = vmlaq_f32(v35, v166, v150);
          v36 = vmlaq_f32(v36, v166, v154);
          v37 = vmlaq_f32(v37, v166, v155);
          v167 = vmulq_f32(v207, v163);
          v41 = vmlsq_f32(v41, v167, v153);
          v42 = vmlsq_f32(v42, v167, v152);
          v43 = vmlsq_f32(v43, v167, v156);
          v141 = vorrq_s8(v141, (int8x16_t)vcgtq_f32(vabsq_f32(v161), v197));
          *v142++ = v162;
          v139 += 256;
        }
        while (v93 << 8 != v139);
        *(int8x16_t *)(v60 + 224) = v141;
        v86 += v139;
        v84 = v201;
        v77 = (int32x4_t)v202;
        v78 = v198;
        v83 = v199;
        v82 = v200;
        v88 = v203;
        v87 = v204;
      }
      else
      {
        v88 = v203;
        v87 = v204;
        v89 = v185;
        v77 = (int32x4_t)v106;
      }
      v60 = (unint64_t)&v136[13 * v93 + v93];
    }
    while (v60 < v85);
  }
  v168 = (float32x2x2_t)vzip1q_s32((int32x4_t)v24, (int32x4_t)v26);
  v169 = (float32x2x2_t)vzip2q_s32((int32x4_t)v24, (int32x4_t)v26);
  v170 = vzip1q_s32((int32x4_t)v25, (int32x4_t)v25);
  v171 = vzip2q_s32((int32x4_t)v25, (int32x4_t)v25);
  v172 = (float32x2x2_t)vzip1q_s32((int32x4_t)v29, (int32x4_t)v31);
  v173 = vzip1q_s32((int32x4_t)v30, (int32x4_t)v30);
  v174 = (float32x2x2_t)vzip1q_s32((int32x4_t)v35, (int32x4_t)v37);
  v175 = (float32x2x2_t)vzip2q_s32((int32x4_t)v35, (int32x4_t)v37);
  v176 = vzip1q_s32((int32x4_t)v36, (int32x4_t)v36);
  v177 = vzip2q_s32((int32x4_t)v36, (int32x4_t)v36);
  vst2_f32(v4, v168);
  vst2_f32((float *)v12->i32, v174);
  *v6 = vzip2q_s32((int32x4_t)v168, v170);
  v6[1] = vzip2q_s32((int32x4_t)v174, v176);
  vst2_f32((float *)v8->i32, v169);
  i32 = (float *)v8[1].i32;
  vst2_f32(i32, v175);
  *v10 = vzip2q_s32((int32x4_t)v169, v171);
  v10[1] = vzip2q_s32((int32x4_t)v175, v177);
  v178 = (float32x2x2_t)vzip1q_s32((int32x4_t)v41, (int32x4_t)v43);
  v179 = vzip1q_s32((int32x4_t)v42, (int32x4_t)v42);
  if (*((_DWORD *)result + 6))
  {
    vst2_f32((float *)v3->i32, v172);
    v13 = (float *)v3[1].i32;
    vst2_f32(v13, v178);
  }
  if (*((_DWORD *)result + 18))
  {
    *v5 = vzip2q_s32((int32x4_t)v172, v173);
    v5[1] = vzip2q_s32((int32x4_t)v178, v179);
  }
  v180 = (float32x2x2_t)vzip2q_s32((int32x4_t)v29, (int32x4_t)v31);
  v181 = vzip2q_s32((int32x4_t)v30, (int32x4_t)v30);
  v182 = (float32x2x2_t)vzip2q_s32((int32x4_t)v41, (int32x4_t)v43);
  v183 = vzip2q_s32((int32x4_t)v42, (int32x4_t)v42);
  if (*((_DWORD *)result + 30))
  {
    vst2_f32((float *)v7->i32, v180);
    v184 = (float *)v7[1].i32;
    vst2_f32(v184, v182);
  }
  if (*((_DWORD *)result + 42))
  {
    *v9 = vzip2q_s32((int32x4_t)v180, v181);
    v9[1] = vzip2q_s32((int32x4_t)v182, v183);
  }
  return result;
}

int32x4_t **physx::Dy::solveContact4(unsigned int *a1, uint64_t a2, int32x2_t a3, float a4)
{
  return physx::Dy::solveContact4_Block((int32x4_t **)(a2 + 48 * *a1), a3, a4);
}

unint64_t physx::Dy::writeBackContact4(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = a2 + 48 * *(unsigned int *)result;
  v3 = *(unsigned __int16 *)(v2 + 30);
  if (*(_WORD *)(v2 + 30))
  {
    v4 = *(_QWORD *)(v2 + 32);
    v5 = v4 + 16 * v3;
    v6 = (_QWORD *)(a2 + 48 * *(unsigned int *)result);
    v7 = (_DWORD *)v6[23];
    v8 = (_DWORD *)v6[17];
    v9 = (_DWORD *)v6[11];
    v10 = (_DWORD *)v6[5];
    do
    {
      v11 = v4 + 272;
      v12 = *(unsigned __int8 *)(v4 + 1);
      result = *(unsigned __int8 *)(v4 + 2);
      v13 = 16 * v12;
      if ((*(_BYTE *)(v4 + 3) & 1) == 0)
        v13 = 0;
      if (*(_BYTE *)(v4 + 1))
      {
        v14 = 0;
        do
        {
          v15 = *(_OWORD *)(v11 + 16 * v14);
          if (v10 && v14 < *(unsigned __int8 *)(v4 + 8))
            *v10++ = v15;
          if (v9 && v14 < *(unsigned __int8 *)(v4 + 9))
            *v9++ = DWORD1(v15);
          if (v8 && v14 < *(unsigned __int8 *)(v4 + 10))
            *v8++ = DWORD2(v15);
          if (v7 && v14 < *(unsigned __int8 *)(v4 + 11))
            *v7++ = HIDWORD(v15);
          ++v14;
        }
        while (v12 != v14);
      }
      if ((_DWORD)result)
      {
        v16 = 0;
        v17 = *(_OWORD *)(v4 + 224);
        do
        {
          if (*(_BYTE *)(v4 + v16 + 8))
          {
            if (*((_DWORD *)&v17 + v16))
              **(_BYTE **)(v4 + 8 * v16 + 240) = 1;
          }
          ++v16;
        }
        while (v16 != 4);
      }
      v4 = v11 + 16 * v12 + 160 * v12 + v13 + 16 * result + 208 * result;
    }
    while (v4 < v5);
  }
  return result;
}

int32x4_t **physx::Dy::solve1DStep4(int32x4_t **result, uint64_t a2, int32x2_t a3)
{
  int32x4_t *v3;
  int32x4_t *v4;
  int32x4_t *v5;
  int32x4_t *v6;
  int32x4_t *v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t *v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  float *i32;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float *v34;
  int32x4_t v35;
  float *v36;
  int32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  unsigned int v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  int32x4_t v85;
  int32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int32x4_t v91;
  int32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  uint64_t v98;
  uint64_t v99;
  int32x4_t v100;
  int32x4_t v101;
  uint64_t v102;
  uint64_t v103;
  int32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  float32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int8x16_t v186;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int v230;
  float32x4_t v231;
  int8x16_t v232;
  float32x4_t v233;
  int8x16_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x2x2_t v241;
  float32x2x2_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  float32x2x2_t v246;
  int32x4_t v247;
  float32x2x2_t v248;
  float32x2x2_t v249;
  int32x4_t v250;
  float32x2x2_t v251;
  int32x4_t v252;
  float32x2x2_t v253;
  int32x4_t v254;
  int32x4_t v255;
  float32x2x2_t v256;
  int32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  int8x16_t v311;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  int32x4_t v325;
  float32x4_t v326;
  int32x4_t v327;
  float32x4_t v328;
  int32x4_t v329;
  float32x4_t v330;
  int32x4_t v331;
  float32x4_t v332;
  int32x4_t v333;
  float32x4_t v334;
  int32x4_t v335;
  float32x4_t v336;

  v3 = result[4];
  if (v3)
  {
    v5 = *result;
    v4 = result[1];
    v7 = result[6];
    v6 = result[7];
    v9 = result[12];
    v8 = result[13];
    v10 = **result;
    v11 = vzip1q_s32(v10, *v9);
    v13 = result[18];
    v12 = result[19];
    v14 = *result + 1;
    v15 = v7[1];
    v16 = v6[1];
    v18 = v9[1];
    v19 = v13[1];
    v20 = vzip2q_s32(v10, *v9);
    v21 = vzip1q_s32(*v7, *v13);
    v22 = v12[1];
    v23 = vzip1q_s32(v11, v21);
    v24 = vzip2q_s32(v11, v21);
    v25 = vzip1q_s32(v20, vzip2q_s32(*v7, *v13));
    v26 = vzip1q_s32(*v4, *v8);
    v27 = vzip1q_s32(*v6, *v12);
    v28 = vzip1q_s32(v26, v27);
    v29 = vzip2q_s32(v26, v27);
    v30 = vzip1q_s32(vzip2q_s32(*v4, *v8), vzip2q_s32(*v6, *v12));
    v31 = vzip1q_s32(*v14, v18);
    v32 = vzip2q_s32(*v14, v18);
    v33 = vzip1q_s32(v15, v19);
    v35 = v4[1];
    v37 = v8[1];
    v38 = (float32x4_t)vzip1q_s32(v31, v33);
    v39 = vzip2q_s32(v31, v33);
    v40 = vzip1q_s32(v32, vzip2q_s32(v15, v19));
    v41 = vzip1q_s32(v35, v37);
    v42 = vzip1q_s32(v16, v22);
    v43 = vzip1q_s32(v41, v42);
    v44 = vzip2q_s32(v41, v42);
    v45 = vzip1q_s32(vzip2q_s32(v35, v37), vzip2q_s32(v16, v22));
    if (v3->i32[1])
    {
      v46 = 0;
      v335 = v29;
      v48 = v5[2];
      v47 = v5[3];
      v331 = v43;
      v50 = v9[2];
      v49 = v9[3];
      v51 = vzip1q_s32(v47, v49);
      v52 = vzip2q_s32(v47, v49);
      v54 = v7[2];
      v53 = v7[3];
      v329 = v45;
      v56 = v13[2];
      v55 = (float32x4_t)v13[3];
      v57 = vzip1q_s32(v53, (int32x4_t)v55);
      v320 = (float32x4_t)vzip1q_s32(v51, v57);
      v321 = (float32x4_t)vzip2q_s32(v51, v57);
      v323 = (float32x4_t)vzip1q_s32(v52, vzip2q_s32(v53, (int32x4_t)v55));
      v325 = v39;
      v59 = v4[2];
      v58 = v4[3];
      v61 = v8[2];
      v60 = v8[3];
      v327 = v30;
      v62 = vzip1q_s32(v58, v60);
      v63 = vzip2q_s32(v58, v60);
      v333 = v44;
      v64 = v6[2];
      v65 = v6[3];
      v66 = (float32x4_t)v12[2];
      v67 = v12[3];
      v68 = v28;
      v69 = vzip1q_s32(v65, v67);
      v314 = (float32x4_t)vzip1q_s32(v62, v69);
      v316 = (float32x4_t)vzip2q_s32(v62, v69);
      v318 = (float32x4_t)vzip1q_s32(v63, vzip2q_s32(v65, v67));
      v70 = vzip1q_s32(v48, v50);
      v71 = vzip2q_s32(v48, v50);
      v72 = vzip1q_s32(v54, v56);
      v73 = (float32x4_t)vzip1q_s32(v70, v72);
      v74 = (float32x4_t)vzip2q_s32(v70, v72);
      v75 = (float32x4_t)vzip1q_s32(v71, vzip2q_s32(v54, v56));
      v76 = vzip1q_s32(v59, v61);
      v77 = vzip1q_s32(v64, (int32x4_t)v66);
      v78 = (float32x4_t)vzip1q_s32(v76, v77);
      v79 = (float32x4_t)vzip2q_s32(v76, v77);
      v80 = *((unsigned int *)result + 6);
      v81 = a2 + ((unint64_t)*((unsigned int *)result + 5) << 6);
      v82 = (float32x4_t)vzip1q_s32(vzip2q_s32(v59, v61), vzip2q_s32(v64, (int32x4_t)v66));
      v83 = *((unsigned int *)result + 30);
      v84 = a2 + ((unint64_t)*((unsigned int *)result + 29) << 6);
      v85 = vzip1q_s32(*(int32x4_t *)v81, *(int32x4_t *)v84);
      v86 = vzip2q_s32(*(int32x4_t *)v81, *(int32x4_t *)v84);
      v87 = *((unsigned int *)result + 18);
      v88 = a2 + ((unint64_t)*((unsigned int *)result + 17) << 6);
      v89 = *((unsigned int *)result + 42);
      v90 = a2 + ((unint64_t)*((unsigned int *)result + 41) << 6);
      v91 = vzip1q_s32(*(int32x4_t *)v88, *(int32x4_t *)v90);
      v92 = vzip2q_s32(*(int32x4_t *)v88, *(int32x4_t *)v90);
      v93 = (float32x4_t)vzip1q_s32(v85, v91);
      v94 = v38;
      v95 = (float32x4_t)vzip2q_s32(v85, v91);
      v96 = (float32x4_t)vzip1q_s32(v86, v92);
      v97 = (float32x4_t)vzip2q_s32(v86, v92);
      v98 = a2 + (v80 << 6);
      v99 = a2 + (v83 << 6);
      v100 = vzip1q_s32(*(int32x4_t *)v98, *(int32x4_t *)v99);
      v101 = vzip2q_s32(*(int32x4_t *)v98, *(int32x4_t *)v99);
      v102 = a2 + (v87 << 6);
      v103 = a2 + (v89 << 6);
      v104 = vzip1q_s32(*(int32x4_t *)v102, *(int32x4_t *)v103);
      v105 = vzip2q_s32(*(int32x4_t *)v102, *(int32x4_t *)v103);
      v106 = (float32x4_t)vzip1q_s32(v100, v104);
      v107 = (float32x4_t)vzip2q_s32(v100, v104);
      v108 = (float32x4_t)vzip1q_s32(v101, v105);
      v109 = (float32x4_t)vzip2q_s32(v101, v105);
      v55.i64[0] = 0xBF000000BF000000;
      v55.i64[1] = 0xBF000000BF000000;
      v66.i64[0] = 0xBF000000BF000000;
      v66.i64[1] = 0xBF000000BF000000;
      v110 = vmlaq_f32(v66, v97, v97);
      v111 = (float32x4_t)v3[10];
      v112 = (float32x4_t)v3[11];
      v114 = (float32x4_t)v3[12];
      v113 = (float32x4_t)v3[13];
      v115 = *(int32x4_t *)(v81 + 28);
      v116 = *(int32x4_t *)(v81 + 40);
      v117 = vmlaq_f32(vmlaq_f32(vmulq_f32(v93, v111), v112, v95), v114, v96);
      v118 = vmlaq_f32(vmlaq_f32(vmulq_f32(v111, v110), v97, vmlsq_f32(vmulq_f32(v95, v114), v112, v96)), v117, v93);
      v119 = vmlaq_f32(vmlaq_f32(vmulq_f32(v112, v110), v97, vmlsq_f32(vmulq_f32(v96, v111), v114, v93)), v117, v95);
      v120 = vmlaq_f32(vmlaq_f32(vmulq_f32(v110, v114), v97, vmlsq_f32(vmulq_f32(v93, v112), v111, v95)), v117, v96);
      v121 = vmlaq_f32(v55, v109, v109);
      v122 = (float32x4_t)v3[14];
      v123 = (float32x4_t)v3[15];
      v124 = vmlaq_f32(vmulq_f32(v121, v113), v109, vmlsq_f32(vmulq_f32(v107, v123), v122, v108));
      v125 = vmlaq_f32(vmulq_f32(v121, v122), v109, vmlsq_f32(vmulq_f32(v108, v113), v123, v106));
      v126 = vmlaq_f32(vmulq_f32(v121, v123), v109, vmlsq_f32(vmulq_f32(v106, v122), v113, v107));
      v127 = *(int32x4_t *)(v88 + 28);
      v128 = vmlaq_f32(vmlaq_f32(vmulq_f32(v106, v113), v122, v107), v123, v108);
      v129 = vmlaq_f32(v124, v128, v106);
      v130 = *(int32x4_t *)(v88 + 40);
      v131 = vmlaq_f32(v125, v128, v107);
      v132 = *(int32x4_t *)(v84 + 28);
      v133 = vmlaq_f32(v126, v128, v108);
      v134 = *(int32x4_t *)(v90 + 28);
      v135 = vzip1q_s32(v115, v132);
      v136 = vzip2q_s32(v115, v132);
      v137 = vzip1q_s32(v127, v134);
      v138 = vzip2q_s32(v127, v134);
      v297 = (float32x4_t)vzip2q_s32(v135, v137);
      v298 = (float32x4_t)vzip1q_s32(v135, v137);
      v139 = *(int32x4_t *)(v84 + 40);
      v140 = vzip1q_s32(v136, v138);
      v141 = *(int32x4_t *)(v90 + 40);
      v142 = vzip1q_s32(v116, v139);
      v143 = vzip1q_s32(v130, v141);
      v295 = (float32x4_t)vzip1q_s32(v142, v143);
      v296 = (float32x4_t)v140;
      v144 = vzip2q_s32(v142, v143);
      v145 = vzip2q_s32(v116, v139);
      v116.i32[0] = vdupq_laneq_s32(v116, 3).u32[0];
      v116.i32[1] = v139.i32[3];
      v293 = (float32x4_t)vzip1q_s32(v145, vzip2q_s32(v130, v141));
      v294 = (float32x4_t)v144;
      v145.i32[0] = vdupq_laneq_s32(v130, 3).u32[0];
      v145.i32[1] = v141.i32[3];
      v116.i32[2] = *(_DWORD *)(v81 + 56);
      v116.i32[3] = *(_DWORD *)(v84 + 56);
      v145.i32[2] = *(_DWORD *)(v88 + 56);
      v145.i32[3] = *(_DWORD *)(v90 + 56);
      v291 = (float32x4_t)vzip2q_s32(v116, v145);
      v292 = (float32x4_t)vzip1q_s32(v116, v145);
      v146 = *(int32x4_t *)(v98 + 28);
      v147 = *(int32x4_t *)(v99 + 28);
      v148 = vzip1q_s32(v146, v147);
      v149 = vzip2q_s32(v146, v147);
      v150 = *(int32x4_t *)(v102 + 28);
      v151 = *(int32x4_t *)(v103 + 28);
      v152 = vzip1q_s32(v150, v151);
      v289 = (float32x4_t)vzip2q_s32(v148, v152);
      v290 = (float32x4_t)vzip1q_s32(v148, v152);
      v153 = vzip1q_s32(v149, vzip2q_s32(v150, v151));
      v154 = *(int32x4_t *)(v98 + 40);
      v155 = *(int32x4_t *)(v99 + 40);
      v156 = vzip1q_s32(v154, v155);
      v157 = vzip2q_s32(v154, v155);
      v154.i32[0] = vdupq_laneq_s32(v154, 3).u32[0];
      v154.i32[1] = v155.i32[3];
      v158 = *(int32x4_t *)(v102 + 40);
      v159 = *(int32x4_t *)(v103 + 40);
      v160 = vzip1q_s32(v158, v159);
      v287 = (float32x4_t)vzip1q_s32(v156, v160);
      v288 = (float32x4_t)v153;
      v161 = vzip2q_s32(v156, v160);
      v162 = vzip2q_s32(v158, v159);
      v158.i32[0] = vdupq_laneq_s32(v158, 3).u32[0];
      v158.i32[1] = v159.i32[3];
      v154.i32[2] = *(_DWORD *)(v98 + 56);
      v154.i32[3] = *(_DWORD *)(v99 + 56);
      v158.i32[2] = *(_DWORD *)(v102 + 56);
      v158.i32[3] = *(_DWORD *)(v103 + 56);
      v285 = (float32x4_t)vzip1q_s32(v157, v162);
      v286 = (float32x4_t)v161;
      v283 = (float32x4_t)vzip2q_s32(v154, v158);
      v284 = (float32x4_t)vzip1q_s32(v154, v158);
      v163 = vaddq_f32(v118, v118);
      v281 = vsubq_f32(vaddq_f32(v320, v163), v111);
      v164 = vaddq_f32(v119, v119);
      v279 = vsubq_f32(vaddq_f32(v321, v164), v112);
      v165 = vaddq_f32(v120, v120);
      v39 = v325;
      v30 = v327;
      v277 = vsubq_f32(vaddq_f32(v323, v165), v114);
      v166 = vaddq_f32(v129, v129);
      v275 = vsubq_f32(vaddq_f32(v314, v166), v113);
      v167 = vaddq_f32(v131, v131);
      v273 = vsubq_f32(vaddq_f32(v316, v167), v122);
      v168 = vaddq_f32(v133, v133);
      v271 = vsubq_f32(vaddq_f32(v318, v168), v123);
      v38 = v94;
      v270 = vaddq_f32((float32x4_t)v3[37], vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, (float32x4_t)v3[22]), v74, (float32x4_t)v3[19]), v73, (float32x4_t)v3[16]), vmlaq_f32(vmlaq_f32(vmulq_f32(v82, (float32x4_t)v3[31]), v79, (float32x4_t)v3[28]), v78, (float32x4_t)v3[25])));
      v43 = v331;
      v269 = vaddq_f32((float32x4_t)v3[38], vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, (float32x4_t)v3[23]), v74, (float32x4_t)v3[20]), v73, (float32x4_t)v3[17]), vmlaq_f32(vmlaq_f32(vmulq_f32(v82, (float32x4_t)v3[32]), v79, (float32x4_t)v3[29]), v78, (float32x4_t)v3[26])));
      v29 = v335;
      v302 = v75;
      v303 = v74;
      v304 = v73;
      v299 = v82;
      v300 = v79;
      v301 = v78;
      v45 = v329;
      v129.i32[0] = *(_DWORD *)(v81 + 60);
      v129.i32[1] = *(_DWORD *)(v88 + 60);
      v129.i32[2] = *(_DWORD *)(v84 + 60);
      v129.i32[3] = *(_DWORD *)(v90 + 60);
      v267 = v129;
      v268 = vaddq_f32((float32x4_t)v3[39], vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v75, (float32x4_t)v3[24]), v74, (float32x4_t)v3[21]), v73, (float32x4_t)v3[18]), vmlaq_f32(vmlaq_f32(vmulq_f32(v82, (float32x4_t)v3[33]), v79, (float32x4_t)v3[30]), v78, (float32x4_t)v3[27])));
      v129.i32[0] = *(_DWORD *)(v98 + 60);
      v129.i32[1] = *(_DWORD *)(v102 + 60);
      v129.i32[2] = *(_DWORD *)(v99 + 60);
      v129.i32[3] = *(_DWORD *)(v103 + 60);
      v266 = v129;
      result = (int32x4_t **)&v3[40];
      v265 = (float32x4_t)vdupq_lane_s32(a3, 0);
      v169 = (float32x4_t)v3[6];
      v324 = (float32x4_t)v3[5];
      v170 = (float32x4_t)v3[3];
      v171 = (float32x4_t)v3[4];
      v278 = v165;
      v172 = vnegq_f32(v165);
      v28 = v68;
      v282 = v163;
      v262 = vnegq_f32(v163);
      v263 = v172;
      v280 = v164;
      v173 = vnegq_f32(v164);
      v44 = v333;
      v272 = v168;
      v260 = vnegq_f32(v168);
      v261 = v173;
      v276 = v166;
      v274 = v167;
      v258 = vnegq_f32(v167);
      v259 = vnegq_f32(v166);
      v264 = v169;
      do
      {
        v313 = (float32x4_t)v25;
        v315 = (float32x4_t)v23;
        v317 = (float32x4_t)v24;
        v319 = (float32x4_t)v40;
        v322 = (float32x4_t)v28;
        v326 = (float32x4_t)v39;
        v328 = (float32x4_t)v30;
        v330 = (float32x4_t)v45;
        v332 = (float32x4_t)v43;
        v334 = (float32x4_t)v44;
        v336 = (float32x4_t)v29;
        __asm { PRFM            #0, [X0,#0x170] }
        v179 = *((float32x4_t *)result + 2);
        v309 = *((float32x4_t *)result + 1);
        v310 = v179;
        v180 = vaddq_f32(*((float32x4_t *)result + 8), vmlaq_f32(vmulq_f32(v280, v179), v309, v263));
        v181 = vaddq_f32(*((float32x4_t *)result + 9), vmlaq_f32(vmulq_f32(v278, *(float32x4_t *)result), v179, v262));
        v182 = vaddq_f32(*((float32x4_t *)result + 10), vmlaq_f32(vmulq_f32(v282, v309), *(float32x4_t *)result, v261));
        v307 = *((float32x4_t *)result + 6);
        v308 = *(float32x4_t *)result;
        v305 = *((float32x4_t *)result + 4);
        v306 = *((float32x4_t *)result + 5);
        v183 = vaddq_f32(*((float32x4_t *)result + 12), vmlaq_f32(vmulq_f32(v274, v307), v306, v260));
        v184 = vaddq_f32(*((float32x4_t *)result + 13), vmlaq_f32(vmulq_f32(v272, v305), v307, v259));
        v185 = vaddq_f32(*((float32x4_t *)result + 14), vmlaq_f32(vmulq_f32(v276, v306), v305, v258));
        v186.i64[0] = 0x1000000010;
        v186.i64[1] = 0x1000000010;
        v311 = *((int8x16_t *)result + 22);
        __asm { FMOV            V24.4S, #1.0 }
        v188 = (float32x4_t)vbicq_s8(_Q24, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v311, v186)));
        v189 = vmlaq_f32(vmlaq_f32(vmulq_f32(v298, v180), v181, v297), v182, v296);
        v190 = vmlaq_f32(vmlaq_f32(vmulq_f32(v295, v180), v181, v294), v182, v293);
        v191 = vmlaq_f32(vmlaq_f32(vmulq_f32(v292, v180), v181, v291), v182, v267);
        v192 = vmlaq_f32(vmlaq_f32(vmulq_f32(v290, v183), v184, v289), v185, v288);
        v193 = vmlaq_f32(vmlaq_f32(vmulq_f32(v287, v183), v184, v286), v185, v285);
        v194 = vmlaq_f32(vmlaq_f32(vmulq_f32(v284, v183), v184, v283), v185, v266);
        v196 = (float32x4_t)v3[30];
        v195 = (float32x4_t)v3[31];
        v198 = (float32x4_t)v3[28];
        v197 = (float32x4_t)v3[29];
        v199 = v169;
        v201 = (float32x4_t)v3[24];
        v200 = (float32x4_t)v3[25];
        v202 = v170;
        v203 = v171;
        v204 = (float32x4_t)v3[22];
        v205 = (float32x4_t)v3[23];
        v207 = (float32x4_t)v3[18];
        v206 = (float32x4_t)v3[19];
        v208 = (float32x4_t)v3[16];
        v209 = (float32x4_t)v3[17];
        v210 = vmulq_f32((float32x4_t)v3[34], vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v194, v195), v193, v198), v192, v200), v191, v204), v190, v206), v189, v208));
        v211 = (float32x4_t)v3[32];
        v212 = (float32x4_t)v3[33];
        v213 = (float32x4_t)v3[26];
        v214 = (float32x4_t)v3[27];
        v215 = (float32x4_t)v3[20];
        v216 = (float32x4_t)v3[21];
        v217 = vmulq_f32((float32x4_t)v3[35], vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v194, v211), v193, v197), v192, v213), v191, v205), v190, v215), v189, v209));
        v218 = vmulq_f32((float32x4_t)v3[36], vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v194, v212), v193, v196), v192, v214), v191, v201), v190, v216), v189, v207));
        v219 = vmlsq_f32(v189, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v207, v218), v217, v209), v210, v208));
        v220 = vmlsq_f32(v190, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v216, v218), v217, v215), v210, v206));
        v221 = vmlsq_f32(v191, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v201, v218), v217, v205), v210, v204));
        v222 = vmlsq_f32(v192, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v214, v218), v217, v213), v210, v200));
        v223 = vmlsq_f32(v193, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v196, v218), v217, v197), v210, v198));
        v224 = vmlsq_f32(v194, v188, vmlaq_f32(vmlaq_f32(vmulq_f32(v212, v218), v217, v211), v210, v195));
        v225 = vmlaq_f32(vmulq_f32(v302, v221), v303, v220);
        v226 = vmlaq_f32(vmulq_f32(v299, v224), v300, v223);
        v227 = vaddq_f32(vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v277, v310), v279, v309), v281, *(float32x4_t *)result), vmlaq_f32(vmlaq_f32(vmulq_f32(v271, v307), v273, v306), v275, v305)), vsubq_f32(*((float32x4_t *)result + 3), vmulq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v268, v218), v217, v269), v210, v270), v188)));
        v228 = vaddq_f32(vmlaq_f32(vmulq_f32(v324, vmlaq_f32(vmlaq_f32(vmulq_f32(v221, v221), v220, v220), v219, v219)), vmlaq_f32(vmlaq_f32(vmulq_f32(v310, v310), v309, v309), v308, v308), v202), vmlaq_f32(vmulq_f32(v199, vmlaq_f32(vmlaq_f32(vmulq_f32(v224, v224), v223, v223), v222, v222)), vmlaq_f32(vmlaq_f32(vmulq_f32(v307, v307), v306, v306), v305, v305), v203));
        v229 = vrecpeq_f32(v228);
        v230 = 4;
        do
        {
          v229 = vmulq_f32(v229, vrecpsq_f32(v229, v228));
          --v230;
        }
        while (v230);
        v231 = (float32x4_t)vandq_s8((int8x16_t)v229, (int8x16_t)vcgtzq_f32(v228));
        v232.i64[0] = 0x4000000040;
        v232.i64[1] = 0x4000000040;
        v233 = *((float32x4_t *)result + 19);
        v234.i64[0] = 0x80000000800000;
        v234.i64[1] = 0x80000000800000;
        v235 = vmaxq_f32(vminq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v231, vaddq_f32(*((float32x4_t *)result + 16), vmaxq_f32(vminq_f32(vmulq_f32(vmlsq_f32(vaddq_f32(v227, vmulq_f32(*((float32x4_t *)result + 21), vsubq_f32(vmlaq_f32(v225, v304, v219), vmlaq_f32(v226, v301, v222)))), v265, *((float32x4_t *)result + 16)), *((float32x4_t *)result + 7)),
                               *((float32x4_t *)result + 20)),
                             (float32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v311, v232)), (int8x16_t)vnegq_f32(*((float32x4_t *)result + 20)), v234)))), vaddq_f32(vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v313, v310), v317, v309), v315, v308), vmlaq_f32(vmlaq_f32(vmulq_f32(v328, v307), v336, v306), v322, v305)), vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v319, v221), v326, v220), v38, v219), vmlaq_f32(vmlaq_f32(vmulq_f32(v330, v224), v334, v223), v332, v222))), vmulq_f32(v231, *((float32x4_t *)result + 11))), v233, *((float32x4_t *)result + 15)), *((float32x4_t *)result + 18)), *((float32x4_t *)result + 17));
        v236 = vsubq_f32(v235, v233);
        v170 = v202;
        v237 = vmulq_f32(v202, v236);
        v23 = (int32x4_t)vmlaq_f32(v315, v237, v308);
        v24 = (int32x4_t)vmlaq_f32(v317, v237, v309);
        v25 = (int32x4_t)vmlaq_f32(v313, v237, v310);
        v171 = v203;
        v238 = vmulq_f32(v203, v236);
        v28 = (int32x4_t)vmlsq_f32(v322, v238, v305);
        v29 = (int32x4_t)vmlsq_f32(v336, v238, v306);
        v30 = (int32x4_t)vmlsq_f32(v328, v238, v307);
        v239 = vmulq_f32(v324, v236);
        v38 = vmlaq_f32(v38, v239, v219);
        v39 = (int32x4_t)vmlaq_f32(v326, v239, v220);
        v40 = (int32x4_t)vmlaq_f32(v319, v239, v221);
        v169 = v264;
        v240 = vmulq_f32(v264, v236);
        v43 = (int32x4_t)vmlsq_f32(v332, v240, v222);
        v44 = (int32x4_t)vmlsq_f32(v334, v240, v223);
        v45 = (int32x4_t)vmlsq_f32(v330, v240, v224);
        *((float32x4_t *)result + 19) = v235;
        ++v46;
        result += 46;
      }
      while (v46 < v3->i32[1]);
    }
    v241 = (float32x2x2_t)vzip1q_s32(v23, v25);
    v242 = (float32x2x2_t)vzip2q_s32(v23, v25);
    v243 = vzip1q_s32(v24, v24);
    v244 = vzip2q_s32(v24, v24);
    v245 = vzip2q_s32((int32x4_t)v241, v243);
    v246 = (float32x2x2_t)vzip1q_s32((int32x4_t)v38, v40);
    v247 = vzip1q_s32(v39, v39);
    vst2_f32((float *)v5->i32, v241);
    vst2_f32((float *)v14->i32, v246);
    v248 = (float32x2x2_t)vzip1q_s32(v28, v30);
    v249 = (float32x2x2_t)vzip2q_s32((int32x4_t)v38, v40);
    *v7 = v245;
    v7[1] = vzip2q_s32((int32x4_t)v246, v247);
    v250 = vzip2q_s32(v39, v39);
    vst2_f32((float *)v9->i32, v242);
    i32 = (float *)v9[1].i32;
    vst2_f32(i32, v249);
    v251 = (float32x2x2_t)vzip2q_s32(v28, v30);
    v252 = vzip1q_s32(v29, v29);
    *v13 = vzip2q_s32((int32x4_t)v242, v244);
    v13[1] = vzip2q_s32((int32x4_t)v249, v250);
    v253 = (float32x2x2_t)vzip1q_s32(v43, v45);
    v254 = vzip1q_s32(v44, v44);
    vst2_f32((float *)v4->i32, v248);
    v34 = (float *)v4[1].i32;
    vst2_f32(v34, v253);
    *v6 = vzip2q_s32((int32x4_t)v248, v252);
    v6[1] = vzip2q_s32((int32x4_t)v253, v254);
    v255 = vzip2q_s32(v29, v29);
    v256 = (float32x2x2_t)vzip2q_s32(v43, v45);
    vst2_f32((float *)v8->i32, v251);
    v257 = vzip2q_s32(v44, v44);
    v36 = (float *)v8[1].i32;
    vst2_f32(v36, v256);
    *v12 = vzip2q_s32((int32x4_t)v251, v255);
    v12[1] = vzip2q_s32((int32x4_t)v256, v257);
  }
  return result;
}

